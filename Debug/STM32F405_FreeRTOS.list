
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002acc  08019e08  08019e08  00029e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c8d4  0801c8d4  000340e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c8d4  0801c8d4  0002c8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c8dc  0801c8dc  000340e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c8dc  0801c8dc  0002c8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c8e0  0801c8e0  0002c8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000061c  20000000  0801c8e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00003aa0  2000061c  0801cf00  0003061c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  200040bc  080209a0  000340bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  000340e4  2**0
                  CONTENTS
 12 .bss          00009c60  200040e4  200040e4  000340e4  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  2000dd44  2000dd44  000340e4  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000340e4  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00034114  2**0
                  CONTENTS, READONLY
 16 .debug_info   000418f2  00000000  00000000  00034157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000c5db  00000000  00000000  00075a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003030  00000000  00000000  00082028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002445  00000000  00000000  00085058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001a27b  00000000  00000000  0008749d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004c9d4  00000000  00000000  000a1718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fa99f  00000000  00000000  000ee0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000cfbc  00000000  00000000  001e8a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  001f5a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200040e4 	.word	0x200040e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801984c 	.word	0x0801984c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200040e8 	.word	0x200040e8
 80001cc:	0801984c 	.word	0x0801984c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 8000f6c:	4b64      	ldr	r3, [pc, #400]	; (8001100 <estimatorEnqueue+0x19c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80bf 	beq.w	80010f4 <estimatorEnqueue+0x190>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8000f76:	4b63      	ldr	r3, [pc, #396]	; (8001104 <estimatorEnqueue+0x1a0>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	74fb      	strb	r3, [r7, #19]
  if (isInInterrupt) {
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d016      	beq.n	8000fbc <estimatorEnqueue+0x58>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 8000f92:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <estimatorEnqueue+0x19c>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f012 fa75 	bl	801348c <xQueueGenericSendFromISR>
 8000fa2:	6178      	str	r0, [r7, #20]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d110      	bne.n	8000fcc <estimatorEnqueue+0x68>
      portYIELD();
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <estimatorEnqueue+0x1a4>)
 8000fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	f3bf 8f4f 	dsb	sy
 8000fb6:	f3bf 8f6f 	isb	sy
 8000fba:	e007      	b.n	8000fcc <estimatorEnqueue+0x68>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <estimatorEnqueue+0x19c>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	f012 f953 	bl	8013270 <xQueueGenericSend>
 8000fca:	6178      	str	r0, [r7, #20]
  }

  if (result == pdTRUE) {
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d105      	bne.n	8000fde <estimatorEnqueue+0x7a>
    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <estimatorEnqueue+0x1a8>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <estimatorEnqueue+0x1a8>)
 8000fda:	6093      	str	r3, [r2, #8]
 8000fdc:	e004      	b.n	8000fe8 <estimatorEnqueue+0x84>
  } else {
    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <estimatorEnqueue+0x1ac>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a4a      	ldr	r2, [pc, #296]	; (8001110 <estimatorEnqueue+0x1ac>)
 8000fe6:	6093      	str	r3, [r2, #8]
  }

  // events
  switch (measurement->type) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b0b      	cmp	r3, #11
 8000fee:	f200 8083 	bhi.w	80010f8 <estimatorEnqueue+0x194>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <estimatorEnqueue+0x94>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	0800104f 	.word	0x0800104f
 8001000:	0800105f 	.word	0x0800105f
 8001004:	08001067 	.word	0x08001067
 8001008:	08001081 	.word	0x08001081
 800100c:	08001089 	.word	0x08001089
 8001010:	08001091 	.word	0x08001091
 8001014:	08001099 	.word	0x08001099
 8001018:	080010a9 	.word	0x080010a9
 800101c:	080010dd 	.word	0x080010dd
 8001020:	080010e5 	.word	0x080010e5
 8001024:	080010ed 	.word	0x080010ed
    case MeasurementTypeTDOA:
      eventTrigger_estTDOA_payload.idA = measurement->data.tdoa.anchorIds[0];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <estimatorEnqueue+0x1b0>)
 8001030:	701a      	strb	r2, [r3, #0]
      eventTrigger_estTDOA_payload.idB = measurement->data.tdoa.anchorIds[1];
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <estimatorEnqueue+0x1b0>)
 800103a:	705a      	strb	r2, [r3, #1]
      eventTrigger_estTDOA_payload.distanceDiff = measurement->data.tdoa.distanceDiff;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <estimatorEnqueue+0x1b0>)
 8001042:	f8c3 2002 	str.w	r2, [r3, #2]
      eventTrigger(&eventTrigger_estTDOA);
 8001046:	4834      	ldr	r0, [pc, #208]	; (8001118 <estimatorEnqueue+0x1b4>)
 8001048:	f004 fcd6 	bl	80059f8 <eventTrigger>
      break;
 800104c:	e055      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypePosition:
      // for additional data, see locSrv.{x,y,z} and lighthouse.{x,y,z}
      eventTrigger_estPosition_payload.source = measurement->data.position.source;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7d1a      	ldrb	r2, [r3, #20]
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <estimatorEnqueue+0x1b8>)
 8001054:	701a      	strb	r2, [r3, #0]
      eventTrigger(&eventTrigger_estPosition);
 8001056:	4832      	ldr	r0, [pc, #200]	; (8001120 <estimatorEnqueue+0x1bc>)
 8001058:	f004 fcce 	bl	80059f8 <eventTrigger>
      break;
 800105c:	e04d      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypePose:
      // no payload needed, see locSrv.{x,y,z,qx,qy,qz,qw}
      eventTrigger(&eventTrigger_estPose);
 800105e:	4831      	ldr	r0, [pc, #196]	; (8001124 <estimatorEnqueue+0x1c0>)
 8001060:	f004 fcca 	bl	80059f8 <eventTrigger>
      break;
 8001064:	e049      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeDistance:
      eventTrigger_estDistance_payload.id = measurement->data.distance.anchorId;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7c1a      	ldrb	r2, [r3, #16]
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <estimatorEnqueue+0x1c4>)
 800106c:	701a      	strb	r2, [r3, #0]
      eventTrigger_estDistance_payload.distance = measurement->data.distance.distance;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <estimatorEnqueue+0x1c4>)
 8001074:	f8c3 2001 	str.w	r2, [r3, #1]
      eventTrigger(&eventTrigger_estDistance);
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <estimatorEnqueue+0x1c8>)
 800107a:	f004 fcbd 	bl	80059f8 <eventTrigger>
      break;
 800107e:	e03c      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeTOF:
      // no payload needed, see range.zrange
      eventTrigger(&eventTrigger_estTOF);
 8001080:	482b      	ldr	r0, [pc, #172]	; (8001130 <estimatorEnqueue+0x1cc>)
 8001082:	f004 fcb9 	bl	80059f8 <eventTrigger>
      break;
 8001086:	e038      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeAbsoluteHeight:
      // no payload needed, see CONFIG_DECK_LOCO_2D_POSITION
      eventTrigger(&eventTrigger_estAbsoluteHeight);
 8001088:	482a      	ldr	r0, [pc, #168]	; (8001134 <estimatorEnqueue+0x1d0>)
 800108a:	f004 fcb5 	bl	80059f8 <eventTrigger>
      break;
 800108e:	e034      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeFlow:
      // no payload needed, see motion.{deltaX,deltaY}
      eventTrigger(&eventTrigger_estFlow);
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <estimatorEnqueue+0x1d4>)
 8001092:	f004 fcb1 	bl	80059f8 <eventTrigger>
      break;
 8001096:	e030      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeYawError:
      eventTrigger_estYawError_payload.yawError = measurement->data.yawError.yawError;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <estimatorEnqueue+0x1d8>)
 800109e:	6013      	str	r3, [r2, #0]
      eventTrigger(&eventTrigger_estYawError);
 80010a0:	4827      	ldr	r0, [pc, #156]	; (8001140 <estimatorEnqueue+0x1dc>)
 80010a2:	f004 fca9 	bl	80059f8 <eventTrigger>
      break;
 80010a6:	e028      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeSweepAngle:
      eventTrigger_estSweepAngle_payload.sensorId = measurement->data.sweepAngle.sensorId;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1a      	ldrb	r2, [r3, #24]
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010ae:	701a      	strb	r2, [r3, #0]
      eventTrigger_estSweepAngle_payload.baseStationId = measurement->data.sweepAngle.baseStationId;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e5a      	ldrb	r2, [r3, #25]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010b6:	705a      	strb	r2, [r3, #1]
      eventTrigger_estSweepAngle_payload.sweepId = measurement->data.sweepAngle.sweepId;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e9a      	ldrb	r2, [r3, #26]
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010be:	709a      	strb	r2, [r3, #2]
      eventTrigger_estSweepAngle_payload.t = measurement->data.sweepAngle.t;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010c6:	f8c3 2003 	str.w	r2, [r3, #3]
      eventTrigger_estSweepAngle_payload.sweepAngle = measurement->data.sweepAngle.measuredSweepAngle;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010d0:	f8c3 2007 	str.w	r2, [r3, #7]
      eventTrigger(&eventTrigger_estSweepAngle);
 80010d4:	481c      	ldr	r0, [pc, #112]	; (8001148 <estimatorEnqueue+0x1e4>)
 80010d6:	f004 fc8f 	bl	80059f8 <eventTrigger>
      break;
 80010da:	e00e      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeGyroscope:
      // no payload needed, see gyro.{x,y,z}
      eventTrigger(&eventTrigger_estGyroscope);
 80010dc:	481b      	ldr	r0, [pc, #108]	; (800114c <estimatorEnqueue+0x1e8>)
 80010de:	f004 fc8b 	bl	80059f8 <eventTrigger>
      break;
 80010e2:	e00a      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeAcceleration:
      // no payload needed, see acc.{x,y,z}
      eventTrigger(&eventTrigger_estAcceleration);
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <estimatorEnqueue+0x1ec>)
 80010e6:	f004 fc87 	bl	80059f8 <eventTrigger>
      break;
 80010ea:	e006      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeBarometer:
      // no payload needed, see baro.asl
      eventTrigger(&eventTrigger_estBarometer);
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <estimatorEnqueue+0x1f0>)
 80010ee:	f004 fc83 	bl	80059f8 <eventTrigger>
      break;
 80010f2:	e002      	b.n	80010fa <estimatorEnqueue+0x196>
    return;
 80010f4:	bf00      	nop
 80010f6:	e000      	b.n	80010fa <estimatorEnqueue+0x196>
    default:
      break;
 80010f8:	bf00      	nop
  }
}
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20004100 	.word	0x20004100
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	e000ed04 	.word	0xe000ed04
 800110c:	20000000 	.word	0x20000000
 8001110:	2000001c 	.word	0x2000001c
 8001114:	20004104 	.word	0x20004104
 8001118:	08019d14 	.word	0x08019d14
 800111c:	2000410c 	.word	0x2000410c
 8001120:	08019d28 	.word	0x08019d28
 8001124:	08019d3c 	.word	0x08019d3c
 8001128:	20004110 	.word	0x20004110
 800112c:	08019d50 	.word	0x08019d50
 8001130:	08019d64 	.word	0x08019d64
 8001134:	08019d78 	.word	0x08019d78
 8001138:	08019d8c 	.word	0x08019d8c
 800113c:	20004118 	.word	0x20004118
 8001140:	08019da0 	.word	0x08019da0
 8001144:	2000411c 	.word	0x2000411c
 8001148:	08019db4 	.word	0x08019db4
 800114c:	08019dc8 	.word	0x08019dc8
 8001150:	08019ddc 	.word	0x08019ddc
 8001154:	08019df0 	.word	0x08019df0

08001158 <peerLocalizationInit>:
#include "task.h"
#include "peer_localization.h"


void peerLocalizationInit()
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  // All other_positions[in].id will be set to zero due to static initialization.
  // If we ever switch to dynamic allocation, we need to set them to zero explicitly.
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <peerLocalizationTellPosition>:

// array of other's position
static peerLocalizationOtherPosition_t other_positions[PEER_LOCALIZATION_MAX_NEIGHBORS];

bool peerLocalizationTellPosition(int cfid, positionMeasurement_t const *pos)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e052      	b.n	800121e <peerLocalizationTellPosition+0xb6>
    if (other_positions[i].id == 0 || other_positions[i].id == cfid) {
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	492d      	ldr	r1, [pc, #180]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <peerLocalizationTellPosition+0x3c>
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	4928      	ldr	r1, [pc, #160]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d139      	bne.n	8001218 <peerLocalizationTellPosition+0xb0>
      other_positions[i].id = cfid;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	4921      	ldr	r1, [pc, #132]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	4602      	mov	r2, r0
 80011b8:	701a      	strb	r2, [r3, #0]
      other_positions[i].pos.x = pos->x;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	481b      	ldr	r0, [pc, #108]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4403      	add	r3, r0
 80011cc:	3308      	adds	r3, #8
 80011ce:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.y = pos->y;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4403      	add	r3, r0
 80011e2:	330c      	adds	r3, #12
 80011e4:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.z = pos->z;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6899      	ldr	r1, [r3, #8]
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4403      	add	r3, r0
 80011f8:	3310      	adds	r3, #16
 80011fa:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.timestamp = xTaskGetTickCount();
 80011fc:	7bfc      	ldrb	r4, [r7, #15]
 80011fe:	f013 f8cd 	bl	801439c <xTaskGetTickCount>
 8001202:	4602      	mov	r2, r0
 8001204:	490a      	ldr	r1, [pc, #40]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 8001206:	4623      	mov	r3, r4
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4423      	add	r3, r4
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3304      	adds	r3, #4
 8001212:	601a      	str	r2, [r3, #0]
      return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e006      	b.n	8001226 <peerLocalizationTellPosition+0xbe>
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b09      	cmp	r3, #9
 8001222:	d9a9      	bls.n	8001178 <peerLocalizationTellPosition+0x10>
    }
  }
  return false;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	20004128 	.word	0x20004128

08001234 <appchannelInit>:
bool appchannelHasOverflowOccured() {
    return appchannelHasOverflowOccurred();
}

void appchannelInit()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  sendMutex = xSemaphoreCreateMutex();
 8001238:	2001      	movs	r0, #1
 800123a:	f011 ffe6 	bl	801320a <xQueueCreateMutex>
 800123e:	4603      	mov	r3, r0
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <appchannelInit+0x2c>)
 8001242:	6013      	str	r3, [r2, #0]

  rxQueue = xQueueCreate(10, sizeof(CRTPPacket));
 8001244:	2200      	movs	r2, #0
 8001246:	2120      	movs	r1, #32
 8001248:	200a      	movs	r0, #10
 800124a:	f011 ff67 	bl	801311c <xQueueGenericCreate>
 800124e:	4603      	mov	r3, r0
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <appchannelInit+0x30>)
 8001252:	6013      	str	r3, [r2, #0]

  overflow = false;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <appchannelInit+0x34>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200041f0 	.word	0x200041f0
 8001264:	200041f4 	.word	0x200041f4
 8001268:	200041f8 	.word	0x200041f8

0800126c <appchannelIncomingPacket>:

void appchannelIncomingPacket(CRTPPacket *p)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  int res = xQueueSend(rxQueue, p, 0);
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <appchannelIncomingPacket+0x2c>)
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	f011 fff7 	bl	8013270 <xQueueGenericSend>
 8001282:	60f8      	str	r0, [r7, #12]

  if (res != pdTRUE) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d002      	beq.n	8001290 <appchannelIncomingPacket+0x24>
    overflow = true;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <appchannelIncomingPacket+0x30>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
  }
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200041f4 	.word	0x200041f4
 800129c:	200041f8 	.word	0x200041f8

080012a0 <appInit>:

static void appTask(void *param);


void __attribute__((weak)) appInit()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af04      	add	r7, sp, #16
  if (isInit) {
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <appInit+0x38>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d111      	bne.n	80012d2 <appInit+0x32>
    return;
  }

  STATIC_MEM_TASK_CREATE(appTask, appTask, APP_TASK_NAME, NULL, CONFIG_APP_PRIORITY);
 80012ae:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <appInit+0x3c>)
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <appInit+0x40>)
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <appInit+0x44>)
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <appInit+0x48>)
 80012c6:	f012 fcf3 	bl	8013cb0 <xTaskCreateStatic>
  isInit = true;
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <appInit+0x38>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e000      	b.n	80012d4 <appInit+0x34>
    return;
 80012d2:	bf00      	nop
}
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200041f9 	.word	0x200041f9
 80012dc:	2000061c 	.word	0x2000061c
 80012e0:	200041fc 	.word	0x200041fc
 80012e4:	08019f90 	.word	0x08019f90
 80012e8:	080012ed 	.word	0x080012ed

080012ec <appTask>:

static void appTask(void *param)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 80012f4:	f002 fd96 	bl	8003e24 <systemWaitStart>

  appMain();
 80012f8:	f000 f806 	bl	8001308 <appMain>

  while(1) {
    vTaskDelay(portMAX_DELAY);
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001300:	f012 fe8e 	bl	8014020 <vTaskDelay>
 8001304:	e7fa      	b.n	80012fc <appTask+0x10>
	...

08001308 <appMain>:
    int myNum;
    std::string myString;
};
*/
void appMain()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Waiting for activation ...\n");
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <appMain+0x20>)
 800130e:	2000      	movs	r0, #0
 8001310:	f004 f96e 	bl	80055f0 <SEGGER_RTT_printf>
  /* make sure that the assertion is not simple enough to be optimized away
   * by the compiler */
//  assert(cl->myNum + cl->myString.size() == 0);

  while(1) {
    vTaskDelay(M2T(2000));
 8001314:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001318:	f012 fe82 	bl	8014020 <vTaskDelay>
    DEBUG_PRINT("Hello World!\n");
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <appMain+0x24>)
 800131e:	2000      	movs	r0, #0
 8001320:	f004 f966 	bl	80055f0 <SEGGER_RTT_printf>
    vTaskDelay(M2T(2000));
 8001324:	e7f6      	b.n	8001314 <appMain+0xc>
 8001326:	bf00      	nop
 8001328:	08019f94 	.word	0x08019f94
 800132c:	08019fb0 	.word	0x08019fb0

08001330 <commInit>:
#include "crtp_localization_service.h"

static bool isInit;

void commInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  if (isInit)
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <commInit+0x64>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d128      	bne.n	800138e <commInit+0x5e>
    return;

  uartslkInit();
 800133c:	f002 fe8e 	bl	800405c <uartslkInit>
  radiolinkInit();
 8001340:	f000 ff88 	bl	8002254 <radiolinkInit>

  if (usbTest())
 8001344:	f003 f8bc 	bl	80044c0 <usbTest>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <commInit+0x2c>
    crtpSetLink(usblinkGetLink());
 800134e:	f003 f993 	bl	8004678 <usblinkGetLink>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f9f3 	bl	8001740 <crtpSetLink>
 800135a:	e00a      	b.n	8001372 <commInit+0x42>
  else if(radiolinkTest())
 800135c:	f000 ffd0 	bl	8002300 <radiolinkTest>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <commInit+0x42>
    crtpSetLink(radiolinkGetLink());
 8001366:	f001 f8cd 	bl	8002504 <radiolinkGetLink>
 800136a:	4603      	mov	r3, r0
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f9e7 	bl	8001740 <crtpSetLink>

  crtpserviceInit();
 8001372:	f000 fe01 	bl	8001f78 <crtpserviceInit>
  platformserviceInit();
 8001376:	f000 fe73 	bl	8002060 <platformserviceInit>
  logInit();
 800137a:	f004 fb5d 	bl	8005a38 <logInit>
  paramInit();
 800137e:	f006 ff8f 	bl	80082a0 <paramInit>
  locSrvInit();
 8001382:	f000 fb15 	bl	80019b0 <locSrvInit>


  isInit = true;
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <commInit+0x64>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e000      	b.n	8001390 <commInit+0x60>
    return;
 800138e:	bf00      	nop
}
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200046ac 	.word	0x200046ac

08001398 <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af04      	add	r7, sp, #16
  if(isInit)
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <crtpInit+0x70>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d12d      	bne.n	8001402 <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	2078      	movs	r0, #120	; 0x78
 80013ac:	f011 feb6 	bl	801311c <xQueueGenericCreate>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <crtpInit+0x74>)
 80013b4:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <crtpInit+0x74>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <crtpInit+0x78>)
 80013bc:	4915      	ldr	r1, [pc, #84]	; (8001414 <crtpInit+0x7c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f007 f848 	bl	8008454 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <crtpInit+0x80>)
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <crtpInit+0x84>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	2302      	movs	r3, #2
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	4912      	ldr	r1, [pc, #72]	; (8001420 <crtpInit+0x88>)
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <crtpInit+0x8c>)
 80013da:	f012 fc69 	bl	8013cb0 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 80013de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <crtpInit+0x90>)
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <crtpInit+0x94>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	490f      	ldr	r1, [pc, #60]	; (8001430 <crtpInit+0x98>)
 80013f4:	480f      	ldr	r0, [pc, #60]	; (8001434 <crtpInit+0x9c>)
 80013f6:	f012 fc5b 	bl	8013cb0 <xTaskCreateStatic>

  isInit = true;
 80013fa:	4b03      	ldr	r3, [pc, #12]	; (8001408 <crtpInit+0x70>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e000      	b.n	8001404 <crtpInit+0x6c>
    return;
 8001402:	bf00      	nop
}
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200046ad 	.word	0x200046ad
 800140c:	200046c4 	.word	0x200046c4
 8001410:	08019fc0 	.word	0x08019fc0
 8001414:	08019fc8 	.word	0x08019fc8
 8001418:	200008d4 	.word	0x200008d4
 800141c:	200006d4 	.word	0x200006d4
 8001420:	08019fe4 	.word	0x08019fe4
 8001424:	080014f9 	.word	0x080014f9
 8001428:	20000d8c 	.word	0x20000d8c
 800142c:	2000098c 	.word	0x2000098c
 8001430:	08019fec 	.word	0x08019fec
 8001434:	08001569 	.word	0x08001569

08001438 <crtpInitTaskQueue>:
{
  return isInit;
}

void crtpInitTaskQueue(CRTPPort portId)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId] == NULL);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <crtpInitTaskQueue+0x50>)
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <crtpInitTaskQueue+0x20>
 800144e:	226b      	movs	r2, #107	; 0x6b
 8001450:	490e      	ldr	r1, [pc, #56]	; (800148c <crtpInitTaskQueue+0x54>)
 8001452:	480f      	ldr	r0, [pc, #60]	; (8001490 <crtpInitTaskQueue+0x58>)
 8001454:	f004 f8fa 	bl	800564c <assertFail>

  queues[portId] = xQueueCreate(CRTP_RX_QUEUE_SIZE, sizeof(CRTPPacket));
 8001458:	79fc      	ldrb	r4, [r7, #7]
 800145a:	2200      	movs	r2, #0
 800145c:	2120      	movs	r1, #32
 800145e:	2010      	movs	r0, #16
 8001460:	f011 fe5c 	bl	801311c <xQueueGenericCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <crtpInitTaskQueue+0x50>)
 8001468:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  DEBUG_QUEUE_MONITOR_REGISTER(queues[portId]);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4a06      	ldr	r2, [pc, #24]	; (8001488 <crtpInitTaskQueue+0x50>)
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <crtpInitTaskQueue+0x5c>)
 8001476:	4905      	ldr	r1, [pc, #20]	; (800148c <crtpInitTaskQueue+0x54>)
 8001478:	4618      	mov	r0, r3
 800147a:	f006 ffeb 	bl	8008454 <qmRegisterQueue>
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	200046c8 	.word	0x200046c8
 800148c:	08019fc8 	.word	0x08019fc8
 8001490:	08019ff4 	.word	0x08019ff4
 8001494:	0801a00c 	.word	0x0801a00c

08001498 <crtpReceivePacketBlock>:

  return xQueueReceive(queues[portId], p, 0);
}

int crtpReceivePacketBlock(CRTPPort portId, CRTPPacket *p)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId]);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <crtpReceivePacketBlock+0x50>)
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d104      	bne.n	80014ba <crtpReceivePacketBlock+0x22>
 80014b0:	227b      	movs	r2, #123	; 0x7b
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <crtpReceivePacketBlock+0x54>)
 80014b4:	480e      	ldr	r0, [pc, #56]	; (80014f0 <crtpReceivePacketBlock+0x58>)
 80014b6:	f004 f8c9 	bl	800564c <assertFail>
  ASSERT(p);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <crtpReceivePacketBlock+0x32>
 80014c0:	227c      	movs	r2, #124	; 0x7c
 80014c2:	490a      	ldr	r1, [pc, #40]	; (80014ec <crtpReceivePacketBlock+0x54>)
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <crtpReceivePacketBlock+0x5c>)
 80014c6:	f004 f8c1 	bl	800564c <assertFail>

  return xQueueReceive(queues[portId], p, portMAX_DELAY);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <crtpReceivePacketBlock+0x50>)
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f012 f86b 	bl	80135b4 <xQueueReceive>
 80014de:	4603      	mov	r3, r0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200046c8 	.word	0x200046c8
 80014ec:	08019fc8 	.word	0x08019fc8
 80014f0:	0801a00c 	.word	0x0801a00c
 80014f4:	0801a01c 	.word	0x0801a01c

080014f8 <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <crtpTxTask+0x60>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a15      	ldr	r2, [pc, #84]	; (800155c <crtpTxTask+0x64>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d021      	beq.n	800154e <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <crtpTxTask+0x68>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f107 0108 	add.w	r1, r7, #8
 8001512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001516:	4618      	mov	r0, r3
 8001518:	f012 f84c 	bl	80135b4 <xQueueReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	2b01      	cmp	r3, #1
 8001520:	d1ee      	bne.n	8001500 <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 8001522:	e002      	b.n	800152a <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 8001524:	200a      	movs	r0, #10
 8001526:	f012 fd7b 	bl	8014020 <vTaskDelay>
        while (link->sendPacket(&p) == false)
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <crtpTxTask+0x60>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	4610      	mov	r0, r2
 8001536:	4798      	blx	r3
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f2      	beq.n	8001524 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <crtpTxTask+0x6c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	3301      	adds	r3, #1
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <crtpTxTask+0x6c>)
 8001546:	6053      	str	r3, [r2, #4]
        updateStats();
 8001548:	f000 f936 	bl	80017b8 <updateStats>
 800154c:	e7d8      	b.n	8001500 <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 800154e:	200a      	movs	r0, #10
 8001550:	f012 fd66 	bl	8014020 <vTaskDelay>
    if (link != &nopLink)
 8001554:	e7d4      	b.n	8001500 <crtpTxTask+0x8>
 8001556:	bf00      	nop
 8001558:	2000004c 	.word	0x2000004c
 800155c:	20000038 	.word	0x20000038
 8001560:	200046c4 	.word	0x200046c4
 8001564:	200046b0 	.word	0x200046b0

08001568 <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <crtpRxTask+0x9c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <crtpRxTask+0xa0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d040      	beq.n	80015fc <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <crtpRxTask+0x9c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f107 0208 	add.w	r2, r7, #8
 8001584:	4610      	mov	r0, r2
 8001586:	4798      	blx	r3
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <crtpRxTask+0x8>
      {
        if (queues[p.port])
 800158e:	7a7b      	ldrb	r3, [r7, #9]
 8001590:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <crtpRxTask+0xa4>)
 800159a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00e      	beq.n	80015c0 <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 80015a2:	7a7b      	ldrb	r3, [r7, #9]
 80015a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <crtpRxTask+0xa4>)
 80015ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80015b2:	f107 0108 	add.w	r1, r7, #8
 80015b6:	2300      	movs	r3, #0
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015bc:	f011 fe58 	bl	8013270 <xQueueGenericSend>
        }

        if (callbacks[p.port])
 80015c0:	7a7b      	ldrb	r3, [r7, #9]
 80015c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <crtpRxTask+0xa8>)
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 80015d4:	7a7b      	ldrb	r3, [r7, #9]
 80015d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <crtpRxTask+0xa8>)
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	4610      	mov	r0, r2
 80015ea:	4798      	blx	r3
        }

        stats.rxCount++;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <crtpRxTask+0xac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <crtpRxTask+0xac>)
 80015f4:	6013      	str	r3, [r2, #0]
        updateStats();
 80015f6:	f000 f8df 	bl	80017b8 <updateStats>
 80015fa:	e7b9      	b.n	8001570 <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 80015fc:	200a      	movs	r0, #10
 80015fe:	f012 fd0f 	bl	8014020 <vTaskDelay>
    if (link != &nopLink)
 8001602:	e7b5      	b.n	8001570 <crtpRxTask+0x8>
 8001604:	2000004c 	.word	0x2000004c
 8001608:	20000038 	.word	0x20000038
 800160c:	200046c8 	.word	0x200046c8
 8001610:	20004708 	.word	0x20004708
 8001614:	200046b0 	.word	0x200046b0

08001618 <crtpRegisterPortCB>:
    }
  }
}

void crtpRegisterPortCB(int port, CrtpCallback cb)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  if (port>CRTP_NBR_OF_PORTS)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b10      	cmp	r3, #16
 8001626:	dc05      	bgt.n	8001634 <crtpRegisterPortCB+0x1c>
    return;

  callbacks[port] = cb;
 8001628:	4905      	ldr	r1, [pc, #20]	; (8001640 <crtpRegisterPortCB+0x28>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001632:	e000      	b.n	8001636 <crtpRegisterPortCB+0x1e>
    return;
 8001634:	bf00      	nop
}
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20004708 	.word	0x20004708

08001644 <crtpSendPacket>:

int crtpSendPacket(CRTPPacket *p)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d104      	bne.n	800165c <crtpSendPacket+0x18>
 8001652:	22d4      	movs	r2, #212	; 0xd4
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <crtpSendPacket+0x44>)
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <crtpSendPacket+0x48>)
 8001658:	f003 fff8 	bl	800564c <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b1e      	cmp	r3, #30
 8001662:	d904      	bls.n	800166e <crtpSendPacket+0x2a>
 8001664:	22d5      	movs	r2, #213	; 0xd5
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <crtpSendPacket+0x44>)
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <crtpSendPacket+0x4c>)
 800166a:	f003 ffef 	bl	800564c <assertFail>

  return xQueueSend(txQueue, p, 0);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <crtpSendPacket+0x50>)
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f011 fdfa 	bl	8013270 <xQueueGenericSend>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08019fc8 	.word	0x08019fc8
 800168c:	0801a01c 	.word	0x0801a01c
 8001690:	0801a020 	.word	0x0801a020
 8001694:	200046c4 	.word	0x200046c4

08001698 <crtpSendPacketBlock>:

int crtpSendPacketBlock(CRTPPacket *p)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d104      	bne.n	80016b0 <crtpSendPacketBlock+0x18>
 80016a6:	22dc      	movs	r2, #220	; 0xdc
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <crtpSendPacketBlock+0x44>)
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <crtpSendPacketBlock+0x48>)
 80016ac:	f003 ffce 	bl	800564c <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b1e      	cmp	r3, #30
 80016b6:	d904      	bls.n	80016c2 <crtpSendPacketBlock+0x2a>
 80016b8:	22dd      	movs	r2, #221	; 0xdd
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <crtpSendPacketBlock+0x44>)
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <crtpSendPacketBlock+0x4c>)
 80016be:	f003 ffc5 	bl	800564c <assertFail>

  return xQueueSend(txQueue, p, portMAX_DELAY);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <crtpSendPacketBlock+0x50>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	f011 fdcf 	bl	8013270 <xQueueGenericSend>
 80016d2:	4603      	mov	r3, r0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	08019fc8 	.word	0x08019fc8
 80016e0:	0801a01c 	.word	0x0801a01c
 80016e4:	0801a020 	.word	0x0801a020
 80016e8:	200046c4 	.word	0x200046c4

080016ec <crtpReset>:

int crtpReset(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  xQueueReset(txQueue);
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <crtpReset+0x28>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f011 fc3c 	bl	8012f74 <xQueueGenericReset>
  if (link->reset) {
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <crtpReset+0x2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <crtpReset+0x22>
    link->reset();
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <crtpReset+0x2c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4798      	blx	r3
  }

  return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200046c4 	.word	0x200046c4
 8001718:	2000004c 	.word	0x2000004c

0800171c <crtpIsConnected>:

bool crtpIsConnected(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  if (link->isConnected)
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <crtpIsConnected+0x20>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <crtpIsConnected+0x1a>
    return link->isConnected();
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <crtpIsConnected+0x20>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4798      	blx	r3
 8001732:	4603      	mov	r3, r0
 8001734:	e000      	b.n	8001738 <crtpIsConnected+0x1c>
  return true;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000004c 	.word	0x2000004c

08001740 <crtpSetLink>:

void crtpSetLink(struct crtpLinkOperations * lk)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(link)
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <crtpSetLink+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <crtpSetLink+0x1a>
    link->setEnable(false);
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <crtpSetLink+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2000      	movs	r0, #0
 8001758:	4798      	blx	r3

  if (lk)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <crtpSetLink+0x28>
    link = lk;
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <crtpSetLink+0x40>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e002      	b.n	800176e <crtpSetLink+0x2e>
  else
    link = &nopLink;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <crtpSetLink+0x40>)
 800176a:	4a06      	ldr	r2, [pc, #24]	; (8001784 <crtpSetLink+0x44>)
 800176c:	601a      	str	r2, [r3, #0]

  link->setEnable(true);
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <crtpSetLink+0x40>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2001      	movs	r0, #1
 8001776:	4798      	blx	r3
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000004c 	.word	0x2000004c
 8001784:	20000038 	.word	0x20000038

08001788 <nopFunc>:

static int nopFunc(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ENETDOWN;
 800178c:	2373      	movs	r3, #115	; 0x73
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <clearStats>:

static void clearStats()
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <clearStats+0x1c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <clearStats+0x1c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200046b0 	.word	0x200046b0

080017b8 <updateStats>:

static void updateStats()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 80017be:	f012 fded 	bl	801439c <xTaskGetTickCount>
 80017c2:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <updateStats+0x9c>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d93d      	bls.n	800184a <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <updateStats+0x9c>)
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017de:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <updateStats+0x9c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001858 <updateStats+0xa0>
 80017f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017f6:	ed97 7a00 	vldr	s14, [r7]
 80017fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001802:	ee17 3a90 	vmov	r3, s15
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <updateStats+0x9c>)
 800180a:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <updateStats+0x9c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001818:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001858 <updateStats+0xa0>
 800181c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001820:	ed97 7a00 	vldr	s14, [r7]
 8001824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182c:	ee17 3a90 	vmov	r3, s15
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <updateStats+0x9c>)
 8001834:	815a      	strh	r2, [r3, #10]

    clearStats();
 8001836:	f7ff ffaf 	bl	8001798 <clearStats>
    stats.previousStatisticsTime = now;
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <updateStats+0x9c>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001846:	4a03      	ldr	r2, [pc, #12]	; (8001854 <updateStats+0x9c>)
 8001848:	60d3      	str	r3, [r2, #12]
  }
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200046b0 	.word	0x200046b0
 8001858:	447a0000 	.word	0x447a0000

0800185c <estimatorEnqueuePosition>:
  m.data.tdoa = *tdoa;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueuePosition(const positionMeasurement_t *position)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b08e      	sub	sp, #56	; 0x38
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePosition;
 8001864:	2301      	movs	r3, #1
 8001866:	723b      	strb	r3, [r7, #8]
  m.data.position = *position;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f107 040c 	add.w	r4, r7, #12
 800186e:	461d      	mov	r5, r3
 8001870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001874:	682b      	ldr	r3, [r5, #0]
 8001876:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb71 	bl	8000f64 <estimatorEnqueue>
}
 8001882:	bf00      	nop
 8001884:	3738      	adds	r7, #56	; 0x38
 8001886:	46bd      	mov	sp, r7
 8001888:	bdb0      	pop	{r4, r5, r7, pc}

0800188a <estimatorEnqueuePose>:

static inline void estimatorEnqueuePose(const poseMeasurement_t *pose)
{
 800188a:	b5b0      	push	{r4, r5, r7, lr}
 800188c:	b08e      	sub	sp, #56	; 0x38
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePose;
 8001892:	2302      	movs	r3, #2
 8001894:	723b      	strb	r3, [r7, #8]
  m.data.pose = *pose;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f107 040c 	add.w	r4, r7, #12
 800189c:	461d      	mov	r5, r3
 800189e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a6:	682b      	ldr	r3, [r5, #0]
 80018a8:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fb58 	bl	8000f64 <estimatorEnqueue>
}
 80018b4:	bf00      	nop
 80018b6:	3738      	adds	r7, #56	; 0x38
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bdb0      	pop	{r4, r5, r7, pc}

080018bc <quatdecompress>:

	return comp;
}

static inline void quatdecompress(uint32_t comp, float q[4])
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 80018c6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80018ca:	617b      	str	r3, [r7, #20]

	int const i_largest = comp >> 30;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0f9b      	lsrs	r3, r3, #30
 80018d0:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 80018d8:	2303      	movs	r3, #3
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	e04d      	b.n	800197a <quatdecompress+0xbe>
		if (i != i_largest) {
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d046      	beq.n	8001974 <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	4013      	ands	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	0a5b      	lsrs	r3, r3, #9
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001908:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80019ac <quatdecompress+0xf0>
 800190c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001926:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d10d      	bne.n	800194c <quatdecompress+0x90>
				q[i] = -q[i];
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	4413      	add	r3, r2
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	eef1 7a67 	vneg.f32	s15, s15
 8001948:	edc3 7a00 	vstr	s15, [r3]
			}
			sum_squares += q[i] * q[i];
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	ed93 7a00 	vldr	s14, [r3]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	4413      	add	r3, r2
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001968:	ed97 7a07 	vldr	s14, [r7, #28]
 800196c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001970:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	3b01      	subs	r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	daae      	bge.n	80018de <quatdecompress+0x22>
		}
	}
	q[i_largest] = sqrtf(1.0f - sum_squares);
 8001980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001984:	edd7 7a07 	vldr	s15, [r7, #28]
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	18d4      	adds	r4, r2, r3
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	f017 ff36 	bl	8019808 <sqrtf>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
 80019a0:	edc4 7a00 	vstr	s15, [r4]
}
 80019a4:	bf00      	nop
 80019a6:	3724      	adds	r7, #36	; 0x24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	3f3504f3 	.word	0x3f3504f3

080019b0 <locSrvInit>:

static bool isEmergencyStopRequested = false;
static uint32_t emergencyStopWatchdogNotificationTick = 0;

void locSrvInit()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
  if (isInit) {
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <locSrvInit+0x38>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d110      	bne.n	80019e0 <locSrvInit+0x30>
    return;
  }

  //  uint64_t address = configblockGetRadioAddress();
  uint64_t address = RADIO_CHANNEL_ADDRESS;
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9c7 2300 	strd	r2, r3, [r7]
  my_id = address & 0xFF;
 80019ca:	783a      	ldrb	r2, [r7, #0]
 80019cc:	4b07      	ldr	r3, [pc, #28]	; (80019ec <locSrvInit+0x3c>)
 80019ce:	701a      	strb	r2, [r3, #0]

  crtpRegisterPortCB(CRTP_PORT_LOCALIZATION, locSrvCrtpCB);
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <locSrvInit+0x40>)
 80019d2:	2006      	movs	r0, #6
 80019d4:	f7ff fe20 	bl	8001618 <crtpRegisterPortCB>
  isInit = true;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <locSrvInit+0x38>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e000      	b.n	80019e2 <locSrvInit+0x32>
    return;
 80019e0:	bf00      	nop
}
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20004782 	.word	0x20004782
 80019ec:	20004783 	.word	0x20004783
 80019f0:	080019f5 	.word	0x080019f5

080019f4 <locSrvCrtpCB>:

static void locSrvCrtpCB(CRTPPacket* pk)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  switch (pk->channel)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d00e      	beq.n	8001a28 <locSrvCrtpCB+0x34>
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	dc10      	bgt.n	8001a30 <locSrvCrtpCB+0x3c>
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <locSrvCrtpCB+0x24>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d004      	beq.n	8001a20 <locSrvCrtpCB+0x2c>
      break;
    case EXT_POSITION_PACKED:
      extPositionPackedHandler(pk);
      break;
    default:
      break;
 8001a16:	e00b      	b.n	8001a30 <locSrvCrtpCB+0x3c>
      extPositionHandler(pk);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f827 	bl	8001a6c <extPositionHandler>
      break;
 8001a1e:	e008      	b.n	8001a32 <locSrvCrtpCB+0x3e>
      genericLocHandle(pk);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f9e1 	bl	8001de8 <genericLocHandle>
      break;
 8001a26:	e004      	b.n	8001a32 <locSrvCrtpCB+0x3e>
      extPositionPackedHandler(pk);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 fa27 	bl	8001e7c <extPositionPackedHandler>
      break;
 8001a2e:	e000      	b.n	8001a32 <locSrvCrtpCB+0x3e>
      break;
 8001a30:	bf00      	nop
  }
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <updateLogFromExtPos>:

static void updateLogFromExtPos()
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  ext_pose.x = ext_pos.x;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <updateLogFromExtPos+0x28>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <updateLogFromExtPos+0x2c>)
 8001a46:	6013      	str	r3, [r2, #0]
  ext_pose.y = ext_pos.y;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <updateLogFromExtPos+0x28>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4a06      	ldr	r2, [pc, #24]	; (8001a68 <updateLogFromExtPos+0x2c>)
 8001a4e:	6053      	str	r3, [r2, #4]
  ext_pose.z = ext_pos.z;
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <updateLogFromExtPos+0x28>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <updateLogFromExtPos+0x2c>)
 8001a56:	6093      	str	r3, [r2, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20004748 	.word	0x20004748
 8001a68:	2000475c 	.word	0x2000475c

08001a6c <extPositionHandler>:

static void extPositionHandler(CRTPPacket* pk) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPosition* data = (const struct CrtpExtPosition*)pk->data;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3302      	adds	r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]

  ext_pos.x = data->x;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <extPositionHandler+0x54>)
 8001a80:	6013      	str	r3, [r2, #0]
  ext_pos.y = data->y;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <extPositionHandler+0x54>)
 8001a88:	6053      	str	r3, [r2, #4]
  ext_pos.z = data->z;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <extPositionHandler+0x54>)
 8001a90:	6093      	str	r3, [r2, #8]
  ext_pos.stdDev = extPosStdDev;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <extPositionHandler+0x58>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <extPositionHandler+0x54>)
 8001a98:	60d3      	str	r3, [r2, #12]
  ext_pos.source = MeasurementSourceLocationService;
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <extPositionHandler+0x54>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	741a      	strb	r2, [r3, #16]
  updateLogFromExtPos();
 8001aa0:	f7ff ffcc 	bl	8001a3c <updateLogFromExtPos>

  estimatorEnqueuePosition(&ext_pos);
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <extPositionHandler+0x54>)
 8001aa6:	f7ff fed9 	bl	800185c <estimatorEnqueuePosition>
  tickOfLastPacket = xTaskGetTickCount();
 8001aaa:	f012 fc77 	bl	801439c <xTaskGetTickCount>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <extPositionHandler+0x5c>)
 8001ab4:	801a      	strh	r2, [r3, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20004748 	.word	0x20004748
 8001ac4:	20000050 	.word	0x20000050
 8001ac8:	20004784 	.word	0x20004784

08001acc <extPoseHandler>:

static void extPoseHandler(const CRTPPacket* pk) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPose* data = (const struct CrtpExtPose*)&pk->data[1];
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3303      	adds	r3, #3
 8001ad8:	60fb      	str	r3, [r7, #12]

  ext_pose.x = data->x;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <extPoseHandler+0x70>)
 8001ae0:	6013      	str	r3, [r2, #0]
  ext_pose.y = data->y;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <extPoseHandler+0x70>)
 8001ae8:	6053      	str	r3, [r2, #4]
  ext_pose.z = data->z;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <extPoseHandler+0x70>)
 8001af0:	6093      	str	r3, [r2, #8]
  ext_pose.quat.x = data->qx;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <extPoseHandler+0x70>)
 8001af8:	60d3      	str	r3, [r2, #12]
  ext_pose.quat.y = data->qy;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <extPoseHandler+0x70>)
 8001b00:	6113      	str	r3, [r2, #16]
  ext_pose.quat.z = data->qz;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <extPoseHandler+0x70>)
 8001b08:	6153      	str	r3, [r2, #20]
  ext_pose.quat.w = data->qw;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <extPoseHandler+0x70>)
 8001b10:	6193      	str	r3, [r2, #24]
  ext_pose.stdDevPos = extPosStdDev;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <extPoseHandler+0x74>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <extPoseHandler+0x70>)
 8001b18:	61d3      	str	r3, [r2, #28]
  ext_pose.stdDevQuat = extQuatStdDev;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <extPoseHandler+0x78>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <extPoseHandler+0x70>)
 8001b20:	6213      	str	r3, [r2, #32]

  estimatorEnqueuePose(&ext_pose);
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <extPoseHandler+0x70>)
 8001b24:	f7ff feb1 	bl	800188a <estimatorEnqueuePose>
  tickOfLastPacket = xTaskGetTickCount();
 8001b28:	f012 fc38 	bl	801439c <xTaskGetTickCount>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <extPoseHandler+0x7c>)
 8001b32:	801a      	strh	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000475c 	.word	0x2000475c
 8001b40:	20000050 	.word	0x20000050
 8001b44:	20000054 	.word	0x20000054
 8001b48:	20004784 	.word	0x20004784

08001b4c <extPosePackedHandler>:

static void extPosePackedHandler(const CRTPPacket* pk) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint8_t numItems = (pk->size - 1) / sizeof(extPosePackedItem);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b51      	ldr	r3, [pc, #324]	; (8001ca4 <extPosePackedHandler+0x158>)
 8001b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e090      	b.n	8001c8e <extPosePackedHandler+0x142>
    const extPosePackedItem* item = (const extPosePackedItem*)&pk->data[1 + i * sizeof(extPosePackedItem)];
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	3301      	adds	r3, #1
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3302      	adds	r3, #2
 8001b80:	60bb      	str	r3, [r7, #8]
    if (item->id == my_id) {
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	4b48      	ldr	r3, [pc, #288]	; (8001ca8 <extPosePackedHandler+0x15c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d145      	bne.n	8001c1a <extPosePackedHandler+0xce>
      ext_pose.x = item->x / 1000.0f;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9e:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001cac <extPosePackedHandler+0x160>
 8001ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <extPosePackedHandler+0x164>)
 8001ba8:	edc3 7a00 	vstr	s15, [r3]
      ext_pose.y = item->y / 1000.0f;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bbc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001cac <extPosePackedHandler+0x160>
 8001bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc4:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <extPosePackedHandler+0x164>)
 8001bc6:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pose.z = item->z / 1000.0f;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bda:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001cac <extPosePackedHandler+0x160>
 8001bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be2:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <extPosePackedHandler+0x164>)
 8001be4:	edc3 7a02 	vstr	s15, [r3, #8]
      quatdecompress(item->quat, (float *)&ext_pose.quat.q0);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001bee:	4931      	ldr	r1, [pc, #196]	; (8001cb4 <extPosePackedHandler+0x168>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fe63 	bl	80018bc <quatdecompress>
      ext_pose.stdDevPos = extPosStdDev;
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <extPosePackedHandler+0x16c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2d      	ldr	r2, [pc, #180]	; (8001cb0 <extPosePackedHandler+0x164>)
 8001bfc:	61d3      	str	r3, [r2, #28]
      ext_pose.stdDevQuat = extQuatStdDev;
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <extPosePackedHandler+0x170>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <extPosePackedHandler+0x164>)
 8001c04:	6213      	str	r3, [r2, #32]
      estimatorEnqueuePose(&ext_pose);
 8001c06:	482a      	ldr	r0, [pc, #168]	; (8001cb0 <extPosePackedHandler+0x164>)
 8001c08:	f7ff fe3f 	bl	800188a <estimatorEnqueuePose>
      tickOfLastPacket = xTaskGetTickCount();
 8001c0c:	f012 fbc6 	bl	801439c <xTaskGetTickCount>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <extPosePackedHandler+0x174>)
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	e036      	b.n	8001c88 <extPosePackedHandler+0x13c>
    } else {
      ext_pos.x = item->x / 1000.0f;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001c20:	b21b      	sxth	r3, r3
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001cac <extPosePackedHandler+0x160>
 8001c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <extPosePackedHandler+0x178>)
 8001c34:	edc3 7a00 	vstr	s15, [r3]
      ext_pos.y = item->y / 1000.0f;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c48:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001cac <extPosePackedHandler+0x160>
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <extPosePackedHandler+0x178>)
 8001c52:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pos.z = item->z / 1000.0f;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c66:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001cac <extPosePackedHandler+0x160>
 8001c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <extPosePackedHandler+0x178>)
 8001c70:	edc3 7a02 	vstr	s15, [r3, #8]
      ext_pos.stdDev = extPosStdDev;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <extPosePackedHandler+0x16c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <extPosePackedHandler+0x178>)
 8001c7a:	60d3      	str	r3, [r2, #12]
      peerLocalizationTellPosition(item->id, &ext_pos);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4910      	ldr	r1, [pc, #64]	; (8001cc4 <extPosePackedHandler+0x178>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa70 	bl	8001168 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	7bbb      	ldrb	r3, [r7, #14]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	f4ff af6a 	bcc.w	8001b6c <extPosePackedHandler+0x20>
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	ba2e8ba3 	.word	0xba2e8ba3
 8001ca8:	20004783 	.word	0x20004783
 8001cac:	447a0000 	.word	0x447a0000
 8001cb0:	2000475c 	.word	0x2000475c
 8001cb4:	20004768 	.word	0x20004768
 8001cb8:	20000050 	.word	0x20000050
 8001cbc:	20000054 	.word	0x20000054
 8001cc0:	20004784 	.word	0x20004784
 8001cc4:	20004748 	.word	0x20004748

08001cc8 <lpsShortLppPacketHandler>:

static void lpsShortLppPacketHandler(CRTPPacket* pk) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  bool success = false;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  if (pk->size >= 2) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d918      	bls.n	8001d0e <lpsShortLppPacketHandler+0x46>
#ifdef CONFIG_DECK_LOCO
//    bool success = lpsSendLppShort(pk->data[1], &pk->data[2], pk->size-2);
#else
    bool success = false;
#endif
    pk->port = CRTP_PORT_LOCALIZATION;
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	7853      	ldrb	r3, [r2, #1]
 8001ce0:	2106      	movs	r1, #6
 8001ce2:	f361 1307 	bfi	r3, r1, #4, #4
 8001ce6:	7053      	strb	r3, [r2, #1]
    pk->channel = GENERIC_TYPE;
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	7853      	ldrb	r3, [r2, #1]
 8001cec:	2101      	movs	r1, #1
 8001cee:	f361 0301 	bfi	r3, r1, #0, #2
 8001cf2:	7053      	strb	r3, [r2, #1]
    pk->size = 3;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	701a      	strb	r2, [r3, #0]
    pk->data[0] = LPS_SHORT_LPP_PACKET;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	709a      	strb	r2, [r3, #2]
    pk->data[2] = success?1:0;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	711a      	strb	r2, [r3, #4]
    // This is best effort, i.e. the blocking version is not needed
    crtpSendPacket(pk);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fc9b 	bl	8001644 <crtpSendPacket>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <lhPersistDataWorker>:
    uint16_t calibrationDataBsField;
  } __attribute__((packed));
  uint32_t combinedField;
} __attribute__((packed)) LhPersistArgs_t;

static void lhPersistDataWorker(void* arg) {
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b08e      	sub	sp, #56	; 0x38
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_DECK_LIGHTHOUSE
  LhPersistArgs_t* args = (LhPersistArgs_t*) &arg;
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30

  bool result = true;
 8001d22:	2301      	movs	r3, #1
 8001d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2c:	e01f      	b.n	8001d6e <lhPersistDataWorker+0x58>
    uint16_t mask = 1 << baseStation;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	85bb      	strh	r3, [r7, #44]	; 0x2c
    bool storeGeo = (args->geoDataBsField & mask) != 0;
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d40:	4013      	ands	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool storeCalibration = (args->calibrationDataBsField & mask) != 0;
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	dddc      	ble.n	8001d2e <lhPersistDataWorker+0x18>

  }
#else
  bool result = false;
#endif
  CRTPPacket response = {
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	2220      	movs	r2, #32
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f015 fe7b 	bl	8017a78 <memset>
 8001d82:	2302      	movs	r3, #2
 8001d84:	723b      	strb	r3, [r7, #8]
 8001d86:	7a7b      	ldrb	r3, [r7, #9]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f362 0301 	bfi	r3, r2, #0, #2
 8001d8e:	727b      	strb	r3, [r7, #9]
 8001d90:	7a7b      	ldrb	r3, [r7, #9]
 8001d92:	2206      	movs	r2, #6
 8001d94:	f362 1307 	bfi	r3, r2, #4, #4
 8001d98:	727b      	strb	r3, [r7, #9]
 8001d9a:	230b      	movs	r3, #11
 8001d9c:	72bb      	strb	r3, [r7, #10]
 8001d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001da2:	72fb      	strb	r3, [r7, #11]
    .channel = GENERIC_TYPE,
    .size = 2,
    .data = {LH_PERSIST_DATA, result}
  };

  crtpSendPacketBlock(&response);
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fc75 	bl	8001698 <crtpSendPacketBlock>
}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	; 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <lhPersistDataHandler>:

static void lhPersistDataHandler(CRTPPacket* pk) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if (pk->size >= (1 + sizeof(LhPersistArgs_t))) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d908      	bls.n	8001dda <lhPersistDataHandler+0x22>
    LhPersistArgs_t* args = (LhPersistArgs_t*) &pk->data[1];
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3303      	adds	r3, #3
 8001dcc:	60fb      	str	r3, [r7, #12]
    workerSchedule(lhPersistDataWorker, (void*)args->combinedField);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <lhPersistDataHandler+0x2c>)
 8001dd6:	f006 fdf9 	bl	80089cc <workerSchedule>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	08001d17 	.word	0x08001d17

08001de8 <genericLocHandle>:

static void genericLocHandle(CRTPPacket* pk)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  const uint8_t type = pk->data[0];
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	789b      	ldrb	r3, [r3, #2]
 8001df4:	73fb      	strb	r3, [r7, #15]
  if (pk->size < 1) return;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d034      	beq.n	8001e68 <genericLocHandle+0x80>

  switch (type) {
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	3b02      	subs	r3, #2
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	d832      	bhi.n	8001e6c <genericLocHandle+0x84>
 8001e06:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <genericLocHandle+0x24>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	08001e3d 	.word	0x08001e3d
 8001e14:	08001e45 	.word	0x08001e45
 8001e18:	08001e6d 	.word	0x08001e6d
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e6d 	.word	0x08001e6d
 8001e24:	08001e51 	.word	0x08001e51
 8001e28:	08001e59 	.word	0x08001e59
 8001e2c:	08001e6d 	.word	0x08001e6d
 8001e30:	08001e61 	.word	0x08001e61
    case LPS_SHORT_LPP_PACKET:
      lpsShortLppPacketHandler(pk);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff47 	bl	8001cc8 <lpsShortLppPacketHandler>
      break;
 8001e3a:	e018      	b.n	8001e6e <genericLocHandle+0x86>
    case EMERGENCY_STOP:
      isEmergencyStopRequested = true;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <genericLocHandle+0x8c>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
      break;
 8001e42:	e014      	b.n	8001e6e <genericLocHandle+0x86>
    case EMERGENCY_STOP_WATCHDOG:
      emergencyStopWatchdogNotificationTick = xTaskGetTickCount();
 8001e44:	f012 faaa 	bl	801439c <xTaskGetTickCount>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <genericLocHandle+0x90>)
 8001e4c:	6013      	str	r3, [r2, #0]
      break;
 8001e4e:	e00e      	b.n	8001e6e <genericLocHandle+0x86>
    case EXT_POSE:
      extPoseHandler(pk);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fe3b 	bl	8001acc <extPoseHandler>
      break;
 8001e56:	e00a      	b.n	8001e6e <genericLocHandle+0x86>
    case EXT_POSE_PACKED:
      extPosePackedHandler(pk);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fe77 	bl	8001b4c <extPosePackedHandler>
      break;
 8001e5e:	e006      	b.n	8001e6e <genericLocHandle+0x86>
    case LH_PERSIST_DATA:
      lhPersistDataHandler(pk);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffa9 	bl	8001db8 <lhPersistDataHandler>
      break;
 8001e66:	e002      	b.n	8001e6e <genericLocHandle+0x86>
  if (pk->size < 1) return;
 8001e68:	bf00      	nop
 8001e6a:	e000      	b.n	8001e6e <genericLocHandle+0x86>
    default:
      // Nothing here
      break;
 8001e6c:	bf00      	nop
  }
}
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20004786 	.word	0x20004786
 8001e78:	20004788 	.word	0x20004788

08001e7c <extPositionPackedHandler>:

static void extPositionPackedHandler(CRTPPacket* pk)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint8_t numItems = pk->size / sizeof(extPositionPackedItem);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <extPositionPackedHandler+0xe4>)
 8001e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e8e:	1ad2      	subs	r2, r2, r3
 8001e90:	0852      	lsrs	r2, r2, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e056      	b.n	8001f4c <extPositionPackedHandler+0xd0>
    const extPositionPackedItem* item = (const extPositionPackedItem*)&pk->data[i * sizeof(extPositionPackedItem)];
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	60bb      	str	r3, [r7, #8]
    ext_pos.x = item->x / 1000.0f;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ebe:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001f64 <extPositionPackedHandler+0xe8>
 8001ec2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec6:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <extPositionPackedHandler+0xec>)
 8001ec8:	edc3 7a00 	vstr	s15, [r3]
    ext_pos.y = item->y / 1000.0f;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001edc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001f64 <extPositionPackedHandler+0xe8>
 8001ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <extPositionPackedHandler+0xec>)
 8001ee6:	edc3 7a01 	vstr	s15, [r3, #4]
    ext_pos.z = item->z / 1000.0f;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001f64 <extPositionPackedHandler+0xe8>
 8001efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <extPositionPackedHandler+0xec>)
 8001f04:	edc3 7a02 	vstr	s15, [r3, #8]
    ext_pos.stdDev = extPosStdDev;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <extPositionPackedHandler+0xf0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <extPositionPackedHandler+0xec>)
 8001f0e:	60d3      	str	r3, [r2, #12]
    ext_pos.source = MeasurementSourceLocationService;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <extPositionPackedHandler+0xec>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	741a      	strb	r2, [r3, #16]
    if (item->id == my_id) {
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <extPositionPackedHandler+0xf4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d10b      	bne.n	8001f3a <extPositionPackedHandler+0xbe>
      updateLogFromExtPos();
 8001f22:	f7ff fd8b 	bl	8001a3c <updateLogFromExtPos>
      estimatorEnqueuePosition(&ext_pos);
 8001f26:	4810      	ldr	r0, [pc, #64]	; (8001f68 <extPositionPackedHandler+0xec>)
 8001f28:	f7ff fc98 	bl	800185c <estimatorEnqueuePosition>
      tickOfLastPacket = xTaskGetTickCount();
 8001f2c:	f012 fa36 	bl	801439c <xTaskGetTickCount>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <extPositionPackedHandler+0xf8>)
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e005      	b.n	8001f46 <extPositionPackedHandler+0xca>
    }
    else {
      peerLocalizationTellPosition(item->id, &ext_pos);
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <extPositionPackedHandler+0xec>)
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff f911 	bl	8001168 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d3a4      	bcc.n	8001e9e <extPositionPackedHandler+0x22>
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24924925 	.word	0x24924925
 8001f64:	447a0000 	.word	0x447a0000
 8001f68:	20004748 	.word	0x20004748
 8001f6c:	20000050 	.word	0x20000050
 8001f70:	20004783 	.word	0x20004783
 8001f74:	20004784 	.word	0x20004784

08001f78 <crtpserviceInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpSrvTask, CRTP_SRV_TASK_STACKSIZE);

static void crtpSrvTask(void*);

void crtpserviceInit(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af04      	add	r7, sp, #16
  if (isInit)
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <crtpserviceInit+0x38>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d110      	bne.n	8001fa8 <crtpserviceInit+0x30>
    return;

  //Start the task
  STATIC_MEM_TASK_CREATE(crtpSrvTask, crtpSrvTask, CRTP_SRV_TASK_NAME, NULL, CRTP_SRV_TASK_PRI);
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <crtpserviceInit+0x3c>)
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <crtpserviceInit+0x40>)
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2300      	movs	r3, #0
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2300      	movs	r3, #0
 8001f98:	4908      	ldr	r1, [pc, #32]	; (8001fbc <crtpserviceInit+0x44>)
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <crtpserviceInit+0x48>)
 8001f9c:	f011 fe88 	bl	8013cb0 <xTaskCreateStatic>

  isInit = true;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <crtpserviceInit+0x38>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	e000      	b.n	8001faa <crtpserviceInit+0x32>
    return;
 8001fa8:	bf00      	nop
}
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000478c 	.word	0x2000478c
 8001fb4:	20001044 	.word	0x20001044
 8001fb8:	20000e44 	.word	0x20000e44
 8001fbc:	0801a150 	.word	0x0801a150
 8001fc0:	08001fc5 	.word	0x08001fc5

08001fc4 <crtpSrvTask>:
{
  return isInit;
}

static void crtpSrvTask(void* prm)
{
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_LINK);
 8001fcc:	200f      	movs	r0, #15
 8001fce:	f7ff fa33 	bl	8001438 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8001fd2:	491f      	ldr	r1, [pc, #124]	; (8002050 <crtpSrvTask+0x8c>)
 8001fd4:	200f      	movs	r0, #15
 8001fd6:	f7ff fa5f 	bl	8001498 <crtpReceivePacketBlock>

    switch (p.channel)
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <crtpSrvTask+0x8c>)
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d02f      	beq.n	8002048 <crtpSrvTask+0x84>
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	dc2f      	bgt.n	800204c <crtpSrvTask+0x88>
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <crtpSrvTask+0x32>
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d00d      	beq.n	8002010 <crtpSrvTask+0x4c>
        break;
      case linkSink:
        /* Ignore packet */
        break;
      default:
        break;
 8001ff4:	e02a      	b.n	800204c <crtpSrvTask+0x88>
        if (echoDelay > 0) {
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <crtpSrvTask+0x90>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <crtpSrvTask+0x44>
          vTaskDelay(M2T(echoDelay));
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <crtpSrvTask+0x90>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f012 f80c 	bl	8014020 <vTaskDelay>
        crtpSendPacketBlock(&p);
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <crtpSrvTask+0x8c>)
 800200a:	f7ff fb45 	bl	8001698 <crtpSendPacketBlock>
        break;
 800200e:	e01e      	b.n	800204e <crtpSrvTask+0x8a>
        p.size = CRTP_MAX_DATA_SIZE;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <crtpSrvTask+0x8c>)
 8002012:	221e      	movs	r2, #30
 8002014:	701a      	strb	r2, [r3, #0]
        bzero(p.data, CRTP_MAX_DATA_SIZE);
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <crtpSrvTask+0x94>)
 8002018:	4618      	mov	r0, r3
 800201a:	231e      	movs	r3, #30
 800201c:	461a      	mov	r2, r3
 800201e:	2100      	movs	r1, #0
 8002020:	f015 fd2a 	bl	8017a78 <memset>
        strcpy((char*)p.data, "Bitcraze Crazyflie");
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <crtpSrvTask+0x94>)
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <crtpSrvTask+0x98>)
 8002028:	4615      	mov	r5, r2
 800202a:	461c      	mov	r4, r3
 800202c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202e:	6028      	str	r0, [r5, #0]
 8002030:	6069      	str	r1, [r5, #4]
 8002032:	60aa      	str	r2, [r5, #8]
 8002034:	60eb      	str	r3, [r5, #12]
 8002036:	8823      	ldrh	r3, [r4, #0]
 8002038:	78a2      	ldrb	r2, [r4, #2]
 800203a:	822b      	strh	r3, [r5, #16]
 800203c:	4613      	mov	r3, r2
 800203e:	74ab      	strb	r3, [r5, #18]
        crtpSendPacketBlock(&p);
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <crtpSrvTask+0x8c>)
 8002042:	f7ff fb29 	bl	8001698 <crtpSendPacketBlock>
        break;
 8002046:	e002      	b.n	800204e <crtpSrvTask+0x8a>
        break;
 8002048:	bf00      	nop
 800204a:	e7c2      	b.n	8001fd2 <crtpSrvTask+0xe>
        break;
 800204c:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 800204e:	e7c0      	b.n	8001fd2 <crtpSrvTask+0xe>
 8002050:	20004790 	.word	0x20004790
 8002054:	2000478e 	.word	0x2000478e
 8002058:	20004792 	.word	0x20004792
 800205c:	0801a15c 	.word	0x0801a15c

08002060 <platformserviceInit>:
static void platformSrvTask(void*);
static void platformCommandProcess(CRTPPacket *p);
static void versionCommandProcess(CRTPPacket *p);

void platformserviceInit(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af04      	add	r7, sp, #16
  if (isInit)
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <platformserviceInit+0x3c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d112      	bne.n	8002094 <platformserviceInit+0x34>
    return;

  appchannelInit();
 800206e:	f7ff f8e1 	bl	8001234 <appchannelInit>

  //Start the task
  STATIC_MEM_TASK_CREATE(platformSrvTask, platformSrvTask, PLATFORM_SRV_TASK_NAME, NULL, PLATFORM_SRV_TASK_PRI);
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	461a      	mov	r2, r3
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <platformserviceInit+0x40>)
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <platformserviceInit+0x44>)
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2300      	movs	r3, #0
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	4908      	ldr	r1, [pc, #32]	; (80020a8 <platformserviceInit+0x48>)
 8002086:	4809      	ldr	r0, [pc, #36]	; (80020ac <platformserviceInit+0x4c>)
 8002088:	f011 fe12 	bl	8013cb0 <xTaskCreateStatic>

  isInit = true;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <platformserviceInit+0x3c>)
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e000      	b.n	8002096 <platformserviceInit+0x36>
    return;
 8002094:	bf00      	nop
}
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200047b0 	.word	0x200047b0
 80020a0:	200012fc 	.word	0x200012fc
 80020a4:	200010fc 	.word	0x200010fc
 80020a8:	0801a194 	.word	0x0801a194
 80020ac:	080020b1 	.word	0x080020b1

080020b0 <platformSrvTask>:
{
  return isInit;
}

static void platformSrvTask(void* prm)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_PLATFORM);
 80020b8:	200d      	movs	r0, #13
 80020ba:	f7ff f9bd 	bl	8001438 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 80020be:	4911      	ldr	r1, [pc, #68]	; (8002104 <platformSrvTask+0x54>)
 80020c0:	200d      	movs	r0, #13
 80020c2:	f7ff f9e9 	bl	8001498 <crtpReceivePacketBlock>

    switch (p.channel)
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <platformSrvTask+0x54>)
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d011      	beq.n	80020f8 <platformSrvTask+0x48>
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	dc13      	bgt.n	8002100 <platformSrvTask+0x50>
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <platformSrvTask+0x32>
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d007      	beq.n	80020f0 <platformSrvTask+0x40>
        break;
      case appChannel:
        appchannelIncomingPacket(&p);
        break;
      default:
        break;
 80020e0:	e00e      	b.n	8002100 <platformSrvTask+0x50>
        platformCommandProcess(&p);
 80020e2:	4808      	ldr	r0, [pc, #32]	; (8002104 <platformSrvTask+0x54>)
 80020e4:	f000 f810 	bl	8002108 <platformCommandProcess>
        crtpSendPacketBlock(&p);
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <platformSrvTask+0x54>)
 80020ea:	f7ff fad5 	bl	8001698 <crtpSendPacketBlock>
        break;
 80020ee:	e008      	b.n	8002102 <platformSrvTask+0x52>
        versionCommandProcess(&p);
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <platformSrvTask+0x54>)
 80020f2:	f000 f839 	bl	8002168 <versionCommandProcess>
        break;
 80020f6:	e004      	b.n	8002102 <platformSrvTask+0x52>
        appchannelIncomingPacket(&p);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <platformSrvTask+0x54>)
 80020fa:	f7ff f8b7 	bl	800126c <appchannelIncomingPacket>
        break;
 80020fe:	e000      	b.n	8002102 <platformSrvTask+0x52>
        break;
 8002100:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 8002102:	e7dc      	b.n	80020be <platformSrvTask+0xe>
 8002104:	200047b4 	.word	0x200047b4

08002108 <platformCommandProcess>:
    }
  }
}

static void platformCommandProcess(CRTPPacket *p)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint8_t command = p->data[0];
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	789b      	ldrb	r3, [r3, #2]
 8002114:	75fb      	strb	r3, [r7, #23]
  uint8_t *data = &p->data[1];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3303      	adds	r3, #3
 800211a:	613b      	str	r3, [r7, #16]

  switch (command) {
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <platformCommandProcess+0x20>
 8002122:	2b01      	cmp	r3, #1
 8002124:	d00e      	beq.n	8002144 <platformCommandProcess+0x3c>
//      data[1] = supervisorIsArmed();
      p->size = 2;
      break;
    }
    default:
      break;
 8002126:	e018      	b.n	800215a <platformCommandProcess+0x52>
      slp.type = SYSLINK_RADIO_CONTWAVE;
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <platformCommandProcess+0x5c>)
 800212a:	2203      	movs	r2, #3
 800212c:	701a      	strb	r2, [r3, #0]
      slp.length = 1;
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <platformCommandProcess+0x5c>)
 8002130:	2201      	movs	r2, #1
 8002132:	705a      	strb	r2, [r3, #1]
      slp.data[0] = data[0];
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <platformCommandProcess+0x5c>)
 800213a:	709a      	strb	r2, [r3, #2]
      syslinkSendPacket(&slp);
 800213c:	4809      	ldr	r0, [pc, #36]	; (8002164 <platformCommandProcess+0x5c>)
 800213e:	f000 faad 	bl	800269c <syslinkSendPacket>
      break;
 8002142:	e00a      	b.n	800215a <platformCommandProcess+0x52>
      const bool doArm = data[0];
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
      p->size = 2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
      break;
 8002158:	bf00      	nop
  }
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200047d4 	.word	0x200047d4

08002168 <versionCommandProcess>:
  p->channel = appChannel;
  return crtpSendPacketBlock(p);
}

static void versionCommandProcess(CRTPPacket *p)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  switch (p->data[0]) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	789b      	ldrb	r3, [r3, #2]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d032      	beq.n	80021de <versionCommandProcess+0x76>
 8002178:	2b02      	cmp	r3, #2
 800217a:	dc4f      	bgt.n	800221c <versionCommandProcess+0xb4>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <versionCommandProcess+0x1e>
 8002180:	2b01      	cmp	r3, #1
 8002182:	d00b      	beq.n	800219c <versionCommandProcess+0x34>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
      crtpSendPacketBlock(p);
      }
      break;
    default:
      break;
 8002184:	e04a      	b.n	800221c <versionCommandProcess+0xb4>
      *(int*)&p->data[1] = CRTP_PROTOCOL_VERSION;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3303      	adds	r3, #3
 800218a:	2207      	movs	r2, #7
 800218c:	601a      	str	r2, [r3, #0]
      p->size = 5;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2205      	movs	r2, #5
 8002192:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fa7f 	bl	8001698 <crtpSendPacketBlock>
      break;
 800219a:	e040      	b.n	800221e <versionCommandProcess+0xb6>
      strncpy((char*)&p->data[1], V_STAG, CRTP_MAX_DATA_SIZE-1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3303      	adds	r3, #3
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <versionCommandProcess+0xc0>)
 80021a2:	6811      	ldr	r1, [r2, #0]
 80021a4:	221d      	movs	r2, #29
 80021a6:	4618      	mov	r0, r3
 80021a8:	f015 fc8a 	bl	8017ac0 <strncpy>
      p->size = (strlen(V_STAG)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(V_STAG)+1;
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <versionCommandProcess+0xc0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f86d 	bl	8000290 <strlen>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b1d      	cmp	r3, #29
 80021ba:	d809      	bhi.n	80021d0 <versionCommandProcess+0x68>
 80021bc:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <versionCommandProcess+0xc0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f865 	bl	8000290 <strlen>
 80021c6:	4603      	mov	r3, r0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	e000      	b.n	80021d2 <versionCommandProcess+0x6a>
 80021d0:	221e      	movs	r2, #30
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fa5e 	bl	8001698 <crtpSendPacketBlock>
      break;
 80021dc:	e01f      	b.n	800221e <versionCommandProcess+0xb6>
      const char* name = platformConfigGetDeviceTypeName();
 80021de:	f002 fb67 	bl	80048b0 <platformConfigGetDeviceTypeName>
 80021e2:	60f8      	str	r0, [r7, #12]
      strncpy((char*)&p->data[1], name, CRTP_MAX_DATA_SIZE-1);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3303      	adds	r3, #3
 80021e8:	221d      	movs	r2, #29
 80021ea:	68f9      	ldr	r1, [r7, #12]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f015 fc67 	bl	8017ac0 <strncpy>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7fe f84c 	bl	8000290 <strlen>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b1d      	cmp	r3, #29
 80021fc:	d807      	bhi.n	800220e <versionCommandProcess+0xa6>
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f7fe f846 	bl	8000290 <strlen>
 8002204:	4603      	mov	r3, r0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3301      	adds	r3, #1
 800220a:	b2da      	uxtb	r2, r3
 800220c:	e000      	b.n	8002210 <versionCommandProcess+0xa8>
 800220e:	221e      	movs	r2, #30
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fa3f 	bl	8001698 <crtpSendPacketBlock>
      break;
 800221a:	e000      	b.n	800221e <versionCommandProcess+0xb6>
      break;
 800221c:	bf00      	nop
  }
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000350 	.word	0x20000350

0800222c <radiolinkIsConnected>:
static bool isConnected;
static uint32_t lastPacketTick;

static volatile P2PCallback p2p_callback;

static bool radiolinkIsConnected(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  return (xTaskGetTickCount() - lastPacketTick) < M2T(RADIO_ACTIVITY_TIMEOUT_MS);
 8002230:	f012 f8b4 	bl	801439c <xTaskGetTickCount>
 8002234:	4602      	mov	r2, r0
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <radiolinkIsConnected+0x24>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20004824 	.word	0x20004824

08002254 <radiolinkInit>:
  .receivePacket     = radiolinkReceiveCRTPPacket,
  .isConnected       = radiolinkIsConnected
};

void radiolinkInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af02      	add	r7, sp, #8
  if (isInit)
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <radiolinkInit+0x84>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d136      	bne.n	80022d0 <radiolinkInit+0x7c>
    return;

  txQueue = STATIC_MEM_QUEUE_CREATE(txQueue);
 8002262:	2301      	movs	r3, #1
 8002264:	4618      	mov	r0, r3
 8002266:	2342      	movs	r3, #66	; 0x42
 8002268:	4619      	mov	r1, r3
 800226a:	2300      	movs	r3, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <radiolinkInit+0x88>)
 8002270:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <radiolinkInit+0x8c>)
 8002272:	f010 fee7 	bl	8013044 <xQueueGenericCreateStatic>
 8002276:	4603      	mov	r3, r0
 8002278:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <radiolinkInit+0x90>)
 800227a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <radiolinkInit+0x90>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <radiolinkInit+0x94>)
 8002282:	491a      	ldr	r1, [pc, #104]	; (80022ec <radiolinkInit+0x98>)
 8002284:	4618      	mov	r0, r3
 8002286:	f006 f8e5 	bl	8008454 <qmRegisterQueue>
  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 800228a:	2305      	movs	r3, #5
 800228c:	4618      	mov	r0, r3
 800228e:	2320      	movs	r3, #32
 8002290:	4619      	mov	r1, r3
 8002292:	2300      	movs	r3, #0
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <radiolinkInit+0x9c>)
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <radiolinkInit+0xa0>)
 800229a:	f010 fed3 	bl	8013044 <xQueueGenericCreateStatic>
 800229e:	4603      	mov	r3, r0
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <radiolinkInit+0xa4>)
 80022a2:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <radiolinkInit+0xa4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <radiolinkInit+0xa8>)
 80022aa:	4910      	ldr	r1, [pc, #64]	; (80022ec <radiolinkInit+0x98>)
 80022ac:	4618      	mov	r0, r3
 80022ae:	f006 f8d1 	bl	8008454 <qmRegisterQueue>

  ASSERT(crtpPacketDelivery);
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <radiolinkInit+0xa4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d104      	bne.n	80022c4 <radiolinkInit+0x70>
 80022ba:	225f      	movs	r2, #95	; 0x5f
 80022bc:	490b      	ldr	r1, [pc, #44]	; (80022ec <radiolinkInit+0x98>)
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <radiolinkInit+0xa8>)
 80022c0:	f003 f9c4 	bl	800564c <assertFail>

  syslinkInit();
 80022c4:	f000 f982 	bl	80025cc <syslinkInit>

//  radiolinkSetChannel(configblockGetRadioChannel());
//  radiolinkSetDatarate(configblockGetRadioSpeed());
//  radiolinkSetAddress(configblockGetRadioAddress());

  isInit = true;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <radiolinkInit+0x84>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e000      	b.n	80022d2 <radiolinkInit+0x7e>
    return;
 80022d0:	bf00      	nop
}
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20004820 	.word	0x20004820
 80022dc:	200013f8 	.word	0x200013f8
 80022e0:	200013b4 	.word	0x200013b4
 80022e4:	20004818 	.word	0x20004818
 80022e8:	0801a1a4 	.word	0x0801a1a4
 80022ec:	0801a1ac 	.word	0x0801a1ac
 80022f0:	200014e8 	.word	0x200014e8
 80022f4:	20001448 	.word	0x20001448
 80022f8:	2000481c 	.word	0x2000481c
 80022fc:	0801a1cc 	.word	0x0801a1cc

08002300 <radiolinkTest>:

bool radiolinkTest(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  return syslinkTest();
 8002304:	f000 f9be 	bl	8002684 <syslinkTest>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <radiolinkSyslinkDispatch>:
  syslinkSendPacket(&slp);
}


void radiolinkSyslinkDispatch(SyslinkPacket *slp)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b092      	sub	sp, #72	; 0x48
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (slp->type == SYSLINK_RADIO_RAW || slp->type == SYSLINK_RADIO_RAW_BROADCAST) {
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <radiolinkSyslinkDispatch+0x18>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b06      	cmp	r3, #6
 8002326:	d104      	bne.n	8002332 <radiolinkSyslinkDispatch+0x22>
    lastPacketTick = xTaskGetTickCount();
 8002328:	f012 f838 	bl	801439c <xTaskGetTickCount>
 800232c:	4603      	mov	r3, r0
 800232e:	4a41      	ldr	r2, [pc, #260]	; (8002434 <radiolinkSyslinkDispatch+0x124>)
 8002330:	6013      	str	r3, [r2, #0]
  }

  if (slp->type == SYSLINK_RADIO_RAW)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d129      	bne.n	800238e <radiolinkSyslinkDispatch+0x7e>
  {
    slp->length--; // Decrease to get CRTP size.
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	3b01      	subs	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	705a      	strb	r2, [r3, #1]
    // Assert that we are not dropping any packets
    ASSERT(xQueueSend(crtpPacketDelivery, &slp->length, 0) == pdPASS);
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <radiolinkSyslinkDispatch+0x128>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	1c59      	adds	r1, r3, #1
 800234e:	2300      	movs	r3, #0
 8002350:	2200      	movs	r2, #0
 8002352:	f010 ff8d 	bl	8013270 <xQueueGenericSend>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	d004      	beq.n	8002366 <radiolinkSyslinkDispatch+0x56>
 800235c:	22a4      	movs	r2, #164	; 0xa4
 800235e:	4937      	ldr	r1, [pc, #220]	; (800243c <radiolinkSyslinkDispatch+0x12c>)
 8002360:	4837      	ldr	r0, [pc, #220]	; (8002440 <radiolinkSyslinkDispatch+0x130>)
 8002362:	f003 f973 	bl	800564c <assertFail>
    ledseqRun(&seq_linkUp);
 8002366:	4837      	ldr	r0, [pc, #220]	; (8002444 <radiolinkSyslinkDispatch+0x134>)
 8002368:	f000 ff32 	bl	80031d0 <ledseqRun>
    // If a radio packet is received, one can be sent
    if (xQueueReceive(txQueue, &txPacket, 0) == pdTRUE)
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <radiolinkSyslinkDispatch+0x138>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	4936      	ldr	r1, [pc, #216]	; (800244c <radiolinkSyslinkDispatch+0x13c>)
 8002374:	4618      	mov	r0, r3
 8002376:	f011 f91d 	bl	80135b4 <xQueueReceive>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d14f      	bne.n	8002420 <radiolinkSyslinkDispatch+0x110>
    {
      ledseqRun(&seq_linkDown);
 8002380:	4833      	ldr	r0, [pc, #204]	; (8002450 <radiolinkSyslinkDispatch+0x140>)
 8002382:	f000 ff25 	bl	80031d0 <ledseqRun>
      syslinkSendPacket(&txPacket);
 8002386:	4831      	ldr	r0, [pc, #196]	; (800244c <radiolinkSyslinkDispatch+0x13c>)
 8002388:	f000 f988 	bl	800269c <syslinkSendPacket>
 800238c:	e048      	b.n	8002420 <radiolinkSyslinkDispatch+0x110>
    }
  } else if (slp->type == SYSLINK_RADIO_RAW_BROADCAST)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b06      	cmp	r3, #6
 8002394:	d111      	bne.n	80023ba <radiolinkSyslinkDispatch+0xaa>
  {
    slp->length--; // Decrease to get CRTP size.
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	3b01      	subs	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	705a      	strb	r2, [r3, #1]
    // broadcasts are best effort, so no need to handle the case where the queue is full
    xQueueSend(crtpPacketDelivery, &slp->length, 0);
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <radiolinkSyslinkDispatch+0x128>)
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	1c59      	adds	r1, r3, #1
 80023aa:	2300      	movs	r3, #0
 80023ac:	2200      	movs	r2, #0
 80023ae:	f010 ff5f 	bl	8013270 <xQueueGenericSend>
    ledseqRun(&seq_linkUp);
 80023b2:	4824      	ldr	r0, [pc, #144]	; (8002444 <radiolinkSyslinkDispatch+0x134>)
 80023b4:	f000 ff0c 	bl	80031d0 <ledseqRun>
 80023b8:	e032      	b.n	8002420 <radiolinkSyslinkDispatch+0x110>
    // no ack for broadcasts
  } else if (slp->type == SYSLINK_RADIO_RSSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d105      	bne.n	80023ce <radiolinkSyslinkDispatch+0xbe>
  {
    //Extract RSSI sample sent from radio
    memcpy(&rssi, slp->data, sizeof(uint8_t)); //rssi will not change on disconnect
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3302      	adds	r3, #2
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <radiolinkSyslinkDispatch+0x144>)
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e028      	b.n	8002420 <radiolinkSyslinkDispatch+0x110>
  } else if (slp->type == SYSLINK_RADIO_P2P_BROADCAST)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d124      	bne.n	8002420 <radiolinkSyslinkDispatch+0x110>
  {
    ledseqRun(&seq_linkUp);
 80023d6:	481b      	ldr	r0, [pc, #108]	; (8002444 <radiolinkSyslinkDispatch+0x134>)
 80023d8:	f000 fefa 	bl	80031d0 <ledseqRun>
    P2PPacket p2pp;
    p2pp.port=slp->data[0];
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	789b      	ldrb	r3, [r3, #2]
 80023e0:	72bb      	strb	r3, [r7, #10]
    p2pp.rssi = slp->data[1];
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	78db      	ldrb	r3, [r3, #3]
 80023e6:	727b      	strb	r3, [r7, #9]

    const uint8_t p2pDataLength = slp->length - 2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	3b02      	subs	r3, #2
 80023ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    memcpy(&p2pp.data[0], &slp->data[2], p2pDataLength);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	1d19      	adds	r1, r3, #4
 80023f6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	3303      	adds	r3, #3
 8002400:	4618      	mov	r0, r3
 8002402:	f015 fc3e 	bl	8017c82 <memcpy>
    p2pp.size = p2pDataLength;
 8002406:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800240a:	723b      	strb	r3, [r7, #8]

    if (p2p_callback) {
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <radiolinkSyslinkDispatch+0x148>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <radiolinkSyslinkDispatch+0x110>
        p2p_callback(&p2pp);
 8002414:	4b10      	ldr	r3, [pc, #64]	; (8002458 <radiolinkSyslinkDispatch+0x148>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f107 0208 	add.w	r2, r7, #8
 800241c:	4610      	mov	r0, r2
 800241e:	4798      	blx	r3
    }
  }

  isConnected = radiolinkIsConnected();
 8002420:	f7ff ff04 	bl	800222c <radiolinkIsConnected>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <radiolinkSyslinkDispatch+0x14c>)
 800242a:	701a      	strb	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	3748      	adds	r7, #72	; 0x48
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20004824 	.word	0x20004824
 8002438:	2000481c 	.word	0x2000481c
 800243c:	0801a1ac 	.word	0x0801a1ac
 8002440:	0801a1e0 	.word	0x0801a1e0
 8002444:	200001ac 	.word	0x200001ac
 8002448:	20004818 	.word	0x20004818
 800244c:	2000482c 	.word	0x2000482c
 8002450:	200001bc 	.word	0x200001bc
 8002454:	20004821 	.word	0x20004821
 8002458:	20004828 	.word	0x20004828
 800245c:	20004822 	.word	0x20004822

08002460 <radiolinkReceiveCRTPPacket>:

static int radiolinkReceiveCRTPPacket(CRTPPacket *p)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <radiolinkReceiveCRTPPacket+0x2c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2264      	movs	r2, #100	; 0x64
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4618      	mov	r0, r3
 8002472:	f011 f89f 	bl	80135b4 <xQueueReceive>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <radiolinkReceiveCRTPPacket+0x20>
  {
    return 0;
 800247c:	2300      	movs	r3, #0
 800247e:	e001      	b.n	8002484 <radiolinkReceiveCRTPPacket+0x24>
  }

  return -1;
 8002480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000481c 	.word	0x2000481c

08002490 <radiolinkSendCRTPPacket>:
{
    p2p_callback = cb;
}

static int radiolinkSendCRTPPacket(CRTPPacket *p)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  static SyslinkPacket slp;

  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b1e      	cmp	r3, #30
 800249e:	d904      	bls.n	80024aa <radiolinkSendCRTPPacket+0x1a>
 80024a0:	22dd      	movs	r2, #221	; 0xdd
 80024a2:	4913      	ldr	r1, [pc, #76]	; (80024f0 <radiolinkSendCRTPPacket+0x60>)
 80024a4:	4813      	ldr	r0, [pc, #76]	; (80024f4 <radiolinkSendCRTPPacket+0x64>)
 80024a6:	f003 f8d1 	bl	800564c <assertFail>

  slp.type = SYSLINK_RADIO_RAW;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <radiolinkSendCRTPPacket+0x68>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
  slp.length = p->size + 1;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <radiolinkSendCRTPPacket+0x68>)
 80024ba:	705a      	strb	r2, [r3, #1]
  memcpy(slp.data, &p->header, p->size + 1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1c59      	adds	r1, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	461a      	mov	r2, r3
 80024c8:	480c      	ldr	r0, [pc, #48]	; (80024fc <radiolinkSendCRTPPacket+0x6c>)
 80024ca:	f015 fbda 	bl	8017c82 <memcpy>

  if (xQueueSend(txQueue, &slp, M2T(100)) == pdTRUE)
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <radiolinkSendCRTPPacket+0x70>)
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2264      	movs	r2, #100	; 0x64
 80024d6:	4908      	ldr	r1, [pc, #32]	; (80024f8 <radiolinkSendCRTPPacket+0x68>)
 80024d8:	f010 feca 	bl	8013270 <xQueueGenericSend>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <radiolinkSendCRTPPacket+0x56>
  {
    return true;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <radiolinkSendCRTPPacket+0x58>
  }

  return false;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	0801a1ac 	.word	0x0801a1ac
 80024f4:	0801a21c 	.word	0x0801a21c
 80024f8:	20004870 	.word	0x20004870
 80024fc:	20004872 	.word	0x20004872
 8002500:	20004818 	.word	0x20004818

08002504 <radiolinkGetLink>:
  return true;
}


struct crtpLinkOperations * radiolinkGetLink()
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return &radiolinkOp;
 8002508:	4b02      	ldr	r3, [pc, #8]	; (8002514 <radiolinkGetLink+0x10>)
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	20000058 	.word	0x20000058

08002518 <radiolinkSetEnable>:

static int radiolinkSetEnable(bool enable)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  return 0;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <syslinkTask>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(syslinkTask, SYSLINK_TASK_STACKSIZE);

/* Syslink task, handles communication between nrf and stm and dispatch messages
 */
static void syslinkTask(void *param)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b094      	sub	sp, #80	; 0x50
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  SyslinkPacket slp;
  while(1)
  {
    uartslkGetPacketBlocking(&slp);
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4618      	mov	r0, r3
 800253e:	f001 fe35 	bl	80041ac <uartslkGetPacketBlocking>
    syslinkRouteIncommingPacket(&slp);
 8002542:	f107 030c 	add.w	r3, r7, #12
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f802 	bl	8002550 <syslinkRouteIncommingPacket>
    uartslkGetPacketBlocking(&slp);
 800254c:	e7f4      	b.n	8002538 <syslinkTask+0x8>
	...

08002550 <syslinkRouteIncommingPacket>:
  }
}

static void syslinkRouteIncommingPacket(SyslinkPacket *slp)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint8_t groupType;

  groupType = slp->type & SYSLINK_GROUP_MASK;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f023 030f 	bic.w	r3, r3, #15
 8002560:	73fb      	strb	r3, [r7, #15]

  switch (groupType)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2bf0      	cmp	r3, #240	; 0xf0
 8002566:	d01e      	beq.n	80025a6 <syslinkRouteIncommingPacket+0x56>
 8002568:	2bf0      	cmp	r3, #240	; 0xf0
 800256a:	dc20      	bgt.n	80025ae <syslinkRouteIncommingPacket+0x5e>
 800256c:	2b30      	cmp	r3, #48	; 0x30
 800256e:	d016      	beq.n	800259e <syslinkRouteIncommingPacket+0x4e>
 8002570:	2b30      	cmp	r3, #48	; 0x30
 8002572:	dc1c      	bgt.n	80025ae <syslinkRouteIncommingPacket+0x5e>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d00e      	beq.n	8002596 <syslinkRouteIncommingPacket+0x46>
 8002578:	2b20      	cmp	r3, #32
 800257a:	dc18      	bgt.n	80025ae <syslinkRouteIncommingPacket+0x5e>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <syslinkRouteIncommingPacket+0x36>
 8002580:	2b10      	cmp	r3, #16
 8002582:	d004      	beq.n	800258e <syslinkRouteIncommingPacket+0x3e>
 8002584:	e013      	b.n	80025ae <syslinkRouteIncommingPacket+0x5e>
  {
    case SYSLINK_RADIO_GROUP:
      radiolinkSyslinkDispatch(slp);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fec2 	bl	8002310 <radiolinkSyslinkDispatch>
      break;
 800258c:	e017      	b.n	80025be <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_PM_GROUP:
      pmSyslinkUpdate(slp);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f001 f8da 	bl	8003748 <pmSyslinkUpdate>
      break;
 8002594:	e013      	b.n	80025be <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_OW_GROUP:
      owSyslinkReceive(slp);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 ffcc 	bl	8003534 <owSyslinkReceive>
      break;
 800259c:	e00f      	b.n	80025be <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_SYS_GROUP:
      systemSyslinkReceive(slp);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f001 fd28 	bl	8003ff4 <systemSyslinkReceive>
      break;
 80025a4:	e00b      	b.n	80025be <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_DEBUG_GROUP:
      debugSyslinkReceive(slp);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f90c 	bl	80027c4 <debugSyslinkReceive>
      break;
 80025ac:	e007      	b.n	80025be <syslinkRouteIncommingPacket+0x6e>
    default:
      DEBUG_PRINT("Unknown packet:%X.\n", slp->type);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <syslinkRouteIncommingPacket+0x78>)
 80025b6:	2000      	movs	r0, #0
 80025b8:	f003 f81a 	bl	80055f0 <SEGGER_RTT_printf>
      break;
 80025bc:	bf00      	nop
  }
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	0801a284 	.word	0x0801a284

080025cc <syslinkInit>:
/*
 * Public functions
 */

void syslinkInit()
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af04      	add	r7, sp, #16
  if(isInit) {
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <syslinkInit+0x94>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d13d      	bne.n	8002656 <syslinkInit+0x8a>
    return;
  }

  vSemaphoreCreateBinary(syslinkAccess);
 80025da:	2203      	movs	r2, #3
 80025dc:	2100      	movs	r1, #0
 80025de:	2001      	movs	r0, #1
 80025e0:	f010 fd9c 	bl	801311c <xQueueGenericCreate>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <syslinkInit+0x98>)
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <syslinkInit+0x98>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <syslinkInit+0x34>
 80025f2:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <syslinkInit+0x98>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	2300      	movs	r3, #0
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	f010 fe38 	bl	8013270 <xQueueGenericSend>

  STATIC_MEM_TASK_CREATE(syslinkTask, syslinkTask, SYSLINK_TASK_NAME, NULL, SYSLINK_TASK_PRI);
 8002600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002604:	461a      	mov	r2, r3
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <syslinkInit+0x9c>)
 8002608:	9302      	str	r3, [sp, #8]
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <syslinkInit+0xa0>)
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2303      	movs	r3, #3
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	4916      	ldr	r1, [pc, #88]	; (8002670 <syslinkInit+0xa4>)
 8002616:	4817      	ldr	r0, [pc, #92]	; (8002674 <syslinkInit+0xa8>)
 8002618:	f011 fb4a 	bl	8013cb0 <xTaskCreateStatic>

  debugTimer = xTimerCreate( "syslinkTimer", M2T(1000), pdTRUE, NULL, debugHandler );
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <syslinkInit+0xac>)
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2300      	movs	r3, #0
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002628:	4814      	ldr	r0, [pc, #80]	; (800267c <syslinkInit+0xb0>)
 800262a:	f012 fe87 	bl	801533c <xTimerCreate>
 800262e:	4603      	mov	r3, r0
 8002630:	4a13      	ldr	r2, [pc, #76]	; (8002680 <syslinkInit+0xb4>)
 8002632:	6013      	str	r3, [r2, #0]
  xTimerStart(debugTimer, M2T(1000));
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <syslinkInit+0xb4>)
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	f011 feb0 	bl	801439c <xTaskGetTickCount>
 800263c:	4602      	mov	r2, r0
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	2101      	movs	r1, #1
 8002648:	4620      	mov	r0, r4
 800264a:	f012 ff0d 	bl	8015468 <xTimerGenericCommand>

  isInit = true;
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <syslinkInit+0x94>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e000      	b.n	8002658 <syslinkInit+0x8c>
    return;
 8002656:	bf00      	nop
}
 8002658:	3704      	adds	r7, #4
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	bf00      	nop
 8002660:	200048b2 	.word	0x200048b2
 8002664:	20004904 	.word	0x20004904
 8002668:	20001938 	.word	0x20001938
 800266c:	20001538 	.word	0x20001538
 8002670:	0801a298 	.word	0x0801a298
 8002674:	08002531 	.word	0x08002531
 8002678:	0800277d 	.word	0x0800277d
 800267c:	0801a2a0 	.word	0x0801a2a0
 8002680:	200048fc 	.word	0x200048fc

08002684 <syslinkTest>:

bool syslinkTest()
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return isInit;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <syslinkTest+0x14>)
 800268a:	781b      	ldrb	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	200048b2 	.word	0x200048b2

0800269c <syslinkSendPacket>:
  return isInit;
}


int syslinkSendPacket(SyslinkPacket *slp)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  int i = 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  int dataSize;
  uint8_t cksum[2] = {0};
 80026a8:	2300      	movs	r3, #0
 80026aa:	81bb      	strh	r3, [r7, #12]

  xSemaphoreTake(syslinkAccess, portMAX_DELAY);
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <syslinkSendPacket+0xcc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026b4:	4618      	mov	r0, r3
 80026b6:	f011 f85d 	bl	8013774 <xQueueSemaphoreTake>

  ASSERT(slp->length <= SYSLINK_MTU);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d904      	bls.n	80026cc <syslinkSendPacket+0x30>
 80026c2:	2291      	movs	r2, #145	; 0x91
 80026c4:	4929      	ldr	r1, [pc, #164]	; (800276c <syslinkSendPacket+0xd0>)
 80026c6:	482a      	ldr	r0, [pc, #168]	; (8002770 <syslinkSendPacket+0xd4>)
 80026c8:	f002 ffc0 	bl	800564c <assertFail>

  sendBuffer[0] = SYSLINK_START_BYTE1;
 80026cc:	4b29      	ldr	r3, [pc, #164]	; (8002774 <syslinkSendPacket+0xd8>)
 80026ce:	22bc      	movs	r2, #188	; 0xbc
 80026d0:	701a      	strb	r2, [r3, #0]
  sendBuffer[1] = SYSLINK_START_BYTE2;
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <syslinkSendPacket+0xd8>)
 80026d4:	22cf      	movs	r2, #207	; 0xcf
 80026d6:	705a      	strb	r2, [r3, #1]
  sendBuffer[2] = slp->type;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <syslinkSendPacket+0xd8>)
 80026de:	709a      	strb	r2, [r3, #2]
  sendBuffer[3] = slp->length;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	785a      	ldrb	r2, [r3, #1]
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <syslinkSendPacket+0xd8>)
 80026e6:	70da      	strb	r2, [r3, #3]

  memcpy(&sendBuffer[4], slp->data, slp->length);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1c99      	adds	r1, r3, #2
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4821      	ldr	r0, [pc, #132]	; (8002778 <syslinkSendPacket+0xdc>)
 80026f4:	f015 fac5 	bl	8017c82 <memcpy>
  dataSize = slp->length + 6;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	785b      	ldrb	r3, [r3, #1]
 80026fc:	3306      	adds	r3, #6
 80026fe:	613b      	str	r3, [r7, #16]
  // Calculate checksum delux
  for (i = 2; i < dataSize - 2; i++)
 8002700:	2302      	movs	r3, #2
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e00f      	b.n	8002726 <syslinkSendPacket+0x8a>
  {
    cksum[0] += sendBuffer[i];
 8002706:	7b3a      	ldrb	r2, [r7, #12]
 8002708:	491a      	ldr	r1, [pc, #104]	; (8002774 <syslinkSendPacket+0xd8>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	440b      	add	r3, r1
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4413      	add	r3, r2
 8002712:	b2db      	uxtb	r3, r3
 8002714:	733b      	strb	r3, [r7, #12]
    cksum[1] += cksum[0];
 8002716:	7b7a      	ldrb	r2, [r7, #13]
 8002718:	7b3b      	ldrb	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	b2db      	uxtb	r3, r3
 800271e:	737b      	strb	r3, [r7, #13]
  for (i = 2; i < dataSize - 2; i++)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3301      	adds	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3b02      	subs	r3, #2
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	dbea      	blt.n	8002706 <syslinkSendPacket+0x6a>
  }
  sendBuffer[dataSize-2] = cksum[0];
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	3b02      	subs	r3, #2
 8002734:	7b39      	ldrb	r1, [r7, #12]
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <syslinkSendPacket+0xd8>)
 8002738:	54d1      	strb	r1, [r2, r3]
  sendBuffer[dataSize-1] = cksum[1];
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	3b01      	subs	r3, #1
 800273e:	7b79      	ldrb	r1, [r7, #13]
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <syslinkSendPacket+0xd8>)
 8002742:	54d1      	strb	r1, [r2, r3]

  uartslkSendDataDmaBlocking(dataSize, sendBuffer);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	490b      	ldr	r1, [pc, #44]	; (8002774 <syslinkSendPacket+0xd8>)
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fd41 	bl	80041d0 <uartslkSendDataDmaBlocking>

  xSemaphoreGive(syslinkAccess);
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <syslinkSendPacket+0xcc>)
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	2300      	movs	r3, #0
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	f010 fd8a 	bl	8013270 <xQueueGenericSend>

  return 0;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20004904 	.word	0x20004904
 800276c:	0801a2b0 	.word	0x0801a2b0
 8002770:	0801a2cc 	.word	0x0801a2cc
 8002774:	200048b4 	.word	0x200048b4
 8002778:	200048b8 	.word	0x200048b8

0800277c <debugHandler>:

static void debugHandler(xTimerHandle timer) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (triggerDebugProbe) {
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <debugHandler+0x3c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d011      	beq.n	80027b0 <debugHandler+0x34>
    triggerDebugProbe = 0;
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <debugHandler+0x3c>)
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]

    uartSyslinkDumpDebugProbe();
 8002792:	f001 fd7b 	bl	800428c <uartSyslinkDumpDebugProbe>
    DEBUG_PRINT("Syslink NRF debug probe initialized\n");
 8002796:	4909      	ldr	r1, [pc, #36]	; (80027bc <debugHandler+0x40>)
 8002798:	2000      	movs	r0, #0
 800279a:	f002 ff29 	bl	80055f0 <SEGGER_RTT_printf>

    txPacket.type = SYSLINK_DEBUG_PROBE;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <debugHandler+0x44>)
 80027a0:	22f0      	movs	r2, #240	; 0xf0
 80027a2:	701a      	strb	r2, [r3, #0]
    txPacket.length = 0;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <debugHandler+0x44>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	705a      	strb	r2, [r3, #1]
    syslinkSendPacket(&txPacket);
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <debugHandler+0x44>)
 80027ac:	f7ff ff76 	bl	800269c <syslinkSendPacket>
  }
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20004900 	.word	0x20004900
 80027bc:	0801a2e8 	.word	0x0801a2e8
 80027c0:	20004908 	.word	0x20004908

080027c4 <debugSyslinkReceive>:

static void debugSyslinkReceive(SyslinkPacket *slp) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_DEBUG_PROBE) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2bf0      	cmp	r3, #240	; 0xf0
 80027d2:	d137      	bne.n	8002844 <debugSyslinkReceive+0x80>
    DEBUG_PRINT("NRF Address received: %d\n", slp->data[0]);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	789b      	ldrb	r3, [r3, #2]
 80027d8:	461a      	mov	r2, r3
 80027da:	491c      	ldr	r1, [pc, #112]	; (800284c <debugSyslinkReceive+0x88>)
 80027dc:	2000      	movs	r0, #0
 80027de:	f002 ff07 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Chan received: %d\n", slp->data[1]);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	78db      	ldrb	r3, [r3, #3]
 80027e6:	461a      	mov	r2, r3
 80027e8:	4919      	ldr	r1, [pc, #100]	; (8002850 <debugSyslinkReceive+0x8c>)
 80027ea:	2000      	movs	r0, #0
 80027ec:	f002 ff00 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Rate received: %d\n", slp->data[2]);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	791b      	ldrb	r3, [r3, #4]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4917      	ldr	r1, [pc, #92]	; (8002854 <debugSyslinkReceive+0x90>)
 80027f8:	2000      	movs	r0, #0
 80027fa:	f002 fef9 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Dropped: %d\n", slp->data[3]);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	795b      	ldrb	r3, [r3, #5]
 8002802:	461a      	mov	r2, r3
 8002804:	4914      	ldr	r1, [pc, #80]	; (8002858 <debugSyslinkReceive+0x94>)
 8002806:	2000      	movs	r0, #0
 8002808:	f002 fef2 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error code: %d\n", slp->data[4]);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	799b      	ldrb	r3, [r3, #6]
 8002810:	461a      	mov	r2, r3
 8002812:	4912      	ldr	r1, [pc, #72]	; (800285c <debugSyslinkReceive+0x98>)
 8002814:	2000      	movs	r0, #0
 8002816:	f002 feeb 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error count: %d\n", slp->data[5]);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	79db      	ldrb	r3, [r3, #7]
 800281e:	461a      	mov	r2, r3
 8002820:	490f      	ldr	r1, [pc, #60]	; (8002860 <debugSyslinkReceive+0x9c>)
 8002822:	2000      	movs	r0, #0
 8002824:	f002 fee4 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 1 fail count: %d\n", slp->data[6]);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7a1b      	ldrb	r3, [r3, #8]
 800282c:	461a      	mov	r2, r3
 800282e:	490d      	ldr	r1, [pc, #52]	; (8002864 <debugSyslinkReceive+0xa0>)
 8002830:	2000      	movs	r0, #0
 8002832:	f002 fedd 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 2 fail count: %d\n", slp->data[7]);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7a5b      	ldrb	r3, [r3, #9]
 800283a:	461a      	mov	r2, r3
 800283c:	490a      	ldr	r1, [pc, #40]	; (8002868 <debugSyslinkReceive+0xa4>)
 800283e:	2000      	movs	r0, #0
 8002840:	f002 fed6 	bl	80055f0 <SEGGER_RTT_printf>
  }
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	0801a310 	.word	0x0801a310
 8002850:	0801a32c 	.word	0x0801a32c
 8002854:	0801a344 	.word	0x0801a344
 8002858:	0801a35c 	.word	0x0801a35c
 800285c:	0801a370 	.word	0x0801a370
 8002860:	0801a38c 	.word	0x0801a38c
 8002864:	0801a3a8 	.word	0x0801a3a8
 8002868:	0801a3cc 	.word	0x0801a3cc

0800286c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f023 0210 	bic.w	r2, r3, #16
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	605a      	str	r2, [r3, #4]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <LL_SPI_IsActiveFlag_RXNE+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d101      	bne.n	80028f0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	330c      	adds	r3, #12
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b2db      	uxtb	r3, r3
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	460b      	mov	r3, r1
 8002924:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	330c      	adds	r3, #12
 800292a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800294a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294c:	4907      	ldr	r1, [pc, #28]	; (800296c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4313      	orrs	r3, r2
 8002952:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4013      	ands	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40023800 	.word	0x40023800

08002970 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <LL_APB2_GRP1_EnableClock+0x2c>)
 800297a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <LL_APB2_GRP1_EnableClock+0x2c>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4313      	orrs	r3, r2
 8002982:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40023800 	.word	0x40023800

080029a0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	619a      	str	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	041a      	lsls	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	619a      	str	r2, [r3, #24]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b090      	sub	sp, #64	; 0x40
 80029e0:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	2228      	movs	r2, #40	; 0x28
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f015 f844 	bl	8017a78 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	463b      	mov	r3, r7
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002a00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a04:	f7ff ffb4 	bl	8002970 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f7ff ff99 	bl	8002940 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002a0e:	2004      	movs	r0, #4
 8002a10:	f7ff ff96 	bl	8002940 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002a14:	23e0      	movs	r3, #224	; 0xe0
 8002a16:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002a28:	2305      	movs	r3, #5
 8002a2a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	463b      	mov	r3, r7
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4825      	ldr	r0, [pc, #148]	; (8002ac8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002a32:	f00c fda4 	bl	800f57e <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002a3a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002a3e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002a44:	2302      	movs	r3, #2
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8002a52:	2310      	movs	r3, #16
 8002a54:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002a56:	2300      	movs	r3, #0
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002a5e:	230a      	movs	r3, #10
 8002a60:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8002a62:	f107 0318 	add.w	r3, r7, #24
 8002a66:	4619      	mov	r1, r3
 8002a68:	4818      	ldr	r0, [pc, #96]	; (8002acc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002a6a:	f00c fe2c 	bl	800f6c6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4816      	ldr	r0, [pc, #88]	; (8002acc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002a72:	f7ff ff0b 	bl	800288c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8002a76:	2110      	movs	r1, #16
 8002a78:	4813      	ldr	r0, [pc, #76]	; (8002ac8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002a7a:	f7ff ff9f 	bl	80029bc <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8002a7e:	2310      	movs	r3, #16
 8002a80:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002a82:	2301      	movs	r3, #1
 8002a84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002a86:	2303      	movs	r3, #3
 8002a88:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8002a92:	463b      	mov	r3, r7
 8002a94:	4619      	mov	r1, r3
 8002a96:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002a98:	f00c fd71 	bl	800f57e <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8002aae:	f00c fd66 	bl	800f57e <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8002ab2:	4806      	ldr	r0, [pc, #24]	; (8002acc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002ab4:	f7ff feda 	bl	800286c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8002ab8:	2110      	movs	r1, #16
 8002aba:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8002abc:	f7ff ff70 	bl	80029a0 <LL_GPIO_SetOutputPin>
}
 8002ac0:	bf00      	nop
 8002ac2:	3740      	adds	r7, #64	; 0x40
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40013000 	.word	0x40013000
 8002ad0:	40020800 	.word	0x40020800

08002ad4 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002ade:	bf00      	nop
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <SPI1_SendByte+0x40>)
 8002ae2:	f7ff fef9 	bl	80028d8 <LL_SPI_IsActiveFlag_TXE>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f9      	beq.n	8002ae0 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4808      	ldr	r0, [pc, #32]	; (8002b14 <SPI1_SendByte+0x40>)
 8002af2:	f7ff ff12 	bl	800291a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8002af6:	bf00      	nop
 8002af8:	4806      	ldr	r0, [pc, #24]	; (8002b14 <SPI1_SendByte+0x40>)
 8002afa:	f7ff feda 	bl	80028b2 <LL_SPI_IsActiveFlag_RXNE>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f9      	beq.n	8002af8 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <SPI1_SendByte+0x40>)
 8002b06:	f7ff fefa 	bl	80028fe <LL_SPI_ReceiveData8>
 8002b0a:	4603      	mov	r3, r0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40013000 	.word	0x40013000

08002b18 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8002b22:	2110      	movs	r1, #16
 8002b24:	480b      	ldr	r0, [pc, #44]	; (8002b54 <ICM20602_Readbyte+0x3c>)
 8002b26:	f7ff ff49 	bl	80029bc <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ffce 	bl	8002ad4 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7ff ffcb 	bl	8002ad4 <SPI1_SendByte>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8002b42:	2110      	movs	r1, #16
 8002b44:	4803      	ldr	r0, [pc, #12]	; (8002b54 <ICM20602_Readbyte+0x3c>)
 8002b46:	f7ff ff2b 	bl	80029a0 <LL_GPIO_SetOutputPin>
	
	return val;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40020000 	.word	0x40020000

08002b58 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	460a      	mov	r2, r1
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8002b68:	2110      	movs	r1, #16
 8002b6a:	480b      	ldr	r0, [pc, #44]	; (8002b98 <ICM20602_Writebyte+0x40>)
 8002b6c:	f7ff ff26 	bl	80029bc <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffab 	bl	8002ad4 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002b7e:	79bb      	ldrb	r3, [r7, #6]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ffa7 	bl	8002ad4 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8002b86:	2110      	movs	r1, #16
 8002b88:	4803      	ldr	r0, [pc, #12]	; (8002b98 <ICM20602_Writebyte+0x40>)
 8002b8a:	f7ff ff09 	bl	80029a0 <LL_GPIO_SetOutputPin>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40020000 	.word	0x40020000

08002b9c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8002bb8:	f7ff ff10 	bl	80029dc <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 8002bbc:	4934      	ldr	r1, [pc, #208]	; (8002c90 <ICM20602_Initialization+0xf4>)
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f002 fd16 	bl	80055f0 <SEGGER_RTT_printf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002bc4:	2075      	movs	r0, #117	; 0x75
 8002bc6:	f7ff ffa7 	bl	8002b18 <ICM20602_Readbyte>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b12      	cmp	r3, #18
 8002bd2:	d106      	bne.n	8002be2 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	492e      	ldr	r1, [pc, #184]	; (8002c94 <ICM20602_Initialization+0xf8>)
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f002 fd08 	bl	80055f0 <SEGGER_RTT_printf>
 8002be0:	e012      	b.n	8002c08 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b12      	cmp	r3, #18
 8002be6:	d00f      	beq.n	8002c08 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002be8:	2075      	movs	r0, #117	; 0x75
 8002bea:	f7ff ff95 	bl	8002b18 <ICM20602_Readbyte>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b12      	cmp	r3, #18
 8002bf6:	d007      	beq.n	8002c08 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	2312      	movs	r3, #18
 8002bfc:	4926      	ldr	r1, [pc, #152]	; (8002c98 <ICM20602_Initialization+0xfc>)
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f002 fcf6 	bl	80055f0 <SEGGER_RTT_printf>
			return 1; //ERROR
 8002c04:	2301      	movs	r3, #1
 8002c06:	e03f      	b.n	8002c88 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	206b      	movs	r0, #107	; 0x6b
 8002c0c:	f7ff ffa4 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c10:	4822      	ldr	r0, [pc, #136]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c12:	f006 fb8b 	bl	800932c <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002c16:	2101      	movs	r1, #1
 8002c18:	206b      	movs	r0, #107	; 0x6b
 8002c1a:	f7ff ff9d 	bl	8002b58 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 8002c1e:	481f      	ldr	r0, [pc, #124]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c20:	f006 fb84 	bl	800932c <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8002c24:	2100      	movs	r1, #0
 8002c26:	206c      	movs	r0, #108	; 0x6c
 8002c28:	f7ff ff96 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c2c:	481b      	ldr	r0, [pc, #108]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c2e:	f006 fb7d 	bl	800932c <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8002c32:	2100      	movs	r1, #0
 8002c34:	2019      	movs	r0, #25
 8002c36:	f7ff ff8f 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c3a:	4818      	ldr	r0, [pc, #96]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c3c:	f006 fb76 	bl	800932c <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8002c40:	2105      	movs	r1, #5
 8002c42:	201a      	movs	r0, #26
 8002c44:	f7ff ff88 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c48:	4814      	ldr	r0, [pc, #80]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c4a:	f006 fb6f 	bl	800932c <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8002c4e:	2118      	movs	r1, #24
 8002c50:	201b      	movs	r0, #27
 8002c52:	f7ff ff81 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c56:	4811      	ldr	r0, [pc, #68]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c58:	f006 fb68 	bl	800932c <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8002c5c:	2118      	movs	r1, #24
 8002c5e:	201c      	movs	r0, #28
 8002c60:	f7ff ff7a 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c64:	480d      	ldr	r0, [pc, #52]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c66:	f006 fb61 	bl	800932c <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	201d      	movs	r0, #29
 8002c6e:	f7ff ff73 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c72:	480a      	ldr	r0, [pc, #40]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c74:	f006 fb5a 	bl	800932c <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2038      	movs	r0, #56	; 0x38
 8002c7c:	f7ff ff6c 	bl	8002b58 <ICM20602_Writebyte>
	delay_us(5000000);
 8002c80:	4806      	ldr	r0, [pc, #24]	; (8002c9c <ICM20602_Initialization+0x100>)
 8002c82:	f006 fb53 	bl	800932c <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	0801a410 	.word	0x0801a410
 8002c94:	0801a428 	.word	0x0801a428
 8002c98:	0801a45c 	.word	0x0801a45c
 8002c9c:	004c4b40 	.word	0x004c4b40

08002ca0 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
    __asm volatile (
 8002caa:	680a      	ldr	r2, [r1, #0]
 8002cac:	f382 8808 	msr	MSP, r2
 8002cb0:	684a      	ldr	r2, [r1, #4]
 8002cb2:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8002cb4:	e7fe      	b.n	8002cb4 <branch_to_bootloader+0x14>
	...

08002cb8 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 8002cbe:	491d      	ldr	r1, [pc, #116]	; (8002d34 <check_enter_bootloader+0x7c>)
 8002cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cc4:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8002cc8:	4c1a      	ldr	r4, [pc, #104]	; (8002d34 <check_enter_bootloader+0x7c>)
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8002cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cda:	f04f 0000 	mov.w	r0, #0
 8002cde:	f04f 0100 	mov.w	r1, #0
 8002ce2:	0028      	movs	r0, r5
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8002cea:	2300      	movs	r3, #0
 8002cec:	4912      	ldr	r1, [pc, #72]	; (8002d38 <check_enter_bootloader+0x80>)
 8002cee:	4411      	add	r1, r2
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	d11a      	bne.n	8002d2a <check_enter_bootloader+0x72>
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <check_enter_bootloader+0x84>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d014      	beq.n	8002d2a <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <check_enter_bootloader+0x88>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8002d06:	683c      	ldr	r4, [r7, #0]
 8002d08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	000a      	movs	r2, r1
 8002d16:	2300      	movs	r3, #0
 8002d18:	4613      	mov	r3, r2
 8002d1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d1e:	f023 030f 	bic.w	r3, r3, #15
 8002d22:	4619      	mov	r1, r3
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff ffbb 	bl	8002ca0 <branch_to_bootloader>
    }
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bdb0      	pop	{r4, r5, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2001c000 	.word	0x2001c000
 8002d38:	fffffa5b 	.word	0xfffffa5b
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800

08002d44 <buzzerInit>:




void buzzerInit()
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4804      	ldr	r0, [pc, #16]	; (8002d5c <buzzerInit+0x18>)
 8002d4c:	f00a fad8 	bl	800d300 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <buzzerInit+0x1c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20007de0 	.word	0x20007de0
 8002d60:	40000400 	.word	0x40000400

08002d64 <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <buzzerOff+0x18>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4803      	ldr	r0, [pc, #12]	; (8002d80 <buzzerOff+0x1c>)
 8002d72:	f00a fb8d 	bl	800d490 <HAL_TIM_PWM_Stop>
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	20007de0 	.word	0x20007de0

08002d84 <ledRestoreSavedState>:
static uint8_t ledControlBitmask;
static uint8_t ledLastState[LED_NUM];
ledSwitch_t ledSwitchState;

static void ledRestoreSavedState(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
  for (int i = 0; i < LED_NUM; i++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	e011      	b.n	8002db4 <ledRestoreSavedState+0x30>
  {
    ledSet(i, ledLastState[i]);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490b      	ldr	r1, [pc, #44]	; (8002dc4 <ledRestoreSavedState+0x40>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	440b      	add	r3, r1
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f000 f917 	bl	8002fdc <ledSet>
  for (int i = 0; i < LED_NUM; i++)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3301      	adds	r3, #1
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	ddea      	ble.n	8002d90 <ledRestoreSavedState+0xc>
  }
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000494c 	.word	0x2000494c

08002dc8 <ledSetForce>:

static void ledSetForce(led_t led, bool value)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d832      	bhi.n	8002e44 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <ledSetForce+0x84>)
 8002de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10d      	bne.n	8002e06 <ledSetForce+0x3e>
  {
    value = !value;
 8002dea:	79bb      	ldrb	r3, [r7, #6]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f083 0301 	eor.w	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	71bb      	strb	r3, [r7, #6]
 8002dfe:	79bb      	ldrb	r3, [r7, #6]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <ledSetForce+0x88>)
 8002e10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <ledSetForce+0x8c>)
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2201      	movs	r2, #1
 8002e20:	4619      	mov	r1, r3
 8002e22:	f008 fa23 	bl	800b26c <HAL_GPIO_WritePin>
 8002e26:	e00e      	b.n	8002e46 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <ledSetForce+0x88>)
 8002e2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <ledSetForce+0x8c>)
 8002e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f008 fa15 	bl	800b26c <HAL_GPIO_WritePin>
 8002e42:	e000      	b.n	8002e46 <ledSetForce+0x7e>
    return;
 8002e44:	bf00      	nop
    }

//  }

}
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2000009c 	.word	0x2000009c
 8002e50:	2000006c 	.word	0x2000006c
 8002e54:	20000084 	.word	0x20000084

08002e58 <ledSetSwitch>:

static void ledSetSwitch(ledSwitch_t ledSwitch)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if (ledSwitchState != ledSwitch)
 8002e62:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <ledSetSwitch+0x38>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	79fa      	ldrb	r2, [r7, #7]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d00c      	beq.n	8002e86 <ledSetSwitch+0x2e>
  {
    ledSwitchState = ledSwitch;
 8002e6c:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <ledSetSwitch+0x38>)
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	7013      	strb	r3, [r2, #0]
    switch (ledSwitch)
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <ledSetSwitch+0x26>
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d003      	beq.n	8002e84 <ledSetSwitch+0x2c>
        ledRestoreSavedState();
        break;
      case LED_PARAM_BITMASK:
        break;
      default:
        break;
 8002e7c:	e003      	b.n	8002e86 <ledSetSwitch+0x2e>
        ledRestoreSavedState();
 8002e7e:	f7ff ff81 	bl	8002d84 <ledRestoreSavedState>
        break;
 8002e82:	e000      	b.n	8002e86 <ledSetSwitch+0x2e>
        break;
 8002e84:	bf00      	nop
    }
  }
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20004952 	.word	0x20004952

08002e94 <ledBitmaskParamCallback>:

static void ledBitmaskParamCallback(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0

  if (ledControlBitmask & (1 << LED_ENABLE_BITMASK_BIT))
 8002e9a:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <ledBitmaskParamCallback+0x60>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b25b      	sxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	da1f      	bge.n	8002ee4 <ledBitmaskParamCallback+0x50>
  {
    ledSetSwitch(LED_PARAM_BITMASK);
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7ff ffd7 	bl	8002e58 <ledSetSwitch>
    for (int i = 0; i < LED_NUM; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	e015      	b.n	8002edc <ledBitmaskParamCallback+0x48>
    {
      ledSetForce(i, ledControlBitmask & (1<<i));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <ledBitmaskParamCallback+0x60>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	2101      	movs	r1, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	4003      	ands	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	2301      	movne	r3, #1
 8002eca:	2300      	moveq	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	f7ff ff79 	bl	8002dc8 <ledSetForce>
    for (int i = 0; i < LED_NUM; i++)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	dde6      	ble.n	8002eb0 <ledBitmaskParamCallback+0x1c>
  }
  else
  {
    ledSetSwitch(LED_LEDSEQ);
  }
}
 8002ee2:	e002      	b.n	8002eea <ledBitmaskParamCallback+0x56>
    ledSetSwitch(LED_LEDSEQ);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7ff ffb7 	bl	8002e58 <ledSetSwitch>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	2000494b 	.word	0x2000494b

08002ef8 <ledInit>:

void ledInit(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 8002efe:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <ledInit+0xd0>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d15b      	bne.n	8002fbe <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f06:	f107 0308 	add.w	r3, r7, #8
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	60da      	str	r2, [r3, #12]
 8002f14:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <ledInit+0xd4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <ledInit+0xd4>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <ledInit+0xd4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <ledInit+0xd4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <ledInit+0xd4>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <ledInit+0xd4>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e02a      	b.n	8002faa <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8002f54:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <ledInit+0xd8>)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <ledInit+0xdc>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f008 f97f 	bl	800b26c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 8002f6e:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <ledInit+0xdc>)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8002f84:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <ledInit+0xd8>)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	f107 0208 	add.w	r2, r7, #8
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f007 ffce 	bl	800af34 <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f81c 	bl	8002fdc <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	ddd1      	ble.n	8002f54 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <ledInit+0xe0>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <ledInit+0xd0>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e000      	b.n	8002fc0 <ledInit+0xc8>
    return;
 8002fbe:	bf00      	nop
}
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000494a 	.word	0x2000494a
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	2000006c 	.word	0x2000006c
 8002fd4:	20000084 	.word	0x20000084
 8002fd8:	20004952 	.word	0x20004952

08002fdc <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	460a      	mov	r2, r1
 8002fe6:	71fb      	strb	r3, [r7, #7]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d904      	bls.n	8002ffc <ledSet+0x20>
 8002ff2:	22e4      	movs	r2, #228	; 0xe4
 8002ff4:	490a      	ldr	r1, [pc, #40]	; (8003020 <ledSet+0x44>)
 8002ff6:	480b      	ldr	r0, [pc, #44]	; (8003024 <ledSet+0x48>)
 8002ff8:	f002 fb28 	bl	800564c <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <ledSet+0x4c>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8003004:	79ba      	ldrb	r2, [r7, #6]
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fedc 	bl	8002dc8 <ledSetForce>
  }

  ledLastState[led] = value;
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	79b9      	ldrb	r1, [r7, #6]
 8003014:	4a05      	ldr	r2, [pc, #20]	; (800302c <ledSet+0x50>)
 8003016:	54d1      	strb	r1, [r2, r3]
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	0801a48c 	.word	0x0801a48c
 8003024:	0801a4a8 	.word	0x0801a4a8
 8003028:	20004952 	.word	0x20004952
 800302c:	2000494c 	.word	0x2000494c

08003030 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8003034:	2100      	movs	r1, #0
 8003036:	2001      	movs	r0, #1
 8003038:	f7ff ffd0 	bl	8002fdc <ledSet>
  ledSet(LED_GREEN_R, 0);
 800303c:	2100      	movs	r1, #0
 800303e:	2003      	movs	r0, #3
 8003040:	f7ff ffcc 	bl	8002fdc <ledSet>
  ledSet(LED_RED_L, 1);
 8003044:	2101      	movs	r1, #1
 8003046:	2002      	movs	r0, #2
 8003048:	f7ff ffc8 	bl	8002fdc <ledSet>
  ledSet(LED_RED_R, 1);
 800304c:	2101      	movs	r1, #1
 800304e:	2004      	movs	r0, #4
 8003050:	f7ff ffc4 	bl	8002fdc <ledSet>
  ledSet(LED_BLUE_L, 0);
 8003054:	2100      	movs	r1, #0
 8003056:	2000      	movs	r0, #0
 8003058:	f7ff ffc0 	bl	8002fdc <ledSet>
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}

08003060 <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af02      	add	r7, sp, #8
  if(isInit) {
 8003066:	4b37      	ldr	r3, [pc, #220]	; (8003144 <ledseqInit+0xe4>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d165      	bne.n	800313a <ledseqInit+0xda>
    return;
  }

  ledInit();
 800306e:	f7ff ff43 	bl	8002ef8 <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 8003072:	4835      	ldr	r0, [pc, #212]	; (8003148 <ledseqInit+0xe8>)
 8003074:	f000 f9f8 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 8003078:	4834      	ldr	r0, [pc, #208]	; (800314c <ledseqInit+0xec>)
 800307a:	f000 f9f5 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 800307e:	4834      	ldr	r0, [pc, #208]	; (8003150 <ledseqInit+0xf0>)
 8003080:	f000 f9f2 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 8003084:	4833      	ldr	r0, [pc, #204]	; (8003154 <ledseqInit+0xf4>)
 8003086:	f000 f9ef 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 800308a:	4833      	ldr	r0, [pc, #204]	; (8003158 <ledseqInit+0xf8>)
 800308c:	f000 f9ec 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 8003090:	4832      	ldr	r0, [pc, #200]	; (800315c <ledseqInit+0xfc>)
 8003092:	f000 f9e9 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 8003096:	4832      	ldr	r0, [pc, #200]	; (8003160 <ledseqInit+0x100>)
 8003098:	f000 f9e6 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 800309c:	4831      	ldr	r0, [pc, #196]	; (8003164 <ledseqInit+0x104>)
 800309e:	f000 f9e3 	bl	8003468 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 80030a2:	4831      	ldr	r0, [pc, #196]	; (8003168 <ledseqInit+0x108>)
 80030a4:	f000 f9e0 	bl	8003468 <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	e007      	b.n	80030be <ledseqInit+0x5e>
    activeSeq[i] = 0;
 80030ae:	4a2f      	ldr	r2, [pc, #188]	; (800316c <ledseqInit+0x10c>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2100      	movs	r1, #0
 80030b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3301      	adds	r3, #1
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	ddf4      	ble.n	80030ae <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 80030c4:	2300      	movs	r3, #0
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	e018      	b.n	80030fc <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4926      	ldr	r1, [pc, #152]	; (8003170 <ledseqInit+0x110>)
 80030d6:	440b      	add	r3, r1
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <ledseqInit+0x114>)
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4613      	mov	r3, r2
 80030e0:	2200      	movs	r2, #0
 80030e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030e6:	4824      	ldr	r0, [pc, #144]	; (8003178 <ledseqInit+0x118>)
 80030e8:	f012 f94a 	bl	8015380 <xTimerCreateStatic>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4923      	ldr	r1, [pc, #140]	; (800317c <ledseqInit+0x11c>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	dde3      	ble.n	80030ca <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 8003102:	2001      	movs	r0, #1
 8003104:	f010 f881 	bl	801320a <xQueueCreateMutex>
 8003108:	4603      	mov	r3, r0
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <ledseqInit+0x120>)
 800310c:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 800310e:	2200      	movs	r2, #0
 8003110:	2108      	movs	r1, #8
 8003112:	200a      	movs	r0, #10
 8003114:	f010 f802 	bl	801311c <xQueueGenericCreate>
 8003118:	4603      	mov	r3, r0
 800311a:	4a1a      	ldr	r2, [pc, #104]	; (8003184 <ledseqInit+0x124>)
 800311c:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 800311e:	2300      	movs	r3, #0
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	2301      	movs	r3, #1
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	2300      	movs	r3, #0
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	4917      	ldr	r1, [pc, #92]	; (8003188 <ledseqInit+0x128>)
 800312c:	4817      	ldr	r0, [pc, #92]	; (800318c <ledseqInit+0x12c>)
 800312e:	f010 fe15 	bl	8013d5c <xTaskCreate>

  isInit = true;
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <ledseqInit+0xe4>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e000      	b.n	800313c <ledseqInit+0xdc>
    return;
 800313a:	bf00      	nop
}
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20004960 	.word	0x20004960
 8003148:	2000028c 	.word	0x2000028c
 800314c:	2000029c 	.word	0x2000029c
 8003150:	200000c4 	.word	0x200000c4
 8003154:	200001dc 	.word	0x200001dc
 8003158:	20000204 	.word	0x20000204
 800315c:	2000015c 	.word	0x2000015c
 8003160:	20000184 	.word	0x20000184
 8003164:	200001ac 	.word	0x200001ac
 8003168:	200001bc 	.word	0x200001bc
 800316c:	200019f0 	.word	0x200019f0
 8003170:	20001a20 	.word	0x20001a20
 8003174:	08003351 	.word	0x08003351
 8003178:	0801a4d0 	.word	0x0801a4d0
 800317c:	20001a08 	.word	0x20001a08
 8003180:	20004958 	.word	0x20004958
 8003184:	2000495c 	.word	0x2000495c
 8003188:	0801a4dc 	.word	0x0801a4dc
 800318c:	08003191 	.word	0x08003191

08003190 <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <lesdeqCmdTask+0x3c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f107 0108 	add.w	r1, r7, #8
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031a4:	4618      	mov	r0, r3
 80031a6:	f010 fa05 	bl	80135b4 <xQueueReceive>

    switch(command.command) {
 80031aa:	7a3b      	ldrb	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <lesdeqCmdTask+0x26>
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d005      	beq.n	80031c0 <lesdeqCmdTask+0x30>
 80031b4:	e009      	b.n	80031ca <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f825 	bl	8003208 <ledseqRunBlocking>
        break;
 80031be:	e004      	b.n	80031ca <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f898 	bl	80032f8 <ledseqStopBlocking>
        break;
 80031c8:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 80031ca:	e7e5      	b.n	8003198 <lesdeqCmdTask+0x8>
 80031cc:	2000495c 	.word	0x2000495c

080031d0 <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 80031d8:	2300      	movs	r3, #0
 80031da:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <ledseqRun+0x34>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	f107 0108 	add.w	r1, r7, #8
 80031e8:	2300      	movs	r3, #0
 80031ea:	2200      	movs	r2, #0
 80031ec:	f010 f840 	bl	8013270 <xQueueGenericSend>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <ledseqRun+0x2a>
    return true;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <ledseqRun+0x2c>
  }
  return false;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	2000495c 	.word	0x2000495c

08003208 <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7b1b      	ldrb	r3, [r3, #12]
 8003214:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <ledseqRunBlocking+0x5c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800321e:	4618      	mov	r0, r3
 8003220:	f010 faa8 	bl	8013774 <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  updateActive(led);
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f94f 	bl	80034d0 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <ledseqRunBlocking+0x5c>)
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	f010 f818 	bl	8013270 <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <ledseqRunBlocking+0x60>)
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	d106      	bne.n	800325c <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	4a06      	ldr	r2, [pc, #24]	; (800326c <ledseqRunBlocking+0x64>)
 8003252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 f87a 	bl	8003350 <runLedseq>
  }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20004958 	.word	0x20004958
 8003268:	200019f0 	.word	0x200019f0
 800326c:	20001a08 	.word	0x20001a08

08003270 <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 800327a:	edd7 7a01 	vldr	s15, [r7, #4]
 800327e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80032b8 <ledseqSetChargeLevel+0x48>
 8003282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800328a:	ee17 3a90 	vmov	r3, s15
 800328e:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8003296:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 8003298:	4b08      	ldr	r3, [pc, #32]	; (80032bc <ledseqSetChargeLevel+0x4c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <ledseqSetChargeLevel+0x4c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3308      	adds	r3, #8
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	605a      	str	r2, [r3, #4]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	447a0000 	.word	0x447a0000
 80032bc:	20000204 	.word	0x20000204

080032c0 <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 80032c8:	2301      	movs	r3, #1
 80032ca:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <ledseqStop+0x34>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	f107 0108 	add.w	r1, r7, #8
 80032d8:	2300      	movs	r3, #0
 80032da:	2200      	movs	r2, #0
 80032dc:	f00f ffc8 	bl	8013270 <xQueueGenericSend>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <ledseqStop+0x2a>
    return true;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <ledseqStop+0x2c>
  }
  return false;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	2000495c 	.word	0x2000495c

080032f8 <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7b1b      	ldrb	r3, [r3, #12]
 8003304:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <ledseqStopBlocking+0x50>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800330e:	4618      	mov	r0, r3
 8003310:	f010 fa30 	bl	8013774 <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800331a:	609a      	str	r2, [r3, #8]
  updateActive(led);
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f8d6 	bl	80034d0 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <ledseqStopBlocking+0x50>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	2300      	movs	r3, #0
 800332a:	2200      	movs	r2, #0
 800332c:	2100      	movs	r1, #0
 800332e:	f00f ff9f 	bl	8013270 <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	4a05      	ldr	r2, [pc, #20]	; (800334c <ledseqStopBlocking+0x54>)
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f808 	bl	8003350 <runLedseq>
}
 8003340:	bf00      	nop
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20004958 	.word	0x20004958
 800334c:	20001a08 	.word	0x20001a08

08003350 <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af02      	add	r7, sp, #8
 8003356:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 8003358:	4b40      	ldr	r3, [pc, #256]	; (800345c <runLedseq+0x10c>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	f083 0301 	eor.w	r3, r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d171      	bne.n	800344a <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f012 fb7e 	bl	8015a68 <pvTimerGetTimerID>
 800336c:	4603      	mov	r3, r0
 800336e:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 8003370:	7dbb      	ldrb	r3, [r7, #22]
 8003372:	4a3b      	ldr	r2, [pc, #236]	; (8003460 <runLedseq+0x110>)
 8003374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003378:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d066      	beq.n	800344e <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 8003380:	2300      	movs	r3, #0
 8003382:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 8003384:	e05a      	b.n	800343c <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800338e:	d060      	beq.n	8003452 <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <runLedseq+0x114>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033a6:	4618      	mov	r0, r3
 80033a8:	f010 f9e4 	bl	8013774 <xQueueSemaphoreTake>
    context->state++;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	7b1b      	ldrb	r3, [r3, #12]
 80033ba:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f113 0f02 	cmn.w	r3, #2
 80033c4:	d003      	beq.n	80033ce <runLedseq+0x7e>
 80033c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ca:	d004      	beq.n	80033d6 <runLedseq+0x86>
 80033cc:	e00c      	b.n	80033e8 <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
        break;
 80033d4:	e02b      	b.n	800342e <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033dc:	609a      	str	r2, [r3, #8]
        updateActive(led);
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f875 	bl	80034d0 <updateActive>
        break;
 80033e6:	e022      	b.n	800342e <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	7afb      	ldrb	r3, [r7, #11]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fdf3 	bl	8002fdc <ledSet>
        if (step->action == 0) {
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	2300      	movs	r3, #0
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2300      	movs	r3, #0
 800340a:	2104      	movs	r1, #4
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f012 f82b 	bl	8015468 <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 8003412:	f010 ffc3 	bl	801439c <xTaskGetTickCount>
 8003416:	4602      	mov	r2, r0
 8003418:	2300      	movs	r3, #0
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	2300      	movs	r3, #0
 800341e:	2101      	movs	r1, #1
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f012 f821 	bl	8015468 <xTimerGenericCommand>
        leave = true;
 8003426:	2301      	movs	r3, #1
 8003428:	75fb      	strb	r3, [r7, #23]
        break;
 800342a:	e000      	b.n	800342e <runLedseq+0xde>
          break;
 800342c:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <runLedseq+0x114>)
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	2300      	movs	r3, #0
 8003434:	2200      	movs	r2, #0
 8003436:	2100      	movs	r1, #0
 8003438:	f00f ff1a 	bl	8013270 <xQueueGenericSend>
  while(!leave) {
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d19e      	bne.n	8003386 <runLedseq+0x36>
 8003448:	e004      	b.n	8003454 <runLedseq+0x104>
    return;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <runLedseq+0x104>
    return;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <runLedseq+0x104>
      return;
 8003452:	bf00      	nop
  }
}
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	20004961 	.word	0x20004961
 8003460:	200019f0 	.word	0x200019f0
 8003464:	20004958 	.word	0x20004958

08003468 <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003476:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <ledseqRegisterSequence+0x64>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d103      	bne.n	800348e <ledseqRegisterSequence+0x26>
    sequences = context;
 8003486:	4a11      	ldr	r2, [pc, #68]	; (80034cc <ledseqRegisterSequence+0x64>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	e019      	b.n	80034c2 <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <ledseqRegisterSequence+0x64>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	d00f      	beq.n	80034bc <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 800349c:	e006      	b.n	80034ac <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d009      	beq.n	80034c0 <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f4      	bne.n	800349e <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	e002      	b.n	80034c2 <ledseqRegisterSequence+0x5a>
      return;
 80034bc:	bf00      	nop
 80034be:	e000      	b.n	80034c2 <ledseqRegisterSequence+0x5a>
        return;
 80034c0:	bf00      	nop
  }
}
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20004954 	.word	0x20004954

080034d0 <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <updateActive+0x5c>)
 80034de:	2100      	movs	r1, #0
 80034e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fd77 	bl	8002fdc <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <updateActive+0x60>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e012      	b.n	800351c <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	7b1b      	ldrb	r3, [r3, #12]
 80034fa:	79fa      	ldrb	r2, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d10a      	bne.n	8003516 <updateActive+0x46>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003508:	d005      	beq.n	8003516 <updateActive+0x46>
      activeSeq[led] = sequence;
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <updateActive+0x5c>)
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 8003514:	e006      	b.n	8003524 <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e9      	bne.n	80034f6 <updateActive+0x26>
    }
  }
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200019f0 	.word	0x200019f0
 8003530:	20004954 	.word	0x20004954

08003534 <owSyslinkReceive>:
{
  return owCommonTest();
}

void owSyslinkReceive(SyslinkPacket *slp)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af04      	add	r7, sp, #16
  if(isInit) {
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <pmInit+0x60>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d125      	bne.n	80035a2 <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 8003556:	2201      	movs	r2, #1
 8003558:	4914      	ldr	r1, [pc, #80]	; (80035ac <pmInit+0x64>)
 800355a:	4815      	ldr	r0, [pc, #84]	; (80035b0 <pmInit+0x68>)
 800355c:	f006 fbfa 	bl	8009d54 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 8003560:	2201      	movs	r2, #1
 8003562:	4914      	ldr	r1, [pc, #80]	; (80035b4 <pmInit+0x6c>)
 8003564:	4814      	ldr	r0, [pc, #80]	; (80035b8 <pmInit+0x70>)
 8003566:	f006 fbf5 	bl	8009d54 <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	461a      	mov	r2, r3
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <pmInit+0x74>)
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <pmInit+0x78>)
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2300      	movs	r3, #0
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	4911      	ldr	r1, [pc, #68]	; (80035c4 <pmInit+0x7c>)
 800357e:	4812      	ldr	r0, [pc, #72]	; (80035c8 <pmInit+0x80>)
 8003580:	f010 fb96 	bl	8013cb0 <xTaskCreateStatic>

  isInit = true;
 8003584:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <pmInit+0x60>)
 8003586:	2201      	movs	r2, #1
 8003588:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 800358a:	4b10      	ldr	r3, [pc, #64]	; (80035cc <pmInit+0x84>)
 800358c:	4a10      	ldr	r2, [pc, #64]	; (80035d0 <pmInit+0x88>)
 800358e:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <pmInit+0x84>)
 8003594:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003598:	ee00 3a10 	vmov	s0, r3
 800359c:	f000 f81a 	bl	80035d4 <pmSetBatteryVoltage>
 80035a0:	e000      	b.n	80035a4 <pmInit+0x5c>
    return;
 80035a2:	bf00      	nop
}
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20004990 	.word	0x20004990
 80035ac:	200049a0 	.word	0x200049a0
 80035b0:	20007c90 	.word	0x20007c90
 80035b4:	200049a2 	.word	0x200049a2
 80035b8:	20007cd8 	.word	0x20007cd8
 80035bc:	20001b28 	.word	0x20001b28
 80035c0:	200049a4 	.word	0x200049a4
 80035c4:	0801a4e8 	.word	0x0801a4e8
 80035c8:	08003915 	.word	0x08003915
 80035cc:	20004994 	.word	0x20004994
 80035d0:	406ccccd 	.word	0x406ccccd

080035d4 <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 80035de:	4a18      	ldr	r2, [pc, #96]	; (8003640 <pmSetBatteryVoltage+0x6c>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 80035e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035e8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003644 <pmSetBatteryVoltage+0x70>
 80035ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f4:	ee17 3a90 	vmov	r3, s15
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <pmSetBatteryVoltage+0x74>)
 80035fc:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <pmSetBatteryVoltage+0x78>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ed97 7a01 	vldr	s14, [r7, #4]
 8003608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	dd02      	ble.n	8003618 <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 8003612:	4a0e      	ldr	r2, [pc, #56]	; (800364c <pmSetBatteryVoltage+0x78>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <pmSetBatteryVoltage+0x7c>)
 800361a:	edd3 7a00 	vldr	s15, [r3]
 800361e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	d400      	bmi.n	800362e <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 800362c:	e002      	b.n	8003634 <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <pmSetBatteryVoltage+0x7c>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6013      	str	r3, [r2, #0]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	20004964 	.word	0x20004964
 8003644:	447a0000 	.word	0x447a0000
 8003648:	20004968 	.word	0x20004968
 800364c:	2000496c 	.word	0x2000496c
 8003650:	200002ac 	.word	0x200002ac

08003654 <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 8003672:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003676:	edd7 7a01 	vldr	s15, [r7, #4]
 800367a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	d501      	bpl.n	8003688 <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 8003684:	2300      	movs	r3, #0
 8003686:	e01c      	b.n	80036c2 <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 8003688:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80036d0 <pmBatteryChargeFromVoltage+0x6c>
 800368c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	dd01      	ble.n	800369e <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 800369a:	2309      	movs	r3, #9
 800369c:	e011      	b.n	80036c2 <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 800369e:	e002      	b.n	80036a6 <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 80036a6:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <pmBatteryChargeFromVoltage+0x70>)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80036b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	dcef      	bgt.n	80036a0 <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40833333 	.word	0x40833333
 80036d4:	0801c4ec 	.word	0x0801c4ec

080036d8 <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return batteryVoltage;
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <pmGetBatteryVoltage+0x18>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	ee07 3a90 	vmov	s15, r3
}
 80036e4:	eeb0 0a67 	vmov.f32	s0, s15
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	20004964 	.word	0x20004964

080036f4 <pmGracefulShutdown>:
/*
 * Iterate through all registered shutdown callbacks and call them one after
 * the other, when all is done, send the ACK back to nrf to allow power off.
 */
static void pmGracefulShutdown()
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b094      	sub	sp, #80	; 0x50
 80036f8:	af00      	add	r7, sp, #0
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80036fa:	2300      	movs	r3, #0
 80036fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fe:	e009      	b.n	8003714 <pmGracefulShutdown+0x20>
    graceful_shutdown_callback_t callback = graceful_shutdown_callbacks[i];
 8003700:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <pmGracefulShutdown+0x4c>)
 8003702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	64bb      	str	r3, [r7, #72]	; 0x48

    callback();
 800370a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370c:	4798      	blx	r3
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 800370e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003710:	3301      	adds	r3, #1
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <pmGracefulShutdown+0x50>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800371a:	429a      	cmp	r2, r3
 800371c:	dbf0      	blt.n	8003700 <pmGracefulShutdown+0xc>
  }

  SyslinkPacket slp = {
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2242      	movs	r2, #66	; 0x42
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f014 f9a7 	bl	8017a78 <memset>
 800372a:	2316      	movs	r3, #22
 800372c:	713b      	strb	r3, [r7, #4]
    .type = SYSLINK_PM_SHUTDOWN_ACK,
  };

  syslinkSendPacket(&slp);
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe ffb3 	bl	800269c <syslinkSendPacket>
}
 8003736:	bf00      	nop
 8003738:	3750      	adds	r7, #80	; 0x50
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20004ba8 	.word	0x20004ba8
 8003744:	20004ba4 	.word	0x20004ba4

08003748 <pmSyslinkUpdate>:

  syslinkSendPacket(&slp);
}
*/
void pmSyslinkUpdate(SyslinkPacket *slp)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_PM_BATTERY_STATE) {
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b13      	cmp	r3, #19
 8003756:	d11b      	bne.n	8003790 <pmSyslinkUpdate+0x48>
    // First byte of the packet contains some PM flags such as USB power, charging etc.
    memcpy(&pmSyslinkInfo, &slp->data[0], sizeof(pmSyslinkInfo));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <pmSyslinkUpdate+0x60>)
 800375e:	6810      	ldr	r0, [r2, #0]
 8003760:	6851      	ldr	r1, [r2, #4]
 8003762:	c303      	stmia	r3!, {r0, r1}
 8003764:	7a12      	ldrb	r2, [r2, #8]
 8003766:	701a      	strb	r2, [r3, #0]

    // If using voltage measurements from external battery, we'll set the
    // voltage to this instead of the one sent from syslink.
    if (isExtBatVoltDeckPinSet) {
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <pmSyslinkUpdate+0x64>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <pmSyslinkUpdate+0x38>
      pmSetBatteryVoltage(extBatteryVoltage);
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <pmSyslinkUpdate+0x68>)
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	eeb0 0a67 	vmov.f32	s0, s15
 800377a:	f7ff ff2b 	bl	80035d4 <pmSetBatteryVoltage>
    temp = pmSyslinkInfo.temp;
#endif
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
    workerSchedule(pmGracefulShutdown, NULL);
  }
}
 800377e:	e00f      	b.n	80037a0 <pmSyslinkUpdate+0x58>
      pmSetBatteryVoltage(pmSyslinkInfo.vBat);
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <pmSyslinkUpdate+0x60>)
 8003782:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8003786:	ee00 3a10 	vmov	s0, r3
 800378a:	f7ff ff23 	bl	80035d4 <pmSetBatteryVoltage>
}
 800378e:	e007      	b.n	80037a0 <pmSyslinkUpdate+0x58>
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b15      	cmp	r3, #21
 8003796:	d103      	bne.n	80037a0 <pmSyslinkUpdate+0x58>
    workerSchedule(pmGracefulShutdown, NULL);
 8003798:	2100      	movs	r1, #0
 800379a:	4806      	ldr	r0, [pc, #24]	; (80037b4 <pmSyslinkUpdate+0x6c>)
 800379c:	f005 f916 	bl	80089cc <workerSchedule>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20004994 	.word	0x20004994
 80037ac:	20004976 	.word	0x20004976
 80037b0:	20004970 	.word	0x20004970
 80037b4:	080036f5 	.word	0x080036f5

080037b8 <pmSetChargeState>:

void pmSetChargeState(PMChargeStates chgState)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <pmUpdateState>:

PMStates pmUpdateState()
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <pmUpdateState+0x98>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf14      	ite	ne
 80037e4:	2301      	movne	r3, #1
 80037e6:	2300      	moveq	r3, #0
 80037e8:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 80037ea:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <pmUpdateState+0x98>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 80037fe:	f010 fdcd 	bl	801439c <xTaskGetTickCount>
 8003802:	4602      	mov	r2, r0
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <pmUpdateState+0x9c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 800380c:	4b18      	ldr	r3, [pc, #96]	; (8003870 <pmUpdateState+0xa0>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 8003814:	2300      	movs	r3, #0
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	e016      	b.n	8003848 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 800381a:	79bb      	ldrb	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <pmUpdateState+0x62>
 8003820:	797b      	ldrb	r3, [r7, #5]
 8003822:	f083 0301 	eor.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <pmUpdateState+0x62>
  {
    nextState = charged;
 800382c:	2302      	movs	r3, #2
 800382e:	71fb      	strb	r3, [r7, #7]
 8003830:	e00a      	b.n	8003848 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 8003832:	79bb      	ldrb	r3, [r7, #6]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <pmUpdateState+0x74>
 8003838:	797b      	ldrb	r3, [r7, #5]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <pmUpdateState+0x74>
  {
    nextState = charging;
 800383e:	2301      	movs	r3, #1
 8003840:	71fb      	strb	r3, [r7, #7]
 8003842:	e001      	b.n	8003848 <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 8003844:	2300      	movs	r3, #0
 8003846:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <pmUpdateState+0x8c>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 8003858:	2303      	movs	r3, #3
 800385a:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 800385c:	79fb      	ldrb	r3, [r7, #7]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20004994 	.word	0x20004994
 800386c:	20004988 	.word	0x20004988
 8003870:	2000499e 	.word	0x2000499e

08003874 <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <pmMeasureExtBatteryCurrent+0x44>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <pmMeasureExtBatteryCurrent+0x48>)
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <pmMeasureExtBatteryCurrent+0x4c>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003898:	edc7 7a01 	vstr	s15, [r7, #4]
 800389c:	e002      	b.n	80038a4 <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	607b      	str	r3, [r7, #4]
  }

  return current;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	ee07 3a90 	vmov	s15, r3
}
 80038aa:	eeb0 0a67 	vmov.f32	s0, s15
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20004980 	.word	0x20004980
 80038bc:	200049a0 	.word	0x200049a0
 80038c0:	20004984 	.word	0x20004984

080038c4 <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 80038ca:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <pmMeasureExtBatteryVoltage+0x44>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <pmMeasureExtBatteryVoltage+0x48>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <pmMeasureExtBatteryVoltage+0x4c>)
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80038ec:	e002      	b.n	80038f4 <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	ee07 3a90 	vmov	s15, r3
}
 80038fa:	eeb0 0a67 	vmov.f32	s0, s15
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	20004976 	.word	0x20004976
 800390c:	200049a2 	.word	0x200049a2
 8003910:	20004978 	.word	0x20004978

08003914 <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 800391c:	2300      	movs	r3, #0
 800391e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 8003920:	2105      	movs	r1, #5
 8003922:	2000      	movs	r0, #0
 8003924:	f010 fe98 	bl	8014658 <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 8003928:	f010 fd38 	bl	801439c <xTaskGetTickCount>
 800392c:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 800392e:	4a6f      	ldr	r2, [pc, #444]	; (8003aec <pmTask+0x1d8>)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 8003934:	4a6e      	ldr	r2, [pc, #440]	; (8003af0 <pmTask+0x1dc>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 800393a:	2001      	movs	r0, #1
 800393c:	f7ff ff3c 	bl	80037b8 <pmSetChargeState>
  systemWaitStart();
 8003940:	f000 fa70 	bl	8003e24 <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 8003944:	2064      	movs	r0, #100	; 0x64
 8003946:	f010 fb6b 	bl	8014020 <vTaskDelay>
    tickCount = xTaskGetTickCount();
 800394a:	f010 fd27 	bl	801439c <xTaskGetTickCount>
 800394e:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 8003950:	f7ff ffb8 	bl	80038c4 <pmMeasureExtBatteryVoltage>
 8003954:	eef0 7a40 	vmov.f32	s15, s0
 8003958:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <pmTask+0x1e0>)
 800395a:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 800395e:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <pmTask+0x1e0>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003af8 <pmTask+0x1e4>
 8003968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800396c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003970:	ee17 3a90 	vmov	r3, s15
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b61      	ldr	r3, [pc, #388]	; (8003afc <pmTask+0x1e8>)
 8003978:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 800397a:	f7ff ff7b 	bl	8003874 <pmMeasureExtBatteryCurrent>
 800397e:	eef0 7a40 	vmov.f32	s15, s0
 8003982:	4b5f      	ldr	r3, [pc, #380]	; (8003b00 <pmTask+0x1ec>)
 8003984:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 8003988:	f7ff fea6 	bl	80036d8 <pmGetBatteryVoltage>
 800398c:	eef0 7a40 	vmov.f32	s15, s0
 8003990:	eeb0 0a67 	vmov.f32	s0, s15
 8003994:	f7ff fe66 	bl	8003664 <pmBatteryChargeFromVoltage>
 8003998:	4603      	mov	r3, r0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	0092      	lsls	r2, r2, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <pmTask+0x1f0>)
 80039a8:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 80039aa:	f7ff fe95 	bl	80036d8 <pmGetBatteryVoltage>
 80039ae:	eeb0 7a40 	vmov.f32	s14, s0
 80039b2:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <pmTask+0x1f4>)
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	dd02      	ble.n	80039c8 <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 80039c2:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <pmTask+0x1d8>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 80039c8:	f7ff fe86 	bl	80036d8 <pmGetBatteryVoltage>
 80039cc:	eeb0 7a40 	vmov.f32	s14, s0
 80039d0:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <pmTask+0x1f8>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	dd02      	ble.n	80039e6 <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 80039e0:	4a43      	ldr	r2, [pc, #268]	; (8003af0 <pmTask+0x1dc>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 80039e6:	f7ff fef3 	bl	80037d0 <pmUpdateState>
 80039ea:	4603      	mov	r3, r0
 80039ec:	461a      	mov	r2, r3
 80039ee:	4b48      	ldr	r3, [pc, #288]	; (8003b10 <pmTask+0x1fc>)
 80039f0:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 80039f2:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <pmTask+0x1fc>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	7dfa      	ldrb	r2, [r7, #23]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d03b      	beq.n	8003a74 <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 80039fc:	4b44      	ldr	r3, [pc, #272]	; (8003b10 <pmTask+0x1fc>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d833      	bhi.n	8003a6c <pmTask+0x158>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <pmTask+0xf8>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a59 	.word	0x08003a59
 8003a10:	08003a31 	.word	0x08003a31
 8003a14:	08003a1d 	.word	0x08003a1d
 8003a18:	08003a4b 	.word	0x08003a4b
      {
        case charged:
          ledseqStop(&seq_charging);
 8003a1c:	483d      	ldr	r0, [pc, #244]	; (8003b14 <pmTask+0x200>)
 8003a1e:	f7ff fc4f 	bl	80032c0 <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 8003a22:	483d      	ldr	r0, [pc, #244]	; (8003b18 <pmTask+0x204>)
 8003a24:	f7ff fbf0 	bl	8003208 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 8003a28:	2004      	movs	r0, #4
 8003a2a:	f000 f879 	bl	8003b20 <soundSetEffect>
          break;
 8003a2e:	e01e      	b.n	8003a6e <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 8003a30:	483a      	ldr	r0, [pc, #232]	; (8003b1c <pmTask+0x208>)
 8003a32:	f7ff fc45 	bl	80032c0 <ledseqStop>
          ledseqStop(&seq_charged);
 8003a36:	4838      	ldr	r0, [pc, #224]	; (8003b18 <pmTask+0x204>)
 8003a38:	f7ff fc42 	bl	80032c0 <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 8003a3c:	4835      	ldr	r0, [pc, #212]	; (8003b14 <pmTask+0x200>)
 8003a3e:	f7ff fbe3 	bl	8003208 <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 8003a42:	2003      	movs	r0, #3
 8003a44:	f000 f86c 	bl	8003b20 <soundSetEffect>
          break;
 8003a48:	e011      	b.n	8003a6e <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 8003a4a:	4834      	ldr	r0, [pc, #208]	; (8003b1c <pmTask+0x208>)
 8003a4c:	f7ff fbdc 	bl	8003208 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 8003a50:	2005      	movs	r0, #5
 8003a52:	f000 f865 	bl	8003b20 <soundSetEffect>
          break;
 8003a56:	e00a      	b.n	8003a6e <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 8003a58:	482e      	ldr	r0, [pc, #184]	; (8003b14 <pmTask+0x200>)
 8003a5a:	f7ff fbd5 	bl	8003208 <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 8003a5e:	482e      	ldr	r0, [pc, #184]	; (8003b18 <pmTask+0x204>)
 8003a60:	f7ff fbb6 	bl	80031d0 <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 8003a64:	2002      	movs	r0, #2
 8003a66:	f000 f85b 	bl	8003b20 <soundSetEffect>
          break;
 8003a6a:	e000      	b.n	8003a6e <pmTask+0x15a>
        default:
          break;
 8003a6c:	bf00      	nop
      }
      pmStateOld = pmState;
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <pmTask+0x1fc>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 8003a74:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <pmTask+0x1fc>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d832      	bhi.n	8003ae2 <pmTask+0x1ce>
 8003a7c:	a201      	add	r2, pc, #4	; (adr r2, 8003a84 <pmTask+0x170>)
 8003a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a82:	bf00      	nop
 8003a84:	08003add 	.word	0x08003add
 8003a88:	08003a95 	.word	0x08003a95
 8003a8c:	08003ae3 	.word	0x08003ae3
 8003a90:	08003ac3 	.word	0x08003ac3
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 8003a94:	f7ff fe20 	bl	80036d8 <pmGetBatteryVoltage>
 8003a98:	eef0 7a40 	vmov.f32	s15, s0
 8003a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa0:	f7ff fde0 	bl	8003664 <pmBatteryChargeFromVoltage>
 8003aa4:	ee07 0a90 	vmov	s15, r0
 8003aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003aac:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ab4:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 8003ab8:	ed97 0a02 	vldr	s0, [r7, #8]
 8003abc:	f7ff fbd8 	bl	8003270 <ledseqSetChargeLevel>
        }
        break;
 8003ac0:	e012      	b.n	8003ae8 <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <pmTask+0x1dc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d907      	bls.n	8003ae6 <pmTask+0x1d2>
          {
            pmSystemShutdown();
 8003ad6:	f7ff fdbd 	bl	8003654 <pmSystemShutdown>
          }
        }
        break;
 8003ada:	e004      	b.n	8003ae6 <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 8003adc:	f7ff fdba 	bl	8003654 <pmSystemShutdown>
          }
        }
        break;
 8003ae0:	e002      	b.n	8003ae8 <pmTask+0x1d4>
      default:
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e72e      	b.n	8003944 <pmTask+0x30>
        break;
 8003ae6:	bf00      	nop
    vTaskDelay(100);
 8003ae8:	e72c      	b.n	8003944 <pmTask+0x30>
 8003aea:	bf00      	nop
 8003aec:	20004988 	.word	0x20004988
 8003af0:	2000498c 	.word	0x2000498c
 8003af4:	20004970 	.word	0x20004970
 8003af8:	447a0000 	.word	0x447a0000
 8003afc:	20004974 	.word	0x20004974
 8003b00:	2000497c 	.word	0x2000497c
 8003b04:	2000499d 	.word	0x2000499d
 8003b08:	200002b4 	.word	0x200002b4
 8003b0c:	200002b0 	.word	0x200002b0
 8003b10:	20004991 	.word	0x20004991
 8003b14:	20000204 	.word	0x20000204
 8003b18:	200001dc 	.word	0x200001dc
 8003b1c:	200000c4 	.word	0x200000c4

08003b20 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <soundSetEffect+0x1c>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6013      	str	r3, [r2, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20004bc0 	.word	0x20004bc0

08003b40 <storageStore>:

  return pass;
}

bool storageStore(const char* key, const void* buffer, size_t length)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 8003b4c:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <storageStore+0x48>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	f083 0301 	eor.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <storageStore+0x1e>
    return false;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e010      	b.n	8003b80 <storageStore+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <storageStore+0x4c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b66:	4618      	mov	r0, r3
 8003b68:	f00f fe04 	bl	8013774 <xQueueSemaphoreTake>

//  bool result = kveStore(&kve, key, buffer, length);

  bool result = true;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	75fb      	strb	r3, [r7, #23]

  xSemaphoreGive(storageMutex);
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <storageStore+0x4c>)
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	2200      	movs	r2, #0
 8003b78:	2100      	movs	r1, #0
 8003b7a:	f00f fb79 	bl	8013270 <xQueueGenericSend>

  return result;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20004bcc 	.word	0x20004bcc
 8003b8c:	20004bc8 	.word	0x20004bc8

08003b90 <storageForeach>:


bool storageForeach(const char *prefix, storageFunc_t func)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
   if (!isInit) {
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <storageForeach+0x48>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	f083 0301 	eor.w	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <storageForeach+0x1c>
    return 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e010      	b.n	8003bce <storageForeach+0x3e>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <storageForeach+0x4c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00f fddd 	bl	8013774 <xQueueSemaphoreTake>

//  bool success = kveForeach(&kve, prefix, func);

  bool success = true;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <storageForeach+0x4c>)
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	f00f fb52 	bl	8013270 <xQueueGenericSend>

  return success;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20004bcc 	.word	0x20004bcc
 8003bdc:	20004bc8 	.word	0x20004bc8

08003be0 <storageFetch>:

size_t storageFetch(const char *key, void* buffer, size_t length)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <storageFetch+0x48>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	f083 0301 	eor.w	r3, r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <storageFetch+0x1e>
    return 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e010      	b.n	8003c20 <storageFetch+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <storageFetch+0x4c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00f fdb4 	bl	8013774 <xQueueSemaphoreTake>

//  size_t result = kveFetch(&kve, key, buffer, length);


  size_t result = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	617b      	str	r3, [r7, #20]

  xSemaphoreGive(storageMutex);
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <storageFetch+0x4c>)
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f00f fb29 	bl	8013270 <xQueueGenericSend>

  return result;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20004bcc 	.word	0x20004bcc
 8003c2c:	20004bc8 	.word	0x20004bc8

08003c30 <storageDelete>:

bool storageDelete(const char* key)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if (!isInit) {
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <storageDelete+0x44>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f083 0301 	eor.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <storageDelete+0x1a>
    return false;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e010      	b.n	8003c6c <storageDelete+0x3c>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <storageDelete+0x48>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c52:	4618      	mov	r0, r3
 8003c54:	f00f fd8e 	bl	8013774 <xQueueSemaphoreTake>

//  bool result = kveDelete(&kve, key);

  bool result = true;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <storageDelete+0x48>)
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	2300      	movs	r3, #0
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	f00f fb03 	bl	8013270 <xQueueGenericSend>

  return result;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20004bcc 	.word	0x20004bcc
 8003c78:	20004bc8 	.word	0x20004bc8

08003c7c <storageReformat>:

bool storageReformat() {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Reformatting storage ...\n");
 8003c82:	4917      	ldr	r1, [pc, #92]	; (8003ce0 <storageReformat+0x64>)
 8003c84:	2000      	movs	r0, #0
 8003c86:	f001 fcb3 	bl	80055f0 <SEGGER_RTT_printf>

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8003c8a:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <storageReformat+0x68>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c92:	4618      	mov	r0, r3
 8003c94:	f00f fd6e 	bl	8013774 <xQueueSemaphoreTake>

//  kveFormat(&kve);
//  bool pass = kveCheck(&kve);

  bool pass = true;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	71fb      	strb	r3, [r7, #7]

  xSemaphoreGive(storageMutex);
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <storageReformat+0x68>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	f00f fae3 	bl	8013270 <xQueueGenericSend>

  DEBUG_PRINT("Storage check %s.\n", pass?"[OK]":"[FAIL]");
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <storageReformat+0x38>
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <storageReformat+0x6c>)
 8003cb2:	e000      	b.n	8003cb6 <storageReformat+0x3a>
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <storageReformat+0x70>)
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	490d      	ldr	r1, [pc, #52]	; (8003cf0 <storageReformat+0x74>)
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f001 fc98 	bl	80055f0 <SEGGER_RTT_printf>

  if (pass == false) {
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	f083 0301 	eor.w	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <storageReformat+0x58>
    DEBUG_PRINT("Error: Cannot format storage!\n");
 8003ccc:	4909      	ldr	r1, [pc, #36]	; (8003cf4 <storageReformat+0x78>)
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f001 fc8e 	bl	80055f0 <SEGGER_RTT_printf>
  }

  return pass;
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	0801a60c 	.word	0x0801a60c
 8003ce4:	20004bc8 	.word	0x20004bc8
 8003ce8:	0801a5e8 	.word	0x0801a5e8
 8003cec:	0801a5f0 	.word	0x0801a5f0
 8003cf0:	0801a5f8 	.word	0x0801a5f8
 8003cf4:	0801a628 	.word	0x0801a628

08003cf8 <storagePrintStats>:

void storagePrintStats()
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Efficiency: Data: %d Bytes (%d%%), Keys: %d Bytes (%d%%), Metadata: %d Bytes (%d%%)\n",
    stats.dataSize, (stats.dataSize*100)/stats.totalSize,
    stats.keySize, (stats.keySize*100)/stats.totalSize,
    stats.metadataSize, (stats.metadataSize*100)/stats.totalSize);
    */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <printStats>:

static bool storageStats;

static void printStats(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  if (storageStats) {
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <printStats+0x1c>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <printStats+0x16>
    storagePrintStats();
 8003d14:	f7ff fff0 	bl	8003cf8 <storagePrintStats>

    storageStats = false;
 8003d18:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <printStats+0x1c>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
  }
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20004bcd 	.word	0x20004bcd

08003d28 <doReformat>:

static bool reformatValue;

static void doReformat(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  if (reformatValue) {
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <doReformat+0x14>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <doReformat+0x10>
    storageReformat();
 8003d34:	f7ff ffa2 	bl	8003c7c <storageReformat>
  }
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20004bce 	.word	0x20004bce

08003d40 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8003d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <systemLaunch+0x30>)
 8003d4e:	9302      	str	r3, [sp, #8]
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <systemLaunch+0x34>)
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	2302      	movs	r3, #2
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4907      	ldr	r1, [pc, #28]	; (8003d78 <systemLaunch+0x38>)
 8003d5c:	4807      	ldr	r0, [pc, #28]	; (8003d7c <systemLaunch+0x3c>)
 8003d5e:	f00f ffa7 	bl	8013cb0 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 8003d62:	4907      	ldr	r1, [pc, #28]	; (8003d80 <systemLaunch+0x40>)
 8003d64:	2000      	movs	r0, #0
 8003d66:	f001 fc43 	bl	80055f0 <SEGGER_RTT_printf>

}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20001be0 	.word	0x20001be0
 8003d74:	20004be8 	.word	0x20004be8
 8003d78:	0801a67c 	.word	0x0801a67c
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	0801a684 	.word	0x0801a684

08003d84 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  bool pass = true;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]


  uint32_t ld = SysTick->LOAD;
 8003d90:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <systemTask+0x80>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <systemTask+0x84>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	4a1c      	ldr	r2, [pc, #112]	; (8003e0c <systemTask+0x88>)
 8003d9c:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 8003d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003da2:	f005 fac3 	bl	800932c <delay_us>
  time2 = DWT->CYCCNT;
 8003da6:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <systemTask+0x84>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <systemTask+0x8c>)
 8003dac:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(time2-time1)/CLOCK_PER_USEC);
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <systemTask+0x8c>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <systemTask+0x88>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <systemTask+0x90>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4915      	ldr	r1, [pc, #84]	; (8003e18 <systemTask+0x94>)
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f001 fc13 	bl	80055f0 <SEGGER_RTT_printf>


  ledInit();
 8003dca:	f7ff f895 	bl	8002ef8 <ledInit>
  ledSet(CHG_LED, SET);
 8003dce:	2101      	movs	r1, #1
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7ff f903 	bl	8002fdc <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8003dd6:	f004 faf5 	bl	80083c4 <queueMonitorInit>

  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8003dda:	f7fe fedf 	bl	8002b9c <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 8003dde:	f000 fc55 	bl	800468c <passthroughInit>

  systemInit();
 8003de2:	f000 f841 	bl	8003e68 <systemInit>
  DEBUG_PRINT("System drivers are Initialized!\n");
 8003de6:	490d      	ldr	r1, [pc, #52]	; (8003e1c <systemTask+0x98>)
 8003de8:	2000      	movs	r0, #0
 8003dea:	f001 fc01 	bl	80055f0 <SEGGER_RTT_printf>



  commInit();
 8003dee:	f7fd fa9f 	bl	8001330 <commInit>
  DEBUG_PRINT("System communications are Initialized!\n");
 8003df2:	490b      	ldr	r1, [pc, #44]	; (8003e20 <systemTask+0x9c>)
 8003df4:	2000      	movs	r0, #0
 8003df6:	f001 fbfb 	bl	80055f0 <SEGGER_RTT_printf>
    vTaskDelay(portMAX_DELAY);


    */

}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	e000e010 	.word	0xe000e010
 8003e08:	e0001000 	.word	0xe0001000
 8003e0c:	20004be0 	.word	0x20004be0
 8003e10:	20004be4 	.word	0x20004be4
 8003e14:	38e38e39 	.word	0x38e38e39
 8003e18:	0801a6a4 	.word	0x0801a6a4
 8003e1c:	0801a6b4 	.word	0x0801a6b4
 8003e20:	0801a6d8 	.word	0x0801a6d8

08003e24 <systemWaitStart>:



void systemWaitStart(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 8003e28:	e002      	b.n	8003e30 <systemWaitStart+0xc>
    vTaskDelay(2);
 8003e2a:	2002      	movs	r0, #2
 8003e2c:	f010 f8f8 	bl	8014020 <vTaskDelay>
  while(!isInit)
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <systemWaitStart+0x3c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	f083 0301 	eor.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f5      	bne.n	8003e2a <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <systemWaitStart+0x40>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e46:	4618      	mov	r0, r3
 8003e48:	f00f fc94 	bl	8013774 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <systemWaitStart+0x40>)
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	2300      	movs	r3, #0
 8003e52:	2200      	movs	r2, #0
 8003e54:	2100      	movs	r1, #0
 8003e56:	f00f fa0b 	bl	8013270 <xQueueGenericSend>
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20004bcf 	.word	0x20004bcf
 8003e64:	20004fe8 	.word	0x20004fe8

08003e68 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af02      	add	r7, sp, #8
  if(isInit)
 8003e6e:	4b46      	ldr	r3, [pc, #280]	; (8003f88 <systemInit+0x120>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f040 8085 	bne.w	8003f82 <systemInit+0x11a>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8003e78:	4944      	ldr	r1, [pc, #272]	; (8003f8c <systemInit+0x124>)
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f00f f9dd 	bl	801323a <xQueueCreateMutexStatic>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4a43      	ldr	r2, [pc, #268]	; (8003f90 <systemInit+0x128>)
 8003e84:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8003e86:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <systemInit+0x128>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f00f fc70 	bl	8013774 <xQueueSemaphoreTake>

  usblinkInit();
 8003e94:	f000 fbaa 	bl	80045ec <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 8003e98:	493e      	ldr	r1, [pc, #248]	; (8003f94 <systemInit+0x12c>)
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f001 fba8 	bl	80055f0 <SEGGER_RTT_printf>

  sysLoadInit();
 8003ea0:	f004 fc06 	bl	80086b0 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8003ea4:	493c      	ldr	r1, [pc, #240]	; (8003f98 <systemInit+0x130>)
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f001 fba2 	bl	80055f0 <SEGGER_RTT_printf>
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
  crtpInit();
 8003eac:	f7fd fa74 	bl	8001398 <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8003eb0:	493a      	ldr	r1, [pc, #232]	; (8003f9c <systemInit+0x134>)
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f001 fb9c 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8003eb8:	4939      	ldr	r1, [pc, #228]	; (8003fa0 <systemInit+0x138>)
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f001 fb98 	bl	80055f0 <SEGGER_RTT_printf>

  consoleInit();
 8003ec0:	f001 fc0a 	bl	80056d8 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8003ec4:	f000 fcf4 	bl	80048b0 <platformConfigGetDeviceTypeName>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4935      	ldr	r1, [pc, #212]	; (8003fa4 <systemInit+0x13c>)
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f001 fb8e 	bl	80055f0 <SEGGER_RTT_printf>

  if (V_PRODUCTION_RELEASE) {
 8003ed4:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <systemInit+0x140>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <systemInit+0x84>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <systemInit+0x144>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4933      	ldr	r1, [pc, #204]	; (8003fb0 <systemInit+0x148>)
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f001 fb83 	bl	80055f0 <SEGGER_RTT_printf>
 8003eea:	e014      	b.n	8003f16 <systemInit+0xae>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 8003eec:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <systemInit+0x14c>)
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <systemInit+0x150>)
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <systemInit+0x144>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a30      	ldr	r2, [pc, #192]	; (8003fbc <systemInit+0x154>)
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d001      	beq.n	8003f04 <systemInit+0x9c>
 8003f00:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <systemInit+0x158>)
 8003f02:	e000      	b.n	8003f06 <systemInit+0x9e>
 8003f04:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <systemInit+0x15c>)
 8003f06:	9201      	str	r2, [sp, #4]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	460a      	mov	r2, r1
 8003f0e:	492e      	ldr	r1, [pc, #184]	; (8003fc8 <systemInit+0x160>)
 8003f10:	2000      	movs	r0, #0
 8003f12:	f001 fb6d 	bl	80055f0 <SEGGER_RTT_printf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <systemInit+0x164>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <systemInit+0x168>)
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	4b2d      	ldr	r3, [pc, #180]	; (8003fd4 <systemInit+0x16c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	482d      	ldr	r0, [pc, #180]	; (8003fd8 <systemInit+0x170>)
 8003f24:	f9b0 0000 	ldrsh.w	r0, [r0]
 8003f28:	9001      	str	r0, [sp, #4]
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	492b      	ldr	r1, [pc, #172]	; (8003fdc <systemInit+0x174>)
 8003f30:	2000      	movs	r0, #0
 8003f32:	f001 fb5d 	bl	80055f0 <SEGGER_RTT_printf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 8003f36:	f004 fd1f 	bl	8008978 <workerInit>
  ledseqInit();
 8003f3a:	f7ff f891 	bl	8003060 <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 8003f3e:	4928      	ldr	r1, [pc, #160]	; (8003fe0 <systemInit+0x178>)
 8003f40:	2000      	movs	r0, #0
 8003f42:	f001 fb55 	bl	80055f0 <SEGGER_RTT_printf>


  pmInit();
 8003f46:	f7ff faff 	bl	8003548 <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 8003f4a:	4926      	ldr	r1, [pc, #152]	; (8003fe4 <systemInit+0x17c>)
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f001 fb4f 	bl	80055f0 <SEGGER_RTT_printf>

  buzzerInit();
 8003f52:	f7fe fef7 	bl	8002d44 <buzzerInit>
  buzzerOn(3000);
  HAL_Delay(2);
  buzzerOn(2000);
  HAL_Delay(2);
  */
  buzzerOff();
 8003f56:	f7fe ff05 	bl	8002d64 <buzzerOff>

  peerLocalizationInit();
 8003f5a:	f7fd f8fd 	bl	8001158 <peerLocalizationInit>
  DEBUG_PRINT("peerLocalization is Initialized!\n");
 8003f5e:	4922      	ldr	r1, [pc, #136]	; (8003fe8 <systemInit+0x180>)
 8003f60:	2000      	movs	r0, #0
 8003f62:	f001 fb45 	bl	80055f0 <SEGGER_RTT_printf>


#ifdef CONFIG_APP_ENABLE
  DEBUG_PRINT("-------------- Start User application -----------------\n");
 8003f66:	4921      	ldr	r1, [pc, #132]	; (8003fec <systemInit+0x184>)
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f001 fb41 	bl	80055f0 <SEGGER_RTT_printf>
  appInit();
 8003f6e:	f7fd f997 	bl	80012a0 <appInit>
  DEBUG_PRINT("[TASK] appTask is running!\n");
 8003f72:	491f      	ldr	r1, [pc, #124]	; (8003ff0 <systemInit+0x188>)
 8003f74:	2000      	movs	r0, #0
 8003f76:	f001 fb3b 	bl	80055f0 <SEGGER_RTT_printf>
#endif

  isInit = true;
 8003f7a:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <systemInit+0x120>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e000      	b.n	8003f84 <systemInit+0x11c>
    return;
 8003f82:	bf00      	nop
}
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20004bcf 	.word	0x20004bcf
 8003f8c:	20004fec 	.word	0x20004fec
 8003f90:	20004fe8 	.word	0x20004fe8
 8003f94:	0801a700 	.word	0x0801a700
 8003f98:	0801a720 	.word	0x0801a720
 8003f9c:	0801a744 	.word	0x0801a744
 8003fa0:	0801a764 	.word	0x0801a764
 8003fa4:	0801a784 	.word	0x0801a784
 8003fa8:	0801c539 	.word	0x0801c539
 8003fac:	20000350 	.word	0x20000350
 8003fb0:	0801a79c 	.word	0x0801a79c
 8003fb4:	20000348 	.word	0x20000348
 8003fb8:	2000034c 	.word	0x2000034c
 8003fbc:	0801c538 	.word	0x0801c538
 8003fc0:	0801a7b4 	.word	0x0801a7b4
 8003fc4:	0801a7c0 	.word	0x0801a7c0
 8003fc8:	0801a7c8 	.word	0x0801a7c8
 8003fcc:	1fff7a18 	.word	0x1fff7a18
 8003fd0:	1fff7a14 	.word	0x1fff7a14
 8003fd4:	1fff7a10 	.word	0x1fff7a10
 8003fd8:	1fff7a22 	.word	0x1fff7a22
 8003fdc:	0801a7e0 	.word	0x0801a7e0
 8003fe0:	0801a810 	.word	0x0801a810
 8003fe4:	0801a834 	.word	0x0801a834
 8003fe8:	0801a850 	.word	0x0801a850
 8003fec:	0801a874 	.word	0x0801a874
 8003ff0:	0801a8b0 	.word	0x0801a8b0

08003ff4 <systemSyslinkReceive>:

void systemSyslinkReceive(SyslinkPacket *slp)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_SYS_NRF_VERSION)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b30      	cmp	r3, #48	; 0x30
 8004002:	d114      	bne.n	800402e <systemSyslinkReceive+0x3a>
  {
    size_t len = slp->length - 1;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	785b      	ldrb	r3, [r3, #1]
 8004008:	3b01      	subs	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]

    if (sizeof(nrf_version) - 1 <=  len) {
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b0e      	cmp	r3, #14
 8004010:	d901      	bls.n	8004016 <systemSyslinkReceive+0x22>
      len = sizeof(nrf_version) - 1;
 8004012:	230f      	movs	r3, #15
 8004014:	60fb      	str	r3, [r7, #12]
    }
    memcpy(&nrf_version, &slp->data[0], len );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3302      	adds	r3, #2
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4619      	mov	r1, r3
 800401e:	4806      	ldr	r0, [pc, #24]	; (8004038 <systemSyslinkReceive+0x44>)
 8004020:	f013 fe2f 	bl	8017c82 <memcpy>
    DEBUG_PRINT("NRF51 version: %s\n", nrf_version);
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <systemSyslinkReceive+0x44>)
 8004026:	4905      	ldr	r1, [pc, #20]	; (800403c <systemSyslinkReceive+0x48>)
 8004028:	2000      	movs	r0, #0
 800402a:	f001 fae1 	bl	80055f0 <SEGGER_RTT_printf>
  }
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20004bd0 	.word	0x20004bd0
 800403c:	0801a8cc 	.word	0x0801a8cc

08004040 <uartslkDmaInit>:
/**
  * Configures the UART DMA. Mainly used for FreeRTOS trace
  * data transfer.
  */
void uartslkDmaInit(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0

#ifdef CONFIG_SYSLINK_DMA

	HAL_UART_MspInit(&huart6);
 8004044:	4803      	ldr	r0, [pc, #12]	; (8004054 <uartslkDmaInit+0x14>)
 8004046:	f005 fb2b 	bl	80096a0 <HAL_UART_MspInit>

#endif

isUartDmaInitialized = true;
 800404a:	4b03      	ldr	r3, [pc, #12]	; (8004058 <uartslkDmaInit+0x18>)
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]

}
 8004050:	bf00      	nop
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20007e70 	.word	0x20007e70
 8004058:	2000512c 	.word	0x2000512c

0800405c <uartslkInit>:

void uartslkInit(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af02      	add	r7, sp, #8
  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8004062:	2303      	movs	r3, #3
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	4b42      	ldr	r3, [pc, #264]	; (8004170 <uartslkInit+0x114>)
 8004068:	2200      	movs	r2, #0
 800406a:	2100      	movs	r1, #0
 800406c:	2001      	movs	r0, #1
 800406e:	f00e ffe9 	bl	8013044 <xQueueGenericCreateStatic>
 8004072:	4603      	mov	r3, r0
 8004074:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <uartslkInit+0x118>)
 8004076:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8004078:	2303      	movs	r3, #3
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <uartslkInit+0x11c>)
 800407e:	2200      	movs	r2, #0
 8004080:	2100      	movs	r1, #0
 8004082:	2001      	movs	r0, #1
 8004084:	f00e ffde 	bl	8013044 <xQueueGenericCreateStatic>
 8004088:	4603      	mov	r3, r0
 800408a:	4a3c      	ldr	r2, [pc, #240]	; (800417c <uartslkInit+0x120>)
 800408c:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 800408e:	4b3b      	ldr	r3, [pc, #236]	; (800417c <uartslkInit+0x120>)
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	2300      	movs	r3, #0
 8004094:	2200      	movs	r2, #0
 8004096:	2100      	movs	r1, #0
 8004098:	f00f f8ea 	bl	8013270 <xQueueGenericSend>

  syslinkPacketDelivery = STATIC_MEM_QUEUE_CREATE(syslinkPacketDelivery);
 800409c:	2308      	movs	r3, #8
 800409e:	4618      	mov	r0, r3
 80040a0:	2342      	movs	r3, #66	; 0x42
 80040a2:	4619      	mov	r1, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <uartslkInit+0x124>)
 80040aa:	4a36      	ldr	r2, [pc, #216]	; (8004184 <uartslkInit+0x128>)
 80040ac:	f00e ffca 	bl	8013044 <xQueueGenericCreateStatic>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4a35      	ldr	r2, [pc, #212]	; (8004188 <uartslkInit+0x12c>)
 80040b4:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(syslinkPacketDelivery);
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <uartslkInit+0x12c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a34      	ldr	r2, [pc, #208]	; (800418c <uartslkInit+0x130>)
 80040bc:	4934      	ldr	r1, [pc, #208]	; (8004190 <uartslkInit+0x134>)
 80040be:	4618      	mov	r0, r3
 80040c0:	f004 f9c8 	bl	8008454 <qmRegisterQueue>


  GPIO_InitTypeDef GPIO_InitStruct;
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c4:	2300      	movs	r3, #0
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4b32      	ldr	r3, [pc, #200]	; (8004194 <uartslkInit+0x138>)
 80040ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040cc:	4a31      	ldr	r2, [pc, #196]	; (8004194 <uartslkInit+0x138>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6313      	str	r3, [r2, #48]	; 0x30
 80040d4:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <uartslkInit+0x138>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80040e0:	2200      	movs	r2, #0
 80040e2:	2140      	movs	r1, #64	; 0x40
 80040e4:	482c      	ldr	r0, [pc, #176]	; (8004198 <uartslkInit+0x13c>)
 80040e6:	f007 f8c1 	bl	800b26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	482a      	ldr	r0, [pc, #168]	; (8004198 <uartslkInit+0x13c>)
 80040f0:	f007 f8bc 	bl	800b26c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 80040f4:	23c0      	movs	r3, #192	; 0xc0
 80040f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f8:	2302      	movs	r3, #2
 80040fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040fc:	2301      	movs	r3, #1
 80040fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004100:	2303      	movs	r3, #3
 8004102:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004104:	1d3b      	adds	r3, r7, #4
 8004106:	4619      	mov	r1, r3
 8004108:	4823      	ldr	r0, [pc, #140]	; (8004198 <uartslkInit+0x13c>)
 800410a:	f006 ff13 	bl	800af34 <HAL_GPIO_Init>
  huart6.Init.BaudRate = 2000000;
  huart6.Init.Mode = UART_MODE_TX;

#else

  huart6.Instance = USART6;
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <uartslkInit+0x140>)
 8004110:	4a23      	ldr	r2, [pc, #140]	; (80041a0 <uartslkInit+0x144>)
 8004112:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 8004114:	4b21      	ldr	r3, [pc, #132]	; (800419c <uartslkInit+0x140>)
 8004116:	4a23      	ldr	r2, [pc, #140]	; (80041a4 <uartslkInit+0x148>)
 8004118:	605a      	str	r2, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <uartslkInit+0x140>)
 800411c:	220c      	movs	r2, #12
 800411e:	615a      	str	r2, [r3, #20]

#endif

  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004120:	4b1e      	ldr	r3, [pc, #120]	; (800419c <uartslkInit+0x140>)
 8004122:	2200      	movs	r2, #0
 8004124:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <uartslkInit+0x140>)
 8004128:	2200      	movs	r2, #0
 800412a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <uartslkInit+0x140>)
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <uartslkInit+0x140>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <uartslkInit+0x140>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]


  if (HAL_UART_Init(&huart6) != HAL_OK)
 800413e:	4817      	ldr	r0, [pc, #92]	; (800419c <uartslkInit+0x140>)
 8004140:	f00a f86e 	bl	800e220 <HAL_UART_Init>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <uartslkInit+0xf2>
  {
    Error_Handler();
 800414a:	f005 f91b 	bl	8009384 <Error_Handler>
  }


  uartslkDmaInit();
 800414e:	f7ff ff77 	bl	8004040 <uartslkDmaInit>

  // Setting up TXEN pin (NRF flow control)
  // 향후 외부핀 PA4 연결 필요

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <uartslkInit+0x140>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	4b10      	ldr	r3, [pc, #64]	; (800419c <uartslkInit+0x140>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0220 	orr.w	r2, r2, #32
 8004160:	60da      	str	r2, [r3, #12]

  isInit = true;
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <uartslkInit+0x14c>)
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20005044 	.word	0x20005044
 8004174:	20005040 	.word	0x20005040
 8004178:	20005098 	.word	0x20005098
 800417c:	20005094 	.word	0x20005094
 8004180:	20001ea8 	.word	0x20001ea8
 8004184:	20001c98 	.word	0x20001c98
 8004188:	200050e8 	.word	0x200050e8
 800418c:	0801a8e0 	.word	0x0801a8e0
 8004190:	0801a8f8 	.word	0x0801a8f8
 8004194:	40023800 	.word	0x40023800
 8004198:	40020800 	.word	0x40020800
 800419c:	20007e70 	.word	0x20007e70
 80041a0:	40011400 	.word	0x40011400
 80041a4:	000f4240 	.word	0x000f4240
 80041a8:	2000503c 	.word	0x2000503c

080041ac <uartslkGetPacketBlocking>:
{
  syslinkPacketDeliveryReadyToReceive = true;
}

void uartslkGetPacketBlocking(SyslinkPacket* packet)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  xQueueReceive(syslinkPacketDelivery, packet, portMAX_DELAY);
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <uartslkGetPacketBlocking+0x20>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f00f f9f8 	bl	80135b4 <xQueueReceive>
}
 80041c4:	bf00      	nop
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	200050e8 	.word	0x200050e8

080041d0 <uartslkSendDataDmaBlocking>:

    return (unsigned char)ch;
}

void uartslkSendDataDmaBlocking(uint32_t size, uint8_t* data)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  if (dmaNrfFlowControlBufferFull) {
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <uartslkSendDataDmaBlocking+0x94>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <uartslkSendDataDmaBlocking+0x1c>
    dmaSendWhileNrfBufferFull++;
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <uartslkSendDataDmaBlocking+0x98>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3301      	adds	r3, #1
 80041e8:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <uartslkSendDataDmaBlocking+0x98>)
 80041ea:	6013      	str	r3, [r2, #0]
  }

  if (isUartDmaInitialized)
 80041ec:	4b1f      	ldr	r3, [pc, #124]	; (800426c <uartslkSendDataDmaBlocking+0x9c>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d032      	beq.n	800425a <uartslkSendDataDmaBlocking+0x8a>
  {
    xSemaphoreTake(uartBusy, portMAX_DELAY);
 80041f4:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <uartslkSendDataDmaBlocking+0xa0>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041fc:	4618      	mov	r0, r3
 80041fe:	f00f fab9 	bl	8013774 <xQueueSemaphoreTake>
    // Wait for DMA to be free
    while(HAL_DMA_GetState(&hdma_usart6_tx) != HAL_DMA_STATE_READY);
 8004202:	bf00      	nop
 8004204:	481b      	ldr	r0, [pc, #108]	; (8004274 <uartslkSendDataDmaBlocking+0xa4>)
 8004206:	f006 fda7 	bl	800ad58 <HAL_DMA_GetState>
 800420a:	4603      	mov	r3, r0
 800420c:	2b01      	cmp	r3, #1
 800420e:	d1f9      	bne.n	8004204 <uartslkSendDataDmaBlocking+0x34>

    //Copy data in DMA buffer
    memcpy(dmaTXBuffer, data, size);
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	4818      	ldr	r0, [pc, #96]	; (8004278 <uartslkSendDataDmaBlocking+0xa8>)
 8004216:	f013 fd34 	bl	8017c82 <memcpy>
    initialDMACount = (uint16_t)size;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	b29a      	uxth	r2, r3
 800421e:	4b17      	ldr	r3, [pc, #92]	; (800427c <uartslkSendDataDmaBlocking+0xac>)
 8004220:	801a      	strh	r2, [r3, #0]

    if(HAL_UART_Transmit_DMA(&huart6, dmaTXBuffer, size)!=HAL_OK){
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	b29b      	uxth	r3, r3
 8004226:	461a      	mov	r2, r3
 8004228:	4913      	ldr	r1, [pc, #76]	; (8004278 <uartslkSendDataDmaBlocking+0xa8>)
 800422a:	4815      	ldr	r0, [pc, #84]	; (8004280 <uartslkSendDataDmaBlocking+0xb0>)
 800422c:	f00a f848 	bl	800e2c0 <HAL_UART_Transmit_DMA>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <uartslkSendDataDmaBlocking+0x6e>
    	DEBUG_PRINT("DMA transfer failed\n");
 8004236:	4913      	ldr	r1, [pc, #76]	; (8004284 <uartslkSendDataDmaBlocking+0xb4>)
 8004238:	2000      	movs	r0, #0
 800423a:	f001 f9d9 	bl	80055f0 <SEGGER_RTT_printf>
    }
    xSemaphoreTake(waitUntilSendDone, portMAX_DELAY);
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <uartslkSendDataDmaBlocking+0xb8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004246:	4618      	mov	r0, r3
 8004248:	f00f fa94 	bl	8013774 <xQueueSemaphoreTake>
    xSemaphoreGive(uartBusy);
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <uartslkSendDataDmaBlocking+0xa0>)
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	2300      	movs	r3, #0
 8004252:	2200      	movs	r2, #0
 8004254:	2100      	movs	r1, #0
 8004256:	f00f f80b 	bl	8013270 <xQueueGenericSend>

  }
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20005140 	.word	0x20005140
 8004268:	20005144 	.word	0x20005144
 800426c:	2000512c 	.word	0x2000512c
 8004270:	20005094 	.word	0x20005094
 8004274:	20007eb8 	.word	0x20007eb8
 8004278:	200050ec 	.word	0x200050ec
 800427c:	2000512e 	.word	0x2000512e
 8004280:	20007e70 	.word	0x20007e70
 8004284:	0801a91c 	.word	0x0801a91c
 8004288:	20005040 	.word	0x20005040

0800428c <uartSyslinkDumpDebugProbe>:
#endif

*/


void uartSyslinkDumpDebugProbe() {
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  DEBUG_PRINT("STM dmaPausedCounter: %ld\n",dmaPausedCounter);
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <uartSyslinkDumpDebugProbe+0x50>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	4912      	ldr	r1, [pc, #72]	; (80042e0 <uartSyslinkDumpDebugProbe+0x54>)
 8004298:	2000      	movs	r0, #0
 800429a:	f001 f9a9 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamPausedCounter: %ld\n", dmaTxStreamPausedCounter);
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <uartSyslinkDumpDebugProbe+0x58>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	4910      	ldr	r1, [pc, #64]	; (80042e8 <uartSyslinkDumpDebugProbe+0x5c>)
 80042a6:	2000      	movs	r0, #0
 80042a8:	f001 f9a2 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaResumedCounter: %ld\n", dmaResumedCounter);
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <uartSyslinkDumpDebugProbe+0x60>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	490f      	ldr	r1, [pc, #60]	; (80042f0 <uartSyslinkDumpDebugProbe+0x64>)
 80042b4:	2000      	movs	r0, #0
 80042b6:	f001 f99b 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamResumedCounter: %ld\n", dmaTxStreamResumedCounter);
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <uartSyslinkDumpDebugProbe+0x68>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	490d      	ldr	r1, [pc, #52]	; (80042f8 <uartSyslinkDumpDebugProbe+0x6c>)
 80042c2:	2000      	movs	r0, #0
 80042c4:	f001 f994 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaSendWhileNrfBufferFull: %ld\n", dmaSendWhileNrfBufferFull);
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <uartSyslinkDumpDebugProbe+0x70>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	490c      	ldr	r1, [pc, #48]	; (8004300 <uartSyslinkDumpDebugProbe+0x74>)
 80042d0:	2000      	movs	r0, #0
 80042d2:	f001 f98d 	bl	80055f0 <SEGGER_RTT_printf>
}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20005130 	.word	0x20005130
 80042e0:	0801a934 	.word	0x0801a934
 80042e4:	20005134 	.word	0x20005134
 80042e8:	0801a950 	.word	0x0801a950
 80042ec:	20005138 	.word	0x20005138
 80042f0:	0801a974 	.word	0x0801a974
 80042f4:	2000513c 	.word	0x2000513c
 80042f8:	0801a990 	.word	0x0801a990
 80042fc:	20005144 	.word	0x20005144
 8004300:	0801a9b4 	.word	0x0801a9b4

08004304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	2b00      	cmp	r3, #0
 8004314:	db0b      	blt.n	800432e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	f003 021f 	and.w	r2, r3, #31
 800431c:	4907      	ldr	r1, [pc, #28]	; (800433c <__NVIC_EnableIRQ+0x38>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2001      	movs	r0, #1
 8004326:	fa00 f202 	lsl.w	r2, r0, r2
 800432a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000e100 	.word	0xe000e100

08004340 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	2b00      	cmp	r3, #0
 8004350:	db12      	blt.n	8004378 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 021f 	and.w	r2, r3, #31
 8004358:	490a      	ldr	r1, [pc, #40]	; (8004384 <__NVIC_DisableIRQ+0x44>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	2001      	movs	r0, #1
 8004362:	fa00 f202 	lsl.w	r2, r0, r2
 8004366:	3320      	adds	r3, #32
 8004368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800436c:	f3bf 8f4f 	dsb	sy
}
 8004370:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004372:	f3bf 8f6f 	isb	sy
}
 8004376:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000e100 	.word	0xe000e100

08004388 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8004390:	bf00      	nop
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <usbGetDataBlocking+0x50>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4618      	mov	r0, r3
 800439e:	f00f f909 	bl	80135b4 <xQueueReceive>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d1f4      	bne.n	8004392 <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 80043a8:	2043      	movs	r0, #67	; 0x43
 80043aa:	f7ff ffc9 	bl	8004340 <__NVIC_DisableIRQ>
  if (rxStopped) {
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <usbGetDataBlocking+0x54>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 80043b6:	2340      	movs	r3, #64	; 0x40
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <usbGetDataBlocking+0x58>)
 80043ba:	2101      	movs	r1, #1
 80043bc:	4809      	ldr	r0, [pc, #36]	; (80043e4 <usbGetDataBlocking+0x5c>)
 80043be:	f012 fc07 	bl	8016bd0 <USBD_LL_PrepareReceive>
    rxStopped = false;
 80043c2:	4b06      	ldr	r3, [pc, #24]	; (80043dc <usbGetDataBlocking+0x54>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 80043c8:	2043      	movs	r0, #67	; 0x43
 80043ca:	f7ff ff9b 	bl	8004304 <__NVIC_EnableIRQ>

  return true;
 80043ce:	2301      	movs	r3, #1
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	2000514c 	.word	0x2000514c
 80043dc:	200002ba 	.word	0x200002ba
 80043e0:	20005155 	.word	0x20005155
 80043e4:	2000c018 	.word	0x2000c018

080043e8 <usbSendData>:


static USBPacket outStage;

bool usbSendData(uint32_t size, uint8_t* data)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  outStage.size = size;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <usbSendData+0x40>)
 80043f8:	701a      	strb	r2, [r3, #0]
  memcpy(outStage.data, data, size);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	480b      	ldr	r0, [pc, #44]	; (800442c <usbSendData+0x44>)
 8004400:	f013 fc3f 	bl	8017c82 <memcpy>
  // Dont' block when sending
  return (xQueueSend(usbDataTx, &outStage, M2T(100)) == pdTRUE);
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <usbSendData+0x48>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	2300      	movs	r3, #0
 800440a:	2264      	movs	r2, #100	; 0x64
 800440c:	4906      	ldr	r1, [pc, #24]	; (8004428 <usbSendData+0x40>)
 800440e:	f00e ff2f 	bl	8013270 <xQueueGenericSend>
 8004412:	4603      	mov	r3, r0
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20005198 	.word	0x20005198
 800442c:	20005199 	.word	0x20005199
 8004430:	20005150 	.word	0x20005150

08004434 <usbInit>:


void usbInit(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 800443a:	2305      	movs	r3, #5
 800443c:	4618      	mov	r0, r3
 800443e:	2341      	movs	r3, #65	; 0x41
 8004440:	4619      	mov	r1, r3
 8004442:	2300      	movs	r3, #0
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <usbInit+0x64>)
 8004448:	4a14      	ldr	r2, [pc, #80]	; (800449c <usbInit+0x68>)
 800444a:	f00e fdfb 	bl	8013044 <xQueueGenericCreateStatic>
 800444e:	4603      	mov	r3, r0
 8004450:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <usbInit+0x6c>)
 8004452:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 8004454:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <usbInit+0x6c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a12      	ldr	r2, [pc, #72]	; (80044a4 <usbInit+0x70>)
 800445a:	4913      	ldr	r1, [pc, #76]	; (80044a8 <usbInit+0x74>)
 800445c:	4618      	mov	r0, r3
 800445e:	f003 fff9 	bl	8008454 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 8004462:	2301      	movs	r3, #1
 8004464:	4618      	mov	r0, r3
 8004466:	2341      	movs	r3, #65	; 0x41
 8004468:	4619      	mov	r1, r3
 800446a:	2300      	movs	r3, #0
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <usbInit+0x78>)
 8004470:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <usbInit+0x7c>)
 8004472:	f00e fde7 	bl	8013044 <xQueueGenericCreateStatic>
 8004476:	4603      	mov	r3, r0
 8004478:	4a0e      	ldr	r2, [pc, #56]	; (80044b4 <usbInit+0x80>)
 800447a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <usbInit+0x80>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <usbInit+0x84>)
 8004482:	4909      	ldr	r1, [pc, #36]	; (80044a8 <usbInit+0x74>)
 8004484:	4618      	mov	r0, r3
 8004486:	f003 ffe5 	bl	8008454 <qmRegisterQueue>

  isInit = true;
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <usbInit+0x88>)
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20002040 	.word	0x20002040
 800449c:	20001ef8 	.word	0x20001ef8
 80044a0:	2000514c 	.word	0x2000514c
 80044a4:	0801a9d8 	.word	0x0801a9d8
 80044a8:	0801a9e4 	.word	0x0801a9e4
 80044ac:	200020d4 	.word	0x200020d4
 80044b0:	20002090 	.word	0x20002090
 80044b4:	20005150 	.word	0x20005150
 80044b8:	0801aa00 	.word	0x0801aa00
 80044bc:	20005148 	.word	0x20005148

080044c0 <usbTest>:

bool usbTest(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return isInit;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <usbTest+0x14>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20005148 	.word	0x20005148

080044d8 <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 80044e0:	480c      	ldr	r0, [pc, #48]	; (8004514 <usblinkTask+0x3c>)
 80044e2:	f7ff ff51 	bl	8004388 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 80044e6:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <usblinkTask+0x3c>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <usblinkTask+0x40>)
 80044f0:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 80044f2:	4b08      	ldr	r3, [pc, #32]	; (8004514 <usblinkTask+0x3c>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	4908      	ldr	r1, [pc, #32]	; (800451c <usblinkTask+0x44>)
 80044fa:	4809      	ldr	r0, [pc, #36]	; (8004520 <usblinkTask+0x48>)
 80044fc:	f013 fbc1 	bl	8017c82 <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <usblinkTask+0x4c>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800450a:	4903      	ldr	r1, [pc, #12]	; (8004518 <usblinkTask+0x40>)
 800450c:	f00e feb0 	bl	8013270 <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 8004510:	e7e6      	b.n	80044e0 <usblinkTask+0x8>
 8004512:	bf00      	nop
 8004514:	20005420 	.word	0x20005420
 8004518:	20005464 	.word	0x20005464
 800451c:	20005421 	.word	0x20005421
 8004520:	20005465 	.word	0x20005465
 8004524:	200051dc 	.word	0x200051dc

08004528 <usblinkReceivePacket>:

}


static int usblinkReceivePacket(CRTPPacket *p)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <usblinkReceivePacket+0x34>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2264      	movs	r2, #100	; 0x64
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4618      	mov	r0, r3
 800453a:	f00f f83b 	bl	80135b4 <xQueueReceive>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d104      	bne.n	800454e <usblinkReceivePacket+0x26>
  {
    ledseqRun(&seq_linkUp);
 8004544:	4806      	ldr	r0, [pc, #24]	; (8004560 <usblinkReceivePacket+0x38>)
 8004546:	f7fe fe43 	bl	80031d0 <ledseqRun>
    return 0;
 800454a:	2300      	movs	r3, #0
 800454c:	e001      	b.n	8004552 <usblinkReceivePacket+0x2a>
  }

  return -1;
 800454e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200051dc 	.word	0x200051dc
 8004560:	200001ac 	.word	0x200001ac

08004564 <usblinkSendPacket>:

static int usblinkSendPacket(CRTPPacket *p)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  int dataSize;

  ASSERT(p->size < SYSLINK_MTU);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b3f      	cmp	r3, #63	; 0x3f
 8004572:	d904      	bls.n	800457e <usblinkSendPacket+0x1a>
 8004574:	2267      	movs	r2, #103	; 0x67
 8004576:	4912      	ldr	r1, [pc, #72]	; (80045c0 <usblinkSendPacket+0x5c>)
 8004578:	4812      	ldr	r0, [pc, #72]	; (80045c4 <usblinkSendPacket+0x60>)
 800457a:	f001 f867 	bl	800564c <assertFail>

  sendBuffer[0] = p->header;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	785a      	ldrb	r2, [r3, #1]
 8004582:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <usblinkSendPacket+0x64>)
 8004584:	701a      	strb	r2, [r3, #0]

  if (p->size <= CRTP_MAX_DATA_SIZE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b1e      	cmp	r3, #30
 800458c:	d807      	bhi.n	800459e <usblinkSendPacket+0x3a>
  {
    memcpy(&sendBuffer[1], p->data, p->size);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	1c99      	adds	r1, r3, #2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	480c      	ldr	r0, [pc, #48]	; (80045cc <usblinkSendPacket+0x68>)
 800459a:	f013 fb72 	bl	8017c82 <memcpy>
  }
  dataSize = p->size + 1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]


  ledseqRun(&seq_linkDown);
 80045a6:	480a      	ldr	r0, [pc, #40]	; (80045d0 <usblinkSendPacket+0x6c>)
 80045a8:	f7fe fe12 	bl	80031d0 <ledseqRun>

  return usbSendData(dataSize, sendBuffer);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4906      	ldr	r1, [pc, #24]	; (80045c8 <usblinkSendPacket+0x64>)
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff ff19 	bl	80043e8 <usbSendData>
 80045b6:	4603      	mov	r3, r0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	0801aa0c 	.word	0x0801aa0c
 80045c4:	0801aa2c 	.word	0x0801aa2c
 80045c8:	200051e0 	.word	0x200051e0
 80045cc:	200051e1 	.word	0x200051e1
 80045d0:	200001bc 	.word	0x200001bc

080045d4 <usblinkSetEnable>:



static int usblinkSetEnable(bool enable)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  return 0;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <usblinkInit>:


void usblinkInit()
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af04      	add	r7, sp, #16
  if(isInit)
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <usblinkInit+0x64>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d126      	bne.n	8004648 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 80045fa:	f7ff ff1b 	bl	8004434 <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 80045fe:	2310      	movs	r3, #16
 8004600:	4618      	mov	r0, r3
 8004602:	2320      	movs	r3, #32
 8004604:	4619      	mov	r1, r3
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <usblinkInit+0x68>)
 800460c:	4a12      	ldr	r2, [pc, #72]	; (8004658 <usblinkInit+0x6c>)
 800460e:	f00e fd19 	bl	8013044 <xQueueGenericCreateStatic>
 8004612:	4603      	mov	r3, r0
 8004614:	4a11      	ldr	r2, [pc, #68]	; (800465c <usblinkInit+0x70>)
 8004616:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8004618:	4b10      	ldr	r3, [pc, #64]	; (800465c <usblinkInit+0x70>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a10      	ldr	r2, [pc, #64]	; (8004660 <usblinkInit+0x74>)
 800461e:	4911      	ldr	r1, [pc, #68]	; (8004664 <usblinkInit+0x78>)
 8004620:	4618      	mov	r0, r3
 8004622:	f003 ff17 	bl	8008454 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	461a      	mov	r2, r3
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <usblinkInit+0x7c>)
 800462c:	9302      	str	r3, [sp, #8]
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <usblinkInit+0x80>)
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	2303      	movs	r3, #3
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	490d      	ldr	r1, [pc, #52]	; (8004670 <usblinkInit+0x84>)
 800463a:	480e      	ldr	r0, [pc, #56]	; (8004674 <usblinkInit+0x88>)
 800463c:	f00f fb38 	bl	8013cb0 <xTaskCreateStatic>

  isInit = true;
 8004640:	4b03      	ldr	r3, [pc, #12]	; (8004650 <usblinkInit+0x64>)
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e000      	b.n	800464a <usblinkInit+0x5e>
    return;
 8004648:	bf00      	nop
}
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	200051d9 	.word	0x200051d9
 8004654:	20002324 	.word	0x20002324
 8004658:	20002124 	.word	0x20002124
 800465c:	200051dc 	.word	0x200051dc
 8004660:	0801aa44 	.word	0x0801aa44
 8004664:	0801aa0c 	.word	0x0801aa0c
 8004668:	20002374 	.word	0x20002374
 800466c:	20005220 	.word	0x20005220
 8004670:	0801aa58 	.word	0x0801aa58
 8004674:	080044d9 	.word	0x080044d9

08004678 <usblinkGetLink>:
{
  return isInit;
}

struct crtpLinkOperations * usblinkGetLink()
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return &usblinkOp;
 800467c:	4b02      	ldr	r3, [pc, #8]	; (8004688 <usblinkGetLink+0x10>)
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	200002bc 	.word	0x200002bc

0800468c <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af04      	add	r7, sp, #16
  if(isInit)
 8004692:	4b21      	ldr	r3, [pc, #132]	; (8004718 <passthroughInit+0x8c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d13b      	bne.n	8004712 <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 800469a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800469e:	4618      	mov	r0, r3
 80046a0:	2301      	movs	r3, #1
 80046a2:	4619      	mov	r1, r3
 80046a4:	2300      	movs	r3, #0
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	4b1c      	ldr	r3, [pc, #112]	; (800471c <passthroughInit+0x90>)
 80046aa:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <passthroughInit+0x94>)
 80046ac:	f00e fcca 	bl	8013044 <xQueueGenericCreateStatic>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <passthroughInit+0x98>)
 80046b4:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <passthroughInit+0x98>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <passthroughInit+0x9c>)
 80046bc:	491b      	ldr	r1, [pc, #108]	; (800472c <passthroughInit+0xa0>)
 80046be:	4618      	mov	r0, r3
 80046c0:	f003 fec8 	bl	8008454 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 80046c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046c8:	4618      	mov	r0, r3
 80046ca:	2301      	movs	r3, #1
 80046cc:	4619      	mov	r1, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <passthroughInit+0xa4>)
 80046d4:	4a17      	ldr	r2, [pc, #92]	; (8004734 <passthroughInit+0xa8>)
 80046d6:	f00e fcb5 	bl	8013044 <xQueueGenericCreateStatic>
 80046da:	4603      	mov	r3, r0
 80046dc:	4a16      	ldr	r2, [pc, #88]	; (8004738 <passthroughInit+0xac>)
 80046de:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80046e0:	4b10      	ldr	r3, [pc, #64]	; (8004724 <passthroughInit+0x98>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a10      	ldr	r2, [pc, #64]	; (8004728 <passthroughInit+0x9c>)
 80046e6:	4911      	ldr	r1, [pc, #68]	; (800472c <passthroughInit+0xa0>)
 80046e8:	4618      	mov	r0, r3
 80046ea:	f003 feb3 	bl	8008454 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 80046ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <passthroughInit+0xb0>)
 80046f6:	9302      	str	r3, [sp, #8]
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <passthroughInit+0xb4>)
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	2305      	movs	r3, #5
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2300      	movs	r3, #0
 8004702:	4910      	ldr	r1, [pc, #64]	; (8004744 <passthroughInit+0xb8>)
 8004704:	4810      	ldr	r0, [pc, #64]	; (8004748 <passthroughInit+0xbc>)
 8004706:	f00f fad3 	bl	8013cb0 <xTaskCreateStatic>
 800470a:	4603      	mov	r3, r0
 800470c:	4a0f      	ldr	r2, [pc, #60]	; (800474c <passthroughInit+0xc0>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e000      	b.n	8004714 <passthroughInit+0x88>
    return;
 8004712:	bf00      	nop
}
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20005888 	.word	0x20005888
 800471c:	200026e4 	.word	0x200026e4
 8004720:	200024e4 	.word	0x200024e4
 8004724:	2000588c 	.word	0x2000588c
 8004728:	0801aa60 	.word	0x0801aa60
 800472c:	0801aa6c 	.word	0x0801aa6c
 8004730:	20002934 	.word	0x20002934
 8004734:	20002734 	.word	0x20002734
 8004738:	20005890 	.word	0x20005890
 800473c:	2000242c 	.word	0x2000242c
 8004740:	20005488 	.word	0x20005488
 8004744:	0801aa98 	.word	0x0801aa98
 8004748:	08004751 	.word	0x08004751
 800474c:	20005484 	.word	0x20005484

08004750 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8004758:	f7ff fb64 	bl	8003e24 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800475c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004760:	2001      	movs	r0, #1
 8004762:	f010 fccd 	bl	8015100 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 8004766:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800476a:	2000      	movs	r0, #0
 800476c:	f010 fd14 	bl	8015198 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8004770:	e7f4      	b.n	800475c <passthroughTask+0xc>

08004772 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 800477c:	1d3b      	adds	r3, r7, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f8a2 	bl	80048c8 <platformGetListOfConfigurations>
 8004784:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4619      	mov	r1, r3
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f854 	bl	8004838 <platformInitConfiguration>
 8004790:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b30      	cmp	r3, #48	; 0x30
 80047b6:	d104      	bne.n	80047c2 <platformParseDeviceTypeString+0x1c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3301      	adds	r3, #1
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b3b      	cmp	r3, #59	; 0x3b
 80047c0:	d001      	beq.n	80047c6 <platformParseDeviceTypeString+0x20>
    return 1;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e034      	b.n	8004830 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 80047c6:	2302      	movs	r3, #2
 80047c8:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3304      	adds	r3, #4
 80047ce:	60fb      	str	r3, [r7, #12]
  int end = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e00e      	b.n	80047f8 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <platformParseDeviceTypeString+0x5a>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b3b      	cmp	r3, #59	; 0x3b
 80047f0:	d006      	beq.n	8004800 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3301      	adds	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	ddec      	ble.n	80047da <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	429a      	cmp	r2, r3
 8004806:	dd01      	ble.n	800480c <platformParseDeviceTypeString+0x66>
    return 1;
 8004808:	2301      	movs	r3, #1
 800480a:	e011      	b.n	8004830 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	4413      	add	r3, r2
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4619      	mov	r1, r3
 800481e:	6838      	ldr	r0, [r7, #0]
 8004820:	f013 fa2f 	bl	8017c82 <memcpy>
  deviceType[length] = '\0';
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	4413      	add	r3, r2
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
  return 0;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b090      	sub	sp, #64	; 0x40
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f85e 	bl	8004908 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 800484c:	f107 020c 	add.w	r2, r7, #12
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	4611      	mov	r1, r2
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff ffa5 	bl	80047a6 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 800485c:	2300      	movs	r3, #0
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004860:	e01a      	b.n	8004898 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8004862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4413      	add	r3, r2
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	f107 020c 	add.w	r2, r7, #12
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fca7 	bl	80001d0 <strcmp>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <platformInitConfiguration+0x5a>
      active_config = config;
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <platformInitConfiguration+0x74>)
 800488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488c:	6013      	str	r3, [r2, #0]
      return 0;
 800488e:	2300      	movs	r3, #0
 8004890:	e007      	b.n	80048a2 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8004892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004894:	3301      	adds	r3, #1
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	dbe0      	blt.n	8004862 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 80048a0:	2301      	movs	r3, #1
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3740      	adds	r7, #64	; 0x40
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20005894 	.word	0x20005894

080048b0 <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 80048b4:	4b03      	ldr	r3, [pc, #12]	; (80048c4 <platformConfigGetDeviceTypeName+0x14>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3305      	adds	r3, #5
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20005894 	.word	0x20005894

080048c8 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2203      	movs	r2, #3
 80048d4:	601a      	str	r2, [r3, #0]
  return configs;
 80048d6:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <platformGetListOfConfigurations+0x1c>)
}
 80048d8:	4618      	mov	r0, r3
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	200002d0 	.word	0x200002d0

080048e8 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80048f6:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 80048fa:	015b      	lsls	r3, r3, #5
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8004914:	2300      	movs	r3, #0
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e00d      	b.n	8004936 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 800491a:	6938      	ldr	r0, [r7, #16]
 800491c:	f7ff ffe4 	bl	80048e8 <getAddressOfOtpMemoryBlock>
 8004920:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	617b      	str	r3, [r7, #20]
      break;
 800492e:	e005      	b.n	800493c <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3301      	adds	r3, #1
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b0f      	cmp	r3, #15
 800493a:	ddee      	ble.n	800491a <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <platformGetDeviceTypeString+0x42>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2bff      	cmp	r3, #255	; 0xff
 8004948:	d101      	bne.n	800494e <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <platformGetDeviceTypeString+0x60>)
 800494c:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 800494e:	2220      	movs	r2, #32
 8004950:	6979      	ldr	r1, [r7, #20]
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f013 f8b4 	bl	8017ac0 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3320      	adds	r3, #32
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
}
 8004960:	bf00      	nop
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	0801ab8c 	.word	0x0801ab8c

0800496c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8004972:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <_DoInit+0x8c>)
 8004974:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2203      	movs	r2, #3
 8004980:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <_DoInit+0x90>)
 8004986:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a1d      	ldr	r2, [pc, #116]	; (8004a00 <_DoInit+0x94>)
 800498c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004994:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a14      	ldr	r2, [pc, #80]	; (80049fc <_DoInit+0x90>)
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <_DoInit+0x98>)
 80049b2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3307      	adds	r3, #7
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <_DoInit+0x9c>)
 80049d2:	6810      	ldr	r0, [r2, #0]
 80049d4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <_DoInit+0xa0>)
 80049da:	6810      	ldr	r0, [r2, #0]
 80049dc:	6018      	str	r0, [r3, #0]
 80049de:	8891      	ldrh	r1, [r2, #4]
 80049e0:	7992      	ldrb	r2, [r2, #6]
 80049e2:	8099      	strh	r1, [r3, #4]
 80049e4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	719a      	strb	r2, [r3, #6]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	20005898 	.word	0x20005898
 80049fc:	0801ab94 	.word	0x0801ab94
 8004a00:	20005940 	.word	0x20005940
 8004a04:	20006940 	.word	0x20006940
 8004a08:	0801aba0 	.word	0x0801aba0
 8004a0c:	0801aba4 	.word	0x0801aba4

08004a10 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d905      	bls.n	8004a40 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e007      	b.n	8004a50 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	6939      	ldr	r1, [r7, #16]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1acb      	subs	r3, r1, r3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	bf28      	it	cs
 8004a5e:	4613      	movcs	r3, r2
 8004a60:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bf28      	it	cs
 8004a6a:	4613      	movcs	r3, r2
 8004a6c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4413      	add	r3, r2
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f013 f901 	bl	8017c82 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d101      	bne.n	8004aae <_WriteBlocking+0x9e>
      WrOff = 0u;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1b5      	bne.n	8004a26 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8004aba:	69bb      	ldr	r3, [r7, #24]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d90e      	bls.n	8004b06 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f013 f8c4 	bl	8017c82 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004b04:	e01a      	b.n	8004b3c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	4413      	add	r3, r2
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f013 f8b3 	bl	8017c82 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6858      	ldr	r0, [r3, #4]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f013 f8a6 	bl	8017c82 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	60da      	str	r2, [r3, #12]
}
 8004b3c:	bf00      	nop
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d808      	bhi.n	8004b72 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e004      	b.n	8004b7c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004b7c:	697b      	ldr	r3, [r7, #20]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004baa:	4413      	add	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d029      	beq.n	8004c0a <SEGGER_RTT_WriteNoLock+0x7e>
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d82e      	bhi.n	8004c18 <SEGGER_RTT_WriteNoLock+0x8c>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <SEGGER_RTT_WriteNoLock+0x38>
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d013      	beq.n	8004bea <SEGGER_RTT_WriteNoLock+0x5e>
 8004bc2:	e029      	b.n	8004c18 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004bc4:	6978      	ldr	r0, [r7, #20]
 8004bc6:	f7ff ffbd 	bl	8004b44 <_GetAvailWriteSpace>
 8004bca:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d202      	bcs.n	8004bda <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004bd8:	e021      	b.n	8004c1e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	69b9      	ldr	r1, [r7, #24]
 8004be2:	6978      	ldr	r0, [r7, #20]
 8004be4:	f7ff ff6e 	bl	8004ac4 <_WriteNoCheck>
    break;
 8004be8:	e019      	b.n	8004c1e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004bea:	6978      	ldr	r0, [r7, #20]
 8004bec:	f7ff ffaa 	bl	8004b44 <_GetAvailWriteSpace>
 8004bf0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bf28      	it	cs
 8004bfa:	4613      	movcs	r3, r2
 8004bfc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	69b9      	ldr	r1, [r7, #24]
 8004c02:	6978      	ldr	r0, [r7, #20]
 8004c04:	f7ff ff5e 	bl	8004ac4 <_WriteNoCheck>
    break;
 8004c08:	e009      	b.n	8004c1e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f7ff fefe 	bl	8004a10 <_WriteBlocking>
 8004c14:	61f8      	str	r0, [r7, #28]
    break;
 8004c16:	e002      	b.n	8004c1e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
    break;
 8004c1c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20005898 	.word	0x20005898

08004c2c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8004c38:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <SEGGER_RTT_Write+0x44>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <SEGGER_RTT_Write+0x18>
 8004c40:	f7ff fe94 	bl	800496c <_DoInit>
  SEGGER_RTT_LOCK();
 8004c44:	f3ef 8311 	mrs	r3, BASEPRI
 8004c48:	f04f 0120 	mov.w	r1, #32
 8004c4c:	f381 8811 	msr	BASEPRI, r1
 8004c50:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff98 	bl	8004b8c <SEGGER_RTT_WriteNoLock>
 8004c5c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8004c64:	693b      	ldr	r3, [r7, #16]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20005898 	.word	0x20005898

08004c74 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8004c82:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8004c8a:	f7ff fe6f 	bl	800496c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8004c8e:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d24c      	bcs.n	8004d34 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8004c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c9e:	f04f 0120 	mov.w	r1, #32
 8004ca2:	f381 8811 	msr	BASEPRI, r1
 8004ca6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d032      	beq.n	8004d14 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8004cae:	4925      	ldr	r1, [pc, #148]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	4413      	add	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	440b      	add	r3, r1
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004cc2:	4920      	ldr	r1, [pc, #128]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	4613      	mov	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004cd8:	491a      	ldr	r1, [pc, #104]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	3320      	adds	r3, #32
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8004cec:	4915      	ldr	r1, [pc, #84]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3328      	adds	r3, #40	; 0x28
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004d00:	4910      	ldr	r1, [pc, #64]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4613      	mov	r3, r2
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4413      	add	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3324      	adds	r3, #36	; 0x24
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8004d14:	490b      	ldr	r1, [pc, #44]	; (8004d44 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	440b      	add	r3, r1
 8004d22:	332c      	adds	r3, #44	; 0x2c
 8004d24:	6a3a      	ldr	r2, [r7, #32]
 8004d26:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e002      	b.n	8004d3a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d38:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004d3a:	697b      	ldr	r3, [r7, #20]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20005898 	.word	0x20005898

08004d48 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
  _DoInit();
 8004d4c:	f7ff fe0e 	bl	800496c <_DoInit>
}
 8004d50:	bf00      	nop
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d80e      	bhi.n	8004d90 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d115      	bne.n	8004dc8 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6918      	ldr	r0, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f7ff ff3f 	bl	8004c2c <SEGGER_RTT_Write>
 8004dae:	4602      	mov	r2, r0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d004      	beq.n	8004dc2 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dbe:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 8004dc0:	e002      	b.n	8004dc8 <_StoreChar+0x74>
      p->Cnt = 0u;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004de2:	2301      	movs	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004dea:	e007      	b.n	8004dfc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004dec:	6a3a      	ldr	r2, [r7, #32]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df4:	623b      	str	r3, [r7, #32]
    Width++;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d2f3      	bcs.n	8004dec <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d901      	bls.n	8004e10 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d125      	bne.n	8004e66 <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d022      	beq.n	8004e66 <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <_PrintUnsigned+0x66>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <_PrintUnsigned+0x66>
        c = '0';
 8004e30:	2330      	movs	r3, #48	; 0x30
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	e001      	b.n	8004e3a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004e36:	2320      	movs	r3, #32
 8004e38:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e3a:	e00b      	b.n	8004e54 <_PrintUnsigned+0x84>
        FieldWidth--;
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8004e42:	7efb      	ldrb	r3, [r7, #27]
 8004e44:	4619      	mov	r1, r3
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff ff84 	bl	8004d54 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	db07      	blt.n	8004e64 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <_PrintUnsigned+0x96>
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d3ec      	bcc.n	8004e3c <_PrintUnsigned+0x6c>
 8004e62:	e000      	b.n	8004e66 <_PrintUnsigned+0x96>
          break;
 8004e64:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db55      	blt.n	8004f1a <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d903      	bls.n	8004e7c <_PrintUnsigned+0xac>
        NumDigits--;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	e009      	b.n	8004e90 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d200      	bcs.n	8004e90 <_PrintUnsigned+0xc0>
          break;
 8004e8e:	e005      	b.n	8004e9c <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004e9a:	e7e8      	b.n	8004e6e <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <_PrintUnsigned+0x154>)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff ff48 	bl	8004d54 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	db08      	blt.n	8004ede <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 8004ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1df      	bne.n	8004e9c <_PrintUnsigned+0xcc>
 8004edc:	e000      	b.n	8004ee0 <_PrintUnsigned+0x110>
        break;
 8004ede:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d017      	beq.n	8004f1a <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d014      	beq.n	8004f1a <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ef0:	e00a      	b.n	8004f08 <_PrintUnsigned+0x138>
          FieldWidth--;
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 8004ef8:	2120      	movs	r1, #32
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ff2a 	bl	8004d54 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	db07      	blt.n	8004f18 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <_PrintUnsigned+0x14a>
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d3ed      	bcc.n	8004ef2 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 8004f16:	e000      	b.n	8004f1a <_PrintUnsigned+0x14a>
            break;
 8004f18:	bf00      	nop
}
 8004f1a:	bf00      	nop
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	0801c514 	.word	0x0801c514

08004f28 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bfb8      	it	lt
 8004f3c:	425b      	neglt	r3, r3
 8004f3e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004f44:	e007      	b.n	8004f56 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f4e:	613b      	str	r3, [r7, #16]
    Width++;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3301      	adds	r3, #1
 8004f54:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	daf3      	bge.n	8004f46 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d901      	bls.n	8004f6a <_PrintInt+0x42>
    Width = NumDigits;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <_PrintInt+0x5e>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	db04      	blt.n	8004f80 <_PrintInt+0x58>
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <_PrintInt+0x5e>
    FieldWidth--;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <_PrintInt+0x6e>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01c      	beq.n	8004fd0 <_PrintInt+0xa8>
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d117      	bne.n	8004fd0 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d014      	beq.n	8004fd0 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fa6:	e00a      	b.n	8004fbe <_PrintInt+0x96>
        FieldWidth--;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004fae:	2120      	movs	r1, #32
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff fecf 	bl	8004d54 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	db07      	blt.n	8004fce <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <_PrintInt+0xa8>
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d3ed      	bcc.n	8004fa8 <_PrintInt+0x80>
 8004fcc:	e000      	b.n	8004fd0 <_PrintInt+0xa8>
          break;
 8004fce:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db4a      	blt.n	800506e <_PrintInt+0x146>
    if (v < 0) {
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da07      	bge.n	8004fee <_PrintInt+0xc6>
      v = -v;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 8004fe4:	212d      	movs	r1, #45	; 0x2d
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff feb4 	bl	8004d54 <_StoreChar>
 8004fec:	e008      	b.n	8005000 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 8004ff8:	212b      	movs	r1, #43	; 0x2b
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff feaa 	bl	8004d54 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db32      	blt.n	800506e <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01f      	beq.n	8005052 <_PrintInt+0x12a>
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d11a      	bne.n	8005052 <_PrintInt+0x12a>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d117      	bne.n	8005052 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d014      	beq.n	8005052 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005028:	e00a      	b.n	8005040 <_PrintInt+0x118>
            FieldWidth--;
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	3b01      	subs	r3, #1
 800502e:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8005030:	2130      	movs	r1, #48	; 0x30
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff fe8e 	bl	8004d54 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	db07      	blt.n	8005050 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <_PrintInt+0x12a>
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3ed      	bcc.n	800502a <_PrintInt+0x102>
 800504e:	e000      	b.n	8005052 <_PrintInt+0x12a>
              break;
 8005050:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b00      	cmp	r3, #0
 8005058:	db09      	blt.n	800506e <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	9301      	str	r3, [sp, #4]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff feb1 	bl	8004dd0 <_PrintUnsigned>
      }
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8005078:	b580      	push	{r7, lr}
 800507a:	b0d2      	sub	sp, #328	; 0x148
 800507c:	af02      	add	r7, sp, #8
 800507e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005082:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005086:	6018      	str	r0, [r3, #0]
 8005088:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800508c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005090:	6019      	str	r1, [r3, #0]
 8005092:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005096:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800509a:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800509c:	f107 0310 	add.w	r3, r7, #16
 80050a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 80050a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 80050b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 80050c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 80050d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80050da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80050de:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80050e2:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	3201      	adds	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 80050ec:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 825a 	beq.w	80055aa <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 80050f6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80050fa:	2b25      	cmp	r3, #37	; 0x25
 80050fc:	f040 8247 	bne.w	800558e <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005100:	2300      	movs	r3, #0
 8005102:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 8005106:	2301      	movs	r3, #1
 8005108:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 800510c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005110:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 800511c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005120:	3b23      	subs	r3, #35	; 0x23
 8005122:	2b0d      	cmp	r3, #13
 8005124:	d866      	bhi.n	80051f4 <SEGGER_RTT_vprintf+0x17c>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <SEGGER_RTT_vprintf+0xb4>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	080051d1 	.word	0x080051d1
 8005130:	080051f5 	.word	0x080051f5
 8005134:	080051f5 	.word	0x080051f5
 8005138:	080051f5 	.word	0x080051f5
 800513c:	080051f5 	.word	0x080051f5
 8005140:	080051f5 	.word	0x080051f5
 8005144:	080051f5 	.word	0x080051f5
 8005148:	080051f5 	.word	0x080051f5
 800514c:	080051ad 	.word	0x080051ad
 8005150:	080051f5 	.word	0x080051f5
 8005154:	08005165 	.word	0x08005165
 8005158:	080051f5 	.word	0x080051f5
 800515c:	080051f5 	.word	0x080051f5
 8005160:	08005189 	.word	0x08005189
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005164:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005170:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005174:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005178:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800517c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005180:	6812      	ldr	r2, [r2, #0]
 8005182:	3201      	adds	r2, #1
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	e039      	b.n	80051fc <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005188:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005194:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005198:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800519c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80051a0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80051a4:	6812      	ldr	r2, [r2, #0]
 80051a6:	3201      	adds	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	e027      	b.n	80051fc <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80051ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051b0:	f043 0304 	orr.w	r3, r3, #4
 80051b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80051b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80051bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051c0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80051c4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	3201      	adds	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	e015      	b.n	80051fc <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80051d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051d4:	f043 0308 	orr.w	r3, r3, #8
 80051d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80051dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80051e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80051e4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80051e8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	3201      	adds	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e003      	b.n	80051fc <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 80051f4:	2300      	movs	r3, #0
 80051f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80051fa:	bf00      	nop
        }
      } while (v);
 80051fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005200:	2b00      	cmp	r3, #0
 8005202:	d183      	bne.n	800510c <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 800520a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800520e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 800521a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800521e:	2b2f      	cmp	r3, #47	; 0x2f
 8005220:	d91c      	bls.n	800525c <SEGGER_RTT_vprintf+0x1e4>
 8005222:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005226:	2b39      	cmp	r3, #57	; 0x39
 8005228:	d818      	bhi.n	800525c <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 800522a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800522e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005232:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005236:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	3201      	adds	r2, #1
 800523e:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8005240:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	461a      	mov	r2, r3
 800524e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005252:	4413      	add	r3, r2
 8005254:	3b30      	subs	r3, #48	; 0x30
 8005256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 800525a:	e7d6      	b.n	800520a <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800525c:	2300      	movs	r3, #0
 800525e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 8005262:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005266:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 8005272:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005276:	2b2e      	cmp	r3, #46	; 0x2e
 8005278:	d133      	bne.n	80052e2 <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 800527a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800527e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005282:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005286:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	3201      	adds	r2, #1
 800528e:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 8005290:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005294:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 80052a0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80052a4:	2b2f      	cmp	r3, #47	; 0x2f
 80052a6:	d91c      	bls.n	80052e2 <SEGGER_RTT_vprintf+0x26a>
 80052a8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80052ac:	2b39      	cmp	r3, #57	; 0x39
 80052ae:	d818      	bhi.n	80052e2 <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 80052b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052b4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80052b8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80052bc:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	3201      	adds	r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80052c6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80052ca:	4613      	mov	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	4413      	add	r3, r2
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	461a      	mov	r2, r3
 80052d4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80052d8:	4413      	add	r3, r2
 80052da:	3b30      	subs	r3, #48	; 0x30
 80052dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 80052e0:	e7d6      	b.n	8005290 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80052e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80052e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 80052f2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80052f6:	2b6c      	cmp	r3, #108	; 0x6c
 80052f8:	d003      	beq.n	8005302 <SEGGER_RTT_vprintf+0x28a>
 80052fa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80052fe:	2b68      	cmp	r3, #104	; 0x68
 8005300:	d113      	bne.n	800532a <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 8005302:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005306:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800530a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800530e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	3201      	adds	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 8005318:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800531c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 8005328:	e7e3      	b.n	80052f2 <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800532a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800532e:	2b25      	cmp	r3, #37	; 0x25
 8005330:	f000 8119 	beq.w	8005566 <SEGGER_RTT_vprintf+0x4ee>
 8005334:	2b25      	cmp	r3, #37	; 0x25
 8005336:	f2c0 811d 	blt.w	8005574 <SEGGER_RTT_vprintf+0x4fc>
 800533a:	2b78      	cmp	r3, #120	; 0x78
 800533c:	f300 811a 	bgt.w	8005574 <SEGGER_RTT_vprintf+0x4fc>
 8005340:	2b58      	cmp	r3, #88	; 0x58
 8005342:	f2c0 8117 	blt.w	8005574 <SEGGER_RTT_vprintf+0x4fc>
 8005346:	3b58      	subs	r3, #88	; 0x58
 8005348:	2b20      	cmp	r3, #32
 800534a:	f200 8113 	bhi.w	8005574 <SEGGER_RTT_vprintf+0x4fc>
 800534e:	a201      	add	r2, pc, #4	; (adr r2, 8005354 <SEGGER_RTT_vprintf+0x2dc>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005493 	.word	0x08005493
 8005358:	08005575 	.word	0x08005575
 800535c:	08005575 	.word	0x08005575
 8005360:	08005575 	.word	0x08005575
 8005364:	08005575 	.word	0x08005575
 8005368:	08005575 	.word	0x08005575
 800536c:	08005575 	.word	0x08005575
 8005370:	08005575 	.word	0x08005575
 8005374:	08005575 	.word	0x08005575
 8005378:	08005575 	.word	0x08005575
 800537c:	08005575 	.word	0x08005575
 8005380:	080053d9 	.word	0x080053d9
 8005384:	08005413 	.word	0x08005413
 8005388:	08005575 	.word	0x08005575
 800538c:	08005575 	.word	0x08005575
 8005390:	08005575 	.word	0x08005575
 8005394:	08005575 	.word	0x08005575
 8005398:	08005575 	.word	0x08005575
 800539c:	08005575 	.word	0x08005575
 80053a0:	08005575 	.word	0x08005575
 80053a4:	08005575 	.word	0x08005575
 80053a8:	08005575 	.word	0x08005575
 80053ac:	08005575 	.word	0x08005575
 80053b0:	08005575 	.word	0x08005575
 80053b4:	0800552d 	.word	0x0800552d
 80053b8:	08005575 	.word	0x08005575
 80053bc:	08005575 	.word	0x08005575
 80053c0:	080054d3 	.word	0x080054d3
 80053c4:	08005575 	.word	0x08005575
 80053c8:	08005453 	.word	0x08005453
 80053cc:	08005575 	.word	0x08005575
 80053d0:	08005575 	.word	0x08005575
 80053d4:	08005493 	.word	0x08005493
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80053d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80053dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	1d19      	adds	r1, r3, #4
 80053e6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80053ea:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	6011      	str	r1, [r2, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 80053f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80053fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 8005400:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8005404:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fca2 	bl	8004d54 <_StoreChar>
        break;
 8005410:	e0b1      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005412:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005416:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1d19      	adds	r1, r3, #4
 8005420:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005424:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	6011      	str	r1, [r2, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005432:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005436:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005446:	220a      	movs	r2, #10
 8005448:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800544c:	f7ff fd6c 	bl	8004f28 <_PrintInt>
        break;
 8005450:	e091      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 8005452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005456:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	1d19      	adds	r1, r3, #4
 8005460:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005464:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005468:	6812      	ldr	r2, [r2, #0]
 800546a:	6011      	str	r1, [r2, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005472:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005476:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800547a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800548a:	220a      	movs	r2, #10
 800548c:	f7ff fca0 	bl	8004dd0 <_PrintUnsigned>
        break;
 8005490:	e071      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005492:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005496:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1d19      	adds	r1, r3, #4
 80054a0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80054a4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	6011      	str	r1, [r2, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80054b2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 80054b6:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80054ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ca:	2210      	movs	r2, #16
 80054cc:	f7ff fc80 	bl	8004dd0 <_PrintUnsigned>
        break;
 80054d0:	e051      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 80054d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80054d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	1d19      	adds	r1, r3, #4
 80054e0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80054e4:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	6011      	str	r1, [r2, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 80054f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 80054fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005500:	3301      	adds	r3, #1
 8005502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 8005506:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00c      	beq.n	8005528 <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 800550e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005516:	4611      	mov	r1, r2
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fc1b 	bl	8004d54 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800551e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005522:	2b00      	cmp	r3, #0
 8005524:	dae5      	bge.n	80054f2 <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 8005526:	e026      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
              break;
 8005528:	bf00      	nop
        break;
 800552a:	e024      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 800552c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005530:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	1d19      	adds	r1, r3, #4
 800553a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800553e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	6011      	str	r1, [r2, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800554c:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005550:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005554:	2300      	movs	r3, #0
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	2308      	movs	r3, #8
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2308      	movs	r3, #8
 800555e:	2210      	movs	r2, #16
 8005560:	f7ff fc36 	bl	8004dd0 <_PrintUnsigned>
        break;
 8005564:	e007      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005566:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800556a:	2125      	movs	r1, #37	; 0x25
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fbf1 	bl	8004d54 <_StoreChar>
        break;
 8005572:	e000      	b.n	8005576 <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 8005574:	bf00      	nop
      }
      sFormat++;
 8005576:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800557a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800557e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8005582:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	3201      	adds	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e007      	b.n	800559e <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 800558e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8005592:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fbdb 	bl	8004d54 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800559e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f6bf ad8f 	bge.w	80050c6 <SEGGER_RTT_vprintf+0x4e>
 80055a8:	e000      	b.n	80055ac <SEGGER_RTT_vprintf+0x534>
      break;
 80055aa:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 80055ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dd15      	ble.n	80055e0 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 80055b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 80055bc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80055c0:	f107 0110 	add.w	r1, r7, #16
 80055c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055c8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	f7ff fb2d 	bl	8004c2c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 80055d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80055da:	4413      	add	r3, r2
 80055dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 80055e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop

080055f0 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 80055f0:	b40e      	push	{r1, r2, r3}
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 80055fa:	f107 0320 	add.w	r3, r7, #32
 80055fe:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8005600:	f107 0308 	add.w	r3, r7, #8
 8005604:	461a      	mov	r2, r3
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fd35 	bl	8005078 <SEGGER_RTT_vprintf>
 800560e:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 8005610:	68fb      	ldr	r3, [r7, #12]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800561c:	b003      	add	sp, #12
 800561e:	4770      	bx	lr

08005620 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005624:	f3bf 8f4f 	dsb	sy
}
 8005628:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <__NVIC_SystemReset+0x24>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005632:	4904      	ldr	r1, [pc, #16]	; (8005644 <__NVIC_SystemReset+0x24>)
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <__NVIC_SystemReset+0x28>)
 8005636:	4313      	orrs	r3, r2
 8005638:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800563a:	f3bf 8f4f 	dsb	sy
}
 800563e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <__NVIC_SystemReset+0x20>
 8005644:	e000ed00 	.word	0xe000ed00
 8005648:	05fa0004 	.word	0x05fa0004

0800564c <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800566a:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	68b8      	ldr	r0, [r7, #8]
 8005670:	f000 f810 	bl	8005694 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8005674:	f7fd fcdc 	bl	8003030 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <assertFail+0x44>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8005684:	f7ff ffcc 	bl	8005620 <__NVIC_SystemReset>
  }
}
 8005688:	bf00      	nop
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	e000edf0 	.word	0xe000edf0

08005694 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <storeAssertFileData+0x38>)
 80056a0:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <storeAssertFileData+0x3c>)
 80056a2:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 80056a4:	4b09      	ldr	r3, [pc, #36]	; (80056cc <storeAssertFileData+0x38>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <storeAssertFileData+0x38>)
 80056ac:	791a      	ldrb	r2, [r3, #4]
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <storeAssertFileData+0x40>)
 80056b0:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 80056b2:	4a06      	ldr	r2, [pc, #24]	; (80056cc <storeAssertFileData+0x38>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <storeAssertFileData+0x38>)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	60d3      	str	r3, [r2, #12]
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	200040bc 	.word	0x200040bc
 80056d0:	2f8a001f 	.word	0x2f8a001f
 80056d4:	20006960 	.word	0x20006960

080056d8 <consoleInit>:

  return true;
}

void consoleInit()
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  if (isInit)
 80056dc:	4b12      	ldr	r3, [pc, #72]	; (8005728 <consoleInit+0x50>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11f      	bne.n	8005724 <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <consoleInit+0x54>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <consoleInit+0x54>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 80056f0:	2203      	movs	r2, #3
 80056f2:	2100      	movs	r1, #0
 80056f4:	2001      	movs	r0, #1
 80056f6:	f00d fd11 	bl	801311c <xQueueGenericCreate>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4a0c      	ldr	r2, [pc, #48]	; (8005730 <consoleInit+0x58>)
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <consoleInit+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d006      	beq.n	8005716 <consoleInit+0x3e>
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <consoleInit+0x58>)
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	2300      	movs	r3, #0
 800570e:	2200      	movs	r2, #0
 8005710:	2100      	movs	r1, #0
 8005712:	f00d fdad 	bl	8013270 <xQueueGenericSend>
  messageSendingIsPending = false;
 8005716:	4b07      	ldr	r3, [pc, #28]	; (8005734 <consoleInit+0x5c>)
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]

  isInit = true;
 800571c:	4b02      	ldr	r3, [pc, #8]	; (8005728 <consoleInit+0x50>)
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e000      	b.n	8005726 <consoleInit+0x4e>
    return;
 8005724:	bf00      	nop
}
 8005726:	bd80      	pop	{r7, pc}
 8005728:	2000698c 	.word	0x2000698c
 800572c:	20006964 	.word	0x20006964
 8005730:	20006988 	.word	0x20006988
 8005734:	20006984 	.word	0x20006984

08005738 <crc32ContextInit>:
static bool crcTableInitialized = false;

// *** Public API ***

void crc32ContextInit(crc32Context_t *context)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  // Lazy static ...
  if (crcTableInitialized == false) {
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <crc32ContextInit+0x34>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <crc32ContextInit+0x22>
    // initialize crcTable
    crcTableInit(crcTable);
 800574e:	4808      	ldr	r0, [pc, #32]	; (8005770 <crc32ContextInit+0x38>)
 8005750:	f000 f8af 	bl	80058b2 <crcTableInit>
    crcTableInitialized = true;
 8005754:	4b05      	ldr	r3, [pc, #20]	; (800576c <crc32ContextInit+0x34>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
  }

  context->remainder = INITIAL_REMAINDER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005760:	601a      	str	r2, [r3, #0]
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	2000698d 	.word	0x2000698d
 8005770:	20002984 	.word	0x20002984

08005774 <crc32Update>:

void crc32Update(crc32Context_t *context, const void* data, size_t size)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  context->remainder = crcByByte(data, size, context->remainder, crcTable);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <crc32Update+0x28>)
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	68b8      	ldr	r0, [r7, #8]
 800578a:	f000 f869 	bl	8005860 <crcByByte>
 800578e:	4602      	mov	r2, r0
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20002984 	.word	0x20002984

080057a0 <crc32Out>:

uint32_t crc32Out(const crc32Context_t *context)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  return context->remainder ^ FINAL_XOR_VALUE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	43db      	mvns	r3, r3
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <crc32CalculateBuffer>:

uint32_t crc32CalculateBuffer(const void* buffer, size_t size)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  crc32Context_t ctx;

  crc32ContextInit(&ctx);
 80057c4:	f107 030c 	add.w	r3, r7, #12
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ffb5 	bl	8005738 <crc32ContextInit>
  crc32Update(&ctx, buffer, size);
 80057ce:	f107 030c 	add.w	r3, r7, #12
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff ffcc 	bl	8005774 <crc32Update>
  return crc32Out(&ctx);
 80057dc:	f107 030c 	add.w	r3, r7, #12
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff ffdd 	bl	80057a0 <crc32Out>
 80057e6:	4603      	mov	r3, r0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <crcByBit>:
// *** Core calculation from Bosh ***

/* bit-wise crc calculation */
static uint32_t crcByBit(const uint8_t* message, uint32_t bytesToProcess,
             uint32_t remainder)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e021      	b.n	8005846 <crcByBit+0x56>
    {
      remainder ^= *(message+byte);
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	4413      	add	r3, r2
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4053      	eors	r3, r2
 8005810:	607b      	str	r3, [r7, #4]

      for(uint8_t bit = 8; bit > 0; --bit)
 8005812:	2308      	movs	r3, #8
 8005814:	74fb      	strb	r3, [r7, #19]
 8005816:	e010      	b.n	800583a <crcByBit+0x4a>
        {
          /* reflect is realized by mirroring algorithm
           * LSB is first to be processed */
          if (remainder & 1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <crcByBit+0x3e>
            remainder = (remainder >> 1) ^ POLYNOMIAL;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	085a      	lsrs	r2, r3, #1
 8005826:	4b0d      	ldr	r3, [pc, #52]	; (800585c <crcByBit+0x6c>)
 8005828:	4053      	eors	r3, r2
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	e002      	b.n	8005834 <crcByBit+0x44>
          else
            remainder = (remainder >> 1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	607b      	str	r3, [r7, #4]
      for(uint8_t bit = 8; bit > 0; --bit)
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	3b01      	subs	r3, #1
 8005838:	74fb      	strb	r3, [r7, #19]
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1eb      	bne.n	8005818 <crcByBit+0x28>
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	3301      	adds	r3, #1
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	d3d9      	bcc.n	8005802 <crcByBit+0x12>
        }
    }
  return remainder;
 800584e:	687b      	ldr	r3, [r7, #4]
}
 8005850:	4618      	mov	r0, r3
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	edb88320 	.word	0xedb88320

08005860 <crcByByte>:
/* byte-wise crc calculation, requires an initialized crcTable
 * this is factor 8 faster and should be used if multiple crcs
 * have to be calculated */
static uint32_t crcByByte(const uint8_t* message, uint32_t bytesToProcess,
              uint32_t remainder, uint32_t* crcTable)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  uint8_t data;
  for (int byte = 0; byte < bytesToProcess; ++byte)
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	e013      	b.n	800589c <crcByByte+0x3c>
    {
      data = (*(message+byte) ^ remainder);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	4053      	eors	r3, r2
 8005882:	74fb      	strb	r3, [r7, #19]
      remainder = *(crcTable+data) ^ (remainder >> 8);
 8005884:	7cfb      	ldrb	r3, [r7, #19]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	4413      	add	r3, r2
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	4053      	eors	r3, r2
 8005894:	607b      	str	r3, [r7, #4]
  for (int byte = 0; byte < bytesToProcess; ++byte)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	3301      	adds	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d8e7      	bhi.n	8005874 <crcByByte+0x14>
    }
  return remainder;
 80058a4:	687b      	ldr	r3, [r7, #4]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <crcTableInit>:

/* creates a lookup-table which is necessary for the crcByByte function */
static void crcTableInit(uint32_t* crcTable)
{
 80058b2:	b590      	push	{r4, r7, lr}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint8_t dividend = ~0;
 80058ba:	23ff      	movs	r3, #255	; 0xff
 80058bc:	73fb      	strb	r3, [r7, #15]
  /* fill the table by bit-wise calculations of checksums
   * for each possible dividend */
  do {
      *(crcTable+dividend) = crcByBit(&dividend, 1, 0);
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	18d4      	adds	r4, r2, r3
 80058c6:	f107 030f 	add.w	r3, r7, #15
 80058ca:	2200      	movs	r2, #0
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ff8e 	bl	80057f0 <crcByBit>
 80058d4:	4603      	mov	r3, r0
 80058d6:	6023      	str	r3, [r4, #0]
  } while(dividend-- > 0);
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	73fa      	strb	r2, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1ec      	bne.n	80058be <crcTableInit+0xc>
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd90      	pop	{r4, r7, pc}

080058ee <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af02      	add	r7, sp, #8
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
 80058f4:	f7ff fa28 	bl	8004d48 <SEGGER_RTT_Init>
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 80058f8:	2301      	movs	r3, #1
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	2200      	movs	r2, #0
 8005900:	2100      	movs	r1, #0
 8005902:	2000      	movs	r0, #0
 8005904:	f7ff f9b6 	bl	8004c74 <SEGGER_RTT_ConfigUpBuffer>
#endif
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <uartInit>:
    return len;
}
*/


void uartInit(void) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af02      	add	r7, sp, #8

#ifdef CONFIG_DEBUG_PRINT_ON_UART
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 8005916:	2340      	movs	r3, #64	; 0x40
 8005918:	4618      	mov	r0, r3
 800591a:	2301      	movs	r3, #1
 800591c:	4619      	mov	r1, r3
 800591e:	2300      	movs	r3, #0
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <uartInit+0x2c>)
 8005924:	4a06      	ldr	r2, [pc, #24]	; (8005940 <uartInit+0x30>)
 8005926:	f00d fb8d 	bl	8013044 <xQueueGenericCreateStatic>
 800592a:	4603      	mov	r3, r0
 800592c:	4a05      	ldr	r2, [pc, #20]	; (8005944 <uartInit+0x34>)
 800592e:	6013      	str	r3, [r2, #0]
	isInit = true;
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <uartInit+0x38>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

}
 8005936:	bf00      	nop
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20002dc4 	.word	0x20002dc4
 8005940:	20002d84 	.word	0x20002d84
 8005944:	20006990 	.word	0x20006990
 8005948:	20006a3d 	.word	0x20006a3d

0800594c <uartDmaInit>:



void uartDmaInit(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af02      	add	r7, sp, #8


#ifdef ENABLE_UART_DMA

	  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
	  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8005952:	2303      	movs	r3, #3
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	4b21      	ldr	r3, [pc, #132]	; (80059dc <uartDmaInit+0x90>)
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	2001      	movs	r0, #1
 800595e:	f00d fb71 	bl	8013044 <xQueueGenericCreateStatic>
 8005962:	4603      	mov	r3, r0
 8005964:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <uartDmaInit+0x94>)
 8005966:	6013      	str	r3, [r2, #0]
	  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8005968:	2303      	movs	r3, #3
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <uartDmaInit+0x98>)
 800596e:	2200      	movs	r2, #0
 8005970:	2100      	movs	r1, #0
 8005972:	2001      	movs	r0, #1
 8005974:	f00d fb66 	bl	8013044 <xQueueGenericCreateStatic>
 8005978:	4603      	mov	r3, r0
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <uartDmaInit+0x9c>)
 800597c:	6013      	str	r3, [r2, #0]
	  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <uartDmaInit+0x9c>)
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	2200      	movs	r2, #0
 8005986:	2100      	movs	r1, #0
 8005988:	f00d fc72 	bl	8013270 <xQueueGenericSend>
	  xSemaphoreGive(waitUntilSendDone);
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <uartDmaInit+0x94>)
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	2300      	movs	r3, #0
 8005992:	2200      	movs	r2, #0
 8005994:	2100      	movs	r1, #0
 8005996:	f00d fc6b 	bl	8013270 <xQueueGenericSend>

	  __HAL_RCC_DMA2_CLK_ENABLE();
 800599a:	2300      	movs	r3, #0
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <uartDmaInit+0xa0>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <uartDmaInit+0xa0>)
 80059a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059a8:	6313      	str	r3, [r2, #48]	; 0x30
 80059aa:	4b10      	ldr	r3, [pc, #64]	; (80059ec <uartDmaInit+0xa0>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b2:	607b      	str	r3, [r7, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
	  HAL_DMA_Init(&hdma_usart6_tx);
 80059b6:	480e      	ldr	r0, [pc, #56]	; (80059f0 <uartDmaInit+0xa4>)
 80059b8:	f004 feac 	bl	800a714 <HAL_DMA_Init>
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80059bc:	2200      	movs	r2, #0
 80059be:	2105      	movs	r1, #5
 80059c0:	2045      	movs	r0, #69	; 0x45
 80059c2:	f004 fe70 	bl	800a6a6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80059c6:	2045      	movs	r0, #69	; 0x45
 80059c8:	f004 fe89 	bl	800a6de <HAL_NVIC_EnableIRQ>

	  isUartDmaInitialized = true;
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <uartDmaInit+0xa8>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
#endif


}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	200069ec 	.word	0x200069ec
 80059e0:	200069e8 	.word	0x200069e8
 80059e4:	20006998 	.word	0x20006998
 80059e8:	20006994 	.word	0x20006994
 80059ec:	40023800 	.word	0x40023800
 80059f0:	20007eb8 	.word	0x20007eb8
 80059f4:	20006a3c 	.word	0x20006a3c

080059f8 <eventTrigger>:
    }
    return 0;
}

void eventTrigger(const eventtrigger *event)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e00e      	b.n	8005a24 <eventTrigger+0x2c>
        if (callbacks[i]) {
 8005a06:	4a0b      	ldr	r2, [pc, #44]	; (8005a34 <eventTrigger+0x3c>)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <eventTrigger+0x26>
            callbacks[i](event);
 8005a12:	4a08      	ldr	r2, [pc, #32]	; (8005a34 <eventTrigger+0x3c>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	4798      	blx	r3
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	dded      	ble.n	8005a06 <eventTrigger+0xe>
        }
    }
}
 8005a2a:	bf00      	nop
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20006a40 	.word	0x20006a40

08005a38 <logInit>:
static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType);

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(logTask, LOG_TASK_STACKSIZE);

void logInit(void)
{
 8005a38:	b590      	push	{r4, r7, lr}
 8005a3a:	b08b      	sub	sp, #44	; 0x2c
 8005a3c:	af04      	add	r7, sp, #16
  int i;
  const char* group = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	607b      	str	r3, [r7, #4]
  int groupLength = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]

  if(isInit)
 8005a46:	4b80      	ldr	r3, [pc, #512]	; (8005c48 <logInit+0x210>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f040 80f7 	bne.w	8005c3e <logInit+0x206>
    return;

  logs = &_log_start;
 8005a50:	4b7e      	ldr	r3, [pc, #504]	; (8005c4c <logInit+0x214>)
 8005a52:	4a7f      	ldr	r2, [pc, #508]	; (8005c50 <logInit+0x218>)
 8005a54:	601a      	str	r2, [r3, #0]
  logsLen = &_log_stop - &_log_start;
 8005a56:	4a7f      	ldr	r2, [pc, #508]	; (8005c54 <logInit+0x21c>)
 8005a58:	4b7d      	ldr	r3, [pc, #500]	; (8005c50 <logInit+0x218>)
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	109b      	asrs	r3, r3, #2
 8005a5e:	4a7e      	ldr	r2, [pc, #504]	; (8005c58 <logInit+0x220>)
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	4b7d      	ldr	r3, [pc, #500]	; (8005c5c <logInit+0x224>)
 8005a68:	601a      	str	r2, [r3, #0]

  // Calculate a hash of the toc by chaining description of each elements
  // Using the CRTP packet as temporary buffer
  logsCrc = 0;
 8005a6a:	4b7d      	ldr	r3, [pc, #500]	; (8005c60 <logInit+0x228>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<logsLen; i++)
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e092      	b.n	8005b9c <logInit+0x164>
  {
    int len = 5;
 8005a76:	2305      	movs	r3, #5
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	4b79      	ldr	r3, [pc, #484]	; (8005c60 <logInit+0x228>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[0], &logsCrc, 4);
 8005a7e:	4a79      	ldr	r2, [pc, #484]	; (8005c64 <logInit+0x22c>)
 8005a80:	f8c2 3002 	str.w	r3, [r2, #2]
    p.data[4] = logs[i].type;
 8005a84:	4b71      	ldr	r3, [pc, #452]	; (8005c4c <logInit+0x214>)
 8005a86:	6819      	ldr	r1, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <logInit+0x22c>)
 8005a98:	719a      	strb	r2, [r3, #6]
    if (logs[i].type & LOG_GROUP) {
 8005a9a:	4b6c      	ldr	r3, [pc, #432]	; (8005c4c <logInit+0x214>)
 8005a9c:	6819      	ldr	r1, [r3, #0]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b25b      	sxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da1c      	bge.n	8005aec <logInit+0xb4>
      if (logs[i].type & LOG_START) {
 8005ab2:	4b66      	ldr	r3, [pc, #408]	; (8005c4c <logInit+0x214>)
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d026      	beq.n	8005b1a <logInit+0xe2>
        group = logs[i].name;
 8005acc:	4b5f      	ldr	r3, [pc, #380]	; (8005c4c <logInit+0x214>)
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	607b      	str	r3, [r7, #4]
        groupLength = strlen(group);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7fa fbd5 	bl	8000290 <strlen>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	e016      	b.n	8005b1a <logInit+0xe2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 3 + strlen(logs[i].name) + groupLength + 2
      if (strlen(logs[i].name) + groupLength + 2 > 26) {
 8005aec:	4b57      	ldr	r3, [pc, #348]	; (8005c4c <logInit+0x214>)
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4613      	mov	r3, r2
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fa fbc6 	bl	8000290 <strlen>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	3302      	adds	r3, #2
 8005b0c:	2b1a      	cmp	r3, #26
 8005b0e:	d904      	bls.n	8005b1a <logInit+0xe2>
        LOG_ERROR("'%s.%s' too long\n", group, logs[i].name);
        ASSERT_FAILED();
 8005b10:	22d1      	movs	r2, #209	; 0xd1
 8005b12:	4955      	ldr	r1, [pc, #340]	; (8005c68 <logInit+0x230>)
 8005b14:	4855      	ldr	r0, [pc, #340]	; (8005c6c <logInit+0x234>)
 8005b16:	f7ff fd99 	bl	800564c <assertFail>
      }
    }
    if (logs[i].name) {
 8005b1a:	4b4c      	ldr	r3, [pc, #304]	; (8005c4c <logInit+0x214>)
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02a      	beq.n	8005b86 <logInit+0x14e>
      memcpy(&p.data[5], logs[i].name, strlen(logs[i].name));
 8005b30:	4b46      	ldr	r3, [pc, #280]	; (8005c4c <logInit+0x214>)
 8005b32:	6819      	ldr	r1, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	685c      	ldr	r4, [r3, #4]
 8005b42:	4b42      	ldr	r3, [pc, #264]	; (8005c4c <logInit+0x214>)
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fa fb9b 	bl	8000290 <strlen>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4843      	ldr	r0, [pc, #268]	; (8005c70 <logInit+0x238>)
 8005b62:	f012 f88e 	bl	8017c82 <memcpy>
      len += strlen(logs[i].name);
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <logInit+0x214>)
 8005b68:	6819      	ldr	r1, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fa fb89 	bl	8000290 <strlen>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4413      	add	r3, r2
 8005b84:	60bb      	str	r3, [r7, #8]
    }
    logsCrc = crc32CalculateBuffer(p.data, len);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	483a      	ldr	r0, [pc, #232]	; (8005c74 <logInit+0x23c>)
 8005b8c:	f7ff fe15 	bl	80057ba <crc32CalculateBuffer>
 8005b90:	4603      	mov	r3, r0
 8005b92:	4a33      	ldr	r2, [pc, #204]	; (8005c60 <logInit+0x228>)
 8005b94:	6013      	str	r3, [r2, #0]
  for (int i=0; i<logsLen; i++)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	4b2f      	ldr	r3, [pc, #188]	; (8005c5c <logInit+0x224>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	f6ff af67 	blt.w	8005a76 <logInit+0x3e>
  }

  // Big lock that protects the log datastructures
  logLock = xSemaphoreCreateMutexStatic(&logLockBuffer);
 8005ba8:	4933      	ldr	r1, [pc, #204]	; (8005c78 <logInit+0x240>)
 8005baa:	2001      	movs	r0, #1
 8005bac:	f00d fb45 	bl	801323a <xQueueCreateMutexStatic>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4a32      	ldr	r2, [pc, #200]	; (8005c7c <logInit+0x244>)
 8005bb4:	6013      	str	r3, [r2, #0]

  for (i=0; i<logsLen; i++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e014      	b.n	8005be6 <logInit+0x1ae>
  {
    if(!(logs[i].type & LOG_GROUP))
 8005bbc:	4b23      	ldr	r3, [pc, #140]	; (8005c4c <logInit+0x214>)
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	b25b      	sxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	db05      	blt.n	8005be0 <logInit+0x1a8>
      logsCount++;
 8005bd4:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <logInit+0x248>)
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <logInit+0x248>)
 8005bde:	801a      	strh	r2, [r3, #0]
  for (i=0; i<logsLen; i++)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	3301      	adds	r3, #1
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <logInit+0x224>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	dbe5      	blt.n	8005bbc <logInit+0x184>
  }

  //Manually free all log blocks
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	e00c      	b.n	8005c10 <logInit+0x1d8>
    logBlocks[i].id = BLOCK_ID_FREE;
 8005bf6:	4923      	ldr	r1, [pc, #140]	; (8005c84 <logInit+0x24c>)
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c08:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	ddef      	ble.n	8005bf6 <logInit+0x1be>

  //Init data structures and set the log subsystem in a known state
  logReset();
 8005c16:	f001 f9fd 	bl	8007014 <logReset>

  //Start the log task
  STATIC_MEM_TASK_CREATE(logTask, logTask, LOG_TASK_NAME, NULL, LOG_TASK_PRI);
 8005c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b19      	ldr	r3, [pc, #100]	; (8005c88 <logInit+0x250>)
 8005c22:	9302      	str	r3, [sp, #8]
 8005c24:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <logInit+0x254>)
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4918      	ldr	r1, [pc, #96]	; (8005c90 <logInit+0x258>)
 8005c30:	4818      	ldr	r0, [pc, #96]	; (8005c94 <logInit+0x25c>)
 8005c32:	f00e f83d 	bl	8013cb0 <xTaskCreateStatic>

  isInit = true;
 8005c36:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <logInit+0x210>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e000      	b.n	8005c40 <logInit+0x208>
    return;
 8005c3e:	bf00      	nop
}
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd90      	pop	{r4, r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20006ac8 	.word	0x20006ac8
 8005c4c:	20006a98 	.word	0x20006a98
 8005c50:	08019b70 	.word	0x08019b70
 8005c54:	08019d14 	.word	0x08019d14
 8005c58:	aaaaaaab 	.word	0xaaaaaaab
 8005c5c:	20006a9c 	.word	0x20006a9c
 8005c60:	20006aa0 	.word	0x20006aa0
 8005c64:	20006aa8 	.word	0x20006aa8
 8005c68:	0801abac 	.word	0x0801abac
 8005c6c:	0801abc4 	.word	0x0801abc4
 8005c70:	20006aaf 	.word	0x20006aaf
 8005c74:	20006aaa 	.word	0x20006aaa
 8005c78:	20006a48 	.word	0x20006a48
 8005c7c:	20006a44 	.word	0x20006a44
 8005c80:	20006aa4 	.word	0x20006aa4
 8005c84:	20003614 	.word	0x20003614
 8005c88:	20003dd4 	.word	0x20003dd4
 8005c8c:	200039d4 	.word	0x200039d4
 8005c90:	0801abc8 	.word	0x0801abc8
 8005c94:	08005c99 	.word	0x08005c99

08005c98 <logTask>:
{
  return isInit;
}

void logTask(void * prm)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_LOG);
 8005ca0:	2005      	movs	r0, #5
 8005ca2:	f7fb fbc9 	bl	8001438 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 8005ca6:	4914      	ldr	r1, [pc, #80]	; (8005cf8 <logTask+0x60>)
 8005ca8:	2005      	movs	r0, #5
 8005caa:	f7fb fbf5 	bl	8001498 <crtpReceivePacketBlock>

		xSemaphoreTake(logLock, portMAX_DELAY);
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <logTask+0x64>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f00d fd5c 	bl	8013774 <xQueueSemaphoreTake>
		if (p.channel==TOC_CH)
 8005cbc:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <logTask+0x60>)
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	f003 0303 	and.w	r3, r3, #3
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d104      	bne.n	8005cd4 <logTask+0x3c>
		  logTOCProcess(p.data[0]);
 8005cca:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <logTask+0x60>)
 8005ccc:	789b      	ldrb	r3, [r3, #2]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f816 	bl	8005d00 <logTOCProcess>
		if (p.channel==CONTROL_CH)
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <logTask+0x60>)
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d101      	bne.n	8005ce6 <logTask+0x4e>
		  logControlProcess();
 8005ce2:	f000 fa13 	bl	800610c <logControlProcess>
		xSemaphoreGive(logLock);
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <logTask+0x64>)
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	2200      	movs	r2, #0
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f00d fabe 	bl	8013270 <xQueueGenericSend>
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 8005cf4:	e7d7      	b.n	8005ca6 <logTask+0xe>
 8005cf6:	bf00      	nop
 8005cf8:	20006aa8 	.word	0x20006aa8
 8005cfc:	20006a44 	.word	0x20006a44

08005d00 <logTOCProcess>:
	}
}

void logTOCProcess(int command)
{
 8005d00:	b5b0      	push	{r4, r5, r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  int ptr = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
  char * group = "plop";
 8005d0c:	4ba4      	ldr	r3, [pc, #656]	; (8005fa0 <logTOCProcess+0x2a0>)
 8005d0e:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	81fb      	strh	r3, [r7, #14]
  uint16_t logId=0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	81bb      	strh	r3, [r7, #12]

  switch (command)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	f200 81e3 	bhi.w	80060e6 <logTOCProcess+0x3e6>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <logTOCProcess+0x28>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d91 	.word	0x08005d91
 8005d2c:	08005d39 	.word	0x08005d39
 8005d30:	08005f41 	.word	0x08005f41
 8005d34:	08005eff 	.word	0x08005eff
  {
  case CMD_GET_INFO: //Get info packet about the log implementation
    DEBUG_PRINT("Client uses old logging API!\n");
 8005d38:	499a      	ldr	r1, [pc, #616]	; (8005fa4 <logTOCProcess+0x2a4>)
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f7ff fc58 	bl	80055f0 <SEGGER_RTT_printf>
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
    group = "";
 8005d44:	4b98      	ldr	r3, [pc, #608]	; (8005fa8 <logTOCProcess+0x2a8>)
 8005d46:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005d48:	4b98      	ldr	r3, [pc, #608]	; (8005fac <logTOCProcess+0x2ac>)
 8005d4a:	2250      	movs	r2, #80	; 0x50
 8005d4c:	705a      	strb	r2, [r3, #1]
    p.size=8;
 8005d4e:	4b97      	ldr	r3, [pc, #604]	; (8005fac <logTOCProcess+0x2ac>)
 8005d50:	2208      	movs	r2, #8
 8005d52:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO;
 8005d54:	4b95      	ldr	r3, [pc, #596]	; (8005fac <logTOCProcess+0x2ac>)
 8005d56:	2201      	movs	r2, #1
 8005d58:	709a      	strb	r2, [r3, #2]
    if (logsCount < 255) {
 8005d5a:	4b95      	ldr	r3, [pc, #596]	; (8005fb0 <logTOCProcess+0x2b0>)
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	2bfe      	cmp	r3, #254	; 0xfe
 8005d60:	d805      	bhi.n	8005d6e <logTOCProcess+0x6e>
      p.data[1]=logsCount;
 8005d62:	4b93      	ldr	r3, [pc, #588]	; (8005fb0 <logTOCProcess+0x2b0>)
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	4b90      	ldr	r3, [pc, #576]	; (8005fac <logTOCProcess+0x2ac>)
 8005d6a:	70da      	strb	r2, [r3, #3]
 8005d6c:	e002      	b.n	8005d74 <logTOCProcess+0x74>
    } else {
      p.data[1]=255;
 8005d6e:	4b8f      	ldr	r3, [pc, #572]	; (8005fac <logTOCProcess+0x2ac>)
 8005d70:	22ff      	movs	r2, #255	; 0xff
 8005d72:	70da      	strb	r2, [r3, #3]
 8005d74:	4b8f      	ldr	r3, [pc, #572]	; (8005fb4 <logTOCProcess+0x2b4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
    }
    memcpy(&p.data[2], &logsCrc, 4);
 8005d78:	4a8c      	ldr	r2, [pc, #560]	; (8005fac <logTOCProcess+0x2ac>)
 8005d7a:	6053      	str	r3, [r2, #4]
    p.data[6]=LOG_MAX_BLOCKS;
 8005d7c:	4b8b      	ldr	r3, [pc, #556]	; (8005fac <logTOCProcess+0x2ac>)
 8005d7e:	2210      	movs	r2, #16
 8005d80:	721a      	strb	r2, [r3, #8]
    p.data[7]=LOG_MAX_OPS;
 8005d82:	4b8a      	ldr	r3, [pc, #552]	; (8005fac <logTOCProcess+0x2ac>)
 8005d84:	2280      	movs	r2, #128	; 0x80
 8005d86:	725a      	strb	r2, [r3, #9]
    crtpSendPacketBlock(&p);
 8005d88:	4888      	ldr	r0, [pc, #544]	; (8005fac <logTOCProcess+0x2ac>)
 8005d8a:	f7fb fc85 	bl	8001698 <crtpSendPacketBlock>
    break;
 8005d8e:	e1aa      	b.n	80060e6 <logTOCProcess+0x3e6>
  case CMD_GET_ITEM:  //Get log variable
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", p.data[1]);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e032      	b.n	8005dfc <logTOCProcess+0xfc>
    {
      if (logs[ptr].type & LOG_GROUP)
 8005d96:	4b88      	ldr	r3, [pc, #544]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005d98:	6819      	ldr	r1, [r3, #0]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	da1a      	bge.n	8005de4 <logTOCProcess+0xe4>
      {
        if (logs[ptr].type & LOG_START)
 8005dae:	4b82      	ldr	r3, [pc, #520]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005db0:	6819      	ldr	r1, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4613      	mov	r3, r2
 8005db6:	005b      	lsls	r3, r3, #1
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <logTOCProcess+0xde>
          group = logs[ptr].name;
 8005dc8:	4b7b      	ldr	r3, [pc, #492]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005dca:	6819      	ldr	r1, [r3, #0]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	e00b      	b.n	8005df6 <logTOCProcess+0xf6>
        else
          group = "";
 8005dde:	4b72      	ldr	r3, [pc, #456]	; (8005fa8 <logTOCProcess+0x2a8>)
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e008      	b.n	8005df6 <logTOCProcess+0xf6>
      }
      else                          //Ptr points a variable
      {
        if (n==p.data[1])
 8005de4:	4b71      	ldr	r3, [pc, #452]	; (8005fac <logTOCProcess+0x2ac>)
 8005de6:	78db      	ldrb	r3, [r3, #3]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	89fa      	ldrh	r2, [r7, #14]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d00b      	beq.n	8005e08 <logTOCProcess+0x108>
          break;
        n++;
 8005df0:	89fb      	ldrh	r3, [r7, #14]
 8005df2:	3301      	adds	r3, #1
 8005df4:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	4b6f      	ldr	r3, [pc, #444]	; (8005fbc <logTOCProcess+0x2bc>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	dbc7      	blt.n	8005d96 <logTOCProcess+0x96>
 8005e06:	e000      	b.n	8005e0a <logTOCProcess+0x10a>
          break;
 8005e08:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 8005e0a:	4b6c      	ldr	r3, [pc, #432]	; (8005fbc <logTOCProcess+0x2bc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	da67      	bge.n	8005ee4 <logTOCProcess+0x1e4>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005e14:	4b65      	ldr	r3, [pc, #404]	; (8005fac <logTOCProcess+0x2ac>)
 8005e16:	2250      	movs	r2, #80	; 0x50
 8005e18:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 8005e1a:	4b64      	ldr	r3, [pc, #400]	; (8005fac <logTOCProcess+0x2ac>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	709a      	strb	r2, [r3, #2]
      p.data[1]=n;
 8005e20:	89fb      	ldrh	r3, [r7, #14]
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	4b61      	ldr	r3, [pc, #388]	; (8005fac <logTOCProcess+0x2ac>)
 8005e26:	70da      	strb	r2, [r3, #3]
      p.data[2]=logGetType(ptr);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 f951 	bl	80070d4 <logGetType>
 8005e32:	4603      	mov	r3, r0
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <logTOCProcess+0x2ac>)
 8005e38:	711a      	strb	r2, [r3, #4]
      p.size=3+2+strlen(group)+strlen(logs[ptr].name);
 8005e3a:	6938      	ldr	r0, [r7, #16]
 8005e3c:	f7fa fa28 	bl	8000290 <strlen>
 8005e40:	4603      	mov	r3, r0
 8005e42:	b2dc      	uxtb	r4, r3
 8005e44:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005e46:	6819      	ldr	r1, [r3, #0]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa fa1a 	bl	8000290 <strlen>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	4423      	add	r3, r4
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	3305      	adds	r3, #5
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b50      	ldr	r3, [pc, #320]	; (8005fac <logTOCProcess+0x2ac>)
 8005e6a:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8005e6c:	4b4f      	ldr	r3, [pc, #316]	; (8005fac <logTOCProcess+0x2ac>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b1e      	cmp	r3, #30
 8005e72:	d905      	bls.n	8005e80 <logTOCProcess+0x180>
 8005e74:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005e78:	4951      	ldr	r1, [pc, #324]	; (8005fc0 <logTOCProcess+0x2c0>)
 8005e7a:	4852      	ldr	r0, [pc, #328]	; (8005fc4 <logTOCProcess+0x2c4>)
 8005e7c:	f7ff fbe6 	bl	800564c <assertFail>
      memcpy(p.data+3, group, strlen(group)+1);
 8005e80:	4c51      	ldr	r4, [pc, #324]	; (8005fc8 <logTOCProcess+0x2c8>)
 8005e82:	6938      	ldr	r0, [r7, #16]
 8005e84:	f7fa fa04 	bl	8000290 <strlen>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6939      	ldr	r1, [r7, #16]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f011 fef6 	bl	8017c82 <memcpy>
      memcpy(p.data+3+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 8005e96:	6938      	ldr	r0, [r7, #16]
 8005e98:	f7fa f9fa 	bl	8000290 <strlen>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4a4a      	ldr	r2, [pc, #296]	; (8005fcc <logTOCProcess+0x2cc>)
 8005ea2:	189c      	adds	r4, r3, r2
 8005ea4:	4b44      	ldr	r3, [pc, #272]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005ea6:	6819      	ldr	r1, [r3, #0]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	685d      	ldr	r5, [r3, #4]
 8005eb6:	4b40      	ldr	r3, [pc, #256]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005eb8:	6819      	ldr	r1, [r3, #0]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fa f9e1 	bl	8000290 <strlen>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	4629      	mov	r1, r5
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f011 fed3 	bl	8017c82 <memcpy>
      crtpSendPacketBlock(&p);
 8005edc:	4833      	ldr	r0, [pc, #204]	; (8005fac <logTOCProcess+0x2ac>)
 8005ede:	f7fb fbdb 	bl	8001698 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 8005ee2:	e100      	b.n	80060e6 <logTOCProcess+0x3e6>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005ee4:	4b31      	ldr	r3, [pc, #196]	; (8005fac <logTOCProcess+0x2ac>)
 8005ee6:	2250      	movs	r2, #80	; 0x50
 8005ee8:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 8005eea:	4b30      	ldr	r3, [pc, #192]	; (8005fac <logTOCProcess+0x2ac>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	709a      	strb	r2, [r3, #2]
      p.size=1;
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <logTOCProcess+0x2ac>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 8005ef6:	482d      	ldr	r0, [pc, #180]	; (8005fac <logTOCProcess+0x2ac>)
 8005ef8:	f7fb fbce 	bl	8001698 <crtpSendPacketBlock>
    break;
 8005efc:	e0f3      	b.n	80060e6 <logTOCProcess+0x3e6>
  case CMD_GET_INFO_V2: //Get info packet about the log implementation
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
    group = "";
 8005f02:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <logTOCProcess+0x2a8>)
 8005f04:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005f06:	4b29      	ldr	r3, [pc, #164]	; (8005fac <logTOCProcess+0x2ac>)
 8005f08:	2250      	movs	r2, #80	; 0x50
 8005f0a:	705a      	strb	r2, [r3, #1]
    p.size=9;
 8005f0c:	4b27      	ldr	r3, [pc, #156]	; (8005fac <logTOCProcess+0x2ac>)
 8005f0e:	2209      	movs	r2, #9
 8005f10:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO_V2;
 8005f12:	4b26      	ldr	r3, [pc, #152]	; (8005fac <logTOCProcess+0x2ac>)
 8005f14:	2203      	movs	r2, #3
 8005f16:	709a      	strb	r2, [r3, #2]
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <logTOCProcess+0x2b0>)
 8005f1a:	881b      	ldrh	r3, [r3, #0]
    memcpy(&p.data[1], &logsCount, 2);
 8005f1c:	4a23      	ldr	r2, [pc, #140]	; (8005fac <logTOCProcess+0x2ac>)
 8005f1e:	f8a2 3003 	strh.w	r3, [r2, #3]
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <logTOCProcess+0x2b4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[3], &logsCrc, 4);
 8005f26:	4a21      	ldr	r2, [pc, #132]	; (8005fac <logTOCProcess+0x2ac>)
 8005f28:	f8c2 3005 	str.w	r3, [r2, #5]
    p.data[7]=LOG_MAX_BLOCKS;
 8005f2c:	4b1f      	ldr	r3, [pc, #124]	; (8005fac <logTOCProcess+0x2ac>)
 8005f2e:	2210      	movs	r2, #16
 8005f30:	725a      	strb	r2, [r3, #9]
    p.data[8]=LOG_MAX_OPS;
 8005f32:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <logTOCProcess+0x2ac>)
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	729a      	strb	r2, [r3, #10]
    crtpSendPacketBlock(&p);
 8005f38:	481c      	ldr	r0, [pc, #112]	; (8005fac <logTOCProcess+0x2ac>)
 8005f3a:	f7fb fbad 	bl	8001698 <crtpSendPacketBlock>
    break;
 8005f3e:	e0d2      	b.n	80060e6 <logTOCProcess+0x3e6>
 8005f40:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <logTOCProcess+0x2ac>)
 8005f42:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005f46:	b29b      	uxth	r3, r3
  case CMD_GET_ITEM_V2:  //Get log variable
    memcpy(&logId, &p.data[1], 2);
 8005f48:	81bb      	strh	r3, [r7, #12]
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", logId);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	e049      	b.n	8005fe4 <logTOCProcess+0x2e4>
    {
      if (logs[ptr].type & LOG_GROUP)
 8005f50:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4613      	mov	r3, r2
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	da33      	bge.n	8005fd0 <logTOCProcess+0x2d0>
      {
        if (logs[ptr].type & LOG_START)
 8005f68:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <logTOCProcess+0x298>
          group = logs[ptr].name;
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <logTOCProcess+0x2b8>)
 8005f84:	6819      	ldr	r1, [r3, #0]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	e022      	b.n	8005fde <logTOCProcess+0x2de>
        else
          group = "";
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <logTOCProcess+0x2a8>)
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	e01f      	b.n	8005fde <logTOCProcess+0x2de>
 8005f9e:	bf00      	nop
 8005fa0:	0801abcc 	.word	0x0801abcc
 8005fa4:	0801abd4 	.word	0x0801abd4
 8005fa8:	0801abc4 	.word	0x0801abc4
 8005fac:	20006aa8 	.word	0x20006aa8
 8005fb0:	20006aa4 	.word	0x20006aa4
 8005fb4:	20006aa0 	.word	0x20006aa0
 8005fb8:	20006a98 	.word	0x20006a98
 8005fbc:	20006a9c 	.word	0x20006a9c
 8005fc0:	0801abac 	.word	0x0801abac
 8005fc4:	0801abf4 	.word	0x0801abf4
 8005fc8:	20006aad 	.word	0x20006aad
 8005fcc:	20006aaa 	.word	0x20006aaa
      }
      else                          //Ptr points a variable
      {
        if (n==logId)
 8005fd0:	89bb      	ldrh	r3, [r7, #12]
 8005fd2:	89fa      	ldrh	r2, [r7, #14]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d00b      	beq.n	8005ff0 <logTOCProcess+0x2f0>
          break;
        n++;
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	4b42      	ldr	r3, [pc, #264]	; (80060f0 <logTOCProcess+0x3f0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	dbb0      	blt.n	8005f50 <logTOCProcess+0x250>
 8005fee:	e000      	b.n	8005ff2 <logTOCProcess+0x2f2>
          break;
 8005ff0:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 8005ff2:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <logTOCProcess+0x3f0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	da67      	bge.n	80060cc <logTOCProcess+0x3cc>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 8005ffc:	4b3d      	ldr	r3, [pc, #244]	; (80060f4 <logTOCProcess+0x3f4>)
 8005ffe:	2250      	movs	r2, #80	; 0x50
 8006000:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 8006002:	4b3c      	ldr	r3, [pc, #240]	; (80060f4 <logTOCProcess+0x3f4>)
 8006004:	2202      	movs	r2, #2
 8006006:	709a      	strb	r2, [r3, #2]
 8006008:	89bb      	ldrh	r3, [r7, #12]
      memcpy(&p.data[1], &logId, 2);
 800600a:	4a3a      	ldr	r2, [pc, #232]	; (80060f4 <logTOCProcess+0x3f4>)
 800600c:	f8a2 3003 	strh.w	r3, [r2, #3]
      p.data[3]=logGetType(ptr);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	b29b      	uxth	r3, r3
 8006014:	4618      	mov	r0, r3
 8006016:	f001 f85d 	bl	80070d4 <logGetType>
 800601a:	4603      	mov	r3, r0
 800601c:	b2da      	uxtb	r2, r3
 800601e:	4b35      	ldr	r3, [pc, #212]	; (80060f4 <logTOCProcess+0x3f4>)
 8006020:	715a      	strb	r2, [r3, #5]
      p.size=4+2+strlen(group)+strlen(logs[ptr].name);
 8006022:	6938      	ldr	r0, [r7, #16]
 8006024:	f7fa f934 	bl	8000290 <strlen>
 8006028:	4603      	mov	r3, r0
 800602a:	b2dc      	uxtb	r4, r3
 800602c:	4b32      	ldr	r3, [pc, #200]	; (80060f8 <logTOCProcess+0x3f8>)
 800602e:	6819      	ldr	r1, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa f926 	bl	8000290 <strlen>
 8006044:	4603      	mov	r3, r0
 8006046:	b2db      	uxtb	r3, r3
 8006048:	4423      	add	r3, r4
 800604a:	b2db      	uxtb	r3, r3
 800604c:	3306      	adds	r3, #6
 800604e:	b2da      	uxtb	r2, r3
 8006050:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <logTOCProcess+0x3f4>)
 8006052:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 8006054:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <logTOCProcess+0x3f4>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b1e      	cmp	r3, #30
 800605a:	d905      	bls.n	8006068 <logTOCProcess+0x368>
 800605c:	f240 1271 	movw	r2, #369	; 0x171
 8006060:	4926      	ldr	r1, [pc, #152]	; (80060fc <logTOCProcess+0x3fc>)
 8006062:	4827      	ldr	r0, [pc, #156]	; (8006100 <logTOCProcess+0x400>)
 8006064:	f7ff faf2 	bl	800564c <assertFail>
      memcpy(p.data+4, group, strlen(group)+1);
 8006068:	4c26      	ldr	r4, [pc, #152]	; (8006104 <logTOCProcess+0x404>)
 800606a:	6938      	ldr	r0, [r7, #16]
 800606c:	f7fa f910 	bl	8000290 <strlen>
 8006070:	4603      	mov	r3, r0
 8006072:	3301      	adds	r3, #1
 8006074:	461a      	mov	r2, r3
 8006076:	6939      	ldr	r1, [r7, #16]
 8006078:	4620      	mov	r0, r4
 800607a:	f011 fe02 	bl	8017c82 <memcpy>
      memcpy(p.data+4+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 800607e:	6938      	ldr	r0, [r7, #16]
 8006080:	f7fa f906 	bl	8000290 <strlen>
 8006084:	4603      	mov	r3, r0
 8006086:	3305      	adds	r3, #5
 8006088:	4a1f      	ldr	r2, [pc, #124]	; (8006108 <logTOCProcess+0x408>)
 800608a:	189c      	adds	r4, r3, r2
 800608c:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <logTOCProcess+0x3f8>)
 800608e:	6819      	ldr	r1, [r3, #0]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4613      	mov	r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	685d      	ldr	r5, [r3, #4]
 800609e:	4b16      	ldr	r3, [pc, #88]	; (80060f8 <logTOCProcess+0x3f8>)
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fa f8ed 	bl	8000290 <strlen>
 80060b6:	4603      	mov	r3, r0
 80060b8:	3301      	adds	r3, #1
 80060ba:	461a      	mov	r2, r3
 80060bc:	4629      	mov	r1, r5
 80060be:	4620      	mov	r0, r4
 80060c0:	f011 fddf 	bl	8017c82 <memcpy>
      crtpSendPacketBlock(&p);
 80060c4:	480b      	ldr	r0, [pc, #44]	; (80060f4 <logTOCProcess+0x3f4>)
 80060c6:	f7fb fae7 	bl	8001698 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM_V2;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 80060ca:	e00b      	b.n	80060e4 <logTOCProcess+0x3e4>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 80060cc:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <logTOCProcess+0x3f4>)
 80060ce:	2250      	movs	r2, #80	; 0x50
 80060d0:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 80060d2:	4b08      	ldr	r3, [pc, #32]	; (80060f4 <logTOCProcess+0x3f4>)
 80060d4:	2202      	movs	r2, #2
 80060d6:	709a      	strb	r2, [r3, #2]
      p.size=1;
 80060d8:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <logTOCProcess+0x3f4>)
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 80060de:	4805      	ldr	r0, [pc, #20]	; (80060f4 <logTOCProcess+0x3f4>)
 80060e0:	f7fb fada 	bl	8001698 <crtpSendPacketBlock>
    break;
 80060e4:	bf00      	nop
  }
}
 80060e6:	bf00      	nop
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bdb0      	pop	{r4, r5, r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20006a9c 	.word	0x20006a9c
 80060f4:	20006aa8 	.word	0x20006aa8
 80060f8:	20006a98 	.word	0x20006a98
 80060fc:	0801abac 	.word	0x0801abac
 8006100:	0801abf4 	.word	0x0801abf4
 8006104:	20006aae 	.word	0x20006aae
 8006108:	20006aaa 	.word	0x20006aaa

0800610c <logControlProcess>:

void logControlProcess()
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
  int ret = ENOEXEC;
 8006112:	2308      	movs	r3, #8
 8006114:	607b      	str	r3, [r7, #4]

  switch(p.data[0])
 8006116:	4b40      	ldr	r3, [pc, #256]	; (8006218 <logControlProcess+0x10c>)
 8006118:	789b      	ldrb	r3, [r3, #2]
 800611a:	2b07      	cmp	r3, #7
 800611c:	d86e      	bhi.n	80061fc <logControlProcess+0xf0>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <logControlProcess+0x18>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006145 	.word	0x08006145
 8006128:	0800615d 	.word	0x0800615d
 800612c:	08006177 	.word	0x08006177
 8006130:	08006185 	.word	0x08006185
 8006134:	080061a3 	.word	0x080061a3
 8006138:	080061b1 	.word	0x080061b1
 800613c:	080061bb 	.word	0x080061bb
 8006140:	080061db 	.word	0x080061db
  {
    case CONTROL_CREATE_BLOCK:
      ret = logCreateBlock( p.data[1],
 8006144:	4b34      	ldr	r3, [pc, #208]	; (8006218 <logControlProcess+0x10c>)
 8006146:	78db      	ldrb	r3, [r3, #3]
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8006148:	4a33      	ldr	r2, [pc, #204]	; (8006218 <logControlProcess+0x10c>)
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	3a02      	subs	r2, #2
 800614e:	0852      	lsrs	r2, r2, #1
      ret = logCreateBlock( p.data[1],
 8006150:	4932      	ldr	r1, [pc, #200]	; (800621c <logControlProcess+0x110>)
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f866 	bl	8006224 <logCreateBlock>
 8006158:	6078      	str	r0, [r7, #4]
      break;
 800615a:	e04f      	b.n	80061fc <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK:
      ret = logAppendBlock( p.data[1],
 800615c:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <logControlProcess+0x10c>)
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	4618      	mov	r0, r3
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 8006162:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <logControlProcess+0x10c>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	3b02      	subs	r3, #2
 8006168:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlock( p.data[1],
 800616a:	461a      	mov	r2, r3
 800616c:	492b      	ldr	r1, [pc, #172]	; (800621c <logControlProcess+0x110>)
 800616e:	f000 f985 	bl	800647c <logAppendBlock>
 8006172:	6078      	str	r0, [r7, #4]
      break;
 8006174:	e042      	b.n	80061fc <logControlProcess+0xf0>
    case CONTROL_DELETE_BLOCK:
      ret = logDeleteBlock( p.data[1] );
 8006176:	4b28      	ldr	r3, [pc, #160]	; (8006218 <logControlProcess+0x10c>)
 8006178:	78db      	ldrb	r3, [r3, #3]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 fb3a 	bl	80067f4 <logDeleteBlock>
 8006180:	6078      	str	r0, [r7, #4]
      break;
 8006182:	e03b      	b.n	80061fc <logControlProcess+0xf0>
    case CONTROL_START_BLOCK:
      ret = logStartBlock( p.data[1], p.data[2]*10);
 8006184:	4b24      	ldr	r3, [pc, #144]	; (8006218 <logControlProcess+0x10c>)
 8006186:	78db      	ldrb	r3, [r3, #3]
 8006188:	4618      	mov	r0, r3
 800618a:	4b23      	ldr	r3, [pc, #140]	; (8006218 <logControlProcess+0x10c>)
 800618c:	791b      	ldrb	r3, [r3, #4]
 800618e:	461a      	mov	r2, r3
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	4619      	mov	r1, r3
 800619a:	f000 fba9 	bl	80068f0 <logStartBlock>
 800619e:	6078      	str	r0, [r7, #4]
      break;
 80061a0:	e02c      	b.n	80061fc <logControlProcess+0xf0>
    case CONTROL_STOP_BLOCK:
      ret = logStopBlock( p.data[1] );
 80061a2:	4b1d      	ldr	r3, [pc, #116]	; (8006218 <logControlProcess+0x10c>)
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fbfe 	bl	80069a8 <logStopBlock>
 80061ac:	6078      	str	r0, [r7, #4]
      break;
 80061ae:	e025      	b.n	80061fc <logControlProcess+0xf0>
    case CONTROL_RESET:
      logReset();
 80061b0:	f000 ff30 	bl	8007014 <logReset>
      ret = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	607b      	str	r3, [r7, #4]
      break;
 80061b8:	e020      	b.n	80061fc <logControlProcess+0xf0>
    case CONTROL_CREATE_BLOCK_V2:
      ret = logCreateBlockV2( p.data[1],
 80061ba:	4b17      	ldr	r3, [pc, #92]	; (8006218 <logControlProcess+0x10c>)
 80061bc:	78d8      	ldrb	r0, [r3, #3]
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 80061be:	4b16      	ldr	r3, [pc, #88]	; (8006218 <logControlProcess+0x10c>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	3b02      	subs	r3, #2
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b16      	ldr	r3, [pc, #88]	; (8006220 <logControlProcess+0x114>)
 80061c8:	fba3 2302 	umull	r2, r3, r3, r2
 80061cc:	085b      	lsrs	r3, r3, #1
      ret = logCreateBlockV2( p.data[1],
 80061ce:	461a      	mov	r2, r3
 80061d0:	4912      	ldr	r1, [pc, #72]	; (800621c <logControlProcess+0x110>)
 80061d2:	f000 f8bd 	bl	8006350 <logCreateBlockV2>
 80061d6:	6078      	str	r0, [r7, #4]
      break;
 80061d8:	e010      	b.n	80061fc <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK_V2:
      ret = logAppendBlockV2( p.data[1],
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <logControlProcess+0x10c>)
 80061dc:	78db      	ldrb	r3, [r3, #3]
 80061de:	4618      	mov	r0, r3
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <logControlProcess+0x10c>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	3b02      	subs	r3, #2
 80061e6:	461a      	mov	r2, r3
 80061e8:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <logControlProcess+0x114>)
 80061ea:	fba3 2302 	umull	r2, r3, r3, r2
 80061ee:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlockV2( p.data[1],
 80061f0:	461a      	mov	r2, r3
 80061f2:	490a      	ldr	r1, [pc, #40]	; (800621c <logControlProcess+0x110>)
 80061f4:	f000 fa16 	bl	8006624 <logAppendBlockV2>
 80061f8:	6078      	str	r0, [r7, #4]
      break;
 80061fa:	bf00      	nop
  }

  //Commands answer
  p.data[2] = ret;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <logControlProcess+0x10c>)
 8006202:	711a      	strb	r2, [r3, #4]
  p.size = 3;
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <logControlProcess+0x10c>)
 8006206:	2203      	movs	r2, #3
 8006208:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(&p);
 800620a:	4803      	ldr	r0, [pc, #12]	; (8006218 <logControlProcess+0x10c>)
 800620c:	f7fb fa44 	bl	8001698 <crtpSendPacketBlock>
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20006aa8 	.word	0x20006aa8
 800621c:	20006aac 	.word	0x20006aac
 8006220:	aaaaaaab 	.word	0xaaaaaaab

08006224 <logCreateBlock>:

static int logCreateBlock(unsigned char id, struct ops_setting * settings, int len)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	4603      	mov	r3, r0
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e00f      	b.n	8006258 <logCreateBlock+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 8006238:	7bf9      	ldrb	r1, [r7, #15]
 800623a:	4842      	ldr	r0, [pc, #264]	; (8006344 <logCreateBlock+0x120>)
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4613      	mov	r3, r2
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4403      	add	r3, r0
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4299      	cmp	r1, r3
 800624c:	d101      	bne.n	8006252 <logCreateBlock+0x2e>
 800624e:	2311      	movs	r3, #17
 8006250:	e074      	b.n	800633c <logCreateBlock+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	3301      	adds	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2b0f      	cmp	r3, #15
 800625c:	ddec      	ble.n	8006238 <logCreateBlock+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e00d      	b.n	8006280 <logCreateBlock+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8006264:	4937      	ldr	r1, [pc, #220]	; (8006344 <logCreateBlock+0x120>)
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4613      	mov	r3, r2
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	1a9b      	subs	r3, r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006278:	d006      	beq.n	8006288 <logCreateBlock+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	3301      	adds	r3, #1
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b0f      	cmp	r3, #15
 8006284:	ddee      	ble.n	8006264 <logCreateBlock+0x40>
 8006286:	e000      	b.n	800628a <logCreateBlock+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8006288:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d101      	bne.n	8006294 <logCreateBlock+0x70>
    return ENOMEM;
 8006290:	230c      	movs	r3, #12
 8006292:	e053      	b.n	800633c <logCreateBlock+0x118>

  logBlocks[i].id = id;
 8006294:	7bf9      	ldrb	r1, [r7, #15]
 8006296:	482b      	ldr	r0, [pc, #172]	; (8006344 <logCreateBlock+0x120>)
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4613      	mov	r3, r2
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4403      	add	r3, r0
 80062a4:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	4613      	mov	r3, r2
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4a24      	ldr	r2, [pc, #144]	; (8006344 <logCreateBlock+0x120>)
 80062b2:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4613      	mov	r3, r2
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	3308      	adds	r3, #8
 80062c0:	4a20      	ldr	r2, [pc, #128]	; (8006344 <logCreateBlock+0x120>)
 80062c2:	4413      	add	r3, r2
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	4b20      	ldr	r3, [pc, #128]	; (8006348 <logCreateBlock+0x124>)
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	460b      	mov	r3, r1
 80062cc:	2201      	movs	r2, #1
 80062ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062d2:	481e      	ldr	r0, [pc, #120]	; (800634c <logCreateBlock+0x128>)
 80062d4:	f00f f854 	bl	8015380 <xTimerCreateStatic>
 80062d8:	4601      	mov	r1, r0
 80062da:	481a      	ldr	r0, [pc, #104]	; (8006344 <logCreateBlock+0x120>)
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4613      	mov	r3, r2
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	1a9b      	subs	r3, r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4403      	add	r3, r0
 80062e8:	3304      	adds	r3, #4
 80062ea:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 80062ec:	4915      	ldr	r1, [pc, #84]	; (8006344 <logCreateBlock+0x120>)
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4613      	mov	r3, r2
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	3338      	adds	r3, #56	; 0x38
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 8006300:	4910      	ldr	r1, [pc, #64]	; (8006344 <logCreateBlock+0x120>)
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4613      	mov	r3, r2
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	1a9b      	subs	r3, r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	3304      	adds	r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <logCreateBlock+0x10a>
  {
	logBlocks[i].id = BLOCK_ID_FREE;
 8006316:	490b      	ldr	r1, [pc, #44]	; (8006344 <logCreateBlock+0x120>)
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4613      	mov	r3, r2
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	1a9b      	subs	r3, r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006328:	601a      	str	r2, [r3, #0]
	return ENOMEM;
 800632a:	230c      	movs	r3, #12
 800632c:	e006      	b.n	800633c <logCreateBlock+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlock(id, settings, len);
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	4618      	mov	r0, r3
 8006336:	f000 f8a1 	bl	800647c <logAppendBlock>
 800633a:	4603      	mov	r3, r0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20003614 	.word	0x20003614
 8006348:	08006a19 	.word	0x08006a19
 800634c:	0801ac14 	.word	0x0801ac14

08006350 <logCreateBlockV2>:

static int logCreateBlockV2(unsigned char id, struct ops_setting_v2 * settings, int len)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af02      	add	r7, sp, #8
 8006356:	4603      	mov	r3, r0
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e00f      	b.n	8006384 <logCreateBlockV2+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 8006364:	7bf9      	ldrb	r1, [r7, #15]
 8006366:	4842      	ldr	r0, [pc, #264]	; (8006470 <logCreateBlockV2+0x120>)
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4613      	mov	r3, r2
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4403      	add	r3, r0
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4299      	cmp	r1, r3
 8006378:	d101      	bne.n	800637e <logCreateBlockV2+0x2e>
 800637a:	2311      	movs	r3, #17
 800637c:	e074      	b.n	8006468 <logCreateBlockV2+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	3301      	adds	r3, #1
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b0f      	cmp	r3, #15
 8006388:	ddec      	ble.n	8006364 <logCreateBlockV2+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e00d      	b.n	80063ac <logCreateBlockV2+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 8006390:	4937      	ldr	r1, [pc, #220]	; (8006470 <logCreateBlockV2+0x120>)
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4613      	mov	r3, r2
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a4:	d006      	beq.n	80063b4 <logCreateBlockV2+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	3301      	adds	r3, #1
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	ddee      	ble.n	8006390 <logCreateBlockV2+0x40>
 80063b2:	e000      	b.n	80063b6 <logCreateBlockV2+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 80063b4:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d101      	bne.n	80063c0 <logCreateBlockV2+0x70>
    return ENOMEM;
 80063bc:	230c      	movs	r3, #12
 80063be:	e053      	b.n	8006468 <logCreateBlockV2+0x118>

  logBlocks[i].id = id;
 80063c0:	7bf9      	ldrb	r1, [r7, #15]
 80063c2:	482b      	ldr	r0, [pc, #172]	; (8006470 <logCreateBlockV2+0x120>)
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4613      	mov	r3, r2
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	1a9b      	subs	r3, r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4403      	add	r3, r0
 80063d0:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4613      	mov	r3, r2
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	1a9b      	subs	r3, r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4a24      	ldr	r2, [pc, #144]	; (8006470 <logCreateBlockV2+0x120>)
 80063de:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4613      	mov	r3, r2
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	3308      	adds	r3, #8
 80063ec:	4a20      	ldr	r2, [pc, #128]	; (8006470 <logCreateBlockV2+0x120>)
 80063ee:	4413      	add	r3, r2
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	4b20      	ldr	r3, [pc, #128]	; (8006474 <logCreateBlockV2+0x124>)
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	460b      	mov	r3, r1
 80063f8:	2201      	movs	r2, #1
 80063fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80063fe:	481e      	ldr	r0, [pc, #120]	; (8006478 <logCreateBlockV2+0x128>)
 8006400:	f00e ffbe 	bl	8015380 <xTimerCreateStatic>
 8006404:	4601      	mov	r1, r0
 8006406:	481a      	ldr	r0, [pc, #104]	; (8006470 <logCreateBlockV2+0x120>)
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	4613      	mov	r3, r2
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	1a9b      	subs	r3, r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4403      	add	r3, r0
 8006414:	3304      	adds	r3, #4
 8006416:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 8006418:	4915      	ldr	r1, [pc, #84]	; (8006470 <logCreateBlockV2+0x120>)
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4613      	mov	r3, r2
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	3338      	adds	r3, #56	; 0x38
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 800642c:	4910      	ldr	r1, [pc, #64]	; (8006470 <logCreateBlockV2+0x120>)
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4613      	mov	r3, r2
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	3304      	adds	r3, #4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <logCreateBlockV2+0x10a>
  {
  logBlocks[i].id = BLOCK_ID_FREE;
 8006442:	490b      	ldr	r1, [pc, #44]	; (8006470 <logCreateBlockV2+0x120>)
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4613      	mov	r3, r2
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006454:	601a      	str	r2, [r3, #0]
  return ENOMEM;
 8006456:	230c      	movs	r3, #12
 8006458:	e006      	b.n	8006468 <logCreateBlockV2+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlockV2(id, settings, len);
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 f8df 	bl	8006624 <logAppendBlockV2>
 8006466:	4603      	mov	r3, r0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20003614 	.word	0x20003614
 8006474:	08006a19 	.word	0x08006a19
 8006478:	0801ac14 	.word	0x0801ac14

0800647c <logAppendBlock>:
static void opsFree(struct log_ops * ops);
static void blockAppendOps(struct log_block * block, struct log_ops * ops);
static int variableGetIndex(int id);

static int logAppendBlock(int id, struct ops_setting * settings, int len)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006488:	2300      	movs	r3, #0
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
 800648c:	e00d      	b.n	80064aa <logAppendBlock+0x2e>
    if (logBlocks[i].id == id) break;
 800648e:	4962      	ldr	r1, [pc, #392]	; (8006618 <logAppendBlock+0x19c>)
 8006490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006492:	4613      	mov	r3, r2
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d006      	beq.n	80064b2 <logAppendBlock+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	3301      	adds	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	2b0f      	cmp	r3, #15
 80064ae:	ddee      	ble.n	800648e <logAppendBlock+0x12>
 80064b0:	e000      	b.n	80064b4 <logAppendBlock+0x38>
    if (logBlocks[i].id == id) break;
 80064b2:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	dd01      	ble.n	80064be <logAppendBlock+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 80064ba:	2302      	movs	r3, #2
 80064bc:	e0a8      	b.n	8006610 <logAppendBlock+0x194>
  }

  block = &logBlocks[i];
 80064be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c0:	4613      	mov	r3, r2
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4a53      	ldr	r2, [pc, #332]	; (8006618 <logAppendBlock+0x19c>)
 80064ca:	4413      	add	r3, r2
 80064cc:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
 80064d2:	e097      	b.n	8006604 <logAppendBlock+0x188>
  {
    int currentLength = blockCalcLength(block);
 80064d4:	6a38      	ldr	r0, [r7, #32]
 80064d6:	f000 fd53 	bl	8006f80 <blockCalcLength>
 80064da:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	4413      	add	r3, r2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	4a4c      	ldr	r2, [pc, #304]	; (800661c <logAppendBlock+0x1a0>)
 80064ec:	5cd3      	ldrb	r3, [r2, r3]
 80064ee:	461a      	mov	r2, r3
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	2b1a      	cmp	r3, #26
 80064f6:	dd01      	ble.n	80064fc <logAppendBlock+0x80>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 80064f8:	2307      	movs	r3, #7
 80064fa:	e089      	b.n	8006610 <logAppendBlock+0x194>
    }

    ops = opsMalloc();
 80064fc:	f000 fd0a 	bl	8006f14 <opsMalloc>
 8006500:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <logAppendBlock+0x90>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 8006508:	230c      	movs	r3, #12
 800650a:	e081      	b.n	8006610 <logAppendBlock+0x194>
    }

    if (settings[i].id != 255)  //TOC variable
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	4413      	add	r3, r2
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2bff      	cmp	r3, #255	; 0xff
 8006518:	d044      	beq.n	80065a4 <logAppendBlock+0x128>
    {
      varId = variableGetIndex(settings[i].id);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	785b      	ldrb	r3, [r3, #1]
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fcbb 	bl	8006ea0 <variableGetIndex>
 800652a:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	da01      	bge.n	8006536 <logAppendBlock+0xba>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 8006532:	2302      	movs	r3, #2
 8006534:	e06c      	b.n	8006610 <logAppendBlock+0x194>
      }

      ops->variable    = logs[varId].address;
 8006536:	4b3a      	ldr	r3, [pc, #232]	; (8006620 <logAppendBlock+0x1a4>)
 8006538:	6819      	ldr	r1, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4613      	mov	r3, r2
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	b29b      	uxth	r3, r3
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fdbf 	bl	80070d4 <logGetType>
 8006556:	4603      	mov	r3, r0
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	b2d9      	uxtb	r1, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	7913      	ldrb	r3, [r2, #4]
 8006562:	f361 0303 	bfi	r3, r1, #0, #4
 8006566:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	4413      	add	r3, r2
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	b2d9      	uxtb	r1, r3
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	7913      	ldrb	r3, [r2, #4]
 800657c:	f361 1307 	bfi	r3, r1, #4, #4
 8006580:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 8006582:	4b27      	ldr	r3, [pc, #156]	; (8006620 <logAppendBlock+0x1a4>)
 8006584:	6819      	ldr	r1, [r3, #0]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fdb5 	bl	8007104 <acquisitionTypeFromLogType>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	731a      	strb	r2, [r3, #12]
 80065a2:	e028      	b.n	80065f6 <logAppendBlock+0x17a>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	3301      	adds	r3, #1
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	441a      	add	r2, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	4413      	add	r3, r2
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 030f 	and.w	r3, r3, #15
 80065c4:	b2d9      	uxtb	r1, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	7913      	ldrb	r3, [r2, #4]
 80065ca:	f361 0303 	bfi	r3, r1, #0, #4
 80065ce:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	4413      	add	r3, r2
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	b2d9      	uxtb	r1, r3
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	7913      	ldrb	r3, [r2, #4]
 80065e4:	f361 1307 	bfi	r3, r1, #4, #4
 80065e8:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2200      	movs	r2, #0
 80065ee:	731a      	strb	r2, [r3, #12]
      i += 2;
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	3302      	adds	r3, #2
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 80065f6:	69b9      	ldr	r1, [r7, #24]
 80065f8:	6a38      	ldr	r0, [r7, #32]
 80065fa:	f000 fce7 	bl	8006fcc <blockAppendOps>
  for (i=0; i<len; i++)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	3301      	adds	r3, #1
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	429a      	cmp	r2, r3
 800660a:	f6ff af63 	blt.w	80064d4 <logAppendBlock+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3728      	adds	r7, #40	; 0x28
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20003614 	.word	0x20003614
 800661c:	0801c524 	.word	0x0801c524
 8006620:	20006a98 	.word	0x20006a98

08006624 <logAppendBlockV2>:

static int logAppendBlockV2(int id, struct ops_setting_v2 * settings, int len)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006630:	2300      	movs	r3, #0
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	e00d      	b.n	8006652 <logAppendBlockV2+0x2e>
    if (logBlocks[i].id == id) break;
 8006636:	496c      	ldr	r1, [pc, #432]	; (80067e8 <logAppendBlockV2+0x1c4>)
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	4613      	mov	r3, r2
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	429a      	cmp	r2, r3
 800664a:	d006      	beq.n	800665a <logAppendBlockV2+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	3301      	adds	r3, #1
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	2b0f      	cmp	r3, #15
 8006656:	ddee      	ble.n	8006636 <logAppendBlockV2+0x12>
 8006658:	e000      	b.n	800665c <logAppendBlockV2+0x38>
    if (logBlocks[i].id == id) break;
 800665a:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	2b0f      	cmp	r3, #15
 8006660:	dd01      	ble.n	8006666 <logAppendBlockV2+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 8006662:	2302      	movs	r3, #2
 8006664:	e0bc      	b.n	80067e0 <logAppendBlockV2+0x1bc>
  }

  block = &logBlocks[i];
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	4613      	mov	r3, r2
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4a5d      	ldr	r2, [pc, #372]	; (80067e8 <logAppendBlockV2+0x1c4>)
 8006672:	4413      	add	r3, r2
 8006674:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 8006676:	2300      	movs	r3, #0
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
 800667a:	e0ab      	b.n	80067d4 <logAppendBlockV2+0x1b0>
  {
    int currentLength = blockCalcLength(block);
 800667c:	6a38      	ldr	r0, [r7, #32]
 800667e:	f000 fc7f 	bl	8006f80 <blockCalcLength>
 8006682:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	4613      	mov	r3, r2
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4413      	add	r3, r2
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	4413      	add	r3, r2
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f003 030f 	and.w	r3, r3, #15
 8006696:	4a55      	ldr	r2, [pc, #340]	; (80067ec <logAppendBlockV2+0x1c8>)
 8006698:	5cd3      	ldrb	r3, [r2, r3]
 800669a:	461a      	mov	r2, r3
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	4413      	add	r3, r2
 80066a0:	2b1a      	cmp	r3, #26
 80066a2:	dd01      	ble.n	80066a8 <logAppendBlockV2+0x84>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 80066a4:	2307      	movs	r3, #7
 80066a6:	e09b      	b.n	80067e0 <logAppendBlockV2+0x1bc>
    }

    ops = opsMalloc();
 80066a8:	f000 fc34 	bl	8006f14 <opsMalloc>
 80066ac:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <logAppendBlockV2+0x94>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 80066b4:	230c      	movs	r3, #12
 80066b6:	e093      	b.n	80067e0 <logAppendBlockV2+0x1bc>
    }

    if (settings[i].id != 0xFFFFul)  //TOC variable
 80066b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ba:	4613      	mov	r3, r2
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4413      	add	r3, r2
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	4413      	add	r3, r2
 80066c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d04a      	beq.n	8006768 <logAppendBlockV2+0x144>
    {
      varId = variableGetIndex(settings[i].id);
 80066d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d4:	4613      	mov	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	4413      	add	r3, r2
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fbdb 	bl	8006ea0 <variableGetIndex>
 80066ea:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da01      	bge.n	80066f6 <logAppendBlockV2+0xd2>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 80066f2:	2302      	movs	r3, #2
 80066f4:	e074      	b.n	80067e0 <logAppendBlockV2+0x1bc>
      }

      ops->variable    = logs[varId].address;
 80066f6:	4b3e      	ldr	r3, [pc, #248]	; (80067f0 <logAppendBlockV2+0x1cc>)
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4613      	mov	r3, r2
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	b29b      	uxth	r3, r3
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fcdf 	bl	80070d4 <logGetType>
 8006716:	4603      	mov	r3, r0
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	b2d9      	uxtb	r1, r3
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	7913      	ldrb	r3, [r2, #4]
 8006722:	f361 0303 	bfi	r3, r1, #0, #4
 8006726:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	4613      	mov	r3, r2
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	4413      	add	r3, r2
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	4413      	add	r3, r2
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	b2d9      	uxtb	r1, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	7913      	ldrb	r3, [r2, #4]
 8006740:	f361 1307 	bfi	r3, r1, #4, #4
 8006744:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 8006746:	4b2a      	ldr	r3, [pc, #168]	; (80067f0 <logAppendBlockV2+0x1cc>)
 8006748:	6819      	ldr	r1, [r3, #0]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4613      	mov	r3, r2
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f000 fcd3 	bl	8007104 <acquisitionTypeFromLogType>
 800675e:	4603      	mov	r3, r0
 8006760:	461a      	mov	r2, r3
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	731a      	strb	r2, [r3, #12]
 8006766:	e02e      	b.n	80067c6 <logAppendBlockV2+0x1a2>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	4613      	mov	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4413      	add	r3, r2
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	441a      	add	r2, r3
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 800677a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800677c:	4613      	mov	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4413      	add	r3, r2
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b2d9      	uxtb	r1, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	7913      	ldrb	r3, [r2, #4]
 8006796:	f361 0303 	bfi	r3, r1, #0, #4
 800679a:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	4613      	mov	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4413      	add	r3, r2
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	4413      	add	r3, r2
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	b2d9      	uxtb	r1, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	7913      	ldrb	r3, [r2, #4]
 80067b4:	f361 1307 	bfi	r3, r1, #4, #4
 80067b8:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2200      	movs	r2, #0
 80067be:	731a      	strb	r2, [r3, #12]
      i += 2;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	3302      	adds	r3, #2
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 80067c6:	69b9      	ldr	r1, [r7, #24]
 80067c8:	6a38      	ldr	r0, [r7, #32]
 80067ca:	f000 fbff 	bl	8006fcc <blockAppendOps>
  for (i=0; i<len; i++)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	3301      	adds	r3, #1
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
 80067d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	429a      	cmp	r2, r3
 80067da:	f6ff af4f 	blt.w	800667c <logAppendBlockV2+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3728      	adds	r7, #40	; 0x28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20003614 	.word	0x20003614
 80067ec:	0801c524 	.word	0x0801c524
 80067f0:	20006a98 	.word	0x20006a98

080067f4 <logDeleteBlock>:

static int logDeleteBlock(int id)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
  int i;
  struct log_ops * ops;
  struct log_ops * opsNext;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e00d      	b.n	800681e <logDeleteBlock+0x2a>
    if (logBlocks[i].id == id) break;
 8006802:	493a      	ldr	r1, [pc, #232]	; (80068ec <logDeleteBlock+0xf8>)
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4613      	mov	r3, r2
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	429a      	cmp	r2, r3
 8006816:	d006      	beq.n	8006826 <logDeleteBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3301      	adds	r3, #1
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b0f      	cmp	r3, #15
 8006822:	ddee      	ble.n	8006802 <logDeleteBlock+0xe>
 8006824:	e000      	b.n	8006828 <logDeleteBlock+0x34>
    if (logBlocks[i].id == id) break;
 8006826:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b0f      	cmp	r3, #15
 800682c:	dd01      	ble.n	8006832 <logDeleteBlock+0x3e>
    LOG_ERROR("trying to delete block id %d that doesn't exist.", id);
    return ENOENT;
 800682e:	2302      	movs	r3, #2
 8006830:	e057      	b.n	80068e2 <logDeleteBlock+0xee>
  }

  ops = logBlocks[i].ops;
 8006832:	492e      	ldr	r1, [pc, #184]	; (80068ec <logDeleteBlock+0xf8>)
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	4613      	mov	r3, r2
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	1a9b      	subs	r3, r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	3338      	adds	r3, #56	; 0x38
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	613b      	str	r3, [r7, #16]
  while (ops)
 8006846:	e007      	b.n	8006858 <logDeleteBlock+0x64>
  {
    opsNext = ops->next;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60fb      	str	r3, [r7, #12]
    opsFree(ops);
 800684e:	6938      	ldr	r0, [r7, #16]
 8006850:	f000 fb88 	bl	8006f64 <opsFree>
    ops = opsNext;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	613b      	str	r3, [r7, #16]
  while (ops)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f4      	bne.n	8006848 <logDeleteBlock+0x54>
  }

  if (logBlocks[i].timer != 0) {
 800685e:	4923      	ldr	r1, [pc, #140]	; (80068ec <logDeleteBlock+0xf8>)
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4613      	mov	r3, r2
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	1a9b      	subs	r3, r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	3304      	adds	r3, #4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d02b      	beq.n	80068cc <logDeleteBlock+0xd8>
    xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 8006874:	491d      	ldr	r1, [pc, #116]	; (80068ec <logDeleteBlock+0xf8>)
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4613      	mov	r3, r2
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	3304      	adds	r3, #4
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	2300      	movs	r3, #0
 800688e:	2200      	movs	r2, #0
 8006890:	2103      	movs	r1, #3
 8006892:	f00e fde9 	bl	8015468 <xTimerGenericCommand>
    xTimerDelete(logBlocks[i].timer, portMAX_DELAY);
 8006896:	4915      	ldr	r1, [pc, #84]	; (80068ec <logDeleteBlock+0xf8>)
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4613      	mov	r3, r2
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3304      	adds	r3, #4
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	2300      	movs	r3, #0
 80068b0:	2200      	movs	r2, #0
 80068b2:	2105      	movs	r1, #5
 80068b4:	f00e fdd8 	bl	8015468 <xTimerGenericCommand>
    logBlocks[i].timer = 0;
 80068b8:	490c      	ldr	r1, [pc, #48]	; (80068ec <logDeleteBlock+0xf8>)
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4613      	mov	r3, r2
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	3304      	adds	r3, #4
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]
  }

  logBlocks[i].id = BLOCK_ID_FREE;
 80068cc:	4907      	ldr	r1, [pc, #28]	; (80068ec <logDeleteBlock+0xf8>)
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	4613      	mov	r3, r2
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068de:	601a      	str	r2, [r3, #0]
  return 0;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20003614 	.word	0x20003614

080068f0 <logStartBlock>:

static int logStartBlock(int id, unsigned int period)
{
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	e00d      	b.n	800691c <logStartBlock+0x2c>
    if (logBlocks[i].id == id) break;
 8006900:	4927      	ldr	r1, [pc, #156]	; (80069a0 <logStartBlock+0xb0>)
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4613      	mov	r3, r2
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d006      	beq.n	8006924 <logStartBlock+0x34>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	ddee      	ble.n	8006900 <logStartBlock+0x10>
 8006922:	e000      	b.n	8006926 <logStartBlock+0x36>
    if (logBlocks[i].id == id) break;
 8006924:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b0f      	cmp	r3, #15
 800692a:	dd01      	ble.n	8006930 <logStartBlock+0x40>
    LOG_ERROR("Trying to start block id %d that doesn't exist.", id);
    return ENOENT;
 800692c:	2302      	movs	r3, #2
 800692e:	e032      	b.n	8006996 <logStartBlock+0xa6>
  }

  LOG_DEBUG("Starting block %d with period %dms\n", id, period);

  if (period>0)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d023      	beq.n	800697e <logStartBlock+0x8e>
  {
    xTimerChangePeriod(logBlocks[i].timer, M2T(period), 100);
 8006936:	491a      	ldr	r1, [pc, #104]	; (80069a0 <logStartBlock+0xb0>)
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4613      	mov	r3, r2
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	1a9b      	subs	r3, r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	3304      	adds	r3, #4
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	2364      	movs	r3, #100	; 0x64
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2300      	movs	r3, #0
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	2104      	movs	r1, #4
 8006952:	f00e fd89 	bl	8015468 <xTimerGenericCommand>
    xTimerStart(logBlocks[i].timer, 100);
 8006956:	4912      	ldr	r1, [pc, #72]	; (80069a0 <logStartBlock+0xb0>)
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4613      	mov	r3, r2
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	1a9b      	subs	r3, r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	3304      	adds	r3, #4
 8006966:	681c      	ldr	r4, [r3, #0]
 8006968:	f00d fd18 	bl	801439c <xTaskGetTickCount>
 800696c:	4602      	mov	r2, r0
 800696e:	2364      	movs	r3, #100	; 0x64
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	2300      	movs	r3, #0
 8006974:	2101      	movs	r1, #1
 8006976:	4620      	mov	r0, r4
 8006978:	f00e fd76 	bl	8015468 <xTimerGenericCommand>
 800697c:	e00a      	b.n	8006994 <logStartBlock+0xa4>
  } else {
    // single-shoot run
    workerSchedule(logRunBlock, &logBlocks[i]);
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4613      	mov	r3, r2
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4a05      	ldr	r2, [pc, #20]	; (80069a0 <logStartBlock+0xb0>)
 800698a:	4413      	add	r3, r2
 800698c:	4619      	mov	r1, r3
 800698e:	4805      	ldr	r0, [pc, #20]	; (80069a4 <logStartBlock+0xb4>)
 8006990:	f002 f81c 	bl	80089cc <workerSchedule>
  }

  return 0;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	bd90      	pop	{r4, r7, pc}
 800699e:	bf00      	nop
 80069a0:	20003614 	.word	0x20003614
 80069a4:	08006a8d 	.word	0x08006a8d

080069a8 <logStopBlock>:

static int logStopBlock(int id)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e00d      	b.n	80069d2 <logStopBlock+0x2a>
    if (logBlocks[i].id == id) break;
 80069b6:	4917      	ldr	r1, [pc, #92]	; (8006a14 <logStopBlock+0x6c>)
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	4613      	mov	r3, r2
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d006      	beq.n	80069da <logStopBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3301      	adds	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b0f      	cmp	r3, #15
 80069d6:	ddee      	ble.n	80069b6 <logStopBlock+0xe>
 80069d8:	e000      	b.n	80069dc <logStopBlock+0x34>
    if (logBlocks[i].id == id) break;
 80069da:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b0f      	cmp	r3, #15
 80069e0:	dd01      	ble.n	80069e6 <logStopBlock+0x3e>
    LOG_ERROR("Trying to stop block id %d that doesn't exist.\n", id);
    return ENOENT;
 80069e2:	2302      	movs	r3, #2
 80069e4:	e011      	b.n	8006a0a <logStopBlock+0x62>
  }

  xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 80069e6:	490b      	ldr	r1, [pc, #44]	; (8006a14 <logStopBlock+0x6c>)
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4613      	mov	r3, r2
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	440b      	add	r3, r1
 80069f4:	3304      	adds	r3, #4
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	2200      	movs	r2, #0
 8006a02:	2103      	movs	r1, #3
 8006a04:	f00e fd30 	bl	8015468 <xTimerGenericCommand>

  return 0;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20003614 	.word	0x20003614

08006a18 <logBlockTimed>:

/* This function is called by the timer subsystem */
void logBlockTimed(xTimerHandle timer)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  workerSchedule(logRunBlock, pvTimerGetTimerID(timer));
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f00f f821 	bl	8015a68 <pvTimerGetTimerID>
 8006a26:	4603      	mov	r3, r0
 8006a28:	4619      	mov	r1, r3
 8006a2a:	4803      	ldr	r0, [pc, #12]	; (8006a38 <logBlockTimed+0x20>)
 8006a2c:	f001 ffce 	bl	80089cc <workerSchedule>
}
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	08006a8d 	.word	0x08006a8d

08006a3c <appendToPacket>:

/* Appends data to a packet if space is available; returns false on failure. */
static bool appendToPacket(CRTPPacket * pk, const void * data, size_t n) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  if (pk->size <= CRTP_MAX_DATA_SIZE - n)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f1c3 031e 	rsb	r3, r3, #30
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d814      	bhi.n	8006a82 <appendToPacket+0x46>
  {
    memcpy(&pk->data[pk->size], data, n);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	3302      	adds	r3, #2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f011 f90a 	bl	8017c82 <memcpy>
    pk->size += n;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	701a      	strb	r2, [r3, #0]
    return true;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <appendToPacket+0x48>
  }
  else return false;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <logRunBlock>:

/* This function is usually called by the worker subsystem */
void logRunBlock(void * arg)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b094      	sub	sp, #80	; 0x50
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  struct log_block *blk = arg;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	64bb      	str	r3, [r7, #72]	; 0x48
  struct log_ops *ops = blk->ops;
 8006a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  static CRTPPacket pk;
  unsigned int timestamp;

  xSemaphoreTake(logLock, portMAX_DELAY);
 8006a9e:	4b8c      	ldr	r3, [pc, #560]	; (8006cd0 <logRunBlock+0x244>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f00c fe64 	bl	8013774 <xQueueSemaphoreTake>

  timestamp = ((long long)xTaskGetTickCount())/portTICK_RATE_MS;
 8006aac:	f00d fc76 	bl	801439c <xTaskGetTickCount>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	4a88      	ldr	r2, [pc, #544]	; (8006cd4 <logRunBlock+0x248>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	099b      	lsrs	r3, r3, #6
 8006aba:	647b      	str	r3, [r7, #68]	; 0x44

  pk.header = CRTP_HEADER(CRTP_PORT_LOG, LOG_CH);
 8006abc:	4b86      	ldr	r3, [pc, #536]	; (8006cd8 <logRunBlock+0x24c>)
 8006abe:	2252      	movs	r2, #82	; 0x52
 8006ac0:	705a      	strb	r2, [r3, #1]
  pk.size = 4;
 8006ac2:	4b85      	ldr	r3, [pc, #532]	; (8006cd8 <logRunBlock+0x24c>)
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	701a      	strb	r2, [r3, #0]
  pk.data[0] = blk->id;
 8006ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	4b82      	ldr	r3, [pc, #520]	; (8006cd8 <logRunBlock+0x24c>)
 8006ad0:	709a      	strb	r2, [r3, #2]
  pk.data[1] = timestamp&0x0ff;
 8006ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	4b80      	ldr	r3, [pc, #512]	; (8006cd8 <logRunBlock+0x24c>)
 8006ad8:	70da      	strb	r2, [r3, #3]
  pk.data[2] = (timestamp>>8)&0x0ff;
 8006ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	4b7d      	ldr	r3, [pc, #500]	; (8006cd8 <logRunBlock+0x24c>)
 8006ae2:	711a      	strb	r2, [r3, #4]
  pk.data[3] = (timestamp>>16)&0x0ff;
 8006ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	4b7b      	ldr	r3, [pc, #492]	; (8006cd8 <logRunBlock+0x24c>)
 8006aec:	715a      	strb	r2, [r3, #5]

  while (ops)
 8006aee:	e18f      	b.n	8006e10 <logRunBlock+0x384>
  {
    int valuei = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
    float valuef = 0;
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	623b      	str	r3, [r7, #32]

    // FPU instructions must run on aligned data.
    // We first copy the data to an (aligned) local variable, before assigning it
    switch(ops->storageType)
 8006afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afc:	791b      	ldrb	r3, [r3, #4]
 8006afe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	2b06      	cmp	r3, #6
 8006b08:	f200 8121 	bhi.w	8006d4e <logRunBlock+0x2c2>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <logRunBlock+0x88>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b31 	.word	0x08006b31
 8006b18:	08006bbb 	.word	0x08006bbb
 8006b1c:	08006c49 	.word	0x08006c49
 8006b20:	08006b75 	.word	0x08006b75
 8006b24:	08006c01 	.word	0x08006c01
 8006b28:	08006c8d 	.word	0x08006c8d
 8006b2c:	08006cf9 	.word	0x08006cf9
    {
      case LOG_UINT8:
      {
        uint8_t v;
        if (ops->acquisitionType == acqType_function) {
 8006b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b32:	7b1b      	ldrb	r3, [r3, #12]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d116      	bne.n	8006b66 <logRunBlock+0xda>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt8);
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <logRunBlock+0xc6>
 8006b46:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 8006b4a:	4964      	ldr	r1, [pc, #400]	; (8006cdc <logRunBlock+0x250>)
 8006b4c:	4864      	ldr	r0, [pc, #400]	; (8006ce0 <logRunBlock+0x254>)
 8006b4e:	f7fe fd7d 	bl	800564c <assertFail>
          v = logByFunction->acquireUInt8(timestamp, logByFunction->data);
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b58:	6852      	ldr	r2, [r2, #4]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006b5e:	4798      	blx	r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e003      	b.n	8006b6e <logRunBlock+0xe2>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	77fb      	strb	r3, [r7, #31]
        }
        valuei = v;
 8006b6e:	7ffb      	ldrb	r3, [r7, #31]
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b72:	e0ec      	b.n	8006d4e <logRunBlock+0x2c2>
      }
      case LOG_INT8:
      {
        int8_t v;
        if (ops->acquisitionType == acqType_function) {
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	7b1b      	ldrb	r3, [r3, #12]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d116      	bne.n	8006baa <logRunBlock+0x11e>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt8);
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <logRunBlock+0x10a>
 8006b8a:	f240 3201 	movw	r2, #769	; 0x301
 8006b8e:	4953      	ldr	r1, [pc, #332]	; (8006cdc <logRunBlock+0x250>)
 8006b90:	4854      	ldr	r0, [pc, #336]	; (8006ce4 <logRunBlock+0x258>)
 8006b92:	f7fe fd5b 	bl	800564c <assertFail>
          v = logByFunction->acquireInt8(timestamp, logByFunction->data);
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b9c:	6852      	ldr	r2, [r2, #4]
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006ba2:	4798      	blx	r3
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	77bb      	strb	r3, [r7, #30]
 8006ba8:	e003      	b.n	8006bb2 <logRunBlock+0x126>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	77bb      	strb	r3, [r7, #30]
        }
        valuei = v;
 8006bb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bb8:	e0c9      	b.n	8006d4e <logRunBlock+0x2c2>
      }
      case LOG_UINT16:
      {
        uint16_t v;
        if (ops->acquisitionType == acqType_function) {
 8006bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbc:	7b1b      	ldrb	r3, [r3, #12]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d116      	bne.n	8006bf0 <logRunBlock+0x164>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt16);
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d105      	bne.n	8006bdc <logRunBlock+0x150>
 8006bd0:	f240 320e 	movw	r2, #782	; 0x30e
 8006bd4:	4941      	ldr	r1, [pc, #260]	; (8006cdc <logRunBlock+0x250>)
 8006bd6:	4844      	ldr	r0, [pc, #272]	; (8006ce8 <logRunBlock+0x25c>)
 8006bd8:	f7fe fd38 	bl	800564c <assertFail>
          v = logByFunction->acquireUInt16(timestamp, logByFunction->data);
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be2:	6852      	ldr	r2, [r2, #4]
 8006be4:	4611      	mov	r1, r2
 8006be6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006be8:	4798      	blx	r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	83bb      	strh	r3, [r7, #28]
 8006bee:	e004      	b.n	8006bfa <logRunBlock+0x16e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	83bb      	strh	r3, [r7, #28]
        }
        valuei = v;
 8006bfa:	8bbb      	ldrh	r3, [r7, #28]
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bfe:	e0a6      	b.n	8006d4e <logRunBlock+0x2c2>
      }
      case LOG_INT16:
      {
        int16_t v;
        if (ops->acquisitionType == acqType_function) {
 8006c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c02:	7b1b      	ldrb	r3, [r3, #12]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d116      	bne.n	8006c36 <logRunBlock+0x1aa>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	63bb      	str	r3, [r7, #56]	; 0x38
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt16);
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d105      	bne.n	8006c22 <logRunBlock+0x196>
 8006c16:	f240 321b 	movw	r2, #795	; 0x31b
 8006c1a:	4930      	ldr	r1, [pc, #192]	; (8006cdc <logRunBlock+0x250>)
 8006c1c:	4833      	ldr	r0, [pc, #204]	; (8006cec <logRunBlock+0x260>)
 8006c1e:	f7fe fd15 	bl	800564c <assertFail>
          v = logByFunction->acquireInt16(timestamp, logByFunction->data);
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c28:	6852      	ldr	r2, [r2, #4]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006c2e:	4798      	blx	r3
 8006c30:	4603      	mov	r3, r0
 8006c32:	837b      	strh	r3, [r7, #26]
 8006c34:	e004      	b.n	8006c40 <logRunBlock+0x1b4>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	837b      	strh	r3, [r7, #26]
        }
        valuei = v;
 8006c40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c46:	e082      	b.n	8006d4e <logRunBlock+0x2c2>
      }
      case LOG_UINT32:
      {
        uint32_t v;
        if (ops->acquisitionType == acqType_function) {
 8006c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4a:	7b1b      	ldrb	r3, [r3, #12]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d116      	bne.n	8006c7e <logRunBlock+0x1f2>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt32);
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d105      	bne.n	8006c6a <logRunBlock+0x1de>
 8006c5e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8006c62:	491e      	ldr	r1, [pc, #120]	; (8006cdc <logRunBlock+0x250>)
 8006c64:	4822      	ldr	r0, [pc, #136]	; (8006cf0 <logRunBlock+0x264>)
 8006c66:	f7fe fcf1 	bl	800564c <assertFail>
          v = logByFunction->acquireUInt32(timestamp, logByFunction->data);
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c70:	6852      	ldr	r2, [r2, #4]
 8006c72:	4611      	mov	r1, r2
 8006c74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006c76:	4798      	blx	r3
 8006c78:	4603      	mov	r3, r0
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e003      	b.n	8006c86 <logRunBlock+0x1fa>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	617b      	str	r3, [r7, #20]
        }
        valuei = v;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c8a:	e060      	b.n	8006d4e <logRunBlock+0x2c2>
      }
      case LOG_INT32:
      {
        int32_t v;
        if (ops->acquisitionType == acqType_function) {
 8006c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8e:	7b1b      	ldrb	r3, [r3, #12]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d116      	bne.n	8006cc2 <logRunBlock+0x236>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt32);
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d105      	bne.n	8006cae <logRunBlock+0x222>
 8006ca2:	f240 3235 	movw	r2, #821	; 0x335
 8006ca6:	490d      	ldr	r1, [pc, #52]	; (8006cdc <logRunBlock+0x250>)
 8006ca8:	4812      	ldr	r0, [pc, #72]	; (8006cf4 <logRunBlock+0x268>)
 8006caa:	f7fe fccf 	bl	800564c <assertFail>
          v = logByFunction->acquireInt32(timestamp, logByFunction->data);
 8006cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cb4:	6852      	ldr	r2, [r2, #4]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006cba:	4798      	blx	r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	e003      	b.n	8006cca <logRunBlock+0x23e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	613b      	str	r3, [r7, #16]
        }
        valuei = v;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cce:	e03e      	b.n	8006d4e <logRunBlock+0x2c2>
 8006cd0:	20006a44 	.word	0x20006a44
 8006cd4:	10624dd3 	.word	0x10624dd3
 8006cd8:	20006acc 	.word	0x20006acc
 8006cdc:	0801abac 	.word	0x0801abac
 8006ce0:	0801ac20 	.word	0x0801ac20
 8006ce4:	0801ac3c 	.word	0x0801ac3c
 8006ce8:	0801ac58 	.word	0x0801ac58
 8006cec:	0801ac78 	.word	0x0801ac78
 8006cf0:	0801ac94 	.word	0x0801ac94
 8006cf4:	0801acb4 	.word	0x0801acb4
      }
      case LOG_FLOAT:
      {
        float v;
        if (ops->acquisitionType == acqType_function) {
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cfa:	7b1b      	ldrb	r3, [r3, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d118      	bne.n	8006d32 <logRunBlock+0x2a6>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 8006d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	643b      	str	r3, [r7, #64]	; 0x40
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->aquireFloat);
 8006d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d105      	bne.n	8006d1a <logRunBlock+0x28e>
 8006d0e:	f240 3242 	movw	r2, #834	; 0x342
 8006d12:	495c      	ldr	r1, [pc, #368]	; (8006e84 <logRunBlock+0x3f8>)
 8006d14:	485c      	ldr	r0, [pc, #368]	; (8006e88 <logRunBlock+0x3fc>)
 8006d16:	f7fe fc99 	bl	800564c <assertFail>
          v = logByFunction->aquireFloat(timestamp, logByFunction->data);
 8006d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d20:	6852      	ldr	r2, [r2, #4]
 8006d22:	4611      	mov	r1, r2
 8006d24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006d26:	4798      	blx	r3
 8006d28:	eef0 7a40 	vmov.f32	s15, s0
 8006d2c:	edc7 7a03 	vstr	s15, [r7, #12]
 8006d30:	e003      	b.n	8006d3a <logRunBlock+0x2ae>
        } else {
          memcpy(&v, ops->variable, sizeof(valuef));
 8006d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60fb      	str	r3, [r7, #12]
        }
        valuei = v;
 8006d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d42:	ee17 3a90 	vmov	r3, s15
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
        valuef = v;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	623b      	str	r3, [r7, #32]
        break;
 8006d4c:	bf00      	nop
      }
    }

    if (ops->logType == LOG_FLOAT || ops->logType == LOG_FP16)
 8006d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d50:	791b      	ldrb	r3, [r3, #4]
 8006d52:	f023 030f 	bic.w	r3, r3, #15
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b70      	cmp	r3, #112	; 0x70
 8006d5a:	d006      	beq.n	8006d6a <logRunBlock+0x2de>
 8006d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d5e:	791b      	ldrb	r3, [r3, #4]
 8006d60:	f023 030f 	bic.w	r3, r3, #15
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b80      	cmp	r3, #128	; 0x80
 8006d68:	d138      	bne.n	8006ddc <logRunBlock+0x350>
    {
      if (ops->storageType != LOG_FLOAT)
 8006d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6c:	791b      	ldrb	r3, [r3, #4]
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b07      	cmp	r3, #7
 8006d76:	d006      	beq.n	8006d86 <logRunBlock+0x2fa>
      {
        valuef = valuei;
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	ee07 3a90 	vmov	s15, r3
 8006d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d82:	edc7 7a08 	vstr	s15, [r7, #32]
      }

      // Try to append the next item to the packet.  If we run out of space,
      // drop this and subsequent items.
      if (ops->logType == LOG_FLOAT)
 8006d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d88:	791b      	ldrb	r3, [r3, #4]
 8006d8a:	f023 030f 	bic.w	r3, r3, #15
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b70      	cmp	r3, #112	; 0x70
 8006d92:	d10d      	bne.n	8006db0 <logRunBlock+0x324>
      {
        if (!appendToPacket(&pk, &valuef, 4)) break;
 8006d94:	f107 0320 	add.w	r3, r7, #32
 8006d98:	2204      	movs	r2, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	483b      	ldr	r0, [pc, #236]	; (8006e8c <logRunBlock+0x400>)
 8006d9e:	f7ff fe4d 	bl	8006a3c <appendToPacket>
 8006da2:	4603      	mov	r3, r0
 8006da4:	f083 0301 	eor.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d02c      	beq.n	8006e08 <logRunBlock+0x37c>
 8006dae:	e035      	b.n	8006e1c <logRunBlock+0x390>
      }
      else
      {
        valuei = single2half(valuef);
 8006db0:	edd7 7a08 	vldr	s15, [r7, #32]
 8006db4:	eeb0 0a67 	vmov.f32	s0, s15
 8006db8:	f000 f9b7 	bl	800712a <single2half>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
        if (!appendToPacket(&pk, &valuei, 2)) break;
 8006dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4830      	ldr	r0, [pc, #192]	; (8006e8c <logRunBlock+0x400>)
 8006dca:	f7ff fe37 	bl	8006a3c <appendToPacket>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f083 0301 	eor.w	r3, r3, #1
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <logRunBlock+0x37c>
 8006dda:	e01f      	b.n	8006e1c <logRunBlock+0x390>
      }
    }
    else  //logType is an integer
    {
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 8006ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dde:	791b      	ldrb	r3, [r3, #4]
 8006de0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	4b29      	ldr	r3, [pc, #164]	; (8006e90 <logRunBlock+0x404>)
 8006dea:	5c9b      	ldrb	r3, [r3, r2]
 8006dec:	461a      	mov	r2, r3
 8006dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df2:	4619      	mov	r1, r3
 8006df4:	4825      	ldr	r0, [pc, #148]	; (8006e8c <logRunBlock+0x400>)
 8006df6:	f7ff fe21 	bl	8006a3c <appendToPacket>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f083 0301 	eor.w	r3, r3, #1
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d109      	bne.n	8006e1a <logRunBlock+0x38e>
 8006e06:	e000      	b.n	8006e0a <logRunBlock+0x37e>
      if (ops->logType == LOG_FLOAT)
 8006e08:	bf00      	nop
    }

    ops = ops->next;
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (ops)
 8006e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f47f ae6c 	bne.w	8006af0 <logRunBlock+0x64>
 8006e18:	e000      	b.n	8006e1c <logRunBlock+0x390>
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 8006e1a:	bf00      	nop
  }

  xSemaphoreGive(logLock);
 8006e1c:	4b1d      	ldr	r3, [pc, #116]	; (8006e94 <logRunBlock+0x408>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	2300      	movs	r3, #0
 8006e22:	2200      	movs	r2, #0
 8006e24:	2100      	movs	r1, #0
 8006e26:	f00c fa23 	bl	8013270 <xQueueGenericSend>

  // Check if the connection is still up, oherwise disable
  // all the logging and flush all the CRTP queues.
  if (!crtpIsConnected())
 8006e2a:	f7fa fc77 	bl	800171c <crtpIsConnected>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f083 0301 	eor.w	r3, r3, #1
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <logRunBlock+0x3b8>
  {
    logReset();
 8006e3a:	f000 f8eb 	bl	8007014 <logReset>
    crtpReset();
 8006e3e:	f7fa fc55 	bl	80016ec <crtpReset>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
                    blk->droppedPackets);
      }
    }
  }
}
 8006e42:	e01b      	b.n	8006e7c <logRunBlock+0x3f0>
    if (!crtpSendPacket(&pk))
 8006e44:	4811      	ldr	r0, [pc, #68]	; (8006e8c <logRunBlock+0x400>)
 8006e46:	f7fa fbfd 	bl	8001644 <crtpSendPacket>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d115      	bne.n	8006e7c <logRunBlock+0x3f0>
      if (blk->droppedPackets++ % 100 == 0)
 8006e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e54:	1c51      	adds	r1, r2, #1
 8006e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e58:	6359      	str	r1, [r3, #52]	; 0x34
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	; (8006e98 <logRunBlock+0x40c>)
 8006e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	2164      	movs	r1, #100	; 0x64
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <logRunBlock+0x3f0>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	461a      	mov	r2, r3
 8006e74:	4909      	ldr	r1, [pc, #36]	; (8006e9c <logRunBlock+0x410>)
 8006e76:	2000      	movs	r0, #0
 8006e78:	f7fe fbba 	bl	80055f0 <SEGGER_RTT_printf>
}
 8006e7c:	bf00      	nop
 8006e7e:	3750      	adds	r7, #80	; 0x50
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	0801abac 	.word	0x0801abac
 8006e88:	0801acd0 	.word	0x0801acd0
 8006e8c:	20006acc 	.word	0x20006acc
 8006e90:	0801c524 	.word	0x0801c524
 8006e94:	20006a44 	.word	0x20006a44
 8006e98:	51eb851f 	.word	0x51eb851f
 8006e9c:	0801acec 	.word	0x0801acec

08006ea0 <variableGetIndex>:

static int variableGetIndex(int id)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  int i;
  int n=0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60bb      	str	r3, [r7, #8]

  for (i=0; i<logsLen; i++)
 8006eac:	2300      	movs	r3, #0
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	e015      	b.n	8006ede <variableGetIndex+0x3e>
  {
    if(!(logs[i].type & LOG_GROUP))
 8006eb2:	4b16      	ldr	r3, [pc, #88]	; (8006f0c <variableGetIndex+0x6c>)
 8006eb4:	6819      	ldr	r1, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	440b      	add	r3, r1
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b25b      	sxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	db06      	blt.n	8006ed8 <variableGetIndex+0x38>
    {
      if(n==id)
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d00b      	beq.n	8006eea <variableGetIndex+0x4a>
        break;
      n++;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	60bb      	str	r3, [r7, #8]
  for (i=0; i<logsLen; i++)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <variableGetIndex+0x70>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	dbe4      	blt.n	8006eb2 <variableGetIndex+0x12>
 8006ee8:	e000      	b.n	8006eec <variableGetIndex+0x4c>
        break;
 8006eea:	bf00      	nop
    }
  }

  if (i>=logsLen)
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <variableGetIndex+0x70>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	db02      	blt.n	8006efc <variableGetIndex+0x5c>
    return -1;
 8006ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006efa:	e000      	b.n	8006efe <variableGetIndex+0x5e>

  return i;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	20006a98 	.word	0x20006a98
 8006f10:	20006a9c 	.word	0x20006a9c

08006f14 <opsMalloc>:

static struct log_ops * opsMalloc()
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
  int i;

  for (i=0;i<LOG_MAX_OPS; i++)
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	e00a      	b.n	8006f36 <opsMalloc+0x22>
      if (logOps[i].variable == NULL) break;
 8006f20:	4a0f      	ldr	r2, [pc, #60]	; (8006f60 <opsMalloc+0x4c>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	4413      	add	r3, r2
 8006f28:	3308      	adds	r3, #8
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <opsMalloc+0x2a>
  for (i=0;i<LOG_MAX_OPS; i++)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3301      	adds	r3, #1
 8006f34:	607b      	str	r3, [r7, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b7f      	cmp	r3, #127	; 0x7f
 8006f3a:	ddf1      	ble.n	8006f20 <opsMalloc+0xc>
 8006f3c:	e000      	b.n	8006f40 <opsMalloc+0x2c>
      if (logOps[i].variable == NULL) break;
 8006f3e:	bf00      	nop

  if (i >= LOG_MAX_OPS)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b7f      	cmp	r3, #127	; 0x7f
 8006f44:	dd01      	ble.n	8006f4a <opsMalloc+0x36>
      return NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e003      	b.n	8006f52 <opsMalloc+0x3e>

  return &logOps[i];
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	011b      	lsls	r3, r3, #4
 8006f4e:	4a04      	ldr	r2, [pc, #16]	; (8006f60 <opsMalloc+0x4c>)
 8006f50:	4413      	add	r3, r2
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20002e14 	.word	0x20002e14

08006f64 <opsFree>:

static void opsFree(struct log_ops * ops)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  ops->variable = NULL;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	609a      	str	r2, [r3, #8]
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <blockCalcLength>:

static int blockCalcLength(struct log_block * block)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  struct log_ops * ops;
  int len = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60bb      	str	r3, [r7, #8]

  for (ops = block->ops; ops; ops = ops->next)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	e00e      	b.n	8006fb2 <blockCalcLength+0x32>
    len += typeLength[ops->logType];
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	791b      	ldrb	r3, [r3, #4]
 8006f98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <blockCalcLength+0x48>)
 8006fa2:	5c9b      	ldrb	r3, [r3, r2]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]
  for (ops = block->ops; ops; ops = ops->next)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1ed      	bne.n	8006f94 <blockCalcLength+0x14>

  return len;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	0801c524 	.word	0x0801c524

08006fcc <blockAppendOps>:

void blockAppendOps(struct log_block * block, struct log_ops * ops)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  struct log_ops * o;

  ops->next = NULL;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

  if (block->ops == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d103      	bne.n	8006fec <blockAppendOps+0x20>
    block->ops = ops;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
  {
    for (o = block->ops; o->next; o = o->next);

    o->next = ops;
  }
}
 8006fea:	e00d      	b.n	8007008 <blockAppendOps+0x3c>
    for (o = block->ops; o->next; o = o->next);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e002      	b.n	8006ffa <blockAppendOps+0x2e>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f8      	bne.n	8006ff4 <blockAppendOps+0x28>
    o->next = ops;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	601a      	str	r2, [r3, #0]
}
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <logReset>:

static void logReset(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
  int i;

  if (isInit)
 800701a:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <logReset+0xb4>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d029      	beq.n	8007076 <logReset+0x62>
  {
    //Stop and delete all started log blocks
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
 8007026:	e023      	b.n	8007070 <logReset+0x5c>
      if (logBlocks[i].id != -1)
 8007028:	4928      	ldr	r1, [pc, #160]	; (80070cc <logReset+0xb8>)
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4613      	mov	r3, r2
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	440b      	add	r3, r1
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703c:	d015      	beq.n	800706a <logReset+0x56>
      {
        logStopBlock(logBlocks[i].id);
 800703e:	4923      	ldr	r1, [pc, #140]	; (80070cc <logReset+0xb8>)
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff fcaa 	bl	80069a8 <logStopBlock>
        logDeleteBlock(logBlocks[i].id);
 8007054:	491d      	ldr	r1, [pc, #116]	; (80070cc <logReset+0xb8>)
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fbc5 	bl	80067f4 <logDeleteBlock>
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3301      	adds	r3, #1
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b0f      	cmp	r3, #15
 8007074:	ddd8      	ble.n	8007028 <logReset+0x14>
      }
  }

  //Force free all the log block objects
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8007076:	2300      	movs	r3, #0
 8007078:	607b      	str	r3, [r7, #4]
 800707a:	e00c      	b.n	8007096 <logReset+0x82>
    logBlocks[i].id = BLOCK_ID_FREE;
 800707c:	4913      	ldr	r1, [pc, #76]	; (80070cc <logReset+0xb8>)
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800708e:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	3301      	adds	r3, #1
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b0f      	cmp	r3, #15
 800709a:	ddef      	ble.n	800707c <logReset+0x68>

  //Force free the log ops
  for (i=0; i<LOG_MAX_OPS; i++)
 800709c:	2300      	movs	r3, #0
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e009      	b.n	80070b6 <logReset+0xa2>
    logOps[i].variable = NULL;
 80070a2:	4a0b      	ldr	r2, [pc, #44]	; (80070d0 <logReset+0xbc>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	4413      	add	r3, r2
 80070aa:	3308      	adds	r3, #8
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
  for (i=0; i<LOG_MAX_OPS; i++)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3301      	adds	r3, #1
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b7f      	cmp	r3, #127	; 0x7f
 80070ba:	ddf2      	ble.n	80070a2 <logReset+0x8e>
}
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20006ac8 	.word	0x20006ac8
 80070cc:	20003614 	.word	0x20003614
 80070d0:	20002e14 	.word	0x20002e14

080070d4 <logGetType>:

  return invalidVarId;
}

inline int logGetType(logVarId_t varid)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	80fb      	strh	r3, [r7, #6]
  return logs[varid].type & LOG_TYPE_MASK;
 80070de:	4b08      	ldr	r3, [pc, #32]	; (8007100 <logGetType+0x2c>)
 80070e0:	6819      	ldr	r1, [r3, #0]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	4613      	mov	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 030f 	and.w	r3, r3, #15
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	20006a98 	.word	0x20006a98

08007104 <acquisitionTypeFromLogType>:
unsigned int logGetUint(logVarId_t varid)
{
  return (unsigned int)logGetInt(varid);
}

static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType) {
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  if (logType & LOG_BY_FUNCTION) {
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <acquisitionTypeFromLogType+0x18>
    return acqType_function;
 8007118:	2301      	movs	r3, #1
 800711a:	e000      	b.n	800711e <acquisitionTypeFromLogType+0x1a>
  }

  return acqType_memory;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <single2half>:
 *  * Rounding seems to give at least 11 bits precision
 *  * Faster and smaller than the GCC implementation
 */

uint16_t single2half(float number)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t num = *((uint32_t*)&number);
 8007134:	1d3b      	adds	r3, r7, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	617b      	str	r3, [r7, #20]
    uint32_t s = num>>31;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	0fdb      	lsrs	r3, r3, #31
 800713e:	613b      	str	r3, [r7, #16]
    uint32_t e = (num>>23)&0x0FF;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	0ddb      	lsrs	r3, r3, #23
 8007144:	b2db      	uxtb	r3, r3
 8007146:	60fb      	str	r3, [r7, #12]

    if ((e==255) && (num&0x007fffff))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2bff      	cmp	r3, #255	; 0xff
 800714c:	d107      	bne.n	800715e <single2half+0x34>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <single2half+0x34>
        return 0x7E00; // NaN
 8007158:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 800715c:	e02c      	b.n	80071b8 <single2half+0x8e>
    if (e>(127+15))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b8e      	cmp	r3, #142	; 0x8e
 8007162:	d908      	bls.n	8007176 <single2half+0x4c>
        return s?0xFC00:0x7C00;  //+/- inf
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <single2half+0x46>
 800716a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800716e:	e023      	b.n	80071b8 <single2half+0x8e>
 8007170:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8007174:	e020      	b.n	80071b8 <single2half+0x8e>
    if (e<(127-15))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b6f      	cmp	r3, #111	; 0x6f
 800717a:	d801      	bhi.n	8007180 <single2half+0x56>
        return 0; //Do not handle generating subnormalised representation
 800717c:	2300      	movs	r3, #0
 800717e:	e01b      	b.n	80071b8 <single2half+0x8e>

    return (s<<15) | ((e-127+15)<<10) | (((num>>13)&0x3FF)+((num>>12)&0x01));
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	b29b      	uxth	r3, r3
 8007184:	03db      	lsls	r3, r3, #15
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b70      	subs	r3, #112	; 0x70
 800718e:	b29b      	uxth	r3, r3
 8007190:	029b      	lsls	r3, r3, #10
 8007192:	b29b      	uxth	r3, r3
 8007194:	4313      	orrs	r3, r2
 8007196:	b29a      	uxth	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	0b5b      	lsrs	r3, r3, #13
 800719c:	b29b      	uxth	r3, r3
 800719e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071a2:	b299      	uxth	r1, r3
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	0b1b      	lsrs	r3, r3, #12
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	440b      	add	r3, r1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	4313      	orrs	r3, r2
 80071b6:	b29b      	uxth	r3, r3
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <paramGetDefault>:
extern int _stext;
extern int _etext;
static const uint64_t dummyZero64 = 0;

static void * paramGetDefault(int index)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t valueRelative;
  uint32_t address;
  void *ptrDefaultValue;

  address = (uint32_t)(params[index].address);
 80071cc:	4b17      	ldr	r3, [pc, #92]	; (800722c <paramGetDefault+0x68>)
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	613b      	str	r3, [r7, #16]

  // Is variable in data section?
  if (address >= (uint32_t)&_sdata &&
 80071e0:	4a13      	ldr	r2, [pc, #76]	; (8007230 <paramGetDefault+0x6c>)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d30c      	bcc.n	8007202 <paramGetDefault+0x3e>
      address <= (uint32_t)&_edata)
 80071e8:	4a12      	ldr	r2, [pc, #72]	; (8007234 <paramGetDefault+0x70>)
  if (address >= (uint32_t)&_sdata &&
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d808      	bhi.n	8007202 <paramGetDefault+0x3e>
  {
    valueRelative =  address - (uint32_t)&_sdata;
 80071f0:	4a0f      	ldr	r2, [pc, #60]	; (8007230 <paramGetDefault+0x6c>)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
    ptrDefaultValue = (void *)((uint32_t)&_sidata + valueRelative);
 80071f8:	4a0f      	ldr	r2, [pc, #60]	; (8007238 <paramGetDefault+0x74>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e00c      	b.n	800721c <paramGetDefault+0x58>
  }
  // Is variable in flash section?
  else if (address >= (uint32_t)&_stext &&
 8007202:	4a0e      	ldr	r2, [pc, #56]	; (800723c <paramGetDefault+0x78>)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4293      	cmp	r3, r2
 8007208:	d306      	bcc.n	8007218 <paramGetDefault+0x54>
           address <= (uint32_t)&_etext)
 800720a:	4a0d      	ldr	r2, [pc, #52]	; (8007240 <paramGetDefault+0x7c>)
  else if (address >= (uint32_t)&_stext &&
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	4293      	cmp	r3, r2
 8007210:	d802      	bhi.n	8007218 <paramGetDefault+0x54>
  {
    ptrDefaultValue = (void *)(address);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	e001      	b.n	800721c <paramGetDefault+0x58>
  }
  // It is zero
  else
  {
    ptrDefaultValue = (void *)&dummyZero64;
 8007218:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <paramGetDefault+0x80>)
 800721a:	617b      	str	r3, [r7, #20]
  }

  return ptrDefaultValue;
 800721c:	697b      	ldr	r3, [r7, #20]
}
 800721e:	4618      	mov	r0, r3
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20006aec 	.word	0x20006aec
 8007230:	20000000 	.word	0x20000000
 8007234:	2000061c 	.word	0x2000061c
 8007238:	0801c8e4 	.word	0x0801c8e4
 800723c:	08000190 	.word	0x08000190
 8007240:	08019e04 	.word	0x08019e04
 8007244:	0801c530 	.word	0x0801c530

08007248 <paramSet>:
 * @param data  The variable data
 *
 * @return number of bytes set
 **/
static int paramSet(uint16_t index, void *data)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 8007258:	4b1b      	ldr	r3, [pc, #108]	; (80072c8 <paramSet+0x80>)
 800725a:	6819      	ldr	r1, [r3, #0]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	2b03      	cmp	r3, #3
 8007270:	d816      	bhi.n	80072a0 <paramSet+0x58>
 8007272:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <paramSet+0x30>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	08007289 	.word	0x08007289
 800727c:	0800728f 	.word	0x0800728f
 8007280:	08007295 	.word	0x08007295
 8007284:	0800729b 	.word	0x0800729b
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8007288:	2301      	movs	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
      break;
 800728c:	e008      	b.n	80072a0 <paramSet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 800728e:	2302      	movs	r3, #2
 8007290:	60fb      	str	r3, [r7, #12]
      break;
 8007292:	e005      	b.n	80072a0 <paramSet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8007294:	2304      	movs	r3, #4
 8007296:	60fb      	str	r3, [r7, #12]
      break;
 8007298:	e002      	b.n	80072a0 <paramSet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 800729a:	2308      	movs	r3, #8
 800729c:	60fb      	str	r3, [r7, #12]
      break;
 800729e:	bf00      	nop
  }

 	memcpy(params[index].address, data, paramLength);
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <paramSet+0x80>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	88fa      	ldrh	r2, [r7, #6]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f010 fce3 	bl	8017c82 <memcpy>

  return paramLength;
 80072bc:	68fb      	ldr	r3, [r7, #12]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20006aec 	.word	0x20006aec

080072cc <paramGet>:
 * @param data  The variable data
 *
 * @return number of bytes read
 **/
static int paramGet(uint16_t index, void *data)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	6039      	str	r1, [r7, #0]
 80072d6:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 80072dc:	4b1b      	ldr	r3, [pc, #108]	; (800734c <paramGet+0x80>)
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	88fa      	ldrh	r2, [r7, #6]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d816      	bhi.n	8007324 <paramGet+0x58>
 80072f6:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <paramGet+0x30>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	0800730d 	.word	0x0800730d
 8007300:	08007313 	.word	0x08007313
 8007304:	08007319 	.word	0x08007319
 8007308:	0800731f 	.word	0x0800731f
  {
    case PARAM_1BYTE:
      paramLength = 1;
 800730c:	2301      	movs	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
      break;
 8007310:	e008      	b.n	8007324 <paramGet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 8007312:	2302      	movs	r3, #2
 8007314:	60fb      	str	r3, [r7, #12]
      break;
 8007316:	e005      	b.n	8007324 <paramGet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 8007318:	2304      	movs	r3, #4
 800731a:	60fb      	str	r3, [r7, #12]
      break;
 800731c:	e002      	b.n	8007324 <paramGet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 800731e:	2308      	movs	r3, #8
 8007320:	60fb      	str	r3, [r7, #12]
      break;
 8007322:	bf00      	nop
  }

 	memcpy(data, params[index].address, paramLength);
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <paramGet+0x80>)
 8007326:	6819      	ldr	r1, [r3, #0]
 8007328:	88fa      	ldrh	r2, [r7, #6]
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4619      	mov	r1, r3
 800733a:	6838      	ldr	r0, [r7, #0]
 800733c:	f010 fca1 	bl	8017c82 <memcpy>

  return paramLength;
 8007340:	68fb      	ldr	r3, [r7, #12]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20006aec 	.word	0x20006aec

08007350 <paramGetLen>:
 * Get param on [index] length in bytes
 *
 * @return number of bytes
 **/
static int paramGetLen(uint16_t index)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 800735e:	4b16      	ldr	r3, [pc, #88]	; (80073b8 <paramGetLen+0x68>)
 8007360:	6819      	ldr	r1, [r3, #0]
 8007362:	88fa      	ldrh	r2, [r7, #6]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	440b      	add	r3, r1
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	2b03      	cmp	r3, #3
 8007376:	d817      	bhi.n	80073a8 <paramGetLen+0x58>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <paramGetLen+0x30>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007391 	.word	0x08007391
 8007384:	08007397 	.word	0x08007397
 8007388:	0800739d 	.word	0x0800739d
 800738c:	080073a3 	.word	0x080073a3
  {
    case PARAM_1BYTE:
      paramLength = 1;
 8007390:	2301      	movs	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
      break;
 8007394:	e008      	b.n	80073a8 <paramGetLen+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 8007396:	2302      	movs	r3, #2
 8007398:	60fb      	str	r3, [r7, #12]
      break;
 800739a:	e005      	b.n	80073a8 <paramGetLen+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 800739c:	2304      	movs	r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
      break;
 80073a0:	e002      	b.n	80073a8 <paramGetLen+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 80073a2:	2308      	movs	r3, #8
 80073a4:	60fb      	str	r3, [r7, #12]
      break;
 80073a6:	bf00      	nop
  }

  return paramLength;
 80073a8:	68fb      	ldr	r3, [r7, #12]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20006aec 	.word	0x20006aec

080073bc <paramLogicInit>:

void paramLogicInit(void)
{
 80073bc:	b590      	push	{r4, r7, lr}
 80073be:	b08f      	sub	sp, #60	; 0x3c
 80073c0:	af00      	add	r7, sp, #0
  int i;
  const char* group = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	627b      	str	r3, [r7, #36]	; 0x24
  int groupLength = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t buf[30];

#ifndef UNIT_TEST_MODE
  params = &_param_start;
 80073ca:	4b66      	ldr	r3, [pc, #408]	; (8007564 <paramLogicInit+0x1a8>)
 80073cc:	4a66      	ldr	r2, [pc, #408]	; (8007568 <paramLogicInit+0x1ac>)
 80073ce:	601a      	str	r2, [r3, #0]
  paramsLen = &_param_stop - &_param_start;
 80073d0:	4a66      	ldr	r2, [pc, #408]	; (800756c <paramLogicInit+0x1b0>)
 80073d2:	4b65      	ldr	r3, [pc, #404]	; (8007568 <paramLogicInit+0x1ac>)
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	109b      	asrs	r3, r3, #2
 80073d8:	4a65      	ldr	r2, [pc, #404]	; (8007570 <paramLogicInit+0x1b4>)
 80073da:	fb02 f303 	mul.w	r3, r2, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	4b64      	ldr	r3, [pc, #400]	; (8007574 <paramLogicInit+0x1b8>)
 80073e2:	601a      	str	r2, [r3, #0]
#else
  params = _param_start;
  paramsLen = _param_stop - _param_start;
#endif
  // Calculate a hash of the toc by chaining description of each elements
  paramsCrc = 0;
 80073e4:	4b64      	ldr	r3, [pc, #400]	; (8007578 <paramLogicInit+0x1bc>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
  for (int i=0; i<paramsLen; i++)
 80073ea:	2300      	movs	r3, #0
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ee:	e091      	b.n	8007514 <paramLogicInit+0x158>
  {
    int len = 5;
 80073f0:	2305      	movs	r3, #5
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f4:	4b60      	ldr	r3, [pc, #384]	; (8007578 <paramLogicInit+0x1bc>)
 80073f6:	681b      	ldr	r3, [r3, #0]
    memcpy(&buf[0], &paramsCrc, 4);
 80073f8:	607b      	str	r3, [r7, #4]
    buf[4] = params[i].type;
 80073fa:	4b5a      	ldr	r3, [pc, #360]	; (8007564 <paramLogicInit+0x1a8>)
 80073fc:	6819      	ldr	r1, [r3, #0]
 80073fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	723b      	strb	r3, [r7, #8]
    if (params[i].type & PARAM_GROUP) {
 800740e:	4b55      	ldr	r3, [pc, #340]	; (8007564 <paramLogicInit+0x1a8>)
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	b25b      	sxtb	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	da1c      	bge.n	8007460 <paramLogicInit+0xa4>
      if (params[i].type & PARAM_START) {
 8007426:	4b4f      	ldr	r3, [pc, #316]	; (8007564 <paramLogicInit+0x1a8>)
 8007428:	6819      	ldr	r1, [r3, #0]
 800742a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d026      	beq.n	800748e <paramLogicInit+0xd2>
        group = params[i].name;
 8007440:	4b48      	ldr	r3, [pc, #288]	; (8007564 <paramLogicInit+0x1a8>)
 8007442:	6819      	ldr	r1, [r3, #0]
 8007444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	440b      	add	r3, r1
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
        groupLength = strlen(group);
 8007454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007456:	f7f8 ff1b 	bl	8000290 <strlen>
 800745a:	4603      	mov	r3, r0
 800745c:	633b      	str	r3, [r7, #48]	; 0x30
 800745e:	e016      	b.n	800748e <paramLogicInit+0xd2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 4 + strlen(params[i].name) + groupLength + 2
      if (strlen(params[i].name) + groupLength + 2 > 26) {
 8007460:	4b40      	ldr	r3, [pc, #256]	; (8007564 <paramLogicInit+0x1a8>)
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	4618      	mov	r0, r3
 8007474:	f7f8 ff0c 	bl	8000290 <strlen>
 8007478:	4602      	mov	r2, r0
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	4413      	add	r3, r2
 800747e:	3302      	adds	r3, #2
 8007480:	2b1a      	cmp	r3, #26
 8007482:	d904      	bls.n	800748e <paramLogicInit+0xd2>
        PARAM_ERROR("'%s.%s' too long\n", group, params[i].name);
        ASSERT_FAILED();
 8007484:	22fe      	movs	r2, #254	; 0xfe
 8007486:	493d      	ldr	r1, [pc, #244]	; (800757c <paramLogicInit+0x1c0>)
 8007488:	483d      	ldr	r0, [pc, #244]	; (8007580 <paramLogicInit+0x1c4>)
 800748a:	f7fe f8df 	bl	800564c <assertFail>
      }
    }

    if (params[i].name) {
 800748e:	4b35      	ldr	r3, [pc, #212]	; (8007564 <paramLogicInit+0x1a8>)
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02b      	beq.n	80074fc <paramLogicInit+0x140>
      memcpy(&buf[5], params[i].name, strlen(params[i].name));
 80074a4:	4b2f      	ldr	r3, [pc, #188]	; (8007564 <paramLogicInit+0x1a8>)
 80074a6:	6819      	ldr	r1, [r3, #0]
 80074a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074aa:	4613      	mov	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	685c      	ldr	r4, [r3, #4]
 80074b6:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <paramLogicInit+0x1a8>)
 80074b8:	6819      	ldr	r1, [r3, #0]
 80074ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7f8 fee1 	bl	8000290 <strlen>
 80074ce:	4602      	mov	r2, r0
 80074d0:	1d3b      	adds	r3, r7, #4
 80074d2:	3305      	adds	r3, #5
 80074d4:	4621      	mov	r1, r4
 80074d6:	4618      	mov	r0, r3
 80074d8:	f010 fbd3 	bl	8017c82 <memcpy>
      len += strlen(params[i].name);
 80074dc:	4b21      	ldr	r3, [pc, #132]	; (8007564 <paramLogicInit+0x1a8>)
 80074de:	6819      	ldr	r1, [r3, #0]
 80074e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7f8 fece 	bl	8000290 <strlen>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	4413      	add	r3, r2
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    paramsCrc = crc32CalculateBuffer(buf, len);
 80074fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074fe:	1d3b      	adds	r3, r7, #4
 8007500:	4611      	mov	r1, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe f959 	bl	80057ba <crc32CalculateBuffer>
 8007508:	4603      	mov	r3, r0
 800750a:	4a1b      	ldr	r2, [pc, #108]	; (8007578 <paramLogicInit+0x1bc>)
 800750c:	6013      	str	r3, [r2, #0]
  for (int i=0; i<paramsLen; i++)
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	3301      	adds	r3, #1
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007514:	4b17      	ldr	r3, [pc, #92]	; (8007574 <paramLogicInit+0x1b8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800751a:	429a      	cmp	r2, r3
 800751c:	f6ff af68 	blt.w	80073f0 <paramLogicInit+0x34>
  }

  for (i=0; i<paramsLen; i++)
 8007520:	2300      	movs	r3, #0
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	e014      	b.n	8007550 <paramLogicInit+0x194>
  {
    if(!(params[i].type & PARAM_GROUP))
 8007526:	4b0f      	ldr	r3, [pc, #60]	; (8007564 <paramLogicInit+0x1a8>)
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	440b      	add	r3, r1
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b25b      	sxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	db05      	blt.n	800754a <paramLogicInit+0x18e>
      paramsCount++;
 800753e:	4b11      	ldr	r3, [pc, #68]	; (8007584 <paramLogicInit+0x1c8>)
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <paramLogicInit+0x1c8>)
 8007548:	801a      	strh	r2, [r3, #0]
  for (i=0; i<paramsLen; i++)
 800754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754c:	3301      	adds	r3, #1
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
 8007550:	4b08      	ldr	r3, [pc, #32]	; (8007574 <paramLogicInit+0x1b8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007556:	429a      	cmp	r2, r3
 8007558:	dbe5      	blt.n	8007526 <paramLogicInit+0x16a>
  }
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	373c      	adds	r7, #60	; 0x3c
 8007560:	46bd      	mov	sp, r7
 8007562:	bd90      	pop	{r4, r7, pc}
 8007564:	20006aec 	.word	0x20006aec
 8007568:	08019864 	.word	0x08019864
 800756c:	08019b70 	.word	0x08019b70
 8007570:	cccccccd 	.word	0xcccccccd
 8007574:	20006af0 	.word	0x20006af0
 8007578:	20006af4 	.word	0x20006af4
 800757c:	0801ad3c 	.word	0x0801ad3c
 8007580:	0801ad5c 	.word	0x0801ad5c
 8007584:	20006af8 	.word	0x20006af8

08007588 <paramTOCProcess>:

void paramTOCProcess(CRTPPacket *p, int command)
{
 8007588:	b5b0      	push	{r4, r5, r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  int ptr = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
  char * group = "";
 8007596:	4b8e      	ldr	r3, [pc, #568]	; (80077d0 <paramTOCProcess+0x248>)
 8007598:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 800759a:	2300      	movs	r3, #0
 800759c:	81fb      	strh	r3, [r7, #14]
  uint16_t paramId=0;
 800759e:	2300      	movs	r3, #0
 80075a0:	81bb      	strh	r3, [r7, #12]

  switch (command)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	f200 810e 	bhi.w	80077c6 <paramTOCProcess+0x23e>
 80075aa:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <paramTOCProcess+0x28>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075f1 	.word	0x080075f1
 80075b4:	080075c1 	.word	0x080075c1
 80075b8:	08007649 	.word	0x08007649
 80075bc:	08007613 	.word	0x08007613
  {
    case CMD_GET_INFO: //Get info packet about the param implementation (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 80075c0:	4984      	ldr	r1, [pc, #528]	; (80077d4 <paramTOCProcess+0x24c>)
 80075c2:	2000      	movs	r0, #0
 80075c4:	f7fe f814 	bl	80055f0 <SEGGER_RTT_printf>
      ptr = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
      group = "";
 80075cc:	4b80      	ldr	r3, [pc, #512]	; (80077d0 <paramTOCProcess+0x248>)
 80075ce:	613b      	str	r3, [r7, #16]
      p->header = CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	705a      	strb	r2, [r3, #1]
      p->size = 4;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2204      	movs	r2, #4
 80075da:	701a      	strb	r2, [r3, #0]
      p->data[0] = CMD_GET_INFO;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	709a      	strb	r2, [r3, #2]
      p->data[1] = 0; // Param count
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	70da      	strb	r2, [r3, #3]
      crtpSendPacketBlock(p);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7fa f855 	bl	8001698 <crtpSendPacketBlock>
      break;
 80075ee:	e0ea      	b.n	80077c6 <paramTOCProcess+0x23e>
    case CMD_GET_ITEM:  //Get param variable (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 80075f0:	4978      	ldr	r1, [pc, #480]	; (80077d4 <paramTOCProcess+0x24c>)
 80075f2:	2000      	movs	r0, #0
 80075f4:	f7fd fffc 	bl	80055f0 <SEGGER_RTT_printf>
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	705a      	strb	r2, [r3, #1]
      p->data[0]=CMD_GET_ITEM;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	709a      	strb	r2, [r3, #2]
      p->size=1;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fa f844 	bl	8001698 <crtpSendPacketBlock>
      break;
 8007610:	e0d9      	b.n	80077c6 <paramTOCProcess+0x23e>
    case CMD_GET_INFO_V2: //Get info packet about the param implementation
      ptr = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
      group = "";
 8007616:	4b6e      	ldr	r3, [pc, #440]	; (80077d0 <paramTOCProcess+0x248>)
 8007618:	613b      	str	r3, [r7, #16]
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	705a      	strb	r2, [r3, #1]
      p->size=7;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2207      	movs	r2, #7
 8007624:	701a      	strb	r2, [r3, #0]
      p->data[0]=CMD_GET_INFO_V2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2203      	movs	r2, #3
 800762a:	709a      	strb	r2, [r3, #2]
      memcpy(&p->data[1], &paramsCount, 2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3303      	adds	r3, #3
 8007630:	4a69      	ldr	r2, [pc, #420]	; (80077d8 <paramTOCProcess+0x250>)
 8007632:	8812      	ldrh	r2, [r2, #0]
 8007634:	801a      	strh	r2, [r3, #0]
      memcpy(&p->data[3], &paramsCrc, 4);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3305      	adds	r3, #5
 800763a:	4a68      	ldr	r2, [pc, #416]	; (80077dc <paramTOCProcess+0x254>)
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	601a      	str	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7fa f829 	bl	8001698 <crtpSendPacketBlock>
      break;
 8007646:	e0be      	b.n	80077c6 <paramTOCProcess+0x23e>
    case CMD_GET_ITEM_V2:  //Get param variable
      memcpy(&paramId, &p->data[1], 2);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3303      	adds	r3, #3
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	81bb      	strh	r3, [r7, #12]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	e030      	b.n	80076ba <paramTOCProcess+0x132>
      {
        if (params[ptr].type & PARAM_GROUP)
 8007658:	4b61      	ldr	r3, [pc, #388]	; (80077e0 <paramTOCProcess+0x258>)
 800765a:	6819      	ldr	r1, [r3, #0]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b25b      	sxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	da1a      	bge.n	80076a6 <paramTOCProcess+0x11e>
        {
          if (params[ptr].type & PARAM_START)
 8007670:	4b5b      	ldr	r3, [pc, #364]	; (80077e0 <paramTOCProcess+0x258>)
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <paramTOCProcess+0x118>
            group = params[ptr].name;
 800768a:	4b55      	ldr	r3, [pc, #340]	; (80077e0 <paramTOCProcess+0x258>)
 800768c:	6819      	ldr	r1, [r3, #0]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	440b      	add	r3, r1
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	e009      	b.n	80076b4 <paramTOCProcess+0x12c>
          else
            group = "";
 80076a0:	4b4b      	ldr	r3, [pc, #300]	; (80077d0 <paramTOCProcess+0x248>)
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	e006      	b.n	80076b4 <paramTOCProcess+0x12c>
        }
        else                          //Ptr points a variable
        {
          if (n==paramId)
 80076a6:	89bb      	ldrh	r3, [r7, #12]
 80076a8:	89fa      	ldrh	r2, [r7, #14]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d00b      	beq.n	80076c6 <paramTOCProcess+0x13e>
            break;
          n++;
 80076ae:	89fb      	ldrh	r3, [r7, #14]
 80076b0:	3301      	adds	r3, #1
 80076b2:	81fb      	strh	r3, [r7, #14]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	3301      	adds	r3, #1
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	4b4a      	ldr	r3, [pc, #296]	; (80077e4 <paramTOCProcess+0x25c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	dbc9      	blt.n	8007658 <paramTOCProcess+0xd0>
 80076c4:	e000      	b.n	80076c8 <paramTOCProcess+0x140>
            break;
 80076c6:	bf00      	nop
        }
      }

      if (ptr<paramsLen)
 80076c8:	4b46      	ldr	r3, [pc, #280]	; (80077e4 <paramTOCProcess+0x25c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	da6c      	bge.n	80077ac <paramTOCProcess+0x224>
      {
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	709a      	strb	r2, [r3, #2]
        memcpy(&p->data[1], &paramId, 2);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3303      	adds	r3, #3
 80076e2:	89ba      	ldrh	r2, [r7, #12]
 80076e4:	801a      	strh	r2, [r3, #0]
        p->data[3] = params[ptr].type;
 80076e6:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <paramTOCProcess+0x258>)
 80076e8:	6819      	ldr	r1, [r3, #0]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	715a      	strb	r2, [r3, #5]
        p->size = 4 + 2 + strlen(group) + strlen(params[ptr].name);
 80076fc:	6938      	ldr	r0, [r7, #16]
 80076fe:	f7f8 fdc7 	bl	8000290 <strlen>
 8007702:	4603      	mov	r3, r0
 8007704:	b2dc      	uxtb	r4, r3
 8007706:	4b36      	ldr	r3, [pc, #216]	; (80077e0 <paramTOCProcess+0x258>)
 8007708:	6819      	ldr	r1, [r3, #0]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	4618      	mov	r0, r3
 800771a:	f7f8 fdb9 	bl	8000290 <strlen>
 800771e:	4603      	mov	r3, r0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	4423      	add	r3, r4
 8007724:	b2db      	uxtb	r3, r3
 8007726:	3306      	adds	r3, #6
 8007728:	b2da      	uxtb	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	701a      	strb	r2, [r3, #0]
        ASSERT(p->size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b1e      	cmp	r3, #30
 8007734:	d905      	bls.n	8007742 <paramTOCProcess+0x1ba>
 8007736:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800773a:	492b      	ldr	r1, [pc, #172]	; (80077e8 <paramTOCProcess+0x260>)
 800773c:	482b      	ldr	r0, [pc, #172]	; (80077ec <paramTOCProcess+0x264>)
 800773e:	f7fd ff85 	bl	800564c <assertFail>
        memcpy(p->data+4, group, strlen(group)+1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3302      	adds	r3, #2
 8007746:	1d1c      	adds	r4, r3, #4
 8007748:	6938      	ldr	r0, [r7, #16]
 800774a:	f7f8 fda1 	bl	8000290 <strlen>
 800774e:	4603      	mov	r3, r0
 8007750:	3301      	adds	r3, #1
 8007752:	461a      	mov	r2, r3
 8007754:	6939      	ldr	r1, [r7, #16]
 8007756:	4620      	mov	r0, r4
 8007758:	f010 fa93 	bl	8017c82 <memcpy>
        memcpy(p->data+4+strlen(group)+1, params[ptr].name, strlen(params[ptr].name)+1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	1c9c      	adds	r4, r3, #2
 8007760:	6938      	ldr	r0, [r7, #16]
 8007762:	f7f8 fd95 	bl	8000290 <strlen>
 8007766:	4603      	mov	r3, r0
 8007768:	3305      	adds	r3, #5
 800776a:	441c      	add	r4, r3
 800776c:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <paramTOCProcess+0x258>)
 800776e:	6819      	ldr	r1, [r3, #0]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	685d      	ldr	r5, [r3, #4]
 800777e:	4b18      	ldr	r3, [pc, #96]	; (80077e0 <paramTOCProcess+0x258>)
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4613      	mov	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	440b      	add	r3, r1
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	4618      	mov	r0, r3
 8007792:	f7f8 fd7d 	bl	8000290 <strlen>
 8007796:	4603      	mov	r3, r0
 8007798:	3301      	adds	r3, #1
 800779a:	461a      	mov	r2, r3
 800779c:	4629      	mov	r1, r5
 800779e:	4620      	mov	r0, r4
 80077a0:	f010 fa6f 	bl	8017c82 <memcpy>
        crtpSendPacketBlock(p);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7f9 ff77 	bl	8001698 <crtpSendPacketBlock>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
        p->data[0]=CMD_GET_ITEM_V2;
        p->size=1;
        crtpSendPacketBlock(p);
      }
      break;
 80077aa:	e00b      	b.n	80077c4 <paramTOCProcess+0x23c>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2202      	movs	r2, #2
 80077b6:	709a      	strb	r2, [r3, #2]
        p->size=1;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	701a      	strb	r2, [r3, #0]
        crtpSendPacketBlock(p);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7f9 ff6a 	bl	8001698 <crtpSendPacketBlock>
      break;
 80077c4:	bf00      	nop
  }
}
 80077c6:	bf00      	nop
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bdb0      	pop	{r4, r5, r7, pc}
 80077ce:	bf00      	nop
 80077d0:	0801ad5c 	.word	0x0801ad5c
 80077d4:	0801ad60 	.word	0x0801ad60
 80077d8:	20006af8 	.word	0x20006af8
 80077dc:	20006af4 	.word	0x20006af4
 80077e0:	20006aec 	.word	0x20006aec
 80077e4:	20006af0 	.word	0x20006af0
 80077e8:	0801ad3c 	.word	0x0801ad3c
 80077ec:	0801ad88 	.word	0x0801ad88

080077f0 <paramWriteProcess>:

void paramWriteProcess(CRTPPacket *p)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3302      	adds	r3, #2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	81fb      	strh	r3, [r7, #14]

  void* valptr = &p->data[2];
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3304      	adds	r3, #4
 8007806:	617b      	str	r3, [r7, #20]
  int index;

  index = variableGetIndex(id);
 8007808:	89fb      	ldrh	r3, [r7, #14]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f90e 	bl	8007a2c <variableGetIndex>
 8007810:	6138      	str	r0, [r7, #16]

  if (index < 0) {
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	da09      	bge.n	800782c <paramWriteProcess+0x3c>
    p->data[2] = ENOENT;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2203      	movs	r2, #3
 8007822:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7f9 ff37 	bl	8001698 <crtpSendPacketBlock>
    return;
 800782a:	e01a      	b.n	8007862 <paramWriteProcess+0x72>
  }

  if (params[index].type & PARAM_RONLY)
 800782c:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <paramWriteProcess+0x78>)
 800782e:	6819      	ldr	r1, [r3, #0]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	440b      	add	r3, r1
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10c      	bne.n	8007860 <paramWriteProcess+0x70>
    return;

  paramSet(index, valptr);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	b29b      	uxth	r3, r3
 800784a:	6979      	ldr	r1, [r7, #20]
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fcfb 	bl	8007248 <paramSet>

  crtpSendPacketBlock(p);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7f9 ff20 	bl	8001698 <crtpSendPacketBlock>

  paramNotifyChanged(index);
 8007858:	6938      	ldr	r0, [r7, #16]
 800785a:	f000 f807 	bl	800786c <paramNotifyChanged>
 800785e:	e000      	b.n	8007862 <paramWriteProcess+0x72>
    return;
 8007860:	bf00      	nop
}
 8007862:	3718      	adds	r7, #24
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20006aec 	.word	0x20006aec

0800786c <paramNotifyChanged>:

static void paramNotifyChanged(int index) {
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  if (params[index].callback) {
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <paramNotifyChanged+0x3c>)
 8007876:	6819      	ldr	r1, [r3, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <paramNotifyChanged+0x32>
    params[index].callback();
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <paramNotifyChanged+0x3c>)
 800788c:	6819      	ldr	r1, [r3, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	4798      	blx	r3
  }
}
 800789e:	bf00      	nop
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20006aec 	.word	0x20006aec

080078ac <paramWriteByNameProcess>:

static char paramWriteByNameProcess(char* group, char* name, int type, void *valptr) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
  int index;
  char *pgroup = "";
 80078ba:	4b40      	ldr	r3, [pc, #256]	; (80079bc <paramWriteByNameProcess+0x110>)
 80078bc:	613b      	str	r3, [r7, #16]

  for (index = 0; index < paramsLen; index++) //Ptr points a group
 80078be:	2300      	movs	r3, #0
 80078c0:	617b      	str	r3, [r7, #20]
 80078c2:	e040      	b.n	8007946 <paramWriteByNameProcess+0x9a>
  {
    if (params[index].type & PARAM_GROUP)
 80078c4:	4b3e      	ldr	r3, [pc, #248]	; (80079c0 <paramWriteByNameProcess+0x114>)
 80078c6:	6819      	ldr	r1, [r3, #0]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	b25b      	sxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	da1a      	bge.n	8007912 <paramWriteByNameProcess+0x66>
    {
      if (params[index].type & PARAM_START)
 80078dc:	4b38      	ldr	r3, [pc, #224]	; (80079c0 <paramWriteByNameProcess+0x114>)
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <paramWriteByNameProcess+0x60>
        pgroup = params[index].name;
 80078f6:	4b32      	ldr	r3, [pc, #200]	; (80079c0 <paramWriteByNameProcess+0x114>)
 80078f8:	6819      	ldr	r1, [r3, #0]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	440b      	add	r3, r1
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	e019      	b.n	8007940 <paramWriteByNameProcess+0x94>
      else
        pgroup = "";
 800790c:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <paramWriteByNameProcess+0x110>)
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	e016      	b.n	8007940 <paramWriteByNameProcess+0x94>
    }
    else                          //Ptr points a variable
    {
      if (!strcmp(params[index].name, name) && !strcmp(pgroup, group))
 8007912:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <paramWriteByNameProcess+0x114>)
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	4618      	mov	r0, r3
 8007928:	f7f8 fc52 	bl	80001d0 <strcmp>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <paramWriteByNameProcess+0x94>
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	6938      	ldr	r0, [r7, #16]
 8007936:	f7f8 fc4b 	bl	80001d0 <strcmp>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d008      	beq.n	8007952 <paramWriteByNameProcess+0xa6>
  for (index = 0; index < paramsLen; index++) //Ptr points a group
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3301      	adds	r3, #1
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <paramWriteByNameProcess+0x118>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	429a      	cmp	r2, r3
 800794e:	dbb9      	blt.n	80078c4 <paramWriteByNameProcess+0x18>
 8007950:	e000      	b.n	8007954 <paramWriteByNameProcess+0xa8>
        break;
 8007952:	bf00      	nop
    }
  }

  if (index >= paramsLen) {
 8007954:	4b1b      	ldr	r3, [pc, #108]	; (80079c4 <paramWriteByNameProcess+0x118>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	429a      	cmp	r2, r3
 800795c:	db01      	blt.n	8007962 <paramWriteByNameProcess+0xb6>
    return ENOENT;
 800795e:	2302      	movs	r3, #2
 8007960:	e028      	b.n	80079b4 <paramWriteByNameProcess+0x108>
  }

  if (type != (params[index].type & (~(PARAM_CORE | PARAM_RONLY | PARAM_EXTENDED)))) {
 8007962:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <paramWriteByNameProcess+0x114>)
 8007964:	6819      	ldr	r1, [r3, #0]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d001      	beq.n	8007982 <paramWriteByNameProcess+0xd6>
    return EINVAL;
 800797e:	2316      	movs	r3, #22
 8007980:	e018      	b.n	80079b4 <paramWriteByNameProcess+0x108>
  }

  if (params[index].type & PARAM_RONLY) {
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <paramWriteByNameProcess+0x114>)
 8007984:	6819      	ldr	r1, [r3, #0]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <paramWriteByNameProcess+0xf4>
    return EACCES;
 800799c:	230d      	movs	r3, #13
 800799e:	e009      	b.n	80079b4 <paramWriteByNameProcess+0x108>
  }

  paramSet(index, valptr);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fc4e 	bl	8007248 <paramSet>

  paramNotifyChanged(index);
 80079ac:	6978      	ldr	r0, [r7, #20]
 80079ae:	f7ff ff5d 	bl	800786c <paramNotifyChanged>

  return 0;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	0801ad5c 	.word	0x0801ad5c
 80079c0:	20006aec 	.word	0x20006aec
 80079c4:	20006af0 	.word	0x20006af0

080079c8 <paramReadProcess>:

void paramReadProcess(CRTPPacket *p)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3302      	adds	r3, #2
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	817b      	strh	r3, [r7, #10]
  int index = variableGetIndex(id);
 80079da:	897b      	ldrh	r3, [r7, #10]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f825 	bl	8007a2c <variableGetIndex>
 80079e2:	60f8      	str	r0, [r7, #12]

  if (index<0) {
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da09      	bge.n	80079fe <paramReadProcess+0x36>
    p->data[2] = ENOENT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2203      	movs	r2, #3
 80079f4:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7f9 fe4e 	bl	8001698 <crtpSendPacketBlock>
 80079fc:	e013      	b.n	8007a26 <paramReadProcess+0x5e>
    return;
  }
  p->data[2] = 0;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	711a      	strb	r2, [r3, #4]
  p->size = 3 + paramGet(index, &p->data[3]);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3305      	adds	r3, #5
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f7ff fc5c 	bl	80072cc <paramGet>
 8007a14:	4603      	mov	r3, r0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	3303      	adds	r3, #3
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7f9 fe39 	bl	8001698 <crtpSendPacketBlock>
}
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <variableGetIndex>:

static int variableGetIndex(int id)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  int i;
  int n = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < paramsLen; i++)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e015      	b.n	8007a6a <variableGetIndex+0x3e>
  {
    if(!(params[i].type & PARAM_GROUP))
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <variableGetIndex+0x6c>)
 8007a40:	6819      	ldr	r1, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	440b      	add	r3, r1
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b25b      	sxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db06      	blt.n	8007a64 <variableGetIndex+0x38>
    {
      if(n == id) {
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d00b      	beq.n	8007a76 <variableGetIndex+0x4a>
        break;
      }
      n++;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < paramsLen; i++)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3301      	adds	r3, #1
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	4b0c      	ldr	r3, [pc, #48]	; (8007a9c <variableGetIndex+0x70>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	dbe4      	blt.n	8007a3e <variableGetIndex+0x12>
 8007a74:	e000      	b.n	8007a78 <variableGetIndex+0x4c>
        break;
 8007a76:	bf00      	nop
    }
  }

  if (i >= paramsLen)
 8007a78:	4b08      	ldr	r3, [pc, #32]	; (8007a9c <variableGetIndex+0x70>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	db02      	blt.n	8007a88 <variableGetIndex+0x5c>
    return -1;
 8007a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a86:	e000      	b.n	8007a8a <variableGetIndex+0x5e>

  return i;
 8007a88:	68fb      	ldr	r3, [r7, #12]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	20006aec 	.word	0x20006aec
 8007a9c:	20006af0 	.word	0x20006af0

08007aa0 <paramGetVarIdFromComplete>:

/* Public API to access param TOC from within the copter */
static paramVarId_t invalidVarId = {0xffffu, 0xffffu};

paramVarId_t paramGetVarIdFromComplete(const char* completeName)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	; 0x38
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  char group[32] = { 0, };
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60bb      	str	r3, [r7, #8]
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	609a      	str	r2, [r3, #8]
 8007ab8:	60da      	str	r2, [r3, #12]
 8007aba:	611a      	str	r2, [r3, #16]
 8007abc:	615a      	str	r2, [r3, #20]
 8007abe:	619a      	str	r2, [r3, #24]

  char *dot = strchr(completeName, '.');
 8007ac0:	212e      	movs	r1, #46	; 0x2e
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f00f ffef 	bl	8017aa6 <strchr>
 8007ac8:	6378      	str	r0, [r7, #52]	; 0x34
  if (!dot) {
 8007aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d103      	bne.n	8007ad8 <paramGetVarIdFromComplete+0x38>
    return invalidVarId;
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <paramGetVarIdFromComplete+0x90>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ad6:	e015      	b.n	8007b04 <paramGetVarIdFromComplete+0x64>
  }

  size_t group_len = dot - completeName;
 8007ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	633b      	str	r3, [r7, #48]	; 0x30
  memcpy(group, completeName, group_len);
 8007ae0:	f107 0308 	add.w	r3, r7, #8
 8007ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f010 f8ca 	bl	8017c82 <memcpy>
  char *name = (char *) (dot + 1);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	3301      	adds	r3, #1
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  return paramGetVarId(group, name);
 8007af4:	f107 0308 	add.w	r3, r7, #8
 8007af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f81a 	bl	8007b34 <paramGetVarId>
 8007b00:	4603      	mov	r3, r0
 8007b02:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b04:	2300      	movs	r3, #0
 8007b06:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007b0a:	f362 0307 	bfi	r3, r2, #0, #8
 8007b0e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007b12:	f362 230f 	bfi	r3, r2, #8, #8
 8007b16:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8007b1a:	f362 4317 	bfi	r3, r2, #16, #8
 8007b1e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007b22:	f362 631f 	bfi	r3, r2, #24, #8
 8007b26:	4618      	mov	r0, r3
 8007b28:	3738      	adds	r7, #56	; 0x38
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000340 	.word	0x20000340

08007b34 <paramGetVarId>:

paramVarId_t paramGetVarId(const char* group, const char* name)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint16_t index;
  uint16_t id = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	82bb      	strh	r3, [r7, #20]
  paramVarId_t varId = invalidVarId;
 8007b42:	4b35      	ldr	r3, [pc, #212]	; (8007c18 <paramGetVarId+0xe4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60bb      	str	r3, [r7, #8]
  char * currgroup = "";
 8007b48:	4b34      	ldr	r3, [pc, #208]	; (8007c1c <paramGetVarId+0xe8>)
 8007b4a:	613b      	str	r3, [r7, #16]

  for(index = 0; index < paramsLen; index++)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	82fb      	strh	r3, [r7, #22]
 8007b50:	e049      	b.n	8007be6 <paramGetVarId+0xb2>
  {
    if (params[index].type & PARAM_GROUP) {
 8007b52:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <paramGetVarId+0xec>)
 8007b54:	6819      	ldr	r1, [r3, #0]
 8007b56:	8afa      	ldrh	r2, [r7, #22]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	440b      	add	r3, r1
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	b25b      	sxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da17      	bge.n	8007b9a <paramGetVarId+0x66>
      if (params[index].type & PARAM_START) {
 8007b6a:	4b2d      	ldr	r3, [pc, #180]	; (8007c20 <paramGetVarId+0xec>)
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	8afa      	ldrh	r2, [r7, #22]
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00d      	beq.n	8007ba0 <paramGetVarId+0x6c>
        currgroup = params[index].name;
 8007b84:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <paramGetVarId+0xec>)
 8007b86:	6819      	ldr	r1, [r3, #0]
 8007b88:	8afa      	ldrh	r2, [r7, #22]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	613b      	str	r3, [r7, #16]
 8007b98:	e002      	b.n	8007ba0 <paramGetVarId+0x6c>
      }
    } else {
      id += 1;
 8007b9a:	8abb      	ldrh	r3, [r7, #20]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	82bb      	strh	r3, [r7, #20]
    }

    if ((!strcmp(group, currgroup)) && (!strcmp(name, params[index].name))) {
 8007ba0:	6939      	ldr	r1, [r7, #16]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7f8 fb14 	bl	80001d0 <strcmp>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d118      	bne.n	8007be0 <paramGetVarId+0xac>
 8007bae:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <paramGetVarId+0xec>)
 8007bb0:	6819      	ldr	r1, [r3, #0]
 8007bb2:	8afa      	ldrh	r2, [r7, #22]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6838      	ldr	r0, [r7, #0]
 8007bc4:	f7f8 fb04 	bl	80001d0 <strcmp>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d108      	bne.n	8007be0 <paramGetVarId+0xac>
      varId.index = index;
 8007bce:	8afb      	ldrh	r3, [r7, #22]
 8007bd0:	817b      	strh	r3, [r7, #10]
      varId.id = id - 1;
 8007bd2:	8abb      	ldrh	r3, [r7, #20]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	813b      	strh	r3, [r7, #8]
      return varId;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e00a      	b.n	8007bf6 <paramGetVarId+0xc2>
  for(index = 0; index < paramsLen; index++)
 8007be0:	8afb      	ldrh	r3, [r7, #22]
 8007be2:	3301      	adds	r3, #1
 8007be4:	82fb      	strh	r3, [r7, #22]
 8007be6:	8afa      	ldrh	r2, [r7, #22]
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <paramGetVarId+0xf0>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	dbb0      	blt.n	8007b52 <paramGetVarId+0x1e>
    }
  }

  return invalidVarId;
 8007bf0:	4b09      	ldr	r3, [pc, #36]	; (8007c18 <paramGetVarId+0xe4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]
}
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	7b3a      	ldrb	r2, [r7, #12]
 8007bfa:	f362 0307 	bfi	r3, r2, #0, #8
 8007bfe:	7b7a      	ldrb	r2, [r7, #13]
 8007c00:	f362 230f 	bfi	r3, r2, #8, #8
 8007c04:	7bba      	ldrb	r2, [r7, #14]
 8007c06:	f362 4317 	bfi	r3, r2, #16, #8
 8007c0a:	7bfa      	ldrb	r2, [r7, #15]
 8007c0c:	f362 631f 	bfi	r3, r2, #24, #8
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000340 	.word	0x20000340
 8007c1c:	0801ad5c 	.word	0x0801ad5c
 8007c20:	20006aec 	.word	0x20006aec
 8007c24:	20006af0 	.word	0x20006af0

08007c28 <paramGetGroupAndName>:
{
  return params[varid.index].type;
}

void paramGetGroupAndName(paramVarId_t varid, char** group, char** name)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  char * currgroup = "";
 8007c34:	4b28      	ldr	r3, [pc, #160]	; (8007cd8 <paramGetGroupAndName+0xb0>)
 8007c36:	617b      	str	r3, [r7, #20]
  *group = 0;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
  *name = 0;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	601a      	str	r2, [r3, #0]

  for(int index = 0; index < paramsLen; index++) {
 8007c44:	2300      	movs	r3, #0
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	e039      	b.n	8007cbe <paramGetGroupAndName+0x96>
    if (params[index].type & PARAM_GROUP) {
 8007c4a:	4b24      	ldr	r3, [pc, #144]	; (8007cdc <paramGetGroupAndName+0xb4>)
 8007c4c:	6819      	ldr	r1, [r3, #0]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da16      	bge.n	8007c90 <paramGetGroupAndName+0x68>
      if (params[index].type & PARAM_START) {
 8007c62:	4b1e      	ldr	r3, [pc, #120]	; (8007cdc <paramGetGroupAndName+0xb4>)
 8007c64:	6819      	ldr	r1, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <paramGetGroupAndName+0x68>
        currgroup = params[index].name;
 8007c7c:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <paramGetGroupAndName+0xb4>)
 8007c7e:	6819      	ldr	r1, [r3, #0]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	617b      	str	r3, [r7, #20]
      }
    }

    if (index == varid.index) {
 8007c90:	89fb      	ldrh	r3, [r7, #14]
 8007c92:	461a      	mov	r2, r3
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d10e      	bne.n	8007cb8 <paramGetGroupAndName+0x90>
      *group = currgroup;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	601a      	str	r2, [r3, #0]
      *name = params[index].name;
 8007ca0:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <paramGetGroupAndName+0xb4>)
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	601a      	str	r2, [r3, #0]
      break;
 8007cb6:	e008      	b.n	8007cca <paramGetGroupAndName+0xa2>
  for(int index = 0; index < paramsLen; index++) {
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
 8007cbe:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <paramGetGroupAndName+0xb8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	dbc0      	blt.n	8007c4a <paramGetGroupAndName+0x22>
    }
  }
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	0801ad5c 	.word	0x0801ad5c
 8007cdc:	20006aec 	.word	0x20006aec
 8007ce0:	20006af0 	.word	0x20006af0

08007ce4 <paramSetByName>:

  paramNotifyChanged(varid.index);
}

void paramSetByName(CRTPPacket *p)
{
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b08b      	sub	sp, #44	; 0x2c
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  int i, nzero = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	623b      	str	r3, [r7, #32]
  void * valPtr;
  int error;

  // If the packet contains at least 2 zeros in the first 28 bytes
  // The packet decoding algorithm will not crash
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf4:	e00c      	b.n	8007d10 <paramSetByName+0x2c>
    if (p->data[i] == '\0') nzero++;
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3302      	adds	r3, #2
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <paramSetByName+0x26>
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	3301      	adds	r3, #1
 8007d08:	623b      	str	r3, [r7, #32]
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	2b1d      	cmp	r3, #29
 8007d14:	ddef      	ble.n	8007cf6 <paramSetByName+0x12>
  }

  if (nzero < 2) return;
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	dd53      	ble.n	8007dc4 <paramSetByName+0xe0>

  group = (char*)&p->data[1];
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3303      	adds	r3, #3
 8007d20:	61fb      	str	r3, [r7, #28]
  name = (char*)&p->data[1 + strlen(group) + 1];
 8007d22:	69f8      	ldr	r0, [r7, #28]
 8007d24:	f7f8 fab4 	bl	8000290 <strlen>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	4413      	add	r3, r2
 8007d30:	3302      	adds	r3, #2
 8007d32:	61bb      	str	r3, [r7, #24]
  type = p->data[1 + strlen(group) + 1 + strlen(name) + 1];
 8007d34:	69f8      	ldr	r0, [r7, #28]
 8007d36:	f7f8 faab 	bl	8000290 <strlen>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	69b8      	ldr	r0, [r7, #24]
 8007d3e:	f7f8 faa7 	bl	8000290 <strlen>
 8007d42:	4603      	mov	r3, r0
 8007d44:	4423      	add	r3, r4
 8007d46:	3303      	adds	r3, #3
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	789b      	ldrb	r3, [r3, #2]
 8007d4e:	75fb      	strb	r3, [r7, #23]
  valPtr = &p->data[1 + strlen(group) + 1 + strlen(name) + 2];
 8007d50:	69f8      	ldr	r0, [r7, #28]
 8007d52:	f7f8 fa9d 	bl	8000290 <strlen>
 8007d56:	4604      	mov	r4, r0
 8007d58:	69b8      	ldr	r0, [r7, #24]
 8007d5a:	f7f8 fa99 	bl	8000290 <strlen>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4423      	add	r3, r4
 8007d62:	3304      	adds	r3, #4
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	3302      	adds	r3, #2
 8007d6a:	613b      	str	r3, [r7, #16]

  error = paramWriteByNameProcess(group, name, type, valPtr);  /* calls callback */
 8007d6c:	7dfa      	ldrb	r2, [r7, #23]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	69b9      	ldr	r1, [r7, #24]
 8007d72:	69f8      	ldr	r0, [r7, #28]
 8007d74:	f7ff fd9a 	bl	80078ac <paramWriteByNameProcess>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	60fb      	str	r3, [r7, #12]

  p->data[1 + strlen(group) + 1 + strlen(name) + 1] = error;
 8007d7c:	69f8      	ldr	r0, [r7, #28]
 8007d7e:	f7f8 fa87 	bl	8000290 <strlen>
 8007d82:	4604      	mov	r4, r0
 8007d84:	69b8      	ldr	r0, [r7, #24]
 8007d86:	f7f8 fa83 	bl	8000290 <strlen>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4423      	add	r3, r4
 8007d8e:	3303      	adds	r3, #3
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	b2d1      	uxtb	r1, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4413      	add	r3, r2
 8007d98:	460a      	mov	r2, r1
 8007d9a:	709a      	strb	r2, [r3, #2]
  p->size = 1 + strlen(group) + 1 + strlen(name) + 1 + 1;
 8007d9c:	69f8      	ldr	r0, [r7, #28]
 8007d9e:	f7f8 fa77 	bl	8000290 <strlen>
 8007da2:	4603      	mov	r3, r0
 8007da4:	b2dc      	uxtb	r4, r3
 8007da6:	69b8      	ldr	r0, [r7, #24]
 8007da8:	f7f8 fa72 	bl	8000290 <strlen>
 8007dac:	4603      	mov	r3, r0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	4423      	add	r3, r4
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	3304      	adds	r3, #4
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7f9 fc6b 	bl	8001698 <crtpSendPacketBlock>
 8007dc2:	e000      	b.n	8007dc6 <paramSetByName+0xe2>
  if (nzero < 2) return;
 8007dc4:	bf00      	nop

}
 8007dc6:	372c      	adds	r7, #44	; 0x2c
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd90      	pop	{r4, r7, pc}

08007dcc <paramGetExtendedType>:

#define KEY_LEN 30  // FIXME

void paramGetExtendedType(CRTPPacket *p)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3303      	adds	r3, #3
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	817b      	strh	r3, [r7, #10]
  index = variableGetIndex(id);
 8007dde:	897b      	ldrh	r3, [r7, #10]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fe23 	bl	8007a2c <variableGetIndex>
 8007de6:	60f8      	str	r0, [r7, #12]

  if (index < 0 || !(params[index].type & PARAM_EXTENDED)) {
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	db0c      	blt.n	8007e08 <paramGetExtendedType+0x3c>
 8007dee:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <paramGetExtendedType+0x78>)
 8007df0:	6819      	ldr	r1, [r3, #0]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	f003 0310 	and.w	r3, r3, #16
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <paramGetExtendedType+0x50>
    p->data[3] = ENOENT;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2204      	movs	r2, #4
 8007e12:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7f9 fc3f 	bl	8001698 <crtpSendPacketBlock>
 8007e1a:	e010      	b.n	8007e3e <paramGetExtendedType+0x72>
    return;
  }

  p->data[3] = params[index].extended_type;
 8007e1c:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <paramGetExtendedType+0x78>)
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	785a      	ldrb	r2, [r3, #1]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2204      	movs	r2, #4
 8007e36:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7f9 fc2d 	bl	8001698 <crtpSendPacketBlock>
}
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20006aec 	.word	0x20006aec

08007e48 <generateStorageKey>:

static void generateStorageKey(const uint16_t index, char key[KEY_LEN])
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	80fb      	strh	r3, [r7, #6]
  char *group;
  char *name;
  paramVarId_t paramId;

  paramId.index = (uint16_t)index;
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	81fb      	strh	r3, [r7, #14]
  paramGetGroupAndName(paramId, &group, &name);
 8007e58:	f107 0210 	add.w	r2, r7, #16
 8007e5c:	f107 0314 	add.w	r3, r7, #20
 8007e60:	4619      	mov	r1, r3
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff fee0 	bl	8007c28 <paramGetGroupAndName>

  // Assemble key string, e.g. "prm/pid_rate.kp"
  strcpy(key, PERSISTENT_PREFIX_STRING);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	4a0f      	ldr	r2, [pc, #60]	; (8007ea8 <generateStorageKey+0x60>)
 8007e6c:	6810      	ldr	r0, [r2, #0]
 8007e6e:	6018      	str	r0, [r3, #0]
 8007e70:	7912      	ldrb	r2, [r2, #4]
 8007e72:	711a      	strb	r2, [r3, #4]
  strcat(key, group);
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	4619      	mov	r1, r3
 8007e78:	6838      	ldr	r0, [r7, #0]
 8007e7a:	f00f fe05 	bl	8017a88 <strcat>
  strcat(key, ".");
 8007e7e:	6838      	ldr	r0, [r7, #0]
 8007e80:	f7f8 fa06 	bl	8000290 <strlen>
 8007e84:	4603      	mov	r3, r0
 8007e86:	461a      	mov	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	4907      	ldr	r1, [pc, #28]	; (8007eac <generateStorageKey+0x64>)
 8007e8e:	461a      	mov	r2, r3
 8007e90:	460b      	mov	r3, r1
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	8013      	strh	r3, [r2, #0]
  strcat(key, name);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6838      	ldr	r0, [r7, #0]
 8007e9c:	f00f fdf4 	bl	8017a88 <strcat>
}
 8007ea0:	bf00      	nop
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	0801aecc 	.word	0x0801aecc
 8007eac:	0801aed4 	.word	0x0801aed4

08007eb0 <paramPersistentStore>:

void paramPersistentStore(CRTPPacket *p)
{
 8007eb0:	b590      	push	{r4, r7, lr}
 8007eb2:	b08d      	sub	sp, #52	; 0x34
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 8007ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff fdae 	bl	8007a2c <variableGetIndex>
 8007ed0:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	da09      	bge.n	8007eec <paramPersistentStore+0x3c>
    p->data[3] = ENOENT;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7f9 fbd7 	bl	8001698 <crtpSendPacketBlock>
 8007eea:	e03b      	b.n	8007f64 <paramPersistentStore+0xb4>
    return;
  }

  char key[KEY_LEN] = {0};
 8007eec:	2300      	movs	r3, #0
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	f107 030c 	add.w	r3, r7, #12
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	60da      	str	r2, [r3, #12]
 8007efe:	611a      	str	r2, [r3, #16]
 8007f00:	615a      	str	r2, [r3, #20]
 8007f02:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f107 0208 	add.w	r2, r7, #8
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff ff9a 	bl	8007e48 <generateStorageKey>

  result = storageStore(key, params[index].address, paramGetLen(index));
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <paramPersistentStore+0xbc>)
 8007f16:	6819      	ldr	r1, [r3, #0]
 8007f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	440b      	add	r3, r1
 8007f24:	689c      	ldr	r4, [r3, #8]
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fa10 	bl	8007350 <paramGetLen>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fb fe00 	bl	8003b40 <storageStore>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 8007f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <paramPersistentStore+0xa2>
 8007f4e:	2200      	movs	r2, #0
 8007f50:	e000      	b.n	8007f54 <paramPersistentStore+0xa4>
 8007f52:	2202      	movs	r2, #2
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2204      	movs	r2, #4
 8007f5c:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7f9 fb9a 	bl	8001698 <crtpSendPacketBlock>
}
 8007f64:	3734      	adds	r7, #52	; 0x34
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd90      	pop	{r4, r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20006aec 	.word	0x20006aec

08007f70 <paramGetDefaultValue>:

void paramGetDefaultValue(CRTPPacket *p)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], sizeof(id));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3303      	adds	r3, #3
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	813b      	strh	r3, [r7, #8]
  int index = variableGetIndex(id);
 8007f82:	893b      	ldrh	r3, [r7, #8]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fd51 	bl	8007a2c <variableGetIndex>
 8007f8a:	60f8      	str	r0, [r7, #12]

  const bool doesParamExist = (index >= 0);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	0fdb      	lsrs	r3, r3, #31
 8007f92:	72fb      	strb	r3, [r7, #11]
  // Read-only parameters have no default value
  if (!doesParamExist || params[index].type & PARAM_RONLY) {
 8007f94:	7afb      	ldrb	r3, [r7, #11]
 8007f96:	f083 0301 	eor.w	r3, r3, #1
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10c      	bne.n	8007fba <paramGetDefaultValue+0x4a>
 8007fa0:	4b28      	ldr	r3, [pc, #160]	; (8008044 <paramGetDefaultValue+0xd4>)
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <paramGetDefaultValue+0x5e>
    p->data[3] = ENOENT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7f9 fb66 	bl	8001698 <crtpSendPacketBlock>
 8007fcc:	e037      	b.n	800803e <paramGetDefaultValue+0xce>
    return;
  }

  // Add default value
  uint8_t paramLen = paramGetLen(index);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff f9bc 	bl	8007350 <paramGetLen>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	72bb      	strb	r3, [r7, #10]
  if (params[index].getter) {
 8007fdc:	4b19      	ldr	r3, [pc, #100]	; (8008044 <paramGetDefaultValue+0xd4>)
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d012      	beq.n	8008018 <paramGetDefaultValue+0xa8>
    memcpy(&p->data[3], params[index].getter(), paramLen);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	1d5c      	adds	r4, r3, #5
 8007ff6:	4b13      	ldr	r3, [pc, #76]	; (8008044 <paramGetDefaultValue+0xd4>)
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	4798      	blx	r3
 800800a:	4601      	mov	r1, r0
 800800c:	7abb      	ldrb	r3, [r7, #10]
 800800e:	461a      	mov	r2, r3
 8008010:	4620      	mov	r0, r4
 8008012:	f00f fe36 	bl	8017c82 <memcpy>
 8008016:	e00a      	b.n	800802e <paramGetDefaultValue+0xbe>
  } else {
    memcpy(&p->data[3], paramGetDefault(index), paramLen);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	1d5c      	adds	r4, r3, #5
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff f8d1 	bl	80071c4 <paramGetDefault>
 8008022:	4601      	mov	r1, r0
 8008024:	7abb      	ldrb	r3, [r7, #10]
 8008026:	461a      	mov	r2, r3
 8008028:	4620      	mov	r0, r4
 800802a:	f00f fe2a 	bl	8017c82 <memcpy>
  }
  p->size = 3 + paramLen;
 800802e:	7abb      	ldrb	r3, [r7, #10]
 8008030:	3303      	adds	r3, #3
 8008032:	b2da      	uxtb	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7f9 fb2d 	bl	8001698 <crtpSendPacketBlock>
}
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	bd90      	pop	{r4, r7, pc}
 8008044:	20006aec 	.word	0x20006aec

08008048 <paramPersistentGetState>:

void paramPersistentGetState(CRTPPacket *p)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b08f      	sub	sp, #60	; 0x3c
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3303      	adds	r3, #3
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29b      	uxth	r3, r3
 8008058:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int index = variableGetIndex(id);
 800805a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff fce5 	bl	8007a2c <variableGetIndex>
 8008062:	6378      	str	r0, [r7, #52]	; 0x34

  const bool doesParamExist = (index >= 0);
 8008064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008066:	43db      	mvns	r3, r3
 8008068:	0fdb      	lsrs	r3, r3, #31
 800806a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (! doesParamExist) {
 800806e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008072:	f083 0301 	eor.w	r3, r3, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d009      	beq.n	8008090 <paramPersistentGetState+0x48>
    p->data[3] = ENOENT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2204      	movs	r2, #4
 8008086:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7f9 fb05 	bl	8001698 <crtpSendPacketBlock>
 800808e:	e08c      	b.n	80081aa <paramPersistentGetState+0x162>
    return;
  }

  char key[KEY_LEN] = {0};
 8008090:	2300      	movs	r3, #0
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	f107 0314 	add.w	r3, r7, #20
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	609a      	str	r2, [r3, #8]
 80080a0:	60da      	str	r2, [r3, #12]
 80080a2:	611a      	str	r2, [r3, #16]
 80080a4:	615a      	str	r2, [r3, #20]
 80080a6:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 80080a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f107 0210 	add.w	r2, r7, #16
 80080b0:	4611      	mov	r1, r2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fec8 	bl	8007e48 <generateStorageKey>

  uint8_t paramLen = paramGetLen(index);
 80080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff f947 	bl	8007350 <paramGetLen>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  // First part of data use 4 bytes
  p->size = 4;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2204      	movs	r2, #4
 80080cc:	701a      	strb	r2, [r3, #0]

  // Add default value
  if (params[index].getter) {
 80080ce:	4b38      	ldr	r3, [pc, #224]	; (80081b0 <paramPersistentGetState+0x168>)
 80080d0:	6819      	ldr	r1, [r3, #0]
 80080d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	440b      	add	r3, r1
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d017      	beq.n	8008114 <paramPersistentGetState+0xcc>
    memcpy(&p->data[p->size], params[index].getter(), paramLen);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	1c9c      	adds	r4, r3, #2
 80080f0:	4b2f      	ldr	r3, [pc, #188]	; (80081b0 <paramPersistentGetState+0x168>)
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	440b      	add	r3, r1
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	4798      	blx	r3
 8008104:	4601      	mov	r1, r0
 8008106:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800810a:	461a      	mov	r2, r3
 800810c:	4620      	mov	r0, r4
 800810e:	f00f fdb8 	bl	8017c82 <memcpy>
 8008112:	e00f      	b.n	8008134 <paramPersistentGetState+0xec>
  } else {
    memcpy(&p->data[p->size], paramGetDefault(index), paramLen);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	1c9c      	adds	r4, r3, #2
 8008120:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008122:	f7ff f84f 	bl	80071c4 <paramGetDefault>
 8008126:	4601      	mov	r1, r0
 8008128:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800812c:	461a      	mov	r2, r3
 800812e:	4620      	mov	r0, r4
 8008130:	f00f fda7 	bl	8017c82 <memcpy>
  }
  p->size += paramLen;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800813c:	4413      	add	r3, r2
 800813e:	b2da      	uxtb	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	701a      	strb	r2, [r3, #0]

  // Add stored value if avialable
  uint8_t value[8];
  const bool isValueStored = (storageFetch(key, &value, paramLen) > 0);
 8008144:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8008148:	f107 0108 	add.w	r1, r7, #8
 800814c:	f107 0310 	add.w	r3, r7, #16
 8008150:	4618      	mov	r0, r3
 8008152:	f7fb fd45 	bl	8003be0 <storageFetch>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	bf14      	ite	ne
 800815c:	2301      	movne	r3, #1
 800815e:	2300      	moveq	r3, #0
 8008160:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  if (isValueStored) {
 8008164:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008168:	2b00      	cmp	r3, #0
 800816a:	d018      	beq.n	800819e <paramPersistentGetState+0x156>
    p->data[3] = PARAM_PERSISTENT_STORED;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	715a      	strb	r2, [r3, #5]
    memcpy(&p->data[p->size], &value, paramLen);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	3302      	adds	r3, #2
 800817e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8008182:	f107 0108 	add.w	r1, r7, #8
 8008186:	4618      	mov	r0, r3
 8008188:	f00f fd7b 	bl	8017c82 <memcpy>
    p->size += paramLen;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008194:	4413      	add	r3, r2
 8008196:	b2da      	uxtb	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	701a      	strb	r2, [r3, #0]
 800819c:	e002      	b.n	80081a4 <paramPersistentGetState+0x15c>
  } else {
    p->data[3] = PARAM_PERSISTENT_NOT_STORED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	715a      	strb	r2, [r3, #5]
  }

  crtpSendPacketBlock(p);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7f9 fa77 	bl	8001698 <crtpSendPacketBlock>
}
 80081aa:	373c      	adds	r7, #60	; 0x3c
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd90      	pop	{r4, r7, pc}
 80081b0:	20006aec 	.word	0x20006aec

080081b4 <paramPersistentClear>:

void paramPersistentClear(CRTPPacket *p)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08c      	sub	sp, #48	; 0x30
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 80081bc:	2301      	movs	r3, #1
 80081be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3303      	adds	r3, #3
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 80081cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff fc2c 	bl	8007a2c <variableGetIndex>
 80081d4:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da09      	bge.n	80081f0 <paramPersistentClear+0x3c>
    p->data[3] = ENOENT;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2204      	movs	r2, #4
 80081e6:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7f9 fa55 	bl	8001698 <crtpSendPacketBlock>
 80081ee:	e02a      	b.n	8008246 <paramPersistentClear+0x92>
    return;
  }

  // Assemble key string, e.g. "prm/pid_rate.kp"
  char key[KEY_LEN] = {0};
 80081f0:	2300      	movs	r3, #0
 80081f2:	60bb      	str	r3, [r7, #8]
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	609a      	str	r2, [r3, #8]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	611a      	str	r2, [r3, #16]
 8008204:	615a      	str	r2, [r3, #20]
 8008206:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	b29b      	uxth	r3, r3
 800820c:	f107 0208 	add.w	r2, r7, #8
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fe18 	bl	8007e48 <generateStorageKey>

  result = storageDelete(key);
 8008218:	f107 0308 	add.w	r3, r7, #8
 800821c:	4618      	mov	r0, r3
 800821e:	f7fb fd07 	bl	8003c30 <storageDelete>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 8008228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <paramPersistentClear+0x80>
 8008230:	2200      	movs	r2, #0
 8008232:	e000      	b.n	8008236 <paramPersistentClear+0x82>
 8008234:	2202      	movs	r2, #2
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2204      	movs	r2, #4
 800823e:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7f9 fa29 	bl	8001698 <crtpSendPacketBlock>
}
 8008246:	3730      	adds	r7, #48	; 0x30
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <persistentParamFromStorage>:

static bool persistentParamFromStorage(const char *key, void *buffer, size_t length)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  //
  // The key is of format "prm/group.name", we need group and name.
  //
  char *completeName = (char *) key + strlen(PERSISTENT_PREFIX_STRING);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3304      	adds	r3, #4
 800825c:	617b      	str	r3, [r7, #20]
  paramVarId_t varId = paramGetVarIdFromComplete(completeName);
 800825e:	6978      	ldr	r0, [r7, #20]
 8008260:	f7ff fc1e 	bl	8007aa0 <paramGetVarIdFromComplete>
 8008264:	4603      	mov	r3, r0
 8008266:	613b      	str	r3, [r7, #16]

  if (PARAM_VARID_IS_VALID(varId)) {
 8008268:	8a3b      	ldrh	r3, [r7, #16]
 800826a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <persistentParamFromStorage+0x30>
    paramSet(varId.index, buffer);
 8008272:	8a7b      	ldrh	r3, [r7, #18]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe ffe6 	bl	8007248 <paramSet>
  }

  return true;
 800827c:	2301      	movs	r3, #1
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <paramLogicStorageInit>:

void paramLogicStorageInit()
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  storageForeach(PERSISTENT_PREFIX_STRING, persistentParamFromStorage);
 800828c:	4902      	ldr	r1, [pc, #8]	; (8008298 <paramLogicStorageInit+0x10>)
 800828e:	4803      	ldr	r0, [pc, #12]	; (800829c <paramLogicStorageInit+0x14>)
 8008290:	f7fb fc7e 	bl	8003b90 <storageForeach>
}
 8008294:	bf00      	nop
 8008296:	bd80      	pop	{r7, pc}
 8008298:	0800824d 	.word	0x0800824d
 800829c:	0801aecc 	.word	0x0801aecc

080082a0 <paramInit>:

STATIC_MEM_TASK_ALLOC(paramTask, PARAM_TASK_STACKSIZE);


void paramInit(void)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af04      	add	r7, sp, #16
  if(isInit) {
 80082a6:	4b0e      	ldr	r3, [pc, #56]	; (80082e0 <paramInit+0x40>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d115      	bne.n	80082da <paramInit+0x3a>
    return;
  }

  paramLogicInit();
 80082ae:	f7ff f885 	bl	80073bc <paramLogicInit>
  paramLogicStorageInit();
 80082b2:	f7ff ffe9 	bl	8008288 <paramLogicStorageInit>

  //Start the param task
  STATIC_MEM_TASK_CREATE(paramTask, paramTask, PARAM_TASK_NAME, NULL, PARAM_TASK_PRI);
 80082b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ba:	461a      	mov	r2, r3
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <paramInit+0x44>)
 80082be:	9302      	str	r3, [sp, #8]
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <paramInit+0x48>)
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	2301      	movs	r3, #1
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	4908      	ldr	r1, [pc, #32]	; (80082ec <paramInit+0x4c>)
 80082cc:	4808      	ldr	r0, [pc, #32]	; (80082f0 <paramInit+0x50>)
 80082ce:	f00b fcef 	bl	8013cb0 <xTaskCreateStatic>

  isInit = true;
 80082d2:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <paramInit+0x40>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	e000      	b.n	80082dc <paramInit+0x3c>
    return;
 80082da:	bf00      	nop
}
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20006afa 	.word	0x20006afa
 80082e4:	20003e8c 	.word	0x20003e8c
 80082e8:	20006b1c 	.word	0x20006b1c
 80082ec:	0801aed8 	.word	0x0801aed8
 80082f0:	080082f5 	.word	0x080082f5

080082f4 <paramTask>:
{
  return isInit;
}

void paramTask(void * prm)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_PARAM);
 80082fc:	2002      	movs	r0, #2
 80082fe:	f7f9 f89b 	bl	8001438 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 8008302:	492f      	ldr	r1, [pc, #188]	; (80083c0 <paramTask+0xcc>)
 8008304:	2002      	movs	r0, #2
 8008306:	f7f9 f8c7 	bl	8001498 <crtpReceivePacketBlock>

		if (p.channel==TOC_CH)
 800830a:	4b2d      	ldr	r3, [pc, #180]	; (80083c0 <paramTask+0xcc>)
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <paramTask+0x32>
		  paramTOCProcess(&p, p.data[0]);
 8008318:	4b29      	ldr	r3, [pc, #164]	; (80083c0 <paramTask+0xcc>)
 800831a:	789b      	ldrb	r3, [r3, #2]
 800831c:	4619      	mov	r1, r3
 800831e:	4828      	ldr	r0, [pc, #160]	; (80083c0 <paramTask+0xcc>)
 8008320:	f7ff f932 	bl	8007588 <paramTOCProcess>
 8008324:	e7ed      	b.n	8008302 <paramTask+0xe>
	  else if (p.channel==READ_CH)
 8008326:	4b26      	ldr	r3, [pc, #152]	; (80083c0 <paramTask+0xcc>)
 8008328:	785b      	ldrb	r3, [r3, #1]
 800832a:	f003 0303 	and.w	r3, r3, #3
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	d103      	bne.n	800833c <paramTask+0x48>
		  paramReadProcess(&p);
 8008334:	4822      	ldr	r0, [pc, #136]	; (80083c0 <paramTask+0xcc>)
 8008336:	f7ff fb47 	bl	80079c8 <paramReadProcess>
 800833a:	e7e2      	b.n	8008302 <paramTask+0xe>
		else if (p.channel==WRITE_CH)
 800833c:	4b20      	ldr	r3, [pc, #128]	; (80083c0 <paramTask+0xcc>)
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	f003 0303 	and.w	r3, r3, #3
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d103      	bne.n	8008352 <paramTask+0x5e>
		  paramWriteProcess(&p);
 800834a:	481d      	ldr	r0, [pc, #116]	; (80083c0 <paramTask+0xcc>)
 800834c:	f7ff fa50 	bl	80077f0 <paramWriteProcess>
 8008350:	e7d7      	b.n	8008302 <paramTask+0xe>
    else if (p.channel==MISC_CH) {
 8008352:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <paramTask+0xcc>)
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b03      	cmp	r3, #3
 800835e:	d1d0      	bne.n	8008302 <paramTask+0xe>
      switch (p.data[0]) {
 8008360:	4b17      	ldr	r3, [pc, #92]	; (80083c0 <paramTask+0xcc>)
 8008362:	789b      	ldrb	r3, [r3, #2]
 8008364:	2b06      	cmp	r3, #6
 8008366:	d829      	bhi.n	80083bc <paramTask+0xc8>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <paramTask+0x7c>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	0800838d 	.word	0x0800838d
 8008374:	080083bd 	.word	0x080083bd
 8008378:	08008395 	.word	0x08008395
 800837c:	0800839d 	.word	0x0800839d
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083b5 	.word	0x080083b5
        case MISC_SETBYNAME:
          paramSetByName(&p);
 800838c:	480c      	ldr	r0, [pc, #48]	; (80083c0 <paramTask+0xcc>)
 800838e:	f7ff fca9 	bl	8007ce4 <paramSetByName>
          break;
 8008392:	e014      	b.n	80083be <paramTask+0xca>
        case MISC_GET_EXTENDED_TYPE:
          paramGetExtendedType(&p);
 8008394:	480a      	ldr	r0, [pc, #40]	; (80083c0 <paramTask+0xcc>)
 8008396:	f7ff fd19 	bl	8007dcc <paramGetExtendedType>
          break;
 800839a:	e010      	b.n	80083be <paramTask+0xca>
        case MISC_PERSISTENT_STORE:
          paramPersistentStore(&p);
 800839c:	4808      	ldr	r0, [pc, #32]	; (80083c0 <paramTask+0xcc>)
 800839e:	f7ff fd87 	bl	8007eb0 <paramPersistentStore>
          break;
 80083a2:	e00c      	b.n	80083be <paramTask+0xca>
        case MISC_PERSISTENT_GET_STATE:
          paramPersistentGetState(&p);
 80083a4:	4806      	ldr	r0, [pc, #24]	; (80083c0 <paramTask+0xcc>)
 80083a6:	f7ff fe4f 	bl	8008048 <paramPersistentGetState>
          break;
 80083aa:	e008      	b.n	80083be <paramTask+0xca>
        case MISC_PERSISTENT_CLEAR:
          paramPersistentClear(&p);
 80083ac:	4804      	ldr	r0, [pc, #16]	; (80083c0 <paramTask+0xcc>)
 80083ae:	f7ff ff01 	bl	80081b4 <paramPersistentClear>
          break;
 80083b2:	e004      	b.n	80083be <paramTask+0xca>
        case MISC_GET_DEFAULT_VALUE:
          paramGetDefaultValue(&p);
 80083b4:	4802      	ldr	r0, [pc, #8]	; (80083c0 <paramTask+0xcc>)
 80083b6:	f7ff fddb 	bl	8007f70 <paramGetDefaultValue>
          break;
 80083ba:	e000      	b.n	80083be <paramTask+0xca>
        default:
          break;
 80083bc:	bf00      	nop
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 80083be:	e7a0      	b.n	8008302 <paramTask+0xe>
 80083c0:	20006afc 	.word	0x20006afc

080083c4 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 80083ca:	4b19      	ldr	r3, [pc, #100]	; (8008430 <queueMonitorInit+0x6c>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	f083 0301 	eor.w	r3, r3, #1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <queueMonitorInit+0x1e>
 80083d8:	2248      	movs	r2, #72	; 0x48
 80083da:	4916      	ldr	r1, [pc, #88]	; (8008434 <queueMonitorInit+0x70>)
 80083dc:	4816      	ldr	r0, [pc, #88]	; (8008438 <queueMonitorInit+0x74>)
 80083de:	f7fd f935 	bl	800564c <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <queueMonitorInit+0x78>)
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	4b16      	ldr	r3, [pc, #88]	; (8008440 <queueMonitorInit+0x7c>)
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	2300      	movs	r3, #0
 80083ec:	2201      	movs	r2, #1
 80083ee:	f242 7110 	movw	r1, #10000	; 0x2710
 80083f2:	4814      	ldr	r0, [pc, #80]	; (8008444 <queueMonitorInit+0x80>)
 80083f4:	f00c ffc4 	bl	8015380 <xTimerCreateStatic>
 80083f8:	4603      	mov	r3, r0
 80083fa:	4a13      	ldr	r2, [pc, #76]	; (8008448 <queueMonitorInit+0x84>)
 80083fc:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <queueMonitorInit+0x84>)
 8008400:	681c      	ldr	r4, [r3, #0]
 8008402:	f00b ffcb 	bl	801439c <xTaskGetTickCount>
 8008406:	4602      	mov	r2, r0
 8008408:	2364      	movs	r3, #100	; 0x64
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2300      	movs	r3, #0
 800840e:	2101      	movs	r1, #1
 8008410:	4620      	mov	r0, r4
 8008412:	f00d f829 	bl	8015468 <xTimerGenericCommand>

  data[0].fileName = "Na";
 8008416:	4b0d      	ldr	r3, [pc, #52]	; (800844c <queueMonitorInit+0x88>)
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <queueMonitorInit+0x8c>)
 800841a:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 800841c:	4b0b      	ldr	r3, [pc, #44]	; (800844c <queueMonitorInit+0x88>)
 800841e:	4a0c      	ldr	r2, [pc, #48]	; (8008450 <queueMonitorInit+0x8c>)
 8008420:	605a      	str	r2, [r3, #4]

  initialized = true;
 8008422:	4b03      	ldr	r3, [pc, #12]	; (8008430 <queueMonitorInit+0x6c>)
 8008424:	2201      	movs	r2, #1
 8008426:	701a      	strb	r2, [r3, #0]
}
 8008428:	bf00      	nop
 800842a:	3704      	adds	r7, #4
 800842c:	46bd      	mov	sp, r7
 800842e:	bd90      	pop	{r4, r7, pc}
 8008430:	200070dc 	.word	0x200070dc
 8008434:	0801aee0 	.word	0x0801aee0
 8008438:	0801af04 	.word	0x0801af04
 800843c:	200070b0 	.word	0x200070b0
 8008440:	080085f1 	.word	0x080085f1
 8008444:	0801af14 	.word	0x0801af14
 8008448:	200070ac 	.word	0x200070ac
 800844c:	20006f1c 	.word	0x20006f1c
 8008450:	0801af28 	.word	0x0801af28

08008454 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 8008460:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <qmRegisterQueue+0x70>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <qmRegisterQueue+0x1e>
 8008468:	2265      	movs	r2, #101	; 0x65
 800846a:	4917      	ldr	r1, [pc, #92]	; (80084c8 <qmRegisterQueue+0x74>)
 800846c:	4817      	ldr	r0, [pc, #92]	; (80084cc <qmRegisterQueue+0x78>)
 800846e:	f7fd f8ed 	bl	800564c <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 8008472:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <qmRegisterQueue+0x7c>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b13      	cmp	r3, #19
 8008478:	d904      	bls.n	8008484 <qmRegisterQueue+0x30>
 800847a:	2266      	movs	r2, #102	; 0x66
 800847c:	4912      	ldr	r1, [pc, #72]	; (80084c8 <qmRegisterQueue+0x74>)
 800847e:	4815      	ldr	r0, [pc, #84]	; (80084d4 <qmRegisterQueue+0x80>)
 8008480:	f7fd f8e4 	bl	800564c <assertFail>
  Data* queueData = &data[nrOfQueues];
 8008484:	4b12      	ldr	r3, [pc, #72]	; (80084d0 <qmRegisterQueue+0x7c>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4a11      	ldr	r2, [pc, #68]	; (80084d8 <qmRegisterQueue+0x84>)
 8008494:	4413      	add	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 80084a4:	4b0a      	ldr	r3, [pc, #40]	; (80084d0 <qmRegisterQueue+0x7c>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	4619      	mov	r1, r3
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f00b fa6c 	bl	8013988 <vQueueSetQueueNumber>

  nrOfQueues++;
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <qmRegisterQueue+0x7c>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	3301      	adds	r3, #1
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <qmRegisterQueue+0x7c>)
 80084ba:	701a      	strb	r2, [r3, #0]
}
 80084bc:	bf00      	nop
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	200070dc 	.word	0x200070dc
 80084c8:	0801aee0 	.word	0x0801aee0
 80084cc:	0801af2c 	.word	0x0801af2c
 80084d0:	20000344 	.word	0x20000344
 80084d4:	0801af38 	.word	0x0801af38
 80084d8:	20006f1c 	.word	0x20006f1c

080084dc <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
  int i = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 80084e6:	2300      	movs	r3, #0
 80084e8:	607b      	str	r3, [r7, #4]
 80084ea:	e013      	b.n	8008514 <debugPrint+0x38>
    Data* queueData = &data[i];
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4a0d      	ldr	r2, [pc, #52]	; (800852c <debugPrint+0x50>)
 80084f8:	4413      	add	r3, r2
 80084fa:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 80084fc:	6838      	ldr	r0, [r7, #0]
 80084fe:	f000 f819 	bl	8008534 <filter>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <debugPrint+0x32>
      debugPrintQueue(queueData);
 8008508:	6838      	ldr	r0, [r7, #0]
 800850a:	f000 f827 	bl	800855c <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3301      	adds	r3, #1
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <debugPrint+0x54>)
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	461a      	mov	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4293      	cmp	r3, r2
 800851e:	dbe5      	blt.n	80084ec <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8008520:	f000 f838 	bl	8008594 <resetCounters>
  }
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20006f1c 	.word	0x20006f1c
 8008530:	20000344 	.word	0x20000344

08008534 <filter>:

static bool filter(Data* queueData) {
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b085      	sub	sp, #20
 8008560:	af02      	add	r7, sp, #8
 8008562:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6819      	ldr	r1, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6858      	ldr	r0, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689c      	ldr	r4, [r3, #8]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6912      	ldr	r2, [r2, #16]
 8008578:	9201      	str	r2, [sp, #4]
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	4623      	mov	r3, r4
 800857e:	4602      	mov	r2, r0
 8008580:	4803      	ldr	r0, [pc, #12]	; (8008590 <debugPrintQueue+0x34>)
 8008582:	f00f f987 	bl	8017894 <iprintf>
}
 8008586:	bf00      	nop
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	bd90      	pop	{r4, r7, pc}
 800858e:	bf00      	nop
 8008590:	0801af74 	.word	0x0801af74

08008594 <resetCounters>:

static void resetCounters() {
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
  int i = 0;
 800859a:	2300      	movs	r3, #0
 800859c:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 800859e:	2300      	movs	r3, #0
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	e013      	b.n	80085cc <resetCounters+0x38>
    Data* queueData = &data[i];
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	4613      	mov	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4413      	add	r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4a0e      	ldr	r2, [pc, #56]	; (80085e8 <resetCounters+0x54>)
 80085b0:	4413      	add	r3, r2
 80085b2:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	2200      	movs	r2, #0
 80085be:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3301      	adds	r3, #1
 80085ca:	607b      	str	r3, [r7, #4]
 80085cc:	4b07      	ldr	r3, [pc, #28]	; (80085ec <resetCounters+0x58>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	dbe5      	blt.n	80085a4 <resetCounters+0x10>
  }
}
 80085d8:	bf00      	nop
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	20006f1c 	.word	0x20006f1c
 80085ec:	20000344 	.word	0x20000344

080085f0 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  debugPrint();
 80085f8:	f7ff ff70 	bl	80084dc <debugPrint>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <statsCntRateCounterUpdate>:
    counter->latestCount = 0;
    counter->latestAveragingMs = 0;
    counter->latestRate = 0.0f;
}

float statsCntRateCounterUpdate(statsCntRateCounter_t* counter, uint32_t now_ms) {
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
    uint32_t dt_ms = now_ms - counter->latestAveragingMs;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	617b      	str	r3, [r7, #20]
    if (dt_ms > counter->intervalMs) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	429a      	cmp	r2, r3
 8008620:	d925      	bls.n	800866e <statsCntRateCounterUpdate+0x6a>
        float dt_s = dt_ms / 1000.0f;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	ee07 3a90 	vmov	s15, r3
 8008628:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800862c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008684 <statsCntRateCounterUpdate+0x80>
 8008630:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008634:	edc7 7a04 	vstr	s15, [r7, #16]
        float dv = counter->count - counter->latestCount;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	ee07 3a90 	vmov	s15, r3
 8008646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864a:	edc7 7a03 	vstr	s15, [r7, #12]

        counter->latestRate = dv / dt_s;
 800864e:	edd7 6a03 	vldr	s13, [r7, #12]
 8008652:	ed97 7a04 	vldr	s14, [r7, #16]
 8008656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	edc3 7a03 	vstr	s15, [r3, #12]

        counter->latestCount = counter->count;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	605a      	str	r2, [r3, #4]
        counter->latestAveragingMs = now_ms;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	609a      	str	r2, [r3, #8]
    }

    return counter->latestRate;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	ee07 3a90 	vmov	s15, r3
}
 8008676:	eeb0 0a67 	vmov.f32	s0, s15
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	447a0000 	.word	0x447a0000

08008688 <statsCntRateLogHandler>:

    logger->logByFunction.data = (void*)logger;
    logger->logByFunction.aquireFloat = statsCntRateLogHandler;
}

float statsCntRateLogHandler(uint32_t timestamp, void* data) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
    statsCntRateLogger_t* logger = (statsCntRateLogger_t*)data;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	60fb      	str	r3, [r7, #12]
    return statsCntRateCounterUpdate(&logger->rateCounter, timestamp);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3308      	adds	r3, #8
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff ffb1 	bl	8008604 <statsCntRateCounterUpdate>
 80086a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80086a6:	eeb0 0a67 	vmov.f32	s0, s15
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 80086b6:	4b14      	ldr	r3, [pc, #80]	; (8008708 <sysLoadInit+0x58>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f083 0301 	eor.w	r3, r3, #1
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <sysLoadInit+0x1e>
 80086c4:	223c      	movs	r2, #60	; 0x3c
 80086c6:	4911      	ldr	r1, [pc, #68]	; (800870c <sysLoadInit+0x5c>)
 80086c8:	4811      	ldr	r0, [pc, #68]	; (8008710 <sysLoadInit+0x60>)
 80086ca:	f7fc ffbf 	bl	800564c <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 80086ce:	4b11      	ldr	r3, [pc, #68]	; (8008714 <sysLoadInit+0x64>)
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	4b11      	ldr	r3, [pc, #68]	; (8008718 <sysLoadInit+0x68>)
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	2201      	movs	r2, #1
 80086da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80086de:	480f      	ldr	r0, [pc, #60]	; (800871c <sysLoadInit+0x6c>)
 80086e0:	f00c fe4e 	bl	8015380 <xTimerCreateStatic>
 80086e4:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 80086e6:	f00b fe59 	bl	801439c <xTaskGetTickCount>
 80086ea:	4602      	mov	r2, r0
 80086ec:	2364      	movs	r3, #100	; 0x64
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	2300      	movs	r3, #0
 80086f2:	2101      	movs	r1, #1
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f00c feb7 	bl	8015468 <xTimerGenericCommand>

  initialized = true;
 80086fa:	4b03      	ldr	r3, [pc, #12]	; (8008708 <sysLoadInit+0x58>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
}
 8008700:	bf00      	nop
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	200070dd 	.word	0x200070dd
 800870c:	0801af9c 	.word	0x0801af9c
 8008710:	0801afb8 	.word	0x0801afb8
 8008714:	200070e8 	.word	0x200070e8
 8008718:	080087a1 	.word	0x080087a1
 800871c:	0801afc8 	.word	0x0801afc8

08008720 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	e00f      	b.n	800874e <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 800872e:	4a18      	ldr	r2, [pc, #96]	; (8008790 <getPreviousTaskData+0x70>)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	00db      	lsls	r3, r3, #3
 8008734:	4413      	add	r3, r2
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	429a      	cmp	r2, r3
 800873c:	d104      	bne.n	8008748 <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	4a13      	ldr	r2, [pc, #76]	; (8008790 <getPreviousTaskData+0x70>)
 8008744:	4413      	add	r3, r2
 8008746:	e01f      	b.n	8008788 <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3301      	adds	r3, #1
 800874c:	60fb      	str	r3, [r7, #12]
 800874e:	4b11      	ldr	r3, [pc, #68]	; (8008794 <getPreviousTaskData+0x74>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	429a      	cmp	r2, r3
 8008756:	dbea      	blt.n	800872e <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 8008758:	4b0e      	ldr	r3, [pc, #56]	; (8008794 <getPreviousTaskData+0x74>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b1f      	cmp	r3, #31
 800875e:	dd04      	ble.n	800876a <getPreviousTaskData+0x4a>
 8008760:	224e      	movs	r2, #78	; 0x4e
 8008762:	490d      	ldr	r1, [pc, #52]	; (8008798 <getPreviousTaskData+0x78>)
 8008764:	480d      	ldr	r0, [pc, #52]	; (800879c <getPreviousTaskData+0x7c>)
 8008766:	f7fc ff71 	bl	800564c <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 800876a:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <getPreviousTaskData+0x74>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	4a07      	ldr	r2, [pc, #28]	; (8008790 <getPreviousTaskData+0x70>)
 8008772:	4413      	add	r3, r2
 8008774:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <getPreviousTaskData+0x74>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	4a04      	ldr	r2, [pc, #16]	; (8008794 <getPreviousTaskData+0x74>)
 8008784:	6013      	str	r3, [r2, #0]

  return result;
 8008786:	68bb      	ldr	r3, [r7, #8]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20003f44 	.word	0x20003f44
 8008794:	200070e0 	.word	0x200070e0
 8008798:	0801af9c 	.word	0x0801af9c
 800879c:	0801afdc 	.word	0x0801afdc

080087a0 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 80087a6:	af02      	add	r7, sp, #8
 80087a8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80087ac:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80087b0:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 80087b2:	4b4e      	ldr	r3, [pc, #312]	; (80088ec <timerHandler+0x14c>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8092 	beq.w	80088e0 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 80087bc:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	2120      	movs	r1, #32
 80087c6:	4618      	mov	r0, r3
 80087c8:	f00b fdf8 	bl	80143bc <uxTaskGetSystemState>
 80087cc:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 80087d0:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 80087d4:	2b1f      	cmp	r3, #31
 80087d6:	d904      	bls.n	80087e2 <timerHandler+0x42>
 80087d8:	225d      	movs	r2, #93	; 0x5d
 80087da:	4945      	ldr	r1, [pc, #276]	; (80088f0 <timerHandler+0x150>)
 80087dc:	4845      	ldr	r0, [pc, #276]	; (80088f4 <timerHandler+0x154>)
 80087de:	f7fc ff35 	bl	800564c <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 80087e2:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 80087e6:	4b44      	ldr	r3, [pc, #272]	; (80088f8 <timerHandler+0x158>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 80087f0:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 80087f4:	f7f7 fe96 	bl	8000524 <__aeabi_ui2d>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	f04f 0000 	mov.w	r0, #0
 8008800:	493e      	ldr	r1, [pc, #248]	; (80088fc <timerHandler+0x15c>)
 8008802:	f7f8 f833 	bl	800086c <__aeabi_ddiv>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4610      	mov	r0, r2
 800880c:	4619      	mov	r1, r3
 800880e:	f7f8 f9db 	bl	8000bc8 <__aeabi_d2f>
 8008812:	4603      	mov	r3, r0
 8008814:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8008818:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 800881a:	4939      	ldr	r1, [pc, #228]	; (8008900 <timerHandler+0x160>)
 800881c:	2000      	movs	r0, #0
 800881e:	f7fc fee7 	bl	80055f0 <SEGGER_RTT_printf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 8008822:	4938      	ldr	r1, [pc, #224]	; (8008904 <timerHandler+0x164>)
 8008824:	2000      	movs	r0, #0
 8008826:	f7fc fee3 	bl	80055f0 <SEGGER_RTT_printf>
    for (uint32_t i = 0; i < taskCount; i++) {
 800882a:	2300      	movs	r3, #0
 800882c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8008830:	e049      	b.n	80088c6 <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 8008832:	f107 010c 	add.w	r1, r7, #12
 8008836:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 800883a:	4613      	mov	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	4413      	add	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 8008848:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff ff66 	bl	8008720 <getPreviousTaskData>
 8008854:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 8008858:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 8008862:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008876:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800887a:	ed93 7a00 	vldr	s14, [r3]
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008886:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 800888a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800888e:	6818      	ldr	r0, [r3, #0]
 8008890:	f7f7 fe6a 	bl	8000568 <__aeabi_f2d>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800889c:	8c09      	ldrh	r1, [r1, #32]
 800889e:	4608      	mov	r0, r1
 80088a0:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 80088a4:	6849      	ldr	r1, [r1, #4]
 80088a6:	9101      	str	r1, [sp, #4]
 80088a8:	9000      	str	r0, [sp, #0]
 80088aa:	4917      	ldr	r1, [pc, #92]	; (8008908 <timerHandler+0x168>)
 80088ac:	2000      	movs	r0, #0
 80088ae:	f7fc fe9f 	bl	80055f0 <SEGGER_RTT_printf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 80088b2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80088b6:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 80088ba:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 80088bc:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 80088c0:	3301      	adds	r3, #1
 80088c2:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80088c6:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 80088ca:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d3af      	bcc.n	8008832 <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 80088d2:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 80088d6:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <timerHandler+0x158>)
 80088d8:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 80088da:	4b04      	ldr	r3, [pc, #16]	; (80088ec <timerHandler+0x14c>)
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
  }
}
 80088e0:	bf00      	nop
 80088e2:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	200070de 	.word	0x200070de
 80088f0:	0801af9c 	.word	0x0801af9c
 80088f4:	0801affc 	.word	0x0801affc
 80088f8:	200070e4 	.word	0x200070e4
 80088fc:	40590000 	.word	0x40590000
 8008900:	0801b018 	.word	0x0801b018
 8008904:	0801b024 	.word	0x0801b024
 8008908:	0801b03c 	.word	0x0801b03c

0800890c <usecTimerReset>:
static uint32_t usecTimerHighCount;



void usecTimerReset(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <usecTimerReset+0x38>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <usecTimerReset+0x18>
 800891a:	2211      	movs	r2, #17
 800891c:	490a      	ldr	r1, [pc, #40]	; (8008948 <usecTimerReset+0x3c>)
 800891e:	480b      	ldr	r0, [pc, #44]	; (800894c <usecTimerReset+0x40>)
 8008920:	f7fc fe94 	bl	800564c <assertFail>

  const uint32_t zero = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	607b      	str	r3, [r7, #4]
  __atomic_store(&usecTimerHighCount, &zero, __ATOMIC_SEQ_CST);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a09      	ldr	r2, [pc, #36]	; (8008950 <usecTimerReset+0x44>)
 800892c:	f3bf 8f5b 	dmb	ish
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	f3bf 8f5b 	dmb	ish

  TIM7->CNT = 0;
 8008936:	4b07      	ldr	r3, [pc, #28]	; (8008954 <usecTimerReset+0x48>)
 8008938:	2200      	movs	r2, #0
 800893a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800893c:	bf00      	nop
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20007114 	.word	0x20007114
 8008948:	0801b06c 	.word	0x0801b06c
 800894c:	0801b08c 	.word	0x0801b08c
 8008950:	20007118 	.word	0x20007118
 8008954:	40001400 	.word	0x40001400

08008958 <resetParamCallback>:

/**
 * Parameters for the usec timer
 * */
static void resetParamCallback(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	af00      	add	r7, sp, #0
  if (reset) {
 800895c:	4b05      	ldr	r3, [pc, #20]	; (8008974 <resetParamCallback+0x1c>)
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d004      	beq.n	800896e <resetParamCallback+0x16>
    usecTimerReset();
 8008964:	f7ff ffd2 	bl	800890c <usecTimerReset>
    reset = 0;
 8008968:	4b02      	ldr	r3, [pc, #8]	; (8008974 <resetParamCallback+0x1c>)
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
  }
}
 800896e:	bf00      	nop
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20007115 	.word	0x20007115

08008978 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af02      	add	r7, sp, #8
  if (workerQueue)
 800897e:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <workerInit+0x40>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d114      	bne.n	80089b0 <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 8008986:	2305      	movs	r3, #5
 8008988:	4618      	mov	r0, r3
 800898a:	2308      	movs	r3, #8
 800898c:	4619      	mov	r1, r3
 800898e:	2300      	movs	r3, #0
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <workerInit+0x44>)
 8008994:	4a0a      	ldr	r2, [pc, #40]	; (80089c0 <workerInit+0x48>)
 8008996:	f00a fb55 	bl	8013044 <xQueueGenericCreateStatic>
 800899a:	4603      	mov	r3, r0
 800899c:	4a06      	ldr	r2, [pc, #24]	; (80089b8 <workerInit+0x40>)
 800899e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 80089a0:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <workerInit+0x40>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a07      	ldr	r2, [pc, #28]	; (80089c4 <workerInit+0x4c>)
 80089a6:	4908      	ldr	r1, [pc, #32]	; (80089c8 <workerInit+0x50>)
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fd53 	bl	8008454 <qmRegisterQueue>
 80089ae:	e000      	b.n	80089b2 <workerInit+0x3a>
    return;
 80089b0:	bf00      	nop
}
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	2000711c 	.word	0x2000711c
 80089bc:	2000406c 	.word	0x2000406c
 80089c0:	20004044 	.word	0x20004044
 80089c4:	0801b118 	.word	0x0801b118
 80089c8:	0801b124 	.word	0x0801b124

080089cc <workerSchedule>:
      work.function(work.arg);
  }
}

int workerSchedule(void (*function)(void*), void *arg)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  struct worker_work work;

  if (!function)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <workerSchedule+0x14>
    return ENOEXEC;
 80089dc:	2308      	movs	r3, #8
 80089de:	e011      	b.n	8008a04 <workerSchedule+0x38>

  work.function = function;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	60bb      	str	r3, [r7, #8]
  work.arg = arg;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(workerQueue, &work, 0) == pdFALSE)
 80089e8:	4b08      	ldr	r3, [pc, #32]	; (8008a0c <workerSchedule+0x40>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	f107 0108 	add.w	r1, r7, #8
 80089f0:	2300      	movs	r3, #0
 80089f2:	2200      	movs	r2, #0
 80089f4:	f00a fc3c 	bl	8013270 <xQueueGenericSend>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <workerSchedule+0x36>
    return ENOMEM;
 80089fe:	230c      	movs	r3, #12
 8008a00:	e000      	b.n	8008a04 <workerSchedule+0x38>

  return 0;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	2000711c 	.word	0x2000711c

08008a10 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0

}
 8008a14:	bf00      	nop
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	af00      	add	r7, sp, #0
return 0;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a07      	ldr	r2, [pc, #28]	; (8008a70 <vApplicationGetIdleTaskMemory+0x2c>)
 8008a54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4a06      	ldr	r2, [pc, #24]	; (8008a74 <vApplicationGetIdleTaskMemory+0x30>)
 8008a5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2280      	movs	r2, #128	; 0x80
 8008a60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20007120 	.word	0x20007120
 8008a74:	200071d8 	.word	0x200071d8

08008a78 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4a07      	ldr	r2, [pc, #28]	; (8008aa4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	4a06      	ldr	r2, [pc, #24]	; (8008aa8 <vApplicationGetTimerTaskMemory+0x30>)
 8008a8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a96:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008a98:	bf00      	nop
 8008a9a:	3714      	adds	r7, #20
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	200073d8 	.word	0x200073d8
 8008aa8:	20007490 	.word	0x20007490

08008aac <LL_SPI_SetStandard>:
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f023 0210 	bic.w	r2, r3, #16
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	605a      	str	r2, [r3, #4]
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
	...

08008ad4 <LL_AHB1_GRP1_EnableClock>:
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008adc:	4b08      	ldr	r3, [pc, #32]	; (8008b00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ae0:	4907      	ldr	r1, [pc, #28]	; (8008b00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008ae8:	4b05      	ldr	r3, [pc, #20]	; (8008b00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8008aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4013      	ands	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008af2:	68fb      	ldr	r3, [r7, #12]
}
 8008af4:	bf00      	nop
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	40023800 	.word	0x40023800

08008b04 <LL_APB2_GRP1_EnableClock>:
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b10:	4907      	ldr	r1, [pc, #28]	; (8008b30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <LL_APB2_GRP1_EnableClock+0x2c>)
 8008b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008b22:	68fb      	ldr	r3, [r7, #12]
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	40023800 	.word	0x40023800

08008b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008b34:	b5b0      	push	{r4, r5, r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b3a:	f001 f831 	bl	8009ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b3e:	f000 f871 	bl	8008c24 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b42:	f000 fadb 	bl	80090fc <MX_GPIO_Init>
  MX_DMA_Init();
 8008b46:	f000 faa1 	bl	800908c <MX_DMA_Init>
  MX_USART6_UART_Init();
 8008b4a:	f000 fa75 	bl	8009038 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8008b4e:	f000 fa3d 	bl	8008fcc <MX_TIM7_Init>
  MX_SPI1_Init();
 8008b52:	f000 f973 	bl	8008e3c <MX_SPI1_Init>
  MX_ADC1_Init();
 8008b56:	f000 f8cd 	bl	8008cf4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8008b5a:	f000 f91d 	bl	8008d98 <MX_ADC2_Init>
  MX_TIM3_Init();
 8008b5e:	f000 f9bf 	bl	8008ee0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  debugInit();
 8008b62:	f7fc fec4 	bl	80058ee <debugInit>
  uartInit();
 8008b66:	f7fc fed3 	bl	8005910 <uartInit>
  uartDmaInit();
 8008b6a:	f7fc feef 	bl	800594c <uartDmaInit>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8008b6e:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <main+0xcc>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	4b22      	ldr	r3, [pc, #136]	; (8008c00 <main+0xcc>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0220 	orr.w	r2, r2, #32
 8008b7c:	60da      	str	r2, [r3, #12]


  freertos_IntroTitle();
 8008b7e:	f000 fb49 	bl	8009214 <freertos_IntroTitle>

  check_enter_bootloader();
 8008b82:	f7fa f899 	bl	8002cb8 <check_enter_bootloader>

  int err = platformInit();
 8008b86:	f7fb fdf4 	bl	8004772 <platformInit>
 8008b8a:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d000      	beq.n	8008b94 <main+0x60>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 8008b92:	e7fe      	b.n	8008b92 <main+0x5e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8008b94:	481b      	ldr	r0, [pc, #108]	; (8008c04 <main+0xd0>)
 8008b96:	f004 fabb 	bl	800d110 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8008b9a:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <main+0xd4>)
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	4a1b      	ldr	r2, [pc, #108]	; (8008c0c <main+0xd8>)
 8008ba0:	6013      	str	r3, [r2, #0]
//  vTaskDelay(M2T(2000));
  delay_us(1000);	// 1002 us
 8008ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ba6:	f000 fbc1 	bl	800932c <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8008baa:	4b17      	ldr	r3, [pc, #92]	; (8008c08 <main+0xd4>)
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4a18      	ldr	r2, [pc, #96]	; (8008c10 <main+0xdc>)
 8008bb0:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 8008bb2:	4814      	ldr	r0, [pc, #80]	; (8008c04 <main+0xd0>)
 8008bb4:	f004 fb1c 	bl	800d1f0 <HAL_TIM_Base_Stop_IT>
  //  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(t2-t1)/CLOCK_PER_USEC);
 8008bb8:	4b15      	ldr	r3, [pc, #84]	; (8008c10 <main+0xdc>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4b13      	ldr	r3, [pc, #76]	; (8008c0c <main+0xd8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <main+0xe0>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	091b      	lsrs	r3, r3, #4
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4912      	ldr	r1, [pc, #72]	; (8008c18 <main+0xe4>)
 8008bce:	2000      	movs	r0, #0
 8008bd0:	f7fc fd0e 	bl	80055f0 <SEGGER_RTT_printf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 8008bd4:	f7fb f8b4 	bl	8003d40 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008bd8:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <main+0xe8>)
 8008bda:	463c      	mov	r4, r7
 8008bdc:	461d      	mov	r5, r3
 8008bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008be2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008be6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008bea:	463b      	mov	r3, r7
 8008bec:	2100      	movs	r1, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f00a f8a5 	bl	8012d3e <osThreadCreate>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	4a0a      	ldr	r2, [pc, #40]	; (8008c20 <main+0xec>)
 8008bf8:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008bfa:	f00a f899 	bl	8012d30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008bfe:	e7fe      	b.n	8008bfe <main+0xca>
 8008c00:	20007e70 	.word	0x20007e70
 8008c04:	20007e28 	.word	0x20007e28
 8008c08:	e0001000 	.word	0xe0001000
 8008c0c:	20007f7c 	.word	0x20007f7c
 8008c10:	20007f80 	.word	0x20007f80
 8008c14:	38e38e39 	.word	0x38e38e39
 8008c18:	0801b140 	.word	0x0801b140
 8008c1c:	0801b15c 	.word	0x0801b15c
 8008c20:	20007f78 	.word	0x20007f78

08008c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b094      	sub	sp, #80	; 0x50
 8008c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c2a:	f107 0320 	add.w	r3, r7, #32
 8008c2e:	2230      	movs	r2, #48	; 0x30
 8008c30:	2100      	movs	r1, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	f00e ff20 	bl	8017a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c38:	f107 030c 	add.w	r3, r7, #12
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	605a      	str	r2, [r3, #4]
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	60da      	str	r2, [r3, #12]
 8008c46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60bb      	str	r3, [r7, #8]
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <SystemClock_Config+0xc8>)
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	4a26      	ldr	r2, [pc, #152]	; (8008cec <SystemClock_Config+0xc8>)
 8008c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c56:	6413      	str	r3, [r2, #64]	; 0x40
 8008c58:	4b24      	ldr	r3, [pc, #144]	; (8008cec <SystemClock_Config+0xc8>)
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c60:	60bb      	str	r3, [r7, #8]
 8008c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008c64:	2300      	movs	r3, #0
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	4b21      	ldr	r3, [pc, #132]	; (8008cf0 <SystemClock_Config+0xcc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a20      	ldr	r2, [pc, #128]	; (8008cf0 <SystemClock_Config+0xcc>)
 8008c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	4b1e      	ldr	r3, [pc, #120]	; (8008cf0 <SystemClock_Config+0xcc>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c7c:	607b      	str	r3, [r7, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008c80:	2301      	movs	r3, #1
 8008c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008c94:	2304      	movs	r3, #4
 8008c96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8008c98:	2348      	movs	r3, #72	; 0x48
 8008c9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ca4:	f107 0320 	add.w	r3, r7, #32
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f003 fd49 	bl	800c740 <HAL_RCC_OscConfig>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008cb4:	f000 fb66 	bl	8009384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008cb8:	230f      	movs	r3, #15
 8008cba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008cce:	f107 030c 	add.w	r3, r7, #12
 8008cd2:	2102      	movs	r1, #2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f003 ffab 	bl	800cc30 <HAL_RCC_ClockConfig>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8008ce0:	f000 fb50 	bl	8009384 <Error_Handler>
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	3750      	adds	r7, #80	; 0x50
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	40007000 	.word	0x40007000

08008cf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008cfa:	463b      	mov	r3, r7
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	605a      	str	r2, [r3, #4]
 8008d02:	609a      	str	r2, [r3, #8]
 8008d04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008d06:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d08:	4a21      	ldr	r2, [pc, #132]	; (8008d90 <MX_ADC1_Init+0x9c>)
 8008d0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008d0c:	4b1f      	ldr	r3, [pc, #124]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d0e:	2200      	movs	r2, #0
 8008d10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008d12:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008d18:	4b1c      	ldr	r3, [pc, #112]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008d1e:	4b1b      	ldr	r3, [pc, #108]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d20:	2201      	movs	r2, #1
 8008d22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008d24:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008d2c:	4b17      	ldr	r3, [pc, #92]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008d32:	4b16      	ldr	r3, [pc, #88]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d34:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <MX_ADC1_Init+0xa0>)
 8008d36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008d38:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d40:	2201      	movs	r2, #1
 8008d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008d44:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008d4c:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008d52:	480e      	ldr	r0, [pc, #56]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d54:	f000 ffba 	bl	8009ccc <HAL_ADC_Init>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008d5e:	f000 fb11 	bl	8009384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008d62:	230b      	movs	r3, #11
 8008d64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008d66:	2301      	movs	r3, #1
 8008d68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008d6a:	2307      	movs	r3, #7
 8008d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d6e:	463b      	mov	r3, r7
 8008d70:	4619      	mov	r1, r3
 8008d72:	4806      	ldr	r0, [pc, #24]	; (8008d8c <MX_ADC1_Init+0x98>)
 8008d74:	f001 f91c 	bl	8009fb0 <HAL_ADC_ConfigChannel>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8008d7e:	f000 fb01 	bl	8009384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20007c90 	.word	0x20007c90
 8008d90:	40012000 	.word	0x40012000
 8008d94:	0f000001 	.word	0x0f000001

08008d98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008d9e:	463b      	mov	r3, r7
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	605a      	str	r2, [r3, #4]
 8008da6:	609a      	str	r2, [r3, #8]
 8008da8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8008daa:	4b21      	ldr	r3, [pc, #132]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dac:	4a21      	ldr	r2, [pc, #132]	; (8008e34 <MX_ADC2_Init+0x9c>)
 8008dae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008db0:	4b1f      	ldr	r3, [pc, #124]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8008db6:	4b1e      	ldr	r3, [pc, #120]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8008dbc:	4b1c      	ldr	r3, [pc, #112]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8008dc2:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8008dc8:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008dd0:	4b17      	ldr	r3, [pc, #92]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008dd6:	4b16      	ldr	r3, [pc, #88]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dd8:	4a17      	ldr	r2, [pc, #92]	; (8008e38 <MX_ADC2_Init+0xa0>)
 8008dda:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008ddc:	4b14      	ldr	r3, [pc, #80]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8008de2:	4b13      	ldr	r3, [pc, #76]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8008de8:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008df0:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008df2:	2201      	movs	r2, #1
 8008df4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8008df6:	480e      	ldr	r0, [pc, #56]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008df8:	f000 ff68 	bl	8009ccc <HAL_ADC_Init>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8008e02:	f000 fabf 	bl	8009384 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8008e06:	230c      	movs	r3, #12
 8008e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008e0e:	2307      	movs	r3, #7
 8008e10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8008e12:	463b      	mov	r3, r7
 8008e14:	4619      	mov	r1, r3
 8008e16:	4806      	ldr	r0, [pc, #24]	; (8008e30 <MX_ADC2_Init+0x98>)
 8008e18:	f001 f8ca 	bl	8009fb0 <HAL_ADC_ConfigChannel>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8008e22:	f000 faaf 	bl	8009384 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20007cd8 	.word	0x20007cd8
 8008e34:	40012100 	.word	0x40012100
 8008e38:	0f000001 	.word	0x0f000001

08008e3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b090      	sub	sp, #64	; 0x40
 8008e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8008e42:	f107 0318 	add.w	r3, r7, #24
 8008e46:	2228      	movs	r2, #40	; 0x28
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f00e fe14 	bl	8017a78 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e50:	463b      	mov	r3, r7
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	605a      	str	r2, [r3, #4]
 8008e58:	609a      	str	r2, [r3, #8]
 8008e5a:	60da      	str	r2, [r3, #12]
 8008e5c:	611a      	str	r2, [r3, #16]
 8008e5e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8008e60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008e64:	f7ff fe4e 	bl	8008b04 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f7ff fe33 	bl	8008ad4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8008e6e:	23e0      	movs	r3, #224	; 0xe0
 8008e70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8008e72:	2302      	movs	r3, #2
 8008e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8008e76:	2303      	movs	r3, #3
 8008e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8008e82:	2305      	movs	r3, #5
 8008e84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e86:	463b      	mov	r3, r7
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4813      	ldr	r0, [pc, #76]	; (8008ed8 <MX_SPI1_Init+0x9c>)
 8008e8c:	f006 fb77 	bl	800f57e <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8008e94:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008e98:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8008ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8008eac:	2310      	movs	r3, #16
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8008eb8:	230a      	movs	r3, #10
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8008ebc:	f107 0318 	add.w	r3, r7, #24
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4806      	ldr	r0, [pc, #24]	; (8008edc <MX_SPI1_Init+0xa0>)
 8008ec4:	f006 fbff 	bl	800f6c6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4804      	ldr	r0, [pc, #16]	; (8008edc <MX_SPI1_Init+0xa0>)
 8008ecc:	f7ff fdee 	bl	8008aac <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008ed0:	bf00      	nop
 8008ed2:	3740      	adds	r7, #64	; 0x40
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40020000 	.word	0x40020000
 8008edc:	40013000 	.word	0x40013000

08008ee0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08e      	sub	sp, #56	; 0x38
 8008ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	605a      	str	r2, [r3, #4]
 8008ef0:	609a      	str	r2, [r3, #8]
 8008ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ef4:	f107 0320 	add.w	r3, r7, #32
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008efe:	1d3b      	adds	r3, r7, #4
 8008f00:	2200      	movs	r2, #0
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	605a      	str	r2, [r3, #4]
 8008f06:	609a      	str	r2, [r3, #8]
 8008f08:	60da      	str	r2, [r3, #12]
 8008f0a:	611a      	str	r2, [r3, #16]
 8008f0c:	615a      	str	r2, [r3, #20]
 8008f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008f10:	4b2c      	ldr	r3, [pc, #176]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f12:	4a2d      	ldr	r2, [pc, #180]	; (8008fc8 <MX_TIM3_Init+0xe8>)
 8008f14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8008f16:	4b2b      	ldr	r3, [pc, #172]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008f1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f1e:	4b29      	ldr	r3, [pc, #164]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8008f24:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f26:	2247      	movs	r2, #71	; 0x47
 8008f28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f2a:	4b26      	ldr	r3, [pc, #152]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f30:	4b24      	ldr	r3, [pc, #144]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008f36:	4823      	ldr	r0, [pc, #140]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f38:	f004 f89a 	bl	800d070 <HAL_TIM_Base_Init>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8008f42:	f000 fa1f 	bl	8009384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f50:	4619      	mov	r1, r3
 8008f52:	481c      	ldr	r0, [pc, #112]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f54:	f004 fcbe 	bl	800d8d4 <HAL_TIM_ConfigClockSource>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8008f5e:	f000 fa11 	bl	8009384 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008f62:	4818      	ldr	r0, [pc, #96]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f64:	f004 f973 	bl	800d24e <HAL_TIM_PWM_Init>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8008f6e:	f000 fa09 	bl	8009384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f72:	2300      	movs	r3, #0
 8008f74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008f7a:	f107 0320 	add.w	r3, r7, #32
 8008f7e:	4619      	mov	r1, r3
 8008f80:	4810      	ldr	r0, [pc, #64]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008f82:	f005 f8bd 	bl	800e100 <HAL_TIMEx_MasterConfigSynchronization>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8008f8c:	f000 f9fa 	bl	8009384 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f90:	2360      	movs	r3, #96	; 0x60
 8008f92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 8008f94:	2324      	movs	r3, #36	; 0x24
 8008f96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008fa0:	1d3b      	adds	r3, r7, #4
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4807      	ldr	r0, [pc, #28]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008fa8:	f004 fbd2 	bl	800d750 <HAL_TIM_PWM_ConfigChannel>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8008fb2:	f000 f9e7 	bl	8009384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008fb6:	4803      	ldr	r0, [pc, #12]	; (8008fc4 <MX_TIM3_Init+0xe4>)
 8008fb8:	f000 fb38 	bl	800962c <HAL_TIM_MspPostInit>

}
 8008fbc:	bf00      	nop
 8008fbe:	3738      	adds	r7, #56	; 0x38
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	20007de0 	.word	0x20007de0
 8008fc8:	40000400 	.word	0x40000400

08008fcc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8008fda:	4b15      	ldr	r3, [pc, #84]	; (8009030 <MX_TIM7_Init+0x64>)
 8008fdc:	4a15      	ldr	r2, [pc, #84]	; (8009034 <MX_TIM7_Init+0x68>)
 8008fde:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8008fe0:	4b13      	ldr	r3, [pc, #76]	; (8009030 <MX_TIM7_Init+0x64>)
 8008fe2:	2247      	movs	r2, #71	; 0x47
 8008fe4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fe6:	4b12      	ldr	r3, [pc, #72]	; (8009030 <MX_TIM7_Init+0x64>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8008fec:	4b10      	ldr	r3, [pc, #64]	; (8009030 <MX_TIM7_Init+0x64>)
 8008fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ff2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <MX_TIM7_Init+0x64>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8008ffa:	480d      	ldr	r0, [pc, #52]	; (8009030 <MX_TIM7_Init+0x64>)
 8008ffc:	f004 f838 	bl	800d070 <HAL_TIM_Base_Init>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8009006:	f000 f9bd 	bl	8009384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800900a:	2300      	movs	r3, #0
 800900c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800900e:	2300      	movs	r3, #0
 8009010:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009012:	463b      	mov	r3, r7
 8009014:	4619      	mov	r1, r3
 8009016:	4806      	ldr	r0, [pc, #24]	; (8009030 <MX_TIM7_Init+0x64>)
 8009018:	f005 f872 	bl	800e100 <HAL_TIMEx_MasterConfigSynchronization>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8009022:	f000 f9af 	bl	8009384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20007e28 	.word	0x20007e28
 8009034:	40001400 	.word	0x40001400

08009038 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800903c:	4b11      	ldr	r3, [pc, #68]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 800903e:	4a12      	ldr	r2, [pc, #72]	; (8009088 <MX_USART6_UART_Init+0x50>)
 8009040:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8009042:	4b10      	ldr	r3, [pc, #64]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 8009044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009048:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800904a:	4b0e      	ldr	r3, [pc, #56]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 800904c:	2200      	movs	r2, #0
 800904e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 8009052:	2200      	movs	r2, #0
 8009054:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009056:	4b0b      	ldr	r3, [pc, #44]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 8009058:	2200      	movs	r2, #0
 800905a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 800905e:	220c      	movs	r2, #12
 8009060:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009062:	4b08      	ldr	r3, [pc, #32]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 8009064:	2200      	movs	r2, #0
 8009066:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009068:	4b06      	ldr	r3, [pc, #24]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 800906a:	2200      	movs	r2, #0
 800906c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800906e:	4805      	ldr	r0, [pc, #20]	; (8009084 <MX_USART6_UART_Init+0x4c>)
 8009070:	f005 f8d6 	bl	800e220 <HAL_UART_Init>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800907a:	f000 f983 	bl	8009384 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800907e:	bf00      	nop
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	20007e70 	.word	0x20007e70
 8009088:	40011400 	.word	0x40011400

0800908c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009092:	2300      	movs	r3, #0
 8009094:	607b      	str	r3, [r7, #4]
 8009096:	4b18      	ldr	r3, [pc, #96]	; (80090f8 <MX_DMA_Init+0x6c>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	4a17      	ldr	r2, [pc, #92]	; (80090f8 <MX_DMA_Init+0x6c>)
 800909c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090a0:	6313      	str	r3, [r2, #48]	; 0x30
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <MX_DMA_Init+0x6c>)
 80090a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80090ae:	2200      	movs	r2, #0
 80090b0:	2105      	movs	r1, #5
 80090b2:	2038      	movs	r0, #56	; 0x38
 80090b4:	f001 faf7 	bl	800a6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80090b8:	2038      	movs	r0, #56	; 0x38
 80090ba:	f001 fb10 	bl	800a6de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80090be:	2200      	movs	r2, #0
 80090c0:	2105      	movs	r1, #5
 80090c2:	2039      	movs	r0, #57	; 0x39
 80090c4:	f001 faef 	bl	800a6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80090c8:	2039      	movs	r0, #57	; 0x39
 80090ca:	f001 fb08 	bl	800a6de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80090ce:	2200      	movs	r2, #0
 80090d0:	2105      	movs	r1, #5
 80090d2:	203a      	movs	r0, #58	; 0x3a
 80090d4:	f001 fae7 	bl	800a6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80090d8:	203a      	movs	r0, #58	; 0x3a
 80090da:	f001 fb00 	bl	800a6de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80090de:	2200      	movs	r2, #0
 80090e0:	2105      	movs	r1, #5
 80090e2:	2046      	movs	r0, #70	; 0x46
 80090e4:	f001 fadf 	bl	800a6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80090e8:	2046      	movs	r0, #70	; 0x46
 80090ea:	f001 faf8 	bl	800a6de <HAL_NVIC_EnableIRQ>

}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40023800 	.word	0x40023800

080090fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08a      	sub	sp, #40	; 0x28
 8009100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009102:	f107 0314 	add.w	r3, r7, #20
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	605a      	str	r2, [r3, #4]
 800910c:	609a      	str	r2, [r3, #8]
 800910e:	60da      	str	r2, [r3, #12]
 8009110:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009112:	2300      	movs	r3, #0
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	4b36      	ldr	r3, [pc, #216]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911a:	4a35      	ldr	r2, [pc, #212]	; (80091f0 <MX_GPIO_Init+0xf4>)
 800911c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009120:	6313      	str	r3, [r2, #48]	; 0x30
 8009122:	4b33      	ldr	r3, [pc, #204]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800912a:	613b      	str	r3, [r7, #16]
 800912c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	4b2f      	ldr	r3, [pc, #188]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009136:	4a2e      	ldr	r2, [pc, #184]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009138:	f043 0304 	orr.w	r3, r3, #4
 800913c:	6313      	str	r3, [r2, #48]	; 0x30
 800913e:	4b2c      	ldr	r3, [pc, #176]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800914a:	2300      	movs	r3, #0
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	4b28      	ldr	r3, [pc, #160]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	4a27      	ldr	r2, [pc, #156]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009154:	f043 0301 	orr.w	r3, r3, #1
 8009158:	6313      	str	r3, [r2, #48]	; 0x30
 800915a:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <MX_GPIO_Init+0xf4>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	60bb      	str	r3, [r7, #8]
 8009164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009166:	2300      	movs	r3, #0
 8009168:	607b      	str	r3, [r7, #4]
 800916a:	4b21      	ldr	r3, [pc, #132]	; (80091f0 <MX_GPIO_Init+0xf4>)
 800916c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800916e:	4a20      	ldr	r2, [pc, #128]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009170:	f043 0302 	orr.w	r3, r3, #2
 8009174:	6313      	str	r3, [r2, #48]	; 0x30
 8009176:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <MX_GPIO_Init+0xf4>)
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	607b      	str	r3, [r7, #4]
 8009180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8009182:	2201      	movs	r2, #1
 8009184:	2110      	movs	r1, #16
 8009186:	481b      	ldr	r0, [pc, #108]	; (80091f4 <MX_GPIO_Init+0xf8>)
 8009188:	f002 f870 	bl	800b26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800918c:	2200      	movs	r2, #0
 800918e:	2120      	movs	r1, #32
 8009190:	4819      	ldr	r0, [pc, #100]	; (80091f8 <MX_GPIO_Init+0xfc>)
 8009192:	f002 f86b 	bl	800b26c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8009196:	2310      	movs	r3, #16
 8009198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800919a:	2301      	movs	r3, #1
 800919c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091a2:	2303      	movs	r3, #3
 80091a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 80091a6:	f107 0314 	add.w	r3, r7, #20
 80091aa:	4619      	mov	r1, r3
 80091ac:	4811      	ldr	r0, [pc, #68]	; (80091f4 <MX_GPIO_Init+0xf8>)
 80091ae:	f001 fec1 	bl	800af34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 80091b2:	2310      	movs	r3, #16
 80091b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80091b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80091ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091bc:	2300      	movs	r3, #0
 80091be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 80091c0:	f107 0314 	add.w	r3, r7, #20
 80091c4:	4619      	mov	r1, r3
 80091c6:	480d      	ldr	r0, [pc, #52]	; (80091fc <MX_GPIO_Init+0x100>)
 80091c8:	f001 feb4 	bl	800af34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80091cc:	2320      	movs	r3, #32
 80091ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091d0:	2301      	movs	r3, #1
 80091d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091d8:	2300      	movs	r3, #0
 80091da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80091dc:	f107 0314 	add.w	r3, r7, #20
 80091e0:	4619      	mov	r1, r3
 80091e2:	4805      	ldr	r0, [pc, #20]	; (80091f8 <MX_GPIO_Init+0xfc>)
 80091e4:	f001 fea6 	bl	800af34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80091e8:	bf00      	nop
 80091ea:	3728      	adds	r7, #40	; 0x28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	40023800 	.word	0x40023800
 80091f4:	40020000 	.word	0x40020000
 80091f8:	40020400 	.word	0x40020400
 80091fc:	40020800 	.word	0x40020800

08009200 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8009204:	4b02      	ldr	r3, [pc, #8]	; (8009210 <OSVersion+0x10>)
}
 8009206:	4618      	mov	r0, r3
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	0801b178 	.word	0x0801b178

08009214 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8009218:	492e      	ldr	r1, [pc, #184]	; (80092d4 <freertos_IntroTitle+0xc0>)
 800921a:	2000      	movs	r0, #0
 800921c:	f7fc f9e8 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8009220:	492d      	ldr	r1, [pc, #180]	; (80092d8 <freertos_IntroTitle+0xc4>)
 8009222:	2000      	movs	r0, #0
 8009224:	f7fc f9e4 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8009228:	492c      	ldr	r1, [pc, #176]	; (80092dc <freertos_IntroTitle+0xc8>)
 800922a:	2000      	movs	r0, #0
 800922c:	f7fc f9e0 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8009230:	492b      	ldr	r1, [pc, #172]	; (80092e0 <freertos_IntroTitle+0xcc>)
 8009232:	2000      	movs	r0, #0
 8009234:	f7fc f9dc 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8009238:	492a      	ldr	r1, [pc, #168]	; (80092e4 <freertos_IntroTitle+0xd0>)
 800923a:	2000      	movs	r0, #0
 800923c:	f7fc f9d8 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8009240:	4929      	ldr	r1, [pc, #164]	; (80092e8 <freertos_IntroTitle+0xd4>)
 8009242:	2000      	movs	r0, #0
 8009244:	f7fc f9d4 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8009248:	4928      	ldr	r1, [pc, #160]	; (80092ec <freertos_IntroTitle+0xd8>)
 800924a:	2000      	movs	r0, #0
 800924c:	f7fc f9d0 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8009250:	4927      	ldr	r1, [pc, #156]	; (80092f0 <freertos_IntroTitle+0xdc>)
 8009252:	2000      	movs	r0, #0
 8009254:	f7fc f9cc 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8009258:	4926      	ldr	r1, [pc, #152]	; (80092f4 <freertos_IntroTitle+0xe0>)
 800925a:	2000      	movs	r0, #0
 800925c:	f7fc f9c8 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8009260:	4925      	ldr	r1, [pc, #148]	; (80092f8 <freertos_IntroTitle+0xe4>)
 8009262:	2000      	movs	r0, #0
 8009264:	f7fc f9c4 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8009268:	4924      	ldr	r1, [pc, #144]	; (80092fc <freertos_IntroTitle+0xe8>)
 800926a:	2000      	movs	r0, #0
 800926c:	f7fc f9c0 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8009270:	4923      	ldr	r1, [pc, #140]	; (8009300 <freertos_IntroTitle+0xec>)
 8009272:	2000      	movs	r0, #0
 8009274:	f7fc f9bc 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8009278:	4922      	ldr	r1, [pc, #136]	; (8009304 <freertos_IntroTitle+0xf0>)
 800927a:	2000      	movs	r0, #0
 800927c:	f7fc f9b8 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8009280:	4921      	ldr	r1, [pc, #132]	; (8009308 <freertos_IntroTitle+0xf4>)
 8009282:	2000      	movs	r0, #0
 8009284:	f7fc f9b4 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8009288:	4920      	ldr	r1, [pc, #128]	; (800930c <freertos_IntroTitle+0xf8>)
 800928a:	2000      	movs	r0, #0
 800928c:	f7fc f9b0 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8009290:	491f      	ldr	r1, [pc, #124]	; (8009310 <freertos_IntroTitle+0xfc>)
 8009292:	2000      	movs	r0, #0
 8009294:	f7fc f9ac 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8009298:	491e      	ldr	r1, [pc, #120]	; (8009314 <freertos_IntroTitle+0x100>)
 800929a:	2000      	movs	r0, #0
 800929c:	f7fc f9a8 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 80092a0:	491d      	ldr	r1, [pc, #116]	; (8009318 <freertos_IntroTitle+0x104>)
 80092a2:	2000      	movs	r0, #0
 80092a4:	f7fc f9a4 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80092a8:	491c      	ldr	r1, [pc, #112]	; (800931c <freertos_IntroTitle+0x108>)
 80092aa:	2000      	movs	r0, #0
 80092ac:	f7fc f9a0 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 80092b0:	f7ff ffa6 	bl	8009200 <OSVersion>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	4919      	ldr	r1, [pc, #100]	; (8009320 <freertos_IntroTitle+0x10c>)
 80092ba:	2000      	movs	r0, #0
 80092bc:	f7fc f998 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 80092c0:	4918      	ldr	r1, [pc, #96]	; (8009324 <freertos_IntroTitle+0x110>)
 80092c2:	2000      	movs	r0, #0
 80092c4:	f7fc f994 	bl	80055f0 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n\n");
 80092c8:	4917      	ldr	r1, [pc, #92]	; (8009328 <freertos_IntroTitle+0x114>)
 80092ca:	2000      	movs	r0, #0
 80092cc:	f7fc f990 	bl	80055f0 <SEGGER_RTT_printf>
}
 80092d0:	bf00      	nop
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	0801b180 	.word	0x0801b180
 80092d8:	0801b1c0 	.word	0x0801b1c0
 80092dc:	0801b214 	.word	0x0801b214
 80092e0:	0801b268 	.word	0x0801b268
 80092e4:	0801b2bc 	.word	0x0801b2bc
 80092e8:	0801b310 	.word	0x0801b310
 80092ec:	0801b364 	.word	0x0801b364
 80092f0:	0801b3b8 	.word	0x0801b3b8
 80092f4:	0801b40c 	.word	0x0801b40c
 80092f8:	0801b460 	.word	0x0801b460
 80092fc:	0801b4b4 	.word	0x0801b4b4
 8009300:	0801b508 	.word	0x0801b508
 8009304:	0801b55c 	.word	0x0801b55c
 8009308:	0801b5b0 	.word	0x0801b5b0
 800930c:	0801b604 	.word	0x0801b604
 8009310:	0801b658 	.word	0x0801b658
 8009314:	0801b6ac 	.word	0x0801b6ac
 8009318:	0801b700 	.word	0x0801b700
 800931c:	0801b748 	.word	0x0801b748
 8009320:	0801b778 	.word	0x0801b778
 8009324:	0801b7bc 	.word	0x0801b7bc
 8009328:	0801b7e8 	.word	0x0801b7e8

0800932c <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8009336:	480a      	ldr	r0, [pc, #40]	; (8009360 <delay_us+0x34>)
 8009338:	f003 feea 	bl	800d110 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 800933c:	4b08      	ldr	r3, [pc, #32]	; (8009360 <delay_us+0x34>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2200      	movs	r2, #0
 8009342:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8009344:	bf00      	nop
 8009346:	4b06      	ldr	r3, [pc, #24]	; (8009360 <delay_us+0x34>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800934c:	88fb      	ldrh	r3, [r7, #6]
 800934e:	429a      	cmp	r2, r3
 8009350:	d3f9      	bcc.n	8009346 <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8009352:	4803      	ldr	r0, [pc, #12]	; (8009360 <delay_us+0x34>)
 8009354:	f003 ff4c 	bl	800d1f0 <HAL_TIM_Base_Stop_IT>
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20007e28 	.word	0x20007e28

08009364 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800936c:	f00c ffb4 	bl	80162d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 8009370:	4903      	ldr	r1, [pc, #12]	; (8009380 <StartDefaultTask+0x1c>)
 8009372:	2000      	movs	r0, #0
 8009374:	f7fc f93c 	bl	80055f0 <SEGGER_RTT_printf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009378:	2001      	movs	r0, #1
 800937a:	f009 fd2d 	bl	8012dd8 <osDelay>
 800937e:	e7fb      	b.n	8009378 <StartDefaultTask+0x14>
 8009380:	0801b834 	.word	0x0801b834

08009384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009388:	b672      	cpsid	i
}
 800938a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800938c:	e7fe      	b.n	800938c <Error_Handler+0x8>
	...

08009390 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009396:	2300      	movs	r3, #0
 8009398:	607b      	str	r3, [r7, #4]
 800939a:	4b16      	ldr	r3, [pc, #88]	; (80093f4 <HAL_MspInit+0x64>)
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <HAL_MspInit+0x64>)
 80093a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093a4:	6453      	str	r3, [r2, #68]	; 0x44
 80093a6:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <HAL_MspInit+0x64>)
 80093a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ae:	607b      	str	r3, [r7, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093b2:	2300      	movs	r3, #0
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <HAL_MspInit+0x64>)
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	4a0e      	ldr	r2, [pc, #56]	; (80093f4 <HAL_MspInit+0x64>)
 80093bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093c0:	6413      	str	r3, [r2, #64]	; 0x40
 80093c2:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <HAL_MspInit+0x64>)
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80093ce:	2200      	movs	r2, #0
 80093d0:	210f      	movs	r1, #15
 80093d2:	f06f 0001 	mvn.w	r0, #1
 80093d6:	f001 f966 	bl	800a6a6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80093da:	2200      	movs	r2, #0
 80093dc:	2105      	movs	r1, #5
 80093de:	2005      	movs	r0, #5
 80093e0:	f001 f961 	bl	800a6a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80093e4:	2005      	movs	r0, #5
 80093e6:	f001 f97a 	bl	800a6de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	40023800 	.word	0x40023800

080093f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08c      	sub	sp, #48	; 0x30
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009400:	f107 031c 	add.w	r3, r7, #28
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	609a      	str	r2, [r3, #8]
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a5e      	ldr	r2, [pc, #376]	; (8009590 <HAL_ADC_MspInit+0x198>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d158      	bne.n	80094cc <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800941a:	2300      	movs	r3, #0
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	4b5d      	ldr	r3, [pc, #372]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 8009420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009422:	4a5c      	ldr	r2, [pc, #368]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 8009424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009428:	6453      	str	r3, [r2, #68]	; 0x44
 800942a:	4b5a      	ldr	r3, [pc, #360]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 800942c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009432:	61bb      	str	r3, [r7, #24]
 8009434:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]
 800943a:	4b56      	ldr	r3, [pc, #344]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	4a55      	ldr	r2, [pc, #340]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 8009440:	f043 0304 	orr.w	r3, r3, #4
 8009444:	6313      	str	r3, [r2, #48]	; 0x30
 8009446:	4b53      	ldr	r3, [pc, #332]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f003 0304 	and.w	r3, r3, #4
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 8009452:	2302      	movs	r3, #2
 8009454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009456:	2303      	movs	r3, #3
 8009458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800945a:	2300      	movs	r3, #0
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 800945e:	f107 031c 	add.w	r3, r7, #28
 8009462:	4619      	mov	r1, r3
 8009464:	484c      	ldr	r0, [pc, #304]	; (8009598 <HAL_ADC_MspInit+0x1a0>)
 8009466:	f001 fd65 	bl	800af34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800946a:	4b4c      	ldr	r3, [pc, #304]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 800946c:	4a4c      	ldr	r2, [pc, #304]	; (80095a0 <HAL_ADC_MspInit+0x1a8>)
 800946e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8009470:	4b4a      	ldr	r3, [pc, #296]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 8009472:	2200      	movs	r2, #0
 8009474:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009476:	4b49      	ldr	r3, [pc, #292]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 8009478:	2200      	movs	r2, #0
 800947a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800947c:	4b47      	ldr	r3, [pc, #284]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 800947e:	2200      	movs	r2, #0
 8009480:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8009482:	4b46      	ldr	r3, [pc, #280]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 8009484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009488:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800948a:	4b44      	ldr	r3, [pc, #272]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 800948c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009490:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009492:	4b42      	ldr	r3, [pc, #264]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 8009494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009498:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800949a:	4b40      	ldr	r3, [pc, #256]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 800949c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80094a2:	4b3e      	ldr	r3, [pc, #248]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80094a8:	4b3c      	ldr	r3, [pc, #240]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80094ae:	483b      	ldr	r0, [pc, #236]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 80094b0:	f001 f930 	bl	800a714 <HAL_DMA_Init>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80094ba:	f7ff ff63 	bl	8009384 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a36      	ldr	r2, [pc, #216]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
 80094c4:	4a35      	ldr	r2, [pc, #212]	; (800959c <HAL_ADC_MspInit+0x1a4>)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80094ca:	e05d      	b.n	8009588 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a34      	ldr	r2, [pc, #208]	; (80095a4 <HAL_ADC_MspInit+0x1ac>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d158      	bne.n	8009588 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80094d6:	2300      	movs	r3, #0
 80094d8:	613b      	str	r3, [r7, #16]
 80094da:	4b2e      	ldr	r3, [pc, #184]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 80094dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094de:	4a2d      	ldr	r2, [pc, #180]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 80094e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094e4:	6453      	str	r3, [r2, #68]	; 0x44
 80094e6:	4b2b      	ldr	r3, [pc, #172]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 80094e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	4b27      	ldr	r3, [pc, #156]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 80094f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fa:	4a26      	ldr	r2, [pc, #152]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 80094fc:	f043 0304 	orr.w	r3, r3, #4
 8009500:	6313      	str	r3, [r2, #48]	; 0x30
 8009502:	4b24      	ldr	r3, [pc, #144]	; (8009594 <HAL_ADC_MspInit+0x19c>)
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	f003 0304 	and.w	r3, r3, #4
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 800950e:	2304      	movs	r3, #4
 8009510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009512:	2303      	movs	r3, #3
 8009514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009516:	2300      	movs	r3, #0
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 800951a:	f107 031c 	add.w	r3, r7, #28
 800951e:	4619      	mov	r1, r3
 8009520:	481d      	ldr	r0, [pc, #116]	; (8009598 <HAL_ADC_MspInit+0x1a0>)
 8009522:	f001 fd07 	bl	800af34 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8009526:	4b20      	ldr	r3, [pc, #128]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009528:	4a20      	ldr	r2, [pc, #128]	; (80095ac <HAL_ADC_MspInit+0x1b4>)
 800952a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800952c:	4b1e      	ldr	r3, [pc, #120]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 800952e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009532:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009534:	4b1c      	ldr	r3, [pc, #112]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009536:	2200      	movs	r2, #0
 8009538:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800953a:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 800953c:	2200      	movs	r2, #0
 800953e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8009540:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009546:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009548:	4b17      	ldr	r3, [pc, #92]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 800954a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800954e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009550:	4b15      	ldr	r3, [pc, #84]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009556:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8009558:	4b13      	ldr	r3, [pc, #76]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 800955a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800955e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8009560:	4b11      	ldr	r3, [pc, #68]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009562:	2200      	movs	r2, #0
 8009564:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009566:	4b10      	ldr	r3, [pc, #64]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009568:	2200      	movs	r2, #0
 800956a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800956c:	480e      	ldr	r0, [pc, #56]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 800956e:	f001 f8d1 	bl	800a714 <HAL_DMA_Init>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8009578:	f7ff ff04 	bl	8009384 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009580:	639a      	str	r2, [r3, #56]	; 0x38
 8009582:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <HAL_ADC_MspInit+0x1b0>)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009588:	bf00      	nop
 800958a:	3730      	adds	r7, #48	; 0x30
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	40012000 	.word	0x40012000
 8009594:	40023800 	.word	0x40023800
 8009598:	40020800 	.word	0x40020800
 800959c:	20007d20 	.word	0x20007d20
 80095a0:	40026410 	.word	0x40026410
 80095a4:	40012100 	.word	0x40012100
 80095a8:	20007d80 	.word	0x20007d80
 80095ac:	40026440 	.word	0x40026440

080095b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a18      	ldr	r2, [pc, #96]	; (8009620 <HAL_TIM_Base_MspInit+0x70>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d10e      	bne.n	80095e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]
 80095c6:	4b17      	ldr	r3, [pc, #92]	; (8009624 <HAL_TIM_Base_MspInit+0x74>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	4a16      	ldr	r2, [pc, #88]	; (8009624 <HAL_TIM_Base_MspInit+0x74>)
 80095cc:	f043 0302 	orr.w	r3, r3, #2
 80095d0:	6413      	str	r3, [r2, #64]	; 0x40
 80095d2:	4b14      	ldr	r3, [pc, #80]	; (8009624 <HAL_TIM_Base_MspInit+0x74>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80095de:	e01a      	b.n	8009616 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a10      	ldr	r2, [pc, #64]	; (8009628 <HAL_TIM_Base_MspInit+0x78>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d115      	bne.n	8009616 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80095ea:	2300      	movs	r3, #0
 80095ec:	60bb      	str	r3, [r7, #8]
 80095ee:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <HAL_TIM_Base_MspInit+0x74>)
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <HAL_TIM_Base_MspInit+0x74>)
 80095f4:	f043 0320 	orr.w	r3, r3, #32
 80095f8:	6413      	str	r3, [r2, #64]	; 0x40
 80095fa:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <HAL_TIM_Base_MspInit+0x74>)
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	60bb      	str	r3, [r7, #8]
 8009604:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8009606:	2200      	movs	r2, #0
 8009608:	2105      	movs	r1, #5
 800960a:	2037      	movs	r0, #55	; 0x37
 800960c:	f001 f84b 	bl	800a6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009610:	2037      	movs	r0, #55	; 0x37
 8009612:	f001 f864 	bl	800a6de <HAL_NVIC_EnableIRQ>
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40000400 	.word	0x40000400
 8009624:	40023800 	.word	0x40023800
 8009628:	40001400 	.word	0x40001400

0800962c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009634:	f107 030c 	add.w	r3, r7, #12
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	605a      	str	r2, [r3, #4]
 800963e:	609a      	str	r2, [r3, #8]
 8009640:	60da      	str	r2, [r3, #12]
 8009642:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a12      	ldr	r2, [pc, #72]	; (8009694 <HAL_TIM_MspPostInit+0x68>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d11d      	bne.n	800968a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]
 8009652:	4b11      	ldr	r3, [pc, #68]	; (8009698 <HAL_TIM_MspPostInit+0x6c>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009656:	4a10      	ldr	r2, [pc, #64]	; (8009698 <HAL_TIM_MspPostInit+0x6c>)
 8009658:	f043 0302 	orr.w	r3, r3, #2
 800965c:	6313      	str	r3, [r2, #48]	; 0x30
 800965e:	4b0e      	ldr	r3, [pc, #56]	; (8009698 <HAL_TIM_MspPostInit+0x6c>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	60bb      	str	r3, [r7, #8]
 8009668:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 800966a:	2310      	movs	r3, #16
 800966c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800966e:	2302      	movs	r3, #2
 8009670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009676:	2300      	movs	r3, #0
 8009678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800967a:	2302      	movs	r3, #2
 800967c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 800967e:	f107 030c 	add.w	r3, r7, #12
 8009682:	4619      	mov	r1, r3
 8009684:	4805      	ldr	r0, [pc, #20]	; (800969c <HAL_TIM_MspPostInit+0x70>)
 8009686:	f001 fc55 	bl	800af34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800968a:	bf00      	nop
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	40000400 	.word	0x40000400
 8009698:	40023800 	.word	0x40023800
 800969c:	40020400 	.word	0x40020400

080096a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b08a      	sub	sp, #40	; 0x28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096a8:	f107 0314 	add.w	r3, r7, #20
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]
 80096b0:	605a      	str	r2, [r3, #4]
 80096b2:	609a      	str	r2, [r3, #8]
 80096b4:	60da      	str	r2, [r3, #12]
 80096b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a4c      	ldr	r2, [pc, #304]	; (80097f0 <HAL_UART_MspInit+0x150>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	f040 8092 	bne.w	80097e8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80096c4:	2300      	movs	r3, #0
 80096c6:	613b      	str	r3, [r7, #16]
 80096c8:	4b4a      	ldr	r3, [pc, #296]	; (80097f4 <HAL_UART_MspInit+0x154>)
 80096ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096cc:	4a49      	ldr	r2, [pc, #292]	; (80097f4 <HAL_UART_MspInit+0x154>)
 80096ce:	f043 0320 	orr.w	r3, r3, #32
 80096d2:	6453      	str	r3, [r2, #68]	; 0x44
 80096d4:	4b47      	ldr	r3, [pc, #284]	; (80097f4 <HAL_UART_MspInit+0x154>)
 80096d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]
 80096e4:	4b43      	ldr	r3, [pc, #268]	; (80097f4 <HAL_UART_MspInit+0x154>)
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	4a42      	ldr	r2, [pc, #264]	; (80097f4 <HAL_UART_MspInit+0x154>)
 80096ea:	f043 0304 	orr.w	r3, r3, #4
 80096ee:	6313      	str	r3, [r2, #48]	; 0x30
 80096f0:	4b40      	ldr	r3, [pc, #256]	; (80097f4 <HAL_UART_MspInit+0x154>)
 80096f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 80096fc:	23c0      	movs	r3, #192	; 0xc0
 80096fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009700:	2302      	movs	r3, #2
 8009702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009708:	2303      	movs	r3, #3
 800970a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800970c:	2308      	movs	r3, #8
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009710:	f107 0314 	add.w	r3, r7, #20
 8009714:	4619      	mov	r1, r3
 8009716:	4838      	ldr	r0, [pc, #224]	; (80097f8 <HAL_UART_MspInit+0x158>)
 8009718:	f001 fc0c 	bl	800af34 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream7;
 800971c:	4b37      	ldr	r3, [pc, #220]	; (80097fc <HAL_UART_MspInit+0x15c>)
 800971e:	4a38      	ldr	r2, [pc, #224]	; (8009800 <HAL_UART_MspInit+0x160>)
 8009720:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8009722:	4b36      	ldr	r3, [pc, #216]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009724:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009728:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800972a:	4b34      	ldr	r3, [pc, #208]	; (80097fc <HAL_UART_MspInit+0x15c>)
 800972c:	2240      	movs	r2, #64	; 0x40
 800972e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009730:	4b32      	ldr	r3, [pc, #200]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009732:	2200      	movs	r2, #0
 8009734:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009736:	4b31      	ldr	r3, [pc, #196]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800973c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800973e:	4b2f      	ldr	r3, [pc, #188]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009740:	2200      	movs	r2, #0
 8009742:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009744:	4b2d      	ldr	r3, [pc, #180]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009746:	2200      	movs	r2, #0
 8009748:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800974a:	4b2c      	ldr	r3, [pc, #176]	; (80097fc <HAL_UART_MspInit+0x15c>)
 800974c:	2200      	movs	r2, #0
 800974e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009750:	4b2a      	ldr	r3, [pc, #168]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009752:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009756:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009758:	4b28      	ldr	r3, [pc, #160]	; (80097fc <HAL_UART_MspInit+0x15c>)
 800975a:	2200      	movs	r2, #0
 800975c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800975e:	4827      	ldr	r0, [pc, #156]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009760:	f000 ffd8 	bl	800a714 <HAL_DMA_Init>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800976a:	f7ff fe0b 	bl	8009384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a22      	ldr	r2, [pc, #136]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
 8009774:	4a21      	ldr	r2, [pc, #132]	; (80097fc <HAL_UART_MspInit+0x15c>)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800977a:	4b22      	ldr	r3, [pc, #136]	; (8009804 <HAL_UART_MspInit+0x164>)
 800977c:	4a22      	ldr	r2, [pc, #136]	; (8009808 <HAL_UART_MspInit+0x168>)
 800977e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8009780:	4b20      	ldr	r3, [pc, #128]	; (8009804 <HAL_UART_MspInit+0x164>)
 8009782:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8009786:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009788:	4b1e      	ldr	r3, [pc, #120]	; (8009804 <HAL_UART_MspInit+0x164>)
 800978a:	2200      	movs	r2, #0
 800978c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800978e:	4b1d      	ldr	r3, [pc, #116]	; (8009804 <HAL_UART_MspInit+0x164>)
 8009790:	2200      	movs	r2, #0
 8009792:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009794:	4b1b      	ldr	r3, [pc, #108]	; (8009804 <HAL_UART_MspInit+0x164>)
 8009796:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800979a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800979c:	4b19      	ldr	r3, [pc, #100]	; (8009804 <HAL_UART_MspInit+0x164>)
 800979e:	2200      	movs	r2, #0
 80097a0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80097a2:	4b18      	ldr	r3, [pc, #96]	; (8009804 <HAL_UART_MspInit+0x164>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80097a8:	4b16      	ldr	r3, [pc, #88]	; (8009804 <HAL_UART_MspInit+0x164>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80097ae:	4b15      	ldr	r3, [pc, #84]	; (8009804 <HAL_UART_MspInit+0x164>)
 80097b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80097b4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80097b6:	4b13      	ldr	r3, [pc, #76]	; (8009804 <HAL_UART_MspInit+0x164>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80097bc:	4811      	ldr	r0, [pc, #68]	; (8009804 <HAL_UART_MspInit+0x164>)
 80097be:	f000 ffa9 	bl	800a714 <HAL_DMA_Init>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80097c8:	f7ff fddc 	bl	8009384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a0d      	ldr	r2, [pc, #52]	; (8009804 <HAL_UART_MspInit+0x164>)
 80097d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80097d2:	4a0c      	ldr	r2, [pc, #48]	; (8009804 <HAL_UART_MspInit+0x164>)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80097d8:	2200      	movs	r2, #0
 80097da:	2105      	movs	r1, #5
 80097dc:	2047      	movs	r0, #71	; 0x47
 80097de:	f000 ff62 	bl	800a6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80097e2:	2047      	movs	r0, #71	; 0x47
 80097e4:	f000 ff7b 	bl	800a6de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80097e8:	bf00      	nop
 80097ea:	3728      	adds	r7, #40	; 0x28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	40011400 	.word	0x40011400
 80097f4:	40023800 	.word	0x40023800
 80097f8:	40020800 	.word	0x40020800
 80097fc:	20007eb8 	.word	0x20007eb8
 8009800:	400264b8 	.word	0x400264b8
 8009804:	20007f18 	.word	0x20007f18
 8009808:	40026428 	.word	0x40026428

0800980c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009810:	e7fe      	b.n	8009810 <NMI_Handler+0x4>

08009812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009812:	b480      	push	{r7}
 8009814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009816:	e7fe      	b.n	8009816 <HardFault_Handler+0x4>

08009818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009818:	b480      	push	{r7}
 800981a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800981c:	e7fe      	b.n	800981c <MemManage_Handler+0x4>

0800981e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800981e:	b480      	push	{r7}
 8009820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009822:	e7fe      	b.n	8009822 <BusFault_Handler+0x4>

08009824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009828:	e7fe      	b.n	8009828 <UsageFault_Handler+0x4>

0800982a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800982a:	b480      	push	{r7}
 800982c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800982e:	bf00      	nop
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 800983c:	4b09      	ldr	r3, [pc, #36]	; (8009864 <SysTick_Handler+0x2c>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <SysTick_Handler+0x16>

		TimingDelay--;
 8009844:	4b07      	ldr	r3, [pc, #28]	; (8009864 <SysTick_Handler+0x2c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	3b01      	subs	r3, #1
 800984a:	4a06      	ldr	r2, [pc, #24]	; (8009864 <SysTick_Handler+0x2c>)
 800984c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800984e:	f000 f9f9 	bl	8009c44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009852:	f00b faa1 	bl	8014d98 <xTaskGetSchedulerState>
 8009856:	4603      	mov	r3, r0
 8009858:	2b01      	cmp	r3, #1
 800985a:	d001      	beq.n	8009860 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800985c:	f00c fadc 	bl	8015e18 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009860:	bf00      	nop
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20007f88 	.word	0x20007f88

08009868 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800986c:	bf00      	nop
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
	...

08009878 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800987c:	4802      	ldr	r0, [pc, #8]	; (8009888 <TIM7_IRQHandler+0x10>)
 800987e:	f003 fe77 	bl	800d570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009882:	bf00      	nop
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20007e28 	.word	0x20007e28

0800988c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009890:	4802      	ldr	r0, [pc, #8]	; (800989c <DMA2_Stream0_IRQHandler+0x10>)
 8009892:	f001 f8d7 	bl	800aa44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009896:	bf00      	nop
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20007d20 	.word	0x20007d20

080098a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80098a4:	4802      	ldr	r0, [pc, #8]	; (80098b0 <DMA2_Stream1_IRQHandler+0x10>)
 80098a6:	f001 f8cd 	bl	800aa44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80098aa:	bf00      	nop
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20007f18 	.word	0x20007f18

080098b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80098b8:	4802      	ldr	r0, [pc, #8]	; (80098c4 <DMA2_Stream2_IRQHandler+0x10>)
 80098ba:	f001 f8c3 	bl	800aa44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80098be:	bf00      	nop
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20007d80 	.word	0x20007d80

080098c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80098cc:	4802      	ldr	r0, [pc, #8]	; (80098d8 <OTG_FS_IRQHandler+0x10>)
 80098ce:	f001 fe2a 	bl	800b526 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80098d2:	bf00      	nop
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	2000d4f4 	.word	0x2000d4f4

080098dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80098e0:	4802      	ldr	r0, [pc, #8]	; (80098ec <DMA2_Stream7_IRQHandler+0x10>)
 80098e2:	f001 f8af 	bl	800aa44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80098e6:	bf00      	nop
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20007eb8 	.word	0x20007eb8

080098f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 80098f6:	4b1d      	ldr	r3, [pc, #116]	; (800996c <USART6_IRQHandler+0x7c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0320 	and.w	r3, r3, #32
 8009900:	2b20      	cmp	r3, #32
 8009902:	d12b      	bne.n	800995c <USART6_IRQHandler+0x6c>
 8009904:	4b19      	ldr	r3, [pc, #100]	; (800996c <USART6_IRQHandler+0x7c>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b00      	cmp	r3, #0
 8009910:	d024      	beq.n	800995c <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8009916:	4b15      	ldr	r3, [pc, #84]	; (800996c <USART6_IRQHandler+0x7c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	b2da      	uxtb	r2, r3
 800991e:	4b14      	ldr	r3, [pc, #80]	; (8009970 <USART6_IRQHandler+0x80>)
 8009920:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8009922:	2300      	movs	r3, #0
 8009924:	603b      	str	r3, [r7, #0]
 8009926:	4b11      	ldr	r3, [pc, #68]	; (800996c <USART6_IRQHandler+0x7c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	603b      	str	r3, [r7, #0]
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <USART6_IRQHandler+0x7c>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	603b      	str	r3, [r7, #0]
 8009936:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 8009938:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <USART6_IRQHandler+0x84>)
 800993a:	6818      	ldr	r0, [r3, #0]
 800993c:	1d3a      	adds	r2, r7, #4
 800993e:	2300      	movs	r3, #0
 8009940:	490b      	ldr	r1, [pc, #44]	; (8009970 <USART6_IRQHandler+0x80>)
 8009942:	f009 fda3 	bl	801348c <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d007      	beq.n	800995c <USART6_IRQHandler+0x6c>
 800994c:	4b0a      	ldr	r3, [pc, #40]	; (8009978 <USART6_IRQHandler+0x88>)
 800994e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800995c:	4803      	ldr	r0, [pc, #12]	; (800996c <USART6_IRQHandler+0x7c>)
 800995e:	f004 fd1f 	bl	800e3a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20007e70 	.word	0x20007e70
 8009970:	20007f84 	.word	0x20007f84
 8009974:	20006990 	.word	0x20006990
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800997c:	b480      	push	{r7}
 800997e:	af00      	add	r7, sp, #0
  return 1;
 8009980:	2301      	movs	r3, #1
}
 8009982:	4618      	mov	r0, r3
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <_kill>:

int _kill(int pid, int sig)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009996:	f00e f947 	bl	8017c28 <__errno>
 800999a:	4603      	mov	r3, r0
 800999c:	2216      	movs	r2, #22
 800999e:	601a      	str	r2, [r3, #0]
  return -1;
 80099a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <_exit>:

void _exit (int status)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80099b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff ffe7 	bl	800998c <_kill>
  while (1) {}    /* Make sure we hang here */
 80099be:	e7fe      	b.n	80099be <_exit+0x12>

080099c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	e00a      	b.n	80099e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80099d2:	f3af 8000 	nop.w
 80099d6:	4601      	mov	r1, r0
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	60ba      	str	r2, [r7, #8]
 80099de:	b2ca      	uxtb	r2, r1
 80099e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	3301      	adds	r3, #1
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	dbf0      	blt.n	80099d2 <_read+0x12>
  }

  return len;
 80099f0:	687b      	ldr	r3, [r7, #4]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b086      	sub	sp, #24
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a06:	2300      	movs	r3, #0
 8009a08:	617b      	str	r3, [r7, #20]
 8009a0a:	e009      	b.n	8009a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	60ba      	str	r2, [r7, #8]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	dbf1      	blt.n	8009a0c <_write+0x12>
  }
  return len;
 8009a28:	687b      	ldr	r3, [r7, #4]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <_close>:

int _close(int file)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	370c      	adds	r7, #12
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr

08009a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b083      	sub	sp, #12
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
 8009a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <_isatty>:

int _isatty(int file)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009a72:	2301      	movs	r3, #1
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
	...

08009a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009aa4:	4a14      	ldr	r2, [pc, #80]	; (8009af8 <_sbrk+0x5c>)
 8009aa6:	4b15      	ldr	r3, [pc, #84]	; (8009afc <_sbrk+0x60>)
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009ab0:	4b13      	ldr	r3, [pc, #76]	; (8009b00 <_sbrk+0x64>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009ab8:	4b11      	ldr	r3, [pc, #68]	; (8009b00 <_sbrk+0x64>)
 8009aba:	4a12      	ldr	r2, [pc, #72]	; (8009b04 <_sbrk+0x68>)
 8009abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009abe:	4b10      	ldr	r3, [pc, #64]	; (8009b00 <_sbrk+0x64>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d207      	bcs.n	8009adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009acc:	f00e f8ac 	bl	8017c28 <__errno>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	220c      	movs	r2, #12
 8009ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ada:	e009      	b.n	8009af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009adc:	4b08      	ldr	r3, [pc, #32]	; (8009b00 <_sbrk+0x64>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009ae2:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <_sbrk+0x64>)
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	4a05      	ldr	r2, [pc, #20]	; (8009b00 <_sbrk+0x64>)
 8009aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009aee:	68fb      	ldr	r3, [r7, #12]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20020000 	.word	0x20020000
 8009afc:	00000400 	.word	0x00000400
 8009b00:	20007f8c 	.word	0x20007f8c
 8009b04:	2000dd48 	.word	0x2000dd48

08009b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009b0c:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <SystemInit+0x20>)
 8009b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b12:	4a05      	ldr	r2, [pc, #20]	; (8009b28 <SystemInit+0x20>)
 8009b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009b1c:	bf00      	nop
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	e000ed00 	.word	0xe000ed00

08009b2c <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8009b30:	202e      	movs	r0, #46	; 0x2e
 8009b32:	f00d fec1 	bl	80178b8 <putchar>
 8009b36:	4b04      	ldr	r3, [pc, #16]	; (8009b48 <vApplicationIdleHook+0x1c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f00d fdd3 	bl	80176e8 <fflush>
}
 8009b42:	bf00      	nop
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200004ac 	.word	0x200004ac

08009b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009b50:	f7ff ffda 	bl	8009b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009b54:	480c      	ldr	r0, [pc, #48]	; (8009b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009b56:	490d      	ldr	r1, [pc, #52]	; (8009b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009b58:	4a0d      	ldr	r2, [pc, #52]	; (8009b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009b5c:	e002      	b.n	8009b64 <LoopCopyDataInit>

08009b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009b62:	3304      	adds	r3, #4

08009b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009b68:	d3f9      	bcc.n	8009b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009b6a:	4a0a      	ldr	r2, [pc, #40]	; (8009b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009b6c:	4c0a      	ldr	r4, [pc, #40]	; (8009b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009b70:	e001      	b.n	8009b76 <LoopFillZerobss>

08009b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009b74:	3204      	adds	r2, #4

08009b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009b78:	d3fb      	bcc.n	8009b72 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8009b7a:	f00e f85b 	bl	8017c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b7e:	f7fe ffd9 	bl	8008b34 <main>
  bx  lr    
 8009b82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009b8c:	2000061c 	.word	0x2000061c
  ldr r2, =_sidata
 8009b90:	0801c8e4 	.word	0x0801c8e4
  ldr r2, =_sbss
 8009b94:	200040e4 	.word	0x200040e4
  ldr r4, =_ebss
 8009b98:	2000dd44 	.word	0x2000dd44

08009b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b9c:	e7fe      	b.n	8009b9c <ADC_IRQHandler>
	...

08009ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <HAL_Init+0x40>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a0d      	ldr	r2, [pc, #52]	; (8009be0 <HAL_Init+0x40>)
 8009baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009bb0:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <HAL_Init+0x40>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a0a      	ldr	r2, [pc, #40]	; (8009be0 <HAL_Init+0x40>)
 8009bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bbc:	4b08      	ldr	r3, [pc, #32]	; (8009be0 <HAL_Init+0x40>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a07      	ldr	r2, [pc, #28]	; (8009be0 <HAL_Init+0x40>)
 8009bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009bc8:	2003      	movs	r0, #3
 8009bca:	f000 fd61 	bl	800a690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009bce:	200f      	movs	r0, #15
 8009bd0:	f000 f808 	bl	8009be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009bd4:	f7ff fbdc 	bl	8009390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	40023c00 	.word	0x40023c00

08009be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009bec:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <HAL_InitTick+0x54>)
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	4b12      	ldr	r3, [pc, #72]	; (8009c3c <HAL_InitTick+0x58>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 fd79 	bl	800a6fa <HAL_SYSTICK_Config>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e00e      	b.n	8009c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b0f      	cmp	r3, #15
 8009c16:	d80a      	bhi.n	8009c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c18:	2200      	movs	r2, #0
 8009c1a:	6879      	ldr	r1, [r7, #4]
 8009c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c20:	f000 fd41 	bl	800a6a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c24:	4a06      	ldr	r2, [pc, #24]	; (8009c40 <HAL_InitTick+0x5c>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e000      	b.n	8009c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	20000354 	.word	0x20000354
 8009c3c:	2000035c 	.word	0x2000035c
 8009c40:	20000358 	.word	0x20000358

08009c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009c48:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <HAL_IncTick+0x20>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <HAL_IncTick+0x24>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4413      	add	r3, r2
 8009c54:	4a04      	ldr	r2, [pc, #16]	; (8009c68 <HAL_IncTick+0x24>)
 8009c56:	6013      	str	r3, [r2, #0]
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	2000035c 	.word	0x2000035c
 8009c68:	20007f90 	.word	0x20007f90

08009c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8009c70:	4b03      	ldr	r3, [pc, #12]	; (8009c80 <HAL_GetTick+0x14>)
 8009c72:	681b      	ldr	r3, [r3, #0]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	20007f90 	.word	0x20007f90

08009c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009c8c:	f7ff ffee 	bl	8009c6c <HAL_GetTick>
 8009c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c9c:	d005      	beq.n	8009caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <HAL_Delay+0x44>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009caa:	bf00      	nop
 8009cac:	f7ff ffde 	bl	8009c6c <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d8f7      	bhi.n	8009cac <HAL_Delay+0x28>
  {
  }
}
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	2000035c 	.word	0x2000035c

08009ccc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d101      	bne.n	8009ce2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e033      	b.n	8009d4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff fb84 	bl	80093f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	f003 0310 	and.w	r3, r3, #16
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d118      	bne.n	8009d3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d12:	f023 0302 	bic.w	r3, r3, #2
 8009d16:	f043 0202 	orr.w	r2, r3, #2
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fa68 	bl	800a1f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2200      	movs	r2, #0
 8009d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f023 0303 	bic.w	r3, r3, #3
 8009d32:	f043 0201 	orr.w	r2, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	641a      	str	r2, [r3, #64]	; 0x40
 8009d3a:	e001      	b.n	8009d40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <HAL_ADC_Start_DMA+0x1e>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e0e9      	b.n	8009f46 <HAL_ADC_Start_DMA+0x1f2>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d018      	beq.n	8009dba <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689a      	ldr	r2, [r3, #8]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f042 0201 	orr.w	r2, r2, #1
 8009d96:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009d98:	4b6d      	ldr	r3, [pc, #436]	; (8009f50 <HAL_ADC_Start_DMA+0x1fc>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a6d      	ldr	r2, [pc, #436]	; (8009f54 <HAL_ADC_Start_DMA+0x200>)
 8009d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009da2:	0c9a      	lsrs	r2, r3, #18
 8009da4:	4613      	mov	r3, r2
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	4413      	add	r3, r2
 8009daa:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8009dac:	e002      	b.n	8009db4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1f9      	bne.n	8009dae <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dc8:	d107      	bne.n	8009dda <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dd8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	f040 80a1 	bne.w	8009f2c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009df2:	f023 0301 	bic.w	r3, r3, #1
 8009df6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e28:	d106      	bne.n	8009e38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2e:	f023 0206 	bic.w	r2, r3, #6
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	645a      	str	r2, [r3, #68]	; 0x44
 8009e36:	e002      	b.n	8009e3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e46:	4b44      	ldr	r3, [pc, #272]	; (8009f58 <HAL_ADC_Start_DMA+0x204>)
 8009e48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4e:	4a43      	ldr	r2, [pc, #268]	; (8009f5c <HAL_ADC_Start_DMA+0x208>)
 8009e50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e56:	4a42      	ldr	r2, [pc, #264]	; (8009f60 <HAL_ADC_Start_DMA+0x20c>)
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5e:	4a41      	ldr	r2, [pc, #260]	; (8009f64 <HAL_ADC_Start_DMA+0x210>)
 8009e60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009e6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685a      	ldr	r2, [r3, #4]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e7a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689a      	ldr	r2, [r3, #8]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e8a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	334c      	adds	r3, #76	; 0x4c
 8009e96:	4619      	mov	r1, r3
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f000 fce8 	bl	800a870 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f003 031f 	and.w	r3, r3, #31
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d12a      	bne.n	8009f02 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a2d      	ldr	r2, [pc, #180]	; (8009f68 <HAL_ADC_Start_DMA+0x214>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d015      	beq.n	8009ee2 <HAL_ADC_Start_DMA+0x18e>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a2c      	ldr	r2, [pc, #176]	; (8009f6c <HAL_ADC_Start_DMA+0x218>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d105      	bne.n	8009ecc <HAL_ADC_Start_DMA+0x178>
 8009ec0:	4b25      	ldr	r3, [pc, #148]	; (8009f58 <HAL_ADC_Start_DMA+0x204>)
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	f003 031f 	and.w	r3, r3, #31
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00a      	beq.n	8009ee2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a27      	ldr	r2, [pc, #156]	; (8009f70 <HAL_ADC_Start_DMA+0x21c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d136      	bne.n	8009f44 <HAL_ADC_Start_DMA+0x1f0>
 8009ed6:	4b20      	ldr	r3, [pc, #128]	; (8009f58 <HAL_ADC_Start_DMA+0x204>)
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d130      	bne.n	8009f44 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d129      	bne.n	8009f44 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009efe:	609a      	str	r2, [r3, #8]
 8009f00:	e020      	b.n	8009f44 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a18      	ldr	r2, [pc, #96]	; (8009f68 <HAL_ADC_Start_DMA+0x214>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d11b      	bne.n	8009f44 <HAL_ADC_Start_DMA+0x1f0>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d114      	bne.n	8009f44 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f28:	609a      	str	r2, [r3, #8]
 8009f2a:	e00b      	b.n	8009f44 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	f043 0210 	orr.w	r2, r3, #16
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3c:	f043 0201 	orr.w	r2, r3, #1
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000354 	.word	0x20000354
 8009f54:	431bde83 	.word	0x431bde83
 8009f58:	40012300 	.word	0x40012300
 8009f5c:	0800a3ed 	.word	0x0800a3ed
 8009f60:	0800a4a7 	.word	0x0800a4a7
 8009f64:	0800a4c3 	.word	0x0800a4c3
 8009f68:	40012000 	.word	0x40012000
 8009f6c:	40012100 	.word	0x40012100
 8009f70:	40012200 	.word	0x40012200

08009f74 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d101      	bne.n	8009fcc <HAL_ADC_ConfigChannel+0x1c>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	e105      	b.n	800a1d8 <HAL_ADC_ConfigChannel+0x228>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b09      	cmp	r3, #9
 8009fda:	d925      	bls.n	800a028 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68d9      	ldr	r1, [r3, #12]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4613      	mov	r3, r2
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	4413      	add	r3, r2
 8009ff0:	3b1e      	subs	r3, #30
 8009ff2:	2207      	movs	r2, #7
 8009ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff8:	43da      	mvns	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	400a      	ands	r2, r1
 800a000:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68d9      	ldr	r1, [r3, #12]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	4618      	mov	r0, r3
 800a014:	4603      	mov	r3, r0
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	4403      	add	r3, r0
 800a01a:	3b1e      	subs	r3, #30
 800a01c:	409a      	lsls	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	60da      	str	r2, [r3, #12]
 800a026:	e022      	b.n	800a06e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6919      	ldr	r1, [r3, #16]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	461a      	mov	r2, r3
 800a036:	4613      	mov	r3, r2
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	4413      	add	r3, r2
 800a03c:	2207      	movs	r2, #7
 800a03e:	fa02 f303 	lsl.w	r3, r2, r3
 800a042:	43da      	mvns	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	400a      	ands	r2, r1
 800a04a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6919      	ldr	r1, [r3, #16]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4618      	mov	r0, r3
 800a05e:	4603      	mov	r3, r0
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	4403      	add	r3, r0
 800a064:	409a      	lsls	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2b06      	cmp	r3, #6
 800a074:	d824      	bhi.n	800a0c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	3b05      	subs	r3, #5
 800a088:	221f      	movs	r2, #31
 800a08a:	fa02 f303 	lsl.w	r3, r2, r3
 800a08e:	43da      	mvns	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	400a      	ands	r2, r1
 800a096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	3b05      	subs	r3, #5
 800a0b2:	fa00 f203 	lsl.w	r2, r0, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	635a      	str	r2, [r3, #52]	; 0x34
 800a0be:	e04c      	b.n	800a15a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	2b0c      	cmp	r3, #12
 800a0c6:	d824      	bhi.n	800a112 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	3b23      	subs	r3, #35	; 0x23
 800a0da:	221f      	movs	r2, #31
 800a0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a0e0:	43da      	mvns	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	400a      	ands	r2, r1
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4413      	add	r3, r2
 800a102:	3b23      	subs	r3, #35	; 0x23
 800a104:	fa00 f203 	lsl.w	r2, r0, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	631a      	str	r2, [r3, #48]	; 0x30
 800a110:	e023      	b.n	800a15a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	4613      	mov	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	3b41      	subs	r3, #65	; 0x41
 800a124:	221f      	movs	r2, #31
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	43da      	mvns	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	400a      	ands	r2, r1
 800a132:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	4618      	mov	r0, r3
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	4613      	mov	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	3b41      	subs	r3, #65	; 0x41
 800a14e:	fa00 f203 	lsl.w	r2, r0, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a15a:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <HAL_ADC_ConfigChannel+0x234>)
 800a15c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a21      	ldr	r2, [pc, #132]	; (800a1e8 <HAL_ADC_ConfigChannel+0x238>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d109      	bne.n	800a17c <HAL_ADC_ConfigChannel+0x1cc>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b12      	cmp	r3, #18
 800a16e:	d105      	bne.n	800a17c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a19      	ldr	r2, [pc, #100]	; (800a1e8 <HAL_ADC_ConfigChannel+0x238>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d123      	bne.n	800a1ce <HAL_ADC_ConfigChannel+0x21e>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d003      	beq.n	800a196 <HAL_ADC_ConfigChannel+0x1e6>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b11      	cmp	r3, #17
 800a194:	d11b      	bne.n	800a1ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b10      	cmp	r3, #16
 800a1a8:	d111      	bne.n	800a1ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a1aa:	4b10      	ldr	r3, [pc, #64]	; (800a1ec <HAL_ADC_ConfigChannel+0x23c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a10      	ldr	r2, [pc, #64]	; (800a1f0 <HAL_ADC_ConfigChannel+0x240>)
 800a1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b4:	0c9a      	lsrs	r2, r3, #18
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a1c0:	e002      	b.n	800a1c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1f9      	bne.n	800a1c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	40012300 	.word	0x40012300
 800a1e8:	40012000 	.word	0x40012000
 800a1ec:	20000354 	.word	0x20000354
 800a1f0:	431bde83 	.word	0x431bde83

0800a1f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a1fc:	4b79      	ldr	r3, [pc, #484]	; (800a3e4 <ADC_Init+0x1f0>)
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	431a      	orrs	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6859      	ldr	r1, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	021a      	lsls	r2, r3, #8
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a24c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6859      	ldr	r1, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	430a      	orrs	r2, r1
 800a25e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a26e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6899      	ldr	r1, [r3, #8]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a286:	4a58      	ldr	r2, [pc, #352]	; (800a3e8 <ADC_Init+0x1f4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d022      	beq.n	800a2d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689a      	ldr	r2, [r3, #8]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a29a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6899      	ldr	r1, [r3, #8]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	689a      	ldr	r2, [r3, #8]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6899      	ldr	r1, [r3, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	609a      	str	r2, [r3, #8]
 800a2d0:	e00f      	b.n	800a2f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f022 0202 	bic.w	r2, r2, #2
 800a300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6899      	ldr	r1, [r3, #8]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7e1b      	ldrb	r3, [r3, #24]
 800a30c:	005a      	lsls	r2, r3, #1
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01b      	beq.n	800a358 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a32e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a33e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6859      	ldr	r1, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	3b01      	subs	r3, #1
 800a34c:	035a      	lsls	r2, r3, #13
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	e007      	b.n	800a368 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a366:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	3b01      	subs	r3, #1
 800a384:	051a      	lsls	r2, r3, #20
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a39c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6899      	ldr	r1, [r3, #8]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3aa:	025a      	lsls	r2, r3, #9
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6899      	ldr	r1, [r3, #8]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	029a      	lsls	r2, r3, #10
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	609a      	str	r2, [r3, #8]
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	40012300 	.word	0x40012300
 800a3e8:	0f000001 	.word	0x0f000001

0800a3ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a402:	2b00      	cmp	r3, #0
 800a404:	d13c      	bne.n	800a480 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d12b      	bne.n	800a478 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a424:	2b00      	cmp	r3, #0
 800a426:	d127      	bne.n	800a478 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a42e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a432:	2b00      	cmp	r3, #0
 800a434:	d006      	beq.n	800a444 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a440:	2b00      	cmp	r3, #0
 800a442:	d119      	bne.n	800a478 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f022 0220 	bic.w	r2, r2, #32
 800a452:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a458:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d105      	bne.n	800a478 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a470:	f043 0201 	orr.w	r2, r3, #1
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f7ff fd7b 	bl	8009f74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a47e:	e00e      	b.n	800a49e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a484:	f003 0310 	and.w	r3, r3, #16
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d003      	beq.n	800a494 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7ff fd85 	bl	8009f9c <HAL_ADC_ErrorCallback>
}
 800a492:	e004      	b.n	800a49e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	4798      	blx	r3
}
 800a49e:	bf00      	nop
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff fd67 	bl	8009f88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2240      	movs	r2, #64	; 0x40
 800a4d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	f043 0204 	orr.w	r2, r3, #4
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff fd5a 	bl	8009f9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4e8:	bf00      	nop
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <__NVIC_SetPriorityGrouping>:
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f003 0307 	and.w	r3, r3, #7
 800a4fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <__NVIC_SetPriorityGrouping+0x44>)
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a506:	68ba      	ldr	r2, [r7, #8]
 800a508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a50c:	4013      	ands	r3, r2
 800a50e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a51c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a522:	4a04      	ldr	r2, [pc, #16]	; (800a534 <__NVIC_SetPriorityGrouping+0x44>)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	60d3      	str	r3, [r2, #12]
}
 800a528:	bf00      	nop
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	e000ed00 	.word	0xe000ed00

0800a538 <__NVIC_GetPriorityGrouping>:
{
 800a538:	b480      	push	{r7}
 800a53a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a53c:	4b04      	ldr	r3, [pc, #16]	; (800a550 <__NVIC_GetPriorityGrouping+0x18>)
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	0a1b      	lsrs	r3, r3, #8
 800a542:	f003 0307 	and.w	r3, r3, #7
}
 800a546:	4618      	mov	r0, r3
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	e000ed00 	.word	0xe000ed00

0800a554 <__NVIC_EnableIRQ>:
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a562:	2b00      	cmp	r3, #0
 800a564:	db0b      	blt.n	800a57e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	f003 021f 	and.w	r2, r3, #31
 800a56c:	4907      	ldr	r1, [pc, #28]	; (800a58c <__NVIC_EnableIRQ+0x38>)
 800a56e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a572:	095b      	lsrs	r3, r3, #5
 800a574:	2001      	movs	r0, #1
 800a576:	fa00 f202 	lsl.w	r2, r0, r2
 800a57a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a57e:	bf00      	nop
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	e000e100 	.word	0xe000e100

0800a590 <__NVIC_SetPriority>:
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	6039      	str	r1, [r7, #0]
 800a59a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a59c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	db0a      	blt.n	800a5ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	490c      	ldr	r1, [pc, #48]	; (800a5dc <__NVIC_SetPriority+0x4c>)
 800a5aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ae:	0112      	lsls	r2, r2, #4
 800a5b0:	b2d2      	uxtb	r2, r2
 800a5b2:	440b      	add	r3, r1
 800a5b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a5b8:	e00a      	b.n	800a5d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	4908      	ldr	r1, [pc, #32]	; (800a5e0 <__NVIC_SetPriority+0x50>)
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	3b04      	subs	r3, #4
 800a5c8:	0112      	lsls	r2, r2, #4
 800a5ca:	b2d2      	uxtb	r2, r2
 800a5cc:	440b      	add	r3, r1
 800a5ce:	761a      	strb	r2, [r3, #24]
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	e000e100 	.word	0xe000e100
 800a5e0:	e000ed00 	.word	0xe000ed00

0800a5e4 <NVIC_EncodePriority>:
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b089      	sub	sp, #36	; 0x24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f1c3 0307 	rsb	r3, r3, #7
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	bf28      	it	cs
 800a602:	2304      	movcs	r3, #4
 800a604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	3304      	adds	r3, #4
 800a60a:	2b06      	cmp	r3, #6
 800a60c:	d902      	bls.n	800a614 <NVIC_EncodePriority+0x30>
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	3b03      	subs	r3, #3
 800a612:	e000      	b.n	800a616 <NVIC_EncodePriority+0x32>
 800a614:	2300      	movs	r3, #0
 800a616:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	fa02 f303 	lsl.w	r3, r2, r3
 800a622:	43da      	mvns	r2, r3
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	401a      	ands	r2, r3
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a62c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	fa01 f303 	lsl.w	r3, r1, r3
 800a636:	43d9      	mvns	r1, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a63c:	4313      	orrs	r3, r2
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3724      	adds	r7, #36	; 0x24
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
	...

0800a64c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	3b01      	subs	r3, #1
 800a658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a65c:	d301      	bcc.n	800a662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a65e:	2301      	movs	r3, #1
 800a660:	e00f      	b.n	800a682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a662:	4a0a      	ldr	r2, [pc, #40]	; (800a68c <SysTick_Config+0x40>)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	3b01      	subs	r3, #1
 800a668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a66a:	210f      	movs	r1, #15
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a670:	f7ff ff8e 	bl	800a590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a674:	4b05      	ldr	r3, [pc, #20]	; (800a68c <SysTick_Config+0x40>)
 800a676:	2200      	movs	r2, #0
 800a678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a67a:	4b04      	ldr	r3, [pc, #16]	; (800a68c <SysTick_Config+0x40>)
 800a67c:	2207      	movs	r2, #7
 800a67e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	e000e010 	.word	0xe000e010

0800a690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f7ff ff29 	bl	800a4f0 <__NVIC_SetPriorityGrouping>
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b086      	sub	sp, #24
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
 800a6b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a6b8:	f7ff ff3e 	bl	800a538 <__NVIC_GetPriorityGrouping>
 800a6bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	68b9      	ldr	r1, [r7, #8]
 800a6c2:	6978      	ldr	r0, [r7, #20]
 800a6c4:	f7ff ff8e 	bl	800a5e4 <NVIC_EncodePriority>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff ff5d 	bl	800a590 <__NVIC_SetPriority>
}
 800a6d6:	bf00      	nop
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a6e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff ff31 	bl	800a554 <__NVIC_EnableIRQ>
}
 800a6f2:	bf00      	nop
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff ffa2 	bl	800a64c <SysTick_Config>
 800a708:	4603      	mov	r3, r0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a71c:	2300      	movs	r3, #0
 800a71e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a720:	f7ff faa4 	bl	8009c6c <HAL_GetTick>
 800a724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e099      	b.n	800a864 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f022 0201 	bic.w	r2, r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a750:	e00f      	b.n	800a772 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a752:	f7ff fa8b 	bl	8009c6c <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b05      	cmp	r3, #5
 800a75e:	d908      	bls.n	800a772 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2220      	movs	r2, #32
 800a764:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2203      	movs	r2, #3
 800a76a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e078      	b.n	800a864 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e8      	bne.n	800a752 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4b38      	ldr	r3, [pc, #224]	; (800a86c <HAL_DMA_Init+0x158>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685a      	ldr	r2, [r3, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a79e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a1b      	ldr	r3, [r3, #32]
 800a7bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d107      	bne.n	800a7dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	695b      	ldr	r3, [r3, #20]
 800a7ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f023 0307 	bic.w	r3, r3, #7
 800a7f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	697a      	ldr	r2, [r7, #20]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a802:	2b04      	cmp	r3, #4
 800a804:	d117      	bne.n	800a836 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00e      	beq.n	800a836 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fb0f 	bl	800ae3c <DMA_CheckFifoParam>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d008      	beq.n	800a836 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2240      	movs	r2, #64	; 0x40
 800a828:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a832:	2301      	movs	r3, #1
 800a834:	e016      	b.n	800a864 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fac6 	bl	800add0 <DMA_CalcBaseAndBitshift>
 800a844:	4603      	mov	r3, r0
 800a846:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a84c:	223f      	movs	r2, #63	; 0x3f
 800a84e:	409a      	lsls	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	f010803f 	.word	0xf010803f

0800a870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a886:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_DMA_Start_IT+0x26>
 800a892:	2302      	movs	r3, #2
 800a894:	e040      	b.n	800a918 <HAL_DMA_Start_IT+0xa8>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d12f      	bne.n	800a90a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	68b9      	ldr	r1, [r7, #8]
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f000 fa58 	bl	800ad74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8c8:	223f      	movs	r2, #63	; 0x3f
 800a8ca:	409a      	lsls	r2, r3
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0216 	orr.w	r2, r2, #22
 800a8de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d007      	beq.n	800a8f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0208 	orr.w	r2, r2, #8
 800a8f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e005      	b.n	800a916 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a912:	2302      	movs	r3, #2
 800a914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a916:	7dfb      	ldrb	r3, [r7, #23]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a92e:	f7ff f99d 	bl	8009c6c <HAL_GetTick>
 800a932:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d008      	beq.n	800a952 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2280      	movs	r2, #128	; 0x80
 800a944:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e052      	b.n	800a9f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f022 0216 	bic.w	r2, r2, #22
 800a960:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	695a      	ldr	r2, [r3, #20]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a970:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	2b00      	cmp	r3, #0
 800a978:	d103      	bne.n	800a982 <HAL_DMA_Abort+0x62>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d007      	beq.n	800a992 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f022 0208 	bic.w	r2, r2, #8
 800a990:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f022 0201 	bic.w	r2, r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9a2:	e013      	b.n	800a9cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a9a4:	f7ff f962 	bl	8009c6c <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	2b05      	cmp	r3, #5
 800a9b0:	d90c      	bls.n	800a9cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2203      	movs	r2, #3
 800a9bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e015      	b.n	800a9f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e4      	bne.n	800a9a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9de:	223f      	movs	r2, #63	; 0x3f
 800a9e0:	409a      	lsls	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d004      	beq.n	800aa1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2280      	movs	r2, #128	; 0x80
 800aa18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e00c      	b.n	800aa38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2205      	movs	r2, #5
 800aa22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0201 	bic.w	r2, r2, #1
 800aa34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa50:	4b8e      	ldr	r3, [pc, #568]	; (800ac8c <HAL_DMA_IRQHandler+0x248>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a8e      	ldr	r2, [pc, #568]	; (800ac90 <HAL_DMA_IRQHandler+0x24c>)
 800aa56:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5a:	0a9b      	lsrs	r3, r3, #10
 800aa5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa6e:	2208      	movs	r2, #8
 800aa70:	409a      	lsls	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4013      	ands	r3, r2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d01a      	beq.n	800aab0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0304 	and.w	r3, r3, #4
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d013      	beq.n	800aab0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f022 0204 	bic.w	r2, r2, #4
 800aa96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa9c:	2208      	movs	r2, #8
 800aa9e:	409a      	lsls	r2, r3
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa8:	f043 0201 	orr.w	r2, r3, #1
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab4:	2201      	movs	r2, #1
 800aab6:	409a      	lsls	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4013      	ands	r3, r2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d012      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	695b      	ldr	r3, [r3, #20]
 800aac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad2:	2201      	movs	r2, #1
 800aad4:	409a      	lsls	r2, r3
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aade:	f043 0202 	orr.w	r2, r3, #2
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaea:	2204      	movs	r2, #4
 800aaec:	409a      	lsls	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d012      	beq.n	800ab1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab08:	2204      	movs	r2, #4
 800ab0a:	409a      	lsls	r2, r3
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab14:	f043 0204 	orr.w	r2, r3, #4
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab20:	2210      	movs	r2, #16
 800ab22:	409a      	lsls	r2, r3
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4013      	ands	r3, r2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d043      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0308 	and.w	r3, r3, #8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d03c      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3e:	2210      	movs	r2, #16
 800ab40:	409a      	lsls	r2, r3
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d018      	beq.n	800ab86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d108      	bne.n	800ab74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d024      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	4798      	blx	r3
 800ab72:	e01f      	b.n	800abb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01b      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	4798      	blx	r3
 800ab84:	e016      	b.n	800abb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d107      	bne.n	800aba4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0208 	bic.w	r2, r2, #8
 800aba2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abb8:	2220      	movs	r2, #32
 800abba:	409a      	lsls	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4013      	ands	r3, r2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f000 808f 	beq.w	800ace4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 8087 	beq.w	800ace4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abda:	2220      	movs	r2, #32
 800abdc:	409a      	lsls	r2, r3
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b05      	cmp	r3, #5
 800abec:	d136      	bne.n	800ac5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0216 	bic.w	r2, r2, #22
 800abfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	695a      	ldr	r2, [r3, #20]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d103      	bne.n	800ac1e <HAL_DMA_IRQHandler+0x1da>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f022 0208 	bic.w	r2, r2, #8
 800ac2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac32:	223f      	movs	r2, #63	; 0x3f
 800ac34:	409a      	lsls	r2, r3
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d07e      	beq.n	800ad50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	4798      	blx	r3
        }
        return;
 800ac5a:	e079      	b.n	800ad50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d01d      	beq.n	800aca6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10d      	bne.n	800ac94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d031      	beq.n	800ace4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	4798      	blx	r3
 800ac88:	e02c      	b.n	800ace4 <HAL_DMA_IRQHandler+0x2a0>
 800ac8a:	bf00      	nop
 800ac8c:	20000354 	.word	0x20000354
 800ac90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d023      	beq.n	800ace4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	4798      	blx	r3
 800aca4:	e01e      	b.n	800ace4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10f      	bne.n	800acd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0210 	bic.w	r2, r2, #16
 800acc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d032      	beq.n	800ad52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d022      	beq.n	800ad3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2205      	movs	r2, #5
 800acfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 0201 	bic.w	r2, r2, #1
 800ad0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	3301      	adds	r3, #1
 800ad14:	60bb      	str	r3, [r7, #8]
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d307      	bcc.n	800ad2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1f2      	bne.n	800ad10 <HAL_DMA_IRQHandler+0x2cc>
 800ad2a:	e000      	b.n	800ad2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ad2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
 800ad4e:	e000      	b.n	800ad52 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ad50:	bf00      	nop
    }
  }
}
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad66:	b2db      	uxtb	r3, r3
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	2b40      	cmp	r3, #64	; 0x40
 800ada0:	d108      	bne.n	800adb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800adb2:	e007      	b.n	800adc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	60da      	str	r2, [r3, #12]
}
 800adc4:	bf00      	nop
 800adc6:	3714      	adds	r7, #20
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	3b10      	subs	r3, #16
 800ade0:	4a14      	ldr	r2, [pc, #80]	; (800ae34 <DMA_CalcBaseAndBitshift+0x64>)
 800ade2:	fba2 2303 	umull	r2, r3, r2, r3
 800ade6:	091b      	lsrs	r3, r3, #4
 800ade8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800adea:	4a13      	ldr	r2, [pc, #76]	; (800ae38 <DMA_CalcBaseAndBitshift+0x68>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d909      	bls.n	800ae12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae06:	f023 0303 	bic.w	r3, r3, #3
 800ae0a:	1d1a      	adds	r2, r3, #4
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	659a      	str	r2, [r3, #88]	; 0x58
 800ae10:	e007      	b.n	800ae22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae1a:	f023 0303 	bic.w	r3, r3, #3
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	aaaaaaab 	.word	0xaaaaaaab
 800ae38:	0801c55c 	.word	0x0801c55c

0800ae3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d11f      	bne.n	800ae96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d856      	bhi.n	800af0a <DMA_CheckFifoParam+0xce>
 800ae5c:	a201      	add	r2, pc, #4	; (adr r2, 800ae64 <DMA_CheckFifoParam+0x28>)
 800ae5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae62:	bf00      	nop
 800ae64:	0800ae75 	.word	0x0800ae75
 800ae68:	0800ae87 	.word	0x0800ae87
 800ae6c:	0800ae75 	.word	0x0800ae75
 800ae70:	0800af0b 	.word	0x0800af0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d046      	beq.n	800af0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae84:	e043      	b.n	800af0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae8e:	d140      	bne.n	800af12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae94:	e03d      	b.n	800af12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae9e:	d121      	bne.n	800aee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d837      	bhi.n	800af16 <DMA_CheckFifoParam+0xda>
 800aea6:	a201      	add	r2, pc, #4	; (adr r2, 800aeac <DMA_CheckFifoParam+0x70>)
 800aea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeac:	0800aebd 	.word	0x0800aebd
 800aeb0:	0800aec3 	.word	0x0800aec3
 800aeb4:	0800aebd 	.word	0x0800aebd
 800aeb8:	0800aed5 	.word	0x0800aed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	73fb      	strb	r3, [r7, #15]
      break;
 800aec0:	e030      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d025      	beq.n	800af1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aed2:	e022      	b.n	800af1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aedc:	d11f      	bne.n	800af1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aee2:	e01c      	b.n	800af1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d903      	bls.n	800aef2 <DMA_CheckFifoParam+0xb6>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d003      	beq.n	800aef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aef0:	e018      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	73fb      	strb	r3, [r7, #15]
      break;
 800aef6:	e015      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00e      	beq.n	800af22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	73fb      	strb	r3, [r7, #15]
      break;
 800af08:	e00b      	b.n	800af22 <DMA_CheckFifoParam+0xe6>
      break;
 800af0a:	bf00      	nop
 800af0c:	e00a      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      break;
 800af0e:	bf00      	nop
 800af10:	e008      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      break;
 800af12:	bf00      	nop
 800af14:	e006      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      break;
 800af16:	bf00      	nop
 800af18:	e004      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      break;
 800af1a:	bf00      	nop
 800af1c:	e002      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      break;   
 800af1e:	bf00      	nop
 800af20:	e000      	b.n	800af24 <DMA_CheckFifoParam+0xe8>
      break;
 800af22:	bf00      	nop
    }
  } 
  
  return status; 
 800af24:	7bfb      	ldrb	r3, [r7, #15]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af34:	b480      	push	{r7}
 800af36:	b089      	sub	sp, #36	; 0x24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af42:	2300      	movs	r3, #0
 800af44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af46:	2300      	movs	r3, #0
 800af48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]
 800af4e:	e16b      	b.n	800b228 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af50:	2201      	movs	r2, #1
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	fa02 f303 	lsl.w	r3, r2, r3
 800af58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	4013      	ands	r3, r2
 800af62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	429a      	cmp	r2, r3
 800af6a:	f040 815a 	bne.w	800b222 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	2b01      	cmp	r3, #1
 800af78:	d005      	beq.n	800af86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af82:	2b02      	cmp	r3, #2
 800af84:	d130      	bne.n	800afe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	005b      	lsls	r3, r3, #1
 800af90:	2203      	movs	r2, #3
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	43db      	mvns	r3, r3
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	4013      	ands	r3, r2
 800af9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	005b      	lsls	r3, r3, #1
 800afa6:	fa02 f303 	lsl.w	r3, r2, r3
 800afaa:	69ba      	ldr	r2, [r7, #24]
 800afac:	4313      	orrs	r3, r2
 800afae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	69ba      	ldr	r2, [r7, #24]
 800afb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afbc:	2201      	movs	r2, #1
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	43db      	mvns	r3, r3
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	4013      	ands	r3, r2
 800afca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	091b      	lsrs	r3, r3, #4
 800afd2:	f003 0201 	and.w	r2, r3, #1
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	fa02 f303 	lsl.w	r3, r2, r3
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	4313      	orrs	r3, r2
 800afe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	f003 0303 	and.w	r3, r3, #3
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d017      	beq.n	800b024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	005b      	lsls	r3, r3, #1
 800affe:	2203      	movs	r2, #3
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	43db      	mvns	r3, r3
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	4013      	ands	r3, r2
 800b00a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	fa02 f303 	lsl.w	r3, r2, r3
 800b018:	69ba      	ldr	r2, [r7, #24]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	69ba      	ldr	r2, [r7, #24]
 800b022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	f003 0303 	and.w	r3, r3, #3
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d123      	bne.n	800b078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	08da      	lsrs	r2, r3, #3
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3208      	adds	r2, #8
 800b038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	220f      	movs	r2, #15
 800b048:	fa02 f303 	lsl.w	r3, r2, r3
 800b04c:	43db      	mvns	r3, r3
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	4013      	ands	r3, r2
 800b052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f003 0307 	and.w	r3, r3, #7
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	4313      	orrs	r3, r2
 800b068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	08da      	lsrs	r2, r3, #3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3208      	adds	r2, #8
 800b072:	69b9      	ldr	r1, [r7, #24]
 800b074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	2203      	movs	r2, #3
 800b084:	fa02 f303 	lsl.w	r3, r2, r3
 800b088:	43db      	mvns	r3, r3
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	4013      	ands	r3, r2
 800b08e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	f003 0203 	and.w	r2, r3, #3
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 80b4 	beq.w	800b222 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
 800b0be:	4b60      	ldr	r3, [pc, #384]	; (800b240 <HAL_GPIO_Init+0x30c>)
 800b0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0c2:	4a5f      	ldr	r2, [pc, #380]	; (800b240 <HAL_GPIO_Init+0x30c>)
 800b0c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0c8:	6453      	str	r3, [r2, #68]	; 0x44
 800b0ca:	4b5d      	ldr	r3, [pc, #372]	; (800b240 <HAL_GPIO_Init+0x30c>)
 800b0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0d6:	4a5b      	ldr	r2, [pc, #364]	; (800b244 <HAL_GPIO_Init+0x310>)
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	089b      	lsrs	r3, r3, #2
 800b0dc:	3302      	adds	r3, #2
 800b0de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	220f      	movs	r2, #15
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	43db      	mvns	r3, r3
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a52      	ldr	r2, [pc, #328]	; (800b248 <HAL_GPIO_Init+0x314>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d02b      	beq.n	800b15a <HAL_GPIO_Init+0x226>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a51      	ldr	r2, [pc, #324]	; (800b24c <HAL_GPIO_Init+0x318>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d025      	beq.n	800b156 <HAL_GPIO_Init+0x222>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a50      	ldr	r2, [pc, #320]	; (800b250 <HAL_GPIO_Init+0x31c>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d01f      	beq.n	800b152 <HAL_GPIO_Init+0x21e>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a4f      	ldr	r2, [pc, #316]	; (800b254 <HAL_GPIO_Init+0x320>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d019      	beq.n	800b14e <HAL_GPIO_Init+0x21a>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a4e      	ldr	r2, [pc, #312]	; (800b258 <HAL_GPIO_Init+0x324>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d013      	beq.n	800b14a <HAL_GPIO_Init+0x216>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a4d      	ldr	r2, [pc, #308]	; (800b25c <HAL_GPIO_Init+0x328>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d00d      	beq.n	800b146 <HAL_GPIO_Init+0x212>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a4c      	ldr	r2, [pc, #304]	; (800b260 <HAL_GPIO_Init+0x32c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d007      	beq.n	800b142 <HAL_GPIO_Init+0x20e>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a4b      	ldr	r2, [pc, #300]	; (800b264 <HAL_GPIO_Init+0x330>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d101      	bne.n	800b13e <HAL_GPIO_Init+0x20a>
 800b13a:	2307      	movs	r3, #7
 800b13c:	e00e      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b13e:	2308      	movs	r3, #8
 800b140:	e00c      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b142:	2306      	movs	r3, #6
 800b144:	e00a      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b146:	2305      	movs	r3, #5
 800b148:	e008      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b14a:	2304      	movs	r3, #4
 800b14c:	e006      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b14e:	2303      	movs	r3, #3
 800b150:	e004      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b152:	2302      	movs	r3, #2
 800b154:	e002      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b156:	2301      	movs	r3, #1
 800b158:	e000      	b.n	800b15c <HAL_GPIO_Init+0x228>
 800b15a:	2300      	movs	r3, #0
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	f002 0203 	and.w	r2, r2, #3
 800b162:	0092      	lsls	r2, r2, #2
 800b164:	4093      	lsls	r3, r2
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	4313      	orrs	r3, r2
 800b16a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b16c:	4935      	ldr	r1, [pc, #212]	; (800b244 <HAL_GPIO_Init+0x310>)
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	089b      	lsrs	r3, r3, #2
 800b172:	3302      	adds	r3, #2
 800b174:	69ba      	ldr	r2, [r7, #24]
 800b176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b17a:	4b3b      	ldr	r3, [pc, #236]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	43db      	mvns	r3, r3
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	4013      	ands	r3, r2
 800b188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b19e:	4a32      	ldr	r2, [pc, #200]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b1a4:	4b30      	ldr	r3, [pc, #192]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	43db      	mvns	r3, r3
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b1c8:	4a27      	ldr	r2, [pc, #156]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b1ce:	4b26      	ldr	r3, [pc, #152]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	43db      	mvns	r3, r3
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b1ea:	69ba      	ldr	r2, [r7, #24]
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1f2:	4a1d      	ldr	r2, [pc, #116]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b1f8:	4b1b      	ldr	r3, [pc, #108]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	43db      	mvns	r3, r3
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	4013      	ands	r3, r2
 800b206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d003      	beq.n	800b21c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	4313      	orrs	r3, r2
 800b21a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b21c:	4a12      	ldr	r2, [pc, #72]	; (800b268 <HAL_GPIO_Init+0x334>)
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	3301      	adds	r3, #1
 800b226:	61fb      	str	r3, [r7, #28]
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2b0f      	cmp	r3, #15
 800b22c:	f67f ae90 	bls.w	800af50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	3724      	adds	r7, #36	; 0x24
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	40023800 	.word	0x40023800
 800b244:	40013800 	.word	0x40013800
 800b248:	40020000 	.word	0x40020000
 800b24c:	40020400 	.word	0x40020400
 800b250:	40020800 	.word	0x40020800
 800b254:	40020c00 	.word	0x40020c00
 800b258:	40021000 	.word	0x40021000
 800b25c:	40021400 	.word	0x40021400
 800b260:	40021800 	.word	0x40021800
 800b264:	40021c00 	.word	0x40021c00
 800b268:	40013c00 	.word	0x40013c00

0800b26c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	460b      	mov	r3, r1
 800b276:	807b      	strh	r3, [r7, #2]
 800b278:	4613      	mov	r3, r2
 800b27a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b27c:	787b      	ldrb	r3, [r7, #1]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b282:	887a      	ldrh	r2, [r7, #2]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b288:	e003      	b.n	800b292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b28a:	887b      	ldrh	r3, [r7, #2]
 800b28c:	041a      	lsls	r2, r3, #16
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	619a      	str	r2, [r3, #24]
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b086      	sub	sp, #24
 800b2a2:	af02      	add	r7, sp, #8
 800b2a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e101      	b.n	800b4b4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f00b f9e4 	bl	8016698 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2203      	movs	r2, #3
 800b2d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2de:	d102      	bne.n	800b2e6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f004 fb55 	bl	800f99a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6818      	ldr	r0, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7c1a      	ldrb	r2, [r3, #16]
 800b2f8:	f88d 2000 	strb.w	r2, [sp]
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b300:	f004 fa33 	bl	800f76a <USB_CoreInit>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d005      	beq.n	800b316 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2202      	movs	r2, #2
 800b30e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e0ce      	b.n	800b4b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2100      	movs	r1, #0
 800b31c:	4618      	mov	r0, r3
 800b31e:	f004 fb4d 	bl	800f9bc <USB_SetCurrentMode>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e0bf      	b.n	800b4b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
 800b338:	e04a      	b.n	800b3d0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b33a:	7bfa      	ldrb	r2, [r7, #15]
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	440b      	add	r3, r1
 800b348:	3315      	adds	r3, #21
 800b34a:	2201      	movs	r2, #1
 800b34c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b34e:	7bfa      	ldrb	r2, [r7, #15]
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	4613      	mov	r3, r2
 800b354:	00db      	lsls	r3, r3, #3
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	3314      	adds	r3, #20
 800b35e:	7bfa      	ldrb	r2, [r7, #15]
 800b360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b362:	7bfa      	ldrb	r2, [r7, #15]
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	b298      	uxth	r0, r3
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	4613      	mov	r3, r2
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	440b      	add	r3, r1
 800b374:	332e      	adds	r3, #46	; 0x2e
 800b376:	4602      	mov	r2, r0
 800b378:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b37a:	7bfa      	ldrb	r2, [r7, #15]
 800b37c:	6879      	ldr	r1, [r7, #4]
 800b37e:	4613      	mov	r3, r2
 800b380:	00db      	lsls	r3, r3, #3
 800b382:	4413      	add	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	440b      	add	r3, r1
 800b388:	3318      	adds	r3, #24
 800b38a:	2200      	movs	r2, #0
 800b38c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b38e:	7bfa      	ldrb	r2, [r7, #15]
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4613      	mov	r3, r2
 800b394:	00db      	lsls	r3, r3, #3
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	440b      	add	r3, r1
 800b39c:	331c      	adds	r3, #28
 800b39e:	2200      	movs	r2, #0
 800b3a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b3a2:	7bfa      	ldrb	r2, [r7, #15]
 800b3a4:	6879      	ldr	r1, [r7, #4]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	440b      	add	r3, r1
 800b3b0:	3320      	adds	r3, #32
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b3b6:	7bfa      	ldrb	r2, [r7, #15]
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	00db      	lsls	r3, r3, #3
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	3324      	adds	r3, #36	; 0x24
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	791b      	ldrb	r3, [r3, #4]
 800b3d4:	7bfa      	ldrb	r2, [r7, #15]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d3af      	bcc.n	800b33a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]
 800b3de:	e044      	b.n	800b46a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b3e0:	7bfa      	ldrb	r2, [r7, #15]
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	00db      	lsls	r3, r3, #3
 800b3e8:	4413      	add	r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	440b      	add	r3, r1
 800b3ee:	f203 2355 	addw	r3, r3, #597	; 0x255
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b3f6:	7bfa      	ldrb	r2, [r7, #15]
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	00db      	lsls	r3, r3, #3
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	440b      	add	r3, r1
 800b404:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800b408:	7bfa      	ldrb	r2, [r7, #15]
 800b40a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4613      	mov	r3, r2
 800b412:	00db      	lsls	r3, r3, #3
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	440b      	add	r3, r1
 800b41a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b422:	7bfa      	ldrb	r2, [r7, #15]
 800b424:	6879      	ldr	r1, [r7, #4]
 800b426:	4613      	mov	r3, r2
 800b428:	00db      	lsls	r3, r3, #3
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	440b      	add	r3, r1
 800b430:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800b434:	2200      	movs	r2, #0
 800b436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b438:	7bfa      	ldrb	r2, [r7, #15]
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	4613      	mov	r3, r2
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	4413      	add	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b44a:	2200      	movs	r2, #0
 800b44c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b44e:	7bfa      	ldrb	r2, [r7, #15]
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	4613      	mov	r3, r2
 800b454:	00db      	lsls	r3, r3, #3
 800b456:	4413      	add	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	440b      	add	r3, r1
 800b45c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b464:	7bfb      	ldrb	r3, [r7, #15]
 800b466:	3301      	adds	r3, #1
 800b468:	73fb      	strb	r3, [r7, #15]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	791b      	ldrb	r3, [r3, #4]
 800b46e:	7bfa      	ldrb	r2, [r7, #15]
 800b470:	429a      	cmp	r2, r3
 800b472:	d3b5      	bcc.n	800b3e0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6818      	ldr	r0, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7c1a      	ldrb	r2, [r3, #16]
 800b47c:	f88d 2000 	strb.w	r2, [sp]
 800b480:	3304      	adds	r3, #4
 800b482:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b484:	f004 fae6 	bl	800fa54 <USB_DevInit>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2202      	movs	r2, #2
 800b492:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e00c      	b.n	800b4b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f005 fb2a 	bl	8010b06 <USB_DevDisconnect>

  return HAL_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d101      	bne.n	800b4d8 <HAL_PCD_Start+0x1c>
 800b4d4:	2302      	movs	r3, #2
 800b4d6:	e022      	b.n	800b51e <HAL_PCD_Start+0x62>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d009      	beq.n	800b500 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d105      	bne.n	800b500 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4618      	mov	r0, r3
 800b506:	f004 fa37 	bl	800f978 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4618      	mov	r0, r3
 800b510:	f005 fad8 	bl	8010ac4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b526:	b590      	push	{r4, r7, lr}
 800b528:	b08d      	sub	sp, #52	; 0x34
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f005 fb96 	bl	8010c6e <USB_GetMode>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	f040 848c 	bne.w	800be62 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4618      	mov	r0, r3
 800b550:	f005 fafa 	bl	8010b48 <USB_ReadInterrupts>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	f000 8482 	beq.w	800be60 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	0a1b      	lsrs	r3, r3, #8
 800b566:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4618      	mov	r0, r3
 800b576:	f005 fae7 	bl	8010b48 <USB_ReadInterrupts>
 800b57a:	4603      	mov	r3, r0
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b02      	cmp	r3, #2
 800b582:	d107      	bne.n	800b594 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	695a      	ldr	r2, [r3, #20]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f002 0202 	and.w	r2, r2, #2
 800b592:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4618      	mov	r0, r3
 800b59a:	f005 fad5 	bl	8010b48 <USB_ReadInterrupts>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b10      	cmp	r3, #16
 800b5a6:	d161      	bne.n	800b66c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	699a      	ldr	r2, [r3, #24]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f022 0210 	bic.w	r2, r2, #16
 800b5b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	6a1b      	ldr	r3, [r3, #32]
 800b5bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	f003 020f 	and.w	r2, r3, #15
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	00db      	lsls	r3, r3, #3
 800b5c8:	4413      	add	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	0c5b      	lsrs	r3, r3, #17
 800b5dc:	f003 030f 	and.w	r3, r3, #15
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d124      	bne.n	800b62e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b5e4:	69ba      	ldr	r2, [r7, #24]
 800b5e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d035      	beq.n	800b65c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	091b      	lsrs	r3, r3, #4
 800b5f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b5fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	461a      	mov	r2, r3
 800b602:	6a38      	ldr	r0, [r7, #32]
 800b604:	f005 f90c 	bl	8010820 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	091b      	lsrs	r3, r3, #4
 800b610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b614:	441a      	add	r2, r3
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	695a      	ldr	r2, [r3, #20]
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	091b      	lsrs	r3, r3, #4
 800b622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b626:	441a      	add	r2, r3
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	615a      	str	r2, [r3, #20]
 800b62c:	e016      	b.n	800b65c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	0c5b      	lsrs	r3, r3, #17
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	2b06      	cmp	r3, #6
 800b638:	d110      	bne.n	800b65c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b640:	2208      	movs	r2, #8
 800b642:	4619      	mov	r1, r3
 800b644:	6a38      	ldr	r0, [r7, #32]
 800b646:	f005 f8eb 	bl	8010820 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	695a      	ldr	r2, [r3, #20]
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	091b      	lsrs	r3, r3, #4
 800b652:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b656:	441a      	add	r2, r3
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699a      	ldr	r2, [r3, #24]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0210 	orr.w	r2, r2, #16
 800b66a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4618      	mov	r0, r3
 800b672:	f005 fa69 	bl	8010b48 <USB_ReadInterrupts>
 800b676:	4603      	mov	r3, r0
 800b678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b67c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b680:	f040 80a7 	bne.w	800b7d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f005 fa6e 	bl	8010b6e <USB_ReadDevAllOutEpInterrupt>
 800b692:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b694:	e099      	b.n	800b7ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b698:	f003 0301 	and.w	r3, r3, #1
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 808e 	beq.w	800b7be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f005 fa92 	bl	8010bd6 <USB_ReadDevOutEPInterrupt>
 800b6b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	f003 0301 	and.w	r3, r3, #1
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00c      	beq.n	800b6d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c0:	015a      	lsls	r2, r3, #5
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b6d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fea2 	bl	800c41c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f003 0308 	and.w	r3, r3, #8
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00c      	beq.n	800b6fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	2308      	movs	r3, #8
 800b6f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b6f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 ff78 	bl	800c5ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	2b00      	cmp	r3, #0
 800b704:	d008      	beq.n	800b718 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b712:	461a      	mov	r2, r3
 800b714:	2310      	movs	r3, #16
 800b716:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d030      	beq.n	800b784 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b722:	6a3b      	ldr	r3, [r7, #32]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b72a:	2b80      	cmp	r3, #128	; 0x80
 800b72c:	d109      	bne.n	800b742 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b73c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b740:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b744:	4613      	mov	r3, r2
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	4413      	add	r3, r2
 800b754:	3304      	adds	r3, #4
 800b756:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	78db      	ldrb	r3, [r3, #3]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d108      	bne.n	800b772 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2200      	movs	r2, #0
 800b764:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f00b f899 	bl	80168a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	015a      	lsls	r2, r3, #5
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	4413      	add	r3, r2
 800b77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b77e:	461a      	mov	r2, r3
 800b780:	2302      	movs	r3, #2
 800b782:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f003 0320 	and.w	r3, r3, #32
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d008      	beq.n	800b7a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79a:	461a      	mov	r2, r3
 800b79c:	2320      	movs	r3, #32
 800b79e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d009      	beq.n	800b7be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f47f af62 	bne.w	800b696 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f005 f9b6 	bl	8010b48 <USB_ReadInterrupts>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7e6:	f040 80db 	bne.w	800b9a0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f005 f9d7 	bl	8010ba2 <USB_ReadDevAllInEpInterrupt>
 800b7f4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b7fa:	e0cd      	b.n	800b998 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	f003 0301 	and.w	r3, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	f000 80c2 	beq.w	800b98c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80e:	b2d2      	uxtb	r2, r2
 800b810:	4611      	mov	r1, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f005 f9fd 	bl	8010c12 <USB_ReadDevInEPInterrupt>
 800b818:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	d057      	beq.n	800b8d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	2201      	movs	r2, #1
 800b82c:	fa02 f303 	lsl.w	r3, r2, r3
 800b830:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	43db      	mvns	r3, r3
 800b83e:	69f9      	ldr	r1, [r7, #28]
 800b840:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b844:	4013      	ands	r3, r2
 800b846:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	015a      	lsls	r2, r3, #5
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	4413      	add	r3, r2
 800b850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b854:	461a      	mov	r2, r3
 800b856:	2301      	movs	r3, #1
 800b858:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	799b      	ldrb	r3, [r3, #6]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d132      	bne.n	800b8c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b862:	6879      	ldr	r1, [r7, #4]
 800b864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b866:	4613      	mov	r3, r2
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	4413      	add	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	440b      	add	r3, r1
 800b870:	3320      	adds	r3, #32
 800b872:	6819      	ldr	r1, [r3, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b878:	4613      	mov	r3, r2
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	4413      	add	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4403      	add	r3, r0
 800b882:	331c      	adds	r3, #28
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4419      	add	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88c:	4613      	mov	r3, r2
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	4413      	add	r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	4403      	add	r3, r0
 800b896:	3320      	adds	r3, #32
 800b898:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d113      	bne.n	800b8c8 <HAL_PCD_IRQHandler+0x3a2>
 800b8a0:	6879      	ldr	r1, [r7, #4]
 800b8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	00db      	lsls	r3, r3, #3
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	440b      	add	r3, r1
 800b8ae:	3324      	adds	r3, #36	; 0x24
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d108      	bne.n	800b8c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	f005 fa04 	bl	8010cd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f00a ff63 	bl	801679a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f003 0308 	and.w	r3, r3, #8
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d008      	beq.n	800b8f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	015a      	lsls	r2, r3, #5
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	2308      	movs	r3, #8
 800b8ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d008      	beq.n	800b90c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	015a      	lsls	r2, r3, #5
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	4413      	add	r3, r2
 800b902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b906:	461a      	mov	r2, r3
 800b908:	2310      	movs	r3, #16
 800b90a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b912:	2b00      	cmp	r3, #0
 800b914:	d008      	beq.n	800b928 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b922:	461a      	mov	r2, r3
 800b924:	2340      	movs	r3, #64	; 0x40
 800b926:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	f003 0302 	and.w	r3, r3, #2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d023      	beq.n	800b97a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b934:	6a38      	ldr	r0, [r7, #32]
 800b936:	f004 f9f1 	bl	800fd1c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93c:	4613      	mov	r3, r2
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	3310      	adds	r3, #16
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	4413      	add	r3, r2
 800b94a:	3304      	adds	r3, #4
 800b94c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	78db      	ldrb	r3, [r3, #3]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d108      	bne.n	800b968 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2200      	movs	r2, #0
 800b95a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f00a ffb0 	bl	80168c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b974:	461a      	mov	r2, r3
 800b976:	2302      	movs	r3, #2
 800b978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b980:	2b00      	cmp	r3, #0
 800b982:	d003      	beq.n	800b98c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fcbb 	bl	800c302 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98e:	3301      	adds	r3, #1
 800b990:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b994:	085b      	lsrs	r3, r3, #1
 800b996:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f47f af2e 	bne.w	800b7fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f005 f8cf 	bl	8010b48 <USB_ReadInterrupts>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9b4:	d122      	bne.n	800b9fc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	69fa      	ldr	r2, [r7, #28]
 800b9c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9c4:	f023 0301 	bic.w	r3, r3, #1
 800b9c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d108      	bne.n	800b9e6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b9dc:	2100      	movs	r1, #0
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fea2 	bl	800c728 <HAL_PCDEx_LPM_Callback>
 800b9e4:	e002      	b.n	800b9ec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f00a ff4e 	bl	8016888 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	695a      	ldr	r2, [r3, #20]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b9fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f005 f8a1 	bl	8010b48 <USB_ReadInterrupts>
 800ba06:	4603      	mov	r3, r0
 800ba08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba10:	d112      	bne.n	800ba38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d102      	bne.n	800ba28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f00a ff0a 	bl	801683c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	695a      	ldr	r2, [r3, #20]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ba36:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f005 f883 	bl	8010b48 <USB_ReadInterrupts>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba4c:	f040 80b7 	bne.w	800bbbe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba5e:	f023 0301 	bic.w	r3, r3, #1
 800ba62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2110      	movs	r1, #16
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f004 f956 	bl	800fd1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba70:	2300      	movs	r3, #0
 800ba72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba74:	e046      	b.n	800bb04 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ba76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba78:	015a      	lsls	r2, r3, #5
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba82:	461a      	mov	r2, r3
 800ba84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8c:	015a      	lsls	r2, r3, #5
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	4413      	add	r3, r2
 800ba92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba9a:	0151      	lsls	r1, r2, #5
 800ba9c:	69fa      	ldr	r2, [r7, #28]
 800ba9e:	440a      	add	r2, r1
 800baa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800baa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baac:	015a      	lsls	r2, r3, #5
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	4413      	add	r3, r2
 800bab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab6:	461a      	mov	r2, r3
 800bab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800babc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bace:	0151      	lsls	r1, r2, #5
 800bad0:	69fa      	ldr	r2, [r7, #28]
 800bad2:	440a      	add	r2, r1
 800bad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800badc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baee:	0151      	lsls	r1, r2, #5
 800baf0:	69fa      	ldr	r2, [r7, #28]
 800baf2:	440a      	add	r2, r1
 800baf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bafc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb00:	3301      	adds	r3, #1
 800bb02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	791b      	ldrb	r3, [r3, #4]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d3b2      	bcc.n	800ba76 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb16:	69db      	ldr	r3, [r3, #28]
 800bb18:	69fa      	ldr	r2, [r7, #28]
 800bb1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb1e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bb22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	7bdb      	ldrb	r3, [r3, #15]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d016      	beq.n	800bb5a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb36:	69fa      	ldr	r2, [r7, #28]
 800bb38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb3c:	f043 030b 	orr.w	r3, r3, #11
 800bb40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4c:	69fa      	ldr	r2, [r7, #28]
 800bb4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb52:	f043 030b 	orr.w	r3, r3, #11
 800bb56:	6453      	str	r3, [r2, #68]	; 0x44
 800bb58:	e015      	b.n	800bb86 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bb6c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bb70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	69fa      	ldr	r2, [r7, #28]
 800bb7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb80:	f043 030b 	orr.w	r3, r3, #11
 800bb84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69fa      	ldr	r2, [r7, #28]
 800bb90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb94:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6818      	ldr	r0, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bba8:	461a      	mov	r2, r3
 800bbaa:	f005 f891 	bl	8010cd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	695a      	ldr	r2, [r3, #20]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bbbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f004 ffc0 	bl	8010b48 <USB_ReadInterrupts>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd2:	d123      	bne.n	800bc1c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f005 f856 	bl	8010c8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f004 f913 	bl	800fe0e <USB_GetDevSpeed>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	461a      	mov	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681c      	ldr	r4, [r3, #0]
 800bbf4:	f001 fa08 	bl	800d008 <HAL_RCC_GetHCLKFreq>
 800bbf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4620      	mov	r0, r4
 800bc02:	f003 fe17 	bl	800f834 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f00a fdef 	bl	80167ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	695a      	ldr	r2, [r3, #20]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bc1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f004 ff91 	bl	8010b48 <USB_ReadInterrupts>
 800bc26:	4603      	mov	r3, r0
 800bc28:	f003 0308 	and.w	r3, r3, #8
 800bc2c:	2b08      	cmp	r3, #8
 800bc2e:	d10a      	bne.n	800bc46 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f00a fdcc 	bl	80167ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	695a      	ldr	r2, [r3, #20]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f002 0208 	and.w	r2, r2, #8
 800bc44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f004 ff7c 	bl	8010b48 <USB_ReadInterrupts>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc56:	2b80      	cmp	r3, #128	; 0x80
 800bc58:	d123      	bne.n	800bca2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc66:	2301      	movs	r3, #1
 800bc68:	627b      	str	r3, [r7, #36]	; 0x24
 800bc6a:	e014      	b.n	800bc96 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc70:	4613      	mov	r3, r2
 800bc72:	00db      	lsls	r3, r3, #3
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	440b      	add	r3, r1
 800bc7a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d105      	bne.n	800bc90 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fb08 	bl	800c2a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	3301      	adds	r3, #1
 800bc94:	627b      	str	r3, [r7, #36]	; 0x24
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	791b      	ldrb	r3, [r3, #4]
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d3e4      	bcc.n	800bc6c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f004 ff4e 	bl	8010b48 <USB_ReadInterrupts>
 800bcac:	4603      	mov	r3, r0
 800bcae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb6:	d13c      	bne.n	800bd32 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bcb8:	2301      	movs	r3, #1
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
 800bcbc:	e02b      	b.n	800bd16 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	015a      	lsls	r2, r3, #5
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	440b      	add	r3, r1
 800bcdc:	3318      	adds	r3, #24
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d115      	bne.n	800bd10 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bce4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da12      	bge.n	800bd10 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcee:	4613      	mov	r3, r2
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	4413      	add	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	440b      	add	r3, r1
 800bcf8:	3317      	adds	r3, #23
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f000 fac8 	bl	800c2a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd12:	3301      	adds	r3, #1
 800bd14:	627b      	str	r3, [r7, #36]	; 0x24
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	791b      	ldrb	r3, [r3, #4]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d3cd      	bcc.n	800bcbe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	695a      	ldr	r2, [r3, #20]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bd30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f004 ff06 	bl	8010b48 <USB_ReadInterrupts>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bd42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd46:	d156      	bne.n	800bdf6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd48:	2301      	movs	r3, #1
 800bd4a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd4c:	e045      	b.n	800bdda <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	015a      	lsls	r2, r3, #5
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	4413      	add	r3, r2
 800bd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd5e:	6879      	ldr	r1, [r7, #4]
 800bd60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd62:	4613      	mov	r3, r2
 800bd64:	00db      	lsls	r3, r3, #3
 800bd66:	4413      	add	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	440b      	add	r3, r1
 800bd6c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d12e      	bne.n	800bdd4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bd76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	da2b      	bge.n	800bdd4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800bd88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d121      	bne.n	800bdd4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd94:	4613      	mov	r3, r2
 800bd96:	00db      	lsls	r3, r3, #3
 800bd98:	4413      	add	r3, r2
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	440b      	add	r3, r1
 800bd9e:	f203 2357 	addw	r3, r3, #599	; 0x257
 800bda2:	2201      	movs	r2, #1
 800bda4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bdb2:	6a3b      	ldr	r3, [r7, #32]
 800bdb4:	695b      	ldr	r3, [r3, #20]
 800bdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	69fa      	ldr	r2, [r7, #28]
 800bdc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bdd0:	6053      	str	r3, [r2, #4]
            break;
 800bdd2:	e008      	b.n	800bde6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	791b      	ldrb	r3, [r3, #4]
 800bdde:	461a      	mov	r2, r3
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d3b3      	bcc.n	800bd4e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	695a      	ldr	r2, [r3, #20]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bdf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f004 fea4 	bl	8010b48 <USB_ReadInterrupts>
 800be00:	4603      	mov	r3, r0
 800be02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be0a:	d10a      	bne.n	800be22 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f00a fd6d 	bl	80168ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	695a      	ldr	r2, [r3, #20]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800be20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	4618      	mov	r0, r3
 800be28:	f004 fe8e 	bl	8010b48 <USB_ReadInterrupts>
 800be2c:	4603      	mov	r3, r0
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b04      	cmp	r3, #4
 800be34:	d115      	bne.n	800be62 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	f003 0304 	and.w	r3, r3, #4
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f00a fd5d 	bl	8016908 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6859      	ldr	r1, [r3, #4]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	69ba      	ldr	r2, [r7, #24]
 800be5a:	430a      	orrs	r2, r1
 800be5c:	605a      	str	r2, [r3, #4]
 800be5e:	e000      	b.n	800be62 <HAL_PCD_IRQHandler+0x93c>
      return;
 800be60:	bf00      	nop
    }
  }
}
 800be62:	3734      	adds	r7, #52	; 0x34
 800be64:	46bd      	mov	sp, r7
 800be66:	bd90      	pop	{r4, r7, pc}

0800be68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d101      	bne.n	800be82 <HAL_PCD_SetAddress+0x1a>
 800be7e:	2302      	movs	r3, #2
 800be80:	e012      	b.n	800bea8 <HAL_PCD_SetAddress+0x40>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	78fa      	ldrb	r2, [r7, #3]
 800be8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	78fa      	ldrb	r2, [r7, #3]
 800be96:	4611      	mov	r1, r2
 800be98:	4618      	mov	r0, r3
 800be9a:	f004 fded 	bl	8010a78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	4608      	mov	r0, r1
 800beba:	4611      	mov	r1, r2
 800bebc:	461a      	mov	r2, r3
 800bebe:	4603      	mov	r3, r0
 800bec0:	70fb      	strb	r3, [r7, #3]
 800bec2:	460b      	mov	r3, r1
 800bec4:	803b      	strh	r3, [r7, #0]
 800bec6:	4613      	mov	r3, r2
 800bec8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	da0f      	bge.n	800bef6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bed6:	78fb      	ldrb	r3, [r7, #3]
 800bed8:	f003 020f 	and.w	r2, r3, #15
 800bedc:	4613      	mov	r3, r2
 800bede:	00db      	lsls	r3, r3, #3
 800bee0:	4413      	add	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	3310      	adds	r3, #16
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	4413      	add	r3, r2
 800beea:	3304      	adds	r3, #4
 800beec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	705a      	strb	r2, [r3, #1]
 800bef4:	e00f      	b.n	800bf16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bef6:	78fb      	ldrb	r3, [r7, #3]
 800bef8:	f003 020f 	and.w	r2, r3, #15
 800befc:	4613      	mov	r3, r2
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	4413      	add	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bf16:	78fb      	ldrb	r3, [r7, #3]
 800bf18:	f003 030f 	and.w	r3, r3, #15
 800bf1c:	b2da      	uxtb	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800bf22:	883a      	ldrh	r2, [r7, #0]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	78ba      	ldrb	r2, [r7, #2]
 800bf2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	785b      	ldrb	r3, [r3, #1]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d004      	beq.n	800bf40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bf40:	78bb      	ldrb	r3, [r7, #2]
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d102      	bne.n	800bf4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d101      	bne.n	800bf5a <HAL_PCD_EP_Open+0xaa>
 800bf56:	2302      	movs	r3, #2
 800bf58:	e00e      	b.n	800bf78 <HAL_PCD_EP_Open+0xc8>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68f9      	ldr	r1, [r7, #12]
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f003 ff75 	bl	800fe58 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800bf76:	7afb      	ldrb	r3, [r7, #11]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bf8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	da0f      	bge.n	800bfb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	f003 020f 	and.w	r2, r3, #15
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	00db      	lsls	r3, r3, #3
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	3310      	adds	r3, #16
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	4413      	add	r3, r2
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	705a      	strb	r2, [r3, #1]
 800bfb2:	e00f      	b.n	800bfd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	f003 020f 	and.w	r2, r3, #15
 800bfba:	4613      	mov	r3, r2
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	4413      	add	r3, r2
 800bfca:	3304      	adds	r3, #4
 800bfcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800bfd4:	78fb      	ldrb	r3, [r7, #3]
 800bfd6:	f003 030f 	and.w	r3, r3, #15
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d101      	bne.n	800bfee <HAL_PCD_EP_Close+0x6e>
 800bfea:	2302      	movs	r3, #2
 800bfec:	e00e      	b.n	800c00c <HAL_PCD_EP_Close+0x8c>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68f9      	ldr	r1, [r7, #12]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f003 ffb3 	bl	800ff68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b086      	sub	sp, #24
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	607a      	str	r2, [r7, #4]
 800c01e:	603b      	str	r3, [r7, #0]
 800c020:	460b      	mov	r3, r1
 800c022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c024:	7afb      	ldrb	r3, [r7, #11]
 800c026:	f003 020f 	and.w	r2, r3, #15
 800c02a:	4613      	mov	r3, r2
 800c02c:	00db      	lsls	r3, r3, #3
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	4413      	add	r3, r2
 800c03a:	3304      	adds	r3, #4
 800c03c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	2200      	movs	r2, #0
 800c04e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	2200      	movs	r2, #0
 800c054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c056:	7afb      	ldrb	r3, [r7, #11]
 800c058:	f003 030f 	and.w	r3, r3, #15
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	799b      	ldrb	r3, [r3, #6]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d102      	bne.n	800c070 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	6818      	ldr	r0, [r3, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	799b      	ldrb	r3, [r3, #6]
 800c078:	461a      	mov	r2, r3
 800c07a:	6979      	ldr	r1, [r7, #20]
 800c07c:	f004 f850 	bl	8010120 <USB_EPStartXfer>

  return HAL_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c08a:	b480      	push	{r7}
 800c08c:	b083      	sub	sp, #12
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c096:	78fb      	ldrb	r3, [r7, #3]
 800c098:	f003 020f 	and.w	r2, r3, #15
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800c0ac:	681b      	ldr	r3, [r3, #0]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr

0800c0ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b086      	sub	sp, #24
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	60f8      	str	r0, [r7, #12]
 800c0c2:	607a      	str	r2, [r7, #4]
 800c0c4:	603b      	str	r3, [r7, #0]
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0ca:	7afb      	ldrb	r3, [r7, #11]
 800c0cc:	f003 020f 	and.w	r2, r3, #15
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	00db      	lsls	r3, r3, #3
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	3310      	adds	r3, #16
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	4413      	add	r3, r2
 800c0de:	3304      	adds	r3, #4
 800c0e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0fa:	7afb      	ldrb	r3, [r7, #11]
 800c0fc:	f003 030f 	and.w	r3, r3, #15
 800c100:	b2da      	uxtb	r2, r3
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	799b      	ldrb	r3, [r3, #6]
 800c10a:	2b01      	cmp	r3, #1
 800c10c:	d102      	bne.n	800c114 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6818      	ldr	r0, [r3, #0]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	799b      	ldrb	r3, [r3, #6]
 800c11c:	461a      	mov	r2, r3
 800c11e:	6979      	ldr	r1, [r7, #20]
 800c120:	f003 fffe 	bl	8010120 <USB_EPStartXfer>

  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c13a:	78fb      	ldrb	r3, [r7, #3]
 800c13c:	f003 030f 	and.w	r3, r3, #15
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	7912      	ldrb	r2, [r2, #4]
 800c144:	4293      	cmp	r3, r2
 800c146:	d901      	bls.n	800c14c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e04f      	b.n	800c1ec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c14c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c150:	2b00      	cmp	r3, #0
 800c152:	da0f      	bge.n	800c174 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c154:	78fb      	ldrb	r3, [r7, #3]
 800c156:	f003 020f 	and.w	r2, r3, #15
 800c15a:	4613      	mov	r3, r2
 800c15c:	00db      	lsls	r3, r3, #3
 800c15e:	4413      	add	r3, r2
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	3310      	adds	r3, #16
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	4413      	add	r3, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2201      	movs	r2, #1
 800c170:	705a      	strb	r2, [r3, #1]
 800c172:	e00d      	b.n	800c190 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c174:	78fa      	ldrb	r2, [r7, #3]
 800c176:	4613      	mov	r3, r2
 800c178:	00db      	lsls	r3, r3, #3
 800c17a:	4413      	add	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	4413      	add	r3, r2
 800c186:	3304      	adds	r3, #4
 800c188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2200      	movs	r2, #0
 800c18e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2201      	movs	r2, #1
 800c194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c196:	78fb      	ldrb	r3, [r7, #3]
 800c198:	f003 030f 	and.w	r3, r3, #15
 800c19c:	b2da      	uxtb	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d101      	bne.n	800c1b0 <HAL_PCD_EP_SetStall+0x82>
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	e01d      	b.n	800c1ec <HAL_PCD_EP_SetStall+0xbe>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68f9      	ldr	r1, [r7, #12]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f004 fb86 	bl	80108d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c1c4:	78fb      	ldrb	r3, [r7, #3]
 800c1c6:	f003 030f 	and.w	r3, r3, #15
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d109      	bne.n	800c1e2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	7999      	ldrb	r1, [r3, #6]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f004 fd77 	bl	8010cd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	f003 030f 	and.w	r3, r3, #15
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	7912      	ldrb	r2, [r2, #4]
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d901      	bls.n	800c212 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e042      	b.n	800c298 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c216:	2b00      	cmp	r3, #0
 800c218:	da0f      	bge.n	800c23a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c21a:	78fb      	ldrb	r3, [r7, #3]
 800c21c:	f003 020f 	and.w	r2, r3, #15
 800c220:	4613      	mov	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	3310      	adds	r3, #16
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4413      	add	r3, r2
 800c22e:	3304      	adds	r3, #4
 800c230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2201      	movs	r2, #1
 800c236:	705a      	strb	r2, [r3, #1]
 800c238:	e00f      	b.n	800c25a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c23a:	78fb      	ldrb	r3, [r7, #3]
 800c23c:	f003 020f 	and.w	r2, r3, #15
 800c240:	4613      	mov	r3, r2
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4413      	add	r3, r2
 800c250:	3304      	adds	r3, #4
 800c252:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2200      	movs	r2, #0
 800c258:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	f003 030f 	and.w	r3, r3, #15
 800c266:	b2da      	uxtb	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c272:	2b01      	cmp	r3, #1
 800c274:	d101      	bne.n	800c27a <HAL_PCD_EP_ClrStall+0x86>
 800c276:	2302      	movs	r3, #2
 800c278:	e00e      	b.n	800c298 <HAL_PCD_EP_ClrStall+0xa4>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68f9      	ldr	r1, [r7, #12]
 800c288:	4618      	mov	r0, r3
 800c28a:	f004 fb8f 	bl	80109ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c2ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	da0c      	bge.n	800c2ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c2b4:	78fb      	ldrb	r3, [r7, #3]
 800c2b6:	f003 020f 	and.w	r2, r3, #15
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	4413      	add	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	3310      	adds	r3, #16
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	e00c      	b.n	800c2e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2ce:	78fb      	ldrb	r3, [r7, #3]
 800c2d0:	f003 020f 	and.w	r2, r3, #15
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	4413      	add	r3, r2
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68f9      	ldr	r1, [r7, #12]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f004 f9ae 	bl	8010650 <USB_EPStopXfer>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c2f8:	7afb      	ldrb	r3, [r7, #11]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b08a      	sub	sp, #40	; 0x28
 800c306:	af02      	add	r7, sp, #8
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	4613      	mov	r3, r2
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	4413      	add	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	3310      	adds	r3, #16
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	4413      	add	r3, r2
 800c326:	3304      	adds	r3, #4
 800c328:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	695a      	ldr	r2, [r3, #20]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	429a      	cmp	r2, r3
 800c334:	d901      	bls.n	800c33a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e06b      	b.n	800c412 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	691a      	ldr	r2, [r3, #16]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d902      	bls.n	800c356 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	3303      	adds	r3, #3
 800c35a:	089b      	lsrs	r3, r3, #2
 800c35c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c35e:	e02a      	b.n	800c3b6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	691a      	ldr	r2, [r3, #16]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	695b      	ldr	r3, [r3, #20]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	69fa      	ldr	r2, [r7, #28]
 800c372:	429a      	cmp	r2, r3
 800c374:	d902      	bls.n	800c37c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	3303      	adds	r3, #3
 800c380:	089b      	lsrs	r3, r3, #2
 800c382:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	68d9      	ldr	r1, [r3, #12]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	b2da      	uxtb	r2, r3
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	4603      	mov	r3, r0
 800c398:	6978      	ldr	r0, [r7, #20]
 800c39a:	f004 fa03 	bl	80107a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	695a      	ldr	r2, [r3, #20]
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d809      	bhi.n	800c3e0 <PCD_WriteEmptyTxFifo+0xde>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	695a      	ldr	r2, [r3, #20]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d203      	bcs.n	800c3e0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d1bf      	bne.n	800c360 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	691a      	ldr	r2, [r3, #16]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d811      	bhi.n	800c410 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	f003 030f 	and.w	r3, r3, #15
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	43db      	mvns	r3, r3
 800c406:	6939      	ldr	r1, [r7, #16]
 800c408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c40c:	4013      	ands	r3, r2
 800c40e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3720      	adds	r7, #32
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	333c      	adds	r3, #60	; 0x3c
 800c434:	3304      	adds	r3, #4
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	799b      	ldrb	r3, [r3, #6]
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d17b      	bne.n	800c54a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f003 0308 	and.w	r3, r3, #8
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d015      	beq.n	800c488 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	4a61      	ldr	r2, [pc, #388]	; (800c5e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c460:	4293      	cmp	r3, r2
 800c462:	f240 80b9 	bls.w	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f000 80b3 	beq.w	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	015a      	lsls	r2, r3, #5
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	4413      	add	r3, r2
 800c47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c47e:	461a      	mov	r2, r3
 800c480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c484:	6093      	str	r3, [r2, #8]
 800c486:	e0a7      	b.n	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	f003 0320 	and.w	r3, r3, #32
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d009      	beq.n	800c4a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	015a      	lsls	r2, r3, #5
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	4413      	add	r3, r2
 800c49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49e:	461a      	mov	r2, r3
 800c4a0:	2320      	movs	r3, #32
 800c4a2:	6093      	str	r3, [r2, #8]
 800c4a4:	e098      	b.n	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f040 8093 	bne.w	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	4a4b      	ldr	r2, [pc, #300]	; (800c5e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d90f      	bls.n	800c4da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00a      	beq.n	800c4da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	015a      	lsls	r2, r3, #5
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4d6:	6093      	str	r3, [r2, #8]
 800c4d8:	e07e      	b.n	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6a1a      	ldr	r2, [r3, #32]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	0159      	lsls	r1, r3, #5
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	440b      	add	r3, r1
 800c4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c506:	1ad2      	subs	r2, r2, r3
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d114      	bne.n	800c53c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d109      	bne.n	800c52e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6818      	ldr	r0, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c524:	461a      	mov	r2, r3
 800c526:	2101      	movs	r1, #1
 800c528:	f004 fbd2 	bl	8010cd0 <USB_EP0_OutStart>
 800c52c:	e006      	b.n	800c53c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	68da      	ldr	r2, [r3, #12]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	695b      	ldr	r3, [r3, #20]
 800c536:	441a      	add	r2, r3
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f00a f90e 	bl	8016764 <HAL_PCD_DataOutStageCallback>
 800c548:	e046      	b.n	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	4a26      	ldr	r2, [pc, #152]	; (800c5e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d124      	bne.n	800c59c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c552:	693b      	ldr	r3, [r7, #16]
 800c554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00a      	beq.n	800c572 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	015a      	lsls	r2, r3, #5
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	4413      	add	r3, r2
 800c564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c568:	461a      	mov	r2, r3
 800c56a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c56e:	6093      	str	r3, [r2, #8]
 800c570:	e032      	b.n	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f003 0320 	and.w	r3, r3, #32
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d008      	beq.n	800c58e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c588:	461a      	mov	r2, r3
 800c58a:	2320      	movs	r3, #32
 800c58c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	b2db      	uxtb	r3, r3
 800c592:	4619      	mov	r1, r3
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f00a f8e5 	bl	8016764 <HAL_PCD_DataOutStageCallback>
 800c59a:	e01d      	b.n	800c5d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d114      	bne.n	800c5cc <PCD_EP_OutXfrComplete_int+0x1b0>
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	683a      	ldr	r2, [r7, #0]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	4413      	add	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d108      	bne.n	800c5cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	f004 fb82 	bl	8010cd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f00a f8c6 	bl	8016764 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c5d8:	2300      	movs	r3, #0
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3720      	adds	r7, #32
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	4f54300a 	.word	0x4f54300a
 800c5e8:	4f54310a 	.word	0x4f54310a

0800c5ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	333c      	adds	r3, #60	; 0x3c
 800c604:	3304      	adds	r3, #4
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	015a      	lsls	r2, r3, #5
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	4413      	add	r3, r2
 800c612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	4a15      	ldr	r2, [pc, #84]	; (800c674 <PCD_EP_OutSetupPacket_int+0x88>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d90e      	bls.n	800c640 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d009      	beq.n	800c640 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c638:	461a      	mov	r2, r3
 800c63a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c63e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f00a f87d 	bl	8016740 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4a0a      	ldr	r2, [pc, #40]	; (800c674 <PCD_EP_OutSetupPacket_int+0x88>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d90c      	bls.n	800c668 <PCD_EP_OutSetupPacket_int+0x7c>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	799b      	ldrb	r3, [r3, #6]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d108      	bne.n	800c668 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800c660:	461a      	mov	r2, r3
 800c662:	2101      	movs	r1, #1
 800c664:	f004 fb34 	bl	8010cd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	4f54300a 	.word	0x4f54300a

0800c678 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	70fb      	strb	r3, [r7, #3]
 800c684:	4613      	mov	r3, r2
 800c686:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c68e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c690:	78fb      	ldrb	r3, [r7, #3]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d107      	bne.n	800c6a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c696:	883b      	ldrh	r3, [r7, #0]
 800c698:	0419      	lsls	r1, r3, #16
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	629a      	str	r2, [r3, #40]	; 0x28
 800c6a4:	e028      	b.n	800c6f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ac:	0c1b      	lsrs	r3, r3, #16
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
 800c6b8:	e00d      	b.n	800c6d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
 800c6c0:	3340      	adds	r3, #64	; 0x40
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	0c1b      	lsrs	r3, r3, #16
 800c6ca:	68ba      	ldr	r2, [r7, #8]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	73fb      	strb	r3, [r7, #15]
 800c6d6:	7bfa      	ldrb	r2, [r7, #15]
 800c6d8:	78fb      	ldrb	r3, [r7, #3]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d3ec      	bcc.n	800c6ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c6e0:	883b      	ldrh	r3, [r7, #0]
 800c6e2:	0418      	lsls	r0, r3, #16
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6819      	ldr	r1, [r3, #0]
 800c6e8:	78fb      	ldrb	r3, [r7, #3]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	4302      	orrs	r2, r0
 800c6f0:	3340      	adds	r3, #64	; 0x40
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	440b      	add	r3, r1
 800c6f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	460b      	mov	r3, r1
 800c710:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	887a      	ldrh	r2, [r7, #2]
 800c718:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	460b      	mov	r3, r1
 800c732:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c734:	bf00      	nop
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d101      	bne.n	800c752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	e267      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 0301 	and.w	r3, r3, #1
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d075      	beq.n	800c84a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c75e:	4b88      	ldr	r3, [pc, #544]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	f003 030c 	and.w	r3, r3, #12
 800c766:	2b04      	cmp	r3, #4
 800c768:	d00c      	beq.n	800c784 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c76a:	4b85      	ldr	r3, [pc, #532]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c772:	2b08      	cmp	r3, #8
 800c774:	d112      	bne.n	800c79c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c776:	4b82      	ldr	r3, [pc, #520]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c77e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c782:	d10b      	bne.n	800c79c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c784:	4b7e      	ldr	r3, [pc, #504]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d05b      	beq.n	800c848 <HAL_RCC_OscConfig+0x108>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d157      	bne.n	800c848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e242      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7a4:	d106      	bne.n	800c7b4 <HAL_RCC_OscConfig+0x74>
 800c7a6:	4b76      	ldr	r3, [pc, #472]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a75      	ldr	r2, [pc, #468]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	e01d      	b.n	800c7f0 <HAL_RCC_OscConfig+0xb0>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7bc:	d10c      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x98>
 800c7be:	4b70      	ldr	r3, [pc, #448]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a6f      	ldr	r2, [pc, #444]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	4b6d      	ldr	r3, [pc, #436]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	4a6c      	ldr	r2, [pc, #432]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7d4:	6013      	str	r3, [r2, #0]
 800c7d6:	e00b      	b.n	800c7f0 <HAL_RCC_OscConfig+0xb0>
 800c7d8:	4b69      	ldr	r3, [pc, #420]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a68      	ldr	r2, [pc, #416]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	4b66      	ldr	r3, [pc, #408]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a65      	ldr	r2, [pc, #404]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c7ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d013      	beq.n	800c820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c7f8:	f7fd fa38 	bl	8009c6c <HAL_GetTick>
 800c7fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7fe:	e008      	b.n	800c812 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c800:	f7fd fa34 	bl	8009c6c <HAL_GetTick>
 800c804:	4602      	mov	r2, r0
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	2b64      	cmp	r3, #100	; 0x64
 800c80c:	d901      	bls.n	800c812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c80e:	2303      	movs	r3, #3
 800c810:	e207      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c812:	4b5b      	ldr	r3, [pc, #364]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0f0      	beq.n	800c800 <HAL_RCC_OscConfig+0xc0>
 800c81e:	e014      	b.n	800c84a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c820:	f7fd fa24 	bl	8009c6c <HAL_GetTick>
 800c824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c826:	e008      	b.n	800c83a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c828:	f7fd fa20 	bl	8009c6c <HAL_GetTick>
 800c82c:	4602      	mov	r2, r0
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	2b64      	cmp	r3, #100	; 0x64
 800c834:	d901      	bls.n	800c83a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c836:	2303      	movs	r3, #3
 800c838:	e1f3      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c83a:	4b51      	ldr	r3, [pc, #324]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1f0      	bne.n	800c828 <HAL_RCC_OscConfig+0xe8>
 800c846:	e000      	b.n	800c84a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0302 	and.w	r3, r3, #2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d063      	beq.n	800c91e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c856:	4b4a      	ldr	r3, [pc, #296]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	f003 030c 	and.w	r3, r3, #12
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00b      	beq.n	800c87a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c862:	4b47      	ldr	r3, [pc, #284]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c86a:	2b08      	cmp	r3, #8
 800c86c:	d11c      	bne.n	800c8a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c86e:	4b44      	ldr	r3, [pc, #272]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c870:	685b      	ldr	r3, [r3, #4]
 800c872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c876:	2b00      	cmp	r3, #0
 800c878:	d116      	bne.n	800c8a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c87a:	4b41      	ldr	r3, [pc, #260]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0302 	and.w	r3, r3, #2
 800c882:	2b00      	cmp	r3, #0
 800c884:	d005      	beq.n	800c892 <HAL_RCC_OscConfig+0x152>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d001      	beq.n	800c892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e1c7      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c892:	4b3b      	ldr	r3, [pc, #236]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	4937      	ldr	r1, [pc, #220]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8a6:	e03a      	b.n	800c91e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d020      	beq.n	800c8f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c8b0:	4b34      	ldr	r3, [pc, #208]	; (800c984 <HAL_RCC_OscConfig+0x244>)
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b6:	f7fd f9d9 	bl	8009c6c <HAL_GetTick>
 800c8ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8bc:	e008      	b.n	800c8d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8be:	f7fd f9d5 	bl	8009c6c <HAL_GetTick>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	d901      	bls.n	800c8d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c8cc:	2303      	movs	r3, #3
 800c8ce:	e1a8      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8d0:	4b2b      	ldr	r3, [pc, #172]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0302 	and.w	r3, r3, #2
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0f0      	beq.n	800c8be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8dc:	4b28      	ldr	r3, [pc, #160]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	4925      	ldr	r1, [pc, #148]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	600b      	str	r3, [r1, #0]
 800c8f0:	e015      	b.n	800c91e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8f2:	4b24      	ldr	r3, [pc, #144]	; (800c984 <HAL_RCC_OscConfig+0x244>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8f8:	f7fd f9b8 	bl	8009c6c <HAL_GetTick>
 800c8fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8fe:	e008      	b.n	800c912 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c900:	f7fd f9b4 	bl	8009c6c <HAL_GetTick>
 800c904:	4602      	mov	r2, r0
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	d901      	bls.n	800c912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c90e:	2303      	movs	r3, #3
 800c910:	e187      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c912:	4b1b      	ldr	r3, [pc, #108]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f003 0302 	and.w	r3, r3, #2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1f0      	bne.n	800c900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 0308 	and.w	r3, r3, #8
 800c926:	2b00      	cmp	r3, #0
 800c928:	d036      	beq.n	800c998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d016      	beq.n	800c960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c932:	4b15      	ldr	r3, [pc, #84]	; (800c988 <HAL_RCC_OscConfig+0x248>)
 800c934:	2201      	movs	r2, #1
 800c936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c938:	f7fd f998 	bl	8009c6c <HAL_GetTick>
 800c93c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c93e:	e008      	b.n	800c952 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c940:	f7fd f994 	bl	8009c6c <HAL_GetTick>
 800c944:	4602      	mov	r2, r0
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d901      	bls.n	800c952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c94e:	2303      	movs	r3, #3
 800c950:	e167      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c952:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <HAL_RCC_OscConfig+0x240>)
 800c954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c956:	f003 0302 	and.w	r3, r3, #2
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0f0      	beq.n	800c940 <HAL_RCC_OscConfig+0x200>
 800c95e:	e01b      	b.n	800c998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c960:	4b09      	ldr	r3, [pc, #36]	; (800c988 <HAL_RCC_OscConfig+0x248>)
 800c962:	2200      	movs	r2, #0
 800c964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c966:	f7fd f981 	bl	8009c6c <HAL_GetTick>
 800c96a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c96c:	e00e      	b.n	800c98c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c96e:	f7fd f97d 	bl	8009c6c <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d907      	bls.n	800c98c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e150      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
 800c980:	40023800 	.word	0x40023800
 800c984:	42470000 	.word	0x42470000
 800c988:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c98c:	4b88      	ldr	r3, [pc, #544]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800c98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c990:	f003 0302 	and.w	r3, r3, #2
 800c994:	2b00      	cmp	r3, #0
 800c996:	d1ea      	bne.n	800c96e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f000 8097 	beq.w	800cad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9aa:	4b81      	ldr	r3, [pc, #516]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800c9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10f      	bne.n	800c9d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60bb      	str	r3, [r7, #8]
 800c9ba:	4b7d      	ldr	r3, [pc, #500]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800c9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9be:	4a7c      	ldr	r2, [pc, #496]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800c9c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9c4:	6413      	str	r3, [r2, #64]	; 0x40
 800c9c6:	4b7a      	ldr	r3, [pc, #488]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800c9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ce:	60bb      	str	r3, [r7, #8]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9d6:	4b77      	ldr	r3, [pc, #476]	; (800cbb4 <HAL_RCC_OscConfig+0x474>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d118      	bne.n	800ca14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c9e2:	4b74      	ldr	r3, [pc, #464]	; (800cbb4 <HAL_RCC_OscConfig+0x474>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a73      	ldr	r2, [pc, #460]	; (800cbb4 <HAL_RCC_OscConfig+0x474>)
 800c9e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c9ee:	f7fd f93d 	bl	8009c6c <HAL_GetTick>
 800c9f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9f4:	e008      	b.n	800ca08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9f6:	f7fd f939 	bl	8009c6c <HAL_GetTick>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d901      	bls.n	800ca08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ca04:	2303      	movs	r3, #3
 800ca06:	e10c      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca08:	4b6a      	ldr	r3, [pc, #424]	; (800cbb4 <HAL_RCC_OscConfig+0x474>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d0f0      	beq.n	800c9f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d106      	bne.n	800ca2a <HAL_RCC_OscConfig+0x2ea>
 800ca1c:	4b64      	ldr	r3, [pc, #400]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca20:	4a63      	ldr	r2, [pc, #396]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca22:	f043 0301 	orr.w	r3, r3, #1
 800ca26:	6713      	str	r3, [r2, #112]	; 0x70
 800ca28:	e01c      	b.n	800ca64 <HAL_RCC_OscConfig+0x324>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	2b05      	cmp	r3, #5
 800ca30:	d10c      	bne.n	800ca4c <HAL_RCC_OscConfig+0x30c>
 800ca32:	4b5f      	ldr	r3, [pc, #380]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca36:	4a5e      	ldr	r2, [pc, #376]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca38:	f043 0304 	orr.w	r3, r3, #4
 800ca3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ca3e:	4b5c      	ldr	r3, [pc, #368]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca42:	4a5b      	ldr	r2, [pc, #364]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca44:	f043 0301 	orr.w	r3, r3, #1
 800ca48:	6713      	str	r3, [r2, #112]	; 0x70
 800ca4a:	e00b      	b.n	800ca64 <HAL_RCC_OscConfig+0x324>
 800ca4c:	4b58      	ldr	r3, [pc, #352]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca50:	4a57      	ldr	r2, [pc, #348]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca52:	f023 0301 	bic.w	r3, r3, #1
 800ca56:	6713      	str	r3, [r2, #112]	; 0x70
 800ca58:	4b55      	ldr	r3, [pc, #340]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca5c:	4a54      	ldr	r2, [pc, #336]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca5e:	f023 0304 	bic.w	r3, r3, #4
 800ca62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d015      	beq.n	800ca98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca6c:	f7fd f8fe 	bl	8009c6c <HAL_GetTick>
 800ca70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca72:	e00a      	b.n	800ca8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca74:	f7fd f8fa 	bl	8009c6c <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d901      	bls.n	800ca8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e0cb      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca8a:	4b49      	ldr	r3, [pc, #292]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800ca8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8e:	f003 0302 	and.w	r3, r3, #2
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0ee      	beq.n	800ca74 <HAL_RCC_OscConfig+0x334>
 800ca96:	e014      	b.n	800cac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ca98:	f7fd f8e8 	bl	8009c6c <HAL_GetTick>
 800ca9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca9e:	e00a      	b.n	800cab6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800caa0:	f7fd f8e4 	bl	8009c6c <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800caae:	4293      	cmp	r3, r2
 800cab0:	d901      	bls.n	800cab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e0b5      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cab6:	4b3e      	ldr	r3, [pc, #248]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800cab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caba:	f003 0302 	and.w	r3, r3, #2
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1ee      	bne.n	800caa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d105      	bne.n	800cad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cac8:	4b39      	ldr	r3, [pc, #228]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800caca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cacc:	4a38      	ldr	r2, [pc, #224]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800cace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cad2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 80a1 	beq.w	800cc20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cade:	4b34      	ldr	r3, [pc, #208]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f003 030c 	and.w	r3, r3, #12
 800cae6:	2b08      	cmp	r3, #8
 800cae8:	d05c      	beq.n	800cba4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d141      	bne.n	800cb76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caf2:	4b31      	ldr	r3, [pc, #196]	; (800cbb8 <HAL_RCC_OscConfig+0x478>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800caf8:	f7fd f8b8 	bl	8009c6c <HAL_GetTick>
 800cafc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cafe:	e008      	b.n	800cb12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb00:	f7fd f8b4 	bl	8009c6c <HAL_GetTick>
 800cb04:	4602      	mov	r2, r0
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d901      	bls.n	800cb12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e087      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb12:	4b27      	ldr	r3, [pc, #156]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f0      	bne.n	800cb00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	69da      	ldr	r2, [r3, #28]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	431a      	orrs	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2c:	019b      	lsls	r3, r3, #6
 800cb2e:	431a      	orrs	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb34:	085b      	lsrs	r3, r3, #1
 800cb36:	3b01      	subs	r3, #1
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	431a      	orrs	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb40:	061b      	lsls	r3, r3, #24
 800cb42:	491b      	ldr	r1, [pc, #108]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800cb44:	4313      	orrs	r3, r2
 800cb46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb48:	4b1b      	ldr	r3, [pc, #108]	; (800cbb8 <HAL_RCC_OscConfig+0x478>)
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb4e:	f7fd f88d 	bl	8009c6c <HAL_GetTick>
 800cb52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb54:	e008      	b.n	800cb68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb56:	f7fd f889 	bl	8009c6c <HAL_GetTick>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d901      	bls.n	800cb68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cb64:	2303      	movs	r3, #3
 800cb66:	e05c      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb68:	4b11      	ldr	r3, [pc, #68]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d0f0      	beq.n	800cb56 <HAL_RCC_OscConfig+0x416>
 800cb74:	e054      	b.n	800cc20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb76:	4b10      	ldr	r3, [pc, #64]	; (800cbb8 <HAL_RCC_OscConfig+0x478>)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb7c:	f7fd f876 	bl	8009c6c <HAL_GetTick>
 800cb80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb82:	e008      	b.n	800cb96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb84:	f7fd f872 	bl	8009c6c <HAL_GetTick>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	d901      	bls.n	800cb96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cb92:	2303      	movs	r3, #3
 800cb94:	e045      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb96:	4b06      	ldr	r3, [pc, #24]	; (800cbb0 <HAL_RCC_OscConfig+0x470>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d1f0      	bne.n	800cb84 <HAL_RCC_OscConfig+0x444>
 800cba2:	e03d      	b.n	800cc20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	699b      	ldr	r3, [r3, #24]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d107      	bne.n	800cbbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	e038      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
 800cbb0:	40023800 	.word	0x40023800
 800cbb4:	40007000 	.word	0x40007000
 800cbb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cbbc:	4b1b      	ldr	r3, [pc, #108]	; (800cc2c <HAL_RCC_OscConfig+0x4ec>)
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	699b      	ldr	r3, [r3, #24]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d028      	beq.n	800cc1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d121      	bne.n	800cc1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d11a      	bne.n	800cc1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cbec:	4013      	ands	r3, r2
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cbf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d111      	bne.n	800cc1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc02:	085b      	lsrs	r3, r3, #1
 800cc04:	3b01      	subs	r3, #1
 800cc06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d107      	bne.n	800cc1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d001      	beq.n	800cc20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e000      	b.n	800cc22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	40023800 	.word	0x40023800

0800cc30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e0cc      	b.n	800cdde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cc44:	4b68      	ldr	r3, [pc, #416]	; (800cde8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f003 0307 	and.w	r3, r3, #7
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d90c      	bls.n	800cc6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc52:	4b65      	ldr	r3, [pc, #404]	; (800cde8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	b2d2      	uxtb	r2, r2
 800cc58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc5a:	4b63      	ldr	r3, [pc, #396]	; (800cde8 <HAL_RCC_ClockConfig+0x1b8>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f003 0307 	and.w	r3, r3, #7
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d001      	beq.n	800cc6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e0b8      	b.n	800cdde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0302 	and.w	r3, r3, #2
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d020      	beq.n	800ccba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f003 0304 	and.w	r3, r3, #4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d005      	beq.n	800cc90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cc84:	4b59      	ldr	r3, [pc, #356]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	4a58      	ldr	r2, [pc, #352]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cc8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cc8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d005      	beq.n	800cca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cc9c:	4b53      	ldr	r3, [pc, #332]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	4a52      	ldr	r2, [pc, #328]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cca2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cca8:	4b50      	ldr	r3, [pc, #320]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	494d      	ldr	r1, [pc, #308]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0301 	and.w	r3, r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d044      	beq.n	800cd50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d107      	bne.n	800ccde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ccce:	4b47      	ldr	r3, [pc, #284]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d119      	bne.n	800cd0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e07f      	b.n	800cdde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d003      	beq.n	800ccee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	d107      	bne.n	800ccfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ccee:	4b3f      	ldr	r3, [pc, #252]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d109      	bne.n	800cd0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e06f      	b.n	800cdde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccfe:	4b3b      	ldr	r3, [pc, #236]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f003 0302 	and.w	r3, r3, #2
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e067      	b.n	800cdde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cd0e:	4b37      	ldr	r3, [pc, #220]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cd10:	689b      	ldr	r3, [r3, #8]
 800cd12:	f023 0203 	bic.w	r2, r3, #3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	4934      	ldr	r1, [pc, #208]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cd20:	f7fc ffa4 	bl	8009c6c <HAL_GetTick>
 800cd24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd26:	e00a      	b.n	800cd3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd28:	f7fc ffa0 	bl	8009c6c <HAL_GetTick>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	1ad3      	subs	r3, r2, r3
 800cd32:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d901      	bls.n	800cd3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e04f      	b.n	800cdde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd3e:	4b2b      	ldr	r3, [pc, #172]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f003 020c 	and.w	r2, r3, #12
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d1eb      	bne.n	800cd28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd50:	4b25      	ldr	r3, [pc, #148]	; (800cde8 <HAL_RCC_ClockConfig+0x1b8>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0307 	and.w	r3, r3, #7
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d20c      	bcs.n	800cd78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd5e:	4b22      	ldr	r3, [pc, #136]	; (800cde8 <HAL_RCC_ClockConfig+0x1b8>)
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd66:	4b20      	ldr	r3, [pc, #128]	; (800cde8 <HAL_RCC_ClockConfig+0x1b8>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0307 	and.w	r3, r3, #7
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d001      	beq.n	800cd78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e032      	b.n	800cdde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d008      	beq.n	800cd96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd84:	4b19      	ldr	r3, [pc, #100]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	4916      	ldr	r1, [pc, #88]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cd92:	4313      	orrs	r3, r2
 800cd94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 0308 	and.w	r3, r3, #8
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d009      	beq.n	800cdb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cda2:	4b12      	ldr	r3, [pc, #72]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	490e      	ldr	r1, [pc, #56]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cdb6:	f000 f821 	bl	800cdfc <HAL_RCC_GetSysClockFreq>
 800cdba:	4602      	mov	r2, r0
 800cdbc:	4b0b      	ldr	r3, [pc, #44]	; (800cdec <HAL_RCC_ClockConfig+0x1bc>)
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	091b      	lsrs	r3, r3, #4
 800cdc2:	f003 030f 	and.w	r3, r3, #15
 800cdc6:	490a      	ldr	r1, [pc, #40]	; (800cdf0 <HAL_RCC_ClockConfig+0x1c0>)
 800cdc8:	5ccb      	ldrb	r3, [r1, r3]
 800cdca:	fa22 f303 	lsr.w	r3, r2, r3
 800cdce:	4a09      	ldr	r2, [pc, #36]	; (800cdf4 <HAL_RCC_ClockConfig+0x1c4>)
 800cdd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cdd2:	4b09      	ldr	r3, [pc, #36]	; (800cdf8 <HAL_RCC_ClockConfig+0x1c8>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fc ff04 	bl	8009be4 <HAL_InitTick>

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	40023c00 	.word	0x40023c00
 800cdec:	40023800 	.word	0x40023800
 800cdf0:	0801c544 	.word	0x0801c544
 800cdf4:	20000354 	.word	0x20000354
 800cdf8:	20000358 	.word	0x20000358

0800cdfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cdfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce00:	b094      	sub	sp, #80	; 0x50
 800ce02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ce04:	2300      	movs	r3, #0
 800ce06:	647b      	str	r3, [r7, #68]	; 0x44
 800ce08:	2300      	movs	r3, #0
 800ce0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800ce10:	2300      	movs	r3, #0
 800ce12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ce14:	4b79      	ldr	r3, [pc, #484]	; (800cffc <HAL_RCC_GetSysClockFreq+0x200>)
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	f003 030c 	and.w	r3, r3, #12
 800ce1c:	2b08      	cmp	r3, #8
 800ce1e:	d00d      	beq.n	800ce3c <HAL_RCC_GetSysClockFreq+0x40>
 800ce20:	2b08      	cmp	r3, #8
 800ce22:	f200 80e1 	bhi.w	800cfe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d002      	beq.n	800ce30 <HAL_RCC_GetSysClockFreq+0x34>
 800ce2a:	2b04      	cmp	r3, #4
 800ce2c:	d003      	beq.n	800ce36 <HAL_RCC_GetSysClockFreq+0x3a>
 800ce2e:	e0db      	b.n	800cfe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ce30:	4b73      	ldr	r3, [pc, #460]	; (800d000 <HAL_RCC_GetSysClockFreq+0x204>)
 800ce32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800ce34:	e0db      	b.n	800cfee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ce36:	4b73      	ldr	r3, [pc, #460]	; (800d004 <HAL_RCC_GetSysClockFreq+0x208>)
 800ce38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ce3a:	e0d8      	b.n	800cfee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ce3c:	4b6f      	ldr	r3, [pc, #444]	; (800cffc <HAL_RCC_GetSysClockFreq+0x200>)
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ce46:	4b6d      	ldr	r3, [pc, #436]	; (800cffc <HAL_RCC_GetSysClockFreq+0x200>)
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d063      	beq.n	800cf1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce52:	4b6a      	ldr	r3, [pc, #424]	; (800cffc <HAL_RCC_GetSysClockFreq+0x200>)
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	099b      	lsrs	r3, r3, #6
 800ce58:	2200      	movs	r2, #0
 800ce5a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce64:	633b      	str	r3, [r7, #48]	; 0x30
 800ce66:	2300      	movs	r3, #0
 800ce68:	637b      	str	r3, [r7, #52]	; 0x34
 800ce6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ce6e:	4622      	mov	r2, r4
 800ce70:	462b      	mov	r3, r5
 800ce72:	f04f 0000 	mov.w	r0, #0
 800ce76:	f04f 0100 	mov.w	r1, #0
 800ce7a:	0159      	lsls	r1, r3, #5
 800ce7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ce80:	0150      	lsls	r0, r2, #5
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	4621      	mov	r1, r4
 800ce88:	1a51      	subs	r1, r2, r1
 800ce8a:	6139      	str	r1, [r7, #16]
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	eb63 0301 	sbc.w	r3, r3, r1
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	f04f 0200 	mov.w	r2, #0
 800ce98:	f04f 0300 	mov.w	r3, #0
 800ce9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cea0:	4659      	mov	r1, fp
 800cea2:	018b      	lsls	r3, r1, #6
 800cea4:	4651      	mov	r1, sl
 800cea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ceaa:	4651      	mov	r1, sl
 800ceac:	018a      	lsls	r2, r1, #6
 800ceae:	4651      	mov	r1, sl
 800ceb0:	ebb2 0801 	subs.w	r8, r2, r1
 800ceb4:	4659      	mov	r1, fp
 800ceb6:	eb63 0901 	sbc.w	r9, r3, r1
 800ceba:	f04f 0200 	mov.w	r2, #0
 800cebe:	f04f 0300 	mov.w	r3, #0
 800cec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ceca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cece:	4690      	mov	r8, r2
 800ced0:	4699      	mov	r9, r3
 800ced2:	4623      	mov	r3, r4
 800ced4:	eb18 0303 	adds.w	r3, r8, r3
 800ced8:	60bb      	str	r3, [r7, #8]
 800ceda:	462b      	mov	r3, r5
 800cedc:	eb49 0303 	adc.w	r3, r9, r3
 800cee0:	60fb      	str	r3, [r7, #12]
 800cee2:	f04f 0200 	mov.w	r2, #0
 800cee6:	f04f 0300 	mov.w	r3, #0
 800ceea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ceee:	4629      	mov	r1, r5
 800cef0:	024b      	lsls	r3, r1, #9
 800cef2:	4621      	mov	r1, r4
 800cef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cef8:	4621      	mov	r1, r4
 800cefa:	024a      	lsls	r2, r1, #9
 800cefc:	4610      	mov	r0, r2
 800cefe:	4619      	mov	r1, r3
 800cf00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf02:	2200      	movs	r2, #0
 800cf04:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cf0c:	f7f3 feac 	bl	8000c68 <__aeabi_uldivmod>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4613      	mov	r3, r2
 800cf16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf18:	e058      	b.n	800cfcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cf1a:	4b38      	ldr	r3, [pc, #224]	; (800cffc <HAL_RCC_GetSysClockFreq+0x200>)
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	099b      	lsrs	r3, r3, #6
 800cf20:	2200      	movs	r2, #0
 800cf22:	4618      	mov	r0, r3
 800cf24:	4611      	mov	r1, r2
 800cf26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cf2a:	623b      	str	r3, [r7, #32]
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24
 800cf30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cf34:	4642      	mov	r2, r8
 800cf36:	464b      	mov	r3, r9
 800cf38:	f04f 0000 	mov.w	r0, #0
 800cf3c:	f04f 0100 	mov.w	r1, #0
 800cf40:	0159      	lsls	r1, r3, #5
 800cf42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cf46:	0150      	lsls	r0, r2, #5
 800cf48:	4602      	mov	r2, r0
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	4641      	mov	r1, r8
 800cf4e:	ebb2 0a01 	subs.w	sl, r2, r1
 800cf52:	4649      	mov	r1, r9
 800cf54:	eb63 0b01 	sbc.w	fp, r3, r1
 800cf58:	f04f 0200 	mov.w	r2, #0
 800cf5c:	f04f 0300 	mov.w	r3, #0
 800cf60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800cf64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800cf68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800cf6c:	ebb2 040a 	subs.w	r4, r2, sl
 800cf70:	eb63 050b 	sbc.w	r5, r3, fp
 800cf74:	f04f 0200 	mov.w	r2, #0
 800cf78:	f04f 0300 	mov.w	r3, #0
 800cf7c:	00eb      	lsls	r3, r5, #3
 800cf7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cf82:	00e2      	lsls	r2, r4, #3
 800cf84:	4614      	mov	r4, r2
 800cf86:	461d      	mov	r5, r3
 800cf88:	4643      	mov	r3, r8
 800cf8a:	18e3      	adds	r3, r4, r3
 800cf8c:	603b      	str	r3, [r7, #0]
 800cf8e:	464b      	mov	r3, r9
 800cf90:	eb45 0303 	adc.w	r3, r5, r3
 800cf94:	607b      	str	r3, [r7, #4]
 800cf96:	f04f 0200 	mov.w	r2, #0
 800cf9a:	f04f 0300 	mov.w	r3, #0
 800cf9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	028b      	lsls	r3, r1, #10
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cfac:	4621      	mov	r1, r4
 800cfae:	028a      	lsls	r2, r1, #10
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	61bb      	str	r3, [r7, #24]
 800cfba:	61fa      	str	r2, [r7, #28]
 800cfbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cfc0:	f7f3 fe52 	bl	8000c68 <__aeabi_uldivmod>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	4613      	mov	r3, r2
 800cfca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cfcc:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <HAL_RCC_GetSysClockFreq+0x200>)
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	0c1b      	lsrs	r3, r3, #16
 800cfd2:	f003 0303 	and.w	r3, r3, #3
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	005b      	lsls	r3, r3, #1
 800cfda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800cfdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cfde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfe0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cfe6:	e002      	b.n	800cfee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cfe8:	4b05      	ldr	r3, [pc, #20]	; (800d000 <HAL_RCC_GetSysClockFreq+0x204>)
 800cfea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cfec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cfee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3750      	adds	r7, #80	; 0x50
 800cff4:	46bd      	mov	sp, r7
 800cff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cffa:	bf00      	nop
 800cffc:	40023800 	.word	0x40023800
 800d000:	00f42400 	.word	0x00f42400
 800d004:	007a1200 	.word	0x007a1200

0800d008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d008:	b480      	push	{r7}
 800d00a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d00c:	4b03      	ldr	r3, [pc, #12]	; (800d01c <HAL_RCC_GetHCLKFreq+0x14>)
 800d00e:	681b      	ldr	r3, [r3, #0]
}
 800d010:	4618      	mov	r0, r3
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	20000354 	.word	0x20000354

0800d020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d024:	f7ff fff0 	bl	800d008 <HAL_RCC_GetHCLKFreq>
 800d028:	4602      	mov	r2, r0
 800d02a:	4b05      	ldr	r3, [pc, #20]	; (800d040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	0a9b      	lsrs	r3, r3, #10
 800d030:	f003 0307 	and.w	r3, r3, #7
 800d034:	4903      	ldr	r1, [pc, #12]	; (800d044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d036:	5ccb      	ldrb	r3, [r1, r3]
 800d038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	40023800 	.word	0x40023800
 800d044:	0801c554 	.word	0x0801c554

0800d048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d04c:	f7ff ffdc 	bl	800d008 <HAL_RCC_GetHCLKFreq>
 800d050:	4602      	mov	r2, r0
 800d052:	4b05      	ldr	r3, [pc, #20]	; (800d068 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	0b5b      	lsrs	r3, r3, #13
 800d058:	f003 0307 	and.w	r3, r3, #7
 800d05c:	4903      	ldr	r1, [pc, #12]	; (800d06c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d05e:	5ccb      	ldrb	r3, [r1, r3]
 800d060:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d064:	4618      	mov	r0, r3
 800d066:	bd80      	pop	{r7, pc}
 800d068:	40023800 	.word	0x40023800
 800d06c:	0801c554 	.word	0x0801c554

0800d070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d101      	bne.n	800d082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e041      	b.n	800d106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7fc fa8a 	bl	80095b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2202      	movs	r2, #2
 800d0a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	3304      	adds	r3, #4
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	f000 fd0a 	bl	800dac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2201      	movs	r2, #1
 800d100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
	...

0800d110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d110:	b480      	push	{r7}
 800d112:	b085      	sub	sp, #20
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b01      	cmp	r3, #1
 800d122:	d001      	beq.n	800d128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	e04e      	b.n	800d1c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2202      	movs	r2, #2
 800d12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	68da      	ldr	r2, [r3, #12]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f042 0201 	orr.w	r2, r2, #1
 800d13e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a23      	ldr	r2, [pc, #140]	; (800d1d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d022      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x80>
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d152:	d01d      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x80>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a1f      	ldr	r2, [pc, #124]	; (800d1d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d018      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x80>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4a1e      	ldr	r2, [pc, #120]	; (800d1dc <HAL_TIM_Base_Start_IT+0xcc>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d013      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x80>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d00e      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x80>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a1b      	ldr	r2, [pc, #108]	; (800d1e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d009      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x80>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a19      	ldr	r2, [pc, #100]	; (800d1e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d004      	beq.n	800d190 <HAL_TIM_Base_Start_IT+0x80>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a18      	ldr	r2, [pc, #96]	; (800d1ec <HAL_TIM_Base_Start_IT+0xdc>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d111      	bne.n	800d1b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2b06      	cmp	r3, #6
 800d1a0:	d010      	beq.n	800d1c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0201 	orr.w	r2, r2, #1
 800d1b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1b2:	e007      	b.n	800d1c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0201 	orr.w	r2, r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	40010000 	.word	0x40010000
 800d1d8:	40000400 	.word	0x40000400
 800d1dc:	40000800 	.word	0x40000800
 800d1e0:	40000c00 	.word	0x40000c00
 800d1e4:	40010400 	.word	0x40010400
 800d1e8:	40014000 	.word	0x40014000
 800d1ec:	40001800 	.word	0x40001800

0800d1f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68da      	ldr	r2, [r3, #12]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f022 0201 	bic.w	r2, r2, #1
 800d206:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6a1a      	ldr	r2, [r3, #32]
 800d20e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d212:	4013      	ands	r3, r2
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10f      	bne.n	800d238 <HAL_TIM_Base_Stop_IT+0x48>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6a1a      	ldr	r2, [r3, #32]
 800d21e:	f240 4344 	movw	r3, #1092	; 0x444
 800d222:	4013      	ands	r3, r2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d107      	bne.n	800d238 <HAL_TIM_Base_Stop_IT+0x48>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f022 0201 	bic.w	r2, r2, #1
 800d236:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b082      	sub	sp, #8
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e041      	b.n	800d2e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d106      	bne.n	800d27a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 f839 	bl	800d2ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2202      	movs	r2, #2
 800d27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3304      	adds	r3, #4
 800d28a:	4619      	mov	r1, r3
 800d28c:	4610      	mov	r0, r2
 800d28e:	f000 fc1b 	bl	800dac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d2f4:	bf00      	nop
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d109      	bne.n	800d324 <HAL_TIM_PWM_Start+0x24>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b01      	cmp	r3, #1
 800d31a:	bf14      	ite	ne
 800d31c:	2301      	movne	r3, #1
 800d31e:	2300      	moveq	r3, #0
 800d320:	b2db      	uxtb	r3, r3
 800d322:	e022      	b.n	800d36a <HAL_TIM_PWM_Start+0x6a>
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2b04      	cmp	r3, #4
 800d328:	d109      	bne.n	800d33e <HAL_TIM_PWM_Start+0x3e>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b01      	cmp	r3, #1
 800d334:	bf14      	ite	ne
 800d336:	2301      	movne	r3, #1
 800d338:	2300      	moveq	r3, #0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	e015      	b.n	800d36a <HAL_TIM_PWM_Start+0x6a>
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b08      	cmp	r3, #8
 800d342:	d109      	bne.n	800d358 <HAL_TIM_PWM_Start+0x58>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	bf14      	ite	ne
 800d350:	2301      	movne	r3, #1
 800d352:	2300      	moveq	r3, #0
 800d354:	b2db      	uxtb	r3, r3
 800d356:	e008      	b.n	800d36a <HAL_TIM_PWM_Start+0x6a>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b01      	cmp	r3, #1
 800d362:	bf14      	ite	ne
 800d364:	2301      	movne	r3, #1
 800d366:	2300      	moveq	r3, #0
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d001      	beq.n	800d372 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e07c      	b.n	800d46c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d104      	bne.n	800d382 <HAL_TIM_PWM_Start+0x82>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2202      	movs	r2, #2
 800d37c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d380:	e013      	b.n	800d3aa <HAL_TIM_PWM_Start+0xaa>
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	2b04      	cmp	r3, #4
 800d386:	d104      	bne.n	800d392 <HAL_TIM_PWM_Start+0x92>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d390:	e00b      	b.n	800d3aa <HAL_TIM_PWM_Start+0xaa>
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b08      	cmp	r3, #8
 800d396:	d104      	bne.n	800d3a2 <HAL_TIM_PWM_Start+0xa2>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2202      	movs	r2, #2
 800d39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3a0:	e003      	b.n	800d3aa <HAL_TIM_PWM_Start+0xaa>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2202      	movs	r2, #2
 800d3a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	6839      	ldr	r1, [r7, #0]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 fe7e 	bl	800e0b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a2d      	ldr	r2, [pc, #180]	; (800d474 <HAL_TIM_PWM_Start+0x174>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d004      	beq.n	800d3cc <HAL_TIM_PWM_Start+0xcc>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a2c      	ldr	r2, [pc, #176]	; (800d478 <HAL_TIM_PWM_Start+0x178>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d101      	bne.n	800d3d0 <HAL_TIM_PWM_Start+0xd0>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e000      	b.n	800d3d2 <HAL_TIM_PWM_Start+0xd2>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d007      	beq.n	800d3e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	4a22      	ldr	r2, [pc, #136]	; (800d474 <HAL_TIM_PWM_Start+0x174>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d022      	beq.n	800d436 <HAL_TIM_PWM_Start+0x136>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3f8:	d01d      	beq.n	800d436 <HAL_TIM_PWM_Start+0x136>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a1f      	ldr	r2, [pc, #124]	; (800d47c <HAL_TIM_PWM_Start+0x17c>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d018      	beq.n	800d436 <HAL_TIM_PWM_Start+0x136>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a1d      	ldr	r2, [pc, #116]	; (800d480 <HAL_TIM_PWM_Start+0x180>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d013      	beq.n	800d436 <HAL_TIM_PWM_Start+0x136>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a1c      	ldr	r2, [pc, #112]	; (800d484 <HAL_TIM_PWM_Start+0x184>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d00e      	beq.n	800d436 <HAL_TIM_PWM_Start+0x136>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a16      	ldr	r2, [pc, #88]	; (800d478 <HAL_TIM_PWM_Start+0x178>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d009      	beq.n	800d436 <HAL_TIM_PWM_Start+0x136>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a18      	ldr	r2, [pc, #96]	; (800d488 <HAL_TIM_PWM_Start+0x188>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d004      	beq.n	800d436 <HAL_TIM_PWM_Start+0x136>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a16      	ldr	r2, [pc, #88]	; (800d48c <HAL_TIM_PWM_Start+0x18c>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d111      	bne.n	800d45a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f003 0307 	and.w	r3, r3, #7
 800d440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b06      	cmp	r3, #6
 800d446:	d010      	beq.n	800d46a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f042 0201 	orr.w	r2, r2, #1
 800d456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d458:	e007      	b.n	800d46a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f042 0201 	orr.w	r2, r2, #1
 800d468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	40010000 	.word	0x40010000
 800d478:	40010400 	.word	0x40010400
 800d47c:	40000400 	.word	0x40000400
 800d480:	40000800 	.word	0x40000800
 800d484:	40000c00 	.word	0x40000c00
 800d488:	40014000 	.word	0x40014000
 800d48c:	40001800 	.word	0x40001800

0800d490 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	6839      	ldr	r1, [r7, #0]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f000 fe06 	bl	800e0b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a2e      	ldr	r2, [pc, #184]	; (800d568 <HAL_TIM_PWM_Stop+0xd8>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d004      	beq.n	800d4bc <HAL_TIM_PWM_Stop+0x2c>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a2d      	ldr	r2, [pc, #180]	; (800d56c <HAL_TIM_PWM_Stop+0xdc>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d101      	bne.n	800d4c0 <HAL_TIM_PWM_Stop+0x30>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e000      	b.n	800d4c2 <HAL_TIM_PWM_Stop+0x32>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d017      	beq.n	800d4f6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6a1a      	ldr	r2, [r3, #32]
 800d4cc:	f241 1311 	movw	r3, #4369	; 0x1111
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10f      	bne.n	800d4f6 <HAL_TIM_PWM_Stop+0x66>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6a1a      	ldr	r2, [r3, #32]
 800d4dc:	f240 4344 	movw	r3, #1092	; 0x444
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d107      	bne.n	800d4f6 <HAL_TIM_PWM_Stop+0x66>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6a1a      	ldr	r2, [r3, #32]
 800d4fc:	f241 1311 	movw	r3, #4369	; 0x1111
 800d500:	4013      	ands	r3, r2
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10f      	bne.n	800d526 <HAL_TIM_PWM_Stop+0x96>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6a1a      	ldr	r2, [r3, #32]
 800d50c:	f240 4344 	movw	r3, #1092	; 0x444
 800d510:	4013      	ands	r3, r2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d107      	bne.n	800d526 <HAL_TIM_PWM_Stop+0x96>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f022 0201 	bic.w	r2, r2, #1
 800d524:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d104      	bne.n	800d536 <HAL_TIM_PWM_Stop+0xa6>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d534:	e013      	b.n	800d55e <HAL_TIM_PWM_Stop+0xce>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b04      	cmp	r3, #4
 800d53a:	d104      	bne.n	800d546 <HAL_TIM_PWM_Stop+0xb6>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d544:	e00b      	b.n	800d55e <HAL_TIM_PWM_Stop+0xce>
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b08      	cmp	r3, #8
 800d54a:	d104      	bne.n	800d556 <HAL_TIM_PWM_Stop+0xc6>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d554:	e003      	b.n	800d55e <HAL_TIM_PWM_Stop+0xce>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800d55e:	2300      	movs	r3, #0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	40010000 	.word	0x40010000
 800d56c:	40010400 	.word	0x40010400

0800d570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	f003 0302 	and.w	r3, r3, #2
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d020      	beq.n	800d5d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f003 0302 	and.w	r3, r3, #2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d01b      	beq.n	800d5d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f06f 0202 	mvn.w	r2, #2
 800d5a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	f003 0303 	and.w	r3, r3, #3
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 fa65 	bl	800da8a <HAL_TIM_IC_CaptureCallback>
 800d5c0:	e005      	b.n	800d5ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fa57 	bl	800da76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fa68 	bl	800da9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f003 0304 	and.w	r3, r3, #4
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d020      	beq.n	800d620 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f003 0304 	and.w	r3, r3, #4
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d01b      	beq.n	800d620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f06f 0204 	mvn.w	r2, #4
 800d5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 fa3f 	bl	800da8a <HAL_TIM_IC_CaptureCallback>
 800d60c:	e005      	b.n	800d61a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 fa31 	bl	800da76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fa42 	bl	800da9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	f003 0308 	and.w	r3, r3, #8
 800d626:	2b00      	cmp	r3, #0
 800d628:	d020      	beq.n	800d66c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	f003 0308 	and.w	r3, r3, #8
 800d630:	2b00      	cmp	r3, #0
 800d632:	d01b      	beq.n	800d66c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f06f 0208 	mvn.w	r2, #8
 800d63c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2204      	movs	r2, #4
 800d642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	f003 0303 	and.w	r3, r3, #3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d003      	beq.n	800d65a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fa19 	bl	800da8a <HAL_TIM_IC_CaptureCallback>
 800d658:	e005      	b.n	800d666 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fa0b 	bl	800da76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fa1c 	bl	800da9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	f003 0310 	and.w	r3, r3, #16
 800d672:	2b00      	cmp	r3, #0
 800d674:	d020      	beq.n	800d6b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f003 0310 	and.w	r3, r3, #16
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01b      	beq.n	800d6b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f06f 0210 	mvn.w	r2, #16
 800d688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2208      	movs	r2, #8
 800d68e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 f9f3 	bl	800da8a <HAL_TIM_IC_CaptureCallback>
 800d6a4:	e005      	b.n	800d6b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 f9e5 	bl	800da76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f9f6 	bl	800da9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00c      	beq.n	800d6dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d007      	beq.n	800d6dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f06f 0201 	mvn.w	r2, #1
 800d6d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f9c3 	bl	800da62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00c      	beq.n	800d700 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d007      	beq.n	800d700 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fd86 	bl	800e20c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00c      	beq.n	800d724 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d710:	2b00      	cmp	r3, #0
 800d712:	d007      	beq.n	800d724 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f9c7 	bl	800dab2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	f003 0320 	and.w	r3, r3, #32
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00c      	beq.n	800d748 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f003 0320 	and.w	r3, r3, #32
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f06f 0220 	mvn.w	r2, #32
 800d740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fd58 	bl	800e1f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d748:	bf00      	nop
 800d74a:	3710      	adds	r7, #16
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d766:	2b01      	cmp	r3, #1
 800d768:	d101      	bne.n	800d76e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d76a:	2302      	movs	r3, #2
 800d76c:	e0ae      	b.n	800d8cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2201      	movs	r2, #1
 800d772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b0c      	cmp	r3, #12
 800d77a:	f200 809f 	bhi.w	800d8bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d77e:	a201      	add	r2, pc, #4	; (adr r2, 800d784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d784:	0800d7b9 	.word	0x0800d7b9
 800d788:	0800d8bd 	.word	0x0800d8bd
 800d78c:	0800d8bd 	.word	0x0800d8bd
 800d790:	0800d8bd 	.word	0x0800d8bd
 800d794:	0800d7f9 	.word	0x0800d7f9
 800d798:	0800d8bd 	.word	0x0800d8bd
 800d79c:	0800d8bd 	.word	0x0800d8bd
 800d7a0:	0800d8bd 	.word	0x0800d8bd
 800d7a4:	0800d83b 	.word	0x0800d83b
 800d7a8:	0800d8bd 	.word	0x0800d8bd
 800d7ac:	0800d8bd 	.word	0x0800d8bd
 800d7b0:	0800d8bd 	.word	0x0800d8bd
 800d7b4:	0800d87b 	.word	0x0800d87b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	68b9      	ldr	r1, [r7, #8]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f000 fa2e 	bl	800dc20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	699a      	ldr	r2, [r3, #24]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f042 0208 	orr.w	r2, r2, #8
 800d7d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	699a      	ldr	r2, [r3, #24]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f022 0204 	bic.w	r2, r2, #4
 800d7e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	6999      	ldr	r1, [r3, #24]
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	691a      	ldr	r2, [r3, #16]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	430a      	orrs	r2, r1
 800d7f4:	619a      	str	r2, [r3, #24]
      break;
 800d7f6:	e064      	b.n	800d8c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	68b9      	ldr	r1, [r7, #8]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 fa7e 	bl	800dd00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	699a      	ldr	r2, [r3, #24]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	699a      	ldr	r2, [r3, #24]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6999      	ldr	r1, [r3, #24]
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	691b      	ldr	r3, [r3, #16]
 800d82e:	021a      	lsls	r2, r3, #8
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	430a      	orrs	r2, r1
 800d836:	619a      	str	r2, [r3, #24]
      break;
 800d838:	e043      	b.n	800d8c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68b9      	ldr	r1, [r7, #8]
 800d840:	4618      	mov	r0, r3
 800d842:	f000 fad3 	bl	800ddec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	69da      	ldr	r2, [r3, #28]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f042 0208 	orr.w	r2, r2, #8
 800d854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	69da      	ldr	r2, [r3, #28]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f022 0204 	bic.w	r2, r2, #4
 800d864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	69d9      	ldr	r1, [r3, #28]
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	691a      	ldr	r2, [r3, #16]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	430a      	orrs	r2, r1
 800d876:	61da      	str	r2, [r3, #28]
      break;
 800d878:	e023      	b.n	800d8c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68b9      	ldr	r1, [r7, #8]
 800d880:	4618      	mov	r0, r3
 800d882:	f000 fb27 	bl	800ded4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	69da      	ldr	r2, [r3, #28]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	69da      	ldr	r2, [r3, #28]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	69d9      	ldr	r1, [r3, #28]
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	021a      	lsls	r2, r3, #8
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	61da      	str	r2, [r3, #28]
      break;
 800d8ba:	e002      	b.n	800d8c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	75fb      	strb	r3, [r7, #23]
      break;
 800d8c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d8ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}

0800d8d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d101      	bne.n	800d8f0 <HAL_TIM_ConfigClockSource+0x1c>
 800d8ec:	2302      	movs	r3, #2
 800d8ee:	e0b4      	b.n	800da5a <HAL_TIM_ConfigClockSource+0x186>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d90e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d928:	d03e      	beq.n	800d9a8 <HAL_TIM_ConfigClockSource+0xd4>
 800d92a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d92e:	f200 8087 	bhi.w	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d936:	f000 8086 	beq.w	800da46 <HAL_TIM_ConfigClockSource+0x172>
 800d93a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d93e:	d87f      	bhi.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d940:	2b70      	cmp	r3, #112	; 0x70
 800d942:	d01a      	beq.n	800d97a <HAL_TIM_ConfigClockSource+0xa6>
 800d944:	2b70      	cmp	r3, #112	; 0x70
 800d946:	d87b      	bhi.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d948:	2b60      	cmp	r3, #96	; 0x60
 800d94a:	d050      	beq.n	800d9ee <HAL_TIM_ConfigClockSource+0x11a>
 800d94c:	2b60      	cmp	r3, #96	; 0x60
 800d94e:	d877      	bhi.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d950:	2b50      	cmp	r3, #80	; 0x50
 800d952:	d03c      	beq.n	800d9ce <HAL_TIM_ConfigClockSource+0xfa>
 800d954:	2b50      	cmp	r3, #80	; 0x50
 800d956:	d873      	bhi.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d958:	2b40      	cmp	r3, #64	; 0x40
 800d95a:	d058      	beq.n	800da0e <HAL_TIM_ConfigClockSource+0x13a>
 800d95c:	2b40      	cmp	r3, #64	; 0x40
 800d95e:	d86f      	bhi.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d960:	2b30      	cmp	r3, #48	; 0x30
 800d962:	d064      	beq.n	800da2e <HAL_TIM_ConfigClockSource+0x15a>
 800d964:	2b30      	cmp	r3, #48	; 0x30
 800d966:	d86b      	bhi.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d968:	2b20      	cmp	r3, #32
 800d96a:	d060      	beq.n	800da2e <HAL_TIM_ConfigClockSource+0x15a>
 800d96c:	2b20      	cmp	r3, #32
 800d96e:	d867      	bhi.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
 800d970:	2b00      	cmp	r3, #0
 800d972:	d05c      	beq.n	800da2e <HAL_TIM_ConfigClockSource+0x15a>
 800d974:	2b10      	cmp	r3, #16
 800d976:	d05a      	beq.n	800da2e <HAL_TIM_ConfigClockSource+0x15a>
 800d978:	e062      	b.n	800da40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d98a:	f000 fb73 	bl	800e074 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d99c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	68ba      	ldr	r2, [r7, #8]
 800d9a4:	609a      	str	r2, [r3, #8]
      break;
 800d9a6:	e04f      	b.n	800da48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d9b8:	f000 fb5c 	bl	800e074 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	689a      	ldr	r2, [r3, #8]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d9ca:	609a      	str	r2, [r3, #8]
      break;
 800d9cc:	e03c      	b.n	800da48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9da:	461a      	mov	r2, r3
 800d9dc:	f000 fad0 	bl	800df80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2150      	movs	r1, #80	; 0x50
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 fb29 	bl	800e03e <TIM_ITRx_SetConfig>
      break;
 800d9ec:	e02c      	b.n	800da48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	f000 faef 	bl	800dfde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2160      	movs	r1, #96	; 0x60
 800da06:	4618      	mov	r0, r3
 800da08:	f000 fb19 	bl	800e03e <TIM_ITRx_SetConfig>
      break;
 800da0c:	e01c      	b.n	800da48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da1a:	461a      	mov	r2, r3
 800da1c:	f000 fab0 	bl	800df80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2140      	movs	r1, #64	; 0x40
 800da26:	4618      	mov	r0, r3
 800da28:	f000 fb09 	bl	800e03e <TIM_ITRx_SetConfig>
      break;
 800da2c:	e00c      	b.n	800da48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4619      	mov	r1, r3
 800da38:	4610      	mov	r0, r2
 800da3a:	f000 fb00 	bl	800e03e <TIM_ITRx_SetConfig>
      break;
 800da3e:	e003      	b.n	800da48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	73fb      	strb	r3, [r7, #15]
      break;
 800da44:	e000      	b.n	800da48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800da46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da58:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da62:	b480      	push	{r7}
 800da64:	b083      	sub	sp, #12
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800da6a:	bf00      	nop
 800da6c:	370c      	adds	r7, #12
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da76:	b480      	push	{r7}
 800da78:	b083      	sub	sp, #12
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da7e:	bf00      	nop
 800da80:	370c      	adds	r7, #12
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da8a:	b480      	push	{r7}
 800da8c:	b083      	sub	sp, #12
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da92:	bf00      	nop
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da9e:	b480      	push	{r7}
 800daa0:	b083      	sub	sp, #12
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800daa6:	bf00      	nop
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b083      	sub	sp, #12
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800daba:	bf00      	nop
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
	...

0800dac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dac8:	b480      	push	{r7}
 800daca:	b085      	sub	sp, #20
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a46      	ldr	r2, [pc, #280]	; (800dbf4 <TIM_Base_SetConfig+0x12c>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d013      	beq.n	800db08 <TIM_Base_SetConfig+0x40>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dae6:	d00f      	beq.n	800db08 <TIM_Base_SetConfig+0x40>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a43      	ldr	r2, [pc, #268]	; (800dbf8 <TIM_Base_SetConfig+0x130>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d00b      	beq.n	800db08 <TIM_Base_SetConfig+0x40>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a42      	ldr	r2, [pc, #264]	; (800dbfc <TIM_Base_SetConfig+0x134>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d007      	beq.n	800db08 <TIM_Base_SetConfig+0x40>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a41      	ldr	r2, [pc, #260]	; (800dc00 <TIM_Base_SetConfig+0x138>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d003      	beq.n	800db08 <TIM_Base_SetConfig+0x40>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a40      	ldr	r2, [pc, #256]	; (800dc04 <TIM_Base_SetConfig+0x13c>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d108      	bne.n	800db1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	4313      	orrs	r3, r2
 800db18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a35      	ldr	r2, [pc, #212]	; (800dbf4 <TIM_Base_SetConfig+0x12c>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d02b      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db28:	d027      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4a32      	ldr	r2, [pc, #200]	; (800dbf8 <TIM_Base_SetConfig+0x130>)
 800db2e:	4293      	cmp	r3, r2
 800db30:	d023      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4a31      	ldr	r2, [pc, #196]	; (800dbfc <TIM_Base_SetConfig+0x134>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d01f      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	4a30      	ldr	r2, [pc, #192]	; (800dc00 <TIM_Base_SetConfig+0x138>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d01b      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a2f      	ldr	r2, [pc, #188]	; (800dc04 <TIM_Base_SetConfig+0x13c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d017      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4a2e      	ldr	r2, [pc, #184]	; (800dc08 <TIM_Base_SetConfig+0x140>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d013      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	4a2d      	ldr	r2, [pc, #180]	; (800dc0c <TIM_Base_SetConfig+0x144>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d00f      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a2c      	ldr	r2, [pc, #176]	; (800dc10 <TIM_Base_SetConfig+0x148>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d00b      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a2b      	ldr	r2, [pc, #172]	; (800dc14 <TIM_Base_SetConfig+0x14c>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d007      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4a2a      	ldr	r2, [pc, #168]	; (800dc18 <TIM_Base_SetConfig+0x150>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d003      	beq.n	800db7a <TIM_Base_SetConfig+0xb2>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	4a29      	ldr	r2, [pc, #164]	; (800dc1c <TIM_Base_SetConfig+0x154>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d108      	bne.n	800db8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	4313      	orrs	r3, r2
 800db8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	695b      	ldr	r3, [r3, #20]
 800db96:	4313      	orrs	r3, r2
 800db98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	689a      	ldr	r2, [r3, #8]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a10      	ldr	r2, [pc, #64]	; (800dbf4 <TIM_Base_SetConfig+0x12c>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d003      	beq.n	800dbc0 <TIM_Base_SetConfig+0xf8>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a12      	ldr	r2, [pc, #72]	; (800dc04 <TIM_Base_SetConfig+0x13c>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d103      	bne.n	800dbc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	691a      	ldr	r2, [r3, #16]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	691b      	ldr	r3, [r3, #16]
 800dbd2:	f003 0301 	and.w	r3, r3, #1
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d105      	bne.n	800dbe6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	f023 0201 	bic.w	r2, r3, #1
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	611a      	str	r2, [r3, #16]
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	40010000 	.word	0x40010000
 800dbf8:	40000400 	.word	0x40000400
 800dbfc:	40000800 	.word	0x40000800
 800dc00:	40000c00 	.word	0x40000c00
 800dc04:	40010400 	.word	0x40010400
 800dc08:	40014000 	.word	0x40014000
 800dc0c:	40014400 	.word	0x40014400
 800dc10:	40014800 	.word	0x40014800
 800dc14:	40001800 	.word	0x40001800
 800dc18:	40001c00 	.word	0x40001c00
 800dc1c:	40002000 	.word	0x40002000

0800dc20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b087      	sub	sp, #28
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6a1b      	ldr	r3, [r3, #32]
 800dc2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a1b      	ldr	r3, [r3, #32]
 800dc34:	f023 0201 	bic.w	r2, r3, #1
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f023 0303 	bic.w	r3, r3, #3
 800dc56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	68fa      	ldr	r2, [r7, #12]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f023 0302 	bic.w	r3, r3, #2
 800dc68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	4313      	orrs	r3, r2
 800dc72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a20      	ldr	r2, [pc, #128]	; (800dcf8 <TIM_OC1_SetConfig+0xd8>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d003      	beq.n	800dc84 <TIM_OC1_SetConfig+0x64>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a1f      	ldr	r2, [pc, #124]	; (800dcfc <TIM_OC1_SetConfig+0xdc>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d10c      	bne.n	800dc9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	f023 0308 	bic.w	r3, r3, #8
 800dc8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	697a      	ldr	r2, [r7, #20]
 800dc92:	4313      	orrs	r3, r2
 800dc94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	f023 0304 	bic.w	r3, r3, #4
 800dc9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a15      	ldr	r2, [pc, #84]	; (800dcf8 <TIM_OC1_SetConfig+0xd8>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d003      	beq.n	800dcae <TIM_OC1_SetConfig+0x8e>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a14      	ldr	r2, [pc, #80]	; (800dcfc <TIM_OC1_SetConfig+0xdc>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d111      	bne.n	800dcd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dcbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	695b      	ldr	r3, [r3, #20]
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	699b      	ldr	r3, [r3, #24]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68fa      	ldr	r2, [r7, #12]
 800dcdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	697a      	ldr	r2, [r7, #20]
 800dcea:	621a      	str	r2, [r3, #32]
}
 800dcec:	bf00      	nop
 800dcee:	371c      	adds	r7, #28
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr
 800dcf8:	40010000 	.word	0x40010000
 800dcfc:	40010400 	.word	0x40010400

0800dd00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b087      	sub	sp, #28
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6a1b      	ldr	r3, [r3, #32]
 800dd0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6a1b      	ldr	r3, [r3, #32]
 800dd14:	f023 0210 	bic.w	r2, r3, #16
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dd2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	021b      	lsls	r3, r3, #8
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	f023 0320 	bic.w	r3, r3, #32
 800dd4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	011b      	lsls	r3, r3, #4
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	4313      	orrs	r3, r2
 800dd56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	4a22      	ldr	r2, [pc, #136]	; (800dde4 <TIM_OC2_SetConfig+0xe4>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d003      	beq.n	800dd68 <TIM_OC2_SetConfig+0x68>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4a21      	ldr	r2, [pc, #132]	; (800dde8 <TIM_OC2_SetConfig+0xe8>)
 800dd64:	4293      	cmp	r3, r2
 800dd66:	d10d      	bne.n	800dd84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	011b      	lsls	r3, r3, #4
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	4a17      	ldr	r2, [pc, #92]	; (800dde4 <TIM_OC2_SetConfig+0xe4>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d003      	beq.n	800dd94 <TIM_OC2_SetConfig+0x94>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	4a16      	ldr	r2, [pc, #88]	; (800dde8 <TIM_OC2_SetConfig+0xe8>)
 800dd90:	4293      	cmp	r3, r2
 800dd92:	d113      	bne.n	800ddbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dd9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dda2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	695b      	ldr	r3, [r3, #20]
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	693a      	ldr	r2, [r7, #16]
 800ddac:	4313      	orrs	r3, r2
 800ddae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	699b      	ldr	r3, [r3, #24]
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	4313      	orrs	r3, r2
 800ddba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	693a      	ldr	r2, [r7, #16]
 800ddc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	621a      	str	r2, [r3, #32]
}
 800ddd6:	bf00      	nop
 800ddd8:	371c      	adds	r7, #28
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	40010000 	.word	0x40010000
 800dde8:	40010400 	.word	0x40010400

0800ddec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b087      	sub	sp, #28
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a1b      	ldr	r3, [r3, #32]
 800ddfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6a1b      	ldr	r3, [r3, #32]
 800de00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	69db      	ldr	r3, [r3, #28]
 800de12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f023 0303 	bic.w	r3, r3, #3
 800de22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	021b      	lsls	r3, r3, #8
 800de3c:	697a      	ldr	r2, [r7, #20]
 800de3e:	4313      	orrs	r3, r2
 800de40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4a21      	ldr	r2, [pc, #132]	; (800decc <TIM_OC3_SetConfig+0xe0>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d003      	beq.n	800de52 <TIM_OC3_SetConfig+0x66>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	4a20      	ldr	r2, [pc, #128]	; (800ded0 <TIM_OC3_SetConfig+0xe4>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d10d      	bne.n	800de6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	021b      	lsls	r3, r3, #8
 800de60:	697a      	ldr	r2, [r7, #20]
 800de62:	4313      	orrs	r3, r2
 800de64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800de6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a16      	ldr	r2, [pc, #88]	; (800decc <TIM_OC3_SetConfig+0xe0>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d003      	beq.n	800de7e <TIM_OC3_SetConfig+0x92>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a15      	ldr	r2, [pc, #84]	; (800ded0 <TIM_OC3_SetConfig+0xe4>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d113      	bne.n	800dea6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800de8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	011b      	lsls	r3, r3, #4
 800de94:	693a      	ldr	r2, [r7, #16]
 800de96:	4313      	orrs	r3, r2
 800de98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	699b      	ldr	r3, [r3, #24]
 800de9e:	011b      	lsls	r3, r3, #4
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	4313      	orrs	r3, r2
 800dea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	693a      	ldr	r2, [r7, #16]
 800deaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	621a      	str	r2, [r3, #32]
}
 800dec0:	bf00      	nop
 800dec2:	371c      	adds	r7, #28
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	40010000 	.word	0x40010000
 800ded0:	40010400 	.word	0x40010400

0800ded4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a1b      	ldr	r3, [r3, #32]
 800dee2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6a1b      	ldr	r3, [r3, #32]
 800dee8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	69db      	ldr	r3, [r3, #28]
 800defa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	021b      	lsls	r3, r3, #8
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	4313      	orrs	r3, r2
 800df16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800df18:	693b      	ldr	r3, [r7, #16]
 800df1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800df1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	689b      	ldr	r3, [r3, #8]
 800df24:	031b      	lsls	r3, r3, #12
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	4313      	orrs	r3, r2
 800df2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a12      	ldr	r2, [pc, #72]	; (800df78 <TIM_OC4_SetConfig+0xa4>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d003      	beq.n	800df3c <TIM_OC4_SetConfig+0x68>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	4a11      	ldr	r2, [pc, #68]	; (800df7c <TIM_OC4_SetConfig+0xa8>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d109      	bne.n	800df50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800df42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	695b      	ldr	r3, [r3, #20]
 800df48:	019b      	lsls	r3, r3, #6
 800df4a:	697a      	ldr	r2, [r7, #20]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	697a      	ldr	r2, [r7, #20]
 800df54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	685a      	ldr	r2, [r3, #4]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	621a      	str	r2, [r3, #32]
}
 800df6a:	bf00      	nop
 800df6c:	371c      	adds	r7, #28
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr
 800df76:	bf00      	nop
 800df78:	40010000 	.word	0x40010000
 800df7c:	40010400 	.word	0x40010400

0800df80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df80:	b480      	push	{r7}
 800df82:	b087      	sub	sp, #28
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6a1b      	ldr	r3, [r3, #32]
 800df90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6a1b      	ldr	r3, [r3, #32]
 800df96:	f023 0201 	bic.w	r2, r3, #1
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	699b      	ldr	r3, [r3, #24]
 800dfa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dfaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	011b      	lsls	r3, r3, #4
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	f023 030a 	bic.w	r3, r3, #10
 800dfbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	697a      	ldr	r2, [r7, #20]
 800dfd0:	621a      	str	r2, [r3, #32]
}
 800dfd2:	bf00      	nop
 800dfd4:	371c      	adds	r7, #28
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfdc:	4770      	bx	lr

0800dfde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfde:	b480      	push	{r7}
 800dfe0:	b087      	sub	sp, #28
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	60f8      	str	r0, [r7, #12]
 800dfe6:	60b9      	str	r1, [r7, #8]
 800dfe8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6a1b      	ldr	r3, [r3, #32]
 800dfee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6a1b      	ldr	r3, [r3, #32]
 800dff4:	f023 0210 	bic.w	r2, r3, #16
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	699b      	ldr	r3, [r3, #24]
 800e000:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	031b      	lsls	r3, r3, #12
 800e00e:	693a      	ldr	r2, [r7, #16]
 800e010:	4313      	orrs	r3, r2
 800e012:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e01a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	4313      	orrs	r3, r2
 800e024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	693a      	ldr	r2, [r7, #16]
 800e02a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	621a      	str	r2, [r3, #32]
}
 800e032:	bf00      	nop
 800e034:	371c      	adds	r7, #28
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e03e:	b480      	push	{r7}
 800e040:	b085      	sub	sp, #20
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
 800e046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	4313      	orrs	r3, r2
 800e05c:	f043 0307 	orr.w	r3, r3, #7
 800e060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	609a      	str	r2, [r3, #8]
}
 800e068:	bf00      	nop
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e074:	b480      	push	{r7}
 800e076:	b087      	sub	sp, #28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e08e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	021a      	lsls	r2, r3, #8
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	431a      	orrs	r2, r3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	697a      	ldr	r2, [r7, #20]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	609a      	str	r2, [r3, #8]
}
 800e0a8:	bf00      	nop
 800e0aa:	371c      	adds	r7, #28
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b087      	sub	sp, #28
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	f003 031f 	and.w	r3, r3, #31
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e0cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a1a      	ldr	r2, [r3, #32]
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	43db      	mvns	r3, r3
 800e0d6:	401a      	ands	r2, r3
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6a1a      	ldr	r2, [r3, #32]
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	f003 031f 	and.w	r3, r3, #31
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ec:	431a      	orrs	r2, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	621a      	str	r2, [r3, #32]
}
 800e0f2:	bf00      	nop
 800e0f4:	371c      	adds	r7, #28
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
	...

0800e100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e110:	2b01      	cmp	r3, #1
 800e112:	d101      	bne.n	800e118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e114:	2302      	movs	r3, #2
 800e116:	e05a      	b.n	800e1ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2202      	movs	r2, #2
 800e124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e13e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	4313      	orrs	r3, r2
 800e148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a21      	ldr	r2, [pc, #132]	; (800e1dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d022      	beq.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e164:	d01d      	beq.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a1d      	ldr	r2, [pc, #116]	; (800e1e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d018      	beq.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a1b      	ldr	r2, [pc, #108]	; (800e1e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d013      	beq.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4a1a      	ldr	r2, [pc, #104]	; (800e1e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d00e      	beq.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a18      	ldr	r2, [pc, #96]	; (800e1ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d009      	beq.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a17      	ldr	r2, [pc, #92]	; (800e1f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d004      	beq.n	800e1a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a15      	ldr	r2, [pc, #84]	; (800e1f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d10c      	bne.n	800e1bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	68ba      	ldr	r2, [r7, #8]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2201      	movs	r2, #1
 800e1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	40010000 	.word	0x40010000
 800e1e0:	40000400 	.word	0x40000400
 800e1e4:	40000800 	.word	0x40000800
 800e1e8:	40000c00 	.word	0x40000c00
 800e1ec:	40010400 	.word	0x40010400
 800e1f0:	40014000 	.word	0x40014000
 800e1f4:	40001800 	.word	0x40001800

0800e1f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d101      	bne.n	800e232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e22e:	2301      	movs	r3, #1
 800e230:	e042      	b.n	800e2b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7fb fa2a 	bl	80096a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2224      	movs	r2, #36	; 0x24
 800e250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	68da      	ldr	r2, [r3, #12]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f000 fdcb 	bl	800ee00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	691a      	ldr	r2, [r3, #16]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	695a      	ldr	r2, [r3, #20]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	68da      	ldr	r2, [r3, #12]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2220      	movs	r2, #32
 800e2a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2220      	movs	r2, #32
 800e2ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08c      	sub	sp, #48	; 0x30
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2b20      	cmp	r3, #32
 800e2d8:	d156      	bne.n	800e388 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <HAL_UART_Transmit_DMA+0x26>
 800e2e0:	88fb      	ldrh	r3, [r7, #6]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e04f      	b.n	800e38a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	88fa      	ldrh	r2, [r7, #6]
 800e2f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	88fa      	ldrh	r2, [r7, #6]
 800e2fa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2221      	movs	r2, #33	; 0x21
 800e306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30e:	4a21      	ldr	r2, [pc, #132]	; (800e394 <HAL_UART_Transmit_DMA+0xd4>)
 800e310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e316:	4a20      	ldr	r2, [pc, #128]	; (800e398 <HAL_UART_Transmit_DMA+0xd8>)
 800e318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e31e:	4a1f      	ldr	r2, [pc, #124]	; (800e39c <HAL_UART_Transmit_DMA+0xdc>)
 800e320:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e326:	2200      	movs	r2, #0
 800e328:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800e32a:	f107 0308 	add.w	r3, r7, #8
 800e32e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	6819      	ldr	r1, [r3, #0]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3304      	adds	r3, #4
 800e33e:	461a      	mov	r2, r3
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	f7fc fa95 	bl	800a870 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e34e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3314      	adds	r3, #20
 800e356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e358:	69bb      	ldr	r3, [r7, #24]
 800e35a:	e853 3f00 	ldrex	r3, [r3]
 800e35e:	617b      	str	r3, [r7, #20]
   return(result);
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e366:	62bb      	str	r3, [r7, #40]	; 0x28
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3314      	adds	r3, #20
 800e36e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e370:	627a      	str	r2, [r7, #36]	; 0x24
 800e372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e374:	6a39      	ldr	r1, [r7, #32]
 800e376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e378:	e841 2300 	strex	r3, r2, [r1]
 800e37c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1e5      	bne.n	800e350 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	e000      	b.n	800e38a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800e388:	2302      	movs	r3, #2
  }
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3730      	adds	r7, #48	; 0x30
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	0800e92d 	.word	0x0800e92d
 800e398:	0800e9c7 	.word	0x0800e9c7
 800e39c:	0800e9e3 	.word	0x0800e9e3

0800e3a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b0ba      	sub	sp, #232	; 0xe8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	68db      	ldr	r3, [r3, #12]
 800e3b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3d6:	f003 030f 	and.w	r3, r3, #15
 800e3da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800e3de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10f      	bne.n	800e406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ea:	f003 0320 	and.w	r3, r3, #32
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d009      	beq.n	800e406 <HAL_UART_IRQHandler+0x66>
 800e3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f6:	f003 0320 	and.w	r3, r3, #32
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d003      	beq.n	800e406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 fc40 	bl	800ec84 <UART_Receive_IT>
      return;
 800e404:	e25b      	b.n	800e8be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f000 80de 	beq.w	800e5cc <HAL_UART_IRQHandler+0x22c>
 800e410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e414:	f003 0301 	and.w	r3, r3, #1
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d106      	bne.n	800e42a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e41c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e420:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 80d1 	beq.w	800e5cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e42e:	f003 0301 	and.w	r3, r3, #1
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00b      	beq.n	800e44e <HAL_UART_IRQHandler+0xae>
 800e436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e43a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d005      	beq.n	800e44e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e446:	f043 0201 	orr.w	r2, r3, #1
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e452:	f003 0304 	and.w	r3, r3, #4
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00b      	beq.n	800e472 <HAL_UART_IRQHandler+0xd2>
 800e45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e45e:	f003 0301 	and.w	r3, r3, #1
 800e462:	2b00      	cmp	r3, #0
 800e464:	d005      	beq.n	800e472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e46a:	f043 0202 	orr.w	r2, r3, #2
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e476:	f003 0302 	and.w	r3, r3, #2
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00b      	beq.n	800e496 <HAL_UART_IRQHandler+0xf6>
 800e47e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e482:	f003 0301 	and.w	r3, r3, #1
 800e486:	2b00      	cmp	r3, #0
 800e488:	d005      	beq.n	800e496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e48e:	f043 0204 	orr.w	r2, r3, #4
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e49a:	f003 0308 	and.w	r3, r3, #8
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d011      	beq.n	800e4c6 <HAL_UART_IRQHandler+0x126>
 800e4a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4a6:	f003 0320 	and.w	r3, r3, #32
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d105      	bne.n	800e4ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e4ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4b2:	f003 0301 	and.w	r3, r3, #1
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d005      	beq.n	800e4c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4be:	f043 0208 	orr.w	r2, r3, #8
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 81f2 	beq.w	800e8b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e4d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4d4:	f003 0320 	and.w	r3, r3, #32
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d008      	beq.n	800e4ee <HAL_UART_IRQHandler+0x14e>
 800e4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4e0:	f003 0320 	and.w	r3, r3, #32
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f000 fbcb 	bl	800ec84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	695b      	ldr	r3, [r3, #20]
 800e4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f8:	2b40      	cmp	r3, #64	; 0x40
 800e4fa:	bf0c      	ite	eq
 800e4fc:	2301      	moveq	r3, #1
 800e4fe:	2300      	movne	r3, #0
 800e500:	b2db      	uxtb	r3, r3
 800e502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e50a:	f003 0308 	and.w	r3, r3, #8
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d103      	bne.n	800e51a <HAL_UART_IRQHandler+0x17a>
 800e512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e516:	2b00      	cmp	r3, #0
 800e518:	d04f      	beq.n	800e5ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fad3 	bl	800eac6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	695b      	ldr	r3, [r3, #20]
 800e526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e52a:	2b40      	cmp	r3, #64	; 0x40
 800e52c:	d141      	bne.n	800e5b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	3314      	adds	r3, #20
 800e534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e53c:	e853 3f00 	ldrex	r3, [r3]
 800e540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e54c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3314      	adds	r3, #20
 800e556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e55a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e55e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e56a:	e841 2300 	strex	r3, r2, [r1]
 800e56e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1d9      	bne.n	800e52e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d013      	beq.n	800e5aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e586:	4a7e      	ldr	r2, [pc, #504]	; (800e780 <HAL_UART_IRQHandler+0x3e0>)
 800e588:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fc fa36 	bl	800aa00 <HAL_DMA_Abort_IT>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d016      	beq.n	800e5c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5a8:	e00e      	b.n	800e5c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 f9a8 	bl	800e900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5b0:	e00a      	b.n	800e5c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 f9a4 	bl	800e900 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5b8:	e006      	b.n	800e5c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f9a0 	bl	800e900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800e5c6:	e175      	b.n	800e8b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5c8:	bf00      	nop
    return;
 800e5ca:	e173      	b.n	800e8b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	f040 814f 	bne.w	800e874 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e5d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5da:	f003 0310 	and.w	r3, r3, #16
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f000 8148 	beq.w	800e874 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800e5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5e8:	f003 0310 	and.w	r3, r3, #16
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	f000 8141 	beq.w	800e874 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	60bb      	str	r3, [r7, #8]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	60bb      	str	r3, [r7, #8]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	60bb      	str	r3, [r7, #8]
 800e606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	695b      	ldr	r3, [r3, #20]
 800e60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e612:	2b40      	cmp	r3, #64	; 0x40
 800e614:	f040 80b6 	bne.w	800e784 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 8145 	beq.w	800e8b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e636:	429a      	cmp	r2, r3
 800e638:	f080 813e 	bcs.w	800e8b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e642:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e648:	69db      	ldr	r3, [r3, #28]
 800e64a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e64e:	f000 8088 	beq.w	800e762 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	330c      	adds	r3, #12
 800e658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e660:	e853 3f00 	ldrex	r3, [r3]
 800e664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e66c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	330c      	adds	r3, #12
 800e67a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800e67e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e686:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e68a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e68e:	e841 2300 	strex	r3, r2, [r1]
 800e692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1d9      	bne.n	800e652 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	3314      	adds	r3, #20
 800e6a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6a8:	e853 3f00 	ldrex	r3, [r3]
 800e6ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e6ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6b0:	f023 0301 	bic.w	r3, r3, #1
 800e6b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3314      	adds	r3, #20
 800e6be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e6c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e6ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6ce:	e841 2300 	strex	r3, r2, [r1]
 800e6d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1e1      	bne.n	800e69e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3314      	adds	r3, #20
 800e6e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6e4:	e853 3f00 	ldrex	r3, [r3]
 800e6e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e6ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3314      	adds	r3, #20
 800e6fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e706:	e841 2300 	strex	r3, r2, [r1]
 800e70a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e70c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1e3      	bne.n	800e6da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2220      	movs	r2, #32
 800e716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	330c      	adds	r3, #12
 800e726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e72a:	e853 3f00 	ldrex	r3, [r3]
 800e72e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e732:	f023 0310 	bic.w	r3, r3, #16
 800e736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	330c      	adds	r3, #12
 800e740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e744:	65ba      	str	r2, [r7, #88]	; 0x58
 800e746:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e74a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e74c:	e841 2300 	strex	r3, r2, [r1]
 800e750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1e3      	bne.n	800e720 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fc f8df 	bl	800a920 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2202      	movs	r2, #2
 800e766:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e770:	b29b      	uxth	r3, r3
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	b29b      	uxth	r3, r3
 800e776:	4619      	mov	r1, r3
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f000 f8cb 	bl	800e914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e77e:	e09b      	b.n	800e8b8 <HAL_UART_IRQHandler+0x518>
 800e780:	0800eb8d 	.word	0x0800eb8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e798:	b29b      	uxth	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 808e 	beq.w	800e8bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800e7a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f000 8089 	beq.w	800e8bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	330c      	adds	r3, #12
 800e7b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	330c      	adds	r3, #12
 800e7ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800e7ce:	647a      	str	r2, [r7, #68]	; 0x44
 800e7d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7d6:	e841 2300 	strex	r3, r2, [r1]
 800e7da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1e3      	bne.n	800e7aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	3314      	adds	r3, #20
 800e7e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	e853 3f00 	ldrex	r3, [r3]
 800e7f0:	623b      	str	r3, [r7, #32]
   return(result);
 800e7f2:	6a3b      	ldr	r3, [r7, #32]
 800e7f4:	f023 0301 	bic.w	r3, r3, #1
 800e7f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	3314      	adds	r3, #20
 800e802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e806:	633a      	str	r2, [r7, #48]	; 0x30
 800e808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e80e:	e841 2300 	strex	r3, r2, [r1]
 800e812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1e3      	bne.n	800e7e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2220      	movs	r2, #32
 800e81e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	330c      	adds	r3, #12
 800e82e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	e853 3f00 	ldrex	r3, [r3]
 800e836:	60fb      	str	r3, [r7, #12]
   return(result);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f023 0310 	bic.w	r3, r3, #16
 800e83e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	330c      	adds	r3, #12
 800e848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800e84c:	61fa      	str	r2, [r7, #28]
 800e84e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e850:	69b9      	ldr	r1, [r7, #24]
 800e852:	69fa      	ldr	r2, [r7, #28]
 800e854:	e841 2300 	strex	r3, r2, [r1]
 800e858:	617b      	str	r3, [r7, #20]
   return(result);
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d1e3      	bne.n	800e828 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2202      	movs	r2, #2
 800e864:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e86a:	4619      	mov	r1, r3
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 f851 	bl	800e914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e872:	e023      	b.n	800e8bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d009      	beq.n	800e894 <HAL_UART_IRQHandler+0x4f4>
 800e880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 f991 	bl	800ebb4 <UART_Transmit_IT>
    return;
 800e892:	e014      	b.n	800e8be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00e      	beq.n	800e8be <HAL_UART_IRQHandler+0x51e>
 800e8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d008      	beq.n	800e8be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f9d1 	bl	800ec54 <UART_EndTransmit_IT>
    return;
 800e8b2:	e004      	b.n	800e8be <HAL_UART_IRQHandler+0x51e>
    return;
 800e8b4:	bf00      	nop
 800e8b6:	e002      	b.n	800e8be <HAL_UART_IRQHandler+0x51e>
      return;
 800e8b8:	bf00      	nop
 800e8ba:	e000      	b.n	800e8be <HAL_UART_IRQHandler+0x51e>
      return;
 800e8bc:	bf00      	nop
  }
}
 800e8be:	37e8      	adds	r7, #232	; 0xe8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b083      	sub	sp, #12
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e908:	bf00      	nop
 800e90a:	370c      	adds	r7, #12
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr

0800e914 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e914:	b480      	push	{r7}
 800e916:	b083      	sub	sp, #12
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	460b      	mov	r3, r1
 800e91e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b090      	sub	sp, #64	; 0x40
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e938:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e944:	2b00      	cmp	r3, #0
 800e946:	d137      	bne.n	800e9b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94a:	2200      	movs	r2, #0
 800e94c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	3314      	adds	r3, #20
 800e954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	e853 3f00 	ldrex	r3, [r3]
 800e95c:	623b      	str	r3, [r7, #32]
   return(result);
 800e95e:	6a3b      	ldr	r3, [r7, #32]
 800e960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e964:	63bb      	str	r3, [r7, #56]	; 0x38
 800e966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3314      	adds	r3, #20
 800e96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e96e:	633a      	str	r2, [r7, #48]	; 0x30
 800e970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e976:	e841 2300 	strex	r3, r2, [r1]
 800e97a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1e5      	bne.n	800e94e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	330c      	adds	r3, #12
 800e988:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	e853 3f00 	ldrex	r3, [r3]
 800e990:	60fb      	str	r3, [r7, #12]
   return(result);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e998:	637b      	str	r3, [r7, #52]	; 0x34
 800e99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	330c      	adds	r3, #12
 800e9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9a2:	61fa      	str	r2, [r7, #28]
 800e9a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a6:	69b9      	ldr	r1, [r7, #24]
 800e9a8:	69fa      	ldr	r2, [r7, #28]
 800e9aa:	e841 2300 	strex	r3, r2, [r1]
 800e9ae:	617b      	str	r3, [r7, #20]
   return(result);
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1e5      	bne.n	800e982 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9b6:	e002      	b.n	800e9be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e9b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9ba:	f7ff ff83 	bl	800e8c4 <HAL_UART_TxCpltCallback>
}
 800e9be:	bf00      	nop
 800e9c0:	3740      	adds	r7, #64	; 0x40
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b084      	sub	sp, #16
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	f7ff ff7f 	bl	800e8d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9da:	bf00      	nop
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	695b      	ldr	r3, [r3, #20]
 800e9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9fe:	2b80      	cmp	r3, #128	; 0x80
 800ea00:	bf0c      	ite	eq
 800ea02:	2301      	moveq	r3, #1
 800ea04:	2300      	movne	r3, #0
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	2b21      	cmp	r3, #33	; 0x21
 800ea14:	d108      	bne.n	800ea28 <UART_DMAError+0x46>
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d005      	beq.n	800ea28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ea22:	68b8      	ldr	r0, [r7, #8]
 800ea24:	f000 f827 	bl	800ea76 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	695b      	ldr	r3, [r3, #20]
 800ea2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea32:	2b40      	cmp	r3, #64	; 0x40
 800ea34:	bf0c      	ite	eq
 800ea36:	2301      	moveq	r3, #1
 800ea38:	2300      	movne	r3, #0
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	2b22      	cmp	r3, #34	; 0x22
 800ea48:	d108      	bne.n	800ea5c <UART_DMAError+0x7a>
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d005      	beq.n	800ea5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	2200      	movs	r2, #0
 800ea54:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ea56:	68b8      	ldr	r0, [r7, #8]
 800ea58:	f000 f835 	bl	800eac6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea60:	f043 0210 	orr.w	r2, r3, #16
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea68:	68b8      	ldr	r0, [r7, #8]
 800ea6a:	f7ff ff49 	bl	800e900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea6e:	bf00      	nop
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ea76:	b480      	push	{r7}
 800ea78:	b089      	sub	sp, #36	; 0x24
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	330c      	adds	r3, #12
 800ea84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	e853 3f00 	ldrex	r3, [r3]
 800ea8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ea94:	61fb      	str	r3, [r7, #28]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	330c      	adds	r3, #12
 800ea9c:	69fa      	ldr	r2, [r7, #28]
 800ea9e:	61ba      	str	r2, [r7, #24]
 800eaa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa2:	6979      	ldr	r1, [r7, #20]
 800eaa4:	69ba      	ldr	r2, [r7, #24]
 800eaa6:	e841 2300 	strex	r3, r2, [r1]
 800eaaa:	613b      	str	r3, [r7, #16]
   return(result);
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1e5      	bne.n	800ea7e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2220      	movs	r2, #32
 800eab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800eaba:	bf00      	nop
 800eabc:	3724      	adds	r7, #36	; 0x24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr

0800eac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eac6:	b480      	push	{r7}
 800eac8:	b095      	sub	sp, #84	; 0x54
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	330c      	adds	r3, #12
 800ead4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead8:	e853 3f00 	ldrex	r3, [r3]
 800eadc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	330c      	adds	r3, #12
 800eaec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eaee:	643a      	str	r2, [r7, #64]	; 0x40
 800eaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eaf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaf6:	e841 2300 	strex	r3, r2, [r1]
 800eafa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1e5      	bne.n	800eace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	3314      	adds	r3, #20
 800eb08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	e853 3f00 	ldrex	r3, [r3]
 800eb10:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	f023 0301 	bic.w	r3, r3, #1
 800eb18:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	3314      	adds	r3, #20
 800eb20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb22:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb2a:	e841 2300 	strex	r3, r2, [r1]
 800eb2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d1e5      	bne.n	800eb02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d119      	bne.n	800eb72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	330c      	adds	r3, #12
 800eb44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	e853 3f00 	ldrex	r3, [r3]
 800eb4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	f023 0310 	bic.w	r3, r3, #16
 800eb54:	647b      	str	r3, [r7, #68]	; 0x44
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	330c      	adds	r3, #12
 800eb5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb5e:	61ba      	str	r2, [r7, #24]
 800eb60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb62:	6979      	ldr	r1, [r7, #20]
 800eb64:	69ba      	ldr	r2, [r7, #24]
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	613b      	str	r3, [r7, #16]
   return(result);
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e5      	bne.n	800eb3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2220      	movs	r2, #32
 800eb76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800eb80:	bf00      	nop
 800eb82:	3754      	adds	r7, #84	; 0x54
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff feaa 	bl	800e900 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebac:	bf00      	nop
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}

0800ebb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ebc2:	b2db      	uxtb	r3, r3
 800ebc4:	2b21      	cmp	r3, #33	; 0x21
 800ebc6:	d13e      	bne.n	800ec46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebd0:	d114      	bne.n	800ebfc <UART_Transmit_IT+0x48>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d110      	bne.n	800ebfc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6a1b      	ldr	r3, [r3, #32]
 800ebde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6a1b      	ldr	r3, [r3, #32]
 800ebf4:	1c9a      	adds	r2, r3, #2
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	621a      	str	r2, [r3, #32]
 800ebfa:	e008      	b.n	800ec0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a1b      	ldr	r3, [r3, #32]
 800ec00:	1c59      	adds	r1, r3, #1
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	6211      	str	r1, [r2, #32]
 800ec06:	781a      	ldrb	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	3b01      	subs	r3, #1
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d10f      	bne.n	800ec42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68da      	ldr	r2, [r3, #12]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ec42:	2300      	movs	r3, #0
 800ec44:	e000      	b.n	800ec48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ec46:	2302      	movs	r3, #2
  }
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3714      	adds	r7, #20
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68da      	ldr	r2, [r3, #12]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2220      	movs	r2, #32
 800ec70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff fe25 	bl	800e8c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08c      	sub	sp, #48	; 0x30
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b22      	cmp	r3, #34	; 0x22
 800ec96:	f040 80ae 	bne.w	800edf6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eca2:	d117      	bne.n	800ecd4 <UART_Receive_IT+0x50>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d113      	bne.n	800ecd4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ecac:	2300      	movs	r3, #0
 800ecae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eccc:	1c9a      	adds	r2, r3, #2
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	629a      	str	r2, [r3, #40]	; 0x28
 800ecd2:	e026      	b.n	800ed22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ece6:	d007      	beq.n	800ecf8 <UART_Receive_IT+0x74>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10a      	bne.n	800ed06 <UART_Receive_IT+0x82>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	691b      	ldr	r3, [r3, #16]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d106      	bne.n	800ed06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	b2da      	uxtb	r2, r3
 800ed00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed02:	701a      	strb	r2, [r3, #0]
 800ed04:	e008      	b.n	800ed18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1c:	1c5a      	adds	r2, r3, #1
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	b29b      	uxth	r3, r3
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	4619      	mov	r1, r3
 800ed30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d15d      	bne.n	800edf2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	68da      	ldr	r2, [r3, #12]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f022 0220 	bic.w	r2, r2, #32
 800ed44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	68da      	ldr	r2, [r3, #12]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	695a      	ldr	r2, [r3, #20]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f022 0201 	bic.w	r2, r2, #1
 800ed64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2220      	movs	r2, #32
 800ed6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d135      	bne.n	800ede8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	330c      	adds	r3, #12
 800ed88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	e853 3f00 	ldrex	r3, [r3]
 800ed90:	613b      	str	r3, [r7, #16]
   return(result);
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	f023 0310 	bic.w	r3, r3, #16
 800ed98:	627b      	str	r3, [r7, #36]	; 0x24
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	330c      	adds	r3, #12
 800eda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eda2:	623a      	str	r2, [r7, #32]
 800eda4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda6:	69f9      	ldr	r1, [r7, #28]
 800eda8:	6a3a      	ldr	r2, [r7, #32]
 800edaa:	e841 2300 	strex	r3, r2, [r1]
 800edae:	61bb      	str	r3, [r7, #24]
   return(result);
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d1e5      	bne.n	800ed82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f003 0310 	and.w	r3, r3, #16
 800edc0:	2b10      	cmp	r3, #16
 800edc2:	d10a      	bne.n	800edda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800edc4:	2300      	movs	r3, #0
 800edc6:	60fb      	str	r3, [r7, #12]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	60fb      	str	r3, [r7, #12]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	60fb      	str	r3, [r7, #12]
 800edd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800edde:	4619      	mov	r1, r3
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7ff fd97 	bl	800e914 <HAL_UARTEx_RxEventCallback>
 800ede6:	e002      	b.n	800edee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7ff fd7f 	bl	800e8ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800edee:	2300      	movs	r3, #0
 800edf0:	e002      	b.n	800edf8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	e000      	b.n	800edf8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800edf6:	2302      	movs	r3, #2
  }
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3730      	adds	r7, #48	; 0x30
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee04:	b0c0      	sub	sp, #256	; 0x100
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ee0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ee18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee1c:	68d9      	ldr	r1, [r3, #12]
 800ee1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	ea40 0301 	orr.w	r3, r0, r1
 800ee28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ee2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee2e:	689a      	ldr	r2, [r3, #8]
 800ee30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee34:	691b      	ldr	r3, [r3, #16]
 800ee36:	431a      	orrs	r2, r3
 800ee38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee3c:	695b      	ldr	r3, [r3, #20]
 800ee3e:	431a      	orrs	r2, r3
 800ee40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee44:	69db      	ldr	r3, [r3, #28]
 800ee46:	4313      	orrs	r3, r2
 800ee48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ee4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ee58:	f021 010c 	bic.w	r1, r1, #12
 800ee5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ee66:	430b      	orrs	r3, r1
 800ee68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ee6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	695b      	ldr	r3, [r3, #20]
 800ee72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ee76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee7a:	6999      	ldr	r1, [r3, #24]
 800ee7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	ea40 0301 	orr.w	r3, r0, r1
 800ee86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ee88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4b8f      	ldr	r3, [pc, #572]	; (800f0cc <UART_SetConfig+0x2cc>)
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d005      	beq.n	800eea0 <UART_SetConfig+0xa0>
 800ee94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ee98:	681a      	ldr	r2, [r3, #0]
 800ee9a:	4b8d      	ldr	r3, [pc, #564]	; (800f0d0 <UART_SetConfig+0x2d0>)
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d104      	bne.n	800eeaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800eea0:	f7fe f8d2 	bl	800d048 <HAL_RCC_GetPCLK2Freq>
 800eea4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800eea8:	e003      	b.n	800eeb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800eeaa:	f7fe f8b9 	bl	800d020 <HAL_RCC_GetPCLK1Freq>
 800eeae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eeb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800eeb6:	69db      	ldr	r3, [r3, #28]
 800eeb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eebc:	f040 810c 	bne.w	800f0d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800eec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eec4:	2200      	movs	r2, #0
 800eec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800eeca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800eece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800eed2:	4622      	mov	r2, r4
 800eed4:	462b      	mov	r3, r5
 800eed6:	1891      	adds	r1, r2, r2
 800eed8:	65b9      	str	r1, [r7, #88]	; 0x58
 800eeda:	415b      	adcs	r3, r3
 800eedc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800eee2:	4621      	mov	r1, r4
 800eee4:	eb12 0801 	adds.w	r8, r2, r1
 800eee8:	4629      	mov	r1, r5
 800eeea:	eb43 0901 	adc.w	r9, r3, r1
 800eeee:	f04f 0200 	mov.w	r2, #0
 800eef2:	f04f 0300 	mov.w	r3, #0
 800eef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800eefa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eefe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ef02:	4690      	mov	r8, r2
 800ef04:	4699      	mov	r9, r3
 800ef06:	4623      	mov	r3, r4
 800ef08:	eb18 0303 	adds.w	r3, r8, r3
 800ef0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ef10:	462b      	mov	r3, r5
 800ef12:	eb49 0303 	adc.w	r3, r9, r3
 800ef16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ef1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	2200      	movs	r2, #0
 800ef22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ef26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ef2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ef2e:	460b      	mov	r3, r1
 800ef30:	18db      	adds	r3, r3, r3
 800ef32:	653b      	str	r3, [r7, #80]	; 0x50
 800ef34:	4613      	mov	r3, r2
 800ef36:	eb42 0303 	adc.w	r3, r2, r3
 800ef3a:	657b      	str	r3, [r7, #84]	; 0x54
 800ef3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ef40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ef44:	f7f1 fe90 	bl	8000c68 <__aeabi_uldivmod>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4b61      	ldr	r3, [pc, #388]	; (800f0d4 <UART_SetConfig+0x2d4>)
 800ef4e:	fba3 2302 	umull	r2, r3, r3, r2
 800ef52:	095b      	lsrs	r3, r3, #5
 800ef54:	011c      	lsls	r4, r3, #4
 800ef56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ef64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ef68:	4642      	mov	r2, r8
 800ef6a:	464b      	mov	r3, r9
 800ef6c:	1891      	adds	r1, r2, r2
 800ef6e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ef70:	415b      	adcs	r3, r3
 800ef72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef78:	4641      	mov	r1, r8
 800ef7a:	eb12 0a01 	adds.w	sl, r2, r1
 800ef7e:	4649      	mov	r1, r9
 800ef80:	eb43 0b01 	adc.w	fp, r3, r1
 800ef84:	f04f 0200 	mov.w	r2, #0
 800ef88:	f04f 0300 	mov.w	r3, #0
 800ef8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ef90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ef94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ef98:	4692      	mov	sl, r2
 800ef9a:	469b      	mov	fp, r3
 800ef9c:	4643      	mov	r3, r8
 800ef9e:	eb1a 0303 	adds.w	r3, sl, r3
 800efa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800efa6:	464b      	mov	r3, r9
 800efa8:	eb4b 0303 	adc.w	r3, fp, r3
 800efac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800efb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800efbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800efc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800efc4:	460b      	mov	r3, r1
 800efc6:	18db      	adds	r3, r3, r3
 800efc8:	643b      	str	r3, [r7, #64]	; 0x40
 800efca:	4613      	mov	r3, r2
 800efcc:	eb42 0303 	adc.w	r3, r2, r3
 800efd0:	647b      	str	r3, [r7, #68]	; 0x44
 800efd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800efd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800efda:	f7f1 fe45 	bl	8000c68 <__aeabi_uldivmod>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4611      	mov	r1, r2
 800efe4:	4b3b      	ldr	r3, [pc, #236]	; (800f0d4 <UART_SetConfig+0x2d4>)
 800efe6:	fba3 2301 	umull	r2, r3, r3, r1
 800efea:	095b      	lsrs	r3, r3, #5
 800efec:	2264      	movs	r2, #100	; 0x64
 800efee:	fb02 f303 	mul.w	r3, r2, r3
 800eff2:	1acb      	subs	r3, r1, r3
 800eff4:	00db      	lsls	r3, r3, #3
 800eff6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800effa:	4b36      	ldr	r3, [pc, #216]	; (800f0d4 <UART_SetConfig+0x2d4>)
 800effc:	fba3 2302 	umull	r2, r3, r3, r2
 800f000:	095b      	lsrs	r3, r3, #5
 800f002:	005b      	lsls	r3, r3, #1
 800f004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f008:	441c      	add	r4, r3
 800f00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f00e:	2200      	movs	r2, #0
 800f010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f014:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800f01c:	4642      	mov	r2, r8
 800f01e:	464b      	mov	r3, r9
 800f020:	1891      	adds	r1, r2, r2
 800f022:	63b9      	str	r1, [r7, #56]	; 0x38
 800f024:	415b      	adcs	r3, r3
 800f026:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800f02c:	4641      	mov	r1, r8
 800f02e:	1851      	adds	r1, r2, r1
 800f030:	6339      	str	r1, [r7, #48]	; 0x30
 800f032:	4649      	mov	r1, r9
 800f034:	414b      	adcs	r3, r1
 800f036:	637b      	str	r3, [r7, #52]	; 0x34
 800f038:	f04f 0200 	mov.w	r2, #0
 800f03c:	f04f 0300 	mov.w	r3, #0
 800f040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800f044:	4659      	mov	r1, fp
 800f046:	00cb      	lsls	r3, r1, #3
 800f048:	4651      	mov	r1, sl
 800f04a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f04e:	4651      	mov	r1, sl
 800f050:	00ca      	lsls	r2, r1, #3
 800f052:	4610      	mov	r0, r2
 800f054:	4619      	mov	r1, r3
 800f056:	4603      	mov	r3, r0
 800f058:	4642      	mov	r2, r8
 800f05a:	189b      	adds	r3, r3, r2
 800f05c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f060:	464b      	mov	r3, r9
 800f062:	460a      	mov	r2, r1
 800f064:	eb42 0303 	adc.w	r3, r2, r3
 800f068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	2200      	movs	r2, #0
 800f074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f078:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800f07c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f080:	460b      	mov	r3, r1
 800f082:	18db      	adds	r3, r3, r3
 800f084:	62bb      	str	r3, [r7, #40]	; 0x28
 800f086:	4613      	mov	r3, r2
 800f088:	eb42 0303 	adc.w	r3, r2, r3
 800f08c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f08e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800f096:	f7f1 fde7 	bl	8000c68 <__aeabi_uldivmod>
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4b0d      	ldr	r3, [pc, #52]	; (800f0d4 <UART_SetConfig+0x2d4>)
 800f0a0:	fba3 1302 	umull	r1, r3, r3, r2
 800f0a4:	095b      	lsrs	r3, r3, #5
 800f0a6:	2164      	movs	r1, #100	; 0x64
 800f0a8:	fb01 f303 	mul.w	r3, r1, r3
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	3332      	adds	r3, #50	; 0x32
 800f0b2:	4a08      	ldr	r2, [pc, #32]	; (800f0d4 <UART_SetConfig+0x2d4>)
 800f0b4:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b8:	095b      	lsrs	r3, r3, #5
 800f0ba:	f003 0207 	and.w	r2, r3, #7
 800f0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4422      	add	r2, r4
 800f0c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f0c8:	e106      	b.n	800f2d8 <UART_SetConfig+0x4d8>
 800f0ca:	bf00      	nop
 800f0cc:	40011000 	.word	0x40011000
 800f0d0:	40011400 	.word	0x40011400
 800f0d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f0d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f0dc:	2200      	movs	r2, #0
 800f0de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f0e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800f0e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800f0ea:	4642      	mov	r2, r8
 800f0ec:	464b      	mov	r3, r9
 800f0ee:	1891      	adds	r1, r2, r2
 800f0f0:	6239      	str	r1, [r7, #32]
 800f0f2:	415b      	adcs	r3, r3
 800f0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800f0f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f0fa:	4641      	mov	r1, r8
 800f0fc:	1854      	adds	r4, r2, r1
 800f0fe:	4649      	mov	r1, r9
 800f100:	eb43 0501 	adc.w	r5, r3, r1
 800f104:	f04f 0200 	mov.w	r2, #0
 800f108:	f04f 0300 	mov.w	r3, #0
 800f10c:	00eb      	lsls	r3, r5, #3
 800f10e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f112:	00e2      	lsls	r2, r4, #3
 800f114:	4614      	mov	r4, r2
 800f116:	461d      	mov	r5, r3
 800f118:	4643      	mov	r3, r8
 800f11a:	18e3      	adds	r3, r4, r3
 800f11c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f120:	464b      	mov	r3, r9
 800f122:	eb45 0303 	adc.w	r3, r5, r3
 800f126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f13a:	f04f 0200 	mov.w	r2, #0
 800f13e:	f04f 0300 	mov.w	r3, #0
 800f142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800f146:	4629      	mov	r1, r5
 800f148:	008b      	lsls	r3, r1, #2
 800f14a:	4621      	mov	r1, r4
 800f14c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f150:	4621      	mov	r1, r4
 800f152:	008a      	lsls	r2, r1, #2
 800f154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800f158:	f7f1 fd86 	bl	8000c68 <__aeabi_uldivmod>
 800f15c:	4602      	mov	r2, r0
 800f15e:	460b      	mov	r3, r1
 800f160:	4b60      	ldr	r3, [pc, #384]	; (800f2e4 <UART_SetConfig+0x4e4>)
 800f162:	fba3 2302 	umull	r2, r3, r3, r2
 800f166:	095b      	lsrs	r3, r3, #5
 800f168:	011c      	lsls	r4, r3, #4
 800f16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f16e:	2200      	movs	r2, #0
 800f170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f174:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800f17c:	4642      	mov	r2, r8
 800f17e:	464b      	mov	r3, r9
 800f180:	1891      	adds	r1, r2, r2
 800f182:	61b9      	str	r1, [r7, #24]
 800f184:	415b      	adcs	r3, r3
 800f186:	61fb      	str	r3, [r7, #28]
 800f188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f18c:	4641      	mov	r1, r8
 800f18e:	1851      	adds	r1, r2, r1
 800f190:	6139      	str	r1, [r7, #16]
 800f192:	4649      	mov	r1, r9
 800f194:	414b      	adcs	r3, r1
 800f196:	617b      	str	r3, [r7, #20]
 800f198:	f04f 0200 	mov.w	r2, #0
 800f19c:	f04f 0300 	mov.w	r3, #0
 800f1a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f1a4:	4659      	mov	r1, fp
 800f1a6:	00cb      	lsls	r3, r1, #3
 800f1a8:	4651      	mov	r1, sl
 800f1aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f1ae:	4651      	mov	r1, sl
 800f1b0:	00ca      	lsls	r2, r1, #3
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	4642      	mov	r2, r8
 800f1ba:	189b      	adds	r3, r3, r2
 800f1bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f1c0:	464b      	mov	r3, r9
 800f1c2:	460a      	mov	r2, r1
 800f1c4:	eb42 0303 	adc.w	r3, r2, r3
 800f1c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800f1d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800f1d8:	f04f 0200 	mov.w	r2, #0
 800f1dc:	f04f 0300 	mov.w	r3, #0
 800f1e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800f1e4:	4649      	mov	r1, r9
 800f1e6:	008b      	lsls	r3, r1, #2
 800f1e8:	4641      	mov	r1, r8
 800f1ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f1ee:	4641      	mov	r1, r8
 800f1f0:	008a      	lsls	r2, r1, #2
 800f1f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800f1f6:	f7f1 fd37 	bl	8000c68 <__aeabi_uldivmod>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	4611      	mov	r1, r2
 800f200:	4b38      	ldr	r3, [pc, #224]	; (800f2e4 <UART_SetConfig+0x4e4>)
 800f202:	fba3 2301 	umull	r2, r3, r3, r1
 800f206:	095b      	lsrs	r3, r3, #5
 800f208:	2264      	movs	r2, #100	; 0x64
 800f20a:	fb02 f303 	mul.w	r3, r2, r3
 800f20e:	1acb      	subs	r3, r1, r3
 800f210:	011b      	lsls	r3, r3, #4
 800f212:	3332      	adds	r3, #50	; 0x32
 800f214:	4a33      	ldr	r2, [pc, #204]	; (800f2e4 <UART_SetConfig+0x4e4>)
 800f216:	fba2 2303 	umull	r2, r3, r2, r3
 800f21a:	095b      	lsrs	r3, r3, #5
 800f21c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f220:	441c      	add	r4, r3
 800f222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f226:	2200      	movs	r2, #0
 800f228:	673b      	str	r3, [r7, #112]	; 0x70
 800f22a:	677a      	str	r2, [r7, #116]	; 0x74
 800f22c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f230:	4642      	mov	r2, r8
 800f232:	464b      	mov	r3, r9
 800f234:	1891      	adds	r1, r2, r2
 800f236:	60b9      	str	r1, [r7, #8]
 800f238:	415b      	adcs	r3, r3
 800f23a:	60fb      	str	r3, [r7, #12]
 800f23c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f240:	4641      	mov	r1, r8
 800f242:	1851      	adds	r1, r2, r1
 800f244:	6039      	str	r1, [r7, #0]
 800f246:	4649      	mov	r1, r9
 800f248:	414b      	adcs	r3, r1
 800f24a:	607b      	str	r3, [r7, #4]
 800f24c:	f04f 0200 	mov.w	r2, #0
 800f250:	f04f 0300 	mov.w	r3, #0
 800f254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f258:	4659      	mov	r1, fp
 800f25a:	00cb      	lsls	r3, r1, #3
 800f25c:	4651      	mov	r1, sl
 800f25e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f262:	4651      	mov	r1, sl
 800f264:	00ca      	lsls	r2, r1, #3
 800f266:	4610      	mov	r0, r2
 800f268:	4619      	mov	r1, r3
 800f26a:	4603      	mov	r3, r0
 800f26c:	4642      	mov	r2, r8
 800f26e:	189b      	adds	r3, r3, r2
 800f270:	66bb      	str	r3, [r7, #104]	; 0x68
 800f272:	464b      	mov	r3, r9
 800f274:	460a      	mov	r2, r1
 800f276:	eb42 0303 	adc.w	r3, r2, r3
 800f27a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	663b      	str	r3, [r7, #96]	; 0x60
 800f286:	667a      	str	r2, [r7, #100]	; 0x64
 800f288:	f04f 0200 	mov.w	r2, #0
 800f28c:	f04f 0300 	mov.w	r3, #0
 800f290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800f294:	4649      	mov	r1, r9
 800f296:	008b      	lsls	r3, r1, #2
 800f298:	4641      	mov	r1, r8
 800f29a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f29e:	4641      	mov	r1, r8
 800f2a0:	008a      	lsls	r2, r1, #2
 800f2a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800f2a6:	f7f1 fcdf 	bl	8000c68 <__aeabi_uldivmod>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4b0d      	ldr	r3, [pc, #52]	; (800f2e4 <UART_SetConfig+0x4e4>)
 800f2b0:	fba3 1302 	umull	r1, r3, r3, r2
 800f2b4:	095b      	lsrs	r3, r3, #5
 800f2b6:	2164      	movs	r1, #100	; 0x64
 800f2b8:	fb01 f303 	mul.w	r3, r1, r3
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	011b      	lsls	r3, r3, #4
 800f2c0:	3332      	adds	r3, #50	; 0x32
 800f2c2:	4a08      	ldr	r2, [pc, #32]	; (800f2e4 <UART_SetConfig+0x4e4>)
 800f2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c8:	095b      	lsrs	r3, r3, #5
 800f2ca:	f003 020f 	and.w	r2, r3, #15
 800f2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4422      	add	r2, r4
 800f2d6:	609a      	str	r2, [r3, #8]
}
 800f2d8:	bf00      	nop
 800f2da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f2e4:	51eb851f 	.word	0x51eb851f

0800f2e8 <LL_GPIO_SetPinMode>:
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b08b      	sub	sp, #44	; 0x2c
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	fa93 f3a3 	rbit	r3, r3
 800f302:	613b      	str	r3, [r7, #16]
  return result;
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800f30e:	2320      	movs	r3, #32
 800f310:	e003      	b.n	800f31a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	fab3 f383 	clz	r3, r3
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	2103      	movs	r1, #3
 800f31e:	fa01 f303 	lsl.w	r3, r1, r3
 800f322:	43db      	mvns	r3, r3
 800f324:	401a      	ands	r2, r3
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	fa93 f3a3 	rbit	r3, r3
 800f330:	61fb      	str	r3, [r7, #28]
  return result;
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d101      	bne.n	800f340 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800f33c:	2320      	movs	r3, #32
 800f33e:	e003      	b.n	800f348 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f342:	fab3 f383 	clz	r3, r3
 800f346:	b2db      	uxtb	r3, r3
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	6879      	ldr	r1, [r7, #4]
 800f34c:	fa01 f303 	lsl.w	r3, r1, r3
 800f350:	431a      	orrs	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	601a      	str	r2, [r3, #0]
}
 800f356:	bf00      	nop
 800f358:	372c      	adds	r7, #44	; 0x2c
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <LL_GPIO_SetPinOutputType>:
{
 800f362:	b480      	push	{r7}
 800f364:	b085      	sub	sp, #20
 800f366:	af00      	add	r7, sp, #0
 800f368:	60f8      	str	r0, [r7, #12]
 800f36a:	60b9      	str	r1, [r7, #8]
 800f36c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	685a      	ldr	r2, [r3, #4]
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	43db      	mvns	r3, r3
 800f376:	401a      	ands	r2, r3
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	6879      	ldr	r1, [r7, #4]
 800f37c:	fb01 f303 	mul.w	r3, r1, r3
 800f380:	431a      	orrs	r2, r3
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	605a      	str	r2, [r3, #4]
}
 800f386:	bf00      	nop
 800f388:	3714      	adds	r7, #20
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr

0800f392 <LL_GPIO_SetPinSpeed>:
{
 800f392:	b480      	push	{r7}
 800f394:	b08b      	sub	sp, #44	; 0x2c
 800f396:	af00      	add	r7, sp, #0
 800f398:	60f8      	str	r0, [r7, #12]
 800f39a:	60b9      	str	r1, [r7, #8]
 800f39c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	689a      	ldr	r2, [r3, #8]
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	fa93 f3a3 	rbit	r3, r3
 800f3ac:	613b      	str	r3, [r7, #16]
  return result;
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800f3b8:	2320      	movs	r3, #32
 800f3ba:	e003      	b.n	800f3c4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	fab3 f383 	clz	r3, r3
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	2103      	movs	r1, #3
 800f3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3cc:	43db      	mvns	r3, r3
 800f3ce:	401a      	ands	r2, r3
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3d4:	6a3b      	ldr	r3, [r7, #32]
 800f3d6:	fa93 f3a3 	rbit	r3, r3
 800f3da:	61fb      	str	r3, [r7, #28]
  return result;
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d101      	bne.n	800f3ea <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800f3e6:	2320      	movs	r3, #32
 800f3e8:	e003      	b.n	800f3f2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800f3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ec:	fab3 f383 	clz	r3, r3
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	6879      	ldr	r1, [r7, #4]
 800f3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800f3fa:	431a      	orrs	r2, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	609a      	str	r2, [r3, #8]
}
 800f400:	bf00      	nop
 800f402:	372c      	adds	r7, #44	; 0x2c
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <LL_GPIO_SetPinPull>:
{
 800f40c:	b480      	push	{r7}
 800f40e:	b08b      	sub	sp, #44	; 0x2c
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	68da      	ldr	r2, [r3, #12]
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	fa93 f3a3 	rbit	r3, r3
 800f426:	613b      	str	r3, [r7, #16]
  return result;
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800f432:	2320      	movs	r3, #32
 800f434:	e003      	b.n	800f43e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	fab3 f383 	clz	r3, r3
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	005b      	lsls	r3, r3, #1
 800f440:	2103      	movs	r1, #3
 800f442:	fa01 f303 	lsl.w	r3, r1, r3
 800f446:	43db      	mvns	r3, r3
 800f448:	401a      	ands	r2, r3
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	fa93 f3a3 	rbit	r3, r3
 800f454:	61fb      	str	r3, [r7, #28]
  return result;
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d101      	bne.n	800f464 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800f460:	2320      	movs	r3, #32
 800f462:	e003      	b.n	800f46c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800f464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f466:	fab3 f383 	clz	r3, r3
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	6879      	ldr	r1, [r7, #4]
 800f470:	fa01 f303 	lsl.w	r3, r1, r3
 800f474:	431a      	orrs	r2, r3
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	60da      	str	r2, [r3, #12]
}
 800f47a:	bf00      	nop
 800f47c:	372c      	adds	r7, #44	; 0x2c
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <LL_GPIO_SetAFPin_0_7>:
{
 800f486:	b480      	push	{r7}
 800f488:	b08b      	sub	sp, #44	; 0x2c
 800f48a:	af00      	add	r7, sp, #0
 800f48c:	60f8      	str	r0, [r7, #12]
 800f48e:	60b9      	str	r1, [r7, #8]
 800f490:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6a1a      	ldr	r2, [r3, #32]
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	fa93 f3a3 	rbit	r3, r3
 800f4a0:	613b      	str	r3, [r7, #16]
  return result;
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d101      	bne.n	800f4b0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800f4ac:	2320      	movs	r3, #32
 800f4ae:	e003      	b.n	800f4b8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	fab3 f383 	clz	r3, r3
 800f4b6:	b2db      	uxtb	r3, r3
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	210f      	movs	r1, #15
 800f4bc:	fa01 f303 	lsl.w	r3, r1, r3
 800f4c0:	43db      	mvns	r3, r3
 800f4c2:	401a      	ands	r2, r3
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f4c8:	6a3b      	ldr	r3, [r7, #32]
 800f4ca:	fa93 f3a3 	rbit	r3, r3
 800f4ce:	61fb      	str	r3, [r7, #28]
  return result;
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d101      	bne.n	800f4de <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800f4da:	2320      	movs	r3, #32
 800f4dc:	e003      	b.n	800f4e6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800f4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e0:	fab3 f383 	clz	r3, r3
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800f4ee:	431a      	orrs	r2, r3
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	621a      	str	r2, [r3, #32]
}
 800f4f4:	bf00      	nop
 800f4f6:	372c      	adds	r7, #44	; 0x2c
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <LL_GPIO_SetAFPin_8_15>:
{
 800f500:	b480      	push	{r7}
 800f502:	b08b      	sub	sp, #44	; 0x2c
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	60b9      	str	r1, [r7, #8]
 800f50a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	0a1b      	lsrs	r3, r3, #8
 800f514:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	fa93 f3a3 	rbit	r3, r3
 800f51c:	613b      	str	r3, [r7, #16]
  return result;
 800f51e:	693b      	ldr	r3, [r7, #16]
 800f520:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800f528:	2320      	movs	r3, #32
 800f52a:	e003      	b.n	800f534 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	fab3 f383 	clz	r3, r3
 800f532:	b2db      	uxtb	r3, r3
 800f534:	009b      	lsls	r3, r3, #2
 800f536:	210f      	movs	r1, #15
 800f538:	fa01 f303 	lsl.w	r3, r1, r3
 800f53c:	43db      	mvns	r3, r3
 800f53e:	401a      	ands	r2, r3
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	0a1b      	lsrs	r3, r3, #8
 800f544:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f546:	6a3b      	ldr	r3, [r7, #32]
 800f548:	fa93 f3a3 	rbit	r3, r3
 800f54c:	61fb      	str	r3, [r7, #28]
  return result;
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800f552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f554:	2b00      	cmp	r3, #0
 800f556:	d101      	bne.n	800f55c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800f558:	2320      	movs	r3, #32
 800f55a:	e003      	b.n	800f564 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	fab3 f383 	clz	r3, r3
 800f562:	b2db      	uxtb	r3, r3
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	fa01 f303 	lsl.w	r3, r1, r3
 800f56c:	431a      	orrs	r2, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f572:	bf00      	nop
 800f574:	372c      	adds	r7, #44	; 0x2c
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b08a      	sub	sp, #40	; 0x28
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800f588:	2300      	movs	r3, #0
 800f58a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 800f58c:	2300      	movs	r3, #0
 800f58e:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	fa93 f3a3 	rbit	r3, r3
 800f59c:	617b      	str	r3, [r7, #20]
  return result;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d101      	bne.n	800f5ac <LL_GPIO_Init+0x2e>
    return 32U;
 800f5a8:	2320      	movs	r3, #32
 800f5aa:	e003      	b.n	800f5b4 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800f5ac:	69fb      	ldr	r3, [r7, #28]
 800f5ae:	fab3 f383 	clz	r3, r3
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f5b6:	e057      	b.n	800f668 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	2101      	movs	r1, #1
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800f5c4:	4013      	ands	r3, r2
 800f5c6:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800f5c8:	6a3b      	ldr	r3, [r7, #32]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d049      	beq.n	800f662 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d003      	beq.n	800f5de <LL_GPIO_Init+0x60>
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	2b02      	cmp	r3, #2
 800f5dc:	d10d      	bne.n	800f5fa <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	689b      	ldr	r3, [r3, #8]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	6a39      	ldr	r1, [r7, #32]
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7ff fed3 	bl	800f392 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	6a39      	ldr	r1, [r7, #32]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7ff feb4 	bl	800f362 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	461a      	mov	r2, r3
 800f600:	6a39      	ldr	r1, [r7, #32]
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f7ff ff02 	bl	800f40c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	d121      	bne.n	800f654 <LL_GPIO_Init+0xd6>
 800f610:	6a3b      	ldr	r3, [r7, #32]
 800f612:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	fa93 f3a3 	rbit	r3, r3
 800f61a:	60bb      	str	r3, [r7, #8]
  return result;
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d101      	bne.n	800f62a <LL_GPIO_Init+0xac>
    return 32U;
 800f626:	2320      	movs	r3, #32
 800f628:	e003      	b.n	800f632 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	fab3 f383 	clz	r3, r3
 800f630:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800f632:	2b07      	cmp	r3, #7
 800f634:	d807      	bhi.n	800f646 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	695b      	ldr	r3, [r3, #20]
 800f63a:	461a      	mov	r2, r3
 800f63c:	6a39      	ldr	r1, [r7, #32]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7ff ff21 	bl	800f486 <LL_GPIO_SetAFPin_0_7>
 800f644:	e006      	b.n	800f654 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	695b      	ldr	r3, [r3, #20]
 800f64a:	461a      	mov	r2, r3
 800f64c:	6a39      	ldr	r1, [r7, #32]
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7ff ff56 	bl	800f500 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	461a      	mov	r2, r3
 800f65a:	6a39      	ldr	r1, [r7, #32]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff fe43 	bl	800f2e8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800f662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f664:	3301      	adds	r3, #1
 800f666:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66e:	fa22 f303 	lsr.w	r3, r2, r3
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1a0      	bne.n	800f5b8 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3728      	adds	r7, #40	; 0x28
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <LL_SPI_IsEnabled>:
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f690:	2b40      	cmp	r3, #64	; 0x40
 800f692:	d101      	bne.n	800f698 <LL_SPI_IsEnabled+0x18>
 800f694:	2301      	movs	r3, #1
 800f696:	e000      	b.n	800f69a <LL_SPI_IsEnabled+0x1a>
 800f698:	2300      	movs	r3, #0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	370c      	adds	r7, #12
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <LL_SPI_SetCRCPolynomial>:
{
 800f6a6:	b480      	push	{r7}
 800f6a8:	b083      	sub	sp, #12
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
 800f6ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	611a      	str	r2, [r3, #16]
}
 800f6ba:	bf00      	nop
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr

0800f6c6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b084      	sub	sp, #16
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
 800f6ce:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f7ff ffd3 	bl	800f680 <LL_SPI_IsEnabled>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d139      	bne.n	800f754 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f6e8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	6811      	ldr	r1, [r2, #0]
 800f6f0:	683a      	ldr	r2, [r7, #0]
 800f6f2:	6852      	ldr	r2, [r2, #4]
 800f6f4:	4311      	orrs	r1, r2
 800f6f6:	683a      	ldr	r2, [r7, #0]
 800f6f8:	6892      	ldr	r2, [r2, #8]
 800f6fa:	4311      	orrs	r1, r2
 800f6fc:	683a      	ldr	r2, [r7, #0]
 800f6fe:	68d2      	ldr	r2, [r2, #12]
 800f700:	4311      	orrs	r1, r2
 800f702:	683a      	ldr	r2, [r7, #0]
 800f704:	6912      	ldr	r2, [r2, #16]
 800f706:	4311      	orrs	r1, r2
 800f708:	683a      	ldr	r2, [r7, #0]
 800f70a:	6952      	ldr	r2, [r2, #20]
 800f70c:	4311      	orrs	r1, r2
 800f70e:	683a      	ldr	r2, [r7, #0]
 800f710:	6992      	ldr	r2, [r2, #24]
 800f712:	4311      	orrs	r1, r2
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	69d2      	ldr	r2, [r2, #28]
 800f718:	4311      	orrs	r1, r2
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	6a12      	ldr	r2, [r2, #32]
 800f71e:	430a      	orrs	r2, r1
 800f720:	431a      	orrs	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	f023 0204 	bic.w	r2, r3, #4
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	695b      	ldr	r3, [r3, #20]
 800f732:	0c1b      	lsrs	r3, r3, #16
 800f734:	431a      	orrs	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	6a1b      	ldr	r3, [r3, #32]
 800f73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f742:	d105      	bne.n	800f750 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f748:	4619      	mov	r1, r3
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f7ff ffab 	bl	800f6a6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800f750:	2300      	movs	r3, #0
 800f752:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	69db      	ldr	r3, [r3, #28]
 800f758:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	61da      	str	r2, [r3, #28]
  return status;
 800f760:	7bfb      	ldrb	r3, [r7, #15]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f76a:	b084      	sub	sp, #16
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	f107 001c 	add.w	r0, r7, #28
 800f778:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f77c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f780:	2b01      	cmp	r3, #1
 800f782:	d123      	bne.n	800f7cc <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f7ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d105      	bne.n	800f7c0 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f001 fae3 	bl	8010d8c <USB_CoreReset>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	73fb      	strb	r3, [r7, #15]
 800f7ca:	e01b      	b.n	800f804 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f001 fad7 	bl	8010d8c <USB_CoreReset>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f7e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d106      	bne.n	800f7f8 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	639a      	str	r2, [r3, #56]	; 0x38
 800f7f6:	e005      	b.n	800f804 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f804:	7fbb      	ldrb	r3, [r7, #30]
 800f806:	2b01      	cmp	r3, #1
 800f808:	d10b      	bne.n	800f822 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	f043 0206 	orr.w	r2, r3, #6
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	f043 0220 	orr.w	r2, r3, #32
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f822:	7bfb      	ldrb	r3, [r7, #15]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f82e:	b004      	add	sp, #16
 800f830:	4770      	bx	lr
	...

0800f834 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f834:	b480      	push	{r7}
 800f836:	b087      	sub	sp, #28
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	4613      	mov	r3, r2
 800f840:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f842:	79fb      	ldrb	r3, [r7, #7]
 800f844:	2b02      	cmp	r3, #2
 800f846:	d165      	bne.n	800f914 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	4a41      	ldr	r2, [pc, #260]	; (800f950 <USB_SetTurnaroundTime+0x11c>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d906      	bls.n	800f85e <USB_SetTurnaroundTime+0x2a>
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	4a40      	ldr	r2, [pc, #256]	; (800f954 <USB_SetTurnaroundTime+0x120>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d202      	bcs.n	800f85e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f858:	230f      	movs	r3, #15
 800f85a:	617b      	str	r3, [r7, #20]
 800f85c:	e062      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	4a3c      	ldr	r2, [pc, #240]	; (800f954 <USB_SetTurnaroundTime+0x120>)
 800f862:	4293      	cmp	r3, r2
 800f864:	d306      	bcc.n	800f874 <USB_SetTurnaroundTime+0x40>
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	4a3b      	ldr	r2, [pc, #236]	; (800f958 <USB_SetTurnaroundTime+0x124>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d202      	bcs.n	800f874 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f86e:	230e      	movs	r3, #14
 800f870:	617b      	str	r3, [r7, #20]
 800f872:	e057      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	4a38      	ldr	r2, [pc, #224]	; (800f958 <USB_SetTurnaroundTime+0x124>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d306      	bcc.n	800f88a <USB_SetTurnaroundTime+0x56>
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	4a37      	ldr	r2, [pc, #220]	; (800f95c <USB_SetTurnaroundTime+0x128>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d202      	bcs.n	800f88a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f884:	230d      	movs	r3, #13
 800f886:	617b      	str	r3, [r7, #20]
 800f888:	e04c      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	4a33      	ldr	r2, [pc, #204]	; (800f95c <USB_SetTurnaroundTime+0x128>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d306      	bcc.n	800f8a0 <USB_SetTurnaroundTime+0x6c>
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	4a32      	ldr	r2, [pc, #200]	; (800f960 <USB_SetTurnaroundTime+0x12c>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d802      	bhi.n	800f8a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f89a:	230c      	movs	r3, #12
 800f89c:	617b      	str	r3, [r7, #20]
 800f89e:	e041      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	4a2f      	ldr	r2, [pc, #188]	; (800f960 <USB_SetTurnaroundTime+0x12c>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d906      	bls.n	800f8b6 <USB_SetTurnaroundTime+0x82>
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	4a2e      	ldr	r2, [pc, #184]	; (800f964 <USB_SetTurnaroundTime+0x130>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d802      	bhi.n	800f8b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f8b0:	230b      	movs	r3, #11
 800f8b2:	617b      	str	r3, [r7, #20]
 800f8b4:	e036      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	4a2a      	ldr	r2, [pc, #168]	; (800f964 <USB_SetTurnaroundTime+0x130>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d906      	bls.n	800f8cc <USB_SetTurnaroundTime+0x98>
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	4a29      	ldr	r2, [pc, #164]	; (800f968 <USB_SetTurnaroundTime+0x134>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d802      	bhi.n	800f8cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f8c6:	230a      	movs	r3, #10
 800f8c8:	617b      	str	r3, [r7, #20]
 800f8ca:	e02b      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	4a26      	ldr	r2, [pc, #152]	; (800f968 <USB_SetTurnaroundTime+0x134>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d906      	bls.n	800f8e2 <USB_SetTurnaroundTime+0xae>
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	4a25      	ldr	r2, [pc, #148]	; (800f96c <USB_SetTurnaroundTime+0x138>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d202      	bcs.n	800f8e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f8dc:	2309      	movs	r3, #9
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	e020      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	4a21      	ldr	r2, [pc, #132]	; (800f96c <USB_SetTurnaroundTime+0x138>)
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d306      	bcc.n	800f8f8 <USB_SetTurnaroundTime+0xc4>
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	4a20      	ldr	r2, [pc, #128]	; (800f970 <USB_SetTurnaroundTime+0x13c>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d802      	bhi.n	800f8f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f8f2:	2308      	movs	r3, #8
 800f8f4:	617b      	str	r3, [r7, #20]
 800f8f6:	e015      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	4a1d      	ldr	r2, [pc, #116]	; (800f970 <USB_SetTurnaroundTime+0x13c>)
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d906      	bls.n	800f90e <USB_SetTurnaroundTime+0xda>
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	4a1c      	ldr	r2, [pc, #112]	; (800f974 <USB_SetTurnaroundTime+0x140>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d202      	bcs.n	800f90e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f908:	2307      	movs	r3, #7
 800f90a:	617b      	str	r3, [r7, #20]
 800f90c:	e00a      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f90e:	2306      	movs	r3, #6
 800f910:	617b      	str	r3, [r7, #20]
 800f912:	e007      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d102      	bne.n	800f920 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f91a:	2309      	movs	r3, #9
 800f91c:	617b      	str	r3, [r7, #20]
 800f91e:	e001      	b.n	800f924 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f920:	2309      	movs	r3, #9
 800f922:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	68da      	ldr	r2, [r3, #12]
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	029b      	lsls	r3, r3, #10
 800f938:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f93c:	431a      	orrs	r2, r3
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	371c      	adds	r7, #28
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr
 800f950:	00d8acbf 	.word	0x00d8acbf
 800f954:	00e4e1c0 	.word	0x00e4e1c0
 800f958:	00f42400 	.word	0x00f42400
 800f95c:	01067380 	.word	0x01067380
 800f960:	011a499f 	.word	0x011a499f
 800f964:	01312cff 	.word	0x01312cff
 800f968:	014ca43f 	.word	0x014ca43f
 800f96c:	016e3600 	.word	0x016e3600
 800f970:	01a6ab1f 	.word	0x01a6ab1f
 800f974:	01e84800 	.word	0x01e84800

0800f978 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f043 0201 	orr.w	r2, r3, #1
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	370c      	adds	r7, #12
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f99a:	b480      	push	{r7}
 800f99c:	b083      	sub	sp, #12
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	f023 0201 	bic.w	r2, r3, #1
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f9ae:	2300      	movs	r3, #0
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	460b      	mov	r3, r1
 800f9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f9d8:	78fb      	ldrb	r3, [r7, #3]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d115      	bne.n	800fa0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f9ea:	200a      	movs	r0, #10
 800f9ec:	f7fa f94a 	bl	8009c84 <HAL_Delay>
      ms += 10U;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	330a      	adds	r3, #10
 800f9f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f001 f939 	bl	8010c6e <USB_GetMode>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d01e      	beq.n	800fa40 <USB_SetCurrentMode+0x84>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2bc7      	cmp	r3, #199	; 0xc7
 800fa06:	d9f0      	bls.n	800f9ea <USB_SetCurrentMode+0x2e>
 800fa08:	e01a      	b.n	800fa40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fa0a:	78fb      	ldrb	r3, [r7, #3]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d115      	bne.n	800fa3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fa1c:	200a      	movs	r0, #10
 800fa1e:	f7fa f931 	bl	8009c84 <HAL_Delay>
      ms += 10U;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	330a      	adds	r3, #10
 800fa26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f001 f920 	bl	8010c6e <USB_GetMode>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d005      	beq.n	800fa40 <USB_SetCurrentMode+0x84>
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2bc7      	cmp	r3, #199	; 0xc7
 800fa38:	d9f0      	bls.n	800fa1c <USB_SetCurrentMode+0x60>
 800fa3a:	e001      	b.n	800fa40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e005      	b.n	800fa4c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2bc8      	cmp	r3, #200	; 0xc8
 800fa44:	d101      	bne.n	800fa4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fa46:	2301      	movs	r3, #1
 800fa48:	e000      	b.n	800fa4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fa4a:	2300      	movs	r3, #0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3710      	adds	r7, #16
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fa54:	b084      	sub	sp, #16
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b086      	sub	sp, #24
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fa62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fa66:	2300      	movs	r3, #0
 800fa68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fa6e:	2300      	movs	r3, #0
 800fa70:	613b      	str	r3, [r7, #16]
 800fa72:	e009      	b.n	800fa88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	3340      	adds	r3, #64	; 0x40
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	4413      	add	r3, r2
 800fa7e:	2200      	movs	r2, #0
 800fa80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	3301      	adds	r3, #1
 800fa86:	613b      	str	r3, [r7, #16]
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	2b0e      	cmp	r3, #14
 800fa8c:	d9f2      	bls.n	800fa74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fa8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d11c      	bne.n	800fad0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800faa4:	f043 0302 	orr.w	r3, r3, #2
 800faa8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fac6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	639a      	str	r2, [r3, #56]	; 0x38
 800face:	e00b      	b.n	800fae8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fad4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800faee:	461a      	mov	r2, r3
 800faf0:	2300      	movs	r3, #0
 800faf2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800faf4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d10d      	bne.n	800fb18 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fafc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d104      	bne.n	800fb0e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fb04:	2100      	movs	r1, #0
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f000 f968 	bl	800fddc <USB_SetDevSpeed>
 800fb0c:	e008      	b.n	800fb20 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fb0e:	2101      	movs	r1, #1
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f963 	bl	800fddc <USB_SetDevSpeed>
 800fb16:	e003      	b.n	800fb20 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fb18:	2103      	movs	r1, #3
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f000 f95e 	bl	800fddc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fb20:	2110      	movs	r1, #16
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 f8fa 	bl	800fd1c <USB_FlushTxFifo>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d001      	beq.n	800fb32 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800fb2e:	2301      	movs	r3, #1
 800fb30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f924 	bl	800fd80 <USB_FlushRxFifo>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800fb3e:	2301      	movs	r3, #1
 800fb40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb48:	461a      	mov	r2, r3
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb54:	461a      	mov	r2, r3
 800fb56:	2300      	movs	r3, #0
 800fb58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb60:	461a      	mov	r2, r3
 800fb62:	2300      	movs	r3, #0
 800fb64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb66:	2300      	movs	r3, #0
 800fb68:	613b      	str	r3, [r7, #16]
 800fb6a:	e043      	b.n	800fbf4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	015a      	lsls	r2, r3, #5
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	4413      	add	r3, r2
 800fb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb82:	d118      	bne.n	800fbb6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10a      	bne.n	800fba0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	015a      	lsls	r2, r3, #5
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	4413      	add	r3, r2
 800fb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb96:	461a      	mov	r2, r3
 800fb98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb9c:	6013      	str	r3, [r2, #0]
 800fb9e:	e013      	b.n	800fbc8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	015a      	lsls	r2, r3, #5
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	4413      	add	r3, r2
 800fba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbac:	461a      	mov	r2, r3
 800fbae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fbb2:	6013      	str	r3, [r2, #0]
 800fbb4:	e008      	b.n	800fbc8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	015a      	lsls	r2, r3, #5
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	015a      	lsls	r2, r3, #5
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	4413      	add	r3, r2
 800fbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	015a      	lsls	r2, r3, #5
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	4413      	add	r3, r2
 800fbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fbec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	613b      	str	r3, [r7, #16]
 800fbf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d3b5      	bcc.n	800fb6c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc00:	2300      	movs	r3, #0
 800fc02:	613b      	str	r3, [r7, #16]
 800fc04:	e043      	b.n	800fc8e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	015a      	lsls	r2, r3, #5
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc1c:	d118      	bne.n	800fc50 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d10a      	bne.n	800fc3a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	015a      	lsls	r2, r3, #5
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc30:	461a      	mov	r2, r3
 800fc32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc36:	6013      	str	r3, [r2, #0]
 800fc38:	e013      	b.n	800fc62 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	015a      	lsls	r2, r3, #5
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	4413      	add	r3, r2
 800fc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc46:	461a      	mov	r2, r3
 800fc48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fc4c:	6013      	str	r3, [r2, #0]
 800fc4e:	e008      	b.n	800fc62 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	015a      	lsls	r2, r3, #5
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	4413      	add	r3, r2
 800fc58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	2300      	movs	r3, #0
 800fc60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	015a      	lsls	r2, r3, #5
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	4413      	add	r3, r2
 800fc6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc6e:	461a      	mov	r2, r3
 800fc70:	2300      	movs	r3, #0
 800fc72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	015a      	lsls	r2, r3, #5
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	4413      	add	r3, r2
 800fc7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc80:	461a      	mov	r2, r3
 800fc82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	613b      	str	r3, [r7, #16]
 800fc8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fc92:	461a      	mov	r2, r3
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d3b5      	bcc.n	800fc06 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fcba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fcbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d105      	bne.n	800fcd0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	699b      	ldr	r3, [r3, #24]
 800fcc8:	f043 0210 	orr.w	r2, r3, #16
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	699a      	ldr	r2, [r3, #24]
 800fcd4:	4b10      	ldr	r3, [pc, #64]	; (800fd18 <USB_DevInit+0x2c4>)
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fcdc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d005      	beq.n	800fcf0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	699b      	ldr	r3, [r3, #24]
 800fce8:	f043 0208 	orr.w	r2, r3, #8
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fcf0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d107      	bne.n	800fd08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	699b      	ldr	r3, [r3, #24]
 800fcfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd00:	f043 0304 	orr.w	r3, r3, #4
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3718      	adds	r7, #24
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd14:	b004      	add	sp, #16
 800fd16:	4770      	bx	lr
 800fd18:	803c3800 	.word	0x803c3800

0800fd1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b085      	sub	sp, #20
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fd26:	2300      	movs	r3, #0
 800fd28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fd36:	d901      	bls.n	800fd3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fd38:	2303      	movs	r3, #3
 800fd3a:	e01b      	b.n	800fd74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	691b      	ldr	r3, [r3, #16]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	daf2      	bge.n	800fd2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fd44:	2300      	movs	r3, #0
 800fd46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	019b      	lsls	r3, r3, #6
 800fd4c:	f043 0220 	orr.w	r2, r3, #32
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	3301      	adds	r3, #1
 800fd58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fd60:	d901      	bls.n	800fd66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fd62:	2303      	movs	r3, #3
 800fd64:	e006      	b.n	800fd74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	691b      	ldr	r3, [r3, #16]
 800fd6a:	f003 0320 	and.w	r3, r3, #32
 800fd6e:	2b20      	cmp	r3, #32
 800fd70:	d0f0      	beq.n	800fd54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fd98:	d901      	bls.n	800fd9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	e018      	b.n	800fdd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	daf2      	bge.n	800fd8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fda6:	2300      	movs	r3, #0
 800fda8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2210      	movs	r2, #16
 800fdae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800fdbc:	d901      	bls.n	800fdc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fdbe:	2303      	movs	r3, #3
 800fdc0:	e006      	b.n	800fdd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	f003 0310 	and.w	r3, r3, #16
 800fdca:	2b10      	cmp	r3, #16
 800fdcc:	d0f0      	beq.n	800fdb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3714      	adds	r7, #20
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr

0800fddc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b085      	sub	sp, #20
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	460b      	mov	r3, r1
 800fde6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	78fb      	ldrb	r3, [r7, #3]
 800fdf6:	68f9      	ldr	r1, [r7, #12]
 800fdf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr

0800fe0e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fe0e:	b480      	push	{r7}
 800fe10:	b087      	sub	sp, #28
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe20:	689b      	ldr	r3, [r3, #8]
 800fe22:	f003 0306 	and.w	r3, r3, #6
 800fe26:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d102      	bne.n	800fe34 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	75fb      	strb	r3, [r7, #23]
 800fe32:	e00a      	b.n	800fe4a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d002      	beq.n	800fe40 <USB_GetDevSpeed+0x32>
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2b06      	cmp	r3, #6
 800fe3e:	d102      	bne.n	800fe46 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fe40:	2302      	movs	r3, #2
 800fe42:	75fb      	strb	r3, [r7, #23]
 800fe44:	e001      	b.n	800fe4a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fe46:	230f      	movs	r3, #15
 800fe48:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fe4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	371c      	adds	r7, #28
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b085      	sub	sp, #20
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	785b      	ldrb	r3, [r3, #1]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d13a      	bne.n	800feea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe7a:	69da      	ldr	r2, [r3, #28]
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	f003 030f 	and.w	r3, r3, #15
 800fe84:	2101      	movs	r1, #1
 800fe86:	fa01 f303 	lsl.w	r3, r1, r3
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	68f9      	ldr	r1, [r7, #12]
 800fe8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe92:	4313      	orrs	r3, r2
 800fe94:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	015a      	lsls	r2, r3, #5
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d155      	bne.n	800ff58 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	015a      	lsls	r2, r3, #5
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	4413      	add	r3, r2
 800feb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	791b      	ldrb	r3, [r3, #4]
 800fec6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fec8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	059b      	lsls	r3, r3, #22
 800fece:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fed0:	4313      	orrs	r3, r2
 800fed2:	68ba      	ldr	r2, [r7, #8]
 800fed4:	0151      	lsls	r1, r2, #5
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	440a      	add	r2, r1
 800feda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fee6:	6013      	str	r3, [r2, #0]
 800fee8:	e036      	b.n	800ff58 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fef0:	69da      	ldr	r2, [r3, #28]
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	f003 030f 	and.w	r3, r3, #15
 800fefa:	2101      	movs	r1, #1
 800fefc:	fa01 f303 	lsl.w	r3, r1, r3
 800ff00:	041b      	lsls	r3, r3, #16
 800ff02:	68f9      	ldr	r1, [r7, #12]
 800ff04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	015a      	lsls	r2, r3, #5
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	4413      	add	r3, r2
 800ff14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d11a      	bne.n	800ff58 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	015a      	lsls	r2, r3, #5
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	4413      	add	r3, r2
 800ff2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	791b      	ldrb	r3, [r3, #4]
 800ff3c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ff3e:	430b      	orrs	r3, r1
 800ff40:	4313      	orrs	r3, r2
 800ff42:	68ba      	ldr	r2, [r7, #8]
 800ff44:	0151      	lsls	r1, r2, #5
 800ff46:	68fa      	ldr	r2, [r7, #12]
 800ff48:	440a      	add	r2, r1
 800ff4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff56:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3714      	adds	r7, #20
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
	...

0800ff68 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	785b      	ldrb	r3, [r3, #1]
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	d161      	bne.n	8010048 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	015a      	lsls	r2, r3, #5
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff9a:	d11f      	bne.n	800ffdc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	015a      	lsls	r2, r3, #5
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	0151      	lsls	r1, r2, #5
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	440a      	add	r2, r1
 800ffb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ffba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	015a      	lsls	r2, r3, #5
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	68ba      	ldr	r2, [r7, #8]
 800ffcc:	0151      	lsls	r1, r2, #5
 800ffce:	68fa      	ldr	r2, [r7, #12]
 800ffd0:	440a      	add	r2, r1
 800ffd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	f003 030f 	and.w	r3, r3, #15
 800ffec:	2101      	movs	r1, #1
 800ffee:	fa01 f303 	lsl.w	r3, r1, r3
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	43db      	mvns	r3, r3
 800fff6:	68f9      	ldr	r1, [r7, #12]
 800fff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fffc:	4013      	ands	r3, r2
 800fffe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010006:	69da      	ldr	r2, [r3, #28]
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	f003 030f 	and.w	r3, r3, #15
 8010010:	2101      	movs	r1, #1
 8010012:	fa01 f303 	lsl.w	r3, r1, r3
 8010016:	b29b      	uxth	r3, r3
 8010018:	43db      	mvns	r3, r3
 801001a:	68f9      	ldr	r1, [r7, #12]
 801001c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010020:	4013      	ands	r3, r2
 8010022:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	015a      	lsls	r2, r3, #5
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	4413      	add	r3, r2
 801002c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	0159      	lsls	r1, r3, #5
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	440b      	add	r3, r1
 801003a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801003e:	4619      	mov	r1, r3
 8010040:	4b35      	ldr	r3, [pc, #212]	; (8010118 <USB_DeactivateEndpoint+0x1b0>)
 8010042:	4013      	ands	r3, r2
 8010044:	600b      	str	r3, [r1, #0]
 8010046:	e060      	b.n	801010a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	015a      	lsls	r2, r3, #5
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	4413      	add	r3, r2
 8010050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801005a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801005e:	d11f      	bne.n	80100a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	015a      	lsls	r2, r3, #5
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	4413      	add	r3, r2
 8010068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	0151      	lsls	r1, r2, #5
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	440a      	add	r2, r1
 8010076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801007a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801007e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	015a      	lsls	r2, r3, #5
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	4413      	add	r3, r2
 8010088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68ba      	ldr	r2, [r7, #8]
 8010090:	0151      	lsls	r1, r2, #5
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	440a      	add	r2, r1
 8010096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801009a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801009e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	f003 030f 	and.w	r3, r3, #15
 80100b0:	2101      	movs	r1, #1
 80100b2:	fa01 f303 	lsl.w	r3, r1, r3
 80100b6:	041b      	lsls	r3, r3, #16
 80100b8:	43db      	mvns	r3, r3
 80100ba:	68f9      	ldr	r1, [r7, #12]
 80100bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100c0:	4013      	ands	r3, r2
 80100c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ca:	69da      	ldr	r2, [r3, #28]
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	f003 030f 	and.w	r3, r3, #15
 80100d4:	2101      	movs	r1, #1
 80100d6:	fa01 f303 	lsl.w	r3, r1, r3
 80100da:	041b      	lsls	r3, r3, #16
 80100dc:	43db      	mvns	r3, r3
 80100de:	68f9      	ldr	r1, [r7, #12]
 80100e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100e4:	4013      	ands	r3, r2
 80100e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	015a      	lsls	r2, r3, #5
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	4413      	add	r3, r2
 80100f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	0159      	lsls	r1, r3, #5
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	440b      	add	r3, r1
 80100fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010102:	4619      	mov	r1, r3
 8010104:	4b05      	ldr	r3, [pc, #20]	; (801011c <USB_DeactivateEndpoint+0x1b4>)
 8010106:	4013      	ands	r3, r2
 8010108:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	ec337800 	.word	0xec337800
 801011c:	eff37800 	.word	0xeff37800

08010120 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b08a      	sub	sp, #40	; 0x28
 8010124:	af02      	add	r7, sp, #8
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	60b9      	str	r1, [r7, #8]
 801012a:	4613      	mov	r3, r2
 801012c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	785b      	ldrb	r3, [r3, #1]
 801013c:	2b01      	cmp	r3, #1
 801013e:	f040 817a 	bne.w	8010436 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	691b      	ldr	r3, [r3, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d132      	bne.n	80101b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	015a      	lsls	r2, r3, #5
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	4413      	add	r3, r2
 8010152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010156:	691b      	ldr	r3, [r3, #16]
 8010158:	69ba      	ldr	r2, [r7, #24]
 801015a:	0151      	lsls	r1, r2, #5
 801015c:	69fa      	ldr	r2, [r7, #28]
 801015e:	440a      	add	r2, r1
 8010160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010164:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010168:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801016c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801016e:	69bb      	ldr	r3, [r7, #24]
 8010170:	015a      	lsls	r2, r3, #5
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	4413      	add	r3, r2
 8010176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801017a:	691b      	ldr	r3, [r3, #16]
 801017c:	69ba      	ldr	r2, [r7, #24]
 801017e:	0151      	lsls	r1, r2, #5
 8010180:	69fa      	ldr	r2, [r7, #28]
 8010182:	440a      	add	r2, r1
 8010184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801018c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	015a      	lsls	r2, r3, #5
 8010192:	69fb      	ldr	r3, [r7, #28]
 8010194:	4413      	add	r3, r2
 8010196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801019a:	691b      	ldr	r3, [r3, #16]
 801019c:	69ba      	ldr	r2, [r7, #24]
 801019e:	0151      	lsls	r1, r2, #5
 80101a0:	69fa      	ldr	r2, [r7, #28]
 80101a2:	440a      	add	r2, r1
 80101a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101a8:	0cdb      	lsrs	r3, r3, #19
 80101aa:	04db      	lsls	r3, r3, #19
 80101ac:	6113      	str	r3, [r2, #16]
 80101ae:	e092      	b.n	80102d6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	015a      	lsls	r2, r3, #5
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	4413      	add	r3, r2
 80101b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101bc:	691b      	ldr	r3, [r3, #16]
 80101be:	69ba      	ldr	r2, [r7, #24]
 80101c0:	0151      	lsls	r1, r2, #5
 80101c2:	69fa      	ldr	r2, [r7, #28]
 80101c4:	440a      	add	r2, r1
 80101c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101ca:	0cdb      	lsrs	r3, r3, #19
 80101cc:	04db      	lsls	r3, r3, #19
 80101ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	015a      	lsls	r2, r3, #5
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	4413      	add	r3, r2
 80101d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101dc:	691b      	ldr	r3, [r3, #16]
 80101de:	69ba      	ldr	r2, [r7, #24]
 80101e0:	0151      	lsls	r1, r2, #5
 80101e2:	69fa      	ldr	r2, [r7, #28]
 80101e4:	440a      	add	r2, r1
 80101e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80101ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80101f2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d11a      	bne.n	8010230 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	691a      	ldr	r2, [r3, #16]
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	429a      	cmp	r2, r3
 8010204:	d903      	bls.n	801020e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	689a      	ldr	r2, [r3, #8]
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	015a      	lsls	r2, r3, #5
 8010212:	69fb      	ldr	r3, [r7, #28]
 8010214:	4413      	add	r3, r2
 8010216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	69ba      	ldr	r2, [r7, #24]
 801021e:	0151      	lsls	r1, r2, #5
 8010220:	69fa      	ldr	r2, [r7, #28]
 8010222:	440a      	add	r2, r1
 8010224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801022c:	6113      	str	r3, [r2, #16]
 801022e:	e01b      	b.n	8010268 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010230:	69bb      	ldr	r3, [r7, #24]
 8010232:	015a      	lsls	r2, r3, #5
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	4413      	add	r3, r2
 8010238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801023c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	6919      	ldr	r1, [r3, #16]
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	440b      	add	r3, r1
 8010248:	1e59      	subs	r1, r3, #1
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	689b      	ldr	r3, [r3, #8]
 801024e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010252:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010254:	4ba2      	ldr	r3, [pc, #648]	; (80104e0 <USB_EPStartXfer+0x3c0>)
 8010256:	400b      	ands	r3, r1
 8010258:	69b9      	ldr	r1, [r7, #24]
 801025a:	0148      	lsls	r0, r1, #5
 801025c:	69f9      	ldr	r1, [r7, #28]
 801025e:	4401      	add	r1, r0
 8010260:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010264:	4313      	orrs	r3, r2
 8010266:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	015a      	lsls	r2, r3, #5
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	4413      	add	r3, r2
 8010270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010274:	691a      	ldr	r2, [r3, #16]
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801027e:	69b9      	ldr	r1, [r7, #24]
 8010280:	0148      	lsls	r0, r1, #5
 8010282:	69f9      	ldr	r1, [r7, #28]
 8010284:	4401      	add	r1, r0
 8010286:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801028a:	4313      	orrs	r3, r2
 801028c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	791b      	ldrb	r3, [r3, #4]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d11f      	bne.n	80102d6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	015a      	lsls	r2, r3, #5
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	4413      	add	r3, r2
 801029e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a2:	691b      	ldr	r3, [r3, #16]
 80102a4:	69ba      	ldr	r2, [r7, #24]
 80102a6:	0151      	lsls	r1, r2, #5
 80102a8:	69fa      	ldr	r2, [r7, #28]
 80102aa:	440a      	add	r2, r1
 80102ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80102b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	015a      	lsls	r2, r3, #5
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	4413      	add	r3, r2
 80102be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c2:	691b      	ldr	r3, [r3, #16]
 80102c4:	69ba      	ldr	r2, [r7, #24]
 80102c6:	0151      	lsls	r1, r2, #5
 80102c8:	69fa      	ldr	r2, [r7, #28]
 80102ca:	440a      	add	r2, r1
 80102cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80102d6:	79fb      	ldrb	r3, [r7, #7]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d14b      	bne.n	8010374 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	69db      	ldr	r3, [r3, #28]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d009      	beq.n	80102f8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80102e4:	69bb      	ldr	r3, [r7, #24]
 80102e6:	015a      	lsls	r2, r3, #5
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	4413      	add	r3, r2
 80102ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f0:	461a      	mov	r2, r3
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	69db      	ldr	r3, [r3, #28]
 80102f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	791b      	ldrb	r3, [r3, #4]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d128      	bne.n	8010352 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801030c:	2b00      	cmp	r3, #0
 801030e:	d110      	bne.n	8010332 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	015a      	lsls	r2, r3, #5
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	4413      	add	r3, r2
 8010318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	69ba      	ldr	r2, [r7, #24]
 8010320:	0151      	lsls	r1, r2, #5
 8010322:	69fa      	ldr	r2, [r7, #28]
 8010324:	440a      	add	r2, r1
 8010326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	e00f      	b.n	8010352 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	015a      	lsls	r2, r3, #5
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	4413      	add	r3, r2
 801033a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	69ba      	ldr	r2, [r7, #24]
 8010342:	0151      	lsls	r1, r2, #5
 8010344:	69fa      	ldr	r2, [r7, #28]
 8010346:	440a      	add	r2, r1
 8010348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801034c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010350:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010352:	69bb      	ldr	r3, [r7, #24]
 8010354:	015a      	lsls	r2, r3, #5
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	4413      	add	r3, r2
 801035a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	69ba      	ldr	r2, [r7, #24]
 8010362:	0151      	lsls	r1, r2, #5
 8010364:	69fa      	ldr	r2, [r7, #28]
 8010366:	440a      	add	r2, r1
 8010368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801036c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010370:	6013      	str	r3, [r2, #0]
 8010372:	e165      	b.n	8010640 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	015a      	lsls	r2, r3, #5
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	4413      	add	r3, r2
 801037c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	69ba      	ldr	r2, [r7, #24]
 8010384:	0151      	lsls	r1, r2, #5
 8010386:	69fa      	ldr	r2, [r7, #28]
 8010388:	440a      	add	r2, r1
 801038a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801038e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010392:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	791b      	ldrb	r3, [r3, #4]
 8010398:	2b01      	cmp	r3, #1
 801039a:	d015      	beq.n	80103c8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	691b      	ldr	r3, [r3, #16]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f000 814d 	beq.w	8010640 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	f003 030f 	and.w	r3, r3, #15
 80103b6:	2101      	movs	r1, #1
 80103b8:	fa01 f303 	lsl.w	r3, r1, r3
 80103bc:	69f9      	ldr	r1, [r7, #28]
 80103be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103c2:	4313      	orrs	r3, r2
 80103c4:	634b      	str	r3, [r1, #52]	; 0x34
 80103c6:	e13b      	b.n	8010640 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103ce:	689b      	ldr	r3, [r3, #8]
 80103d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d110      	bne.n	80103fa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	015a      	lsls	r2, r3, #5
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	4413      	add	r3, r2
 80103e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	69ba      	ldr	r2, [r7, #24]
 80103e8:	0151      	lsls	r1, r2, #5
 80103ea:	69fa      	ldr	r2, [r7, #28]
 80103ec:	440a      	add	r2, r1
 80103ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103f6:	6013      	str	r3, [r2, #0]
 80103f8:	e00f      	b.n	801041a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	015a      	lsls	r2, r3, #5
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	4413      	add	r3, r2
 8010402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	69ba      	ldr	r2, [r7, #24]
 801040a:	0151      	lsls	r1, r2, #5
 801040c:	69fa      	ldr	r2, [r7, #28]
 801040e:	440a      	add	r2, r1
 8010410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010418:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	68d9      	ldr	r1, [r3, #12]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	781a      	ldrb	r2, [r3, #0]
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	691b      	ldr	r3, [r3, #16]
 8010426:	b298      	uxth	r0, r3
 8010428:	79fb      	ldrb	r3, [r7, #7]
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	4603      	mov	r3, r0
 801042e:	68f8      	ldr	r0, [r7, #12]
 8010430:	f000 f9b8 	bl	80107a4 <USB_WritePacket>
 8010434:	e104      	b.n	8010640 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	015a      	lsls	r2, r3, #5
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	4413      	add	r3, r2
 801043e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010442:	691b      	ldr	r3, [r3, #16]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	0151      	lsls	r1, r2, #5
 8010448:	69fa      	ldr	r2, [r7, #28]
 801044a:	440a      	add	r2, r1
 801044c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010450:	0cdb      	lsrs	r3, r3, #19
 8010452:	04db      	lsls	r3, r3, #19
 8010454:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	015a      	lsls	r2, r3, #5
 801045a:	69fb      	ldr	r3, [r7, #28]
 801045c:	4413      	add	r3, r2
 801045e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010462:	691b      	ldr	r3, [r3, #16]
 8010464:	69ba      	ldr	r2, [r7, #24]
 8010466:	0151      	lsls	r1, r2, #5
 8010468:	69fa      	ldr	r2, [r7, #28]
 801046a:	440a      	add	r2, r1
 801046c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010470:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010474:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010478:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d131      	bne.n	80104e4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	691b      	ldr	r3, [r3, #16]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d003      	beq.n	8010490 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	689a      	ldr	r2, [r3, #8]
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	689a      	ldr	r2, [r3, #8]
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	015a      	lsls	r2, r3, #5
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	4413      	add	r3, r2
 80104a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104a4:	691a      	ldr	r2, [r3, #16]
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104ae:	69b9      	ldr	r1, [r7, #24]
 80104b0:	0148      	lsls	r0, r1, #5
 80104b2:	69f9      	ldr	r1, [r7, #28]
 80104b4:	4401      	add	r1, r0
 80104b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80104ba:	4313      	orrs	r3, r2
 80104bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	015a      	lsls	r2, r3, #5
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	4413      	add	r3, r2
 80104c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ca:	691b      	ldr	r3, [r3, #16]
 80104cc:	69ba      	ldr	r2, [r7, #24]
 80104ce:	0151      	lsls	r1, r2, #5
 80104d0:	69fa      	ldr	r2, [r7, #28]
 80104d2:	440a      	add	r2, r1
 80104d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80104dc:	6113      	str	r3, [r2, #16]
 80104de:	e061      	b.n	80105a4 <USB_EPStartXfer+0x484>
 80104e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	691b      	ldr	r3, [r3, #16]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d123      	bne.n	8010534 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	015a      	lsls	r2, r3, #5
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	4413      	add	r3, r2
 80104f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104f8:	691a      	ldr	r2, [r3, #16]
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010502:	69b9      	ldr	r1, [r7, #24]
 8010504:	0148      	lsls	r0, r1, #5
 8010506:	69f9      	ldr	r1, [r7, #28]
 8010508:	4401      	add	r1, r0
 801050a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801050e:	4313      	orrs	r3, r2
 8010510:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	015a      	lsls	r2, r3, #5
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	4413      	add	r3, r2
 801051a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	69ba      	ldr	r2, [r7, #24]
 8010522:	0151      	lsls	r1, r2, #5
 8010524:	69fa      	ldr	r2, [r7, #28]
 8010526:	440a      	add	r2, r1
 8010528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801052c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010530:	6113      	str	r3, [r2, #16]
 8010532:	e037      	b.n	80105a4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	691a      	ldr	r2, [r3, #16]
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	4413      	add	r3, r2
 801053e:	1e5a      	subs	r2, r3, #1
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	689b      	ldr	r3, [r3, #8]
 8010544:	fbb2 f3f3 	udiv	r3, r2, r3
 8010548:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	8afa      	ldrh	r2, [r7, #22]
 8010550:	fb03 f202 	mul.w	r2, r3, r2
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010558:	69bb      	ldr	r3, [r7, #24]
 801055a:	015a      	lsls	r2, r3, #5
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	4413      	add	r3, r2
 8010560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010564:	691a      	ldr	r2, [r3, #16]
 8010566:	8afb      	ldrh	r3, [r7, #22]
 8010568:	04d9      	lsls	r1, r3, #19
 801056a:	4b38      	ldr	r3, [pc, #224]	; (801064c <USB_EPStartXfer+0x52c>)
 801056c:	400b      	ands	r3, r1
 801056e:	69b9      	ldr	r1, [r7, #24]
 8010570:	0148      	lsls	r0, r1, #5
 8010572:	69f9      	ldr	r1, [r7, #28]
 8010574:	4401      	add	r1, r0
 8010576:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801057a:	4313      	orrs	r3, r2
 801057c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	015a      	lsls	r2, r3, #5
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	4413      	add	r3, r2
 8010586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801058a:	691a      	ldr	r2, [r3, #16]
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	6a1b      	ldr	r3, [r3, #32]
 8010590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010594:	69b9      	ldr	r1, [r7, #24]
 8010596:	0148      	lsls	r0, r1, #5
 8010598:	69f9      	ldr	r1, [r7, #28]
 801059a:	4401      	add	r1, r0
 801059c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105a0:	4313      	orrs	r3, r2
 80105a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80105a4:	79fb      	ldrb	r3, [r7, #7]
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d10d      	bne.n	80105c6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d009      	beq.n	80105c6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	68d9      	ldr	r1, [r3, #12]
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	015a      	lsls	r2, r3, #5
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	4413      	add	r3, r2
 80105be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105c2:	460a      	mov	r2, r1
 80105c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	791b      	ldrb	r3, [r3, #4]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d128      	bne.n	8010620 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d110      	bne.n	8010600 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80105de:	69bb      	ldr	r3, [r7, #24]
 80105e0:	015a      	lsls	r2, r3, #5
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	4413      	add	r3, r2
 80105e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	69ba      	ldr	r2, [r7, #24]
 80105ee:	0151      	lsls	r1, r2, #5
 80105f0:	69fa      	ldr	r2, [r7, #28]
 80105f2:	440a      	add	r2, r1
 80105f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80105fc:	6013      	str	r3, [r2, #0]
 80105fe:	e00f      	b.n	8010620 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	015a      	lsls	r2, r3, #5
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	4413      	add	r3, r2
 8010608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	69ba      	ldr	r2, [r7, #24]
 8010610:	0151      	lsls	r1, r2, #5
 8010612:	69fa      	ldr	r2, [r7, #28]
 8010614:	440a      	add	r2, r1
 8010616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801061e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	015a      	lsls	r2, r3, #5
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	4413      	add	r3, r2
 8010628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	69ba      	ldr	r2, [r7, #24]
 8010630:	0151      	lsls	r1, r2, #5
 8010632:	69fa      	ldr	r2, [r7, #28]
 8010634:	440a      	add	r2, r1
 8010636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801063a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801063e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010640:	2300      	movs	r3, #0
}
 8010642:	4618      	mov	r0, r3
 8010644:	3720      	adds	r7, #32
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	1ff80000 	.word	0x1ff80000

08010650 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010650:	b480      	push	{r7}
 8010652:	b087      	sub	sp, #28
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801065a:	2300      	movs	r3, #0
 801065c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	785b      	ldrb	r3, [r3, #1]
 801066a:	2b01      	cmp	r3, #1
 801066c:	d14a      	bne.n	8010704 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010682:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010686:	f040 8086 	bne.w	8010796 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	015a      	lsls	r2, r3, #5
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	4413      	add	r3, r2
 8010694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	683a      	ldr	r2, [r7, #0]
 801069c:	7812      	ldrb	r2, [r2, #0]
 801069e:	0151      	lsls	r1, r2, #5
 80106a0:	693a      	ldr	r2, [r7, #16]
 80106a2:	440a      	add	r2, r1
 80106a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80106ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	015a      	lsls	r2, r3, #5
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	4413      	add	r3, r2
 80106b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	7812      	ldrb	r2, [r2, #0]
 80106c2:	0151      	lsls	r1, r2, #5
 80106c4:	693a      	ldr	r2, [r7, #16]
 80106c6:	440a      	add	r2, r1
 80106c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80106d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	3301      	adds	r3, #1
 80106d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f242 7210 	movw	r2, #10000	; 0x2710
 80106de:	4293      	cmp	r3, r2
 80106e0:	d902      	bls.n	80106e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80106e2:	2301      	movs	r3, #1
 80106e4:	75fb      	strb	r3, [r7, #23]
          break;
 80106e6:	e056      	b.n	8010796 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	015a      	lsls	r2, r3, #5
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	4413      	add	r3, r2
 80106f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80106fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010700:	d0e7      	beq.n	80106d2 <USB_EPStopXfer+0x82>
 8010702:	e048      	b.n	8010796 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	015a      	lsls	r2, r3, #5
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	4413      	add	r3, r2
 801070e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801071c:	d13b      	bne.n	8010796 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	781b      	ldrb	r3, [r3, #0]
 8010722:	015a      	lsls	r2, r3, #5
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	4413      	add	r3, r2
 8010728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	683a      	ldr	r2, [r7, #0]
 8010730:	7812      	ldrb	r2, [r2, #0]
 8010732:	0151      	lsls	r1, r2, #5
 8010734:	693a      	ldr	r2, [r7, #16]
 8010736:	440a      	add	r2, r1
 8010738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801073c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010740:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	015a      	lsls	r2, r3, #5
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	4413      	add	r3, r2
 801074c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	683a      	ldr	r2, [r7, #0]
 8010754:	7812      	ldrb	r2, [r2, #0]
 8010756:	0151      	lsls	r1, r2, #5
 8010758:	693a      	ldr	r2, [r7, #16]
 801075a:	440a      	add	r2, r1
 801075c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	3301      	adds	r3, #1
 801076a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f242 7210 	movw	r2, #10000	; 0x2710
 8010772:	4293      	cmp	r3, r2
 8010774:	d902      	bls.n	801077c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010776:	2301      	movs	r3, #1
 8010778:	75fb      	strb	r3, [r7, #23]
          break;
 801077a:	e00c      	b.n	8010796 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	015a      	lsls	r2, r3, #5
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	4413      	add	r3, r2
 8010786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010794:	d0e7      	beq.n	8010766 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010796:	7dfb      	ldrb	r3, [r7, #23]
}
 8010798:	4618      	mov	r0, r3
 801079a:	371c      	adds	r7, #28
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b089      	sub	sp, #36	; 0x24
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	4611      	mov	r1, r2
 80107b0:	461a      	mov	r2, r3
 80107b2:	460b      	mov	r3, r1
 80107b4:	71fb      	strb	r3, [r7, #7]
 80107b6:	4613      	mov	r3, r2
 80107b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80107c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d123      	bne.n	8010812 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80107ca:	88bb      	ldrh	r3, [r7, #4]
 80107cc:	3303      	adds	r3, #3
 80107ce:	089b      	lsrs	r3, r3, #2
 80107d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80107d2:	2300      	movs	r3, #0
 80107d4:	61bb      	str	r3, [r7, #24]
 80107d6:	e018      	b.n	801080a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80107d8:	79fb      	ldrb	r3, [r7, #7]
 80107da:	031a      	lsls	r2, r3, #12
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	4413      	add	r3, r2
 80107e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80107e4:	461a      	mov	r2, r3
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	3301      	adds	r3, #1
 80107f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	3301      	adds	r3, #1
 80107f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	3301      	adds	r3, #1
 80107fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80107fe:	69fb      	ldr	r3, [r7, #28]
 8010800:	3301      	adds	r3, #1
 8010802:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	3301      	adds	r3, #1
 8010808:	61bb      	str	r3, [r7, #24]
 801080a:	69ba      	ldr	r2, [r7, #24]
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	429a      	cmp	r2, r3
 8010810:	d3e2      	bcc.n	80107d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010812:	2300      	movs	r3, #0
}
 8010814:	4618      	mov	r0, r3
 8010816:	3724      	adds	r7, #36	; 0x24
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010820:	b480      	push	{r7}
 8010822:	b08b      	sub	sp, #44	; 0x2c
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	4613      	mov	r3, r2
 801082c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010836:	88fb      	ldrh	r3, [r7, #6]
 8010838:	089b      	lsrs	r3, r3, #2
 801083a:	b29b      	uxth	r3, r3
 801083c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801083e:	88fb      	ldrh	r3, [r7, #6]
 8010840:	f003 0303 	and.w	r3, r3, #3
 8010844:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010846:	2300      	movs	r3, #0
 8010848:	623b      	str	r3, [r7, #32]
 801084a:	e014      	b.n	8010876 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801084c:	69bb      	ldr	r3, [r7, #24]
 801084e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010856:	601a      	str	r2, [r3, #0]
    pDest++;
 8010858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085a:	3301      	adds	r3, #1
 801085c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010860:	3301      	adds	r3, #1
 8010862:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	3301      	adds	r3, #1
 8010868:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	3301      	adds	r3, #1
 801086e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010870:	6a3b      	ldr	r3, [r7, #32]
 8010872:	3301      	adds	r3, #1
 8010874:	623b      	str	r3, [r7, #32]
 8010876:	6a3a      	ldr	r2, [r7, #32]
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	429a      	cmp	r2, r3
 801087c:	d3e6      	bcc.n	801084c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801087e:	8bfb      	ldrh	r3, [r7, #30]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d01e      	beq.n	80108c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010884:	2300      	movs	r3, #0
 8010886:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801088e:	461a      	mov	r2, r3
 8010890:	f107 0310 	add.w	r3, r7, #16
 8010894:	6812      	ldr	r2, [r2, #0]
 8010896:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010898:	693a      	ldr	r2, [r7, #16]
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	b2db      	uxtb	r3, r3
 801089e:	00db      	lsls	r3, r3, #3
 80108a0:	fa22 f303 	lsr.w	r3, r2, r3
 80108a4:	b2da      	uxtb	r2, r3
 80108a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a8:	701a      	strb	r2, [r3, #0]
      i++;
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	3301      	adds	r3, #1
 80108ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	3301      	adds	r3, #1
 80108b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80108b6:	8bfb      	ldrh	r3, [r7, #30]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80108bc:	8bfb      	ldrh	r3, [r7, #30]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d1ea      	bne.n	8010898 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80108c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	372c      	adds	r7, #44	; 0x2c
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80108d0:	b480      	push	{r7}
 80108d2:	b085      	sub	sp, #20
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	785b      	ldrb	r3, [r3, #1]
 80108e8:	2b01      	cmp	r3, #1
 80108ea:	d12c      	bne.n	8010946 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	015a      	lsls	r2, r3, #5
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	4413      	add	r3, r2
 80108f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	db12      	blt.n	8010924 <USB_EPSetStall+0x54>
 80108fe:	68bb      	ldr	r3, [r7, #8]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d00f      	beq.n	8010924 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	015a      	lsls	r2, r3, #5
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	4413      	add	r3, r2
 801090c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	0151      	lsls	r1, r2, #5
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	440a      	add	r2, r1
 801091a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801091e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010922:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	015a      	lsls	r2, r3, #5
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	4413      	add	r3, r2
 801092c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	0151      	lsls	r1, r2, #5
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	440a      	add	r2, r1
 801093a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801093e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010942:	6013      	str	r3, [r2, #0]
 8010944:	e02b      	b.n	801099e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	015a      	lsls	r2, r3, #5
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	4413      	add	r3, r2
 801094e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	db12      	blt.n	801097e <USB_EPSetStall+0xae>
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00f      	beq.n	801097e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	015a      	lsls	r2, r3, #5
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	4413      	add	r3, r2
 8010966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	68ba      	ldr	r2, [r7, #8]
 801096e:	0151      	lsls	r1, r2, #5
 8010970:	68fa      	ldr	r2, [r7, #12]
 8010972:	440a      	add	r2, r1
 8010974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010978:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801097c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	015a      	lsls	r2, r3, #5
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	4413      	add	r3, r2
 8010986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	0151      	lsls	r1, r2, #5
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	440a      	add	r2, r1
 8010994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801099c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801099e:	2300      	movs	r3, #0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3714      	adds	r7, #20
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr

080109ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	785b      	ldrb	r3, [r3, #1]
 80109c4:	2b01      	cmp	r3, #1
 80109c6:	d128      	bne.n	8010a1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	015a      	lsls	r2, r3, #5
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	4413      	add	r3, r2
 80109d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	68ba      	ldr	r2, [r7, #8]
 80109d8:	0151      	lsls	r1, r2, #5
 80109da:	68fa      	ldr	r2, [r7, #12]
 80109dc:	440a      	add	r2, r1
 80109de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80109e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	791b      	ldrb	r3, [r3, #4]
 80109ec:	2b03      	cmp	r3, #3
 80109ee:	d003      	beq.n	80109f8 <USB_EPClearStall+0x4c>
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	791b      	ldrb	r3, [r3, #4]
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d138      	bne.n	8010a6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	015a      	lsls	r2, r3, #5
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	4413      	add	r3, r2
 8010a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	68ba      	ldr	r2, [r7, #8]
 8010a08:	0151      	lsls	r1, r2, #5
 8010a0a:	68fa      	ldr	r2, [r7, #12]
 8010a0c:	440a      	add	r2, r1
 8010a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a16:	6013      	str	r3, [r2, #0]
 8010a18:	e027      	b.n	8010a6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	015a      	lsls	r2, r3, #5
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	4413      	add	r3, r2
 8010a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	0151      	lsls	r1, r2, #5
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	440a      	add	r2, r1
 8010a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010a38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	791b      	ldrb	r3, [r3, #4]
 8010a3e:	2b03      	cmp	r3, #3
 8010a40:	d003      	beq.n	8010a4a <USB_EPClearStall+0x9e>
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	791b      	ldrb	r3, [r3, #4]
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	d10f      	bne.n	8010a6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	015a      	lsls	r2, r3, #5
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	4413      	add	r3, r2
 8010a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	68ba      	ldr	r2, [r7, #8]
 8010a5a:	0151      	lsls	r1, r2, #5
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	440a      	add	r2, r1
 8010a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010a6a:	2300      	movs	r3, #0
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3714      	adds	r7, #20
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b085      	sub	sp, #20
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	460b      	mov	r3, r1
 8010a82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010a96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010a9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	78fb      	ldrb	r3, [r7, #3]
 8010aa6:	011b      	lsls	r3, r3, #4
 8010aa8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010aac:	68f9      	ldr	r1, [r7, #12]
 8010aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010ab6:	2300      	movs	r3, #0
}
 8010ab8:	4618      	mov	r0, r3
 8010aba:	3714      	adds	r7, #20
 8010abc:	46bd      	mov	sp, r7
 8010abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac2:	4770      	bx	lr

08010ac4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	68fa      	ldr	r2, [r7, #12]
 8010ada:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ade:	f023 0303 	bic.w	r3, r3, #3
 8010ae2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010af2:	f023 0302 	bic.w	r3, r3, #2
 8010af6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010af8:	2300      	movs	r3, #0
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr

08010b06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8010b06:	b480      	push	{r7}
 8010b08:	b085      	sub	sp, #20
 8010b0a:	af00      	add	r7, sp, #0
 8010b0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	68fa      	ldr	r2, [r7, #12]
 8010b1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010b20:	f023 0303 	bic.w	r3, r3, #3
 8010b24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	68fa      	ldr	r2, [r7, #12]
 8010b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b34:	f043 0302 	orr.w	r3, r3, #2
 8010b38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010b3a:	2300      	movs	r3, #0
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3714      	adds	r7, #20
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	695b      	ldr	r3, [r3, #20]
 8010b54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	699b      	ldr	r3, [r3, #24]
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010b60:	68fb      	ldr	r3, [r7, #12]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3714      	adds	r7, #20
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr

08010b6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010b6e:	b480      	push	{r7}
 8010b70:	b085      	sub	sp, #20
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b80:	699b      	ldr	r3, [r3, #24]
 8010b82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b8a:	69db      	ldr	r3, [r3, #28]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	4013      	ands	r3, r2
 8010b90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	0c1b      	lsrs	r3, r3, #16
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3714      	adds	r7, #20
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr

08010ba2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ba2:	b480      	push	{r7}
 8010ba4:	b085      	sub	sp, #20
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bbe:	69db      	ldr	r3, [r3, #28]
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	4013      	ands	r3, r2
 8010bc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	b29b      	uxth	r3, r3
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr

08010bd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	b085      	sub	sp, #20
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
 8010bde:	460b      	mov	r3, r1
 8010be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010be6:	78fb      	ldrb	r3, [r7, #3]
 8010be8:	015a      	lsls	r2, r3, #5
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	4413      	add	r3, r2
 8010bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bf2:	689b      	ldr	r3, [r3, #8]
 8010bf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bfc:	695b      	ldr	r3, [r3, #20]
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	4013      	ands	r3, r2
 8010c02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010c04:	68bb      	ldr	r3, [r7, #8]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr

08010c12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010c12:	b480      	push	{r7}
 8010c14:	b087      	sub	sp, #28
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c28:	691b      	ldr	r3, [r3, #16]
 8010c2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010c36:	78fb      	ldrb	r3, [r7, #3]
 8010c38:	f003 030f 	and.w	r3, r3, #15
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8010c42:	01db      	lsls	r3, r3, #7
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	693a      	ldr	r2, [r7, #16]
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010c4c:	78fb      	ldrb	r3, [r7, #3]
 8010c4e:	015a      	lsls	r2, r3, #5
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	4413      	add	r3, r2
 8010c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	693a      	ldr	r2, [r7, #16]
 8010c5c:	4013      	ands	r3, r2
 8010c5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010c60:	68bb      	ldr	r3, [r7, #8]
}
 8010c62:	4618      	mov	r0, r3
 8010c64:	371c      	adds	r7, #28
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c6e:	b480      	push	{r7}
 8010c70:	b083      	sub	sp, #12
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	695b      	ldr	r3, [r3, #20]
 8010c7a:	f003 0301 	and.w	r3, r3, #1
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	370c      	adds	r7, #12
 8010c82:	46bd      	mov	sp, r7
 8010c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c88:	4770      	bx	lr

08010c8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b085      	sub	sp, #20
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	68fa      	ldr	r2, [r7, #12]
 8010ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ca4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010ca8:	f023 0307 	bic.w	r3, r3, #7
 8010cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	68fa      	ldr	r2, [r7, #12]
 8010cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010cc2:	2300      	movs	r3, #0
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3714      	adds	r7, #20
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b087      	sub	sp, #28
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	607a      	str	r2, [r7, #4]
 8010cdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	333c      	adds	r3, #60	; 0x3c
 8010ce6:	3304      	adds	r3, #4
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	4a26      	ldr	r2, [pc, #152]	; (8010d88 <USB_EP0_OutStart+0xb8>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d90a      	bls.n	8010d0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d04:	d101      	bne.n	8010d0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	e037      	b.n	8010d7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d10:	461a      	mov	r2, r3
 8010d12:	2300      	movs	r3, #0
 8010d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d1c:	691b      	ldr	r3, [r3, #16]
 8010d1e:	697a      	ldr	r2, [r7, #20]
 8010d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d30:	691b      	ldr	r3, [r3, #16]
 8010d32:	697a      	ldr	r2, [r7, #20]
 8010d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d38:	f043 0318 	orr.w	r3, r3, #24
 8010d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d44:	691b      	ldr	r3, [r3, #16]
 8010d46:	697a      	ldr	r2, [r7, #20]
 8010d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010d50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010d52:	7afb      	ldrb	r3, [r7, #11]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d10f      	bne.n	8010d78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d5e:	461a      	mov	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	697a      	ldr	r2, [r7, #20]
 8010d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010d78:	2300      	movs	r3, #0
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	371c      	adds	r7, #28
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	4f54300a 	.word	0x4f54300a

08010d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b085      	sub	sp, #20
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010d94:	2300      	movs	r3, #0
 8010d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8010da4:	d901      	bls.n	8010daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010da6:	2303      	movs	r3, #3
 8010da8:	e01b      	b.n	8010de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	daf2      	bge.n	8010d98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010db2:	2300      	movs	r3, #0
 8010db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	691b      	ldr	r3, [r3, #16]
 8010dba:	f043 0201 	orr.w	r2, r3, #1
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	3301      	adds	r3, #1
 8010dc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8010dce:	d901      	bls.n	8010dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010dd0:	2303      	movs	r3, #3
 8010dd2:	e006      	b.n	8010de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	691b      	ldr	r3, [r3, #16]
 8010dd8:	f003 0301 	and.w	r3, r3, #1
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d0f0      	beq.n	8010dc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8010de0:	2300      	movs	r3, #0
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3714      	adds	r7, #20
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
	...

08010df0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010dfc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010e00:	f005 ff1a 	bl	8016c38 <USBD_static_malloc>
 8010e04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d109      	bne.n	8010e20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	32b0      	adds	r2, #176	; 0xb0
 8010e16:	2100      	movs	r1, #0
 8010e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010e1c:	2302      	movs	r3, #2
 8010e1e:	e0d4      	b.n	8010fca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010e20:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010e24:	2100      	movs	r1, #0
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f006 fe26 	bl	8017a78 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	32b0      	adds	r2, #176	; 0xb0
 8010e36:	68f9      	ldr	r1, [r7, #12]
 8010e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	32b0      	adds	r2, #176	; 0xb0
 8010e46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	7c1b      	ldrb	r3, [r3, #16]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d138      	bne.n	8010eca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010e58:	4b5e      	ldr	r3, [pc, #376]	; (8010fd4 <USBD_CDC_Init+0x1e4>)
 8010e5a:	7819      	ldrb	r1, [r3, #0]
 8010e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e60:	2202      	movs	r2, #2
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f005 fdc5 	bl	80169f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010e68:	4b5a      	ldr	r3, [pc, #360]	; (8010fd4 <USBD_CDC_Init+0x1e4>)
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	f003 020f 	and.w	r2, r3, #15
 8010e70:	6879      	ldr	r1, [r7, #4]
 8010e72:	4613      	mov	r3, r2
 8010e74:	009b      	lsls	r3, r3, #2
 8010e76:	4413      	add	r3, r2
 8010e78:	009b      	lsls	r3, r3, #2
 8010e7a:	440b      	add	r3, r1
 8010e7c:	3324      	adds	r3, #36	; 0x24
 8010e7e:	2201      	movs	r2, #1
 8010e80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010e82:	4b55      	ldr	r3, [pc, #340]	; (8010fd8 <USBD_CDC_Init+0x1e8>)
 8010e84:	7819      	ldrb	r1, [r3, #0]
 8010e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e8a:	2202      	movs	r2, #2
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f005 fdb0 	bl	80169f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010e92:	4b51      	ldr	r3, [pc, #324]	; (8010fd8 <USBD_CDC_Init+0x1e8>)
 8010e94:	781b      	ldrb	r3, [r3, #0]
 8010e96:	f003 020f 	and.w	r2, r3, #15
 8010e9a:	6879      	ldr	r1, [r7, #4]
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	009b      	lsls	r3, r3, #2
 8010ea0:	4413      	add	r3, r2
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	440b      	add	r3, r1
 8010ea6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010eaa:	2201      	movs	r2, #1
 8010eac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010eae:	4b4b      	ldr	r3, [pc, #300]	; (8010fdc <USBD_CDC_Init+0x1ec>)
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	f003 020f 	and.w	r2, r3, #15
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	4613      	mov	r3, r2
 8010eba:	009b      	lsls	r3, r3, #2
 8010ebc:	4413      	add	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	440b      	add	r3, r1
 8010ec2:	3326      	adds	r3, #38	; 0x26
 8010ec4:	2210      	movs	r2, #16
 8010ec6:	801a      	strh	r2, [r3, #0]
 8010ec8:	e035      	b.n	8010f36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010eca:	4b42      	ldr	r3, [pc, #264]	; (8010fd4 <USBD_CDC_Init+0x1e4>)
 8010ecc:	7819      	ldrb	r1, [r3, #0]
 8010ece:	2340      	movs	r3, #64	; 0x40
 8010ed0:	2202      	movs	r2, #2
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f005 fd8d 	bl	80169f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010ed8:	4b3e      	ldr	r3, [pc, #248]	; (8010fd4 <USBD_CDC_Init+0x1e4>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	f003 020f 	and.w	r2, r3, #15
 8010ee0:	6879      	ldr	r1, [r7, #4]
 8010ee2:	4613      	mov	r3, r2
 8010ee4:	009b      	lsls	r3, r3, #2
 8010ee6:	4413      	add	r3, r2
 8010ee8:	009b      	lsls	r3, r3, #2
 8010eea:	440b      	add	r3, r1
 8010eec:	3324      	adds	r3, #36	; 0x24
 8010eee:	2201      	movs	r2, #1
 8010ef0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010ef2:	4b39      	ldr	r3, [pc, #228]	; (8010fd8 <USBD_CDC_Init+0x1e8>)
 8010ef4:	7819      	ldrb	r1, [r3, #0]
 8010ef6:	2340      	movs	r3, #64	; 0x40
 8010ef8:	2202      	movs	r2, #2
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f005 fd79 	bl	80169f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010f00:	4b35      	ldr	r3, [pc, #212]	; (8010fd8 <USBD_CDC_Init+0x1e8>)
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	f003 020f 	and.w	r2, r3, #15
 8010f08:	6879      	ldr	r1, [r7, #4]
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	009b      	lsls	r3, r3, #2
 8010f0e:	4413      	add	r3, r2
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	440b      	add	r3, r1
 8010f14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010f18:	2201      	movs	r2, #1
 8010f1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010f1c:	4b2f      	ldr	r3, [pc, #188]	; (8010fdc <USBD_CDC_Init+0x1ec>)
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	f003 020f 	and.w	r2, r3, #15
 8010f24:	6879      	ldr	r1, [r7, #4]
 8010f26:	4613      	mov	r3, r2
 8010f28:	009b      	lsls	r3, r3, #2
 8010f2a:	4413      	add	r3, r2
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	440b      	add	r3, r1
 8010f30:	3326      	adds	r3, #38	; 0x26
 8010f32:	2210      	movs	r2, #16
 8010f34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010f36:	4b29      	ldr	r3, [pc, #164]	; (8010fdc <USBD_CDC_Init+0x1ec>)
 8010f38:	7819      	ldrb	r1, [r3, #0]
 8010f3a:	2308      	movs	r3, #8
 8010f3c:	2203      	movs	r2, #3
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f005 fd57 	bl	80169f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010f44:	4b25      	ldr	r3, [pc, #148]	; (8010fdc <USBD_CDC_Init+0x1ec>)
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	f003 020f 	and.w	r2, r3, #15
 8010f4c:	6879      	ldr	r1, [r7, #4]
 8010f4e:	4613      	mov	r3, r2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	4413      	add	r3, r2
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	440b      	add	r3, r1
 8010f58:	3324      	adds	r3, #36	; 0x24
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2200      	movs	r2, #0
 8010f62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	33b0      	adds	r3, #176	; 0xb0
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	4413      	add	r3, r2
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2200      	movs	r2, #0
 8010f86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d101      	bne.n	8010f98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010f94:	2302      	movs	r3, #2
 8010f96:	e018      	b.n	8010fca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	7c1b      	ldrb	r3, [r3, #16]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d10a      	bne.n	8010fb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010fa0:	4b0d      	ldr	r3, [pc, #52]	; (8010fd8 <USBD_CDC_Init+0x1e8>)
 8010fa2:	7819      	ldrb	r1, [r3, #0]
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f005 fe0e 	bl	8016bd0 <USBD_LL_PrepareReceive>
 8010fb4:	e008      	b.n	8010fc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010fb6:	4b08      	ldr	r3, [pc, #32]	; (8010fd8 <USBD_CDC_Init+0x1e8>)
 8010fb8:	7819      	ldrb	r1, [r3, #0]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fc0:	2340      	movs	r3, #64	; 0x40
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f005 fe04 	bl	8016bd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	200003e7 	.word	0x200003e7
 8010fd8:	200003e8 	.word	0x200003e8
 8010fdc:	200003e9 	.word	0x200003e9

08010fe0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	460b      	mov	r3, r1
 8010fea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010fec:	4b3a      	ldr	r3, [pc, #232]	; (80110d8 <USBD_CDC_DeInit+0xf8>)
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f005 fd23 	bl	8016a3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010ff8:	4b37      	ldr	r3, [pc, #220]	; (80110d8 <USBD_CDC_DeInit+0xf8>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	f003 020f 	and.w	r2, r3, #15
 8011000:	6879      	ldr	r1, [r7, #4]
 8011002:	4613      	mov	r3, r2
 8011004:	009b      	lsls	r3, r3, #2
 8011006:	4413      	add	r3, r2
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	440b      	add	r3, r1
 801100c:	3324      	adds	r3, #36	; 0x24
 801100e:	2200      	movs	r2, #0
 8011010:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011012:	4b32      	ldr	r3, [pc, #200]	; (80110dc <USBD_CDC_DeInit+0xfc>)
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	4619      	mov	r1, r3
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f005 fd10 	bl	8016a3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801101e:	4b2f      	ldr	r3, [pc, #188]	; (80110dc <USBD_CDC_DeInit+0xfc>)
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	f003 020f 	and.w	r2, r3, #15
 8011026:	6879      	ldr	r1, [r7, #4]
 8011028:	4613      	mov	r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	4413      	add	r3, r2
 801102e:	009b      	lsls	r3, r3, #2
 8011030:	440b      	add	r3, r1
 8011032:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011036:	2200      	movs	r2, #0
 8011038:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801103a:	4b29      	ldr	r3, [pc, #164]	; (80110e0 <USBD_CDC_DeInit+0x100>)
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	4619      	mov	r1, r3
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f005 fcfc 	bl	8016a3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011046:	4b26      	ldr	r3, [pc, #152]	; (80110e0 <USBD_CDC_DeInit+0x100>)
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	f003 020f 	and.w	r2, r3, #15
 801104e:	6879      	ldr	r1, [r7, #4]
 8011050:	4613      	mov	r3, r2
 8011052:	009b      	lsls	r3, r3, #2
 8011054:	4413      	add	r3, r2
 8011056:	009b      	lsls	r3, r3, #2
 8011058:	440b      	add	r3, r1
 801105a:	3324      	adds	r3, #36	; 0x24
 801105c:	2200      	movs	r2, #0
 801105e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011060:	4b1f      	ldr	r3, [pc, #124]	; (80110e0 <USBD_CDC_DeInit+0x100>)
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	f003 020f 	and.w	r2, r3, #15
 8011068:	6879      	ldr	r1, [r7, #4]
 801106a:	4613      	mov	r3, r2
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	4413      	add	r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	440b      	add	r3, r1
 8011074:	3326      	adds	r3, #38	; 0x26
 8011076:	2200      	movs	r2, #0
 8011078:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	32b0      	adds	r2, #176	; 0xb0
 8011084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d01f      	beq.n	80110cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011092:	687a      	ldr	r2, [r7, #4]
 8011094:	33b0      	adds	r3, #176	; 0xb0
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4413      	add	r3, r2
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	32b0      	adds	r2, #176	; 0xb0
 80110aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f005 fdd0 	bl	8016c54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	32b0      	adds	r2, #176	; 0xb0
 80110be:	2100      	movs	r1, #0
 80110c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80110cc:	2300      	movs	r3, #0
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3708      	adds	r7, #8
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	200003e7 	.word	0x200003e7
 80110dc:	200003e8 	.word	0x200003e8
 80110e0:	200003e9 	.word	0x200003e9

080110e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b086      	sub	sp, #24
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	32b0      	adds	r2, #176	; 0xb0
 80110f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80110fe:	2300      	movs	r3, #0
 8011100:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011102:	2300      	movs	r3, #0
 8011104:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011106:	2300      	movs	r3, #0
 8011108:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d101      	bne.n	8011114 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011110:	2303      	movs	r3, #3
 8011112:	e0bf      	b.n	8011294 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801111c:	2b00      	cmp	r3, #0
 801111e:	d050      	beq.n	80111c2 <USBD_CDC_Setup+0xde>
 8011120:	2b20      	cmp	r3, #32
 8011122:	f040 80af 	bne.w	8011284 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	88db      	ldrh	r3, [r3, #6]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d03a      	beq.n	80111a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	b25b      	sxtb	r3, r3
 8011134:	2b00      	cmp	r3, #0
 8011136:	da1b      	bge.n	8011170 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	33b0      	adds	r3, #176	; 0xb0
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	4413      	add	r3, r2
 8011146:	685b      	ldr	r3, [r3, #4]
 8011148:	689b      	ldr	r3, [r3, #8]
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801114e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011150:	683a      	ldr	r2, [r7, #0]
 8011152:	88d2      	ldrh	r2, [r2, #6]
 8011154:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	88db      	ldrh	r3, [r3, #6]
 801115a:	2b07      	cmp	r3, #7
 801115c:	bf28      	it	cs
 801115e:	2307      	movcs	r3, #7
 8011160:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	89fa      	ldrh	r2, [r7, #14]
 8011166:	4619      	mov	r1, r3
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f001 fd49 	bl	8012c00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801116e:	e090      	b.n	8011292 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	785a      	ldrb	r2, [r3, #1]
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	88db      	ldrh	r3, [r3, #6]
 801117e:	2b3f      	cmp	r3, #63	; 0x3f
 8011180:	d803      	bhi.n	801118a <USBD_CDC_Setup+0xa6>
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	88db      	ldrh	r3, [r3, #6]
 8011186:	b2da      	uxtb	r2, r3
 8011188:	e000      	b.n	801118c <USBD_CDC_Setup+0xa8>
 801118a:	2240      	movs	r2, #64	; 0x40
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011192:	6939      	ldr	r1, [r7, #16]
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801119a:	461a      	mov	r2, r3
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f001 fd5b 	bl	8012c58 <USBD_CtlPrepareRx>
      break;
 80111a2:	e076      	b.n	8011292 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	33b0      	adds	r3, #176	; 0xb0
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	4413      	add	r3, r2
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	7850      	ldrb	r0, [r2, #1]
 80111ba:	2200      	movs	r2, #0
 80111bc:	6839      	ldr	r1, [r7, #0]
 80111be:	4798      	blx	r3
      break;
 80111c0:	e067      	b.n	8011292 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	785b      	ldrb	r3, [r3, #1]
 80111c6:	2b0b      	cmp	r3, #11
 80111c8:	d851      	bhi.n	801126e <USBD_CDC_Setup+0x18a>
 80111ca:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <USBD_CDC_Setup+0xec>)
 80111cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d0:	08011201 	.word	0x08011201
 80111d4:	0801127d 	.word	0x0801127d
 80111d8:	0801126f 	.word	0x0801126f
 80111dc:	0801126f 	.word	0x0801126f
 80111e0:	0801126f 	.word	0x0801126f
 80111e4:	0801126f 	.word	0x0801126f
 80111e8:	0801126f 	.word	0x0801126f
 80111ec:	0801126f 	.word	0x0801126f
 80111f0:	0801126f 	.word	0x0801126f
 80111f4:	0801126f 	.word	0x0801126f
 80111f8:	0801122b 	.word	0x0801122b
 80111fc:	08011255 	.word	0x08011255
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011206:	b2db      	uxtb	r3, r3
 8011208:	2b03      	cmp	r3, #3
 801120a:	d107      	bne.n	801121c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801120c:	f107 030a 	add.w	r3, r7, #10
 8011210:	2202      	movs	r2, #2
 8011212:	4619      	mov	r1, r3
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f001 fcf3 	bl	8012c00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801121a:	e032      	b.n	8011282 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801121c:	6839      	ldr	r1, [r7, #0]
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f001 fc7d 	bl	8012b1e <USBD_CtlError>
            ret = USBD_FAIL;
 8011224:	2303      	movs	r3, #3
 8011226:	75fb      	strb	r3, [r7, #23]
          break;
 8011228:	e02b      	b.n	8011282 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011230:	b2db      	uxtb	r3, r3
 8011232:	2b03      	cmp	r3, #3
 8011234:	d107      	bne.n	8011246 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011236:	f107 030d 	add.w	r3, r7, #13
 801123a:	2201      	movs	r2, #1
 801123c:	4619      	mov	r1, r3
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f001 fcde 	bl	8012c00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011244:	e01d      	b.n	8011282 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f001 fc68 	bl	8012b1e <USBD_CtlError>
            ret = USBD_FAIL;
 801124e:	2303      	movs	r3, #3
 8011250:	75fb      	strb	r3, [r7, #23]
          break;
 8011252:	e016      	b.n	8011282 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801125a:	b2db      	uxtb	r3, r3
 801125c:	2b03      	cmp	r3, #3
 801125e:	d00f      	beq.n	8011280 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011260:	6839      	ldr	r1, [r7, #0]
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f001 fc5b 	bl	8012b1e <USBD_CtlError>
            ret = USBD_FAIL;
 8011268:	2303      	movs	r3, #3
 801126a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801126c:	e008      	b.n	8011280 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801126e:	6839      	ldr	r1, [r7, #0]
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f001 fc54 	bl	8012b1e <USBD_CtlError>
          ret = USBD_FAIL;
 8011276:	2303      	movs	r3, #3
 8011278:	75fb      	strb	r3, [r7, #23]
          break;
 801127a:	e002      	b.n	8011282 <USBD_CDC_Setup+0x19e>
          break;
 801127c:	bf00      	nop
 801127e:	e008      	b.n	8011292 <USBD_CDC_Setup+0x1ae>
          break;
 8011280:	bf00      	nop
      }
      break;
 8011282:	e006      	b.n	8011292 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011284:	6839      	ldr	r1, [r7, #0]
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f001 fc49 	bl	8012b1e <USBD_CtlError>
      ret = USBD_FAIL;
 801128c:	2303      	movs	r3, #3
 801128e:	75fb      	strb	r3, [r7, #23]
      break;
 8011290:	bf00      	nop
  }

  return (uint8_t)ret;
 8011292:	7dfb      	ldrb	r3, [r7, #23]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b084      	sub	sp, #16
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	460b      	mov	r3, r1
 80112a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	32b0      	adds	r2, #176	; 0xb0
 80112ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d101      	bne.n	80112c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80112c2:	2303      	movs	r3, #3
 80112c4:	e065      	b.n	8011392 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	32b0      	adds	r2, #176	; 0xb0
 80112d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80112d6:	78fb      	ldrb	r3, [r7, #3]
 80112d8:	f003 020f 	and.w	r2, r3, #15
 80112dc:	6879      	ldr	r1, [r7, #4]
 80112de:	4613      	mov	r3, r2
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	4413      	add	r3, r2
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	440b      	add	r3, r1
 80112e8:	3318      	adds	r3, #24
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d02f      	beq.n	8011350 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80112f0:	78fb      	ldrb	r3, [r7, #3]
 80112f2:	f003 020f 	and.w	r2, r3, #15
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	4613      	mov	r3, r2
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	4413      	add	r3, r2
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	440b      	add	r3, r1
 8011302:	3318      	adds	r3, #24
 8011304:	681a      	ldr	r2, [r3, #0]
 8011306:	78fb      	ldrb	r3, [r7, #3]
 8011308:	f003 010f 	and.w	r1, r3, #15
 801130c:	68f8      	ldr	r0, [r7, #12]
 801130e:	460b      	mov	r3, r1
 8011310:	00db      	lsls	r3, r3, #3
 8011312:	440b      	add	r3, r1
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	4403      	add	r3, r0
 8011318:	331c      	adds	r3, #28
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011320:	fb01 f303 	mul.w	r3, r1, r3
 8011324:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011326:	2b00      	cmp	r3, #0
 8011328:	d112      	bne.n	8011350 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801132a:	78fb      	ldrb	r3, [r7, #3]
 801132c:	f003 020f 	and.w	r2, r3, #15
 8011330:	6879      	ldr	r1, [r7, #4]
 8011332:	4613      	mov	r3, r2
 8011334:	009b      	lsls	r3, r3, #2
 8011336:	4413      	add	r3, r2
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	440b      	add	r3, r1
 801133c:	3318      	adds	r3, #24
 801133e:	2200      	movs	r2, #0
 8011340:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011342:	78f9      	ldrb	r1, [r7, #3]
 8011344:	2300      	movs	r3, #0
 8011346:	2200      	movs	r2, #0
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f005 fc20 	bl	8016b8e <USBD_LL_Transmit>
 801134e:	e01f      	b.n	8011390 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	2200      	movs	r2, #0
 8011354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	33b0      	adds	r3, #176	; 0xb0
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	4413      	add	r3, r2
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	691b      	ldr	r3, [r3, #16]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d010      	beq.n	8011390 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	33b0      	adds	r3, #176	; 0xb0
 8011378:	009b      	lsls	r3, r3, #2
 801137a:	4413      	add	r3, r2
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	691b      	ldr	r3, [r3, #16]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011386:	68ba      	ldr	r2, [r7, #8]
 8011388:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801138c:	78fa      	ldrb	r2, [r7, #3]
 801138e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011390:	2300      	movs	r3, #0
}
 8011392:	4618      	mov	r0, r3
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}

0801139a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801139a:	b580      	push	{r7, lr}
 801139c:	b084      	sub	sp, #16
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
 80113a2:	460b      	mov	r3, r1
 80113a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	32b0      	adds	r2, #176	; 0xb0
 80113b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	32b0      	adds	r2, #176	; 0xb0
 80113c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d101      	bne.n	80113cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80113c8:	2303      	movs	r3, #3
 80113ca:	e01a      	b.n	8011402 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80113cc:	78fb      	ldrb	r3, [r7, #3]
 80113ce:	4619      	mov	r1, r3
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f005 fc1e 	bl	8016c12 <USBD_LL_GetRxDataSize>
 80113d6:	4602      	mov	r2, r0
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	33b0      	adds	r3, #176	; 0xb0
 80113e8:	009b      	lsls	r3, r3, #2
 80113ea:	4413      	add	r3, r2
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80113fc:	4611      	mov	r1, r2
 80113fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011400:	2300      	movs	r3, #0
}
 8011402:	4618      	mov	r0, r3
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}

0801140a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801140a:	b580      	push	{r7, lr}
 801140c:	b084      	sub	sp, #16
 801140e:	af00      	add	r7, sp, #0
 8011410:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	32b0      	adds	r2, #176	; 0xb0
 801141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011420:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d101      	bne.n	801142c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011428:	2303      	movs	r3, #3
 801142a:	e025      	b.n	8011478 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	33b0      	adds	r3, #176	; 0xb0
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	4413      	add	r3, r2
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d01a      	beq.n	8011476 <USBD_CDC_EP0_RxReady+0x6c>
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011446:	2bff      	cmp	r3, #255	; 0xff
 8011448:	d015      	beq.n	8011476 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	33b0      	adds	r3, #176	; 0xb0
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	4413      	add	r3, r2
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	689b      	ldr	r3, [r3, #8]
 801145c:	68fa      	ldr	r2, [r7, #12]
 801145e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8011462:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011464:	68fa      	ldr	r2, [r7, #12]
 8011466:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801146a:	b292      	uxth	r2, r2
 801146c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	22ff      	movs	r2, #255	; 0xff
 8011472:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011476:	2300      	movs	r3, #0
}
 8011478:	4618      	mov	r0, r3
 801147a:	3710      	adds	r7, #16
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011488:	2182      	movs	r1, #130	; 0x82
 801148a:	4818      	ldr	r0, [pc, #96]	; (80114ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 801148c:	f000 fd0f 	bl	8011eae <USBD_GetEpDesc>
 8011490:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011492:	2101      	movs	r1, #1
 8011494:	4815      	ldr	r0, [pc, #84]	; (80114ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011496:	f000 fd0a 	bl	8011eae <USBD_GetEpDesc>
 801149a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801149c:	2181      	movs	r1, #129	; 0x81
 801149e:	4813      	ldr	r0, [pc, #76]	; (80114ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80114a0:	f000 fd05 	bl	8011eae <USBD_GetEpDesc>
 80114a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d002      	beq.n	80114b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	2210      	movs	r2, #16
 80114b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d006      	beq.n	80114c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	2200      	movs	r2, #0
 80114bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80114c0:	711a      	strb	r2, [r3, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d006      	beq.n	80114da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2200      	movs	r2, #0
 80114d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80114d4:	711a      	strb	r2, [r3, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2243      	movs	r2, #67	; 0x43
 80114de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80114e0:	4b02      	ldr	r3, [pc, #8]	; (80114ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3718      	adds	r7, #24
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	200003a4 	.word	0x200003a4

080114f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80114f8:	2182      	movs	r1, #130	; 0x82
 80114fa:	4818      	ldr	r0, [pc, #96]	; (801155c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80114fc:	f000 fcd7 	bl	8011eae <USBD_GetEpDesc>
 8011500:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011502:	2101      	movs	r1, #1
 8011504:	4815      	ldr	r0, [pc, #84]	; (801155c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011506:	f000 fcd2 	bl	8011eae <USBD_GetEpDesc>
 801150a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801150c:	2181      	movs	r1, #129	; 0x81
 801150e:	4813      	ldr	r0, [pc, #76]	; (801155c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011510:	f000 fccd 	bl	8011eae <USBD_GetEpDesc>
 8011514:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d002      	beq.n	8011522 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	2210      	movs	r2, #16
 8011520:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d006      	beq.n	8011536 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2200      	movs	r2, #0
 801152c:	711a      	strb	r2, [r3, #4]
 801152e:	2200      	movs	r2, #0
 8011530:	f042 0202 	orr.w	r2, r2, #2
 8011534:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d006      	beq.n	801154a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	2200      	movs	r2, #0
 8011540:	711a      	strb	r2, [r3, #4]
 8011542:	2200      	movs	r2, #0
 8011544:	f042 0202 	orr.w	r2, r2, #2
 8011548:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2243      	movs	r2, #67	; 0x43
 801154e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011550:	4b02      	ldr	r3, [pc, #8]	; (801155c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011552:	4618      	mov	r0, r3
 8011554:	3718      	adds	r7, #24
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	200003a4 	.word	0x200003a4

08011560 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b086      	sub	sp, #24
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011568:	2182      	movs	r1, #130	; 0x82
 801156a:	4818      	ldr	r0, [pc, #96]	; (80115cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801156c:	f000 fc9f 	bl	8011eae <USBD_GetEpDesc>
 8011570:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011572:	2101      	movs	r1, #1
 8011574:	4815      	ldr	r0, [pc, #84]	; (80115cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011576:	f000 fc9a 	bl	8011eae <USBD_GetEpDesc>
 801157a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801157c:	2181      	movs	r1, #129	; 0x81
 801157e:	4813      	ldr	r0, [pc, #76]	; (80115cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011580:	f000 fc95 	bl	8011eae <USBD_GetEpDesc>
 8011584:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d002      	beq.n	8011592 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	2210      	movs	r2, #16
 8011590:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d006      	beq.n	80115a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	2200      	movs	r2, #0
 801159c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80115a0:	711a      	strb	r2, [r3, #4]
 80115a2:	2200      	movs	r2, #0
 80115a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d006      	beq.n	80115ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2200      	movs	r2, #0
 80115b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80115b4:	711a      	strb	r2, [r3, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2243      	movs	r2, #67	; 0x43
 80115be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80115c0:	4b02      	ldr	r3, [pc, #8]	; (80115cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3718      	adds	r7, #24
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	200003a4 	.word	0x200003a4

080115d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b083      	sub	sp, #12
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	220a      	movs	r2, #10
 80115dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80115de:	4b03      	ldr	r3, [pc, #12]	; (80115ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	370c      	adds	r7, #12
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr
 80115ec:	20000360 	.word	0x20000360

080115f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d101      	bne.n	8011604 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011600:	2303      	movs	r3, #3
 8011602:	e009      	b.n	8011618 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	33b0      	adds	r3, #176	; 0xb0
 801160e:	009b      	lsls	r3, r3, #2
 8011610:	4413      	add	r3, r2
 8011612:	683a      	ldr	r2, [r7, #0]
 8011614:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011616:	2300      	movs	r3, #0
}
 8011618:	4618      	mov	r0, r3
 801161a:	370c      	adds	r7, #12
 801161c:	46bd      	mov	sp, r7
 801161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011622:	4770      	bx	lr

08011624 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011624:	b480      	push	{r7}
 8011626:	b087      	sub	sp, #28
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	32b0      	adds	r2, #176	; 0xb0
 801163a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801163e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d101      	bne.n	801164a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011646:	2303      	movs	r3, #3
 8011648:	e008      	b.n	801165c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	68ba      	ldr	r2, [r7, #8]
 801164e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	371c      	adds	r7, #28
 8011660:	46bd      	mov	sp, r7
 8011662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011666:	4770      	bx	lr

08011668 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011668:	b480      	push	{r7}
 801166a:	b085      	sub	sp, #20
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	32b0      	adds	r2, #176	; 0xb0
 801167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011680:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d101      	bne.n	801168c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011688:	2303      	movs	r3, #3
 801168a:	e004      	b.n	8011696 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011694:	2300      	movs	r3, #0
}
 8011696:	4618      	mov	r0, r3
 8011698:	3714      	adds	r7, #20
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr
	...

080116a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	32b0      	adds	r2, #176	; 0xb0
 80116b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	32b0      	adds	r2, #176	; 0xb0
 80116c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d101      	bne.n	80116d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80116ce:	2303      	movs	r3, #3
 80116d0:	e018      	b.n	8011704 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	7c1b      	ldrb	r3, [r3, #16]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d10a      	bne.n	80116f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80116da:	4b0c      	ldr	r3, [pc, #48]	; (801170c <USBD_CDC_ReceivePacket+0x68>)
 80116dc:	7819      	ldrb	r1, [r3, #0]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f005 fa71 	bl	8016bd0 <USBD_LL_PrepareReceive>
 80116ee:	e008      	b.n	8011702 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80116f0:	4b06      	ldr	r3, [pc, #24]	; (801170c <USBD_CDC_ReceivePacket+0x68>)
 80116f2:	7819      	ldrb	r1, [r3, #0]
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80116fa:	2340      	movs	r3, #64	; 0x40
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f005 fa67 	bl	8016bd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011702:	2300      	movs	r3, #0
}
 8011704:	4618      	mov	r0, r3
 8011706:	3710      	adds	r7, #16
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	200003e8 	.word	0x200003e8

08011710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	4613      	mov	r3, r2
 801171c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d101      	bne.n	8011728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011724:	2303      	movs	r3, #3
 8011726:	e01f      	b.n	8011768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2200      	movs	r2, #0
 801172c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2200      	movs	r2, #0
 8011734:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2200      	movs	r2, #0
 801173c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d003      	beq.n	801174e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	68ba      	ldr	r2, [r7, #8]
 801174a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2201      	movs	r2, #1
 8011752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	79fa      	ldrb	r2, [r7, #7]
 801175a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	f005 f8e1 	bl	8016924 <USBD_LL_Init>
 8011762:	4603      	mov	r3, r0
 8011764:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011766:	7dfb      	ldrb	r3, [r7, #23]
}
 8011768:	4618      	mov	r0, r3
 801176a:	3718      	adds	r7, #24
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}

08011770 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801177a:	2300      	movs	r3, #0
 801177c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d101      	bne.n	8011788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011784:	2303      	movs	r3, #3
 8011786:	e025      	b.n	80117d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	683a      	ldr	r2, [r7, #0]
 801178c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	32ae      	adds	r2, #174	; 0xae
 801179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d00f      	beq.n	80117c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	32ae      	adds	r2, #174	; 0xae
 80117ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117b4:	f107 020e 	add.w	r2, r7, #14
 80117b8:	4610      	mov	r0, r2
 80117ba:	4798      	blx	r3
 80117bc:	4602      	mov	r2, r0
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80117ca:	1c5a      	adds	r2, r3, #1
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80117d2:	2300      	movs	r3, #0
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3710      	adds	r7, #16
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}

080117dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f005 f8e9 	bl	80169bc <USBD_LL_Start>
 80117ea:	4603      	mov	r3, r0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80117fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr

0801180a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b084      	sub	sp, #16
 801180e:	af00      	add	r7, sp, #0
 8011810:	6078      	str	r0, [r7, #4]
 8011812:	460b      	mov	r3, r1
 8011814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011816:	2300      	movs	r3, #0
 8011818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011820:	2b00      	cmp	r3, #0
 8011822:	d009      	beq.n	8011838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	78fa      	ldrb	r2, [r7, #3]
 801182e:	4611      	mov	r1, r2
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	4798      	blx	r3
 8011834:	4603      	mov	r3, r0
 8011836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011838:	7bfb      	ldrb	r3, [r7, #15]
}
 801183a:	4618      	mov	r0, r3
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b084      	sub	sp, #16
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
 801184a:	460b      	mov	r3, r1
 801184c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	78fa      	ldrb	r2, [r7, #3]
 801185c:	4611      	mov	r1, r2
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	4798      	blx	r3
 8011862:	4603      	mov	r3, r0
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011868:	2303      	movs	r3, #3
 801186a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801186c:	7bfb      	ldrb	r3, [r7, #15]
}
 801186e:	4618      	mov	r0, r3
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}

08011876 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b084      	sub	sp, #16
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
 801187e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011886:	6839      	ldr	r1, [r7, #0]
 8011888:	4618      	mov	r0, r3
 801188a:	f001 f90e 	bl	8012aaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2201      	movs	r2, #1
 8011892:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801189c:	461a      	mov	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80118aa:	f003 031f 	and.w	r3, r3, #31
 80118ae:	2b02      	cmp	r3, #2
 80118b0:	d01a      	beq.n	80118e8 <USBD_LL_SetupStage+0x72>
 80118b2:	2b02      	cmp	r3, #2
 80118b4:	d822      	bhi.n	80118fc <USBD_LL_SetupStage+0x86>
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d002      	beq.n	80118c0 <USBD_LL_SetupStage+0x4a>
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d00a      	beq.n	80118d4 <USBD_LL_SetupStage+0x5e>
 80118be:	e01d      	b.n	80118fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118c6:	4619      	mov	r1, r3
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f000 fb65 	bl	8011f98 <USBD_StdDevReq>
 80118ce:	4603      	mov	r3, r0
 80118d0:	73fb      	strb	r3, [r7, #15]
      break;
 80118d2:	e020      	b.n	8011916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118da:	4619      	mov	r1, r3
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f000 fbcd 	bl	801207c <USBD_StdItfReq>
 80118e2:	4603      	mov	r3, r0
 80118e4:	73fb      	strb	r3, [r7, #15]
      break;
 80118e6:	e016      	b.n	8011916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80118ee:	4619      	mov	r1, r3
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fc2f 	bl	8012154 <USBD_StdEPReq>
 80118f6:	4603      	mov	r3, r0
 80118f8:	73fb      	strb	r3, [r7, #15]
      break;
 80118fa:	e00c      	b.n	8011916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011902:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011906:	b2db      	uxtb	r3, r3
 8011908:	4619      	mov	r1, r3
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f005 f8b6 	bl	8016a7c <USBD_LL_StallEP>
 8011910:	4603      	mov	r3, r0
 8011912:	73fb      	strb	r3, [r7, #15]
      break;
 8011914:	bf00      	nop
  }

  return ret;
 8011916:	7bfb      	ldrb	r3, [r7, #15]
}
 8011918:	4618      	mov	r0, r3
 801191a:	3710      	adds	r7, #16
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b086      	sub	sp, #24
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	460b      	mov	r3, r1
 801192a:	607a      	str	r2, [r7, #4]
 801192c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801192e:	2300      	movs	r3, #0
 8011930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011932:	7afb      	ldrb	r3, [r7, #11]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d16e      	bne.n	8011a16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801193e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011946:	2b03      	cmp	r3, #3
 8011948:	f040 8098 	bne.w	8011a7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	689a      	ldr	r2, [r3, #8]
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	429a      	cmp	r2, r3
 8011956:	d913      	bls.n	8011980 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	689a      	ldr	r2, [r3, #8]
 801195c:	693b      	ldr	r3, [r7, #16]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	1ad2      	subs	r2, r2, r3
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	68da      	ldr	r2, [r3, #12]
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	689b      	ldr	r3, [r3, #8]
 801196e:	4293      	cmp	r3, r2
 8011970:	bf28      	it	cs
 8011972:	4613      	movcs	r3, r2
 8011974:	461a      	mov	r2, r3
 8011976:	6879      	ldr	r1, [r7, #4]
 8011978:	68f8      	ldr	r0, [r7, #12]
 801197a:	f001 f98a 	bl	8012c92 <USBD_CtlContinueRx>
 801197e:	e07d      	b.n	8011a7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011986:	f003 031f 	and.w	r3, r3, #31
 801198a:	2b02      	cmp	r3, #2
 801198c:	d014      	beq.n	80119b8 <USBD_LL_DataOutStage+0x98>
 801198e:	2b02      	cmp	r3, #2
 8011990:	d81d      	bhi.n	80119ce <USBD_LL_DataOutStage+0xae>
 8011992:	2b00      	cmp	r3, #0
 8011994:	d002      	beq.n	801199c <USBD_LL_DataOutStage+0x7c>
 8011996:	2b01      	cmp	r3, #1
 8011998:	d003      	beq.n	80119a2 <USBD_LL_DataOutStage+0x82>
 801199a:	e018      	b.n	80119ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801199c:	2300      	movs	r3, #0
 801199e:	75bb      	strb	r3, [r7, #22]
            break;
 80119a0:	e018      	b.n	80119d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80119a8:	b2db      	uxtb	r3, r3
 80119aa:	4619      	mov	r1, r3
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	f000 fa64 	bl	8011e7a <USBD_CoreFindIF>
 80119b2:	4603      	mov	r3, r0
 80119b4:	75bb      	strb	r3, [r7, #22]
            break;
 80119b6:	e00d      	b.n	80119d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	4619      	mov	r1, r3
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f000 fa66 	bl	8011e94 <USBD_CoreFindEP>
 80119c8:	4603      	mov	r3, r0
 80119ca:	75bb      	strb	r3, [r7, #22]
            break;
 80119cc:	e002      	b.n	80119d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80119ce:	2300      	movs	r3, #0
 80119d0:	75bb      	strb	r3, [r7, #22]
            break;
 80119d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80119d4:	7dbb      	ldrb	r3, [r7, #22]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d119      	bne.n	8011a0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b03      	cmp	r3, #3
 80119e4:	d113      	bne.n	8011a0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80119e6:	7dba      	ldrb	r2, [r7, #22]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	32ae      	adds	r2, #174	; 0xae
 80119ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119f0:	691b      	ldr	r3, [r3, #16]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d00b      	beq.n	8011a0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80119f6:	7dba      	ldrb	r2, [r7, #22]
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80119fe:	7dba      	ldrb	r2, [r7, #22]
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	32ae      	adds	r2, #174	; 0xae
 8011a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a08:	691b      	ldr	r3, [r3, #16]
 8011a0a:	68f8      	ldr	r0, [r7, #12]
 8011a0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	f001 f950 	bl	8012cb4 <USBD_CtlSendStatus>
 8011a14:	e032      	b.n	8011a7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011a16:	7afb      	ldrb	r3, [r7, #11]
 8011a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a1c:	b2db      	uxtb	r3, r3
 8011a1e:	4619      	mov	r1, r3
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f000 fa37 	bl	8011e94 <USBD_CoreFindEP>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a2a:	7dbb      	ldrb	r3, [r7, #22]
 8011a2c:	2bff      	cmp	r3, #255	; 0xff
 8011a2e:	d025      	beq.n	8011a7c <USBD_LL_DataOutStage+0x15c>
 8011a30:	7dbb      	ldrb	r3, [r7, #22]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d122      	bne.n	8011a7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b03      	cmp	r3, #3
 8011a40:	d117      	bne.n	8011a72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011a42:	7dba      	ldrb	r2, [r7, #22]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	32ae      	adds	r2, #174	; 0xae
 8011a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a4c:	699b      	ldr	r3, [r3, #24]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d00f      	beq.n	8011a72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011a52:	7dba      	ldrb	r2, [r7, #22]
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011a5a:	7dba      	ldrb	r2, [r7, #22]
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	32ae      	adds	r2, #174	; 0xae
 8011a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a64:	699b      	ldr	r3, [r3, #24]
 8011a66:	7afa      	ldrb	r2, [r7, #11]
 8011a68:	4611      	mov	r1, r2
 8011a6a:	68f8      	ldr	r0, [r7, #12]
 8011a6c:	4798      	blx	r3
 8011a6e:	4603      	mov	r3, r0
 8011a70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011a72:	7dfb      	ldrb	r3, [r7, #23]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d001      	beq.n	8011a7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011a78:	7dfb      	ldrb	r3, [r7, #23]
 8011a7a:	e000      	b.n	8011a7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011a7c:	2300      	movs	r3, #0
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3718      	adds	r7, #24
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b086      	sub	sp, #24
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	60f8      	str	r0, [r7, #12]
 8011a8e:	460b      	mov	r3, r1
 8011a90:	607a      	str	r2, [r7, #4]
 8011a92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011a94:	7afb      	ldrb	r3, [r7, #11]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d16f      	bne.n	8011b7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	3314      	adds	r3, #20
 8011a9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011aa6:	2b02      	cmp	r3, #2
 8011aa8:	d15a      	bne.n	8011b60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	689a      	ldr	r2, [r3, #8]
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d914      	bls.n	8011ae0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	689a      	ldr	r2, [r3, #8]
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	1ad2      	subs	r2, r2, r3
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	689b      	ldr	r3, [r3, #8]
 8011ac8:	461a      	mov	r2, r3
 8011aca:	6879      	ldr	r1, [r7, #4]
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	f001 f8b2 	bl	8012c36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	2100      	movs	r1, #0
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f005 f879 	bl	8016bd0 <USBD_LL_PrepareReceive>
 8011ade:	e03f      	b.n	8011b60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	68da      	ldr	r2, [r3, #12]
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	689b      	ldr	r3, [r3, #8]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d11c      	bne.n	8011b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	685a      	ldr	r2, [r3, #4]
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d316      	bcc.n	8011b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	685a      	ldr	r2, [r3, #4]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d20f      	bcs.n	8011b26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011b06:	2200      	movs	r2, #0
 8011b08:	2100      	movs	r1, #0
 8011b0a:	68f8      	ldr	r0, [r7, #12]
 8011b0c:	f001 f893 	bl	8012c36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2200      	movs	r2, #0
 8011b14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b18:	2300      	movs	r3, #0
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	68f8      	ldr	r0, [r7, #12]
 8011b20:	f005 f856 	bl	8016bd0 <USBD_LL_PrepareReceive>
 8011b24:	e01c      	b.n	8011b60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	2b03      	cmp	r3, #3
 8011b30:	d10f      	bne.n	8011b52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d009      	beq.n	8011b52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	68f8      	ldr	r0, [r7, #12]
 8011b50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b52:	2180      	movs	r1, #128	; 0x80
 8011b54:	68f8      	ldr	r0, [r7, #12]
 8011b56:	f004 ff91 	bl	8016a7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011b5a:	68f8      	ldr	r0, [r7, #12]
 8011b5c:	f001 f8bd 	bl	8012cda <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d03a      	beq.n	8011be0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011b6a:	68f8      	ldr	r0, [r7, #12]
 8011b6c:	f7ff fe42 	bl	80117f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2200      	movs	r2, #0
 8011b74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011b78:	e032      	b.n	8011be0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011b7a:	7afb      	ldrb	r3, [r7, #11]
 8011b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	4619      	mov	r1, r3
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f000 f985 	bl	8011e94 <USBD_CoreFindEP>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011b8e:	7dfb      	ldrb	r3, [r7, #23]
 8011b90:	2bff      	cmp	r3, #255	; 0xff
 8011b92:	d025      	beq.n	8011be0 <USBD_LL_DataInStage+0x15a>
 8011b94:	7dfb      	ldrb	r3, [r7, #23]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d122      	bne.n	8011be0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	2b03      	cmp	r3, #3
 8011ba4:	d11c      	bne.n	8011be0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011ba6:	7dfa      	ldrb	r2, [r7, #23]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	32ae      	adds	r2, #174	; 0xae
 8011bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bb0:	695b      	ldr	r3, [r3, #20]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d014      	beq.n	8011be0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011bb6:	7dfa      	ldrb	r2, [r7, #23]
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011bbe:	7dfa      	ldrb	r2, [r7, #23]
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	32ae      	adds	r2, #174	; 0xae
 8011bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bc8:	695b      	ldr	r3, [r3, #20]
 8011bca:	7afa      	ldrb	r2, [r7, #11]
 8011bcc:	4611      	mov	r1, r2
 8011bce:	68f8      	ldr	r0, [r7, #12]
 8011bd0:	4798      	blx	r3
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011bd6:	7dbb      	ldrb	r3, [r7, #22]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d001      	beq.n	8011be0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011bdc:	7dbb      	ldrb	r3, [r7, #22]
 8011bde:	e000      	b.n	8011be2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011be0:	2300      	movs	r3, #0
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3718      	adds	r7, #24
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b084      	sub	sp, #16
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2200      	movs	r2, #0
 8011c18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d014      	beq.n	8011c50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d00e      	beq.n	8011c50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	6852      	ldr	r2, [r2, #4]
 8011c3e:	b2d2      	uxtb	r2, r2
 8011c40:	4611      	mov	r1, r2
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	4798      	blx	r3
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011c4c:	2303      	movs	r3, #3
 8011c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011c50:	2340      	movs	r3, #64	; 0x40
 8011c52:	2200      	movs	r2, #0
 8011c54:	2100      	movs	r1, #0
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f004 fecb 	bl	80169f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2201      	movs	r2, #1
 8011c60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2240      	movs	r2, #64	; 0x40
 8011c68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011c6c:	2340      	movs	r3, #64	; 0x40
 8011c6e:	2200      	movs	r2, #0
 8011c70:	2180      	movs	r1, #128	; 0x80
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f004 febd 	bl	80169f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2201      	movs	r2, #1
 8011c7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2240      	movs	r2, #64	; 0x40
 8011c82:	621a      	str	r2, [r3, #32]

  return ret;
 8011c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011c8e:	b480      	push	{r7}
 8011c90:	b083      	sub	sp, #12
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
 8011c96:	460b      	mov	r3, r1
 8011c98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	78fa      	ldrb	r2, [r7, #3]
 8011c9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr

08011cae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011cae:	b480      	push	{r7}
 8011cb0:	b083      	sub	sp, #12
 8011cb2:	af00      	add	r7, sp, #0
 8011cb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	2b04      	cmp	r3, #4
 8011cc0:	d006      	beq.n	8011cd0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cc8:	b2da      	uxtb	r2, r3
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2204      	movs	r2, #4
 8011cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011cd8:	2300      	movs	r3, #0
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce4:	4770      	bx	lr

08011ce6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011ce6:	b480      	push	{r7}
 8011ce8:	b083      	sub	sp, #12
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011cf4:	b2db      	uxtb	r3, r3
 8011cf6:	2b04      	cmp	r3, #4
 8011cf8:	d106      	bne.n	8011d08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011d08:	2300      	movs	r3, #0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	370c      	adds	r7, #12
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr

08011d16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011d16:	b580      	push	{r7, lr}
 8011d18:	b082      	sub	sp, #8
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b03      	cmp	r3, #3
 8011d28:	d110      	bne.n	8011d4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d00b      	beq.n	8011d4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d3a:	69db      	ldr	r3, [r3, #28]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d005      	beq.n	8011d4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d46:	69db      	ldr	r3, [r3, #28]
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011d4c:	2300      	movs	r3, #0
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3708      	adds	r7, #8
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}

08011d56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011d56:	b580      	push	{r7, lr}
 8011d58:	b082      	sub	sp, #8
 8011d5a:	af00      	add	r7, sp, #0
 8011d5c:	6078      	str	r0, [r7, #4]
 8011d5e:	460b      	mov	r3, r1
 8011d60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	32ae      	adds	r2, #174	; 0xae
 8011d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d101      	bne.n	8011d78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011d74:	2303      	movs	r3, #3
 8011d76:	e01c      	b.n	8011db2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	2b03      	cmp	r3, #3
 8011d82:	d115      	bne.n	8011db0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	32ae      	adds	r2, #174	; 0xae
 8011d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d92:	6a1b      	ldr	r3, [r3, #32]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d00b      	beq.n	8011db0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	32ae      	adds	r2, #174	; 0xae
 8011da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011da6:	6a1b      	ldr	r3, [r3, #32]
 8011da8:	78fa      	ldrb	r2, [r7, #3]
 8011daa:	4611      	mov	r1, r2
 8011dac:	6878      	ldr	r0, [r7, #4]
 8011dae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011db0:	2300      	movs	r3, #0
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3708      	adds	r7, #8
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}

08011dba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011dba:	b580      	push	{r7, lr}
 8011dbc:	b082      	sub	sp, #8
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]
 8011dc2:	460b      	mov	r3, r1
 8011dc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	32ae      	adds	r2, #174	; 0xae
 8011dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d101      	bne.n	8011ddc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011dd8:	2303      	movs	r3, #3
 8011dda:	e01c      	b.n	8011e16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011de2:	b2db      	uxtb	r3, r3
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d115      	bne.n	8011e14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	32ae      	adds	r2, #174	; 0xae
 8011df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d00b      	beq.n	8011e14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	32ae      	adds	r2, #174	; 0xae
 8011e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e0c:	78fa      	ldrb	r2, [r7, #3]
 8011e0e:	4611      	mov	r1, r2
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011e14:	2300      	movs	r3, #0
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3708      	adds	r7, #8
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b083      	sub	sp, #12
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e26:	2300      	movs	r3, #0
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	370c      	adds	r7, #12
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e32:	4770      	bx	lr

08011e34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011e34:	b580      	push	{r7, lr}
 8011e36:	b084      	sub	sp, #16
 8011e38:	af00      	add	r7, sp, #0
 8011e3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2201      	movs	r2, #1
 8011e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d00e      	beq.n	8011e70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	6852      	ldr	r2, [r2, #4]
 8011e5e:	b2d2      	uxtb	r2, r2
 8011e60:	4611      	mov	r1, r2
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	4798      	blx	r3
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}

08011e7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011e7a:	b480      	push	{r7}
 8011e7c:	b083      	sub	sp, #12
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	6078      	str	r0, [r7, #4]
 8011e82:	460b      	mov	r3, r1
 8011e84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011e86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	370c      	adds	r7, #12
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr

08011e94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b083      	sub	sp, #12
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011ea0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	370c      	adds	r7, #12
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eac:	4770      	bx	lr

08011eae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b086      	sub	sp, #24
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	885b      	ldrh	r3, [r3, #2]
 8011eca:	b29a      	uxth	r2, r3
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d920      	bls.n	8011f18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011ede:	e013      	b.n	8011f08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011ee0:	f107 030a 	add.w	r3, r7, #10
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	6978      	ldr	r0, [r7, #20]
 8011ee8:	f000 f81b 	bl	8011f22 <USBD_GetNextDesc>
 8011eec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	785b      	ldrb	r3, [r3, #1]
 8011ef2:	2b05      	cmp	r3, #5
 8011ef4:	d108      	bne.n	8011f08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011ef6:	697b      	ldr	r3, [r7, #20]
 8011ef8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011efa:	693b      	ldr	r3, [r7, #16]
 8011efc:	789b      	ldrb	r3, [r3, #2]
 8011efe:	78fa      	ldrb	r2, [r7, #3]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d008      	beq.n	8011f16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011f04:	2300      	movs	r3, #0
 8011f06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	885b      	ldrh	r3, [r3, #2]
 8011f0c:	b29a      	uxth	r2, r3
 8011f0e:	897b      	ldrh	r3, [r7, #10]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d8e5      	bhi.n	8011ee0 <USBD_GetEpDesc+0x32>
 8011f14:	e000      	b.n	8011f18 <USBD_GetEpDesc+0x6a>
          break;
 8011f16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011f18:	693b      	ldr	r3, [r7, #16]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3718      	adds	r7, #24
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}

08011f22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011f22:	b480      	push	{r7}
 8011f24:	b085      	sub	sp, #20
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
 8011f2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	881a      	ldrh	r2, [r3, #0]
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	4413      	add	r3, r2
 8011f3c:	b29a      	uxth	r2, r3
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	461a      	mov	r2, r3
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	4413      	add	r3, r2
 8011f4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	3714      	adds	r7, #20
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011f5c:	b480      	push	{r7}
 8011f5e:	b087      	sub	sp, #28
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	3301      	adds	r3, #1
 8011f72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011f7a:	8a3b      	ldrh	r3, [r7, #16]
 8011f7c:	021b      	lsls	r3, r3, #8
 8011f7e:	b21a      	sxth	r2, r3
 8011f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f84:	4313      	orrs	r3, r2
 8011f86:	b21b      	sxth	r3, r3
 8011f88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	371c      	adds	r7, #28
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr

08011f98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b084      	sub	sp, #16
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011fae:	2b40      	cmp	r3, #64	; 0x40
 8011fb0:	d005      	beq.n	8011fbe <USBD_StdDevReq+0x26>
 8011fb2:	2b40      	cmp	r3, #64	; 0x40
 8011fb4:	d857      	bhi.n	8012066 <USBD_StdDevReq+0xce>
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00f      	beq.n	8011fda <USBD_StdDevReq+0x42>
 8011fba:	2b20      	cmp	r3, #32
 8011fbc:	d153      	bne.n	8012066 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	32ae      	adds	r2, #174	; 0xae
 8011fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fcc:	689b      	ldr	r3, [r3, #8]
 8011fce:	6839      	ldr	r1, [r7, #0]
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	4798      	blx	r3
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8011fd8:	e04a      	b.n	8012070 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	785b      	ldrb	r3, [r3, #1]
 8011fde:	2b09      	cmp	r3, #9
 8011fe0:	d83b      	bhi.n	801205a <USBD_StdDevReq+0xc2>
 8011fe2:	a201      	add	r2, pc, #4	; (adr r2, 8011fe8 <USBD_StdDevReq+0x50>)
 8011fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fe8:	0801203d 	.word	0x0801203d
 8011fec:	08012051 	.word	0x08012051
 8011ff0:	0801205b 	.word	0x0801205b
 8011ff4:	08012047 	.word	0x08012047
 8011ff8:	0801205b 	.word	0x0801205b
 8011ffc:	0801201b 	.word	0x0801201b
 8012000:	08012011 	.word	0x08012011
 8012004:	0801205b 	.word	0x0801205b
 8012008:	08012033 	.word	0x08012033
 801200c:	08012025 	.word	0x08012025
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012010:	6839      	ldr	r1, [r7, #0]
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f000 fa3c 	bl	8012490 <USBD_GetDescriptor>
          break;
 8012018:	e024      	b.n	8012064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801201a:	6839      	ldr	r1, [r7, #0]
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 fba1 	bl	8012764 <USBD_SetAddress>
          break;
 8012022:	e01f      	b.n	8012064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 fbe0 	bl	80127ec <USBD_SetConfig>
 801202c:	4603      	mov	r3, r0
 801202e:	73fb      	strb	r3, [r7, #15]
          break;
 8012030:	e018      	b.n	8012064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012032:	6839      	ldr	r1, [r7, #0]
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 fc83 	bl	8012940 <USBD_GetConfig>
          break;
 801203a:	e013      	b.n	8012064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801203c:	6839      	ldr	r1, [r7, #0]
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 fcb4 	bl	80129ac <USBD_GetStatus>
          break;
 8012044:	e00e      	b.n	8012064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012046:	6839      	ldr	r1, [r7, #0]
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f000 fce3 	bl	8012a14 <USBD_SetFeature>
          break;
 801204e:	e009      	b.n	8012064 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012050:	6839      	ldr	r1, [r7, #0]
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f000 fd07 	bl	8012a66 <USBD_ClrFeature>
          break;
 8012058:	e004      	b.n	8012064 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801205a:	6839      	ldr	r1, [r7, #0]
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f000 fd5e 	bl	8012b1e <USBD_CtlError>
          break;
 8012062:	bf00      	nop
      }
      break;
 8012064:	e004      	b.n	8012070 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012066:	6839      	ldr	r1, [r7, #0]
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f000 fd58 	bl	8012b1e <USBD_CtlError>
      break;
 801206e:	bf00      	nop
  }

  return ret;
 8012070:	7bfb      	ldrb	r3, [r7, #15]
}
 8012072:	4618      	mov	r0, r3
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop

0801207c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b084      	sub	sp, #16
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012086:	2300      	movs	r3, #0
 8012088:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012092:	2b40      	cmp	r3, #64	; 0x40
 8012094:	d005      	beq.n	80120a2 <USBD_StdItfReq+0x26>
 8012096:	2b40      	cmp	r3, #64	; 0x40
 8012098:	d852      	bhi.n	8012140 <USBD_StdItfReq+0xc4>
 801209a:	2b00      	cmp	r3, #0
 801209c:	d001      	beq.n	80120a2 <USBD_StdItfReq+0x26>
 801209e:	2b20      	cmp	r3, #32
 80120a0:	d14e      	bne.n	8012140 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	3b01      	subs	r3, #1
 80120ac:	2b02      	cmp	r3, #2
 80120ae:	d840      	bhi.n	8012132 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	889b      	ldrh	r3, [r3, #4]
 80120b4:	b2db      	uxtb	r3, r3
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	d836      	bhi.n	8012128 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	889b      	ldrh	r3, [r3, #4]
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	4619      	mov	r1, r3
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f7ff fed9 	bl	8011e7a <USBD_CoreFindIF>
 80120c8:	4603      	mov	r3, r0
 80120ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80120cc:	7bbb      	ldrb	r3, [r7, #14]
 80120ce:	2bff      	cmp	r3, #255	; 0xff
 80120d0:	d01d      	beq.n	801210e <USBD_StdItfReq+0x92>
 80120d2:	7bbb      	ldrb	r3, [r7, #14]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d11a      	bne.n	801210e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80120d8:	7bba      	ldrb	r2, [r7, #14]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	32ae      	adds	r2, #174	; 0xae
 80120de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120e2:	689b      	ldr	r3, [r3, #8]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d00f      	beq.n	8012108 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80120e8:	7bba      	ldrb	r2, [r7, #14]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80120f0:	7bba      	ldrb	r2, [r7, #14]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	32ae      	adds	r2, #174	; 0xae
 80120f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	6839      	ldr	r1, [r7, #0]
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	4798      	blx	r3
 8012102:	4603      	mov	r3, r0
 8012104:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012106:	e004      	b.n	8012112 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012108:	2303      	movs	r3, #3
 801210a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801210c:	e001      	b.n	8012112 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801210e:	2303      	movs	r3, #3
 8012110:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	88db      	ldrh	r3, [r3, #6]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d110      	bne.n	801213c <USBD_StdItfReq+0xc0>
 801211a:	7bfb      	ldrb	r3, [r7, #15]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10d      	bne.n	801213c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 fdc7 	bl	8012cb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012126:	e009      	b.n	801213c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012128:	6839      	ldr	r1, [r7, #0]
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 fcf7 	bl	8012b1e <USBD_CtlError>
          break;
 8012130:	e004      	b.n	801213c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012132:	6839      	ldr	r1, [r7, #0]
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f000 fcf2 	bl	8012b1e <USBD_CtlError>
          break;
 801213a:	e000      	b.n	801213e <USBD_StdItfReq+0xc2>
          break;
 801213c:	bf00      	nop
      }
      break;
 801213e:	e004      	b.n	801214a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 fceb 	bl	8012b1e <USBD_CtlError>
      break;
 8012148:	bf00      	nop
  }

  return ret;
 801214a:	7bfb      	ldrb	r3, [r7, #15]
}
 801214c:	4618      	mov	r0, r3
 801214e:	3710      	adds	r7, #16
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b084      	sub	sp, #16
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801215e:	2300      	movs	r3, #0
 8012160:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	889b      	ldrh	r3, [r3, #4]
 8012166:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012170:	2b40      	cmp	r3, #64	; 0x40
 8012172:	d007      	beq.n	8012184 <USBD_StdEPReq+0x30>
 8012174:	2b40      	cmp	r3, #64	; 0x40
 8012176:	f200 817f 	bhi.w	8012478 <USBD_StdEPReq+0x324>
 801217a:	2b00      	cmp	r3, #0
 801217c:	d02a      	beq.n	80121d4 <USBD_StdEPReq+0x80>
 801217e:	2b20      	cmp	r3, #32
 8012180:	f040 817a 	bne.w	8012478 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012184:	7bbb      	ldrb	r3, [r7, #14]
 8012186:	4619      	mov	r1, r3
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7ff fe83 	bl	8011e94 <USBD_CoreFindEP>
 801218e:	4603      	mov	r3, r0
 8012190:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012192:	7b7b      	ldrb	r3, [r7, #13]
 8012194:	2bff      	cmp	r3, #255	; 0xff
 8012196:	f000 8174 	beq.w	8012482 <USBD_StdEPReq+0x32e>
 801219a:	7b7b      	ldrb	r3, [r7, #13]
 801219c:	2b00      	cmp	r3, #0
 801219e:	f040 8170 	bne.w	8012482 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80121a2:	7b7a      	ldrb	r2, [r7, #13]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80121aa:	7b7a      	ldrb	r2, [r7, #13]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	32ae      	adds	r2, #174	; 0xae
 80121b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121b4:	689b      	ldr	r3, [r3, #8]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f000 8163 	beq.w	8012482 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80121bc:	7b7a      	ldrb	r2, [r7, #13]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	32ae      	adds	r2, #174	; 0xae
 80121c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121c6:	689b      	ldr	r3, [r3, #8]
 80121c8:	6839      	ldr	r1, [r7, #0]
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	4798      	blx	r3
 80121ce:	4603      	mov	r3, r0
 80121d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80121d2:	e156      	b.n	8012482 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	785b      	ldrb	r3, [r3, #1]
 80121d8:	2b03      	cmp	r3, #3
 80121da:	d008      	beq.n	80121ee <USBD_StdEPReq+0x9a>
 80121dc:	2b03      	cmp	r3, #3
 80121de:	f300 8145 	bgt.w	801246c <USBD_StdEPReq+0x318>
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f000 809b 	beq.w	801231e <USBD_StdEPReq+0x1ca>
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d03c      	beq.n	8012266 <USBD_StdEPReq+0x112>
 80121ec:	e13e      	b.n	801246c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d002      	beq.n	8012200 <USBD_StdEPReq+0xac>
 80121fa:	2b03      	cmp	r3, #3
 80121fc:	d016      	beq.n	801222c <USBD_StdEPReq+0xd8>
 80121fe:	e02c      	b.n	801225a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012200:	7bbb      	ldrb	r3, [r7, #14]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d00d      	beq.n	8012222 <USBD_StdEPReq+0xce>
 8012206:	7bbb      	ldrb	r3, [r7, #14]
 8012208:	2b80      	cmp	r3, #128	; 0x80
 801220a:	d00a      	beq.n	8012222 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801220c:	7bbb      	ldrb	r3, [r7, #14]
 801220e:	4619      	mov	r1, r3
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f004 fc33 	bl	8016a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012216:	2180      	movs	r1, #128	; 0x80
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f004 fc2f 	bl	8016a7c <USBD_LL_StallEP>
 801221e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012220:	e020      	b.n	8012264 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012222:	6839      	ldr	r1, [r7, #0]
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f000 fc7a 	bl	8012b1e <USBD_CtlError>
              break;
 801222a:	e01b      	b.n	8012264 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	885b      	ldrh	r3, [r3, #2]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d10e      	bne.n	8012252 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012234:	7bbb      	ldrb	r3, [r7, #14]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d00b      	beq.n	8012252 <USBD_StdEPReq+0xfe>
 801223a:	7bbb      	ldrb	r3, [r7, #14]
 801223c:	2b80      	cmp	r3, #128	; 0x80
 801223e:	d008      	beq.n	8012252 <USBD_StdEPReq+0xfe>
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	88db      	ldrh	r3, [r3, #6]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d104      	bne.n	8012252 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012248:	7bbb      	ldrb	r3, [r7, #14]
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f004 fc15 	bl	8016a7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012252:	6878      	ldr	r0, [r7, #4]
 8012254:	f000 fd2e 	bl	8012cb4 <USBD_CtlSendStatus>

              break;
 8012258:	e004      	b.n	8012264 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801225a:	6839      	ldr	r1, [r7, #0]
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f000 fc5e 	bl	8012b1e <USBD_CtlError>
              break;
 8012262:	bf00      	nop
          }
          break;
 8012264:	e107      	b.n	8012476 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801226c:	b2db      	uxtb	r3, r3
 801226e:	2b02      	cmp	r3, #2
 8012270:	d002      	beq.n	8012278 <USBD_StdEPReq+0x124>
 8012272:	2b03      	cmp	r3, #3
 8012274:	d016      	beq.n	80122a4 <USBD_StdEPReq+0x150>
 8012276:	e04b      	b.n	8012310 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012278:	7bbb      	ldrb	r3, [r7, #14]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00d      	beq.n	801229a <USBD_StdEPReq+0x146>
 801227e:	7bbb      	ldrb	r3, [r7, #14]
 8012280:	2b80      	cmp	r3, #128	; 0x80
 8012282:	d00a      	beq.n	801229a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012284:	7bbb      	ldrb	r3, [r7, #14]
 8012286:	4619      	mov	r1, r3
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f004 fbf7 	bl	8016a7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801228e:	2180      	movs	r1, #128	; 0x80
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f004 fbf3 	bl	8016a7c <USBD_LL_StallEP>
 8012296:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012298:	e040      	b.n	801231c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801229a:	6839      	ldr	r1, [r7, #0]
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 fc3e 	bl	8012b1e <USBD_CtlError>
              break;
 80122a2:	e03b      	b.n	801231c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	885b      	ldrh	r3, [r3, #2]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d136      	bne.n	801231a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80122ac:	7bbb      	ldrb	r3, [r7, #14]
 80122ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d004      	beq.n	80122c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80122b6:	7bbb      	ldrb	r3, [r7, #14]
 80122b8:	4619      	mov	r1, r3
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f004 fbfd 	bl	8016aba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80122c0:	6878      	ldr	r0, [r7, #4]
 80122c2:	f000 fcf7 	bl	8012cb4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80122c6:	7bbb      	ldrb	r3, [r7, #14]
 80122c8:	4619      	mov	r1, r3
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7ff fde2 	bl	8011e94 <USBD_CoreFindEP>
 80122d0:	4603      	mov	r3, r0
 80122d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80122d4:	7b7b      	ldrb	r3, [r7, #13]
 80122d6:	2bff      	cmp	r3, #255	; 0xff
 80122d8:	d01f      	beq.n	801231a <USBD_StdEPReq+0x1c6>
 80122da:	7b7b      	ldrb	r3, [r7, #13]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d11c      	bne.n	801231a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80122e0:	7b7a      	ldrb	r2, [r7, #13]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80122e8:	7b7a      	ldrb	r2, [r7, #13]
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	32ae      	adds	r2, #174	; 0xae
 80122ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d010      	beq.n	801231a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80122f8:	7b7a      	ldrb	r2, [r7, #13]
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	32ae      	adds	r2, #174	; 0xae
 80122fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012302:	689b      	ldr	r3, [r3, #8]
 8012304:	6839      	ldr	r1, [r7, #0]
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	4798      	blx	r3
 801230a:	4603      	mov	r3, r0
 801230c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801230e:	e004      	b.n	801231a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012310:	6839      	ldr	r1, [r7, #0]
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 fc03 	bl	8012b1e <USBD_CtlError>
              break;
 8012318:	e000      	b.n	801231c <USBD_StdEPReq+0x1c8>
              break;
 801231a:	bf00      	nop
          }
          break;
 801231c:	e0ab      	b.n	8012476 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012324:	b2db      	uxtb	r3, r3
 8012326:	2b02      	cmp	r3, #2
 8012328:	d002      	beq.n	8012330 <USBD_StdEPReq+0x1dc>
 801232a:	2b03      	cmp	r3, #3
 801232c:	d032      	beq.n	8012394 <USBD_StdEPReq+0x240>
 801232e:	e097      	b.n	8012460 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012330:	7bbb      	ldrb	r3, [r7, #14]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d007      	beq.n	8012346 <USBD_StdEPReq+0x1f2>
 8012336:	7bbb      	ldrb	r3, [r7, #14]
 8012338:	2b80      	cmp	r3, #128	; 0x80
 801233a:	d004      	beq.n	8012346 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f000 fbed 	bl	8012b1e <USBD_CtlError>
                break;
 8012344:	e091      	b.n	801246a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801234a:	2b00      	cmp	r3, #0
 801234c:	da0b      	bge.n	8012366 <USBD_StdEPReq+0x212>
 801234e:	7bbb      	ldrb	r3, [r7, #14]
 8012350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	3310      	adds	r3, #16
 801235e:	687a      	ldr	r2, [r7, #4]
 8012360:	4413      	add	r3, r2
 8012362:	3304      	adds	r3, #4
 8012364:	e00b      	b.n	801237e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012366:	7bbb      	ldrb	r3, [r7, #14]
 8012368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801236c:	4613      	mov	r3, r2
 801236e:	009b      	lsls	r3, r3, #2
 8012370:	4413      	add	r3, r2
 8012372:	009b      	lsls	r3, r3, #2
 8012374:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	4413      	add	r3, r2
 801237c:	3304      	adds	r3, #4
 801237e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	2200      	movs	r2, #0
 8012384:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	2202      	movs	r2, #2
 801238a:	4619      	mov	r1, r3
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f000 fc37 	bl	8012c00 <USBD_CtlSendData>
              break;
 8012392:	e06a      	b.n	801246a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012398:	2b00      	cmp	r3, #0
 801239a:	da11      	bge.n	80123c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801239c:	7bbb      	ldrb	r3, [r7, #14]
 801239e:	f003 020f 	and.w	r2, r3, #15
 80123a2:	6879      	ldr	r1, [r7, #4]
 80123a4:	4613      	mov	r3, r2
 80123a6:	009b      	lsls	r3, r3, #2
 80123a8:	4413      	add	r3, r2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	440b      	add	r3, r1
 80123ae:	3324      	adds	r3, #36	; 0x24
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d117      	bne.n	80123e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80123b6:	6839      	ldr	r1, [r7, #0]
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f000 fbb0 	bl	8012b1e <USBD_CtlError>
                  break;
 80123be:	e054      	b.n	801246a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80123c0:	7bbb      	ldrb	r3, [r7, #14]
 80123c2:	f003 020f 	and.w	r2, r3, #15
 80123c6:	6879      	ldr	r1, [r7, #4]
 80123c8:	4613      	mov	r3, r2
 80123ca:	009b      	lsls	r3, r3, #2
 80123cc:	4413      	add	r3, r2
 80123ce:	009b      	lsls	r3, r3, #2
 80123d0:	440b      	add	r3, r1
 80123d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80123d6:	881b      	ldrh	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d104      	bne.n	80123e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80123dc:	6839      	ldr	r1, [r7, #0]
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 fb9d 	bl	8012b1e <USBD_CtlError>
                  break;
 80123e4:	e041      	b.n	801246a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80123e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	da0b      	bge.n	8012406 <USBD_StdEPReq+0x2b2>
 80123ee:	7bbb      	ldrb	r3, [r7, #14]
 80123f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80123f4:	4613      	mov	r3, r2
 80123f6:	009b      	lsls	r3, r3, #2
 80123f8:	4413      	add	r3, r2
 80123fa:	009b      	lsls	r3, r3, #2
 80123fc:	3310      	adds	r3, #16
 80123fe:	687a      	ldr	r2, [r7, #4]
 8012400:	4413      	add	r3, r2
 8012402:	3304      	adds	r3, #4
 8012404:	e00b      	b.n	801241e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012406:	7bbb      	ldrb	r3, [r7, #14]
 8012408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801240c:	4613      	mov	r3, r2
 801240e:	009b      	lsls	r3, r3, #2
 8012410:	4413      	add	r3, r2
 8012412:	009b      	lsls	r3, r3, #2
 8012414:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	4413      	add	r3, r2
 801241c:	3304      	adds	r3, #4
 801241e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012420:	7bbb      	ldrb	r3, [r7, #14]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d002      	beq.n	801242c <USBD_StdEPReq+0x2d8>
 8012426:	7bbb      	ldrb	r3, [r7, #14]
 8012428:	2b80      	cmp	r3, #128	; 0x80
 801242a:	d103      	bne.n	8012434 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	2200      	movs	r2, #0
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	e00e      	b.n	8012452 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012434:	7bbb      	ldrb	r3, [r7, #14]
 8012436:	4619      	mov	r1, r3
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f004 fb5d 	bl	8016af8 <USBD_LL_IsStallEP>
 801243e:	4603      	mov	r3, r0
 8012440:	2b00      	cmp	r3, #0
 8012442:	d003      	beq.n	801244c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	2201      	movs	r2, #1
 8012448:	601a      	str	r2, [r3, #0]
 801244a:	e002      	b.n	8012452 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	2200      	movs	r2, #0
 8012450:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	2202      	movs	r2, #2
 8012456:	4619      	mov	r1, r3
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f000 fbd1 	bl	8012c00 <USBD_CtlSendData>
              break;
 801245e:	e004      	b.n	801246a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012460:	6839      	ldr	r1, [r7, #0]
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 fb5b 	bl	8012b1e <USBD_CtlError>
              break;
 8012468:	bf00      	nop
          }
          break;
 801246a:	e004      	b.n	8012476 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801246c:	6839      	ldr	r1, [r7, #0]
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 fb55 	bl	8012b1e <USBD_CtlError>
          break;
 8012474:	bf00      	nop
      }
      break;
 8012476:	e005      	b.n	8012484 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012478:	6839      	ldr	r1, [r7, #0]
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f000 fb4f 	bl	8012b1e <USBD_CtlError>
      break;
 8012480:	e000      	b.n	8012484 <USBD_StdEPReq+0x330>
      break;
 8012482:	bf00      	nop
  }

  return ret;
 8012484:	7bfb      	ldrb	r3, [r7, #15]
}
 8012486:	4618      	mov	r0, r3
 8012488:	3710      	adds	r7, #16
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
	...

08012490 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801249a:	2300      	movs	r3, #0
 801249c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80124a2:	2300      	movs	r3, #0
 80124a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	885b      	ldrh	r3, [r3, #2]
 80124aa:	0a1b      	lsrs	r3, r3, #8
 80124ac:	b29b      	uxth	r3, r3
 80124ae:	3b01      	subs	r3, #1
 80124b0:	2b06      	cmp	r3, #6
 80124b2:	f200 8128 	bhi.w	8012706 <USBD_GetDescriptor+0x276>
 80124b6:	a201      	add	r2, pc, #4	; (adr r2, 80124bc <USBD_GetDescriptor+0x2c>)
 80124b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124bc:	080124d9 	.word	0x080124d9
 80124c0:	080124f1 	.word	0x080124f1
 80124c4:	08012531 	.word	0x08012531
 80124c8:	08012707 	.word	0x08012707
 80124cc:	08012707 	.word	0x08012707
 80124d0:	080126a7 	.word	0x080126a7
 80124d4:	080126d3 	.word	0x080126d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	687a      	ldr	r2, [r7, #4]
 80124e2:	7c12      	ldrb	r2, [r2, #16]
 80124e4:	f107 0108 	add.w	r1, r7, #8
 80124e8:	4610      	mov	r0, r2
 80124ea:	4798      	blx	r3
 80124ec:	60f8      	str	r0, [r7, #12]
      break;
 80124ee:	e112      	b.n	8012716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	7c1b      	ldrb	r3, [r3, #16]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d10d      	bne.n	8012514 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012500:	f107 0208 	add.w	r2, r7, #8
 8012504:	4610      	mov	r0, r2
 8012506:	4798      	blx	r3
 8012508:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	3301      	adds	r3, #1
 801250e:	2202      	movs	r2, #2
 8012510:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012512:	e100      	b.n	8012716 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801251c:	f107 0208 	add.w	r2, r7, #8
 8012520:	4610      	mov	r0, r2
 8012522:	4798      	blx	r3
 8012524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	3301      	adds	r3, #1
 801252a:	2202      	movs	r2, #2
 801252c:	701a      	strb	r2, [r3, #0]
      break;
 801252e:	e0f2      	b.n	8012716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	885b      	ldrh	r3, [r3, #2]
 8012534:	b2db      	uxtb	r3, r3
 8012536:	2b05      	cmp	r3, #5
 8012538:	f200 80ac 	bhi.w	8012694 <USBD_GetDescriptor+0x204>
 801253c:	a201      	add	r2, pc, #4	; (adr r2, 8012544 <USBD_GetDescriptor+0xb4>)
 801253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012542:	bf00      	nop
 8012544:	0801255d 	.word	0x0801255d
 8012548:	08012591 	.word	0x08012591
 801254c:	080125c5 	.word	0x080125c5
 8012550:	080125f9 	.word	0x080125f9
 8012554:	0801262d 	.word	0x0801262d
 8012558:	08012661 	.word	0x08012661
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00b      	beq.n	8012580 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	687a      	ldr	r2, [r7, #4]
 8012572:	7c12      	ldrb	r2, [r2, #16]
 8012574:	f107 0108 	add.w	r1, r7, #8
 8012578:	4610      	mov	r0, r2
 801257a:	4798      	blx	r3
 801257c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801257e:	e091      	b.n	80126a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012580:	6839      	ldr	r1, [r7, #0]
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 facb 	bl	8012b1e <USBD_CtlError>
            err++;
 8012588:	7afb      	ldrb	r3, [r7, #11]
 801258a:	3301      	adds	r3, #1
 801258c:	72fb      	strb	r3, [r7, #11]
          break;
 801258e:	e089      	b.n	80126a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d00b      	beq.n	80125b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125a2:	689b      	ldr	r3, [r3, #8]
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	7c12      	ldrb	r2, [r2, #16]
 80125a8:	f107 0108 	add.w	r1, r7, #8
 80125ac:	4610      	mov	r0, r2
 80125ae:	4798      	blx	r3
 80125b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125b2:	e077      	b.n	80126a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 fab1 	bl	8012b1e <USBD_CtlError>
            err++;
 80125bc:	7afb      	ldrb	r3, [r7, #11]
 80125be:	3301      	adds	r3, #1
 80125c0:	72fb      	strb	r3, [r7, #11]
          break;
 80125c2:	e06f      	b.n	80126a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ca:	68db      	ldr	r3, [r3, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00b      	beq.n	80125e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	7c12      	ldrb	r2, [r2, #16]
 80125dc:	f107 0108 	add.w	r1, r7, #8
 80125e0:	4610      	mov	r0, r2
 80125e2:	4798      	blx	r3
 80125e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80125e6:	e05d      	b.n	80126a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80125e8:	6839      	ldr	r1, [r7, #0]
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f000 fa97 	bl	8012b1e <USBD_CtlError>
            err++;
 80125f0:	7afb      	ldrb	r3, [r7, #11]
 80125f2:	3301      	adds	r3, #1
 80125f4:	72fb      	strb	r3, [r7, #11]
          break;
 80125f6:	e055      	b.n	80126a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125fe:	691b      	ldr	r3, [r3, #16]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d00b      	beq.n	801261c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	687a      	ldr	r2, [r7, #4]
 801260e:	7c12      	ldrb	r2, [r2, #16]
 8012610:	f107 0108 	add.w	r1, r7, #8
 8012614:	4610      	mov	r0, r2
 8012616:	4798      	blx	r3
 8012618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801261a:	e043      	b.n	80126a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801261c:	6839      	ldr	r1, [r7, #0]
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	f000 fa7d 	bl	8012b1e <USBD_CtlError>
            err++;
 8012624:	7afb      	ldrb	r3, [r7, #11]
 8012626:	3301      	adds	r3, #1
 8012628:	72fb      	strb	r3, [r7, #11]
          break;
 801262a:	e03b      	b.n	80126a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d00b      	beq.n	8012650 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801263e:	695b      	ldr	r3, [r3, #20]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	7c12      	ldrb	r2, [r2, #16]
 8012644:	f107 0108 	add.w	r1, r7, #8
 8012648:	4610      	mov	r0, r2
 801264a:	4798      	blx	r3
 801264c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801264e:	e029      	b.n	80126a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012650:	6839      	ldr	r1, [r7, #0]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fa63 	bl	8012b1e <USBD_CtlError>
            err++;
 8012658:	7afb      	ldrb	r3, [r7, #11]
 801265a:	3301      	adds	r3, #1
 801265c:	72fb      	strb	r3, [r7, #11]
          break;
 801265e:	e021      	b.n	80126a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012666:	699b      	ldr	r3, [r3, #24]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00b      	beq.n	8012684 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012672:	699b      	ldr	r3, [r3, #24]
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	7c12      	ldrb	r2, [r2, #16]
 8012678:	f107 0108 	add.w	r1, r7, #8
 801267c:	4610      	mov	r0, r2
 801267e:	4798      	blx	r3
 8012680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012682:	e00f      	b.n	80126a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012684:	6839      	ldr	r1, [r7, #0]
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f000 fa49 	bl	8012b1e <USBD_CtlError>
            err++;
 801268c:	7afb      	ldrb	r3, [r7, #11]
 801268e:	3301      	adds	r3, #1
 8012690:	72fb      	strb	r3, [r7, #11]
          break;
 8012692:	e007      	b.n	80126a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012694:	6839      	ldr	r1, [r7, #0]
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f000 fa41 	bl	8012b1e <USBD_CtlError>
          err++;
 801269c:	7afb      	ldrb	r3, [r7, #11]
 801269e:	3301      	adds	r3, #1
 80126a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80126a2:	bf00      	nop
      }
      break;
 80126a4:	e037      	b.n	8012716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	7c1b      	ldrb	r3, [r3, #16]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d109      	bne.n	80126c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126b6:	f107 0208 	add.w	r2, r7, #8
 80126ba:	4610      	mov	r0, r2
 80126bc:	4798      	blx	r3
 80126be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126c0:	e029      	b.n	8012716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80126c2:	6839      	ldr	r1, [r7, #0]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f000 fa2a 	bl	8012b1e <USBD_CtlError>
        err++;
 80126ca:	7afb      	ldrb	r3, [r7, #11]
 80126cc:	3301      	adds	r3, #1
 80126ce:	72fb      	strb	r3, [r7, #11]
      break;
 80126d0:	e021      	b.n	8012716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	7c1b      	ldrb	r3, [r3, #16]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d10d      	bne.n	80126f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126e2:	f107 0208 	add.w	r2, r7, #8
 80126e6:	4610      	mov	r0, r2
 80126e8:	4798      	blx	r3
 80126ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	3301      	adds	r3, #1
 80126f0:	2207      	movs	r2, #7
 80126f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80126f4:	e00f      	b.n	8012716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80126f6:	6839      	ldr	r1, [r7, #0]
 80126f8:	6878      	ldr	r0, [r7, #4]
 80126fa:	f000 fa10 	bl	8012b1e <USBD_CtlError>
        err++;
 80126fe:	7afb      	ldrb	r3, [r7, #11]
 8012700:	3301      	adds	r3, #1
 8012702:	72fb      	strb	r3, [r7, #11]
      break;
 8012704:	e007      	b.n	8012716 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012706:	6839      	ldr	r1, [r7, #0]
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f000 fa08 	bl	8012b1e <USBD_CtlError>
      err++;
 801270e:	7afb      	ldrb	r3, [r7, #11]
 8012710:	3301      	adds	r3, #1
 8012712:	72fb      	strb	r3, [r7, #11]
      break;
 8012714:	bf00      	nop
  }

  if (err != 0U)
 8012716:	7afb      	ldrb	r3, [r7, #11]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d11e      	bne.n	801275a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	88db      	ldrh	r3, [r3, #6]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d016      	beq.n	8012752 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012724:	893b      	ldrh	r3, [r7, #8]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00e      	beq.n	8012748 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	88da      	ldrh	r2, [r3, #6]
 801272e:	893b      	ldrh	r3, [r7, #8]
 8012730:	4293      	cmp	r3, r2
 8012732:	bf28      	it	cs
 8012734:	4613      	movcs	r3, r2
 8012736:	b29b      	uxth	r3, r3
 8012738:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801273a:	893b      	ldrh	r3, [r7, #8]
 801273c:	461a      	mov	r2, r3
 801273e:	68f9      	ldr	r1, [r7, #12]
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f000 fa5d 	bl	8012c00 <USBD_CtlSendData>
 8012746:	e009      	b.n	801275c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012748:	6839      	ldr	r1, [r7, #0]
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f9e7 	bl	8012b1e <USBD_CtlError>
 8012750:	e004      	b.n	801275c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f000 faae 	bl	8012cb4 <USBD_CtlSendStatus>
 8012758:	e000      	b.n	801275c <USBD_GetDescriptor+0x2cc>
    return;
 801275a:	bf00      	nop
  }
}
 801275c:	3710      	adds	r7, #16
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop

08012764 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b084      	sub	sp, #16
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	889b      	ldrh	r3, [r3, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d131      	bne.n	80127da <USBD_SetAddress+0x76>
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	88db      	ldrh	r3, [r3, #6]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d12d      	bne.n	80127da <USBD_SetAddress+0x76>
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	885b      	ldrh	r3, [r3, #2]
 8012782:	2b7f      	cmp	r3, #127	; 0x7f
 8012784:	d829      	bhi.n	80127da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	885b      	ldrh	r3, [r3, #2]
 801278a:	b2db      	uxtb	r3, r3
 801278c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012790:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012798:	b2db      	uxtb	r3, r3
 801279a:	2b03      	cmp	r3, #3
 801279c:	d104      	bne.n	80127a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801279e:	6839      	ldr	r1, [r7, #0]
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 f9bc 	bl	8012b1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127a6:	e01d      	b.n	80127e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	7bfa      	ldrb	r2, [r7, #15]
 80127ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80127b0:	7bfb      	ldrb	r3, [r7, #15]
 80127b2:	4619      	mov	r1, r3
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f004 f9cb 	bl	8016b50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 fa7a 	bl	8012cb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80127c0:	7bfb      	ldrb	r3, [r7, #15]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d004      	beq.n	80127d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2202      	movs	r2, #2
 80127ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127ce:	e009      	b.n	80127e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2201      	movs	r2, #1
 80127d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127d8:	e004      	b.n	80127e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80127da:	6839      	ldr	r1, [r7, #0]
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 f99e 	bl	8012b1e <USBD_CtlError>
  }
}
 80127e2:	bf00      	nop
 80127e4:	bf00      	nop
 80127e6:	3710      	adds	r7, #16
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80127f6:	2300      	movs	r3, #0
 80127f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	885b      	ldrh	r3, [r3, #2]
 80127fe:	b2da      	uxtb	r2, r3
 8012800:	4b4e      	ldr	r3, [pc, #312]	; (801293c <USBD_SetConfig+0x150>)
 8012802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012804:	4b4d      	ldr	r3, [pc, #308]	; (801293c <USBD_SetConfig+0x150>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	2b01      	cmp	r3, #1
 801280a:	d905      	bls.n	8012818 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 f985 	bl	8012b1e <USBD_CtlError>
    return USBD_FAIL;
 8012814:	2303      	movs	r3, #3
 8012816:	e08c      	b.n	8012932 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801281e:	b2db      	uxtb	r3, r3
 8012820:	2b02      	cmp	r3, #2
 8012822:	d002      	beq.n	801282a <USBD_SetConfig+0x3e>
 8012824:	2b03      	cmp	r3, #3
 8012826:	d029      	beq.n	801287c <USBD_SetConfig+0x90>
 8012828:	e075      	b.n	8012916 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801282a:	4b44      	ldr	r3, [pc, #272]	; (801293c <USBD_SetConfig+0x150>)
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d020      	beq.n	8012874 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012832:	4b42      	ldr	r3, [pc, #264]	; (801293c <USBD_SetConfig+0x150>)
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	461a      	mov	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801283c:	4b3f      	ldr	r3, [pc, #252]	; (801293c <USBD_SetConfig+0x150>)
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	4619      	mov	r1, r3
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f7fe ffe1 	bl	801180a <USBD_SetClassConfig>
 8012848:	4603      	mov	r3, r0
 801284a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801284c:	7bfb      	ldrb	r3, [r7, #15]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d008      	beq.n	8012864 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012852:	6839      	ldr	r1, [r7, #0]
 8012854:	6878      	ldr	r0, [r7, #4]
 8012856:	f000 f962 	bl	8012b1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	2202      	movs	r2, #2
 801285e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012862:	e065      	b.n	8012930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f000 fa25 	bl	8012cb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2203      	movs	r2, #3
 801286e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012872:	e05d      	b.n	8012930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f000 fa1d 	bl	8012cb4 <USBD_CtlSendStatus>
      break;
 801287a:	e059      	b.n	8012930 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801287c:	4b2f      	ldr	r3, [pc, #188]	; (801293c <USBD_SetConfig+0x150>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d112      	bne.n	80128aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2202      	movs	r2, #2
 8012888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801288c:	4b2b      	ldr	r3, [pc, #172]	; (801293c <USBD_SetConfig+0x150>)
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	461a      	mov	r2, r3
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012896:	4b29      	ldr	r3, [pc, #164]	; (801293c <USBD_SetConfig+0x150>)
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	4619      	mov	r1, r3
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f7fe ffd0 	bl	8011842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80128a2:	6878      	ldr	r0, [r7, #4]
 80128a4:	f000 fa06 	bl	8012cb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80128a8:	e042      	b.n	8012930 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80128aa:	4b24      	ldr	r3, [pc, #144]	; (801293c <USBD_SetConfig+0x150>)
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	461a      	mov	r2, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d02a      	beq.n	801290e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	4619      	mov	r1, r3
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7fe ffbe 	bl	8011842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80128c6:	4b1d      	ldr	r3, [pc, #116]	; (801293c <USBD_SetConfig+0x150>)
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	461a      	mov	r2, r3
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80128d0:	4b1a      	ldr	r3, [pc, #104]	; (801293c <USBD_SetConfig+0x150>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	4619      	mov	r1, r3
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f7fe ff97 	bl	801180a <USBD_SetClassConfig>
 80128dc:	4603      	mov	r3, r0
 80128de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80128e0:	7bfb      	ldrb	r3, [r7, #15]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00f      	beq.n	8012906 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80128e6:	6839      	ldr	r1, [r7, #0]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 f918 	bl	8012b1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	4619      	mov	r1, r3
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f7fe ffa3 	bl	8011842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2202      	movs	r2, #2
 8012900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012904:	e014      	b.n	8012930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012906:	6878      	ldr	r0, [r7, #4]
 8012908:	f000 f9d4 	bl	8012cb4 <USBD_CtlSendStatus>
      break;
 801290c:	e010      	b.n	8012930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f000 f9d0 	bl	8012cb4 <USBD_CtlSendStatus>
      break;
 8012914:	e00c      	b.n	8012930 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012916:	6839      	ldr	r1, [r7, #0]
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	f000 f900 	bl	8012b1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801291e:	4b07      	ldr	r3, [pc, #28]	; (801293c <USBD_SetConfig+0x150>)
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	4619      	mov	r1, r3
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7fe ff8c 	bl	8011842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801292a:	2303      	movs	r3, #3
 801292c:	73fb      	strb	r3, [r7, #15]
      break;
 801292e:	bf00      	nop
  }

  return ret;
 8012930:	7bfb      	ldrb	r3, [r7, #15]
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	20007f94 	.word	0x20007f94

08012940 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	88db      	ldrh	r3, [r3, #6]
 801294e:	2b01      	cmp	r3, #1
 8012950:	d004      	beq.n	801295c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012952:	6839      	ldr	r1, [r7, #0]
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f000 f8e2 	bl	8012b1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801295a:	e023      	b.n	80129a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012962:	b2db      	uxtb	r3, r3
 8012964:	2b02      	cmp	r3, #2
 8012966:	dc02      	bgt.n	801296e <USBD_GetConfig+0x2e>
 8012968:	2b00      	cmp	r3, #0
 801296a:	dc03      	bgt.n	8012974 <USBD_GetConfig+0x34>
 801296c:	e015      	b.n	801299a <USBD_GetConfig+0x5a>
 801296e:	2b03      	cmp	r3, #3
 8012970:	d00b      	beq.n	801298a <USBD_GetConfig+0x4a>
 8012972:	e012      	b.n	801299a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2200      	movs	r2, #0
 8012978:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	3308      	adds	r3, #8
 801297e:	2201      	movs	r2, #1
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f000 f93c 	bl	8012c00 <USBD_CtlSendData>
        break;
 8012988:	e00c      	b.n	80129a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3304      	adds	r3, #4
 801298e:	2201      	movs	r2, #1
 8012990:	4619      	mov	r1, r3
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f000 f934 	bl	8012c00 <USBD_CtlSendData>
        break;
 8012998:	e004      	b.n	80129a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 f8be 	bl	8012b1e <USBD_CtlError>
        break;
 80129a2:	bf00      	nop
}
 80129a4:	bf00      	nop
 80129a6:	3708      	adds	r7, #8
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b082      	sub	sp, #8
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	3b01      	subs	r3, #1
 80129c0:	2b02      	cmp	r3, #2
 80129c2:	d81e      	bhi.n	8012a02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80129c4:	683b      	ldr	r3, [r7, #0]
 80129c6:	88db      	ldrh	r3, [r3, #6]
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d004      	beq.n	80129d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80129cc:	6839      	ldr	r1, [r7, #0]
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f000 f8a5 	bl	8012b1e <USBD_CtlError>
        break;
 80129d4:	e01a      	b.n	8012a0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2201      	movs	r2, #1
 80129da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d005      	beq.n	80129f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	68db      	ldr	r3, [r3, #12]
 80129ea:	f043 0202 	orr.w	r2, r3, #2
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	330c      	adds	r3, #12
 80129f6:	2202      	movs	r2, #2
 80129f8:	4619      	mov	r1, r3
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f000 f900 	bl	8012c00 <USBD_CtlSendData>
      break;
 8012a00:	e004      	b.n	8012a0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012a02:	6839      	ldr	r1, [r7, #0]
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 f88a 	bl	8012b1e <USBD_CtlError>
      break;
 8012a0a:	bf00      	nop
  }
}
 8012a0c:	bf00      	nop
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	885b      	ldrh	r3, [r3, #2]
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d107      	bne.n	8012a36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2201      	movs	r2, #1
 8012a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 f940 	bl	8012cb4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012a34:	e013      	b.n	8012a5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	885b      	ldrh	r3, [r3, #2]
 8012a3a:	2b02      	cmp	r3, #2
 8012a3c:	d10b      	bne.n	8012a56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012a3e:	683b      	ldr	r3, [r7, #0]
 8012a40:	889b      	ldrh	r3, [r3, #4]
 8012a42:	0a1b      	lsrs	r3, r3, #8
 8012a44:	b29b      	uxth	r3, r3
 8012a46:	b2da      	uxtb	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f000 f930 	bl	8012cb4 <USBD_CtlSendStatus>
}
 8012a54:	e003      	b.n	8012a5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012a56:	6839      	ldr	r1, [r7, #0]
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 f860 	bl	8012b1e <USBD_CtlError>
}
 8012a5e:	bf00      	nop
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b082      	sub	sp, #8
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
 8012a6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	3b01      	subs	r3, #1
 8012a7a:	2b02      	cmp	r3, #2
 8012a7c:	d80b      	bhi.n	8012a96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a7e:	683b      	ldr	r3, [r7, #0]
 8012a80:	885b      	ldrh	r3, [r3, #2]
 8012a82:	2b01      	cmp	r3, #1
 8012a84:	d10c      	bne.n	8012aa0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 f910 	bl	8012cb4 <USBD_CtlSendStatus>
      }
      break;
 8012a94:	e004      	b.n	8012aa0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012a96:	6839      	ldr	r1, [r7, #0]
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f000 f840 	bl	8012b1e <USBD_CtlError>
      break;
 8012a9e:	e000      	b.n	8012aa2 <USBD_ClrFeature+0x3c>
      break;
 8012aa0:	bf00      	nop
  }
}
 8012aa2:	bf00      	nop
 8012aa4:	3708      	adds	r7, #8
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}

08012aaa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b084      	sub	sp, #16
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	6078      	str	r0, [r7, #4]
 8012ab2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	781a      	ldrb	r2, [r3, #0]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	781a      	ldrb	r2, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012ad4:	68f8      	ldr	r0, [r7, #12]
 8012ad6:	f7ff fa41 	bl	8011f5c <SWAPBYTE>
 8012ada:	4603      	mov	r3, r0
 8012adc:	461a      	mov	r2, r3
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	3301      	adds	r3, #1
 8012aec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012aee:	68f8      	ldr	r0, [r7, #12]
 8012af0:	f7ff fa34 	bl	8011f5c <SWAPBYTE>
 8012af4:	4603      	mov	r3, r0
 8012af6:	461a      	mov	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	3301      	adds	r3, #1
 8012b00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	3301      	adds	r3, #1
 8012b06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012b08:	68f8      	ldr	r0, [r7, #12]
 8012b0a:	f7ff fa27 	bl	8011f5c <SWAPBYTE>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	461a      	mov	r2, r3
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	80da      	strh	r2, [r3, #6]
}
 8012b16:	bf00      	nop
 8012b18:	3710      	adds	r7, #16
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}

08012b1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b1e:	b580      	push	{r7, lr}
 8012b20:	b082      	sub	sp, #8
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
 8012b26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012b28:	2180      	movs	r1, #128	; 0x80
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f003 ffa6 	bl	8016a7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012b30:	2100      	movs	r1, #0
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f003 ffa2 	bl	8016a7c <USBD_LL_StallEP>
}
 8012b38:	bf00      	nop
 8012b3a:	3708      	adds	r7, #8
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b086      	sub	sp, #24
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d036      	beq.n	8012bc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012b5a:	6938      	ldr	r0, [r7, #16]
 8012b5c:	f000 f836 	bl	8012bcc <USBD_GetLen>
 8012b60:	4603      	mov	r3, r0
 8012b62:	3301      	adds	r3, #1
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	005b      	lsls	r3, r3, #1
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012b6e:	7dfb      	ldrb	r3, [r7, #23]
 8012b70:	68ba      	ldr	r2, [r7, #8]
 8012b72:	4413      	add	r3, r2
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	7812      	ldrb	r2, [r2, #0]
 8012b78:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b7a:	7dfb      	ldrb	r3, [r7, #23]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012b80:	7dfb      	ldrb	r3, [r7, #23]
 8012b82:	68ba      	ldr	r2, [r7, #8]
 8012b84:	4413      	add	r3, r2
 8012b86:	2203      	movs	r2, #3
 8012b88:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b8a:	7dfb      	ldrb	r3, [r7, #23]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012b90:	e013      	b.n	8012bba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012b92:	7dfb      	ldrb	r3, [r7, #23]
 8012b94:	68ba      	ldr	r2, [r7, #8]
 8012b96:	4413      	add	r3, r2
 8012b98:	693a      	ldr	r2, [r7, #16]
 8012b9a:	7812      	ldrb	r2, [r2, #0]
 8012b9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012b9e:	693b      	ldr	r3, [r7, #16]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	613b      	str	r3, [r7, #16]
    idx++;
 8012ba4:	7dfb      	ldrb	r3, [r7, #23]
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012baa:	7dfb      	ldrb	r3, [r7, #23]
 8012bac:	68ba      	ldr	r2, [r7, #8]
 8012bae:	4413      	add	r3, r2
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	701a      	strb	r2, [r3, #0]
    idx++;
 8012bb4:	7dfb      	ldrb	r3, [r7, #23]
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d1e7      	bne.n	8012b92 <USBD_GetString+0x52>
 8012bc2:	e000      	b.n	8012bc6 <USBD_GetString+0x86>
    return;
 8012bc4:	bf00      	nop
  }
}
 8012bc6:	3718      	adds	r7, #24
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b085      	sub	sp, #20
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012bdc:	e005      	b.n	8012bea <USBD_GetLen+0x1e>
  {
    len++;
 8012bde:	7bfb      	ldrb	r3, [r7, #15]
 8012be0:	3301      	adds	r3, #1
 8012be2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	3301      	adds	r3, #1
 8012be8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d1f5      	bne.n	8012bde <USBD_GetLen+0x12>
  }

  return len;
 8012bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	60f8      	str	r0, [r7, #12]
 8012c08:	60b9      	str	r1, [r7, #8]
 8012c0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2202      	movs	r2, #2
 8012c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	687a      	ldr	r2, [r7, #4]
 8012c1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	68ba      	ldr	r2, [r7, #8]
 8012c24:	2100      	movs	r1, #0
 8012c26:	68f8      	ldr	r0, [r7, #12]
 8012c28:	f003 ffb1 	bl	8016b8e <USBD_LL_Transmit>

  return USBD_OK;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3710      	adds	r7, #16
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b084      	sub	sp, #16
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	60f8      	str	r0, [r7, #12]
 8012c3e:	60b9      	str	r1, [r7, #8]
 8012c40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	68ba      	ldr	r2, [r7, #8]
 8012c46:	2100      	movs	r1, #0
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f003 ffa0 	bl	8016b8e <USBD_LL_Transmit>

  return USBD_OK;
 8012c4e:	2300      	movs	r3, #0
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3710      	adds	r7, #16
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b084      	sub	sp, #16
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2203      	movs	r2, #3
 8012c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	68ba      	ldr	r2, [r7, #8]
 8012c80:	2100      	movs	r1, #0
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f003 ffa4 	bl	8016bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c88:	2300      	movs	r3, #0
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3710      	adds	r7, #16
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}

08012c92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012c92:	b580      	push	{r7, lr}
 8012c94:	b084      	sub	sp, #16
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	60f8      	str	r0, [r7, #12]
 8012c9a:	60b9      	str	r1, [r7, #8]
 8012c9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	68ba      	ldr	r2, [r7, #8]
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f003 ff93 	bl	8016bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012caa:	2300      	movs	r3, #0
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2204      	movs	r2, #4
 8012cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	2100      	movs	r1, #0
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f003 ff5f 	bl	8016b8e <USBD_LL_Transmit>

  return USBD_OK;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3708      	adds	r7, #8
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}

08012cda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012cda:	b580      	push	{r7, lr}
 8012cdc:	b082      	sub	sp, #8
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2205      	movs	r2, #5
 8012ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012cea:	2300      	movs	r3, #0
 8012cec:	2200      	movs	r2, #0
 8012cee:	2100      	movs	r1, #0
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f003 ff6d 	bl	8016bd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012cf6:	2300      	movs	r3, #0
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b085      	sub	sp, #20
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	4603      	mov	r3, r0
 8012d08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8012d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d12:	2b84      	cmp	r3, #132	; 0x84
 8012d14:	d005      	beq.n	8012d22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012d16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	3303      	adds	r3, #3
 8012d20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012d22:	68fb      	ldr	r3, [r7, #12]
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	3714      	adds	r7, #20
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr

08012d30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012d34:	f001 fa0e 	bl	8014154 <vTaskStartScheduler>
  
  return osOK;
 8012d38:	2300      	movs	r3, #0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	bd80      	pop	{r7, pc}

08012d3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d40:	b089      	sub	sp, #36	; 0x24
 8012d42:	af04      	add	r7, sp, #16
 8012d44:	6078      	str	r0, [r7, #4]
 8012d46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	695b      	ldr	r3, [r3, #20]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d020      	beq.n	8012d92 <osThreadCreate+0x54>
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	699b      	ldr	r3, [r3, #24]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d01c      	beq.n	8012d92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	685c      	ldr	r4, [r3, #4]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	691e      	ldr	r6, [r3, #16]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7ff ffc8 	bl	8012d00 <makeFreeRtosPriority>
 8012d70:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	695b      	ldr	r3, [r3, #20]
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d7a:	9202      	str	r2, [sp, #8]
 8012d7c:	9301      	str	r3, [sp, #4]
 8012d7e:	9100      	str	r1, [sp, #0]
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	4632      	mov	r2, r6
 8012d84:	4629      	mov	r1, r5
 8012d86:	4620      	mov	r0, r4
 8012d88:	f000 ff92 	bl	8013cb0 <xTaskCreateStatic>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	60fb      	str	r3, [r7, #12]
 8012d90:	e01c      	b.n	8012dcc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	685c      	ldr	r4, [r3, #4]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012d9e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7ff ffaa 	bl	8012d00 <makeFreeRtosPriority>
 8012dac:	4602      	mov	r2, r0
 8012dae:	f107 030c 	add.w	r3, r7, #12
 8012db2:	9301      	str	r3, [sp, #4]
 8012db4:	9200      	str	r2, [sp, #0]
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	4632      	mov	r2, r6
 8012dba:	4629      	mov	r1, r5
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f000 ffcd 	bl	8013d5c <xTaskCreate>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d001      	beq.n	8012dcc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	e000      	b.n	8012dce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3714      	adds	r7, #20
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012dd8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b084      	sub	sp, #16
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	4a09      	ldr	r2, [pc, #36]	; (8012e08 <osDelay+0x30>)
 8012de4:	fba2 2303 	umull	r2, r3, r2, r3
 8012de8:	099b      	lsrs	r3, r3, #6
 8012dea:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d001      	beq.n	8012df6 <osDelay+0x1e>
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	e000      	b.n	8012df8 <osDelay+0x20>
 8012df6:	2301      	movs	r3, #1
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f001 f911 	bl	8014020 <vTaskDelay>
  
  return osOK;
 8012dfe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3710      	adds	r7, #16
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}
 8012e08:	10624dd3 	.word	0x10624dd3

08012e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f103 0208 	add.w	r2, r3, #8
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f103 0208 	add.w	r2, r3, #8
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f103 0208 	add.w	r2, r3, #8
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012e40:	bf00      	nop
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2200      	movs	r2, #0
 8012e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012e5a:	bf00      	nop
 8012e5c:	370c      	adds	r7, #12
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr

08012e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012e66:	b480      	push	{r7}
 8012e68:	b085      	sub	sp, #20
 8012e6a:	af00      	add	r7, sp, #0
 8012e6c:	6078      	str	r0, [r7, #4]
 8012e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	689a      	ldr	r2, [r3, #8]
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	689b      	ldr	r3, [r3, #8]
 8012e88:	683a      	ldr	r2, [r7, #0]
 8012e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	683a      	ldr	r2, [r7, #0]
 8012e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	687a      	ldr	r2, [r7, #4]
 8012e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	1c5a      	adds	r2, r3, #1
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	601a      	str	r2, [r3, #0]
}
 8012ea2:	bf00      	nop
 8012ea4:	3714      	adds	r7, #20
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr

08012eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012eae:	b480      	push	{r7}
 8012eb0:	b085      	sub	sp, #20
 8012eb2:	af00      	add	r7, sp, #0
 8012eb4:	6078      	str	r0, [r7, #4]
 8012eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ec4:	d103      	bne.n	8012ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	691b      	ldr	r3, [r3, #16]
 8012eca:	60fb      	str	r3, [r7, #12]
 8012ecc:	e00c      	b.n	8012ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	3308      	adds	r3, #8
 8012ed2:	60fb      	str	r3, [r7, #12]
 8012ed4:	e002      	b.n	8012edc <vListInsert+0x2e>
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	60fb      	str	r3, [r7, #12]
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d2f6      	bcs.n	8012ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	685a      	ldr	r2, [r3, #4]
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	683a      	ldr	r2, [r7, #0]
 8012ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	68fa      	ldr	r2, [r7, #12]
 8012efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	683a      	ldr	r2, [r7, #0]
 8012f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	1c5a      	adds	r2, r3, #1
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	601a      	str	r2, [r3, #0]
}
 8012f14:	bf00      	nop
 8012f16:	3714      	adds	r7, #20
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012f20:	b480      	push	{r7}
 8012f22:	b085      	sub	sp, #20
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	691b      	ldr	r3, [r3, #16]
 8012f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	6892      	ldr	r2, [r2, #8]
 8012f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	689b      	ldr	r3, [r3, #8]
 8012f3c:	687a      	ldr	r2, [r7, #4]
 8012f3e:	6852      	ldr	r2, [r2, #4]
 8012f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d103      	bne.n	8012f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	689a      	ldr	r2, [r3, #8]
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	1e5a      	subs	r2, r3, #1
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	681b      	ldr	r3, [r3, #0]
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3714      	adds	r7, #20
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f72:	4770      	bx	lr

08012f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b084      	sub	sp, #16
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d105      	bne.n	8012f94 <xQueueGenericReset+0x20>
 8012f88:	f240 1203 	movw	r2, #259	; 0x103
 8012f8c:	492a      	ldr	r1, [pc, #168]	; (8013038 <xQueueGenericReset+0xc4>)
 8012f8e:	482b      	ldr	r0, [pc, #172]	; (801303c <xQueueGenericReset+0xc8>)
 8012f90:	f7f2 fb5c 	bl	800564c <assertFail>

	taskENTER_CRITICAL();
 8012f94:	f002 feb4 	bl	8015d00 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fa0:	68f9      	ldr	r1, [r7, #12]
 8012fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012fa4:	fb01 f303 	mul.w	r3, r1, r3
 8012fa8:	441a      	add	r2, r3
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fc4:	3b01      	subs	r3, #1
 8012fc6:	68f9      	ldr	r1, [r7, #12]
 8012fc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012fca:	fb01 f303 	mul.w	r3, r1, r3
 8012fce:	441a      	add	r2, r3
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	22ff      	movs	r2, #255	; 0xff
 8012fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	22ff      	movs	r2, #255	; 0xff
 8012fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d114      	bne.n	8013014 <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	691b      	ldr	r3, [r3, #16]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d01a      	beq.n	8013028 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	3310      	adds	r3, #16
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f001 fc3c 	bl	8014874 <xTaskRemoveFromEventList>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d012      	beq.n	8013028 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013002:	4b0f      	ldr	r3, [pc, #60]	; (8013040 <xQueueGenericReset+0xcc>)
 8013004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013008:	601a      	str	r2, [r3, #0]
 801300a:	f3bf 8f4f 	dsb	sy
 801300e:	f3bf 8f6f 	isb	sy
 8013012:	e009      	b.n	8013028 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	3310      	adds	r3, #16
 8013018:	4618      	mov	r0, r3
 801301a:	f7ff fef7 	bl	8012e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	3324      	adds	r3, #36	; 0x24
 8013022:	4618      	mov	r0, r3
 8013024:	f7ff fef2 	bl	8012e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013028:	f002 fe98 	bl	8015d5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801302c:	2301      	movs	r3, #1
}
 801302e:	4618      	mov	r0, r3
 8013030:	3710      	adds	r7, #16
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	0801b85c 	.word	0x0801b85c
 801303c:	0801b890 	.word	0x0801b890
 8013040:	e000ed04 	.word	0xe000ed04

08013044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013044:	b580      	push	{r7, lr}
 8013046:	b088      	sub	sp, #32
 8013048:	af02      	add	r7, sp, #8
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	607a      	str	r2, [r7, #4]
 8013050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d105      	bne.n	8013064 <xQueueGenericCreateStatic+0x20>
 8013058:	f44f 729d 	mov.w	r2, #314	; 0x13a
 801305c:	4929      	ldr	r1, [pc, #164]	; (8013104 <xQueueGenericCreateStatic+0xc0>)
 801305e:	482a      	ldr	r0, [pc, #168]	; (8013108 <xQueueGenericCreateStatic+0xc4>)
 8013060:	f7f2 faf4 	bl	800564c <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d105      	bne.n	8013076 <xQueueGenericCreateStatic+0x32>
 801306a:	f44f 729f 	mov.w	r2, #318	; 0x13e
 801306e:	4925      	ldr	r1, [pc, #148]	; (8013104 <xQueueGenericCreateStatic+0xc0>)
 8013070:	4826      	ldr	r0, [pc, #152]	; (801310c <xQueueGenericCreateStatic+0xc8>)
 8013072:	f7f2 faeb 	bl	800564c <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <xQueueGenericCreateStatic+0x3e>
 801307c:	68bb      	ldr	r3, [r7, #8]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d001      	beq.n	8013086 <xQueueGenericCreateStatic+0x42>
 8013082:	2301      	movs	r3, #1
 8013084:	e000      	b.n	8013088 <xQueueGenericCreateStatic+0x44>
 8013086:	2300      	movs	r3, #0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d105      	bne.n	8013098 <xQueueGenericCreateStatic+0x54>
 801308c:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8013090:	491c      	ldr	r1, [pc, #112]	; (8013104 <xQueueGenericCreateStatic+0xc0>)
 8013092:	481f      	ldr	r0, [pc, #124]	; (8013110 <xQueueGenericCreateStatic+0xcc>)
 8013094:	f7f2 fada 	bl	800564c <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d102      	bne.n	80130a4 <xQueueGenericCreateStatic+0x60>
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d101      	bne.n	80130a8 <xQueueGenericCreateStatic+0x64>
 80130a4:	2301      	movs	r3, #1
 80130a6:	e000      	b.n	80130aa <xQueueGenericCreateStatic+0x66>
 80130a8:	2300      	movs	r3, #0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d105      	bne.n	80130ba <xQueueGenericCreateStatic+0x76>
 80130ae:	f240 1243 	movw	r2, #323	; 0x143
 80130b2:	4914      	ldr	r1, [pc, #80]	; (8013104 <xQueueGenericCreateStatic+0xc0>)
 80130b4:	4817      	ldr	r0, [pc, #92]	; (8013114 <xQueueGenericCreateStatic+0xd0>)
 80130b6:	f7f2 fac9 	bl	800564c <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80130ba:	2350      	movs	r3, #80	; 0x50
 80130bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	2b50      	cmp	r3, #80	; 0x50
 80130c2:	d005      	beq.n	80130d0 <xQueueGenericCreateStatic+0x8c>
 80130c4:	f240 124b 	movw	r2, #331	; 0x14b
 80130c8:	490e      	ldr	r1, [pc, #56]	; (8013104 <xQueueGenericCreateStatic+0xc0>)
 80130ca:	4813      	ldr	r0, [pc, #76]	; (8013118 <xQueueGenericCreateStatic+0xd4>)
 80130cc:	f7f2 fabe 	bl	800564c <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80130d0:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00d      	beq.n	80130f8 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	2201      	movs	r2, #1
 80130e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80130e4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	4613      	mov	r3, r2
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	68b9      	ldr	r1, [r7, #8]
 80130f2:	68f8      	ldr	r0, [r7, #12]
 80130f4:	f000 f84c 	bl	8013190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80130f8:	697b      	ldr	r3, [r7, #20]
	}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3718      	adds	r7, #24
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	0801b85c 	.word	0x0801b85c
 8013108:	0801b898 	.word	0x0801b898
 801310c:	0801b8bc 	.word	0x0801b8bc
 8013110:	0801b8d4 	.word	0x0801b8d4
 8013114:	0801b90c 	.word	0x0801b90c
 8013118:	0801b944 	.word	0x0801b944

0801311c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801311c:	b580      	push	{r7, lr}
 801311e:	b08a      	sub	sp, #40	; 0x28
 8013120:	af02      	add	r7, sp, #8
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	4613      	mov	r3, r2
 8013128:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d105      	bne.n	801313c <xQueueGenericCreate+0x20>
 8013130:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8013134:	4914      	ldr	r1, [pc, #80]	; (8013188 <xQueueGenericCreate+0x6c>)
 8013136:	4815      	ldr	r0, [pc, #84]	; (801318c <xQueueGenericCreate+0x70>)
 8013138:	f7f2 fa88 	bl	800564c <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	68ba      	ldr	r2, [r7, #8]
 8013140:	fb02 f303 	mul.w	r3, r2, r3
 8013144:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013146:	69fb      	ldr	r3, [r7, #28]
 8013148:	3350      	adds	r3, #80	; 0x50
 801314a:	4618      	mov	r0, r3
 801314c:	f002 fee8 	bl	8015f20 <pvPortMalloc>
 8013150:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d011      	beq.n	801317c <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	3350      	adds	r3, #80	; 0x50
 8013160:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013162:	69bb      	ldr	r3, [r7, #24]
 8013164:	2200      	movs	r2, #0
 8013166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801316a:	79fa      	ldrb	r2, [r7, #7]
 801316c:	69bb      	ldr	r3, [r7, #24]
 801316e:	9300      	str	r3, [sp, #0]
 8013170:	4613      	mov	r3, r2
 8013172:	697a      	ldr	r2, [r7, #20]
 8013174:	68b9      	ldr	r1, [r7, #8]
 8013176:	68f8      	ldr	r0, [r7, #12]
 8013178:	f000 f80a 	bl	8013190 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801317c:	69bb      	ldr	r3, [r7, #24]
	}
 801317e:	4618      	mov	r0, r3
 8013180:	3720      	adds	r7, #32
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	0801b85c 	.word	0x0801b85c
 801318c:	0801b898 	.word	0x0801b898

08013190 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
 8013196:	60f8      	str	r0, [r7, #12]
 8013198:	60b9      	str	r1, [r7, #8]
 801319a:	607a      	str	r2, [r7, #4]
 801319c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801319e:	68bb      	ldr	r3, [r7, #8]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d103      	bne.n	80131ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	69ba      	ldr	r2, [r7, #24]
 80131a8:	601a      	str	r2, [r3, #0]
 80131aa:	e002      	b.n	80131b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	687a      	ldr	r2, [r7, #4]
 80131b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80131b2:	69bb      	ldr	r3, [r7, #24]
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80131b8:	69bb      	ldr	r3, [r7, #24]
 80131ba:	68ba      	ldr	r2, [r7, #8]
 80131bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80131be:	2101      	movs	r1, #1
 80131c0:	69b8      	ldr	r0, [r7, #24]
 80131c2:	f7ff fed7 	bl	8012f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	78fa      	ldrb	r2, [r7, #3]
 80131ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80131ce:	bf00      	nop
 80131d0:	3710      	adds	r7, #16
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b082      	sub	sp, #8
 80131da:	af00      	add	r7, sp, #0
 80131dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00e      	beq.n	8013202 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2200      	movs	r2, #0
 80131e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2200      	movs	r2, #0
 80131ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2200      	movs	r2, #0
 80131f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80131f6:	2300      	movs	r3, #0
 80131f8:	2200      	movs	r2, #0
 80131fa:	2100      	movs	r1, #0
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f000 f837 	bl	8013270 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8013202:	bf00      	nop
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}

0801320a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801320a:	b580      	push	{r7, lr}
 801320c:	b086      	sub	sp, #24
 801320e:	af00      	add	r7, sp, #0
 8013210:	4603      	mov	r3, r0
 8013212:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013214:	2301      	movs	r3, #1
 8013216:	617b      	str	r3, [r7, #20]
 8013218:	2300      	movs	r3, #0
 801321a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801321c:	79fb      	ldrb	r3, [r7, #7]
 801321e:	461a      	mov	r2, r3
 8013220:	6939      	ldr	r1, [r7, #16]
 8013222:	6978      	ldr	r0, [r7, #20]
 8013224:	f7ff ff7a 	bl	801311c <xQueueGenericCreate>
 8013228:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f7ff ffd3 	bl	80131d6 <prvInitialiseMutex>

		return xNewQueue;
 8013230:	68fb      	ldr	r3, [r7, #12]
	}
 8013232:	4618      	mov	r0, r3
 8013234:	3718      	adds	r7, #24
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}

0801323a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801323a:	b580      	push	{r7, lr}
 801323c:	b088      	sub	sp, #32
 801323e:	af02      	add	r7, sp, #8
 8013240:	4603      	mov	r3, r0
 8013242:	6039      	str	r1, [r7, #0]
 8013244:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8013246:	2301      	movs	r3, #1
 8013248:	617b      	str	r3, [r7, #20]
 801324a:	2300      	movs	r3, #0
 801324c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801324e:	79fb      	ldrb	r3, [r7, #7]
 8013250:	9300      	str	r3, [sp, #0]
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	2200      	movs	r2, #0
 8013256:	6939      	ldr	r1, [r7, #16]
 8013258:	6978      	ldr	r0, [r7, #20]
 801325a:	f7ff fef3 	bl	8013044 <xQueueGenericCreateStatic>
 801325e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8013260:	68f8      	ldr	r0, [r7, #12]
 8013262:	f7ff ffb8 	bl	80131d6 <prvInitialiseMutex>

		return xNewQueue;
 8013266:	68fb      	ldr	r3, [r7, #12]
	}
 8013268:	4618      	mov	r0, r3
 801326a:	3718      	adds	r7, #24
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b08a      	sub	sp, #40	; 0x28
 8013274:	af00      	add	r7, sp, #0
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	607a      	str	r2, [r7, #4]
 801327c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801327e:	2300      	movs	r3, #0
 8013280:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8013286:	6a3b      	ldr	r3, [r7, #32]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d105      	bne.n	8013298 <xQueueGenericSend+0x28>
 801328c:	f240 22ea 	movw	r2, #746	; 0x2ea
 8013290:	4977      	ldr	r1, [pc, #476]	; (8013470 <xQueueGenericSend+0x200>)
 8013292:	4878      	ldr	r0, [pc, #480]	; (8013474 <xQueueGenericSend+0x204>)
 8013294:	f7f2 f9da 	bl	800564c <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d103      	bne.n	80132a6 <xQueueGenericSend+0x36>
 801329e:	6a3b      	ldr	r3, [r7, #32]
 80132a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d101      	bne.n	80132aa <xQueueGenericSend+0x3a>
 80132a6:	2301      	movs	r3, #1
 80132a8:	e000      	b.n	80132ac <xQueueGenericSend+0x3c>
 80132aa:	2300      	movs	r3, #0
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d105      	bne.n	80132bc <xQueueGenericSend+0x4c>
 80132b0:	f240 22eb 	movw	r2, #747	; 0x2eb
 80132b4:	496e      	ldr	r1, [pc, #440]	; (8013470 <xQueueGenericSend+0x200>)
 80132b6:	4870      	ldr	r0, [pc, #448]	; (8013478 <xQueueGenericSend+0x208>)
 80132b8:	f7f2 f9c8 	bl	800564c <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	2b02      	cmp	r3, #2
 80132c0:	d103      	bne.n	80132ca <xQueueGenericSend+0x5a>
 80132c2:	6a3b      	ldr	r3, [r7, #32]
 80132c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d101      	bne.n	80132ce <xQueueGenericSend+0x5e>
 80132ca:	2301      	movs	r3, #1
 80132cc:	e000      	b.n	80132d0 <xQueueGenericSend+0x60>
 80132ce:	2300      	movs	r3, #0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d105      	bne.n	80132e0 <xQueueGenericSend+0x70>
 80132d4:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 80132d8:	4965      	ldr	r1, [pc, #404]	; (8013470 <xQueueGenericSend+0x200>)
 80132da:	4868      	ldr	r0, [pc, #416]	; (801347c <xQueueGenericSend+0x20c>)
 80132dc:	f7f2 f9b6 	bl	800564c <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80132e0:	f001 fd5a 	bl	8014d98 <xTaskGetSchedulerState>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d102      	bne.n	80132f0 <xQueueGenericSend+0x80>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d101      	bne.n	80132f4 <xQueueGenericSend+0x84>
 80132f0:	2301      	movs	r3, #1
 80132f2:	e000      	b.n	80132f6 <xQueueGenericSend+0x86>
 80132f4:	2300      	movs	r3, #0
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d105      	bne.n	8013306 <xQueueGenericSend+0x96>
 80132fa:	f240 22ef 	movw	r2, #751	; 0x2ef
 80132fe:	495c      	ldr	r1, [pc, #368]	; (8013470 <xQueueGenericSend+0x200>)
 8013300:	485f      	ldr	r0, [pc, #380]	; (8013480 <xQueueGenericSend+0x210>)
 8013302:	f7f2 f9a3 	bl	800564c <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013306:	f002 fcfb 	bl	8015d00 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801330a:	6a3b      	ldr	r3, [r7, #32]
 801330c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801330e:	6a3b      	ldr	r3, [r7, #32]
 8013310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013312:	429a      	cmp	r2, r3
 8013314:	d302      	bcc.n	801331c <xQueueGenericSend+0xac>
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	2b02      	cmp	r3, #2
 801331a:	d12f      	bne.n	801337c <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 801331c:	6a3b      	ldr	r3, [r7, #32]
 801331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013320:	4a58      	ldr	r2, [pc, #352]	; (8013484 <xQueueGenericSend+0x214>)
 8013322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013326:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013328:	683a      	ldr	r2, [r7, #0]
 801332a:	68b9      	ldr	r1, [r7, #8]
 801332c:	6a38      	ldr	r0, [r7, #32]
 801332e:	f000 fb51 	bl	80139d4 <prvCopyDataToQueue>
 8013332:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013334:	6a3b      	ldr	r3, [r7, #32]
 8013336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d010      	beq.n	801335e <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801333c:	6a3b      	ldr	r3, [r7, #32]
 801333e:	3324      	adds	r3, #36	; 0x24
 8013340:	4618      	mov	r0, r3
 8013342:	f001 fa97 	bl	8014874 <xTaskRemoveFromEventList>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d013      	beq.n	8013374 <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801334c:	4b4e      	ldr	r3, [pc, #312]	; (8013488 <xQueueGenericSend+0x218>)
 801334e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013352:	601a      	str	r2, [r3, #0]
 8013354:	f3bf 8f4f 	dsb	sy
 8013358:	f3bf 8f6f 	isb	sy
 801335c:	e00a      	b.n	8013374 <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801335e:	69fb      	ldr	r3, [r7, #28]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d007      	beq.n	8013374 <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013364:	4b48      	ldr	r3, [pc, #288]	; (8013488 <xQueueGenericSend+0x218>)
 8013366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801336a:	601a      	str	r2, [r3, #0]
 801336c:	f3bf 8f4f 	dsb	sy
 8013370:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013374:	f002 fcf2 	bl	8015d5c <vPortExitCritical>
				return pdPASS;
 8013378:	2301      	movs	r3, #1
 801337a:	e075      	b.n	8013468 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d109      	bne.n	8013396 <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013382:	f002 fceb 	bl	8015d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8013386:	6a3b      	ldr	r3, [r7, #32]
 8013388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801338a:	4a3e      	ldr	r2, [pc, #248]	; (8013484 <xQueueGenericSend+0x214>)
 801338c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013390:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 8013392:	2300      	movs	r3, #0
 8013394:	e068      	b.n	8013468 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013398:	2b00      	cmp	r3, #0
 801339a:	d106      	bne.n	80133aa <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801339c:	f107 0314 	add.w	r3, r7, #20
 80133a0:	4618      	mov	r0, r3
 80133a2:	f001 fac9 	bl	8014938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80133a6:	2301      	movs	r3, #1
 80133a8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80133aa:	f002 fcd7 	bl	8015d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80133ae:	f000 ff4b 	bl	8014248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80133b2:	f002 fca5 	bl	8015d00 <vPortEnterCritical>
 80133b6:	6a3b      	ldr	r3, [r7, #32]
 80133b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133bc:	b25b      	sxtb	r3, r3
 80133be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133c2:	d103      	bne.n	80133cc <xQueueGenericSend+0x15c>
 80133c4:	6a3b      	ldr	r3, [r7, #32]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80133cc:	6a3b      	ldr	r3, [r7, #32]
 80133ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133d2:	b25b      	sxtb	r3, r3
 80133d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133d8:	d103      	bne.n	80133e2 <xQueueGenericSend+0x172>
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	2200      	movs	r2, #0
 80133de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80133e2:	f002 fcbb 	bl	8015d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80133e6:	1d3a      	adds	r2, r7, #4
 80133e8:	f107 0314 	add.w	r3, r7, #20
 80133ec:	4611      	mov	r1, r2
 80133ee:	4618      	mov	r0, r3
 80133f0:	f001 fab8 	bl	8014964 <xTaskCheckForTimeOut>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d12a      	bne.n	8013450 <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80133fa:	6a38      	ldr	r0, [r7, #32]
 80133fc:	f000 fbe2 	bl	8013bc4 <prvIsQueueFull>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d01e      	beq.n	8013444 <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8013406:	6a3b      	ldr	r3, [r7, #32]
 8013408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801340a:	4a1e      	ldr	r2, [pc, #120]	; (8013484 <xQueueGenericSend+0x214>)
 801340c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013410:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013412:	6a3b      	ldr	r3, [r7, #32]
 8013414:	3310      	adds	r3, #16
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	4611      	mov	r1, r2
 801341a:	4618      	mov	r0, r3
 801341c:	f001 f9dc 	bl	80147d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013420:	6a38      	ldr	r0, [r7, #32]
 8013422:	f000 fb67 	bl	8013af4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013426:	f000 ff1d 	bl	8014264 <xTaskResumeAll>
 801342a:	4603      	mov	r3, r0
 801342c:	2b00      	cmp	r3, #0
 801342e:	f47f af6a 	bne.w	8013306 <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 8013432:	4b15      	ldr	r3, [pc, #84]	; (8013488 <xQueueGenericSend+0x218>)
 8013434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	f3bf 8f4f 	dsb	sy
 801343e:	f3bf 8f6f 	isb	sy
 8013442:	e760      	b.n	8013306 <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013444:	6a38      	ldr	r0, [r7, #32]
 8013446:	f000 fb55 	bl	8013af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801344a:	f000 ff0b 	bl	8014264 <xTaskResumeAll>
 801344e:	e75a      	b.n	8013306 <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013450:	6a38      	ldr	r0, [r7, #32]
 8013452:	f000 fb4f 	bl	8013af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013456:	f000 ff05 	bl	8014264 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 801345a:	6a3b      	ldr	r3, [r7, #32]
 801345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801345e:	4a09      	ldr	r2, [pc, #36]	; (8013484 <xQueueGenericSend+0x214>)
 8013460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013464:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 8013466:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013468:	4618      	mov	r0, r3
 801346a:	3728      	adds	r7, #40	; 0x28
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}
 8013470:	0801b85c 	.word	0x0801b85c
 8013474:	0801b890 	.word	0x0801b890
 8013478:	0801b960 	.word	0x0801b960
 801347c:	0801b9b0 	.word	0x0801b9b0
 8013480:	0801b9f8 	.word	0x0801b9f8
 8013484:	e000000c 	.word	0xe000000c
 8013488:	e000ed04 	.word	0xe000ed04

0801348c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b08c      	sub	sp, #48	; 0x30
 8013490:	af00      	add	r7, sp, #0
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	607a      	str	r2, [r7, #4]
 8013498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 801349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d105      	bne.n	80134b0 <xQueueGenericSendFromISR+0x24>
 80134a4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80134a8:	493e      	ldr	r1, [pc, #248]	; (80135a4 <xQueueGenericSendFromISR+0x118>)
 80134aa:	483f      	ldr	r0, [pc, #252]	; (80135a8 <xQueueGenericSendFromISR+0x11c>)
 80134ac:	f7f2 f8ce 	bl	800564c <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d103      	bne.n	80134be <xQueueGenericSendFromISR+0x32>
 80134b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d101      	bne.n	80134c2 <xQueueGenericSendFromISR+0x36>
 80134be:	2301      	movs	r3, #1
 80134c0:	e000      	b.n	80134c4 <xQueueGenericSendFromISR+0x38>
 80134c2:	2300      	movs	r3, #0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d105      	bne.n	80134d4 <xQueueGenericSendFromISR+0x48>
 80134c8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80134cc:	4935      	ldr	r1, [pc, #212]	; (80135a4 <xQueueGenericSendFromISR+0x118>)
 80134ce:	4837      	ldr	r0, [pc, #220]	; (80135ac <xQueueGenericSendFromISR+0x120>)
 80134d0:	f7f2 f8bc 	bl	800564c <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	2b02      	cmp	r3, #2
 80134d8:	d103      	bne.n	80134e2 <xQueueGenericSendFromISR+0x56>
 80134da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d101      	bne.n	80134e6 <xQueueGenericSendFromISR+0x5a>
 80134e2:	2301      	movs	r3, #1
 80134e4:	e000      	b.n	80134e8 <xQueueGenericSendFromISR+0x5c>
 80134e6:	2300      	movs	r3, #0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d105      	bne.n	80134f8 <xQueueGenericSendFromISR+0x6c>
 80134ec:	f240 32be 	movw	r2, #958	; 0x3be
 80134f0:	492c      	ldr	r1, [pc, #176]	; (80135a4 <xQueueGenericSendFromISR+0x118>)
 80134f2:	482f      	ldr	r0, [pc, #188]	; (80135b0 <xQueueGenericSendFromISR+0x124>)
 80134f4:	f7f2 f8aa 	bl	800564c <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134f8:	f002 fcd8 	bl	8015eac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80134fc:	f3ef 8211 	mrs	r2, BASEPRI
 8013500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013504:	f383 8811 	msr	BASEPRI, r3
 8013508:	f3bf 8f6f 	isb	sy
 801350c:	f3bf 8f4f 	dsb	sy
 8013510:	61ba      	str	r2, [r7, #24]
 8013512:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013514:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013516:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013520:	429a      	cmp	r2, r3
 8013522:	d302      	bcc.n	801352a <xQueueGenericSendFromISR+0x9e>
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	2b02      	cmp	r3, #2
 8013528:	d12f      	bne.n	801358a <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801352c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013538:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801353a:	683a      	ldr	r2, [r7, #0]
 801353c:	68b9      	ldr	r1, [r7, #8]
 801353e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013540:	f000 fa48 	bl	80139d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013544:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801354c:	d112      	bne.n	8013574 <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013552:	2b00      	cmp	r3, #0
 8013554:	d016      	beq.n	8013584 <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013558:	3324      	adds	r3, #36	; 0x24
 801355a:	4618      	mov	r0, r3
 801355c:	f001 f98a 	bl	8014874 <xTaskRemoveFromEventList>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d00e      	beq.n	8013584 <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00b      	beq.n	8013584 <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2201      	movs	r2, #1
 8013570:	601a      	str	r2, [r3, #0]
 8013572:	e007      	b.n	8013584 <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013578:	3301      	adds	r3, #1
 801357a:	b2db      	uxtb	r3, r3
 801357c:	b25a      	sxtb	r2, r3
 801357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013584:	2301      	movs	r3, #1
 8013586:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8013588:	e001      	b.n	801358e <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801358a:	2300      	movs	r3, #0
 801358c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013598:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801359c:	4618      	mov	r0, r3
 801359e:	3730      	adds	r7, #48	; 0x30
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}
 80135a4:	0801b85c 	.word	0x0801b85c
 80135a8:	0801b890 	.word	0x0801b890
 80135ac:	0801b960 	.word	0x0801b960
 80135b0:	0801b9b0 	.word	0x0801b9b0

080135b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b08a      	sub	sp, #40	; 0x28
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80135c0:	2300      	movs	r3, #0
 80135c2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135c8:	6a3b      	ldr	r3, [r7, #32]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d105      	bne.n	80135da <xQueueReceive+0x26>
 80135ce:	f240 5204 	movw	r2, #1284	; 0x504
 80135d2:	4962      	ldr	r1, [pc, #392]	; (801375c <xQueueReceive+0x1a8>)
 80135d4:	4862      	ldr	r0, [pc, #392]	; (8013760 <xQueueReceive+0x1ac>)
 80135d6:	f7f2 f839 	bl	800564c <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d103      	bne.n	80135e8 <xQueueReceive+0x34>
 80135e0:	6a3b      	ldr	r3, [r7, #32]
 80135e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d101      	bne.n	80135ec <xQueueReceive+0x38>
 80135e8:	2301      	movs	r3, #1
 80135ea:	e000      	b.n	80135ee <xQueueReceive+0x3a>
 80135ec:	2300      	movs	r3, #0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d105      	bne.n	80135fe <xQueueReceive+0x4a>
 80135f2:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 80135f6:	4959      	ldr	r1, [pc, #356]	; (801375c <xQueueReceive+0x1a8>)
 80135f8:	485a      	ldr	r0, [pc, #360]	; (8013764 <xQueueReceive+0x1b0>)
 80135fa:	f7f2 f827 	bl	800564c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80135fe:	f001 fbcb 	bl	8014d98 <xTaskGetSchedulerState>
 8013602:	4603      	mov	r3, r0
 8013604:	2b00      	cmp	r3, #0
 8013606:	d102      	bne.n	801360e <xQueueReceive+0x5a>
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d101      	bne.n	8013612 <xQueueReceive+0x5e>
 801360e:	2301      	movs	r3, #1
 8013610:	e000      	b.n	8013614 <xQueueReceive+0x60>
 8013612:	2300      	movs	r3, #0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d105      	bne.n	8013624 <xQueueReceive+0x70>
 8013618:	f240 520d 	movw	r2, #1293	; 0x50d
 801361c:	494f      	ldr	r1, [pc, #316]	; (801375c <xQueueReceive+0x1a8>)
 801361e:	4852      	ldr	r0, [pc, #328]	; (8013768 <xQueueReceive+0x1b4>)
 8013620:	f7f2 f814 	bl	800564c <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013624:	f002 fb6c 	bl	8015d00 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013628:	6a3b      	ldr	r3, [r7, #32]
 801362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801362c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d01f      	beq.n	8013674 <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013634:	68b9      	ldr	r1, [r7, #8]
 8013636:	6a38      	ldr	r0, [r7, #32]
 8013638:	f000 fa36 	bl	8013aa8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	1e5a      	subs	r2, r3, #1
 8013640:	6a3b      	ldr	r3, [r7, #32]
 8013642:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013644:	6a3b      	ldr	r3, [r7, #32]
 8013646:	691b      	ldr	r3, [r3, #16]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d00f      	beq.n	801366c <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801364c:	6a3b      	ldr	r3, [r7, #32]
 801364e:	3310      	adds	r3, #16
 8013650:	4618      	mov	r0, r3
 8013652:	f001 f90f 	bl	8014874 <xTaskRemoveFromEventList>
 8013656:	4603      	mov	r3, r0
 8013658:	2b00      	cmp	r3, #0
 801365a:	d007      	beq.n	801366c <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801365c:	4b43      	ldr	r3, [pc, #268]	; (801376c <xQueueReceive+0x1b8>)
 801365e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013662:	601a      	str	r2, [r3, #0]
 8013664:	f3bf 8f4f 	dsb	sy
 8013668:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801366c:	f002 fb76 	bl	8015d5c <vPortExitCritical>
				return pdPASS;
 8013670:	2301      	movs	r3, #1
 8013672:	e06f      	b.n	8013754 <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d103      	bne.n	8013682 <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801367a:	f002 fb6f 	bl	8015d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801367e:	2300      	movs	r3, #0
 8013680:	e068      	b.n	8013754 <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013684:	2b00      	cmp	r3, #0
 8013686:	d106      	bne.n	8013696 <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013688:	f107 0314 	add.w	r3, r7, #20
 801368c:	4618      	mov	r0, r3
 801368e:	f001 f953 	bl	8014938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013692:	2301      	movs	r3, #1
 8013694:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013696:	f002 fb61 	bl	8015d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801369a:	f000 fdd5 	bl	8014248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801369e:	f002 fb2f 	bl	8015d00 <vPortEnterCritical>
 80136a2:	6a3b      	ldr	r3, [r7, #32]
 80136a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136a8:	b25b      	sxtb	r3, r3
 80136aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136ae:	d103      	bne.n	80136b8 <xQueueReceive+0x104>
 80136b0:	6a3b      	ldr	r3, [r7, #32]
 80136b2:	2200      	movs	r2, #0
 80136b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136b8:	6a3b      	ldr	r3, [r7, #32]
 80136ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80136be:	b25b      	sxtb	r3, r3
 80136c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136c4:	d103      	bne.n	80136ce <xQueueReceive+0x11a>
 80136c6:	6a3b      	ldr	r3, [r7, #32]
 80136c8:	2200      	movs	r2, #0
 80136ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136ce:	f002 fb45 	bl	8015d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136d2:	1d3a      	adds	r2, r7, #4
 80136d4:	f107 0314 	add.w	r3, r7, #20
 80136d8:	4611      	mov	r1, r2
 80136da:	4618      	mov	r0, r3
 80136dc:	f001 f942 	bl	8014964 <xTaskCheckForTimeOut>
 80136e0:	4603      	mov	r3, r0
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d129      	bne.n	801373a <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136e6:	6a38      	ldr	r0, [r7, #32]
 80136e8:	f000 fa56 	bl	8013b98 <prvIsQueueEmpty>
 80136ec:	4603      	mov	r3, r0
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d01d      	beq.n	801372e <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80136f2:	6a3b      	ldr	r3, [r7, #32]
 80136f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80136f6:	4a1e      	ldr	r2, [pc, #120]	; (8013770 <xQueueReceive+0x1bc>)
 80136f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80136fc:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	3324      	adds	r3, #36	; 0x24
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	4611      	mov	r1, r2
 8013706:	4618      	mov	r0, r3
 8013708:	f001 f866 	bl	80147d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801370c:	6a38      	ldr	r0, [r7, #32]
 801370e:	f000 f9f1 	bl	8013af4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013712:	f000 fda7 	bl	8014264 <xTaskResumeAll>
 8013716:	4603      	mov	r3, r0
 8013718:	2b00      	cmp	r3, #0
 801371a:	d183      	bne.n	8013624 <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 801371c:	4b13      	ldr	r3, [pc, #76]	; (801376c <xQueueReceive+0x1b8>)
 801371e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013722:	601a      	str	r2, [r3, #0]
 8013724:	f3bf 8f4f 	dsb	sy
 8013728:	f3bf 8f6f 	isb	sy
 801372c:	e77a      	b.n	8013624 <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801372e:	6a38      	ldr	r0, [r7, #32]
 8013730:	f000 f9e0 	bl	8013af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013734:	f000 fd96 	bl	8014264 <xTaskResumeAll>
 8013738:	e774      	b.n	8013624 <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801373a:	6a38      	ldr	r0, [r7, #32]
 801373c:	f000 f9da 	bl	8013af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013740:	f000 fd90 	bl	8014264 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013744:	6a38      	ldr	r0, [r7, #32]
 8013746:	f000 fa27 	bl	8013b98 <prvIsQueueEmpty>
 801374a:	4603      	mov	r3, r0
 801374c:	2b00      	cmp	r3, #0
 801374e:	f43f af69 	beq.w	8013624 <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013752:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013754:	4618      	mov	r0, r3
 8013756:	3728      	adds	r7, #40	; 0x28
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	0801b85c 	.word	0x0801b85c
 8013760:	0801bad4 	.word	0x0801bad4
 8013764:	0801bae0 	.word	0x0801bae0
 8013768:	0801b9f8 	.word	0x0801b9f8
 801376c:	e000ed04 	.word	0xe000ed04
 8013770:	e000000c 	.word	0xe000000c

08013774 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b08a      	sub	sp, #40	; 0x28
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801377e:	2300      	movs	r3, #0
 8013780:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013786:	2300      	movs	r3, #0
 8013788:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801378a:	69fb      	ldr	r3, [r7, #28]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d105      	bne.n	801379c <xQueueSemaphoreTake+0x28>
 8013790:	f240 5295 	movw	r2, #1429	; 0x595
 8013794:	4975      	ldr	r1, [pc, #468]	; (801396c <xQueueSemaphoreTake+0x1f8>)
 8013796:	4876      	ldr	r0, [pc, #472]	; (8013970 <xQueueSemaphoreTake+0x1fc>)
 8013798:	f7f1 ff58 	bl	800564c <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801379c:	69fb      	ldr	r3, [r7, #28]
 801379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d005      	beq.n	80137b0 <xQueueSemaphoreTake+0x3c>
 80137a4:	f240 5299 	movw	r2, #1433	; 0x599
 80137a8:	4970      	ldr	r1, [pc, #448]	; (801396c <xQueueSemaphoreTake+0x1f8>)
 80137aa:	4872      	ldr	r0, [pc, #456]	; (8013974 <xQueueSemaphoreTake+0x200>)
 80137ac:	f7f1 ff4e 	bl	800564c <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80137b0:	f001 faf2 	bl	8014d98 <xTaskGetSchedulerState>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d102      	bne.n	80137c0 <xQueueSemaphoreTake+0x4c>
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d101      	bne.n	80137c4 <xQueueSemaphoreTake+0x50>
 80137c0:	2301      	movs	r3, #1
 80137c2:	e000      	b.n	80137c6 <xQueueSemaphoreTake+0x52>
 80137c4:	2300      	movs	r3, #0
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d105      	bne.n	80137d6 <xQueueSemaphoreTake+0x62>
 80137ca:	f240 529e 	movw	r2, #1438	; 0x59e
 80137ce:	4967      	ldr	r1, [pc, #412]	; (801396c <xQueueSemaphoreTake+0x1f8>)
 80137d0:	4869      	ldr	r0, [pc, #420]	; (8013978 <xQueueSemaphoreTake+0x204>)
 80137d2:	f7f1 ff3b 	bl	800564c <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80137d6:	f002 fa93 	bl	8015d00 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80137da:	69fb      	ldr	r3, [r7, #28]
 80137dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137de:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d024      	beq.n	8013830 <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	1e5a      	subs	r2, r3, #1
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d104      	bne.n	8013800 <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80137f6:	f001 fc6f 	bl	80150d8 <pvTaskIncrementMutexHeldCount>
 80137fa:	4602      	mov	r2, r0
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	691b      	ldr	r3, [r3, #16]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d00f      	beq.n	8013828 <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	3310      	adds	r3, #16
 801380c:	4618      	mov	r0, r3
 801380e:	f001 f831 	bl	8014874 <xTaskRemoveFromEventList>
 8013812:	4603      	mov	r3, r0
 8013814:	2b00      	cmp	r3, #0
 8013816:	d007      	beq.n	8013828 <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013818:	4b58      	ldr	r3, [pc, #352]	; (801397c <xQueueSemaphoreTake+0x208>)
 801381a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801381e:	601a      	str	r2, [r3, #0]
 8013820:	f3bf 8f4f 	dsb	sy
 8013824:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013828:	f002 fa98 	bl	8015d5c <vPortExitCritical>
				return pdPASS;
 801382c:	2301      	movs	r3, #1
 801382e:	e098      	b.n	8013962 <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d10c      	bne.n	8013850 <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013836:	6a3b      	ldr	r3, [r7, #32]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d005      	beq.n	8013848 <xQueueSemaphoreTake+0xd4>
 801383c:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8013840:	494a      	ldr	r1, [pc, #296]	; (801396c <xQueueSemaphoreTake+0x1f8>)
 8013842:	484f      	ldr	r0, [pc, #316]	; (8013980 <xQueueSemaphoreTake+0x20c>)
 8013844:	f7f1 ff02 	bl	800564c <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013848:	f002 fa88 	bl	8015d5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801384c:	2300      	movs	r3, #0
 801384e:	e088      	b.n	8013962 <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013852:	2b00      	cmp	r3, #0
 8013854:	d106      	bne.n	8013864 <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013856:	f107 030c 	add.w	r3, r7, #12
 801385a:	4618      	mov	r0, r3
 801385c:	f001 f86c 	bl	8014938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013860:	2301      	movs	r3, #1
 8013862:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013864:	f002 fa7a 	bl	8015d5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013868:	f000 fcee 	bl	8014248 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801386c:	f002 fa48 	bl	8015d00 <vPortEnterCritical>
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013876:	b25b      	sxtb	r3, r3
 8013878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801387c:	d103      	bne.n	8013886 <xQueueSemaphoreTake+0x112>
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	2200      	movs	r2, #0
 8013882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013886:	69fb      	ldr	r3, [r7, #28]
 8013888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801388c:	b25b      	sxtb	r3, r3
 801388e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013892:	d103      	bne.n	801389c <xQueueSemaphoreTake+0x128>
 8013894:	69fb      	ldr	r3, [r7, #28]
 8013896:	2200      	movs	r2, #0
 8013898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801389c:	f002 fa5e 	bl	8015d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80138a0:	463a      	mov	r2, r7
 80138a2:	f107 030c 	add.w	r3, r7, #12
 80138a6:	4611      	mov	r1, r2
 80138a8:	4618      	mov	r0, r3
 80138aa:	f001 f85b 	bl	8014964 <xTaskCheckForTimeOut>
 80138ae:	4603      	mov	r3, r0
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d138      	bne.n	8013926 <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138b4:	69f8      	ldr	r0, [r7, #28]
 80138b6:	f000 f96f 	bl	8013b98 <prvIsQueueEmpty>
 80138ba:	4603      	mov	r3, r0
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d02c      	beq.n	801391a <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138c4:	4a2f      	ldr	r2, [pc, #188]	; (8013984 <xQueueSemaphoreTake+0x210>)
 80138c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80138ca:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80138cc:	69fb      	ldr	r3, [r7, #28]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d109      	bne.n	80138e8 <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 80138d4:	f002 fa14 	bl	8015d00 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	689b      	ldr	r3, [r3, #8]
 80138dc:	4618      	mov	r0, r3
 80138de:	f001 fa79 	bl	8014dd4 <xTaskPriorityInherit>
 80138e2:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80138e4:	f002 fa3a 	bl	8015d5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	3324      	adds	r3, #36	; 0x24
 80138ec:	683a      	ldr	r2, [r7, #0]
 80138ee:	4611      	mov	r1, r2
 80138f0:	4618      	mov	r0, r3
 80138f2:	f000 ff71 	bl	80147d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80138f6:	69f8      	ldr	r0, [r7, #28]
 80138f8:	f000 f8fc 	bl	8013af4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80138fc:	f000 fcb2 	bl	8014264 <xTaskResumeAll>
 8013900:	4603      	mov	r3, r0
 8013902:	2b00      	cmp	r3, #0
 8013904:	f47f af67 	bne.w	80137d6 <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 8013908:	4b1c      	ldr	r3, [pc, #112]	; (801397c <xQueueSemaphoreTake+0x208>)
 801390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801390e:	601a      	str	r2, [r3, #0]
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	f3bf 8f6f 	isb	sy
 8013918:	e75d      	b.n	80137d6 <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801391a:	69f8      	ldr	r0, [r7, #28]
 801391c:	f000 f8ea 	bl	8013af4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013920:	f000 fca0 	bl	8014264 <xTaskResumeAll>
 8013924:	e757      	b.n	80137d6 <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013926:	69f8      	ldr	r0, [r7, #28]
 8013928:	f000 f8e4 	bl	8013af4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801392c:	f000 fc9a 	bl	8014264 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013930:	69f8      	ldr	r0, [r7, #28]
 8013932:	f000 f931 	bl	8013b98 <prvIsQueueEmpty>
 8013936:	4603      	mov	r3, r0
 8013938:	2b00      	cmp	r3, #0
 801393a:	f43f af4c 	beq.w	80137d6 <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801393e:	6a3b      	ldr	r3, [r7, #32]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d00d      	beq.n	8013960 <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 8013944:	f002 f9dc 	bl	8015d00 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013948:	69f8      	ldr	r0, [r7, #28]
 801394a:	f000 f82b 	bl	80139a4 <prvGetDisinheritPriorityAfterTimeout>
 801394e:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013950:	69fb      	ldr	r3, [r7, #28]
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	6979      	ldr	r1, [r7, #20]
 8013956:	4618      	mov	r0, r3
 8013958:	f001 fb34 	bl	8014fc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801395c:	f002 f9fe 	bl	8015d5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013962:	4618      	mov	r0, r3
 8013964:	3728      	adds	r7, #40	; 0x28
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	0801b85c 	.word	0x0801b85c
 8013970:	0801bad4 	.word	0x0801bad4
 8013974:	0801ba50 	.word	0x0801ba50
 8013978:	0801b9f8 	.word	0x0801b9f8
 801397c:	e000ed04 	.word	0xe000ed04
 8013980:	0801bb34 	.word	0x0801bb34
 8013984:	e000000c 	.word	0xe000000c

08013988 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8013988:	b480      	push	{r7}
 801398a:	b083      	sub	sp, #12
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8013998:	bf00      	nop
 801399a:	370c      	adds	r7, #12
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr

080139a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80139a4:	b480      	push	{r7}
 80139a6:	b085      	sub	sp, #20
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d006      	beq.n	80139c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f1c3 0314 	rsb	r3, r3, #20
 80139be:	60fb      	str	r3, [r7, #12]
 80139c0:	e001      	b.n	80139c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80139c2:	2300      	movs	r3, #0
 80139c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80139c6:	68fb      	ldr	r3, [r7, #12]
	}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3714      	adds	r7, #20
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr

080139d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b086      	sub	sp, #24
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80139e0:	2300      	movs	r3, #0
 80139e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d10d      	bne.n	8013a0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d14d      	bne.n	8013a96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	689b      	ldr	r3, [r3, #8]
 80139fe:	4618      	mov	r0, r3
 8013a00:	f001 fa5e 	bl	8014ec0 <xTaskPriorityDisinherit>
 8013a04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	609a      	str	r2, [r3, #8]
 8013a0c:	e043      	b.n	8013a96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d119      	bne.n	8013a48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	6858      	ldr	r0, [r3, #4]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	68b9      	ldr	r1, [r7, #8]
 8013a20:	f004 f92f 	bl	8017c82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	685a      	ldr	r2, [r3, #4]
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a2c:	441a      	add	r2, r3
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	685a      	ldr	r2, [r3, #4]
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	689b      	ldr	r3, [r3, #8]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d32b      	bcc.n	8013a96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	605a      	str	r2, [r3, #4]
 8013a46:	e026      	b.n	8013a96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	68d8      	ldr	r0, [r3, #12]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a50:	461a      	mov	r2, r3
 8013a52:	68b9      	ldr	r1, [r7, #8]
 8013a54:	f004 f915 	bl	8017c82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	68da      	ldr	r2, [r3, #12]
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a60:	425b      	negs	r3, r3
 8013a62:	441a      	add	r2, r3
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	68da      	ldr	r2, [r3, #12]
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d207      	bcs.n	8013a84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	689a      	ldr	r2, [r3, #8]
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a7c:	425b      	negs	r3, r3
 8013a7e:	441a      	add	r2, r3
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	2b02      	cmp	r3, #2
 8013a88:	d105      	bne.n	8013a96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d002      	beq.n	8013a96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	3b01      	subs	r3, #1
 8013a94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	1c5a      	adds	r2, r3, #1
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013a9e:	697b      	ldr	r3, [r7, #20]
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3718      	adds	r7, #24
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
 8013ab0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d018      	beq.n	8013aec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	68da      	ldr	r2, [r3, #12]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ac2:	441a      	add	r2, r3
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	68da      	ldr	r2, [r3, #12]
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d303      	bcc.n	8013adc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	68d9      	ldr	r1, [r3, #12]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ae4:	461a      	mov	r2, r3
 8013ae6:	6838      	ldr	r0, [r7, #0]
 8013ae8:	f004 f8cb 	bl	8017c82 <memcpy>
	}
}
 8013aec:	bf00      	nop
 8013aee:	3708      	adds	r7, #8
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b084      	sub	sp, #16
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013afc:	f002 f900 	bl	8015d00 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b08:	e011      	b.n	8013b2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d012      	beq.n	8013b38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	3324      	adds	r3, #36	; 0x24
 8013b16:	4618      	mov	r0, r3
 8013b18:	f000 feac 	bl	8014874 <xTaskRemoveFromEventList>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d001      	beq.n	8013b26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013b22:	f000 ff7d 	bl	8014a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013b26:	7bfb      	ldrb	r3, [r7, #15]
 8013b28:	3b01      	subs	r3, #1
 8013b2a:	b2db      	uxtb	r3, r3
 8013b2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	dce9      	bgt.n	8013b0a <prvUnlockQueue+0x16>
 8013b36:	e000      	b.n	8013b3a <prvUnlockQueue+0x46>
					break;
 8013b38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	22ff      	movs	r2, #255	; 0xff
 8013b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013b42:	f002 f90b 	bl	8015d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013b46:	f002 f8db 	bl	8015d00 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b52:	e011      	b.n	8013b78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	691b      	ldr	r3, [r3, #16]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d012      	beq.n	8013b82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	3310      	adds	r3, #16
 8013b60:	4618      	mov	r0, r3
 8013b62:	f000 fe87 	bl	8014874 <xTaskRemoveFromEventList>
 8013b66:	4603      	mov	r3, r0
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d001      	beq.n	8013b70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013b6c:	f000 ff58 	bl	8014a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013b70:	7bbb      	ldrb	r3, [r7, #14]
 8013b72:	3b01      	subs	r3, #1
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	dce9      	bgt.n	8013b54 <prvUnlockQueue+0x60>
 8013b80:	e000      	b.n	8013b84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013b82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	22ff      	movs	r2, #255	; 0xff
 8013b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013b8c:	f002 f8e6 	bl	8015d5c <vPortExitCritical>
}
 8013b90:	bf00      	nop
 8013b92:	3710      	adds	r7, #16
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}

08013b98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ba0:	f002 f8ae 	bl	8015d00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d102      	bne.n	8013bb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013bac:	2301      	movs	r3, #1
 8013bae:	60fb      	str	r3, [r7, #12]
 8013bb0:	e001      	b.n	8013bb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013bb6:	f002 f8d1 	bl	8015d5c <vPortExitCritical>

	return xReturn;
 8013bba:	68fb      	ldr	r3, [r7, #12]
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3710      	adds	r7, #16
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013bcc:	f002 f898 	bl	8015d00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d102      	bne.n	8013be2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	60fb      	str	r3, [r7, #12]
 8013be0:	e001      	b.n	8013be6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013be2:	2300      	movs	r3, #0
 8013be4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013be6:	f002 f8b9 	bl	8015d5c <vPortExitCritical>

	return xReturn;
 8013bea:	68fb      	ldr	r3, [r7, #12]
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3710      	adds	r7, #16
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b085      	sub	sp, #20
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013bfe:	2300      	movs	r3, #0
 8013c00:	60fb      	str	r3, [r7, #12]
 8013c02:	e014      	b.n	8013c2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013c04:	4a0f      	ldr	r2, [pc, #60]	; (8013c44 <vQueueAddToRegistry+0x50>)
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d10b      	bne.n	8013c28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013c10:	490c      	ldr	r1, [pc, #48]	; (8013c44 <vQueueAddToRegistry+0x50>)
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	683a      	ldr	r2, [r7, #0]
 8013c16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013c1a:	4a0a      	ldr	r2, [pc, #40]	; (8013c44 <vQueueAddToRegistry+0x50>)
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	00db      	lsls	r3, r3, #3
 8013c20:	4413      	add	r3, r2
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013c26:	e006      	b.n	8013c36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	60fb      	str	r3, [r7, #12]
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	2b09      	cmp	r3, #9
 8013c32:	d9e7      	bls.n	8013c04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013c34:	bf00      	nop
 8013c36:	bf00      	nop
 8013c38:	3714      	adds	r7, #20
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c40:	4770      	bx	lr
 8013c42:	bf00      	nop
 8013c44:	20007f98 	.word	0x20007f98

08013c48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b086      	sub	sp, #24
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013c58:	f002 f852 	bl	8015d00 <vPortEnterCritical>
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c62:	b25b      	sxtb	r3, r3
 8013c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c68:	d103      	bne.n	8013c72 <vQueueWaitForMessageRestricted+0x2a>
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c78:	b25b      	sxtb	r3, r3
 8013c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c7e:	d103      	bne.n	8013c88 <vQueueWaitForMessageRestricted+0x40>
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	2200      	movs	r2, #0
 8013c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c88:	f002 f868 	bl	8015d5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d106      	bne.n	8013ca2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	3324      	adds	r3, #36	; 0x24
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	68b9      	ldr	r1, [r7, #8]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f000 fdbf 	bl	8014820 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013ca2:	6978      	ldr	r0, [r7, #20]
 8013ca4:	f7ff ff26 	bl	8013af4 <prvUnlockQueue>
	}
 8013ca8:	bf00      	nop
 8013caa:	3718      	adds	r7, #24
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}

08013cb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b08c      	sub	sp, #48	; 0x30
 8013cb4:	af04      	add	r7, sp, #16
 8013cb6:	60f8      	str	r0, [r7, #12]
 8013cb8:	60b9      	str	r1, [r7, #8]
 8013cba:	607a      	str	r2, [r7, #4]
 8013cbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d105      	bne.n	8013cd0 <xTaskCreateStatic+0x20>
 8013cc4:	f44f 7214 	mov.w	r2, #592	; 0x250
 8013cc8:	4920      	ldr	r1, [pc, #128]	; (8013d4c <xTaskCreateStatic+0x9c>)
 8013cca:	4821      	ldr	r0, [pc, #132]	; (8013d50 <xTaskCreateStatic+0xa0>)
 8013ccc:	f7f1 fcbe 	bl	800564c <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d105      	bne.n	8013ce2 <xTaskCreateStatic+0x32>
 8013cd6:	f240 2251 	movw	r2, #593	; 0x251
 8013cda:	491c      	ldr	r1, [pc, #112]	; (8013d4c <xTaskCreateStatic+0x9c>)
 8013cdc:	481d      	ldr	r0, [pc, #116]	; (8013d54 <xTaskCreateStatic+0xa4>)
 8013cde:	f7f1 fcb5 	bl	800564c <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013ce2:	23b8      	movs	r3, #184	; 0xb8
 8013ce4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	2bb8      	cmp	r3, #184	; 0xb8
 8013cea:	d005      	beq.n	8013cf8 <xTaskCreateStatic+0x48>
 8013cec:	f240 2259 	movw	r2, #601	; 0x259
 8013cf0:	4916      	ldr	r1, [pc, #88]	; (8013d4c <xTaskCreateStatic+0x9c>)
 8013cf2:	4819      	ldr	r0, [pc, #100]	; (8013d58 <xTaskCreateStatic+0xa8>)
 8013cf4:	f7f1 fcaa 	bl	800564c <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013cf8:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d01e      	beq.n	8013d3e <xTaskCreateStatic+0x8e>
 8013d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d01b      	beq.n	8013d3e <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d08:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d0e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	2202      	movs	r2, #2
 8013d14:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013d18:	2300      	movs	r3, #0
 8013d1a:	9303      	str	r3, [sp, #12]
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	9302      	str	r3, [sp, #8]
 8013d20:	f107 0318 	add.w	r3, r7, #24
 8013d24:	9301      	str	r3, [sp, #4]
 8013d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d28:	9300      	str	r3, [sp, #0]
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	687a      	ldr	r2, [r7, #4]
 8013d2e:	68b9      	ldr	r1, [r7, #8]
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f000 f859 	bl	8013de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013d36:	69f8      	ldr	r0, [r7, #28]
 8013d38:	f000 f904 	bl	8013f44 <prvAddNewTaskToReadyList>
 8013d3c:	e001      	b.n	8013d42 <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013d42:	69bb      	ldr	r3, [r7, #24]
	}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3720      	adds	r7, #32
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	0801bbc4 	.word	0x0801bbc4
 8013d50:	0801bbf8 	.word	0x0801bbf8
 8013d54:	0801bc10 	.word	0x0801bc10
 8013d58:	0801bc28 	.word	0x0801bc28

08013d5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b08c      	sub	sp, #48	; 0x30
 8013d60:	af04      	add	r7, sp, #16
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	603b      	str	r3, [r7, #0]
 8013d68:	4613      	mov	r3, r2
 8013d6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013d6c:	88fb      	ldrh	r3, [r7, #6]
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	4618      	mov	r0, r3
 8013d72:	f002 f8d5 	bl	8015f20 <pvPortMalloc>
 8013d76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d00e      	beq.n	8013d9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013d7e:	20b8      	movs	r0, #184	; 0xb8
 8013d80:	f002 f8ce 	bl	8015f20 <pvPortMalloc>
 8013d84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d003      	beq.n	8013d94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	697a      	ldr	r2, [r7, #20]
 8013d90:	631a      	str	r2, [r3, #48]	; 0x30
 8013d92:	e005      	b.n	8013da0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013d94:	6978      	ldr	r0, [r7, #20]
 8013d96:	f002 f985 	bl	80160a4 <vPortFree>
 8013d9a:	e001      	b.n	8013da0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d017      	beq.n	8013dd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	2200      	movs	r2, #0
 8013daa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013dae:	88fa      	ldrh	r2, [r7, #6]
 8013db0:	2300      	movs	r3, #0
 8013db2:	9303      	str	r3, [sp, #12]
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	9302      	str	r3, [sp, #8]
 8013db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dba:	9301      	str	r3, [sp, #4]
 8013dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbe:	9300      	str	r3, [sp, #0]
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	68b9      	ldr	r1, [r7, #8]
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f000 f80f 	bl	8013de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013dca:	69f8      	ldr	r0, [r7, #28]
 8013dcc:	f000 f8ba 	bl	8013f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	61bb      	str	r3, [r7, #24]
 8013dd4:	e002      	b.n	8013ddc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013ddc:	69bb      	ldr	r3, [r7, #24]
	}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3720      	adds	r7, #32
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
	...

08013de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b086      	sub	sp, #24
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	60f8      	str	r0, [r7, #12]
 8013df0:	60b9      	str	r1, [r7, #8]
 8013df2:	607a      	str	r2, [r7, #4]
 8013df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	461a      	mov	r2, r3
 8013e00:	21a5      	movs	r1, #165	; 0xa5
 8013e02:	f003 fe39 	bl	8017a78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013e10:	3b01      	subs	r3, #1
 8013e12:	009b      	lsls	r3, r3, #2
 8013e14:	4413      	add	r3, r2
 8013e16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	f023 0307 	bic.w	r3, r3, #7
 8013e1e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	f003 0307 	and.w	r3, r3, #7
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d005      	beq.n	8013e36 <prvInitialiseNewTask+0x4e>
 8013e2a:	f44f 7259 	mov.w	r2, #868	; 0x364
 8013e2e:	4940      	ldr	r1, [pc, #256]	; (8013f30 <prvInitialiseNewTask+0x148>)
 8013e30:	4840      	ldr	r0, [pc, #256]	; (8013f34 <prvInitialiseNewTask+0x14c>)
 8013e32:	f7f1 fc0b 	bl	800564c <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8013e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e38:	693a      	ldr	r2, [r7, #16]
 8013e3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d01f      	beq.n	8013e82 <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e42:	2300      	movs	r3, #0
 8013e44:	617b      	str	r3, [r7, #20]
 8013e46:	e012      	b.n	8013e6e <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013e48:	68ba      	ldr	r2, [r7, #8]
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	7819      	ldrb	r1, [r3, #0]
 8013e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	4413      	add	r3, r2
 8013e56:	3334      	adds	r3, #52	; 0x34
 8013e58:	460a      	mov	r2, r1
 8013e5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013e5c:	68ba      	ldr	r2, [r7, #8]
 8013e5e:	697b      	ldr	r3, [r7, #20]
 8013e60:	4413      	add	r3, r2
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d006      	beq.n	8013e76 <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	617b      	str	r3, [r7, #20]
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	2b0f      	cmp	r3, #15
 8013e72:	d9e9      	bls.n	8013e48 <prvInitialiseNewTask+0x60>
 8013e74:	e000      	b.n	8013e78 <prvInitialiseNewTask+0x90>
			{
				break;
 8013e76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013e80:	e003      	b.n	8013e8a <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e84:	2200      	movs	r2, #0
 8013e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013e8a:	6a3b      	ldr	r3, [r7, #32]
 8013e8c:	2b13      	cmp	r3, #19
 8013e8e:	d901      	bls.n	8013e94 <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013e90:	2313      	movs	r3, #19
 8013e92:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e96:	6a3a      	ldr	r2, [r7, #32]
 8013e98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9c:	6a3a      	ldr	r2, [r7, #32]
 8013e9e:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8013ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fe ffce 	bl	8012e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb2:	3318      	adds	r3, #24
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fe ffc9 	bl	8012e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	f1c3 0214 	rsb	r2, r3, #20
 8013ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8013ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	2200      	movs	r2, #0
 8013eda:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ede:	2200      	movs	r2, #0
 8013ee0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eee:	3360      	adds	r3, #96	; 0x60
 8013ef0:	224c      	movs	r2, #76	; 0x4c
 8013ef2:	2100      	movs	r1, #0
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f003 fdbf 	bl	8017a78 <memset>
 8013efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013efc:	4a0e      	ldr	r2, [pc, #56]	; (8013f38 <prvInitialiseNewTask+0x150>)
 8013efe:	665a      	str	r2, [r3, #100]	; 0x64
 8013f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f02:	4a0e      	ldr	r2, [pc, #56]	; (8013f3c <prvInitialiseNewTask+0x154>)
 8013f04:	669a      	str	r2, [r3, #104]	; 0x68
 8013f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f08:	4a0d      	ldr	r2, [pc, #52]	; (8013f40 <prvInitialiseNewTask+0x158>)
 8013f0a:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013f0c:	683a      	ldr	r2, [r7, #0]
 8013f0e:	68f9      	ldr	r1, [r7, #12]
 8013f10:	6938      	ldr	r0, [r7, #16]
 8013f12:	f001 fdc9 	bl	8015aa8 <pxPortInitialiseStack>
 8013f16:	4602      	mov	r2, r0
 8013f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d002      	beq.n	8013f28 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f28:	bf00      	nop
 8013f2a:	3718      	adds	r7, #24
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	0801bbc4 	.word	0x0801bbc4
 8013f34:	0801bc44 	.word	0x0801bc44
 8013f38:	2000dbf8 	.word	0x2000dbf8
 8013f3c:	2000dc60 	.word	0x2000dc60
 8013f40:	2000dcc8 	.word	0x2000dcc8

08013f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013f4c:	f001 fed8 	bl	8015d00 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013f50:	4b2c      	ldr	r3, [pc, #176]	; (8014004 <prvAddNewTaskToReadyList+0xc0>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	3301      	adds	r3, #1
 8013f56:	4a2b      	ldr	r2, [pc, #172]	; (8014004 <prvAddNewTaskToReadyList+0xc0>)
 8013f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013f5a:	4b2b      	ldr	r3, [pc, #172]	; (8014008 <prvAddNewTaskToReadyList+0xc4>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d109      	bne.n	8013f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013f62:	4a29      	ldr	r2, [pc, #164]	; (8014008 <prvAddNewTaskToReadyList+0xc4>)
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013f68:	4b26      	ldr	r3, [pc, #152]	; (8014004 <prvAddNewTaskToReadyList+0xc0>)
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	2b01      	cmp	r3, #1
 8013f6e:	d110      	bne.n	8013f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013f70:	f000 fd7c 	bl	8014a6c <prvInitialiseTaskLists>
 8013f74:	e00d      	b.n	8013f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013f76:	4b25      	ldr	r3, [pc, #148]	; (801400c <prvAddNewTaskToReadyList+0xc8>)
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d109      	bne.n	8013f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013f7e:	4b22      	ldr	r3, [pc, #136]	; (8014008 <prvAddNewTaskToReadyList+0xc4>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f88:	429a      	cmp	r2, r3
 8013f8a:	d802      	bhi.n	8013f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013f8c:	4a1e      	ldr	r2, [pc, #120]	; (8014008 <prvAddNewTaskToReadyList+0xc4>)
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013f92:	4b1f      	ldr	r3, [pc, #124]	; (8014010 <prvAddNewTaskToReadyList+0xcc>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	3301      	adds	r3, #1
 8013f98:	4a1d      	ldr	r2, [pc, #116]	; (8014010 <prvAddNewTaskToReadyList+0xcc>)
 8013f9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013f9c:	4b1c      	ldr	r3, [pc, #112]	; (8014010 <prvAddNewTaskToReadyList+0xcc>)
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fa8:	2201      	movs	r2, #1
 8013faa:	409a      	lsls	r2, r3
 8013fac:	4b19      	ldr	r3, [pc, #100]	; (8014014 <prvAddNewTaskToReadyList+0xd0>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	4313      	orrs	r3, r2
 8013fb2:	4a18      	ldr	r2, [pc, #96]	; (8014014 <prvAddNewTaskToReadyList+0xd0>)
 8013fb4:	6013      	str	r3, [r2, #0]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fba:	4613      	mov	r3, r2
 8013fbc:	009b      	lsls	r3, r3, #2
 8013fbe:	4413      	add	r3, r2
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4a15      	ldr	r2, [pc, #84]	; (8014018 <prvAddNewTaskToReadyList+0xd4>)
 8013fc4:	441a      	add	r2, r3
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	3304      	adds	r3, #4
 8013fca:	4619      	mov	r1, r3
 8013fcc:	4610      	mov	r0, r2
 8013fce:	f7fe ff4a 	bl	8012e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013fd2:	f001 fec3 	bl	8015d5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013fd6:	4b0d      	ldr	r3, [pc, #52]	; (801400c <prvAddNewTaskToReadyList+0xc8>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d00e      	beq.n	8013ffc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013fde:	4b0a      	ldr	r3, [pc, #40]	; (8014008 <prvAddNewTaskToReadyList+0xc4>)
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d207      	bcs.n	8013ffc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013fec:	4b0b      	ldr	r3, [pc, #44]	; (801401c <prvAddNewTaskToReadyList+0xd8>)
 8013fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ff2:	601a      	str	r2, [r3, #0]
 8013ff4:	f3bf 8f4f 	dsb	sy
 8013ff8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ffc:	bf00      	nop
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	200081f0 	.word	0x200081f0
 8014008:	20007fe8 	.word	0x20007fe8
 801400c:	200081fc 	.word	0x200081fc
 8014010:	2000820c 	.word	0x2000820c
 8014014:	200081f8 	.word	0x200081f8
 8014018:	20007fec 	.word	0x20007fec
 801401c:	e000ed04 	.word	0xe000ed04

08014020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014020:	b580      	push	{r7, lr}
 8014022:	b084      	sub	sp, #16
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014028:	2300      	movs	r3, #0
 801402a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d012      	beq.n	8014058 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014032:	4b11      	ldr	r3, [pc, #68]	; (8014078 <vTaskDelay+0x58>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d005      	beq.n	8014046 <vTaskDelay+0x26>
 801403a:	f240 5244 	movw	r2, #1348	; 0x544
 801403e:	490f      	ldr	r1, [pc, #60]	; (801407c <vTaskDelay+0x5c>)
 8014040:	480f      	ldr	r0, [pc, #60]	; (8014080 <vTaskDelay+0x60>)
 8014042:	f7f1 fb03 	bl	800564c <assertFail>
			vTaskSuspendAll();
 8014046:	f000 f8ff 	bl	8014248 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801404a:	2100      	movs	r1, #0
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f001 f8c9 	bl	80151e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014052:	f000 f907 	bl	8014264 <xTaskResumeAll>
 8014056:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d107      	bne.n	801406e <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 801405e:	4b09      	ldr	r3, [pc, #36]	; (8014084 <vTaskDelay+0x64>)
 8014060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014064:	601a      	str	r2, [r3, #0]
 8014066:	f3bf 8f4f 	dsb	sy
 801406a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801406e:	bf00      	nop
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	20008218 	.word	0x20008218
 801407c:	0801bbc4 	.word	0x0801bbc4
 8014080:	0801bcb0 	.word	0x0801bcb0
 8014084:	e000ed04 	.word	0xe000ed04

08014088 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8014088:	b580      	push	{r7, lr}
 801408a:	b088      	sub	sp, #32
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d105      	bne.n	80140a6 <eTaskGetState+0x1e>
 801409a:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 801409e:	4926      	ldr	r1, [pc, #152]	; (8014138 <eTaskGetState+0xb0>)
 80140a0:	4826      	ldr	r0, [pc, #152]	; (801413c <eTaskGetState+0xb4>)
 80140a2:	f7f1 fad3 	bl	800564c <assertFail>

		if( pxTCB == pxCurrentTCB )
 80140a6:	4b26      	ldr	r3, [pc, #152]	; (8014140 <eTaskGetState+0xb8>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	69ba      	ldr	r2, [r7, #24]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d102      	bne.n	80140b6 <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80140b0:	2300      	movs	r3, #0
 80140b2:	77fb      	strb	r3, [r7, #31]
 80140b4:	e03a      	b.n	801412c <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 80140b6:	f001 fe23 	bl	8015d00 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80140ba:	69bb      	ldr	r3, [r7, #24]
 80140bc:	695b      	ldr	r3, [r3, #20]
 80140be:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80140c0:	4b20      	ldr	r3, [pc, #128]	; (8014144 <eTaskGetState+0xbc>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80140c6:	4b20      	ldr	r3, [pc, #128]	; (8014148 <eTaskGetState+0xc0>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80140cc:	f001 fe46 	bl	8015d5c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d003      	beq.n	80140e0 <eTaskGetState+0x58>
 80140d8:	697a      	ldr	r2, [r7, #20]
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d102      	bne.n	80140e6 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80140e0:	2302      	movs	r3, #2
 80140e2:	77fb      	strb	r3, [r7, #31]
 80140e4:	e022      	b.n	801412c <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	4a18      	ldr	r2, [pc, #96]	; (801414c <eTaskGetState+0xc4>)
 80140ea:	4293      	cmp	r3, r2
 80140ec:	d112      	bne.n	8014114 <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80140ee:	69bb      	ldr	r3, [r7, #24]
 80140f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d10b      	bne.n	801410e <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80140fc:	b2db      	uxtb	r3, r3
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d102      	bne.n	8014108 <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 8014102:	2302      	movs	r3, #2
 8014104:	77fb      	strb	r3, [r7, #31]
 8014106:	e011      	b.n	801412c <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 8014108:	2303      	movs	r3, #3
 801410a:	77fb      	strb	r3, [r7, #31]
 801410c:	e00e      	b.n	801412c <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801410e:	2302      	movs	r3, #2
 8014110:	77fb      	strb	r3, [r7, #31]
 8014112:	e00b      	b.n	801412c <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	4a0e      	ldr	r2, [pc, #56]	; (8014150 <eTaskGetState+0xc8>)
 8014118:	4293      	cmp	r3, r2
 801411a:	d002      	beq.n	8014122 <eTaskGetState+0x9a>
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d102      	bne.n	8014128 <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8014122:	2304      	movs	r3, #4
 8014124:	77fb      	strb	r3, [r7, #31]
 8014126:	e001      	b.n	801412c <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8014128:	2301      	movs	r3, #1
 801412a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801412c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801412e:	4618      	mov	r0, r3
 8014130:	3720      	adds	r7, #32
 8014132:	46bd      	mov	sp, r7
 8014134:	bd80      	pop	{r7, pc}
 8014136:	bf00      	nop
 8014138:	0801bbc4 	.word	0x0801bbc4
 801413c:	0801bcf8 	.word	0x0801bcf8
 8014140:	20007fe8 	.word	0x20007fe8
 8014144:	200081a4 	.word	0x200081a4
 8014148:	200081a8 	.word	0x200081a8
 801414c:	200081d8 	.word	0x200081d8
 8014150:	200081c0 	.word	0x200081c0

08014154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b08a      	sub	sp, #40	; 0x28
 8014158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801415a:	2300      	movs	r3, #0
 801415c:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801415e:	2300      	movs	r3, #0
 8014160:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014162:	1d3a      	adds	r2, r7, #4
 8014164:	f107 0108 	add.w	r1, r7, #8
 8014168:	f107 030c 	add.w	r3, r7, #12
 801416c:	4618      	mov	r0, r3
 801416e:	f7f4 fc69 	bl	8008a44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014172:	6879      	ldr	r1, [r7, #4]
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	68fa      	ldr	r2, [r7, #12]
 8014178:	9202      	str	r2, [sp, #8]
 801417a:	9301      	str	r3, [sp, #4]
 801417c:	2300      	movs	r3, #0
 801417e:	9300      	str	r3, [sp, #0]
 8014180:	2300      	movs	r3, #0
 8014182:	460a      	mov	r2, r1
 8014184:	4925      	ldr	r1, [pc, #148]	; (801421c <vTaskStartScheduler+0xc8>)
 8014186:	4826      	ldr	r0, [pc, #152]	; (8014220 <vTaskStartScheduler+0xcc>)
 8014188:	f7ff fd92 	bl	8013cb0 <xTaskCreateStatic>
 801418c:	4603      	mov	r3, r0
 801418e:	4a25      	ldr	r2, [pc, #148]	; (8014224 <vTaskStartScheduler+0xd0>)
 8014190:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014192:	4b24      	ldr	r3, [pc, #144]	; (8014224 <vTaskStartScheduler+0xd0>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d002      	beq.n	80141a0 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 801419a:	2301      	movs	r3, #1
 801419c:	617b      	str	r3, [r7, #20]
 801419e:	e001      	b.n	80141a4 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80141a0:	2300      	movs	r3, #0
 80141a2:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	2b01      	cmp	r3, #1
 80141a8:	d102      	bne.n	80141b0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80141aa:	f001 f881 	bl	80152b0 <xTimerCreateTimerTask>
 80141ae:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d123      	bne.n	80141fe <vTaskStartScheduler+0xaa>
	__asm volatile
 80141b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ba:	f383 8811 	msr	BASEPRI, r3
 80141be:	f3bf 8f6f 	isb	sy
 80141c2:	f3bf 8f4f 	dsb	sy
 80141c6:	613b      	str	r3, [r7, #16]
}
 80141c8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80141ca:	4b17      	ldr	r3, [pc, #92]	; (8014228 <vTaskStartScheduler+0xd4>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	3360      	adds	r3, #96	; 0x60
 80141d0:	4a16      	ldr	r2, [pc, #88]	; (801422c <vTaskStartScheduler+0xd8>)
 80141d2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80141d4:	4b16      	ldr	r3, [pc, #88]	; (8014230 <vTaskStartScheduler+0xdc>)
 80141d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80141dc:	4b15      	ldr	r3, [pc, #84]	; (8014234 <vTaskStartScheduler+0xe0>)
 80141de:	2201      	movs	r2, #1
 80141e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80141e2:	4b15      	ldr	r3, [pc, #84]	; (8014238 <vTaskStartScheduler+0xe4>)
 80141e4:	2200      	movs	r2, #0
 80141e6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80141e8:	f7f4 fc12 	bl	8008a10 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 80141ec:	4b0e      	ldr	r3, [pc, #56]	; (8014228 <vTaskStartScheduler+0xd4>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	3334      	adds	r3, #52	; 0x34
 80141f2:	4a12      	ldr	r2, [pc, #72]	; (801423c <vTaskStartScheduler+0xe8>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80141f8:	f001 fcda 	bl	8015bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80141fc:	e009      	b.n	8014212 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014204:	d105      	bne.n	8014212 <vTaskStartScheduler+0xbe>
 8014206:	f640 022a 	movw	r2, #2090	; 0x82a
 801420a:	490d      	ldr	r1, [pc, #52]	; (8014240 <vTaskStartScheduler+0xec>)
 801420c:	480d      	ldr	r0, [pc, #52]	; (8014244 <vTaskStartScheduler+0xf0>)
 801420e:	f7f1 fa1d 	bl	800564c <assertFail>
}
 8014212:	bf00      	nop
 8014214:	3718      	adds	r7, #24
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	0801bd44 	.word	0x0801bd44
 8014220:	08014a39 	.word	0x08014a39
 8014224:	20008214 	.word	0x20008214
 8014228:	20007fe8 	.word	0x20007fe8
 801422c:	200004ac 	.word	0x200004ac
 8014230:	20008210 	.word	0x20008210
 8014234:	200081fc 	.word	0x200081fc
 8014238:	200081f4 	.word	0x200081f4
 801423c:	e0000004 	.word	0xe0000004
 8014240:	0801bbc4 	.word	0x0801bbc4
 8014244:	0801bd4c 	.word	0x0801bd4c

08014248 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014248:	b480      	push	{r7}
 801424a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801424c:	4b04      	ldr	r3, [pc, #16]	; (8014260 <vTaskSuspendAll+0x18>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	3301      	adds	r3, #1
 8014252:	4a03      	ldr	r2, [pc, #12]	; (8014260 <vTaskSuspendAll+0x18>)
 8014254:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014256:	bf00      	nop
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr
 8014260:	20008218 	.word	0x20008218

08014264 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b084      	sub	sp, #16
 8014268:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801426a:	2300      	movs	r3, #0
 801426c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801426e:	2300      	movs	r3, #0
 8014270:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014272:	4b3f      	ldr	r3, [pc, #252]	; (8014370 <xTaskResumeAll+0x10c>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d105      	bne.n	8014286 <xTaskResumeAll+0x22>
 801427a:	f640 0299 	movw	r2, #2201	; 0x899
 801427e:	493d      	ldr	r1, [pc, #244]	; (8014374 <xTaskResumeAll+0x110>)
 8014280:	483d      	ldr	r0, [pc, #244]	; (8014378 <xTaskResumeAll+0x114>)
 8014282:	f7f1 f9e3 	bl	800564c <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014286:	f001 fd3b 	bl	8015d00 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801428a:	4b39      	ldr	r3, [pc, #228]	; (8014370 <xTaskResumeAll+0x10c>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	3b01      	subs	r3, #1
 8014290:	4a37      	ldr	r2, [pc, #220]	; (8014370 <xTaskResumeAll+0x10c>)
 8014292:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014294:	4b36      	ldr	r3, [pc, #216]	; (8014370 <xTaskResumeAll+0x10c>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d161      	bne.n	8014360 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801429c:	4b37      	ldr	r3, [pc, #220]	; (801437c <xTaskResumeAll+0x118>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d05d      	beq.n	8014360 <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80142a4:	e02e      	b.n	8014304 <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142a6:	4b36      	ldr	r3, [pc, #216]	; (8014380 <xTaskResumeAll+0x11c>)
 80142a8:	68db      	ldr	r3, [r3, #12]
 80142aa:	68db      	ldr	r3, [r3, #12]
 80142ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	3318      	adds	r3, #24
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7fe fe34 	bl	8012f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	3304      	adds	r3, #4
 80142bc:	4618      	mov	r0, r3
 80142be:	f7fe fe2f 	bl	8012f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c6:	2201      	movs	r2, #1
 80142c8:	409a      	lsls	r2, r3
 80142ca:	4b2e      	ldr	r3, [pc, #184]	; (8014384 <xTaskResumeAll+0x120>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	4313      	orrs	r3, r2
 80142d0:	4a2c      	ldr	r2, [pc, #176]	; (8014384 <xTaskResumeAll+0x120>)
 80142d2:	6013      	str	r3, [r2, #0]
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142d8:	4613      	mov	r3, r2
 80142da:	009b      	lsls	r3, r3, #2
 80142dc:	4413      	add	r3, r2
 80142de:	009b      	lsls	r3, r3, #2
 80142e0:	4a29      	ldr	r2, [pc, #164]	; (8014388 <xTaskResumeAll+0x124>)
 80142e2:	441a      	add	r2, r3
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	3304      	adds	r3, #4
 80142e8:	4619      	mov	r1, r3
 80142ea:	4610      	mov	r0, r2
 80142ec:	f7fe fdbb 	bl	8012e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142f4:	4b25      	ldr	r3, [pc, #148]	; (801438c <xTaskResumeAll+0x128>)
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142fa:	429a      	cmp	r2, r3
 80142fc:	d302      	bcc.n	8014304 <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 80142fe:	4b24      	ldr	r3, [pc, #144]	; (8014390 <xTaskResumeAll+0x12c>)
 8014300:	2201      	movs	r2, #1
 8014302:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014304:	4b1e      	ldr	r3, [pc, #120]	; (8014380 <xTaskResumeAll+0x11c>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1cc      	bne.n	80142a6 <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d001      	beq.n	8014316 <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014312:	f000 fd21 	bl	8014d58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014316:	4b1f      	ldr	r3, [pc, #124]	; (8014394 <xTaskResumeAll+0x130>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d010      	beq.n	8014344 <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014322:	f000 f8db 	bl	80144dc <xTaskIncrementTick>
 8014326:	4603      	mov	r3, r0
 8014328:	2b00      	cmp	r3, #0
 801432a:	d002      	beq.n	8014332 <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 801432c:	4b18      	ldr	r3, [pc, #96]	; (8014390 <xTaskResumeAll+0x12c>)
 801432e:	2201      	movs	r2, #1
 8014330:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	3b01      	subs	r3, #1
 8014336:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d1f1      	bne.n	8014322 <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 801433e:	4b15      	ldr	r3, [pc, #84]	; (8014394 <xTaskResumeAll+0x130>)
 8014340:	2200      	movs	r2, #0
 8014342:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014344:	4b12      	ldr	r3, [pc, #72]	; (8014390 <xTaskResumeAll+0x12c>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d009      	beq.n	8014360 <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801434c:	2301      	movs	r3, #1
 801434e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014350:	4b11      	ldr	r3, [pc, #68]	; (8014398 <xTaskResumeAll+0x134>)
 8014352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014356:	601a      	str	r2, [r3, #0]
 8014358:	f3bf 8f4f 	dsb	sy
 801435c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014360:	f001 fcfc 	bl	8015d5c <vPortExitCritical>

	return xAlreadyYielded;
 8014364:	68bb      	ldr	r3, [r7, #8]
}
 8014366:	4618      	mov	r0, r3
 8014368:	3710      	adds	r7, #16
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	20008218 	.word	0x20008218
 8014374:	0801bbc4 	.word	0x0801bbc4
 8014378:	0801bd80 	.word	0x0801bd80
 801437c:	200081f0 	.word	0x200081f0
 8014380:	200081ac 	.word	0x200081ac
 8014384:	200081f8 	.word	0x200081f8
 8014388:	20007fec 	.word	0x20007fec
 801438c:	20007fe8 	.word	0x20007fe8
 8014390:	20008204 	.word	0x20008204
 8014394:	20008200 	.word	0x20008200
 8014398:	e000ed04 	.word	0xe000ed04

0801439c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801439c:	b480      	push	{r7}
 801439e:	b083      	sub	sp, #12
 80143a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80143a2:	4b05      	ldr	r3, [pc, #20]	; (80143b8 <xTaskGetTickCount+0x1c>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80143a8:	687b      	ldr	r3, [r7, #4]
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	370c      	adds	r7, #12
 80143ae:	46bd      	mov	sp, r7
 80143b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b4:	4770      	bx	lr
 80143b6:	bf00      	nop
 80143b8:	200081f4 	.word	0x200081f4

080143bc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b086      	sub	sp, #24
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	60f8      	str	r0, [r7, #12]
 80143c4:	60b9      	str	r1, [r7, #8]
 80143c6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80143c8:	2300      	movs	r3, #0
 80143ca:	617b      	str	r3, [r7, #20]
 80143cc:	2314      	movs	r3, #20
 80143ce:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80143d0:	f7ff ff3a 	bl	8014248 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80143d4:	4b3b      	ldr	r3, [pc, #236]	; (80144c4 <uxTaskGetSystemState+0x108>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	68ba      	ldr	r2, [r7, #8]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d36a      	bcc.n	80144b4 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	3b01      	subs	r3, #1
 80143e2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80143e4:	697a      	ldr	r2, [r7, #20]
 80143e6:	4613      	mov	r3, r2
 80143e8:	00db      	lsls	r3, r3, #3
 80143ea:	4413      	add	r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	461a      	mov	r2, r3
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	1898      	adds	r0, r3, r2
 80143f4:	693a      	ldr	r2, [r7, #16]
 80143f6:	4613      	mov	r3, r2
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	4413      	add	r3, r2
 80143fc:	009b      	lsls	r3, r3, #2
 80143fe:	4a32      	ldr	r2, [pc, #200]	; (80144c8 <uxTaskGetSystemState+0x10c>)
 8014400:	4413      	add	r3, r2
 8014402:	2201      	movs	r2, #1
 8014404:	4619      	mov	r1, r3
 8014406:	f000 fc05 	bl	8014c14 <prvListTasksWithinSingleList>
 801440a:	4602      	mov	r2, r0
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	4413      	add	r3, r2
 8014410:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d1e2      	bne.n	80143de <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8014418:	697a      	ldr	r2, [r7, #20]
 801441a:	4613      	mov	r3, r2
 801441c:	00db      	lsls	r3, r3, #3
 801441e:	4413      	add	r3, r2
 8014420:	009b      	lsls	r3, r3, #2
 8014422:	461a      	mov	r2, r3
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	4413      	add	r3, r2
 8014428:	4a28      	ldr	r2, [pc, #160]	; (80144cc <uxTaskGetSystemState+0x110>)
 801442a:	6811      	ldr	r1, [r2, #0]
 801442c:	2202      	movs	r2, #2
 801442e:	4618      	mov	r0, r3
 8014430:	f000 fbf0 	bl	8014c14 <prvListTasksWithinSingleList>
 8014434:	4602      	mov	r2, r0
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	4413      	add	r3, r2
 801443a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 801443c:	697a      	ldr	r2, [r7, #20]
 801443e:	4613      	mov	r3, r2
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	4413      	add	r3, r2
 8014444:	009b      	lsls	r3, r3, #2
 8014446:	461a      	mov	r2, r3
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	4413      	add	r3, r2
 801444c:	4a20      	ldr	r2, [pc, #128]	; (80144d0 <uxTaskGetSystemState+0x114>)
 801444e:	6811      	ldr	r1, [r2, #0]
 8014450:	2202      	movs	r2, #2
 8014452:	4618      	mov	r0, r3
 8014454:	f000 fbde 	bl	8014c14 <prvListTasksWithinSingleList>
 8014458:	4602      	mov	r2, r0
 801445a:	697b      	ldr	r3, [r7, #20]
 801445c:	4413      	add	r3, r2
 801445e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8014460:	697a      	ldr	r2, [r7, #20]
 8014462:	4613      	mov	r3, r2
 8014464:	00db      	lsls	r3, r3, #3
 8014466:	4413      	add	r3, r2
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	461a      	mov	r2, r3
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	4413      	add	r3, r2
 8014470:	2204      	movs	r2, #4
 8014472:	4918      	ldr	r1, [pc, #96]	; (80144d4 <uxTaskGetSystemState+0x118>)
 8014474:	4618      	mov	r0, r3
 8014476:	f000 fbcd 	bl	8014c14 <prvListTasksWithinSingleList>
 801447a:	4602      	mov	r2, r0
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	4413      	add	r3, r2
 8014480:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8014482:	697a      	ldr	r2, [r7, #20]
 8014484:	4613      	mov	r3, r2
 8014486:	00db      	lsls	r3, r3, #3
 8014488:	4413      	add	r3, r2
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	461a      	mov	r2, r3
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	4413      	add	r3, r2
 8014492:	2203      	movs	r2, #3
 8014494:	4910      	ldr	r1, [pc, #64]	; (80144d8 <uxTaskGetSystemState+0x11c>)
 8014496:	4618      	mov	r0, r3
 8014498:	f000 fbbc 	bl	8014c14 <prvListTasksWithinSingleList>
 801449c:	4602      	mov	r2, r0
 801449e:	697b      	ldr	r3, [r7, #20]
 80144a0:	4413      	add	r3, r2
 80144a2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d004      	beq.n	80144b4 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80144aa:	f7f4 fab8 	bl	8008a1e <getRunTimeCounterValue>
 80144ae:	4602      	mov	r2, r0
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80144b4:	f7ff fed6 	bl	8014264 <xTaskResumeAll>

		return uxTask;
 80144b8:	697b      	ldr	r3, [r7, #20]
	}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3718      	adds	r7, #24
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	200081f0 	.word	0x200081f0
 80144c8:	20007fec 	.word	0x20007fec
 80144cc:	200081a4 	.word	0x200081a4
 80144d0:	200081a8 	.word	0x200081a8
 80144d4:	200081c0 	.word	0x200081c0
 80144d8:	200081d8 	.word	0x200081d8

080144dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b086      	sub	sp, #24
 80144e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80144e2:	2300      	movs	r3, #0
 80144e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 80144e6:	4a4e      	ldr	r2, [pc, #312]	; (8014620 <xTaskIncrementTick+0x144>)
 80144e8:	4b4e      	ldr	r3, [pc, #312]	; (8014624 <xTaskIncrementTick+0x148>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144ee:	4b4e      	ldr	r3, [pc, #312]	; (8014628 <xTaskIncrementTick+0x14c>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	f040 8089 	bne.w	801460a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80144f8:	4b4a      	ldr	r3, [pc, #296]	; (8014624 <xTaskIncrementTick+0x148>)
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	3301      	adds	r3, #1
 80144fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014500:	4a48      	ldr	r2, [pc, #288]	; (8014624 <xTaskIncrementTick+0x148>)
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d11b      	bne.n	8014544 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801450c:	4b47      	ldr	r3, [pc, #284]	; (801462c <xTaskIncrementTick+0x150>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d005      	beq.n	8014522 <xTaskIncrementTick+0x46>
 8014516:	f640 22a9 	movw	r2, #2729	; 0xaa9
 801451a:	4945      	ldr	r1, [pc, #276]	; (8014630 <xTaskIncrementTick+0x154>)
 801451c:	4845      	ldr	r0, [pc, #276]	; (8014634 <xTaskIncrementTick+0x158>)
 801451e:	f7f1 f895 	bl	800564c <assertFail>
 8014522:	4b42      	ldr	r3, [pc, #264]	; (801462c <xTaskIncrementTick+0x150>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	60fb      	str	r3, [r7, #12]
 8014528:	4b43      	ldr	r3, [pc, #268]	; (8014638 <xTaskIncrementTick+0x15c>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4a3f      	ldr	r2, [pc, #252]	; (801462c <xTaskIncrementTick+0x150>)
 801452e:	6013      	str	r3, [r2, #0]
 8014530:	4a41      	ldr	r2, [pc, #260]	; (8014638 <xTaskIncrementTick+0x15c>)
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	6013      	str	r3, [r2, #0]
 8014536:	4b41      	ldr	r3, [pc, #260]	; (801463c <xTaskIncrementTick+0x160>)
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	3301      	adds	r3, #1
 801453c:	4a3f      	ldr	r2, [pc, #252]	; (801463c <xTaskIncrementTick+0x160>)
 801453e:	6013      	str	r3, [r2, #0]
 8014540:	f000 fc0a 	bl	8014d58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014544:	4b3e      	ldr	r3, [pc, #248]	; (8014640 <xTaskIncrementTick+0x164>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	693a      	ldr	r2, [r7, #16]
 801454a:	429a      	cmp	r2, r3
 801454c:	d348      	bcc.n	80145e0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801454e:	4b37      	ldr	r3, [pc, #220]	; (801462c <xTaskIncrementTick+0x150>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d104      	bne.n	8014562 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014558:	4b39      	ldr	r3, [pc, #228]	; (8014640 <xTaskIncrementTick+0x164>)
 801455a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801455e:	601a      	str	r2, [r3, #0]
					break;
 8014560:	e03e      	b.n	80145e0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014562:	4b32      	ldr	r3, [pc, #200]	; (801462c <xTaskIncrementTick+0x150>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	68db      	ldr	r3, [r3, #12]
 801456a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014572:	693a      	ldr	r2, [r7, #16]
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	429a      	cmp	r2, r3
 8014578:	d203      	bcs.n	8014582 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801457a:	4a31      	ldr	r2, [pc, #196]	; (8014640 <xTaskIncrementTick+0x164>)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014580:	e02e      	b.n	80145e0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	3304      	adds	r3, #4
 8014586:	4618      	mov	r0, r3
 8014588:	f7fe fcca 	bl	8012f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014590:	2b00      	cmp	r3, #0
 8014592:	d004      	beq.n	801459e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	3318      	adds	r3, #24
 8014598:	4618      	mov	r0, r3
 801459a:	f7fe fcc1 	bl	8012f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a2:	2201      	movs	r2, #1
 80145a4:	409a      	lsls	r2, r3
 80145a6:	4b27      	ldr	r3, [pc, #156]	; (8014644 <xTaskIncrementTick+0x168>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	4313      	orrs	r3, r2
 80145ac:	4a25      	ldr	r2, [pc, #148]	; (8014644 <xTaskIncrementTick+0x168>)
 80145ae:	6013      	str	r3, [r2, #0]
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145b4:	4613      	mov	r3, r2
 80145b6:	009b      	lsls	r3, r3, #2
 80145b8:	4413      	add	r3, r2
 80145ba:	009b      	lsls	r3, r3, #2
 80145bc:	4a22      	ldr	r2, [pc, #136]	; (8014648 <xTaskIncrementTick+0x16c>)
 80145be:	441a      	add	r2, r3
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	3304      	adds	r3, #4
 80145c4:	4619      	mov	r1, r3
 80145c6:	4610      	mov	r0, r2
 80145c8:	f7fe fc4d 	bl	8012e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145d0:	4b1e      	ldr	r3, [pc, #120]	; (801464c <xTaskIncrementTick+0x170>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d3b9      	bcc.n	801454e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80145da:	2301      	movs	r3, #1
 80145dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145de:	e7b6      	b.n	801454e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80145e0:	4b1a      	ldr	r3, [pc, #104]	; (801464c <xTaskIncrementTick+0x170>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145e6:	4918      	ldr	r1, [pc, #96]	; (8014648 <xTaskIncrementTick+0x16c>)
 80145e8:	4613      	mov	r3, r2
 80145ea:	009b      	lsls	r3, r3, #2
 80145ec:	4413      	add	r3, r2
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	440b      	add	r3, r1
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2b01      	cmp	r3, #1
 80145f6:	d901      	bls.n	80145fc <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 80145f8:	2301      	movs	r3, #1
 80145fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80145fc:	4b14      	ldr	r3, [pc, #80]	; (8014650 <xTaskIncrementTick+0x174>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d007      	beq.n	8014614 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8014604:	2301      	movs	r3, #1
 8014606:	617b      	str	r3, [r7, #20]
 8014608:	e004      	b.n	8014614 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801460a:	4b12      	ldr	r3, [pc, #72]	; (8014654 <xTaskIncrementTick+0x178>)
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	3301      	adds	r3, #1
 8014610:	4a10      	ldr	r2, [pc, #64]	; (8014654 <xTaskIncrementTick+0x178>)
 8014612:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014614:	697b      	ldr	r3, [r7, #20]
}
 8014616:	4618      	mov	r0, r3
 8014618:	3718      	adds	r7, #24
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	e0000008 	.word	0xe0000008
 8014624:	200081f4 	.word	0x200081f4
 8014628:	20008218 	.word	0x20008218
 801462c:	200081a4 	.word	0x200081a4
 8014630:	0801bbc4 	.word	0x0801bbc4
 8014634:	0801bdcc 	.word	0x0801bdcc
 8014638:	200081a8 	.word	0x200081a8
 801463c:	20008208 	.word	0x20008208
 8014640:	20008210 	.word	0x20008210
 8014644:	200081f8 	.word	0x200081f8
 8014648:	20007fec 	.word	0x20007fec
 801464c:	20007fe8 	.word	0x20007fe8
 8014650:	20008204 	.word	0x20008204
 8014654:	20008200 	.word	0x20008200

08014658 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d103      	bne.n	8014670 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8014668:	4b08      	ldr	r3, [pc, #32]	; (801468c <vTaskSetApplicationTaskTag+0x34>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	60fb      	str	r3, [r7, #12]
 801466e:	e001      	b.n	8014674 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8014674:	f001 fb44 	bl	8015d00 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	683a      	ldr	r2, [r7, #0]
 801467c:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801467e:	f001 fb6d 	bl	8015d5c <vPortExitCritical>
	}
 8014682:	bf00      	nop
 8014684:	3710      	adds	r7, #16
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
 801468a:	bf00      	nop
 801468c:	20007fe8 	.word	0x20007fe8

08014690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014696:	4b44      	ldr	r3, [pc, #272]	; (80147a8 <vTaskSwitchContext+0x118>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d003      	beq.n	80146a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801469e:	4b43      	ldr	r3, [pc, #268]	; (80147ac <vTaskSwitchContext+0x11c>)
 80146a0:	2201      	movs	r2, #1
 80146a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80146a4:	e07b      	b.n	801479e <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 80146a6:	4b41      	ldr	r3, [pc, #260]	; (80147ac <vTaskSwitchContext+0x11c>)
 80146a8:	2200      	movs	r2, #0
 80146aa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80146ac:	f7f4 f9b7 	bl	8008a1e <getRunTimeCounterValue>
 80146b0:	4603      	mov	r3, r0
 80146b2:	4a3f      	ldr	r2, [pc, #252]	; (80147b0 <vTaskSwitchContext+0x120>)
 80146b4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80146b6:	4b3e      	ldr	r3, [pc, #248]	; (80147b0 <vTaskSwitchContext+0x120>)
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	4b3e      	ldr	r3, [pc, #248]	; (80147b4 <vTaskSwitchContext+0x124>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	429a      	cmp	r2, r3
 80146c0:	d909      	bls.n	80146d6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80146c2:	4b3d      	ldr	r3, [pc, #244]	; (80147b8 <vTaskSwitchContext+0x128>)
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80146c8:	4a39      	ldr	r2, [pc, #228]	; (80147b0 <vTaskSwitchContext+0x120>)
 80146ca:	6810      	ldr	r0, [r2, #0]
 80146cc:	4a39      	ldr	r2, [pc, #228]	; (80147b4 <vTaskSwitchContext+0x124>)
 80146ce:	6812      	ldr	r2, [r2, #0]
 80146d0:	1a82      	subs	r2, r0, r2
 80146d2:	440a      	add	r2, r1
 80146d4:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 80146d6:	4b36      	ldr	r3, [pc, #216]	; (80147b0 <vTaskSwitchContext+0x120>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	4a36      	ldr	r2, [pc, #216]	; (80147b4 <vTaskSwitchContext+0x124>)
 80146dc:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80146de:	4b36      	ldr	r3, [pc, #216]	; (80147b8 <vTaskSwitchContext+0x128>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	681a      	ldr	r2, [r3, #0]
 80146e4:	4b34      	ldr	r3, [pc, #208]	; (80147b8 <vTaskSwitchContext+0x128>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d808      	bhi.n	8014700 <vTaskSwitchContext+0x70>
 80146ee:	4b32      	ldr	r3, [pc, #200]	; (80147b8 <vTaskSwitchContext+0x128>)
 80146f0:	681a      	ldr	r2, [r3, #0]
 80146f2:	4b31      	ldr	r3, [pc, #196]	; (80147b8 <vTaskSwitchContext+0x128>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	3334      	adds	r3, #52	; 0x34
 80146f8:	4619      	mov	r1, r3
 80146fa:	4610      	mov	r0, r2
 80146fc:	f7f4 f997 	bl	8008a2e <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8014700:	4b2d      	ldr	r3, [pc, #180]	; (80147b8 <vTaskSwitchContext+0x128>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	4a2d      	ldr	r2, [pc, #180]	; (80147bc <vTaskSwitchContext+0x12c>)
 8014706:	6812      	ldr	r2, [r2, #0]
 8014708:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801470c:	4b2c      	ldr	r3, [pc, #176]	; (80147c0 <vTaskSwitchContext+0x130>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	fab3 f383 	clz	r3, r3
 8014718:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 801471a:	78fb      	ldrb	r3, [r7, #3]
 801471c:	f1c3 031f 	rsb	r3, r3, #31
 8014720:	60fb      	str	r3, [r7, #12]
 8014722:	4928      	ldr	r1, [pc, #160]	; (80147c4 <vTaskSwitchContext+0x134>)
 8014724:	68fa      	ldr	r2, [r7, #12]
 8014726:	4613      	mov	r3, r2
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	4413      	add	r3, r2
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	440b      	add	r3, r1
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d105      	bne.n	8014742 <vTaskSwitchContext+0xb2>
 8014736:	f640 32e1 	movw	r2, #3041	; 0xbe1
 801473a:	4923      	ldr	r1, [pc, #140]	; (80147c8 <vTaskSwitchContext+0x138>)
 801473c:	4823      	ldr	r0, [pc, #140]	; (80147cc <vTaskSwitchContext+0x13c>)
 801473e:	f7f0 ff85 	bl	800564c <assertFail>
 8014742:	68fa      	ldr	r2, [r7, #12]
 8014744:	4613      	mov	r3, r2
 8014746:	009b      	lsls	r3, r3, #2
 8014748:	4413      	add	r3, r2
 801474a:	009b      	lsls	r3, r3, #2
 801474c:	4a1d      	ldr	r2, [pc, #116]	; (80147c4 <vTaskSwitchContext+0x134>)
 801474e:	4413      	add	r3, r2
 8014750:	60bb      	str	r3, [r7, #8]
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	685b      	ldr	r3, [r3, #4]
 8014756:	685a      	ldr	r2, [r3, #4]
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	605a      	str	r2, [r3, #4]
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	685a      	ldr	r2, [r3, #4]
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	3308      	adds	r3, #8
 8014764:	429a      	cmp	r2, r3
 8014766:	d104      	bne.n	8014772 <vTaskSwitchContext+0xe2>
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	685a      	ldr	r2, [r3, #4]
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	605a      	str	r2, [r3, #4]
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	68db      	ldr	r3, [r3, #12]
 8014778:	4a0f      	ldr	r2, [pc, #60]	; (80147b8 <vTaskSwitchContext+0x128>)
 801477a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801477c:	4b0e      	ldr	r3, [pc, #56]	; (80147b8 <vTaskSwitchContext+0x128>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	3334      	adds	r3, #52	; 0x34
 8014782:	4a13      	ldr	r2, [pc, #76]	; (80147d0 <vTaskSwitchContext+0x140>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8014788:	4b0b      	ldr	r3, [pc, #44]	; (80147b8 <vTaskSwitchContext+0x128>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8014790:	4a0a      	ldr	r2, [pc, #40]	; (80147bc <vTaskSwitchContext+0x12c>)
 8014792:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014794:	4b08      	ldr	r3, [pc, #32]	; (80147b8 <vTaskSwitchContext+0x128>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	3360      	adds	r3, #96	; 0x60
 801479a:	4a0e      	ldr	r2, [pc, #56]	; (80147d4 <vTaskSwitchContext+0x144>)
 801479c:	6013      	str	r3, [r2, #0]
}
 801479e:	bf00      	nop
 80147a0:	3710      	adds	r7, #16
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
 80147a6:	bf00      	nop
 80147a8:	20008218 	.word	0x20008218
 80147ac:	20008204 	.word	0x20008204
 80147b0:	20008220 	.word	0x20008220
 80147b4:	2000821c 	.word	0x2000821c
 80147b8:	20007fe8 	.word	0x20007fe8
 80147bc:	200081ec 	.word	0x200081ec
 80147c0:	200081f8 	.word	0x200081f8
 80147c4:	20007fec 	.word	0x20007fec
 80147c8:	0801bbc4 	.word	0x0801bbc4
 80147cc:	0801bdf8 	.word	0x0801bdf8
 80147d0:	e0000004 	.word	0xe0000004
 80147d4:	200004ac 	.word	0x200004ac

080147d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d105      	bne.n	80147f4 <vTaskPlaceOnEventList+0x1c>
 80147e8:	f640 32fa 	movw	r2, #3066	; 0xbfa
 80147ec:	4909      	ldr	r1, [pc, #36]	; (8014814 <vTaskPlaceOnEventList+0x3c>)
 80147ee:	480a      	ldr	r0, [pc, #40]	; (8014818 <vTaskPlaceOnEventList+0x40>)
 80147f0:	f7f0 ff2c 	bl	800564c <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80147f4:	4b09      	ldr	r3, [pc, #36]	; (801481c <vTaskPlaceOnEventList+0x44>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	3318      	adds	r3, #24
 80147fa:	4619      	mov	r1, r3
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f7fe fb56 	bl	8012eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014802:	2101      	movs	r1, #1
 8014804:	6838      	ldr	r0, [r7, #0]
 8014806:	f000 fced 	bl	80151e4 <prvAddCurrentTaskToDelayedList>
}
 801480a:	bf00      	nop
 801480c:	3708      	adds	r7, #8
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop
 8014814:	0801bbc4 	.word	0x0801bbc4
 8014818:	0801be40 	.word	0x0801be40
 801481c:	20007fe8 	.word	0x20007fe8

08014820 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014820:	b580      	push	{r7, lr}
 8014822:	b084      	sub	sp, #16
 8014824:	af00      	add	r7, sp, #0
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d105      	bne.n	801483e <vTaskPlaceOnEventListRestricted+0x1e>
 8014832:	f640 4225 	movw	r2, #3109	; 0xc25
 8014836:	490c      	ldr	r1, [pc, #48]	; (8014868 <vTaskPlaceOnEventListRestricted+0x48>)
 8014838:	480c      	ldr	r0, [pc, #48]	; (801486c <vTaskPlaceOnEventListRestricted+0x4c>)
 801483a:	f7f0 ff07 	bl	800564c <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801483e:	4b0c      	ldr	r3, [pc, #48]	; (8014870 <vTaskPlaceOnEventListRestricted+0x50>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	3318      	adds	r3, #24
 8014844:	4619      	mov	r1, r3
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	f7fe fb0d 	bl	8012e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d002      	beq.n	8014858 <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 8014852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014856:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014858:	6879      	ldr	r1, [r7, #4]
 801485a:	68b8      	ldr	r0, [r7, #8]
 801485c:	f000 fcc2 	bl	80151e4 <prvAddCurrentTaskToDelayedList>
	}
 8014860:	bf00      	nop
 8014862:	3710      	adds	r7, #16
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	0801bbc4 	.word	0x0801bbc4
 801486c:	0801be40 	.word	0x0801be40
 8014870:	20007fe8 	.word	0x20007fe8

08014874 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b084      	sub	sp, #16
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	68db      	ldr	r3, [r3, #12]
 8014880:	68db      	ldr	r3, [r3, #12]
 8014882:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d105      	bne.n	8014896 <xTaskRemoveFromEventList+0x22>
 801488a:	f640 4255 	movw	r2, #3157	; 0xc55
 801488e:	4922      	ldr	r1, [pc, #136]	; (8014918 <xTaskRemoveFromEventList+0xa4>)
 8014890:	4822      	ldr	r0, [pc, #136]	; (801491c <xTaskRemoveFromEventList+0xa8>)
 8014892:	f7f0 fedb 	bl	800564c <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	3318      	adds	r3, #24
 801489a:	4618      	mov	r0, r3
 801489c:	f7fe fb40 	bl	8012f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148a0:	4b1f      	ldr	r3, [pc, #124]	; (8014920 <xTaskRemoveFromEventList+0xac>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d11c      	bne.n	80148e2 <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	3304      	adds	r3, #4
 80148ac:	4618      	mov	r0, r3
 80148ae:	f7fe fb37 	bl	8012f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148b6:	2201      	movs	r2, #1
 80148b8:	409a      	lsls	r2, r3
 80148ba:	4b1a      	ldr	r3, [pc, #104]	; (8014924 <xTaskRemoveFromEventList+0xb0>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	4313      	orrs	r3, r2
 80148c0:	4a18      	ldr	r2, [pc, #96]	; (8014924 <xTaskRemoveFromEventList+0xb0>)
 80148c2:	6013      	str	r3, [r2, #0]
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148c8:	4613      	mov	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	4413      	add	r3, r2
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	4a15      	ldr	r2, [pc, #84]	; (8014928 <xTaskRemoveFromEventList+0xb4>)
 80148d2:	441a      	add	r2, r3
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	3304      	adds	r3, #4
 80148d8:	4619      	mov	r1, r3
 80148da:	4610      	mov	r0, r2
 80148dc:	f7fe fac3 	bl	8012e66 <vListInsertEnd>
 80148e0:	e005      	b.n	80148ee <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	3318      	adds	r3, #24
 80148e6:	4619      	mov	r1, r3
 80148e8:	4810      	ldr	r0, [pc, #64]	; (801492c <xTaskRemoveFromEventList+0xb8>)
 80148ea:	f7fe fabc 	bl	8012e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148f2:	4b0f      	ldr	r3, [pc, #60]	; (8014930 <xTaskRemoveFromEventList+0xbc>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148f8:	429a      	cmp	r2, r3
 80148fa:	d905      	bls.n	8014908 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80148fc:	2301      	movs	r3, #1
 80148fe:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014900:	4b0c      	ldr	r3, [pc, #48]	; (8014934 <xTaskRemoveFromEventList+0xc0>)
 8014902:	2201      	movs	r2, #1
 8014904:	601a      	str	r2, [r3, #0]
 8014906:	e001      	b.n	801490c <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8014908:	2300      	movs	r3, #0
 801490a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801490c:	68fb      	ldr	r3, [r7, #12]
}
 801490e:	4618      	mov	r0, r3
 8014910:	3710      	adds	r7, #16
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	0801bbc4 	.word	0x0801bbc4
 801491c:	0801be68 	.word	0x0801be68
 8014920:	20008218 	.word	0x20008218
 8014924:	200081f8 	.word	0x200081f8
 8014928:	20007fec 	.word	0x20007fec
 801492c:	200081ac 	.word	0x200081ac
 8014930:	20007fe8 	.word	0x20007fe8
 8014934:	20008204 	.word	0x20008204

08014938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014938:	b480      	push	{r7}
 801493a:	b083      	sub	sp, #12
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014940:	4b06      	ldr	r3, [pc, #24]	; (801495c <vTaskInternalSetTimeOutState+0x24>)
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014948:	4b05      	ldr	r3, [pc, #20]	; (8014960 <vTaskInternalSetTimeOutState+0x28>)
 801494a:	681a      	ldr	r2, [r3, #0]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	605a      	str	r2, [r3, #4]
}
 8014950:	bf00      	nop
 8014952:	370c      	adds	r7, #12
 8014954:	46bd      	mov	sp, r7
 8014956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495a:	4770      	bx	lr
 801495c:	20008208 	.word	0x20008208
 8014960:	200081f4 	.word	0x200081f4

08014964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b086      	sub	sp, #24
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d105      	bne.n	8014980 <xTaskCheckForTimeOut+0x1c>
 8014974:	f640 42ce 	movw	r2, #3278	; 0xcce
 8014978:	4924      	ldr	r1, [pc, #144]	; (8014a0c <xTaskCheckForTimeOut+0xa8>)
 801497a:	4825      	ldr	r0, [pc, #148]	; (8014a10 <xTaskCheckForTimeOut+0xac>)
 801497c:	f7f0 fe66 	bl	800564c <assertFail>
	configASSERT( pxTicksToWait );
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d105      	bne.n	8014992 <xTaskCheckForTimeOut+0x2e>
 8014986:	f640 42cf 	movw	r2, #3279	; 0xccf
 801498a:	4920      	ldr	r1, [pc, #128]	; (8014a0c <xTaskCheckForTimeOut+0xa8>)
 801498c:	4821      	ldr	r0, [pc, #132]	; (8014a14 <xTaskCheckForTimeOut+0xb0>)
 801498e:	f7f0 fe5d 	bl	800564c <assertFail>

	taskENTER_CRITICAL();
 8014992:	f001 f9b5 	bl	8015d00 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014996:	4b20      	ldr	r3, [pc, #128]	; (8014a18 <xTaskCheckForTimeOut+0xb4>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	693a      	ldr	r2, [r7, #16]
 80149a2:	1ad3      	subs	r3, r2, r3
 80149a4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149ae:	d102      	bne.n	80149b6 <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80149b0:	2300      	movs	r3, #0
 80149b2:	617b      	str	r3, [r7, #20]
 80149b4:	e023      	b.n	80149fe <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681a      	ldr	r2, [r3, #0]
 80149ba:	4b18      	ldr	r3, [pc, #96]	; (8014a1c <xTaskCheckForTimeOut+0xb8>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d007      	beq.n	80149d2 <xTaskCheckForTimeOut+0x6e>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	693a      	ldr	r2, [r7, #16]
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d302      	bcc.n	80149d2 <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80149cc:	2301      	movs	r3, #1
 80149ce:	617b      	str	r3, [r7, #20]
 80149d0:	e015      	b.n	80149fe <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	68fa      	ldr	r2, [r7, #12]
 80149d8:	429a      	cmp	r2, r3
 80149da:	d20b      	bcs.n	80149f4 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	1ad2      	subs	r2, r2, r3
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80149e8:	6878      	ldr	r0, [r7, #4]
 80149ea:	f7ff ffa5 	bl	8014938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80149ee:	2300      	movs	r3, #0
 80149f0:	617b      	str	r3, [r7, #20]
 80149f2:	e004      	b.n	80149fe <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	2200      	movs	r2, #0
 80149f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80149fa:	2301      	movs	r3, #1
 80149fc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80149fe:	f001 f9ad 	bl	8015d5c <vPortExitCritical>

	return xReturn;
 8014a02:	697b      	ldr	r3, [r7, #20]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3718      	adds	r7, #24
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	0801bbc4 	.word	0x0801bbc4
 8014a10:	0801be98 	.word	0x0801be98
 8014a14:	0801bea4 	.word	0x0801bea4
 8014a18:	200081f4 	.word	0x200081f4
 8014a1c:	20008208 	.word	0x20008208

08014a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014a20:	b480      	push	{r7}
 8014a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014a24:	4b03      	ldr	r3, [pc, #12]	; (8014a34 <vTaskMissedYield+0x14>)
 8014a26:	2201      	movs	r2, #1
 8014a28:	601a      	str	r2, [r3, #0]
}
 8014a2a:	bf00      	nop
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr
 8014a34:	20008204 	.word	0x20008204

08014a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b082      	sub	sp, #8
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014a40:	f000 f854 	bl	8014aec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014a44:	4b07      	ldr	r3, [pc, #28]	; (8014a64 <prvIdleTask+0x2c>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	2b01      	cmp	r3, #1
 8014a4a:	d907      	bls.n	8014a5c <prvIdleTask+0x24>
			{
				taskYIELD();
 8014a4c:	4b06      	ldr	r3, [pc, #24]	; (8014a68 <prvIdleTask+0x30>)
 8014a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a52:	601a      	str	r2, [r3, #0]
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014a5c:	f7f5 f866 	bl	8009b2c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014a60:	e7ee      	b.n	8014a40 <prvIdleTask+0x8>
 8014a62:	bf00      	nop
 8014a64:	20007fec 	.word	0x20007fec
 8014a68:	e000ed04 	.word	0xe000ed04

08014a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014a72:	2300      	movs	r3, #0
 8014a74:	607b      	str	r3, [r7, #4]
 8014a76:	e00c      	b.n	8014a92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	009b      	lsls	r3, r3, #2
 8014a7e:	4413      	add	r3, r2
 8014a80:	009b      	lsls	r3, r3, #2
 8014a82:	4a12      	ldr	r2, [pc, #72]	; (8014acc <prvInitialiseTaskLists+0x60>)
 8014a84:	4413      	add	r3, r2
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7fe f9c0 	bl	8012e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	607b      	str	r3, [r7, #4]
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2b13      	cmp	r3, #19
 8014a96:	d9ef      	bls.n	8014a78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014a98:	480d      	ldr	r0, [pc, #52]	; (8014ad0 <prvInitialiseTaskLists+0x64>)
 8014a9a:	f7fe f9b7 	bl	8012e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014a9e:	480d      	ldr	r0, [pc, #52]	; (8014ad4 <prvInitialiseTaskLists+0x68>)
 8014aa0:	f7fe f9b4 	bl	8012e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014aa4:	480c      	ldr	r0, [pc, #48]	; (8014ad8 <prvInitialiseTaskLists+0x6c>)
 8014aa6:	f7fe f9b1 	bl	8012e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014aaa:	480c      	ldr	r0, [pc, #48]	; (8014adc <prvInitialiseTaskLists+0x70>)
 8014aac:	f7fe f9ae 	bl	8012e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ab0:	480b      	ldr	r0, [pc, #44]	; (8014ae0 <prvInitialiseTaskLists+0x74>)
 8014ab2:	f7fe f9ab 	bl	8012e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014ab6:	4b0b      	ldr	r3, [pc, #44]	; (8014ae4 <prvInitialiseTaskLists+0x78>)
 8014ab8:	4a05      	ldr	r2, [pc, #20]	; (8014ad0 <prvInitialiseTaskLists+0x64>)
 8014aba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014abc:	4b0a      	ldr	r3, [pc, #40]	; (8014ae8 <prvInitialiseTaskLists+0x7c>)
 8014abe:	4a05      	ldr	r2, [pc, #20]	; (8014ad4 <prvInitialiseTaskLists+0x68>)
 8014ac0:	601a      	str	r2, [r3, #0]
}
 8014ac2:	bf00      	nop
 8014ac4:	3708      	adds	r7, #8
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd80      	pop	{r7, pc}
 8014aca:	bf00      	nop
 8014acc:	20007fec 	.word	0x20007fec
 8014ad0:	2000817c 	.word	0x2000817c
 8014ad4:	20008190 	.word	0x20008190
 8014ad8:	200081ac 	.word	0x200081ac
 8014adc:	200081c0 	.word	0x200081c0
 8014ae0:	200081d8 	.word	0x200081d8
 8014ae4:	200081a4 	.word	0x200081a4
 8014ae8:	200081a8 	.word	0x200081a8

08014aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b082      	sub	sp, #8
 8014af0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014af2:	e019      	b.n	8014b28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014af4:	f001 f904 	bl	8015d00 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014af8:	4b10      	ldr	r3, [pc, #64]	; (8014b3c <prvCheckTasksWaitingTermination+0x50>)
 8014afa:	68db      	ldr	r3, [r3, #12]
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	3304      	adds	r3, #4
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fe fa0b 	bl	8012f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014b0a:	4b0d      	ldr	r3, [pc, #52]	; (8014b40 <prvCheckTasksWaitingTermination+0x54>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	3b01      	subs	r3, #1
 8014b10:	4a0b      	ldr	r2, [pc, #44]	; (8014b40 <prvCheckTasksWaitingTermination+0x54>)
 8014b12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014b14:	4b0b      	ldr	r3, [pc, #44]	; (8014b44 <prvCheckTasksWaitingTermination+0x58>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	3b01      	subs	r3, #1
 8014b1a:	4a0a      	ldr	r2, [pc, #40]	; (8014b44 <prvCheckTasksWaitingTermination+0x58>)
 8014b1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014b1e:	f001 f91d 	bl	8015d5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f000 f8e4 	bl	8014cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014b28:	4b06      	ldr	r3, [pc, #24]	; (8014b44 <prvCheckTasksWaitingTermination+0x58>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d1e1      	bne.n	8014af4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014b30:	bf00      	nop
 8014b32:	bf00      	nop
 8014b34:	3708      	adds	r7, #8
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	200081c0 	.word	0x200081c0
 8014b40:	200081f0 	.word	0x200081f0
 8014b44:	200081d4 	.word	0x200081d4

08014b48 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b086      	sub	sp, #24
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	60b9      	str	r1, [r7, #8]
 8014b52:	607a      	str	r2, [r7, #4]
 8014b54:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d102      	bne.n	8014b62 <vTaskGetInfo+0x1a>
 8014b5c:	4b2c      	ldr	r3, [pc, #176]	; (8014c10 <vTaskGetInfo+0xc8>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	e000      	b.n	8014b64 <vTaskGetInfo+0x1c>
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8014b66:	68bb      	ldr	r3, [r7, #8]
 8014b68:	697a      	ldr	r2, [r7, #20]
 8014b6a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8014b9e:	78fb      	ldrb	r3, [r7, #3]
 8014ba0:	2b05      	cmp	r3, #5
 8014ba2:	d01a      	beq.n	8014bda <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8014ba4:	4b1a      	ldr	r3, [pc, #104]	; (8014c10 <vTaskGetInfo+0xc8>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	697a      	ldr	r2, [r7, #20]
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d103      	bne.n	8014bb6 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	731a      	strb	r2, [r3, #12]
 8014bb4:	e018      	b.n	8014be8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	78fa      	ldrb	r2, [r7, #3]
 8014bba:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8014bbc:	78fb      	ldrb	r3, [r7, #3]
 8014bbe:	2b03      	cmp	r3, #3
 8014bc0:	d112      	bne.n	8014be8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8014bc2:	f7ff fb41 	bl	8014248 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d002      	beq.n	8014bd4 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	2202      	movs	r2, #2
 8014bd2:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8014bd4:	f7ff fb46 	bl	8014264 <xTaskResumeAll>
 8014bd8:	e006      	b.n	8014be8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8014bda:	6978      	ldr	r0, [r7, #20]
 8014bdc:	f7ff fa54 	bl	8014088 <eTaskGetState>
 8014be0:	4603      	mov	r3, r0
 8014be2:	461a      	mov	r2, r3
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d009      	beq.n	8014c02 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f000 f860 	bl	8014cb8 <prvTaskCheckFreeStackSpace>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	461a      	mov	r2, r3
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8014c00:	e002      	b.n	8014c08 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8014c02:	68bb      	ldr	r3, [r7, #8]
 8014c04:	2200      	movs	r2, #0
 8014c06:	841a      	strh	r2, [r3, #32]
	}
 8014c08:	bf00      	nop
 8014c0a:	3718      	adds	r7, #24
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	20007fe8 	.word	0x20007fe8

08014c14 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b08a      	sub	sp, #40	; 0x28
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	60b9      	str	r1, [r7, #8]
 8014c1e:	4613      	mov	r3, r2
 8014c20:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8014c22:	2300      	movs	r3, #0
 8014c24:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d03f      	beq.n	8014cae <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	623b      	str	r3, [r7, #32]
 8014c32:	6a3b      	ldr	r3, [r7, #32]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	685a      	ldr	r2, [r3, #4]
 8014c38:	6a3b      	ldr	r3, [r7, #32]
 8014c3a:	605a      	str	r2, [r3, #4]
 8014c3c:	6a3b      	ldr	r3, [r7, #32]
 8014c3e:	685a      	ldr	r2, [r3, #4]
 8014c40:	6a3b      	ldr	r3, [r7, #32]
 8014c42:	3308      	adds	r3, #8
 8014c44:	429a      	cmp	r2, r3
 8014c46:	d104      	bne.n	8014c52 <prvListTasksWithinSingleList+0x3e>
 8014c48:	6a3b      	ldr	r3, [r7, #32]
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	685a      	ldr	r2, [r3, #4]
 8014c4e:	6a3b      	ldr	r3, [r7, #32]
 8014c50:	605a      	str	r2, [r3, #4]
 8014c52:	6a3b      	ldr	r3, [r7, #32]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	61bb      	str	r3, [r7, #24]
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	685a      	ldr	r2, [r3, #4]
 8014c64:	69bb      	ldr	r3, [r7, #24]
 8014c66:	605a      	str	r2, [r3, #4]
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	685a      	ldr	r2, [r3, #4]
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	3308      	adds	r3, #8
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d104      	bne.n	8014c7e <prvListTasksWithinSingleList+0x6a>
 8014c74:	69bb      	ldr	r3, [r7, #24]
 8014c76:	685b      	ldr	r3, [r3, #4]
 8014c78:	685a      	ldr	r2, [r3, #4]
 8014c7a:	69bb      	ldr	r3, [r7, #24]
 8014c7c:	605a      	str	r2, [r3, #4]
 8014c7e:	69bb      	ldr	r3, [r7, #24]
 8014c80:	685b      	ldr	r3, [r3, #4]
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8014c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c88:	4613      	mov	r3, r2
 8014c8a:	00db      	lsls	r3, r3, #3
 8014c8c:	4413      	add	r3, r2
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	461a      	mov	r2, r3
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	1899      	adds	r1, r3, r2
 8014c96:	79fb      	ldrb	r3, [r7, #7]
 8014c98:	2201      	movs	r2, #1
 8014c9a:	6978      	ldr	r0, [r7, #20]
 8014c9c:	f7ff ff54 	bl	8014b48 <vTaskGetInfo>
				uxTask++;
 8014ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca2:	3301      	adds	r3, #1
 8014ca4:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8014ca6:	697a      	ldr	r2, [r7, #20]
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d1d5      	bne.n	8014c5a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8014cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3728      	adds	r7, #40	; 0x28
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bd80      	pop	{r7, pc}

08014cb8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8014cb8:	b480      	push	{r7}
 8014cba:	b085      	sub	sp, #20
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014cc4:	e005      	b.n	8014cd2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	3301      	adds	r3, #1
 8014cca:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	2ba5      	cmp	r3, #165	; 0xa5
 8014cd8:	d0f5      	beq.n	8014cc6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	089b      	lsrs	r3, r3, #2
 8014cde:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	b29b      	uxth	r3, r3
	}
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	3714      	adds	r7, #20
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	3360      	adds	r3, #96	; 0x60
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f002 ff07 	bl	8017b10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d108      	bne.n	8014d1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d10:	4618      	mov	r0, r3
 8014d12:	f001 f9c7 	bl	80160a4 <vPortFree>
				vPortFree( pxTCB );
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f001 f9c4 	bl	80160a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014d1c:	e013      	b.n	8014d46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014d24:	2b01      	cmp	r3, #1
 8014d26:	d103      	bne.n	8014d30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f001 f9bb 	bl	80160a4 <vPortFree>
	}
 8014d2e:	e00a      	b.n	8014d46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014d36:	2b02      	cmp	r3, #2
 8014d38:	d005      	beq.n	8014d46 <prvDeleteTCB+0x56>
 8014d3a:	f640 725d 	movw	r2, #3933	; 0xf5d
 8014d3e:	4904      	ldr	r1, [pc, #16]	; (8014d50 <prvDeleteTCB+0x60>)
 8014d40:	4804      	ldr	r0, [pc, #16]	; (8014d54 <prvDeleteTCB+0x64>)
 8014d42:	f7f0 fc83 	bl	800564c <assertFail>
	}
 8014d46:	bf00      	nop
 8014d48:	3708      	adds	r7, #8
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	0801bbc4 	.word	0x0801bbc4
 8014d54:	0801beb4 	.word	0x0801beb4

08014d58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014d5e:	4b0c      	ldr	r3, [pc, #48]	; (8014d90 <prvResetNextTaskUnblockTime+0x38>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d104      	bne.n	8014d72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014d68:	4b0a      	ldr	r3, [pc, #40]	; (8014d94 <prvResetNextTaskUnblockTime+0x3c>)
 8014d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014d70:	e008      	b.n	8014d84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d72:	4b07      	ldr	r3, [pc, #28]	; (8014d90 <prvResetNextTaskUnblockTime+0x38>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	68db      	ldr	r3, [r3, #12]
 8014d78:	68db      	ldr	r3, [r3, #12]
 8014d7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	685b      	ldr	r3, [r3, #4]
 8014d80:	4a04      	ldr	r2, [pc, #16]	; (8014d94 <prvResetNextTaskUnblockTime+0x3c>)
 8014d82:	6013      	str	r3, [r2, #0]
}
 8014d84:	bf00      	nop
 8014d86:	370c      	adds	r7, #12
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr
 8014d90:	200081a4 	.word	0x200081a4
 8014d94:	20008210 	.word	0x20008210

08014d98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014d98:	b480      	push	{r7}
 8014d9a:	b083      	sub	sp, #12
 8014d9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014d9e:	4b0b      	ldr	r3, [pc, #44]	; (8014dcc <xTaskGetSchedulerState+0x34>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d102      	bne.n	8014dac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014da6:	2301      	movs	r3, #1
 8014da8:	607b      	str	r3, [r7, #4]
 8014daa:	e008      	b.n	8014dbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014dac:	4b08      	ldr	r3, [pc, #32]	; (8014dd0 <xTaskGetSchedulerState+0x38>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d102      	bne.n	8014dba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014db4:	2302      	movs	r3, #2
 8014db6:	607b      	str	r3, [r7, #4]
 8014db8:	e001      	b.n	8014dbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014dbe:	687b      	ldr	r3, [r7, #4]
	}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	370c      	adds	r7, #12
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr
 8014dcc:	200081fc 	.word	0x200081fc
 8014dd0:	20008218 	.word	0x20008218

08014dd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014de0:	2300      	movs	r3, #0
 8014de2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d05e      	beq.n	8014ea8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dee:	4b31      	ldr	r3, [pc, #196]	; (8014eb4 <xTaskPriorityInherit+0xe0>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d24e      	bcs.n	8014e96 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	699b      	ldr	r3, [r3, #24]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	db06      	blt.n	8014e0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e00:	4b2c      	ldr	r3, [pc, #176]	; (8014eb4 <xTaskPriorityInherit+0xe0>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e06:	f1c3 0214 	rsb	r2, r3, #20
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	6959      	ldr	r1, [r3, #20]
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e16:	4613      	mov	r3, r2
 8014e18:	009b      	lsls	r3, r3, #2
 8014e1a:	4413      	add	r3, r2
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	4a26      	ldr	r2, [pc, #152]	; (8014eb8 <xTaskPriorityInherit+0xe4>)
 8014e20:	4413      	add	r3, r2
 8014e22:	4299      	cmp	r1, r3
 8014e24:	d12f      	bne.n	8014e86 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	3304      	adds	r3, #4
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7fe f878 	bl	8012f20 <uxListRemove>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d10a      	bne.n	8014e4c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e3a:	2201      	movs	r2, #1
 8014e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8014e40:	43da      	mvns	r2, r3
 8014e42:	4b1e      	ldr	r3, [pc, #120]	; (8014ebc <xTaskPriorityInherit+0xe8>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	4013      	ands	r3, r2
 8014e48:	4a1c      	ldr	r2, [pc, #112]	; (8014ebc <xTaskPriorityInherit+0xe8>)
 8014e4a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e4c:	4b19      	ldr	r3, [pc, #100]	; (8014eb4 <xTaskPriorityInherit+0xe0>)
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	409a      	lsls	r2, r3
 8014e5e:	4b17      	ldr	r3, [pc, #92]	; (8014ebc <xTaskPriorityInherit+0xe8>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	4313      	orrs	r3, r2
 8014e64:	4a15      	ldr	r2, [pc, #84]	; (8014ebc <xTaskPriorityInherit+0xe8>)
 8014e66:	6013      	str	r3, [r2, #0]
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	009b      	lsls	r3, r3, #2
 8014e70:	4413      	add	r3, r2
 8014e72:	009b      	lsls	r3, r3, #2
 8014e74:	4a10      	ldr	r2, [pc, #64]	; (8014eb8 <xTaskPriorityInherit+0xe4>)
 8014e76:	441a      	add	r2, r3
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	4610      	mov	r0, r2
 8014e80:	f7fd fff1 	bl	8012e66 <vListInsertEnd>
 8014e84:	e004      	b.n	8014e90 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e86:	4b0b      	ldr	r3, [pc, #44]	; (8014eb4 <xTaskPriorityInherit+0xe0>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014e90:	2301      	movs	r3, #1
 8014e92:	60fb      	str	r3, [r7, #12]
 8014e94:	e008      	b.n	8014ea8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e9a:	4b06      	ldr	r3, [pc, #24]	; (8014eb4 <xTaskPriorityInherit+0xe0>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d201      	bcs.n	8014ea8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
	}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	3710      	adds	r7, #16
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	20007fe8 	.word	0x20007fe8
 8014eb8:	20007fec 	.word	0x20007fec
 8014ebc:	200081f8 	.word	0x200081f8

08014ec0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d064      	beq.n	8014fa0 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014ed6:	4b35      	ldr	r3, [pc, #212]	; (8014fac <xTaskPriorityDisinherit+0xec>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	68ba      	ldr	r2, [r7, #8]
 8014edc:	429a      	cmp	r2, r3
 8014ede:	d005      	beq.n	8014eec <xTaskPriorityDisinherit+0x2c>
 8014ee0:	f241 0213 	movw	r2, #4115	; 0x1013
 8014ee4:	4932      	ldr	r1, [pc, #200]	; (8014fb0 <xTaskPriorityDisinherit+0xf0>)
 8014ee6:	4833      	ldr	r0, [pc, #204]	; (8014fb4 <xTaskPriorityDisinherit+0xf4>)
 8014ee8:	f7f0 fbb0 	bl	800564c <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 8014eec:	68bb      	ldr	r3, [r7, #8]
 8014eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d105      	bne.n	8014f00 <xTaskPriorityDisinherit+0x40>
 8014ef4:	f241 0214 	movw	r2, #4116	; 0x1014
 8014ef8:	492d      	ldr	r1, [pc, #180]	; (8014fb0 <xTaskPriorityDisinherit+0xf0>)
 8014efa:	482f      	ldr	r0, [pc, #188]	; (8014fb8 <xTaskPriorityDisinherit+0xf8>)
 8014efc:	f7f0 fba6 	bl	800564c <assertFail>
			( pxTCB->uxMutexesHeld )--;
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f04:	1e5a      	subs	r2, r3, #1
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d044      	beq.n	8014fa0 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d140      	bne.n	8014fa0 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	3304      	adds	r3, #4
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fd fffc 	bl	8012f20 <uxListRemove>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d115      	bne.n	8014f5a <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f32:	4922      	ldr	r1, [pc, #136]	; (8014fbc <xTaskPriorityDisinherit+0xfc>)
 8014f34:	4613      	mov	r3, r2
 8014f36:	009b      	lsls	r3, r3, #2
 8014f38:	4413      	add	r3, r2
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	440b      	add	r3, r1
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d10a      	bne.n	8014f5a <xTaskPriorityDisinherit+0x9a>
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f48:	2201      	movs	r2, #1
 8014f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8014f4e:	43da      	mvns	r2, r3
 8014f50:	4b1b      	ldr	r3, [pc, #108]	; (8014fc0 <xTaskPriorityDisinherit+0x100>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	4013      	ands	r3, r2
 8014f56:	4a1a      	ldr	r2, [pc, #104]	; (8014fc0 <xTaskPriorityDisinherit+0x100>)
 8014f58:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f66:	f1c3 0214 	rsb	r2, r3, #20
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f72:	2201      	movs	r2, #1
 8014f74:	409a      	lsls	r2, r3
 8014f76:	4b12      	ldr	r3, [pc, #72]	; (8014fc0 <xTaskPriorityDisinherit+0x100>)
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	4313      	orrs	r3, r2
 8014f7c:	4a10      	ldr	r2, [pc, #64]	; (8014fc0 <xTaskPriorityDisinherit+0x100>)
 8014f7e:	6013      	str	r3, [r2, #0]
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f84:	4613      	mov	r3, r2
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	4413      	add	r3, r2
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	4a0b      	ldr	r2, [pc, #44]	; (8014fbc <xTaskPriorityDisinherit+0xfc>)
 8014f8e:	441a      	add	r2, r3
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	3304      	adds	r3, #4
 8014f94:	4619      	mov	r1, r3
 8014f96:	4610      	mov	r0, r2
 8014f98:	f7fd ff65 	bl	8012e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014f9c:	2301      	movs	r3, #1
 8014f9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
	}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	20007fe8 	.word	0x20007fe8
 8014fb0:	0801bbc4 	.word	0x0801bbc4
 8014fb4:	0801befc 	.word	0x0801befc
 8014fb8:	0801bf14 	.word	0x0801bf14
 8014fbc:	20007fec 	.word	0x20007fec
 8014fc0:	200081f8 	.word	0x200081f8

08014fc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b086      	sub	sp, #24
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d06d      	beq.n	80150b8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d105      	bne.n	8014ff0 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8014fe4:	f241 0262 	movw	r2, #4194	; 0x1062
 8014fe8:	4935      	ldr	r1, [pc, #212]	; (80150c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014fea:	4836      	ldr	r0, [pc, #216]	; (80150c4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014fec:	f7f0 fb2e 	bl	800564c <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ff4:	683a      	ldr	r2, [r7, #0]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d902      	bls.n	8015000 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	617b      	str	r3, [r7, #20]
 8014ffe:	e002      	b.n	8015006 <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015004:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801500a:	697a      	ldr	r2, [r7, #20]
 801500c:	429a      	cmp	r2, r3
 801500e:	d053      	beq.n	80150b8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015014:	68fa      	ldr	r2, [r7, #12]
 8015016:	429a      	cmp	r2, r3
 8015018:	d14e      	bne.n	80150b8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801501a:	4b2b      	ldr	r3, [pc, #172]	; (80150c8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	693a      	ldr	r2, [r7, #16]
 8015020:	429a      	cmp	r2, r3
 8015022:	d105      	bne.n	8015030 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8015024:	f241 027d 	movw	r2, #4221	; 0x107d
 8015028:	4925      	ldr	r1, [pc, #148]	; (80150c0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801502a:	4828      	ldr	r0, [pc, #160]	; (80150cc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801502c:	f7f0 fb0e 	bl	800564c <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015030:	693b      	ldr	r3, [r7, #16]
 8015032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015034:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	697a      	ldr	r2, [r7, #20]
 801503a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	699b      	ldr	r3, [r3, #24]
 8015040:	2b00      	cmp	r3, #0
 8015042:	db04      	blt.n	801504e <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	f1c3 0214 	rsb	r2, r3, #20
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801504e:	693b      	ldr	r3, [r7, #16]
 8015050:	6959      	ldr	r1, [r3, #20]
 8015052:	68ba      	ldr	r2, [r7, #8]
 8015054:	4613      	mov	r3, r2
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	4413      	add	r3, r2
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	4a1c      	ldr	r2, [pc, #112]	; (80150d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801505e:	4413      	add	r3, r2
 8015060:	4299      	cmp	r1, r3
 8015062:	d129      	bne.n	80150b8 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	3304      	adds	r3, #4
 8015068:	4618      	mov	r0, r3
 801506a:	f7fd ff59 	bl	8012f20 <uxListRemove>
 801506e:	4603      	mov	r3, r0
 8015070:	2b00      	cmp	r3, #0
 8015072:	d10a      	bne.n	801508a <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8015074:	693b      	ldr	r3, [r7, #16]
 8015076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015078:	2201      	movs	r2, #1
 801507a:	fa02 f303 	lsl.w	r3, r2, r3
 801507e:	43da      	mvns	r2, r3
 8015080:	4b14      	ldr	r3, [pc, #80]	; (80150d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	4013      	ands	r3, r2
 8015086:	4a13      	ldr	r2, [pc, #76]	; (80150d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8015088:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801508e:	2201      	movs	r2, #1
 8015090:	409a      	lsls	r2, r3
 8015092:	4b10      	ldr	r3, [pc, #64]	; (80150d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	4313      	orrs	r3, r2
 8015098:	4a0e      	ldr	r2, [pc, #56]	; (80150d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801509a:	6013      	str	r3, [r2, #0]
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150a0:	4613      	mov	r3, r2
 80150a2:	009b      	lsls	r3, r3, #2
 80150a4:	4413      	add	r3, r2
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	4a09      	ldr	r2, [pc, #36]	; (80150d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80150aa:	441a      	add	r2, r3
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	3304      	adds	r3, #4
 80150b0:	4619      	mov	r1, r3
 80150b2:	4610      	mov	r0, r2
 80150b4:	f7fd fed7 	bl	8012e66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80150b8:	bf00      	nop
 80150ba:	3718      	adds	r7, #24
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	0801bbc4 	.word	0x0801bbc4
 80150c4:	0801bf14 	.word	0x0801bf14
 80150c8:	20007fe8 	.word	0x20007fe8
 80150cc:	0801bf2c 	.word	0x0801bf2c
 80150d0:	20007fec 	.word	0x20007fec
 80150d4:	200081f8 	.word	0x200081f8

080150d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80150d8:	b480      	push	{r7}
 80150da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80150dc:	4b07      	ldr	r3, [pc, #28]	; (80150fc <pvTaskIncrementMutexHeldCount+0x24>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d004      	beq.n	80150ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80150e4:	4b05      	ldr	r3, [pc, #20]	; (80150fc <pvTaskIncrementMutexHeldCount+0x24>)
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80150ea:	3201      	adds	r2, #1
 80150ec:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80150ee:	4b03      	ldr	r3, [pc, #12]	; (80150fc <pvTaskIncrementMutexHeldCount+0x24>)
 80150f0:	681b      	ldr	r3, [r3, #0]
	}
 80150f2:	4618      	mov	r0, r3
 80150f4:	46bd      	mov	sp, r7
 80150f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fa:	4770      	bx	lr
 80150fc:	20007fe8 	.word	0x20007fe8

08015100 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015100:	b580      	push	{r7, lr}
 8015102:	b084      	sub	sp, #16
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801510a:	f000 fdf9 	bl	8015d00 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801510e:	4b20      	ldr	r3, [pc, #128]	; (8015190 <ulTaskNotifyTake+0x90>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015116:	2b00      	cmp	r3, #0
 8015118:	d113      	bne.n	8015142 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801511a:	4b1d      	ldr	r3, [pc, #116]	; (8015190 <ulTaskNotifyTake+0x90>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2201      	movs	r2, #1
 8015120:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d00b      	beq.n	8015142 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801512a:	2101      	movs	r1, #1
 801512c:	6838      	ldr	r0, [r7, #0]
 801512e:	f000 f859 	bl	80151e4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015132:	4b18      	ldr	r3, [pc, #96]	; (8015194 <ulTaskNotifyTake+0x94>)
 8015134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015138:	601a      	str	r2, [r3, #0]
 801513a:	f3bf 8f4f 	dsb	sy
 801513e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015142:	f000 fe0b 	bl	8015d5c <vPortExitCritical>

		taskENTER_CRITICAL();
 8015146:	f000 fddb 	bl	8015d00 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801514a:	4b11      	ldr	r3, [pc, #68]	; (8015190 <ulTaskNotifyTake+0x90>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015152:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d00e      	beq.n	8015178 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d005      	beq.n	801516c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015160:	4b0b      	ldr	r3, [pc, #44]	; (8015190 <ulTaskNotifyTake+0x90>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	2200      	movs	r2, #0
 8015166:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 801516a:	e005      	b.n	8015178 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801516c:	4b08      	ldr	r3, [pc, #32]	; (8015190 <ulTaskNotifyTake+0x90>)
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	68fa      	ldr	r2, [r7, #12]
 8015172:	3a01      	subs	r2, #1
 8015174:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015178:	4b05      	ldr	r3, [pc, #20]	; (8015190 <ulTaskNotifyTake+0x90>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	2200      	movs	r2, #0
 801517e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8015182:	f000 fdeb 	bl	8015d5c <vPortExitCritical>

		return ulReturn;
 8015186:	68fb      	ldr	r3, [r7, #12]
	}
 8015188:	4618      	mov	r0, r3
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	20007fe8 	.word	0x20007fe8
 8015194:	e000ed04 	.word	0xe000ed04

08015198 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8015198:	b580      	push	{r7, lr}
 801519a:	b084      	sub	sp, #16
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
 80151a0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d102      	bne.n	80151ae <ulTaskNotifyValueClear+0x16>
 80151a8:	4b0d      	ldr	r3, [pc, #52]	; (80151e0 <ulTaskNotifyValueClear+0x48>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	e000      	b.n	80151b0 <ulTaskNotifyValueClear+0x18>
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 80151b2:	f000 fda5 	bl	8015d00 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80151b6:	4b0a      	ldr	r3, [pc, #40]	; (80151e0 <ulTaskNotifyValueClear+0x48>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80151be:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	43db      	mvns	r3, r3
 80151ca:	401a      	ands	r2, r3
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 80151d2:	f000 fdc3 	bl	8015d5c <vPortExitCritical>

		return ulReturn;
 80151d6:	68bb      	ldr	r3, [r7, #8]
	}
 80151d8:	4618      	mov	r0, r3
 80151da:	3710      	adds	r7, #16
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	20007fe8 	.word	0x20007fe8

080151e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80151ee:	4b29      	ldr	r3, [pc, #164]	; (8015294 <prvAddCurrentTaskToDelayedList+0xb0>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151f4:	4b28      	ldr	r3, [pc, #160]	; (8015298 <prvAddCurrentTaskToDelayedList+0xb4>)
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	3304      	adds	r3, #4
 80151fa:	4618      	mov	r0, r3
 80151fc:	f7fd fe90 	bl	8012f20 <uxListRemove>
 8015200:	4603      	mov	r3, r0
 8015202:	2b00      	cmp	r3, #0
 8015204:	d10b      	bne.n	801521e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015206:	4b24      	ldr	r3, [pc, #144]	; (8015298 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801520c:	2201      	movs	r2, #1
 801520e:	fa02 f303 	lsl.w	r3, r2, r3
 8015212:	43da      	mvns	r2, r3
 8015214:	4b21      	ldr	r3, [pc, #132]	; (801529c <prvAddCurrentTaskToDelayedList+0xb8>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	4013      	ands	r3, r2
 801521a:	4a20      	ldr	r2, [pc, #128]	; (801529c <prvAddCurrentTaskToDelayedList+0xb8>)
 801521c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015224:	d10a      	bne.n	801523c <prvAddCurrentTaskToDelayedList+0x58>
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d007      	beq.n	801523c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801522c:	4b1a      	ldr	r3, [pc, #104]	; (8015298 <prvAddCurrentTaskToDelayedList+0xb4>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	3304      	adds	r3, #4
 8015232:	4619      	mov	r1, r3
 8015234:	481a      	ldr	r0, [pc, #104]	; (80152a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8015236:	f7fd fe16 	bl	8012e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801523a:	e026      	b.n	801528a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801523c:	68fa      	ldr	r2, [r7, #12]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	4413      	add	r3, r2
 8015242:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015244:	4b14      	ldr	r3, [pc, #80]	; (8015298 <prvAddCurrentTaskToDelayedList+0xb4>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	68ba      	ldr	r2, [r7, #8]
 801524a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	429a      	cmp	r2, r3
 8015252:	d209      	bcs.n	8015268 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015254:	4b13      	ldr	r3, [pc, #76]	; (80152a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8015256:	681a      	ldr	r2, [r3, #0]
 8015258:	4b0f      	ldr	r3, [pc, #60]	; (8015298 <prvAddCurrentTaskToDelayedList+0xb4>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	3304      	adds	r3, #4
 801525e:	4619      	mov	r1, r3
 8015260:	4610      	mov	r0, r2
 8015262:	f7fd fe24 	bl	8012eae <vListInsert>
}
 8015266:	e010      	b.n	801528a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015268:	4b0f      	ldr	r3, [pc, #60]	; (80152a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	4b0a      	ldr	r3, [pc, #40]	; (8015298 <prvAddCurrentTaskToDelayedList+0xb4>)
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	3304      	adds	r3, #4
 8015272:	4619      	mov	r1, r3
 8015274:	4610      	mov	r0, r2
 8015276:	f7fd fe1a 	bl	8012eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801527a:	4b0c      	ldr	r3, [pc, #48]	; (80152ac <prvAddCurrentTaskToDelayedList+0xc8>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	68ba      	ldr	r2, [r7, #8]
 8015280:	429a      	cmp	r2, r3
 8015282:	d202      	bcs.n	801528a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015284:	4a09      	ldr	r2, [pc, #36]	; (80152ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	6013      	str	r3, [r2, #0]
}
 801528a:	bf00      	nop
 801528c:	3710      	adds	r7, #16
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}
 8015292:	bf00      	nop
 8015294:	200081f4 	.word	0x200081f4
 8015298:	20007fe8 	.word	0x20007fe8
 801529c:	200081f8 	.word	0x200081f8
 80152a0:	200081d8 	.word	0x200081d8
 80152a4:	200081a8 	.word	0x200081a8
 80152a8:	200081a4 	.word	0x200081a4
 80152ac:	20008210 	.word	0x20008210

080152b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b088      	sub	sp, #32
 80152b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80152b6:	2300      	movs	r3, #0
 80152b8:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80152ba:	f000 fb95 	bl	80159e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80152be:	4b19      	ldr	r3, [pc, #100]	; (8015324 <xTimerCreateTimerTask+0x74>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d020      	beq.n	8015308 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80152c6:	2300      	movs	r3, #0
 80152c8:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80152ca:	2300      	movs	r3, #0
 80152cc:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80152ce:	463a      	mov	r2, r7
 80152d0:	1d39      	adds	r1, r7, #4
 80152d2:	f107 0308 	add.w	r3, r7, #8
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7f3 fbce 	bl	8008a78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80152dc:	6839      	ldr	r1, [r7, #0]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	68ba      	ldr	r2, [r7, #8]
 80152e2:	9202      	str	r2, [sp, #8]
 80152e4:	9301      	str	r3, [sp, #4]
 80152e6:	2301      	movs	r3, #1
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	2300      	movs	r3, #0
 80152ec:	460a      	mov	r2, r1
 80152ee:	490e      	ldr	r1, [pc, #56]	; (8015328 <xTimerCreateTimerTask+0x78>)
 80152f0:	480e      	ldr	r0, [pc, #56]	; (801532c <xTimerCreateTimerTask+0x7c>)
 80152f2:	f7fe fcdd 	bl	8013cb0 <xTaskCreateStatic>
 80152f6:	4603      	mov	r3, r0
 80152f8:	4a0d      	ldr	r2, [pc, #52]	; (8015330 <xTimerCreateTimerTask+0x80>)
 80152fa:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80152fc:	4b0c      	ldr	r3, [pc, #48]	; (8015330 <xTimerCreateTimerTask+0x80>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d001      	beq.n	8015308 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8015304:	2301      	movs	r3, #1
 8015306:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d105      	bne.n	801531a <xTimerCreateTimerTask+0x6a>
 801530e:	f240 1213 	movw	r2, #275	; 0x113
 8015312:	4908      	ldr	r1, [pc, #32]	; (8015334 <xTimerCreateTimerTask+0x84>)
 8015314:	4808      	ldr	r0, [pc, #32]	; (8015338 <xTimerCreateTimerTask+0x88>)
 8015316:	f7f0 f999 	bl	800564c <assertFail>
	return xReturn;
 801531a:	68fb      	ldr	r3, [r7, #12]
}
 801531c:	4618      	mov	r0, r3
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	20008254 	.word	0x20008254
 8015328:	0801bfdc 	.word	0x0801bfdc
 801532c:	08015599 	.word	0x08015599
 8015330:	20008258 	.word	0x20008258
 8015334:	0801bfe4 	.word	0x0801bfe4
 8015338:	0801c018 	.word	0x0801c018

0801533c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801533c:	b580      	push	{r7, lr}
 801533e:	b088      	sub	sp, #32
 8015340:	af02      	add	r7, sp, #8
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
 8015348:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801534a:	202c      	movs	r0, #44	; 0x2c
 801534c:	f000 fde8 	bl	8015f20 <pvPortMalloc>
 8015350:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d00d      	beq.n	8015374 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	2200      	movs	r2, #0
 801535c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	9301      	str	r3, [sp, #4]
 8015364:	6a3b      	ldr	r3, [r7, #32]
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	683b      	ldr	r3, [r7, #0]
 801536a:	687a      	ldr	r2, [r7, #4]
 801536c:	68b9      	ldr	r1, [r7, #8]
 801536e:	68f8      	ldr	r0, [r7, #12]
 8015370:	f000 f840 	bl	80153f4 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015374:	697b      	ldr	r3, [r7, #20]
	}
 8015376:	4618      	mov	r0, r3
 8015378:	3718      	adds	r7, #24
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
	...

08015380 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8015380:	b580      	push	{r7, lr}
 8015382:	b088      	sub	sp, #32
 8015384:	af02      	add	r7, sp, #8
 8015386:	60f8      	str	r0, [r7, #12]
 8015388:	60b9      	str	r1, [r7, #8]
 801538a:	607a      	str	r2, [r7, #4]
 801538c:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801538e:	232c      	movs	r3, #44	; 0x2c
 8015390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	2b2c      	cmp	r3, #44	; 0x2c
 8015396:	d005      	beq.n	80153a4 <xTimerCreateStatic+0x24>
 8015398:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801539c:	4912      	ldr	r1, [pc, #72]	; (80153e8 <xTimerCreateStatic+0x68>)
 801539e:	4813      	ldr	r0, [pc, #76]	; (80153ec <xTimerCreateStatic+0x6c>)
 80153a0:	f7f0 f954 	bl	800564c <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80153a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80153a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d105      	bne.n	80153b8 <xTimerCreateStatic+0x38>
 80153ac:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80153b0:	490d      	ldr	r1, [pc, #52]	; (80153e8 <xTimerCreateStatic+0x68>)
 80153b2:	480f      	ldr	r0, [pc, #60]	; (80153f0 <xTimerCreateStatic+0x70>)
 80153b4:	f7f0 f94a 	bl	800564c <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80153b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ba:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d00d      	beq.n	80153de <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	2202      	movs	r2, #2
 80153c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	9301      	str	r3, [sp, #4]
 80153ce:	6a3b      	ldr	r3, [r7, #32]
 80153d0:	9300      	str	r3, [sp, #0]
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	68b9      	ldr	r1, [r7, #8]
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f000 f80b 	bl	80153f4 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80153de:	697b      	ldr	r3, [r7, #20]
	}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3718      	adds	r7, #24
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	0801bfe4 	.word	0x0801bfe4
 80153ec:	0801c020 	.word	0x0801c020
 80153f0:	0801c03c 	.word	0x0801c03c

080153f4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	607a      	str	r2, [r7, #4]
 8015400:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d105      	bne.n	8015414 <prvInitialiseNewTimer+0x20>
 8015408:	f240 1265 	movw	r2, #357	; 0x165
 801540c:	4914      	ldr	r1, [pc, #80]	; (8015460 <prvInitialiseNewTimer+0x6c>)
 801540e:	4815      	ldr	r0, [pc, #84]	; (8015464 <prvInitialiseNewTimer+0x70>)
 8015410:	f7f0 f91c 	bl	800564c <assertFail>

	if( pxNewTimer != NULL )
 8015414:	69fb      	ldr	r3, [r7, #28]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d01e      	beq.n	8015458 <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801541a:	f000 fae5 	bl	80159e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801541e:	69fb      	ldr	r3, [r7, #28]
 8015420:	68fa      	ldr	r2, [r7, #12]
 8015422:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	68ba      	ldr	r2, [r7, #8]
 8015428:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801542a:	69fb      	ldr	r3, [r7, #28]
 801542c:	683a      	ldr	r2, [r7, #0]
 801542e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015430:	69fb      	ldr	r3, [r7, #28]
 8015432:	69ba      	ldr	r2, [r7, #24]
 8015434:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015436:	69fb      	ldr	r3, [r7, #28]
 8015438:	3304      	adds	r3, #4
 801543a:	4618      	mov	r0, r3
 801543c:	f7fd fd06 	bl	8012e4c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d008      	beq.n	8015458 <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015446:	69fb      	ldr	r3, [r7, #28]
 8015448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801544c:	f043 0304 	orr.w	r3, r3, #4
 8015450:	b2da      	uxtb	r2, r3
 8015452:	69fb      	ldr	r3, [r7, #28]
 8015454:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8015458:	bf00      	nop
 801545a:	3710      	adds	r7, #16
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	0801bfe4 	.word	0x0801bfe4
 8015464:	0801c04c 	.word	0x0801c04c

08015468 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b08a      	sub	sp, #40	; 0x28
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	60b9      	str	r1, [r7, #8]
 8015472:	607a      	str	r2, [r7, #4]
 8015474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015476:	2300      	movs	r3, #0
 8015478:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d105      	bne.n	801548c <xTimerGenericCommand+0x24>
 8015480:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8015484:	491b      	ldr	r1, [pc, #108]	; (80154f4 <xTimerGenericCommand+0x8c>)
 8015486:	481c      	ldr	r0, [pc, #112]	; (80154f8 <xTimerGenericCommand+0x90>)
 8015488:	f7f0 f8e0 	bl	800564c <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801548c:	4b1b      	ldr	r3, [pc, #108]	; (80154fc <xTimerGenericCommand+0x94>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d02a      	beq.n	80154ea <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	2b05      	cmp	r3, #5
 80154a4:	dc18      	bgt.n	80154d8 <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80154a6:	f7ff fc77 	bl	8014d98 <xTaskGetSchedulerState>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b02      	cmp	r3, #2
 80154ae:	d109      	bne.n	80154c4 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80154b0:	4b12      	ldr	r3, [pc, #72]	; (80154fc <xTimerGenericCommand+0x94>)
 80154b2:	6818      	ldr	r0, [r3, #0]
 80154b4:	f107 0114 	add.w	r1, r7, #20
 80154b8:	2300      	movs	r3, #0
 80154ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154bc:	f7fd fed8 	bl	8013270 <xQueueGenericSend>
 80154c0:	6278      	str	r0, [r7, #36]	; 0x24
 80154c2:	e012      	b.n	80154ea <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80154c4:	4b0d      	ldr	r3, [pc, #52]	; (80154fc <xTimerGenericCommand+0x94>)
 80154c6:	6818      	ldr	r0, [r3, #0]
 80154c8:	f107 0114 	add.w	r1, r7, #20
 80154cc:	2300      	movs	r3, #0
 80154ce:	2200      	movs	r2, #0
 80154d0:	f7fd fece 	bl	8013270 <xQueueGenericSend>
 80154d4:	6278      	str	r0, [r7, #36]	; 0x24
 80154d6:	e008      	b.n	80154ea <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80154d8:	4b08      	ldr	r3, [pc, #32]	; (80154fc <xTimerGenericCommand+0x94>)
 80154da:	6818      	ldr	r0, [r3, #0]
 80154dc:	f107 0114 	add.w	r1, r7, #20
 80154e0:	2300      	movs	r3, #0
 80154e2:	683a      	ldr	r2, [r7, #0]
 80154e4:	f7fd ffd2 	bl	801348c <xQueueGenericSendFromISR>
 80154e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80154ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3728      	adds	r7, #40	; 0x28
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	0801bfe4 	.word	0x0801bfe4
 80154f8:	0801c068 	.word	0x0801c068
 80154fc:	20008254 	.word	0x20008254

08015500 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b086      	sub	sp, #24
 8015504:	af02      	add	r7, sp, #8
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801550a:	4b20      	ldr	r3, [pc, #128]	; (801558c <prvProcessExpiredTimer+0x8c>)
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	68db      	ldr	r3, [r3, #12]
 8015512:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	3304      	adds	r3, #4
 8015518:	4618      	mov	r0, r3
 801551a:	f7fd fd01 	bl	8012f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015524:	f003 0304 	and.w	r3, r3, #4
 8015528:	2b00      	cmp	r3, #0
 801552a:	d01e      	beq.n	801556a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	699a      	ldr	r2, [r3, #24]
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	18d1      	adds	r1, r2, r3
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f000 f8d1 	bl	80156e0 <prvInsertTimerInActiveList>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d01b      	beq.n	801557c <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015544:	2300      	movs	r3, #0
 8015546:	9300      	str	r3, [sp, #0]
 8015548:	2300      	movs	r3, #0
 801554a:	687a      	ldr	r2, [r7, #4]
 801554c:	2100      	movs	r1, #0
 801554e:	68f8      	ldr	r0, [r7, #12]
 8015550:	f7ff ff8a 	bl	8015468 <xTimerGenericCommand>
 8015554:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d10f      	bne.n	801557c <prvProcessExpiredTimer+0x7c>
 801555c:	f240 2211 	movw	r2, #529	; 0x211
 8015560:	490b      	ldr	r1, [pc, #44]	; (8015590 <prvProcessExpiredTimer+0x90>)
 8015562:	480c      	ldr	r0, [pc, #48]	; (8015594 <prvProcessExpiredTimer+0x94>)
 8015564:	f7f0 f872 	bl	800564c <assertFail>
 8015568:	e008      	b.n	801557c <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015570:	f023 0301 	bic.w	r3, r3, #1
 8015574:	b2da      	uxtb	r2, r3
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	6a1b      	ldr	r3, [r3, #32]
 8015580:	68f8      	ldr	r0, [r7, #12]
 8015582:	4798      	blx	r3
}
 8015584:	bf00      	nop
 8015586:	3710      	adds	r7, #16
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	2000824c 	.word	0x2000824c
 8015590:	0801bfe4 	.word	0x0801bfe4
 8015594:	0801c090 	.word	0x0801c090

08015598 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80155a0:	f107 0308 	add.w	r3, r7, #8
 80155a4:	4618      	mov	r0, r3
 80155a6:	f000 f857 	bl	8015658 <prvGetNextExpireTime>
 80155aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	4619      	mov	r1, r3
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f000 f803 	bl	80155bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80155b6:	f000 f8d5 	bl	8015764 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80155ba:	e7f1      	b.n	80155a0 <prvTimerTask+0x8>

080155bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80155c6:	f7fe fe3f 	bl	8014248 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80155ca:	f107 0308 	add.w	r3, r7, #8
 80155ce:	4618      	mov	r0, r3
 80155d0:	f000 f866 	bl	80156a0 <prvSampleTimeNow>
 80155d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d130      	bne.n	801563e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d10a      	bne.n	80155f8 <prvProcessTimerOrBlockTask+0x3c>
 80155e2:	687a      	ldr	r2, [r7, #4]
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d806      	bhi.n	80155f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80155ea:	f7fe fe3b 	bl	8014264 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80155ee:	68f9      	ldr	r1, [r7, #12]
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7ff ff85 	bl	8015500 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80155f6:	e024      	b.n	8015642 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d008      	beq.n	8015610 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80155fe:	4b13      	ldr	r3, [pc, #76]	; (801564c <prvProcessTimerOrBlockTask+0x90>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d101      	bne.n	801560c <prvProcessTimerOrBlockTask+0x50>
 8015608:	2301      	movs	r3, #1
 801560a:	e000      	b.n	801560e <prvProcessTimerOrBlockTask+0x52>
 801560c:	2300      	movs	r3, #0
 801560e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015610:	4b0f      	ldr	r3, [pc, #60]	; (8015650 <prvProcessTimerOrBlockTask+0x94>)
 8015612:	6818      	ldr	r0, [r3, #0]
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	1ad3      	subs	r3, r2, r3
 801561a:	683a      	ldr	r2, [r7, #0]
 801561c:	4619      	mov	r1, r3
 801561e:	f7fe fb13 	bl	8013c48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015622:	f7fe fe1f 	bl	8014264 <xTaskResumeAll>
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d10a      	bne.n	8015642 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801562c:	4b09      	ldr	r3, [pc, #36]	; (8015654 <prvProcessTimerOrBlockTask+0x98>)
 801562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015632:	601a      	str	r2, [r3, #0]
 8015634:	f3bf 8f4f 	dsb	sy
 8015638:	f3bf 8f6f 	isb	sy
}
 801563c:	e001      	b.n	8015642 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801563e:	f7fe fe11 	bl	8014264 <xTaskResumeAll>
}
 8015642:	bf00      	nop
 8015644:	3710      	adds	r7, #16
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop
 801564c:	20008250 	.word	0x20008250
 8015650:	20008254 	.word	0x20008254
 8015654:	e000ed04 	.word	0xe000ed04

08015658 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015658:	b480      	push	{r7}
 801565a:	b085      	sub	sp, #20
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015660:	4b0e      	ldr	r3, [pc, #56]	; (801569c <prvGetNextExpireTime+0x44>)
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d101      	bne.n	801566e <prvGetNextExpireTime+0x16>
 801566a:	2201      	movs	r2, #1
 801566c:	e000      	b.n	8015670 <prvGetNextExpireTime+0x18>
 801566e:	2200      	movs	r2, #0
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d105      	bne.n	8015688 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801567c:	4b07      	ldr	r3, [pc, #28]	; (801569c <prvGetNextExpireTime+0x44>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	68db      	ldr	r3, [r3, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	60fb      	str	r3, [r7, #12]
 8015686:	e001      	b.n	801568c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015688:	2300      	movs	r3, #0
 801568a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801568c:	68fb      	ldr	r3, [r7, #12]
}
 801568e:	4618      	mov	r0, r3
 8015690:	3714      	adds	r7, #20
 8015692:	46bd      	mov	sp, r7
 8015694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	2000824c 	.word	0x2000824c

080156a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b084      	sub	sp, #16
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80156a8:	f7fe fe78 	bl	801439c <xTaskGetTickCount>
 80156ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80156ae:	4b0b      	ldr	r3, [pc, #44]	; (80156dc <prvSampleTimeNow+0x3c>)
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	68fa      	ldr	r2, [r7, #12]
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d205      	bcs.n	80156c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80156b8:	f000 f932 	bl	8015920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	2201      	movs	r2, #1
 80156c0:	601a      	str	r2, [r3, #0]
 80156c2:	e002      	b.n	80156ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2200      	movs	r2, #0
 80156c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80156ca:	4a04      	ldr	r2, [pc, #16]	; (80156dc <prvSampleTimeNow+0x3c>)
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80156d0:	68fb      	ldr	r3, [r7, #12]
}
 80156d2:	4618      	mov	r0, r3
 80156d4:	3710      	adds	r7, #16
 80156d6:	46bd      	mov	sp, r7
 80156d8:	bd80      	pop	{r7, pc}
 80156da:	bf00      	nop
 80156dc:	2000825c 	.word	0x2000825c

080156e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b086      	sub	sp, #24
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	60f8      	str	r0, [r7, #12]
 80156e8:	60b9      	str	r1, [r7, #8]
 80156ea:	607a      	str	r2, [r7, #4]
 80156ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80156ee:	2300      	movs	r3, #0
 80156f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	68ba      	ldr	r2, [r7, #8]
 80156f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80156fe:	68ba      	ldr	r2, [r7, #8]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	429a      	cmp	r2, r3
 8015704:	d812      	bhi.n	801572c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015706:	687a      	ldr	r2, [r7, #4]
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	1ad2      	subs	r2, r2, r3
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	699b      	ldr	r3, [r3, #24]
 8015710:	429a      	cmp	r2, r3
 8015712:	d302      	bcc.n	801571a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015714:	2301      	movs	r3, #1
 8015716:	617b      	str	r3, [r7, #20]
 8015718:	e01b      	b.n	8015752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801571a:	4b10      	ldr	r3, [pc, #64]	; (801575c <prvInsertTimerInActiveList+0x7c>)
 801571c:	681a      	ldr	r2, [r3, #0]
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	3304      	adds	r3, #4
 8015722:	4619      	mov	r1, r3
 8015724:	4610      	mov	r0, r2
 8015726:	f7fd fbc2 	bl	8012eae <vListInsert>
 801572a:	e012      	b.n	8015752 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801572c:	687a      	ldr	r2, [r7, #4]
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	429a      	cmp	r2, r3
 8015732:	d206      	bcs.n	8015742 <prvInsertTimerInActiveList+0x62>
 8015734:	68ba      	ldr	r2, [r7, #8]
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	429a      	cmp	r2, r3
 801573a:	d302      	bcc.n	8015742 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801573c:	2301      	movs	r3, #1
 801573e:	617b      	str	r3, [r7, #20]
 8015740:	e007      	b.n	8015752 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015742:	4b07      	ldr	r3, [pc, #28]	; (8015760 <prvInsertTimerInActiveList+0x80>)
 8015744:	681a      	ldr	r2, [r3, #0]
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	3304      	adds	r3, #4
 801574a:	4619      	mov	r1, r3
 801574c:	4610      	mov	r0, r2
 801574e:	f7fd fbae 	bl	8012eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015752:	697b      	ldr	r3, [r7, #20]
}
 8015754:	4618      	mov	r0, r3
 8015756:	3718      	adds	r7, #24
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	20008250 	.word	0x20008250
 8015760:	2000824c 	.word	0x2000824c

08015764 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b08c      	sub	sp, #48	; 0x30
 8015768:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801576a:	e0bd      	b.n	80158e8 <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801576c:	68bb      	ldr	r3, [r7, #8]
 801576e:	2b00      	cmp	r3, #0
 8015770:	da14      	bge.n	801579c <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015772:	f107 0308 	add.w	r3, r7, #8
 8015776:	3304      	adds	r3, #4
 8015778:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801577c:	2b00      	cmp	r3, #0
 801577e:	d105      	bne.n	801578c <prvProcessReceivedCommands+0x28>
 8015780:	f240 22f1 	movw	r2, #753	; 0x2f1
 8015784:	4961      	ldr	r1, [pc, #388]	; (801590c <prvProcessReceivedCommands+0x1a8>)
 8015786:	4862      	ldr	r0, [pc, #392]	; (8015910 <prvProcessReceivedCommands+0x1ac>)
 8015788:	f7ef ff60 	bl	800564c <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015792:	6850      	ldr	r0, [r2, #4]
 8015794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015796:	6892      	ldr	r2, [r2, #8]
 8015798:	4611      	mov	r1, r2
 801579a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	f2c0 80a2 	blt.w	80158e8 <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80157a8:	6a3b      	ldr	r3, [r7, #32]
 80157aa:	695b      	ldr	r3, [r3, #20]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d004      	beq.n	80157ba <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80157b0:	6a3b      	ldr	r3, [r7, #32]
 80157b2:	3304      	adds	r3, #4
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7fd fbb3 	bl	8012f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80157ba:	1d3b      	adds	r3, r7, #4
 80157bc:	4618      	mov	r0, r3
 80157be:	f7ff ff6f 	bl	80156a0 <prvSampleTimeNow>
 80157c2:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	2b09      	cmp	r3, #9
 80157c8:	f200 808d 	bhi.w	80158e6 <prvProcessReceivedCommands+0x182>
 80157cc:	a201      	add	r2, pc, #4	; (adr r2, 80157d4 <prvProcessReceivedCommands+0x70>)
 80157ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157d2:	bf00      	nop
 80157d4:	080157fd 	.word	0x080157fd
 80157d8:	080157fd 	.word	0x080157fd
 80157dc:	080157fd 	.word	0x080157fd
 80157e0:	08015869 	.word	0x08015869
 80157e4:	0801587d 	.word	0x0801587d
 80157e8:	080158bd 	.word	0x080158bd
 80157ec:	080157fd 	.word	0x080157fd
 80157f0:	080157fd 	.word	0x080157fd
 80157f4:	08015869 	.word	0x08015869
 80157f8:	0801587d 	.word	0x0801587d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80157fc:	6a3b      	ldr	r3, [r7, #32]
 80157fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015802:	f043 0301 	orr.w	r3, r3, #1
 8015806:	b2da      	uxtb	r2, r3
 8015808:	6a3b      	ldr	r3, [r7, #32]
 801580a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801580e:	68fa      	ldr	r2, [r7, #12]
 8015810:	6a3b      	ldr	r3, [r7, #32]
 8015812:	699b      	ldr	r3, [r3, #24]
 8015814:	18d1      	adds	r1, r2, r3
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	69fa      	ldr	r2, [r7, #28]
 801581a:	6a38      	ldr	r0, [r7, #32]
 801581c:	f7ff ff60 	bl	80156e0 <prvInsertTimerInActiveList>
 8015820:	4603      	mov	r3, r0
 8015822:	2b00      	cmp	r3, #0
 8015824:	d060      	beq.n	80158e8 <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015826:	6a3b      	ldr	r3, [r7, #32]
 8015828:	6a1b      	ldr	r3, [r3, #32]
 801582a:	6a38      	ldr	r0, [r7, #32]
 801582c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801582e:	6a3b      	ldr	r3, [r7, #32]
 8015830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015834:	f003 0304 	and.w	r3, r3, #4
 8015838:	2b00      	cmp	r3, #0
 801583a:	d055      	beq.n	80158e8 <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801583c:	68fa      	ldr	r2, [r7, #12]
 801583e:	6a3b      	ldr	r3, [r7, #32]
 8015840:	699b      	ldr	r3, [r3, #24]
 8015842:	441a      	add	r2, r3
 8015844:	2300      	movs	r3, #0
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	2300      	movs	r3, #0
 801584a:	2100      	movs	r1, #0
 801584c:	6a38      	ldr	r0, [r7, #32]
 801584e:	f7ff fe0b 	bl	8015468 <xTimerGenericCommand>
 8015852:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d146      	bne.n	80158e8 <prvProcessReceivedCommands+0x184>
 801585a:	f44f 724b 	mov.w	r2, #812	; 0x32c
 801585e:	492b      	ldr	r1, [pc, #172]	; (801590c <prvProcessReceivedCommands+0x1a8>)
 8015860:	482c      	ldr	r0, [pc, #176]	; (8015914 <prvProcessReceivedCommands+0x1b0>)
 8015862:	f7ef fef3 	bl	800564c <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 8015866:	e03f      	b.n	80158e8 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015868:	6a3b      	ldr	r3, [r7, #32]
 801586a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801586e:	f023 0301 	bic.w	r3, r3, #1
 8015872:	b2da      	uxtb	r2, r3
 8015874:	6a3b      	ldr	r3, [r7, #32]
 8015876:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801587a:	e035      	b.n	80158e8 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801587c:	6a3b      	ldr	r3, [r7, #32]
 801587e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015882:	f043 0301 	orr.w	r3, r3, #1
 8015886:	b2da      	uxtb	r2, r3
 8015888:	6a3b      	ldr	r3, [r7, #32]
 801588a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801588e:	68fa      	ldr	r2, [r7, #12]
 8015890:	6a3b      	ldr	r3, [r7, #32]
 8015892:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015894:	6a3b      	ldr	r3, [r7, #32]
 8015896:	699b      	ldr	r3, [r3, #24]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d105      	bne.n	80158a8 <prvProcessReceivedCommands+0x144>
 801589c:	f44f 7251 	mov.w	r2, #836	; 0x344
 80158a0:	491a      	ldr	r1, [pc, #104]	; (801590c <prvProcessReceivedCommands+0x1a8>)
 80158a2:	481d      	ldr	r0, [pc, #116]	; (8015918 <prvProcessReceivedCommands+0x1b4>)
 80158a4:	f7ef fed2 	bl	800564c <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80158a8:	6a3b      	ldr	r3, [r7, #32]
 80158aa:	699a      	ldr	r2, [r3, #24]
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	18d1      	adds	r1, r2, r3
 80158b0:	69fb      	ldr	r3, [r7, #28]
 80158b2:	69fa      	ldr	r2, [r7, #28]
 80158b4:	6a38      	ldr	r0, [r7, #32]
 80158b6:	f7ff ff13 	bl	80156e0 <prvInsertTimerInActiveList>
					break;
 80158ba:	e015      	b.n	80158e8 <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80158bc:	6a3b      	ldr	r3, [r7, #32]
 80158be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158c2:	f003 0302 	and.w	r3, r3, #2
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d103      	bne.n	80158d2 <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 80158ca:	6a38      	ldr	r0, [r7, #32]
 80158cc:	f000 fbea 	bl	80160a4 <vPortFree>
 80158d0:	e00a      	b.n	80158e8 <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80158d2:	6a3b      	ldr	r3, [r7, #32]
 80158d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158d8:	f023 0301 	bic.w	r3, r3, #1
 80158dc:	b2da      	uxtb	r2, r3
 80158de:	6a3b      	ldr	r3, [r7, #32]
 80158e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80158e4:	e000      	b.n	80158e8 <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 80158e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80158e8:	4b0c      	ldr	r3, [pc, #48]	; (801591c <prvProcessReceivedCommands+0x1b8>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	f107 0108 	add.w	r1, r7, #8
 80158f0:	2200      	movs	r2, #0
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fd fe5e 	bl	80135b4 <xQueueReceive>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	f47f af36 	bne.w	801576c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015900:	bf00      	nop
 8015902:	bf00      	nop
 8015904:	3728      	adds	r7, #40	; 0x28
 8015906:	46bd      	mov	sp, r7
 8015908:	bd80      	pop	{r7, pc}
 801590a:	bf00      	nop
 801590c:	0801bfe4 	.word	0x0801bfe4
 8015910:	0801c098 	.word	0x0801c098
 8015914:	0801c090 	.word	0x0801c090
 8015918:	0801c0a4 	.word	0x0801c0a4
 801591c:	20008254 	.word	0x20008254

08015920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b088      	sub	sp, #32
 8015924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015926:	e043      	b.n	80159b0 <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015928:	4b2b      	ldr	r3, [pc, #172]	; (80159d8 <prvSwitchTimerLists+0xb8>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	68db      	ldr	r3, [r3, #12]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015932:	4b29      	ldr	r3, [pc, #164]	; (80159d8 <prvSwitchTimerLists+0xb8>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	68db      	ldr	r3, [r3, #12]
 801593a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	3304      	adds	r3, #4
 8015940:	4618      	mov	r0, r3
 8015942:	f7fd faed 	bl	8012f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	6a1b      	ldr	r3, [r3, #32]
 801594a:	68f8      	ldr	r0, [r7, #12]
 801594c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015954:	f003 0304 	and.w	r3, r3, #4
 8015958:	2b00      	cmp	r3, #0
 801595a:	d029      	beq.n	80159b0 <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	699b      	ldr	r3, [r3, #24]
 8015960:	693a      	ldr	r2, [r7, #16]
 8015962:	4413      	add	r3, r2
 8015964:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015966:	68ba      	ldr	r2, [r7, #8]
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	429a      	cmp	r2, r3
 801596c:	d90e      	bls.n	801598c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	68ba      	ldr	r2, [r7, #8]
 8015972:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	68fa      	ldr	r2, [r7, #12]
 8015978:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801597a:	4b17      	ldr	r3, [pc, #92]	; (80159d8 <prvSwitchTimerLists+0xb8>)
 801597c:	681a      	ldr	r2, [r3, #0]
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	3304      	adds	r3, #4
 8015982:	4619      	mov	r1, r3
 8015984:	4610      	mov	r0, r2
 8015986:	f7fd fa92 	bl	8012eae <vListInsert>
 801598a:	e011      	b.n	80159b0 <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801598c:	2300      	movs	r3, #0
 801598e:	9300      	str	r3, [sp, #0]
 8015990:	2300      	movs	r3, #0
 8015992:	693a      	ldr	r2, [r7, #16]
 8015994:	2100      	movs	r1, #0
 8015996:	68f8      	ldr	r0, [r7, #12]
 8015998:	f7ff fd66 	bl	8015468 <xTimerGenericCommand>
 801599c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d105      	bne.n	80159b0 <prvSwitchTimerLists+0x90>
 80159a4:	f240 329d 	movw	r2, #925	; 0x39d
 80159a8:	490c      	ldr	r1, [pc, #48]	; (80159dc <prvSwitchTimerLists+0xbc>)
 80159aa:	480d      	ldr	r0, [pc, #52]	; (80159e0 <prvSwitchTimerLists+0xc0>)
 80159ac:	f7ef fe4e 	bl	800564c <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80159b0:	4b09      	ldr	r3, [pc, #36]	; (80159d8 <prvSwitchTimerLists+0xb8>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d1b6      	bne.n	8015928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80159ba:	4b07      	ldr	r3, [pc, #28]	; (80159d8 <prvSwitchTimerLists+0xb8>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80159c0:	4b08      	ldr	r3, [pc, #32]	; (80159e4 <prvSwitchTimerLists+0xc4>)
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	4a04      	ldr	r2, [pc, #16]	; (80159d8 <prvSwitchTimerLists+0xb8>)
 80159c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80159c8:	4a06      	ldr	r2, [pc, #24]	; (80159e4 <prvSwitchTimerLists+0xc4>)
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	6013      	str	r3, [r2, #0]
}
 80159ce:	bf00      	nop
 80159d0:	3718      	adds	r7, #24
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	bf00      	nop
 80159d8:	2000824c 	.word	0x2000824c
 80159dc:	0801bfe4 	.word	0x0801bfe4
 80159e0:	0801c090 	.word	0x0801c090
 80159e4:	20008250 	.word	0x20008250

080159e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80159ee:	f000 f987 	bl	8015d00 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80159f2:	4b15      	ldr	r3, [pc, #84]	; (8015a48 <prvCheckForValidListAndQueue+0x60>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d120      	bne.n	8015a3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80159fa:	4814      	ldr	r0, [pc, #80]	; (8015a4c <prvCheckForValidListAndQueue+0x64>)
 80159fc:	f7fd fa06 	bl	8012e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015a00:	4813      	ldr	r0, [pc, #76]	; (8015a50 <prvCheckForValidListAndQueue+0x68>)
 8015a02:	f7fd fa03 	bl	8012e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015a06:	4b13      	ldr	r3, [pc, #76]	; (8015a54 <prvCheckForValidListAndQueue+0x6c>)
 8015a08:	4a10      	ldr	r2, [pc, #64]	; (8015a4c <prvCheckForValidListAndQueue+0x64>)
 8015a0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015a0c:	4b12      	ldr	r3, [pc, #72]	; (8015a58 <prvCheckForValidListAndQueue+0x70>)
 8015a0e:	4a10      	ldr	r2, [pc, #64]	; (8015a50 <prvCheckForValidListAndQueue+0x68>)
 8015a10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015a12:	2300      	movs	r3, #0
 8015a14:	9300      	str	r3, [sp, #0]
 8015a16:	4b11      	ldr	r3, [pc, #68]	; (8015a5c <prvCheckForValidListAndQueue+0x74>)
 8015a18:	4a11      	ldr	r2, [pc, #68]	; (8015a60 <prvCheckForValidListAndQueue+0x78>)
 8015a1a:	2110      	movs	r1, #16
 8015a1c:	2014      	movs	r0, #20
 8015a1e:	f7fd fb11 	bl	8013044 <xQueueGenericCreateStatic>
 8015a22:	4603      	mov	r3, r0
 8015a24:	4a08      	ldr	r2, [pc, #32]	; (8015a48 <prvCheckForValidListAndQueue+0x60>)
 8015a26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015a28:	4b07      	ldr	r3, [pc, #28]	; (8015a48 <prvCheckForValidListAndQueue+0x60>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d005      	beq.n	8015a3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015a30:	4b05      	ldr	r3, [pc, #20]	; (8015a48 <prvCheckForValidListAndQueue+0x60>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	490b      	ldr	r1, [pc, #44]	; (8015a64 <prvCheckForValidListAndQueue+0x7c>)
 8015a36:	4618      	mov	r0, r3
 8015a38:	f7fe f8dc 	bl	8013bf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a3c:	f000 f98e 	bl	8015d5c <vPortExitCritical>
}
 8015a40:	bf00      	nop
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	20008254 	.word	0x20008254
 8015a4c:	20008224 	.word	0x20008224
 8015a50:	20008238 	.word	0x20008238
 8015a54:	2000824c 	.word	0x2000824c
 8015a58:	20008250 	.word	0x20008250
 8015a5c:	200083a0 	.word	0x200083a0
 8015a60:	20008260 	.word	0x20008260
 8015a64:	0801c0cc 	.word	0x0801c0cc

08015a68 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d105      	bne.n	8015a86 <pvTimerGetTimerID+0x1e>
 8015a7a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8015a7e:	4908      	ldr	r1, [pc, #32]	; (8015aa0 <pvTimerGetTimerID+0x38>)
 8015a80:	4808      	ldr	r0, [pc, #32]	; (8015aa4 <pvTimerGetTimerID+0x3c>)
 8015a82:	f7ef fde3 	bl	800564c <assertFail>

	taskENTER_CRITICAL();
 8015a86:	f000 f93b 	bl	8015d00 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	69db      	ldr	r3, [r3, #28]
 8015a8e:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8015a90:	f000 f964 	bl	8015d5c <vPortExitCritical>

	return pvReturn;
 8015a94:	68bb      	ldr	r3, [r7, #8]
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3710      	adds	r7, #16
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	0801bfe4 	.word	0x0801bfe4
 8015aa4:	0801c068 	.word	0x0801c068

08015aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015aa8:	b480      	push	{r7}
 8015aaa:	b085      	sub	sp, #20
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	3b04      	subs	r3, #4
 8015ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	3b04      	subs	r3, #4
 8015ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	f023 0201 	bic.w	r2, r3, #1
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	3b04      	subs	r3, #4
 8015ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015ad8:	4a0c      	ldr	r2, [pc, #48]	; (8015b0c <pxPortInitialiseStack+0x64>)
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	3b14      	subs	r3, #20
 8015ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	3b04      	subs	r3, #4
 8015aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	f06f 0202 	mvn.w	r2, #2
 8015af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	3b20      	subs	r3, #32
 8015afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015afe:	68fb      	ldr	r3, [r7, #12]
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	3714      	adds	r7, #20
 8015b04:	46bd      	mov	sp, r7
 8015b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0a:	4770      	bx	lr
 8015b0c:	08015b11 	.word	0x08015b11

08015b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b082      	sub	sp, #8
 8015b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015b16:	2300      	movs	r3, #0
 8015b18:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015b1a:	4b0e      	ldr	r3, [pc, #56]	; (8015b54 <prvTaskExitError+0x44>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b22:	d004      	beq.n	8015b2e <prvTaskExitError+0x1e>
 8015b24:	22e3      	movs	r2, #227	; 0xe3
 8015b26:	490c      	ldr	r1, [pc, #48]	; (8015b58 <prvTaskExitError+0x48>)
 8015b28:	480c      	ldr	r0, [pc, #48]	; (8015b5c <prvTaskExitError+0x4c>)
 8015b2a:	f7ef fd8f 	bl	800564c <assertFail>
	__asm volatile
 8015b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b32:	f383 8811 	msr	BASEPRI, r3
 8015b36:	f3bf 8f6f 	isb	sy
 8015b3a:	f3bf 8f4f 	dsb	sy
 8015b3e:	607b      	str	r3, [r7, #4]
}
 8015b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015b42:	bf00      	nop
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d0fc      	beq.n	8015b44 <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015b4a:	bf00      	nop
 8015b4c:	bf00      	nop
 8015b4e:	3708      	adds	r7, #8
 8015b50:	46bd      	mov	sp, r7
 8015b52:	bd80      	pop	{r7, pc}
 8015b54:	200003ec 	.word	0x200003ec
 8015b58:	0801c0e0 	.word	0x0801c0e0
 8015b5c:	0801c128 	.word	0x0801c128

08015b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015b60:	4b07      	ldr	r3, [pc, #28]	; (8015b80 <pxCurrentTCBConst2>)
 8015b62:	6819      	ldr	r1, [r3, #0]
 8015b64:	6808      	ldr	r0, [r1, #0]
 8015b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b6a:	f380 8809 	msr	PSP, r0
 8015b6e:	f3bf 8f6f 	isb	sy
 8015b72:	f04f 0000 	mov.w	r0, #0
 8015b76:	f380 8811 	msr	BASEPRI, r0
 8015b7a:	4770      	bx	lr
 8015b7c:	f3af 8000 	nop.w

08015b80 <pxCurrentTCBConst2>:
 8015b80:	20007fe8 	.word	0x20007fe8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015b84:	bf00      	nop
 8015b86:	bf00      	nop

08015b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015b88:	4808      	ldr	r0, [pc, #32]	; (8015bac <prvPortStartFirstTask+0x24>)
 8015b8a:	6800      	ldr	r0, [r0, #0]
 8015b8c:	6800      	ldr	r0, [r0, #0]
 8015b8e:	f380 8808 	msr	MSP, r0
 8015b92:	f04f 0000 	mov.w	r0, #0
 8015b96:	f380 8814 	msr	CONTROL, r0
 8015b9a:	b662      	cpsie	i
 8015b9c:	b661      	cpsie	f
 8015b9e:	f3bf 8f4f 	dsb	sy
 8015ba2:	f3bf 8f6f 	isb	sy
 8015ba6:	df00      	svc	0
 8015ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015baa:	bf00      	nop
 8015bac:	e000ed08 	.word	0xe000ed08

08015bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b084      	sub	sp, #16
 8015bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015bb6:	4b44      	ldr	r3, [pc, #272]	; (8015cc8 <xPortStartScheduler+0x118>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	4a44      	ldr	r2, [pc, #272]	; (8015ccc <xPortStartScheduler+0x11c>)
 8015bbc:	4293      	cmp	r3, r2
 8015bbe:	d105      	bne.n	8015bcc <xPortStartScheduler+0x1c>
 8015bc0:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015bc4:	4942      	ldr	r1, [pc, #264]	; (8015cd0 <xPortStartScheduler+0x120>)
 8015bc6:	4843      	ldr	r0, [pc, #268]	; (8015cd4 <xPortStartScheduler+0x124>)
 8015bc8:	f7ef fd40 	bl	800564c <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015bcc:	4b3e      	ldr	r3, [pc, #248]	; (8015cc8 <xPortStartScheduler+0x118>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	4a41      	ldr	r2, [pc, #260]	; (8015cd8 <xPortStartScheduler+0x128>)
 8015bd2:	4293      	cmp	r3, r2
 8015bd4:	d105      	bne.n	8015be2 <xPortStartScheduler+0x32>
 8015bd6:	f240 1229 	movw	r2, #297	; 0x129
 8015bda:	493d      	ldr	r1, [pc, #244]	; (8015cd0 <xPortStartScheduler+0x120>)
 8015bdc:	483f      	ldr	r0, [pc, #252]	; (8015cdc <xPortStartScheduler+0x12c>)
 8015bde:	f7ef fd35 	bl	800564c <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015be2:	4b3f      	ldr	r3, [pc, #252]	; (8015ce0 <xPortStartScheduler+0x130>)
 8015be4:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	22ff      	movs	r2, #255	; 0xff
 8015bf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015bfc:	79fb      	ldrb	r3, [r7, #7]
 8015bfe:	b2db      	uxtb	r3, r3
 8015c00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015c04:	b2da      	uxtb	r2, r3
 8015c06:	4b37      	ldr	r3, [pc, #220]	; (8015ce4 <xPortStartScheduler+0x134>)
 8015c08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015c0a:	4b37      	ldr	r3, [pc, #220]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c0c:	2207      	movs	r2, #7
 8015c0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c10:	e009      	b.n	8015c26 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 8015c12:	4b35      	ldr	r3, [pc, #212]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	3b01      	subs	r3, #1
 8015c18:	4a33      	ldr	r2, [pc, #204]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015c1c:	79fb      	ldrb	r3, [r7, #7]
 8015c1e:	b2db      	uxtb	r3, r3
 8015c20:	005b      	lsls	r3, r3, #1
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015c26:	79fb      	ldrb	r3, [r7, #7]
 8015c28:	b2db      	uxtb	r3, r3
 8015c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015c2e:	2b80      	cmp	r3, #128	; 0x80
 8015c30:	d0ef      	beq.n	8015c12 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8015c32:	4b2d      	ldr	r3, [pc, #180]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	f1c3 0307 	rsb	r3, r3, #7
 8015c3a:	2b04      	cmp	r3, #4
 8015c3c:	d005      	beq.n	8015c4a <xPortStartScheduler+0x9a>
 8015c3e:	f240 1251 	movw	r2, #337	; 0x151
 8015c42:	4923      	ldr	r1, [pc, #140]	; (8015cd0 <xPortStartScheduler+0x120>)
 8015c44:	4829      	ldr	r0, [pc, #164]	; (8015cec <xPortStartScheduler+0x13c>)
 8015c46:	f7ef fd01 	bl	800564c <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015c4a:	4b27      	ldr	r3, [pc, #156]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	f1c3 0307 	rsb	r3, r3, #7
 8015c52:	2b04      	cmp	r3, #4
 8015c54:	d005      	beq.n	8015c62 <xPortStartScheduler+0xb2>
 8015c56:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8015c5a:	491d      	ldr	r1, [pc, #116]	; (8015cd0 <xPortStartScheduler+0x120>)
 8015c5c:	4824      	ldr	r0, [pc, #144]	; (8015cf0 <xPortStartScheduler+0x140>)
 8015c5e:	f7ef fcf5 	bl	800564c <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015c62:	4b21      	ldr	r3, [pc, #132]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	021b      	lsls	r3, r3, #8
 8015c68:	4a1f      	ldr	r2, [pc, #124]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015c6c:	4b1e      	ldr	r3, [pc, #120]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015c74:	4a1c      	ldr	r2, [pc, #112]	; (8015ce8 <xPortStartScheduler+0x138>)
 8015c76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	b2da      	uxtb	r2, r3
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015c80:	4b1c      	ldr	r3, [pc, #112]	; (8015cf4 <xPortStartScheduler+0x144>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	4a1b      	ldr	r2, [pc, #108]	; (8015cf4 <xPortStartScheduler+0x144>)
 8015c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c8c:	4b19      	ldr	r3, [pc, #100]	; (8015cf4 <xPortStartScheduler+0x144>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	4a18      	ldr	r2, [pc, #96]	; (8015cf4 <xPortStartScheduler+0x144>)
 8015c92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c98:	f000 f8e0 	bl	8015e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c9c:	4b16      	ldr	r3, [pc, #88]	; (8015cf8 <xPortStartScheduler+0x148>)
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015ca2:	f000 f8f9 	bl	8015e98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015ca6:	4b15      	ldr	r3, [pc, #84]	; (8015cfc <xPortStartScheduler+0x14c>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	4a14      	ldr	r2, [pc, #80]	; (8015cfc <xPortStartScheduler+0x14c>)
 8015cac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015cb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015cb2:	f7ff ff69 	bl	8015b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015cb6:	f7fe fceb 	bl	8014690 <vTaskSwitchContext>
	prvTaskExitError();
 8015cba:	f7ff ff29 	bl	8015b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015cbe:	2300      	movs	r3, #0
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	e000ed00 	.word	0xe000ed00
 8015ccc:	410fc271 	.word	0x410fc271
 8015cd0:	0801c0e0 	.word	0x0801c0e0
 8015cd4:	0801c144 	.word	0x0801c144
 8015cd8:	410fc270 	.word	0x410fc270
 8015cdc:	0801c168 	.word	0x0801c168
 8015ce0:	e000e400 	.word	0xe000e400
 8015ce4:	200083f0 	.word	0x200083f0
 8015ce8:	200083f4 	.word	0x200083f4
 8015cec:	0801c18c 	.word	0x0801c18c
 8015cf0:	0801c1d0 	.word	0x0801c1d0
 8015cf4:	e000ed20 	.word	0xe000ed20
 8015cf8:	200003ec 	.word	0x200003ec
 8015cfc:	e000ef34 	.word	0xe000ef34

08015d00 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
	__asm volatile
 8015d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d0a:	f383 8811 	msr	BASEPRI, r3
 8015d0e:	f3bf 8f6f 	isb	sy
 8015d12:	f3bf 8f4f 	dsb	sy
 8015d16:	607b      	str	r3, [r7, #4]
}
 8015d18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015d1a:	4b0c      	ldr	r3, [pc, #48]	; (8015d4c <vPortEnterCritical+0x4c>)
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	3301      	adds	r3, #1
 8015d20:	4a0a      	ldr	r2, [pc, #40]	; (8015d4c <vPortEnterCritical+0x4c>)
 8015d22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015d24:	4b09      	ldr	r3, [pc, #36]	; (8015d4c <vPortEnterCritical+0x4c>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	2b01      	cmp	r3, #1
 8015d2a:	d10a      	bne.n	8015d42 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015d2c:	4b08      	ldr	r3, [pc, #32]	; (8015d50 <vPortEnterCritical+0x50>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d005      	beq.n	8015d42 <vPortEnterCritical+0x42>
 8015d36:	f240 129f 	movw	r2, #415	; 0x19f
 8015d3a:	4906      	ldr	r1, [pc, #24]	; (8015d54 <vPortEnterCritical+0x54>)
 8015d3c:	4806      	ldr	r0, [pc, #24]	; (8015d58 <vPortEnterCritical+0x58>)
 8015d3e:	f7ef fc85 	bl	800564c <assertFail>
	}
}
 8015d42:	bf00      	nop
 8015d44:	3708      	adds	r7, #8
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	200003ec 	.word	0x200003ec
 8015d50:	e000ed04 	.word	0xe000ed04
 8015d54:	0801c0e0 	.word	0x0801c0e0
 8015d58:	0801c230 	.word	0x0801c230

08015d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015d62:	4b0e      	ldr	r3, [pc, #56]	; (8015d9c <vPortExitCritical+0x40>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d105      	bne.n	8015d76 <vPortExitCritical+0x1a>
 8015d6a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8015d6e:	490c      	ldr	r1, [pc, #48]	; (8015da0 <vPortExitCritical+0x44>)
 8015d70:	480c      	ldr	r0, [pc, #48]	; (8015da4 <vPortExitCritical+0x48>)
 8015d72:	f7ef fc6b 	bl	800564c <assertFail>
	uxCriticalNesting--;
 8015d76:	4b09      	ldr	r3, [pc, #36]	; (8015d9c <vPortExitCritical+0x40>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	4a07      	ldr	r2, [pc, #28]	; (8015d9c <vPortExitCritical+0x40>)
 8015d7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015d80:	4b06      	ldr	r3, [pc, #24]	; (8015d9c <vPortExitCritical+0x40>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d105      	bne.n	8015d94 <vPortExitCritical+0x38>
 8015d88:	2300      	movs	r3, #0
 8015d8a:	607b      	str	r3, [r7, #4]
	__asm volatile
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f383 8811 	msr	BASEPRI, r3
}
 8015d92:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d94:	bf00      	nop
 8015d96:	3708      	adds	r7, #8
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}
 8015d9c:	200003ec 	.word	0x200003ec
 8015da0:	0801c0e0 	.word	0x0801c0e0
 8015da4:	0801c268 	.word	0x0801c268
	...

08015db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015db0:	f3ef 8009 	mrs	r0, PSP
 8015db4:	f3bf 8f6f 	isb	sy
 8015db8:	4b15      	ldr	r3, [pc, #84]	; (8015e10 <pxCurrentTCBConst>)
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	f01e 0f10 	tst.w	lr, #16
 8015dc0:	bf08      	it	eq
 8015dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dca:	6010      	str	r0, [r2, #0]
 8015dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015dd4:	f380 8811 	msr	BASEPRI, r0
 8015dd8:	f3bf 8f4f 	dsb	sy
 8015ddc:	f3bf 8f6f 	isb	sy
 8015de0:	f7fe fc56 	bl	8014690 <vTaskSwitchContext>
 8015de4:	f04f 0000 	mov.w	r0, #0
 8015de8:	f380 8811 	msr	BASEPRI, r0
 8015dec:	bc09      	pop	{r0, r3}
 8015dee:	6819      	ldr	r1, [r3, #0]
 8015df0:	6808      	ldr	r0, [r1, #0]
 8015df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015df6:	f01e 0f10 	tst.w	lr, #16
 8015dfa:	bf08      	it	eq
 8015dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015e00:	f380 8809 	msr	PSP, r0
 8015e04:	f3bf 8f6f 	isb	sy
 8015e08:	4770      	bx	lr
 8015e0a:	bf00      	nop
 8015e0c:	f3af 8000 	nop.w

08015e10 <pxCurrentTCBConst>:
 8015e10:	20007fe8 	.word	0x20007fe8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015e14:	bf00      	nop
 8015e16:	bf00      	nop

08015e18 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8015e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e22:	f383 8811 	msr	BASEPRI, r3
 8015e26:	f3bf 8f6f 	isb	sy
 8015e2a:	f3bf 8f4f 	dsb	sy
 8015e2e:	607b      	str	r3, [r7, #4]
}
 8015e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015e32:	f7fe fb53 	bl	80144dc <xTaskIncrementTick>
 8015e36:	4603      	mov	r3, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d003      	beq.n	8015e44 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015e3c:	4b06      	ldr	r3, [pc, #24]	; (8015e58 <tickFreeRTOS+0x40>)
 8015e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e42:	601a      	str	r2, [r3, #0]
 8015e44:	2300      	movs	r3, #0
 8015e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	f383 8811 	msr	BASEPRI, r3
}
 8015e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015e50:	bf00      	nop
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	e000ed04 	.word	0xe000ed04

08015e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015e60:	4b09      	ldr	r3, [pc, #36]	; (8015e88 <vPortSetupTimerInterrupt+0x2c>)
 8015e62:	2200      	movs	r2, #0
 8015e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015e66:	4b09      	ldr	r3, [pc, #36]	; (8015e8c <vPortSetupTimerInterrupt+0x30>)
 8015e68:	2200      	movs	r2, #0
 8015e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015e6c:	4b08      	ldr	r3, [pc, #32]	; (8015e90 <vPortSetupTimerInterrupt+0x34>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	4a08      	ldr	r2, [pc, #32]	; (8015e94 <vPortSetupTimerInterrupt+0x38>)
 8015e72:	3b01      	subs	r3, #1
 8015e74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015e76:	4b04      	ldr	r3, [pc, #16]	; (8015e88 <vPortSetupTimerInterrupt+0x2c>)
 8015e78:	2207      	movs	r2, #7
 8015e7a:	601a      	str	r2, [r3, #0]
}
 8015e7c:	bf00      	nop
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e84:	4770      	bx	lr
 8015e86:	bf00      	nop
 8015e88:	e000e010 	.word	0xe000e010
 8015e8c:	e000e018 	.word	0xe000e018
 8015e90:	20000354 	.word	0x20000354
 8015e94:	e000e014 	.word	0xe000e014

08015e98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015ea8 <vPortEnableVFP+0x10>
 8015e9c:	6801      	ldr	r1, [r0, #0]
 8015e9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015ea2:	6001      	str	r1, [r0, #0]
 8015ea4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015ea6:	bf00      	nop
 8015ea8:	e000ed88 	.word	0xe000ed88

08015eac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015eb2:	f3ef 8305 	mrs	r3, IPSR
 8015eb6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b0f      	cmp	r3, #15
 8015ebc:	d90f      	bls.n	8015ede <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015ebe:	4a11      	ldr	r2, [pc, #68]	; (8015f04 <vPortValidateInterruptPriority+0x58>)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	4413      	add	r3, r2
 8015ec4:	781b      	ldrb	r3, [r3, #0]
 8015ec6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015ec8:	4b0f      	ldr	r3, [pc, #60]	; (8015f08 <vPortValidateInterruptPriority+0x5c>)
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	78fa      	ldrb	r2, [r7, #3]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d205      	bcs.n	8015ede <vPortValidateInterruptPriority+0x32>
 8015ed2:	f240 22f2 	movw	r2, #754	; 0x2f2
 8015ed6:	490d      	ldr	r1, [pc, #52]	; (8015f0c <vPortValidateInterruptPriority+0x60>)
 8015ed8:	480d      	ldr	r0, [pc, #52]	; (8015f10 <vPortValidateInterruptPriority+0x64>)
 8015eda:	f7ef fbb7 	bl	800564c <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015ede:	4b0d      	ldr	r3, [pc, #52]	; (8015f14 <vPortValidateInterruptPriority+0x68>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015ee6:	4b0c      	ldr	r3, [pc, #48]	; (8015f18 <vPortValidateInterruptPriority+0x6c>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d905      	bls.n	8015efa <vPortValidateInterruptPriority+0x4e>
 8015eee:	f240 3202 	movw	r2, #770	; 0x302
 8015ef2:	4906      	ldr	r1, [pc, #24]	; (8015f0c <vPortValidateInterruptPriority+0x60>)
 8015ef4:	4809      	ldr	r0, [pc, #36]	; (8015f1c <vPortValidateInterruptPriority+0x70>)
 8015ef6:	f7ef fba9 	bl	800564c <assertFail>
	}
 8015efa:	bf00      	nop
 8015efc:	3708      	adds	r7, #8
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	e000e3f0 	.word	0xe000e3f0
 8015f08:	200083f0 	.word	0x200083f0
 8015f0c:	0801c0e0 	.word	0x0801c0e0
 8015f10:	0801c27c 	.word	0x0801c27c
 8015f14:	e000ed0c 	.word	0xe000ed0c
 8015f18:	200083f4 	.word	0x200083f4
 8015f1c:	0801c2a8 	.word	0x0801c2a8

08015f20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b086      	sub	sp, #24
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8015f2c:	f7fe f98c 	bl	8014248 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015f30:	4b52      	ldr	r3, [pc, #328]	; (801607c <pvPortMalloc+0x15c>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d101      	bne.n	8015f3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015f38:	f000 f912 	bl	8016160 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015f3c:	4b50      	ldr	r3, [pc, #320]	; (8016080 <pvPortMalloc+0x160>)
 8015f3e:	681a      	ldr	r2, [r3, #0]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	4013      	ands	r3, r2
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f040 8087 	bne.w	8016058 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d017      	beq.n	8015f80 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 8015f50:	2208      	movs	r2, #8
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	4413      	add	r3, r2
 8015f56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	f003 0307 	and.w	r3, r3, #7
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d00e      	beq.n	8015f80 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f023 0307 	bic.w	r3, r3, #7
 8015f68:	3308      	adds	r3, #8
 8015f6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f003 0307 	and.w	r3, r3, #7
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d004      	beq.n	8015f80 <pvPortMalloc+0x60>
 8015f76:	2297      	movs	r2, #151	; 0x97
 8015f78:	4942      	ldr	r1, [pc, #264]	; (8016084 <pvPortMalloc+0x164>)
 8015f7a:	4843      	ldr	r0, [pc, #268]	; (8016088 <pvPortMalloc+0x168>)
 8015f7c:	f7ef fb66 	bl	800564c <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d068      	beq.n	8016058 <pvPortMalloc+0x138>
 8015f86:	4b41      	ldr	r3, [pc, #260]	; (801608c <pvPortMalloc+0x16c>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	687a      	ldr	r2, [r7, #4]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d863      	bhi.n	8016058 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f90:	4b3f      	ldr	r3, [pc, #252]	; (8016090 <pvPortMalloc+0x170>)
 8015f92:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8015f94:	4b3e      	ldr	r3, [pc, #248]	; (8016090 <pvPortMalloc+0x170>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f9a:	e004      	b.n	8015fa6 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d903      	bls.n	8015fb8 <pvPortMalloc+0x98>
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d1f1      	bne.n	8015f9c <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015fb8:	4b30      	ldr	r3, [pc, #192]	; (801607c <pvPortMalloc+0x15c>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	697a      	ldr	r2, [r7, #20]
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d04a      	beq.n	8016058 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	2208      	movs	r2, #8
 8015fc8:	4413      	add	r3, r2
 8015fca:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	681a      	ldr	r2, [r3, #0]
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015fd4:	697b      	ldr	r3, [r7, #20]
 8015fd6:	685a      	ldr	r2, [r3, #4]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	1ad2      	subs	r2, r2, r3
 8015fdc:	2308      	movs	r3, #8
 8015fde:	005b      	lsls	r3, r3, #1
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	d919      	bls.n	8016018 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015fe4:	697a      	ldr	r2, [r7, #20]
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	4413      	add	r3, r2
 8015fea:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	f003 0307 	and.w	r3, r3, #7
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d004      	beq.n	8016000 <pvPortMalloc+0xe0>
 8015ff6:	22c4      	movs	r2, #196	; 0xc4
 8015ff8:	4922      	ldr	r1, [pc, #136]	; (8016084 <pvPortMalloc+0x164>)
 8015ffa:	4826      	ldr	r0, [pc, #152]	; (8016094 <pvPortMalloc+0x174>)
 8015ffc:	f7ef fb26 	bl	800564c <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	685a      	ldr	r2, [r3, #4]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	1ad2      	subs	r2, r2, r3
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801600c:	697b      	ldr	r3, [r7, #20]
 801600e:	687a      	ldr	r2, [r7, #4]
 8016010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016012:	68b8      	ldr	r0, [r7, #8]
 8016014:	f000 f906 	bl	8016224 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016018:	4b1c      	ldr	r3, [pc, #112]	; (801608c <pvPortMalloc+0x16c>)
 801601a:	681a      	ldr	r2, [r3, #0]
 801601c:	697b      	ldr	r3, [r7, #20]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	1ad3      	subs	r3, r2, r3
 8016022:	4a1a      	ldr	r2, [pc, #104]	; (801608c <pvPortMalloc+0x16c>)
 8016024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016026:	4b19      	ldr	r3, [pc, #100]	; (801608c <pvPortMalloc+0x16c>)
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	4b1b      	ldr	r3, [pc, #108]	; (8016098 <pvPortMalloc+0x178>)
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	429a      	cmp	r2, r3
 8016030:	d203      	bcs.n	801603a <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016032:	4b16      	ldr	r3, [pc, #88]	; (801608c <pvPortMalloc+0x16c>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	4a18      	ldr	r2, [pc, #96]	; (8016098 <pvPortMalloc+0x178>)
 8016038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801603a:	697b      	ldr	r3, [r7, #20]
 801603c:	685a      	ldr	r2, [r3, #4]
 801603e:	4b10      	ldr	r3, [pc, #64]	; (8016080 <pvPortMalloc+0x160>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	431a      	orrs	r2, r3
 8016044:	697b      	ldr	r3, [r7, #20]
 8016046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	2200      	movs	r2, #0
 801604c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801604e:	4b13      	ldr	r3, [pc, #76]	; (801609c <pvPortMalloc+0x17c>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	3301      	adds	r3, #1
 8016054:	4a11      	ldr	r2, [pc, #68]	; (801609c <pvPortMalloc+0x17c>)
 8016056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016058:	f7fe f904 	bl	8014264 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	f003 0307 	and.w	r3, r3, #7
 8016062:	2b00      	cmp	r3, #0
 8016064:	d005      	beq.n	8016072 <pvPortMalloc+0x152>
 8016066:	f240 1205 	movw	r2, #261	; 0x105
 801606a:	4906      	ldr	r1, [pc, #24]	; (8016084 <pvPortMalloc+0x164>)
 801606c:	480c      	ldr	r0, [pc, #48]	; (80160a0 <pvPortMalloc+0x180>)
 801606e:	f7ef faed 	bl	800564c <assertFail>
	return pvReturn;
 8016072:	68fb      	ldr	r3, [r7, #12]
}
 8016074:	4618      	mov	r0, r3
 8016076:	3718      	adds	r7, #24
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	2000c000 	.word	0x2000c000
 8016080:	2000c014 	.word	0x2000c014
 8016084:	0801c2ec 	.word	0x0801c2ec
 8016088:	0801c334 	.word	0x0801c334
 801608c:	2000c004 	.word	0x2000c004
 8016090:	2000bff8 	.word	0x2000bff8
 8016094:	0801c364 	.word	0x0801c364
 8016098:	2000c008 	.word	0x2000c008
 801609c:	2000c00c 	.word	0x2000c00c
 80160a0:	0801c3a8 	.word	0x0801c3a8

080160a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d043      	beq.n	801613e <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80160b6:	2308      	movs	r3, #8
 80160b8:	425b      	negs	r3, r3
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	4413      	add	r3, r2
 80160be:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	685a      	ldr	r2, [r3, #4]
 80160c8:	4b1f      	ldr	r3, [pc, #124]	; (8016148 <vPortFree+0xa4>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	4013      	ands	r3, r2
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d105      	bne.n	80160de <vPortFree+0x3a>
 80160d2:	f240 1219 	movw	r2, #281	; 0x119
 80160d6:	491d      	ldr	r1, [pc, #116]	; (801614c <vPortFree+0xa8>)
 80160d8:	481d      	ldr	r0, [pc, #116]	; (8016150 <vPortFree+0xac>)
 80160da:	f7ef fab7 	bl	800564c <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d005      	beq.n	80160f2 <vPortFree+0x4e>
 80160e6:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80160ea:	4918      	ldr	r1, [pc, #96]	; (801614c <vPortFree+0xa8>)
 80160ec:	4819      	ldr	r0, [pc, #100]	; (8016154 <vPortFree+0xb0>)
 80160ee:	f7ef faad 	bl	800564c <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	685a      	ldr	r2, [r3, #4]
 80160f6:	4b14      	ldr	r3, [pc, #80]	; (8016148 <vPortFree+0xa4>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	4013      	ands	r3, r2
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d01e      	beq.n	801613e <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d11a      	bne.n	801613e <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016108:	68bb      	ldr	r3, [r7, #8]
 801610a:	685a      	ldr	r2, [r3, #4]
 801610c:	4b0e      	ldr	r3, [pc, #56]	; (8016148 <vPortFree+0xa4>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	43db      	mvns	r3, r3
 8016112:	401a      	ands	r2, r3
 8016114:	68bb      	ldr	r3, [r7, #8]
 8016116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016118:	f7fe f896 	bl	8014248 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	685a      	ldr	r2, [r3, #4]
 8016120:	4b0d      	ldr	r3, [pc, #52]	; (8016158 <vPortFree+0xb4>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4413      	add	r3, r2
 8016126:	4a0c      	ldr	r2, [pc, #48]	; (8016158 <vPortFree+0xb4>)
 8016128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801612a:	68b8      	ldr	r0, [r7, #8]
 801612c:	f000 f87a 	bl	8016224 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016130:	4b0a      	ldr	r3, [pc, #40]	; (801615c <vPortFree+0xb8>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	3301      	adds	r3, #1
 8016136:	4a09      	ldr	r2, [pc, #36]	; (801615c <vPortFree+0xb8>)
 8016138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801613a:	f7fe f893 	bl	8014264 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801613e:	bf00      	nop
 8016140:	3710      	adds	r7, #16
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	2000c014 	.word	0x2000c014
 801614c:	0801c2ec 	.word	0x0801c2ec
 8016150:	0801c3f0 	.word	0x0801c3f0
 8016154:	0801c424 	.word	0x0801c424
 8016158:	2000c004 	.word	0x2000c004
 801615c:	2000c010 	.word	0x2000c010

08016160 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016160:	b480      	push	{r7}
 8016162:	b085      	sub	sp, #20
 8016164:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016166:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801616a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801616c:	4b27      	ldr	r3, [pc, #156]	; (801620c <prvHeapInit+0xac>)
 801616e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	f003 0307 	and.w	r3, r3, #7
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00c      	beq.n	8016194 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	3307      	adds	r3, #7
 801617e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	f023 0307 	bic.w	r3, r3, #7
 8016186:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016188:	68ba      	ldr	r2, [r7, #8]
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	1ad3      	subs	r3, r2, r3
 801618e:	4a1f      	ldr	r2, [pc, #124]	; (801620c <prvHeapInit+0xac>)
 8016190:	4413      	add	r3, r2
 8016192:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016198:	4a1d      	ldr	r2, [pc, #116]	; (8016210 <prvHeapInit+0xb0>)
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801619e:	4b1c      	ldr	r3, [pc, #112]	; (8016210 <prvHeapInit+0xb0>)
 80161a0:	2200      	movs	r2, #0
 80161a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	68ba      	ldr	r2, [r7, #8]
 80161a8:	4413      	add	r3, r2
 80161aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80161ac:	2208      	movs	r2, #8
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	1a9b      	subs	r3, r3, r2
 80161b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	f023 0307 	bic.w	r3, r3, #7
 80161ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	4a15      	ldr	r2, [pc, #84]	; (8016214 <prvHeapInit+0xb4>)
 80161c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80161c2:	4b14      	ldr	r3, [pc, #80]	; (8016214 <prvHeapInit+0xb4>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	2200      	movs	r2, #0
 80161c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80161ca:	4b12      	ldr	r3, [pc, #72]	; (8016214 <prvHeapInit+0xb4>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	2200      	movs	r2, #0
 80161d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80161d6:	683b      	ldr	r3, [r7, #0]
 80161d8:	68fa      	ldr	r2, [r7, #12]
 80161da:	1ad2      	subs	r2, r2, r3
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80161e0:	4b0c      	ldr	r3, [pc, #48]	; (8016214 <prvHeapInit+0xb4>)
 80161e2:	681a      	ldr	r2, [r3, #0]
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	685b      	ldr	r3, [r3, #4]
 80161ec:	4a0a      	ldr	r2, [pc, #40]	; (8016218 <prvHeapInit+0xb8>)
 80161ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	685b      	ldr	r3, [r3, #4]
 80161f4:	4a09      	ldr	r2, [pc, #36]	; (801621c <prvHeapInit+0xbc>)
 80161f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80161f8:	4b09      	ldr	r3, [pc, #36]	; (8016220 <prvHeapInit+0xc0>)
 80161fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80161fe:	601a      	str	r2, [r3, #0]
}
 8016200:	bf00      	nop
 8016202:	3714      	adds	r7, #20
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr
 801620c:	200083f8 	.word	0x200083f8
 8016210:	2000bff8 	.word	0x2000bff8
 8016214:	2000c000 	.word	0x2000c000
 8016218:	2000c008 	.word	0x2000c008
 801621c:	2000c004 	.word	0x2000c004
 8016220:	2000c014 	.word	0x2000c014

08016224 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016224:	b480      	push	{r7}
 8016226:	b085      	sub	sp, #20
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801622c:	4b28      	ldr	r3, [pc, #160]	; (80162d0 <prvInsertBlockIntoFreeList+0xac>)
 801622e:	60fb      	str	r3, [r7, #12]
 8016230:	e002      	b.n	8016238 <prvInsertBlockIntoFreeList+0x14>
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	60fb      	str	r3, [r7, #12]
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	687a      	ldr	r2, [r7, #4]
 801623e:	429a      	cmp	r2, r3
 8016240:	d8f7      	bhi.n	8016232 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	685b      	ldr	r3, [r3, #4]
 801624a:	68ba      	ldr	r2, [r7, #8]
 801624c:	4413      	add	r3, r2
 801624e:	687a      	ldr	r2, [r7, #4]
 8016250:	429a      	cmp	r2, r3
 8016252:	d108      	bne.n	8016266 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	685a      	ldr	r2, [r3, #4]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	685b      	ldr	r3, [r3, #4]
 801625c:	441a      	add	r2, r3
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	685b      	ldr	r3, [r3, #4]
 801626e:	68ba      	ldr	r2, [r7, #8]
 8016270:	441a      	add	r2, r3
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	429a      	cmp	r2, r3
 8016278:	d118      	bne.n	80162ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	681a      	ldr	r2, [r3, #0]
 801627e:	4b15      	ldr	r3, [pc, #84]	; (80162d4 <prvInsertBlockIntoFreeList+0xb0>)
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	429a      	cmp	r2, r3
 8016284:	d00d      	beq.n	80162a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	685a      	ldr	r2, [r3, #4]
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	441a      	add	r2, r3
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	681a      	ldr	r2, [r3, #0]
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	601a      	str	r2, [r3, #0]
 80162a0:	e008      	b.n	80162b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80162a2:	4b0c      	ldr	r3, [pc, #48]	; (80162d4 <prvInsertBlockIntoFreeList+0xb0>)
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	601a      	str	r2, [r3, #0]
 80162aa:	e003      	b.n	80162b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	681a      	ldr	r2, [r3, #0]
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80162b4:	68fa      	ldr	r2, [r7, #12]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	429a      	cmp	r2, r3
 80162ba:	d002      	beq.n	80162c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162c2:	bf00      	nop
 80162c4:	3714      	adds	r7, #20
 80162c6:	46bd      	mov	sp, r7
 80162c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162cc:	4770      	bx	lr
 80162ce:	bf00      	nop
 80162d0:	2000bff8 	.word	0x2000bff8
 80162d4:	2000c000 	.word	0x2000c000

080162d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80162d8:	b580      	push	{r7, lr}
 80162da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80162dc:	2200      	movs	r2, #0
 80162de:	4912      	ldr	r1, [pc, #72]	; (8016328 <MX_USB_DEVICE_Init+0x50>)
 80162e0:	4812      	ldr	r0, [pc, #72]	; (801632c <MX_USB_DEVICE_Init+0x54>)
 80162e2:	f7fb fa15 	bl	8011710 <USBD_Init>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d001      	beq.n	80162f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80162ec:	f7f3 f84a 	bl	8009384 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80162f0:	490f      	ldr	r1, [pc, #60]	; (8016330 <MX_USB_DEVICE_Init+0x58>)
 80162f2:	480e      	ldr	r0, [pc, #56]	; (801632c <MX_USB_DEVICE_Init+0x54>)
 80162f4:	f7fb fa3c 	bl	8011770 <USBD_RegisterClass>
 80162f8:	4603      	mov	r3, r0
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d001      	beq.n	8016302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80162fe:	f7f3 f841 	bl	8009384 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016302:	490c      	ldr	r1, [pc, #48]	; (8016334 <MX_USB_DEVICE_Init+0x5c>)
 8016304:	4809      	ldr	r0, [pc, #36]	; (801632c <MX_USB_DEVICE_Init+0x54>)
 8016306:	f7fb f973 	bl	80115f0 <USBD_CDC_RegisterInterface>
 801630a:	4603      	mov	r3, r0
 801630c:	2b00      	cmp	r3, #0
 801630e:	d001      	beq.n	8016314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016310:	f7f3 f838 	bl	8009384 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016314:	4805      	ldr	r0, [pc, #20]	; (801632c <MX_USB_DEVICE_Init+0x54>)
 8016316:	f7fb fa61 	bl	80117dc <USBD_Start>
 801631a:	4603      	mov	r3, r0
 801631c:	2b00      	cmp	r3, #0
 801631e:	d001      	beq.n	8016324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016320:	f7f3 f830 	bl	8009384 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016324:	bf00      	nop
 8016326:	bd80      	pop	{r7, pc}
 8016328:	20000404 	.word	0x20000404
 801632c:	2000c018 	.word	0x2000c018
 8016330:	2000036c 	.word	0x2000036c
 8016334:	200003f0 	.word	0x200003f0

08016338 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801633c:	2200      	movs	r2, #0
 801633e:	4905      	ldr	r1, [pc, #20]	; (8016354 <CDC_Init_FS+0x1c>)
 8016340:	4805      	ldr	r0, [pc, #20]	; (8016358 <CDC_Init_FS+0x20>)
 8016342:	f7fb f96f 	bl	8011624 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016346:	4905      	ldr	r1, [pc, #20]	; (801635c <CDC_Init_FS+0x24>)
 8016348:	4803      	ldr	r0, [pc, #12]	; (8016358 <CDC_Init_FS+0x20>)
 801634a:	f7fb f98d 	bl	8011668 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801634e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016350:	4618      	mov	r0, r3
 8016352:	bd80      	pop	{r7, pc}
 8016354:	2000caf4 	.word	0x2000caf4
 8016358:	2000c018 	.word	0x2000c018
 801635c:	2000c2f4 	.word	0x2000c2f4

08016360 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016360:	b480      	push	{r7}
 8016362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016364:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016366:	4618      	mov	r0, r3
 8016368:	46bd      	mov	sp, r7
 801636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636e:	4770      	bx	lr

08016370 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016370:	b480      	push	{r7}
 8016372:	b083      	sub	sp, #12
 8016374:	af00      	add	r7, sp, #0
 8016376:	4603      	mov	r3, r0
 8016378:	6039      	str	r1, [r7, #0]
 801637a:	71fb      	strb	r3, [r7, #7]
 801637c:	4613      	mov	r3, r2
 801637e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016380:	79fb      	ldrb	r3, [r7, #7]
 8016382:	2b23      	cmp	r3, #35	; 0x23
 8016384:	d84a      	bhi.n	801641c <CDC_Control_FS+0xac>
 8016386:	a201      	add	r2, pc, #4	; (adr r2, 801638c <CDC_Control_FS+0x1c>)
 8016388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801638c:	0801641d 	.word	0x0801641d
 8016390:	0801641d 	.word	0x0801641d
 8016394:	0801641d 	.word	0x0801641d
 8016398:	0801641d 	.word	0x0801641d
 801639c:	0801641d 	.word	0x0801641d
 80163a0:	0801641d 	.word	0x0801641d
 80163a4:	0801641d 	.word	0x0801641d
 80163a8:	0801641d 	.word	0x0801641d
 80163ac:	0801641d 	.word	0x0801641d
 80163b0:	0801641d 	.word	0x0801641d
 80163b4:	0801641d 	.word	0x0801641d
 80163b8:	0801641d 	.word	0x0801641d
 80163bc:	0801641d 	.word	0x0801641d
 80163c0:	0801641d 	.word	0x0801641d
 80163c4:	0801641d 	.word	0x0801641d
 80163c8:	0801641d 	.word	0x0801641d
 80163cc:	0801641d 	.word	0x0801641d
 80163d0:	0801641d 	.word	0x0801641d
 80163d4:	0801641d 	.word	0x0801641d
 80163d8:	0801641d 	.word	0x0801641d
 80163dc:	0801641d 	.word	0x0801641d
 80163e0:	0801641d 	.word	0x0801641d
 80163e4:	0801641d 	.word	0x0801641d
 80163e8:	0801641d 	.word	0x0801641d
 80163ec:	0801641d 	.word	0x0801641d
 80163f0:	0801641d 	.word	0x0801641d
 80163f4:	0801641d 	.word	0x0801641d
 80163f8:	0801641d 	.word	0x0801641d
 80163fc:	0801641d 	.word	0x0801641d
 8016400:	0801641d 	.word	0x0801641d
 8016404:	0801641d 	.word	0x0801641d
 8016408:	0801641d 	.word	0x0801641d
 801640c:	0801641d 	.word	0x0801641d
 8016410:	0801641d 	.word	0x0801641d
 8016414:	0801641d 	.word	0x0801641d
 8016418:	0801641d 	.word	0x0801641d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801641c:	bf00      	nop
  }

  return (USBD_OK);
 801641e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016420:	4618      	mov	r0, r3
 8016422:	370c      	adds	r7, #12
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr

0801642c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016436:	6879      	ldr	r1, [r7, #4]
 8016438:	4805      	ldr	r0, [pc, #20]	; (8016450 <CDC_Receive_FS+0x24>)
 801643a:	f7fb f915 	bl	8011668 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801643e:	4804      	ldr	r0, [pc, #16]	; (8016450 <CDC_Receive_FS+0x24>)
 8016440:	f7fb f930 	bl	80116a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016444:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016446:	4618      	mov	r0, r3
 8016448:	3708      	adds	r7, #8
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	2000c018 	.word	0x2000c018

08016454 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016454:	b480      	push	{r7}
 8016456:	b087      	sub	sp, #28
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	4613      	mov	r3, r2
 8016460:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016462:	2300      	movs	r3, #0
 8016464:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801646a:	4618      	mov	r0, r3
 801646c:	371c      	adds	r7, #28
 801646e:	46bd      	mov	sp, r7
 8016470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016474:	4770      	bx	lr
	...

08016478 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016478:	b480      	push	{r7}
 801647a:	b083      	sub	sp, #12
 801647c:	af00      	add	r7, sp, #0
 801647e:	4603      	mov	r3, r0
 8016480:	6039      	str	r1, [r7, #0]
 8016482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	2212      	movs	r2, #18
 8016488:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801648a:	4b03      	ldr	r3, [pc, #12]	; (8016498 <USBD_FS_DeviceDescriptor+0x20>)
}
 801648c:	4618      	mov	r0, r3
 801648e:	370c      	adds	r7, #12
 8016490:	46bd      	mov	sp, r7
 8016492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016496:	4770      	bx	lr
 8016498:	20000420 	.word	0x20000420

0801649c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801649c:	b480      	push	{r7}
 801649e:	b083      	sub	sp, #12
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	4603      	mov	r3, r0
 80164a4:	6039      	str	r1, [r7, #0]
 80164a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	2204      	movs	r2, #4
 80164ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80164ae:	4b03      	ldr	r3, [pc, #12]	; (80164bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	370c      	adds	r7, #12
 80164b4:	46bd      	mov	sp, r7
 80164b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ba:	4770      	bx	lr
 80164bc:	20000434 	.word	0x20000434

080164c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b082      	sub	sp, #8
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	4603      	mov	r3, r0
 80164c8:	6039      	str	r1, [r7, #0]
 80164ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80164cc:	79fb      	ldrb	r3, [r7, #7]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d105      	bne.n	80164de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80164d2:	683a      	ldr	r2, [r7, #0]
 80164d4:	4907      	ldr	r1, [pc, #28]	; (80164f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80164d6:	4808      	ldr	r0, [pc, #32]	; (80164f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80164d8:	f7fc fb32 	bl	8012b40 <USBD_GetString>
 80164dc:	e004      	b.n	80164e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80164de:	683a      	ldr	r2, [r7, #0]
 80164e0:	4904      	ldr	r1, [pc, #16]	; (80164f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80164e2:	4805      	ldr	r0, [pc, #20]	; (80164f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80164e4:	f7fc fb2c 	bl	8012b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 80164e8:	4b02      	ldr	r3, [pc, #8]	; (80164f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3708      	adds	r7, #8
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	2000d2f4 	.word	0x2000d2f4
 80164f8:	0801c444 	.word	0x0801c444

080164fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b082      	sub	sp, #8
 8016500:	af00      	add	r7, sp, #0
 8016502:	4603      	mov	r3, r0
 8016504:	6039      	str	r1, [r7, #0]
 8016506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016508:	683a      	ldr	r2, [r7, #0]
 801650a:	4904      	ldr	r1, [pc, #16]	; (801651c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801650c:	4804      	ldr	r0, [pc, #16]	; (8016520 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801650e:	f7fc fb17 	bl	8012b40 <USBD_GetString>
  return USBD_StrDesc;
 8016512:	4b02      	ldr	r3, [pc, #8]	; (801651c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016514:	4618      	mov	r0, r3
 8016516:	3708      	adds	r7, #8
 8016518:	46bd      	mov	sp, r7
 801651a:	bd80      	pop	{r7, pc}
 801651c:	2000d2f4 	.word	0x2000d2f4
 8016520:	0801c45c 	.word	0x0801c45c

08016524 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	4603      	mov	r3, r0
 801652c:	6039      	str	r1, [r7, #0]
 801652e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	221a      	movs	r2, #26
 8016534:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016536:	f000 f843 	bl	80165c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801653a:	4b02      	ldr	r3, [pc, #8]	; (8016544 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801653c:	4618      	mov	r0, r3
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	20000438 	.word	0x20000438

08016548 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	4603      	mov	r3, r0
 8016550:	6039      	str	r1, [r7, #0]
 8016552:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016554:	79fb      	ldrb	r3, [r7, #7]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d105      	bne.n	8016566 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801655a:	683a      	ldr	r2, [r7, #0]
 801655c:	4907      	ldr	r1, [pc, #28]	; (801657c <USBD_FS_ConfigStrDescriptor+0x34>)
 801655e:	4808      	ldr	r0, [pc, #32]	; (8016580 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016560:	f7fc faee 	bl	8012b40 <USBD_GetString>
 8016564:	e004      	b.n	8016570 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016566:	683a      	ldr	r2, [r7, #0]
 8016568:	4904      	ldr	r1, [pc, #16]	; (801657c <USBD_FS_ConfigStrDescriptor+0x34>)
 801656a:	4805      	ldr	r0, [pc, #20]	; (8016580 <USBD_FS_ConfigStrDescriptor+0x38>)
 801656c:	f7fc fae8 	bl	8012b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016570:	4b02      	ldr	r3, [pc, #8]	; (801657c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016572:	4618      	mov	r0, r3
 8016574:	3708      	adds	r7, #8
 8016576:	46bd      	mov	sp, r7
 8016578:	bd80      	pop	{r7, pc}
 801657a:	bf00      	nop
 801657c:	2000d2f4 	.word	0x2000d2f4
 8016580:	0801c470 	.word	0x0801c470

08016584 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016584:	b580      	push	{r7, lr}
 8016586:	b082      	sub	sp, #8
 8016588:	af00      	add	r7, sp, #0
 801658a:	4603      	mov	r3, r0
 801658c:	6039      	str	r1, [r7, #0]
 801658e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016590:	79fb      	ldrb	r3, [r7, #7]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d105      	bne.n	80165a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016596:	683a      	ldr	r2, [r7, #0]
 8016598:	4907      	ldr	r1, [pc, #28]	; (80165b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801659a:	4808      	ldr	r0, [pc, #32]	; (80165bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801659c:	f7fc fad0 	bl	8012b40 <USBD_GetString>
 80165a0:	e004      	b.n	80165ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80165a2:	683a      	ldr	r2, [r7, #0]
 80165a4:	4904      	ldr	r1, [pc, #16]	; (80165b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80165a6:	4805      	ldr	r0, [pc, #20]	; (80165bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80165a8:	f7fc faca 	bl	8012b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 80165ac:	4b02      	ldr	r3, [pc, #8]	; (80165b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3708      	adds	r7, #8
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}
 80165b6:	bf00      	nop
 80165b8:	2000d2f4 	.word	0x2000d2f4
 80165bc:	0801c47c 	.word	0x0801c47c

080165c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b084      	sub	sp, #16
 80165c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80165c6:	4b0f      	ldr	r3, [pc, #60]	; (8016604 <Get_SerialNum+0x44>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80165cc:	4b0e      	ldr	r3, [pc, #56]	; (8016608 <Get_SerialNum+0x48>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80165d2:	4b0e      	ldr	r3, [pc, #56]	; (801660c <Get_SerialNum+0x4c>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80165d8:	68fa      	ldr	r2, [r7, #12]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	4413      	add	r3, r2
 80165de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d009      	beq.n	80165fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80165e6:	2208      	movs	r2, #8
 80165e8:	4909      	ldr	r1, [pc, #36]	; (8016610 <Get_SerialNum+0x50>)
 80165ea:	68f8      	ldr	r0, [r7, #12]
 80165ec:	f000 f814 	bl	8016618 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80165f0:	2204      	movs	r2, #4
 80165f2:	4908      	ldr	r1, [pc, #32]	; (8016614 <Get_SerialNum+0x54>)
 80165f4:	68b8      	ldr	r0, [r7, #8]
 80165f6:	f000 f80f 	bl	8016618 <IntToUnicode>
  }
}
 80165fa:	bf00      	nop
 80165fc:	3710      	adds	r7, #16
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	1fff7a10 	.word	0x1fff7a10
 8016608:	1fff7a14 	.word	0x1fff7a14
 801660c:	1fff7a18 	.word	0x1fff7a18
 8016610:	2000043a 	.word	0x2000043a
 8016614:	2000044a 	.word	0x2000044a

08016618 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016618:	b480      	push	{r7}
 801661a:	b087      	sub	sp, #28
 801661c:	af00      	add	r7, sp, #0
 801661e:	60f8      	str	r0, [r7, #12]
 8016620:	60b9      	str	r1, [r7, #8]
 8016622:	4613      	mov	r3, r2
 8016624:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016626:	2300      	movs	r3, #0
 8016628:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801662a:	2300      	movs	r3, #0
 801662c:	75fb      	strb	r3, [r7, #23]
 801662e:	e027      	b.n	8016680 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	0f1b      	lsrs	r3, r3, #28
 8016634:	2b09      	cmp	r3, #9
 8016636:	d80b      	bhi.n	8016650 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	0f1b      	lsrs	r3, r3, #28
 801663c:	b2da      	uxtb	r2, r3
 801663e:	7dfb      	ldrb	r3, [r7, #23]
 8016640:	005b      	lsls	r3, r3, #1
 8016642:	4619      	mov	r1, r3
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	440b      	add	r3, r1
 8016648:	3230      	adds	r2, #48	; 0x30
 801664a:	b2d2      	uxtb	r2, r2
 801664c:	701a      	strb	r2, [r3, #0]
 801664e:	e00a      	b.n	8016666 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	0f1b      	lsrs	r3, r3, #28
 8016654:	b2da      	uxtb	r2, r3
 8016656:	7dfb      	ldrb	r3, [r7, #23]
 8016658:	005b      	lsls	r3, r3, #1
 801665a:	4619      	mov	r1, r3
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	440b      	add	r3, r1
 8016660:	3237      	adds	r2, #55	; 0x37
 8016662:	b2d2      	uxtb	r2, r2
 8016664:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	011b      	lsls	r3, r3, #4
 801666a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801666c:	7dfb      	ldrb	r3, [r7, #23]
 801666e:	005b      	lsls	r3, r3, #1
 8016670:	3301      	adds	r3, #1
 8016672:	68ba      	ldr	r2, [r7, #8]
 8016674:	4413      	add	r3, r2
 8016676:	2200      	movs	r2, #0
 8016678:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801667a:	7dfb      	ldrb	r3, [r7, #23]
 801667c:	3301      	adds	r3, #1
 801667e:	75fb      	strb	r3, [r7, #23]
 8016680:	7dfa      	ldrb	r2, [r7, #23]
 8016682:	79fb      	ldrb	r3, [r7, #7]
 8016684:	429a      	cmp	r2, r3
 8016686:	d3d3      	bcc.n	8016630 <IntToUnicode+0x18>
  }
}
 8016688:	bf00      	nop
 801668a:	bf00      	nop
 801668c:	371c      	adds	r7, #28
 801668e:	46bd      	mov	sp, r7
 8016690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016694:	4770      	bx	lr
	...

08016698 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b08a      	sub	sp, #40	; 0x28
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80166a0:	f107 0314 	add.w	r3, r7, #20
 80166a4:	2200      	movs	r2, #0
 80166a6:	601a      	str	r2, [r3, #0]
 80166a8:	605a      	str	r2, [r3, #4]
 80166aa:	609a      	str	r2, [r3, #8]
 80166ac:	60da      	str	r2, [r3, #12]
 80166ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80166b8:	d13a      	bne.n	8016730 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80166ba:	2300      	movs	r3, #0
 80166bc:	613b      	str	r3, [r7, #16]
 80166be:	4b1e      	ldr	r3, [pc, #120]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 80166c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166c2:	4a1d      	ldr	r2, [pc, #116]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 80166c4:	f043 0301 	orr.w	r3, r3, #1
 80166c8:	6313      	str	r3, [r2, #48]	; 0x30
 80166ca:	4b1b      	ldr	r3, [pc, #108]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 80166cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80166ce:	f003 0301 	and.w	r3, r3, #1
 80166d2:	613b      	str	r3, [r7, #16]
 80166d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80166d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80166da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80166dc:	2302      	movs	r3, #2
 80166de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80166e0:	2300      	movs	r3, #0
 80166e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80166e4:	2303      	movs	r3, #3
 80166e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80166e8:	230a      	movs	r3, #10
 80166ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80166ec:	f107 0314 	add.w	r3, r7, #20
 80166f0:	4619      	mov	r1, r3
 80166f2:	4812      	ldr	r0, [pc, #72]	; (801673c <HAL_PCD_MspInit+0xa4>)
 80166f4:	f7f4 fc1e 	bl	800af34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80166f8:	4b0f      	ldr	r3, [pc, #60]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 80166fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80166fc:	4a0e      	ldr	r2, [pc, #56]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 80166fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016702:	6353      	str	r3, [r2, #52]	; 0x34
 8016704:	2300      	movs	r3, #0
 8016706:	60fb      	str	r3, [r7, #12]
 8016708:	4b0b      	ldr	r3, [pc, #44]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 801670a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801670c:	4a0a      	ldr	r2, [pc, #40]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 801670e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016712:	6453      	str	r3, [r2, #68]	; 0x44
 8016714:	4b08      	ldr	r3, [pc, #32]	; (8016738 <HAL_PCD_MspInit+0xa0>)
 8016716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801671c:	60fb      	str	r3, [r7, #12]
 801671e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016720:	2200      	movs	r2, #0
 8016722:	2105      	movs	r1, #5
 8016724:	2043      	movs	r0, #67	; 0x43
 8016726:	f7f3 ffbe 	bl	800a6a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801672a:	2043      	movs	r0, #67	; 0x43
 801672c:	f7f3 ffd7 	bl	800a6de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016730:	bf00      	nop
 8016732:	3728      	adds	r7, #40	; 0x28
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}
 8016738:	40023800 	.word	0x40023800
 801673c:	40020000 	.word	0x40020000

08016740 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8016754:	4619      	mov	r1, r3
 8016756:	4610      	mov	r0, r2
 8016758:	f7fb f88d 	bl	8011876 <USBD_LL_SetupStage>
}
 801675c:	bf00      	nop
 801675e:	3708      	adds	r7, #8
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	460b      	mov	r3, r1
 801676e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8016776:	78fa      	ldrb	r2, [r7, #3]
 8016778:	6879      	ldr	r1, [r7, #4]
 801677a:	4613      	mov	r3, r2
 801677c:	00db      	lsls	r3, r3, #3
 801677e:	4413      	add	r3, r2
 8016780:	009b      	lsls	r3, r3, #2
 8016782:	440b      	add	r3, r1
 8016784:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016788:	681a      	ldr	r2, [r3, #0]
 801678a:	78fb      	ldrb	r3, [r7, #3]
 801678c:	4619      	mov	r1, r3
 801678e:	f7fb f8c7 	bl	8011920 <USBD_LL_DataOutStage>
}
 8016792:	bf00      	nop
 8016794:	3708      	adds	r7, #8
 8016796:	46bd      	mov	sp, r7
 8016798:	bd80      	pop	{r7, pc}

0801679a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801679a:	b580      	push	{r7, lr}
 801679c:	b082      	sub	sp, #8
 801679e:	af00      	add	r7, sp, #0
 80167a0:	6078      	str	r0, [r7, #4]
 80167a2:	460b      	mov	r3, r1
 80167a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80167ac:	78fa      	ldrb	r2, [r7, #3]
 80167ae:	6879      	ldr	r1, [r7, #4]
 80167b0:	4613      	mov	r3, r2
 80167b2:	00db      	lsls	r3, r3, #3
 80167b4:	4413      	add	r3, r2
 80167b6:	009b      	lsls	r3, r3, #2
 80167b8:	440b      	add	r3, r1
 80167ba:	3320      	adds	r3, #32
 80167bc:	681a      	ldr	r2, [r3, #0]
 80167be:	78fb      	ldrb	r3, [r7, #3]
 80167c0:	4619      	mov	r1, r3
 80167c2:	f7fb f960 	bl	8011a86 <USBD_LL_DataInStage>
}
 80167c6:	bf00      	nop
 80167c8:	3708      	adds	r7, #8
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}

080167ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ce:	b580      	push	{r7, lr}
 80167d0:	b082      	sub	sp, #8
 80167d2:	af00      	add	r7, sp, #0
 80167d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80167dc:	4618      	mov	r0, r3
 80167de:	f7fb fa9a 	bl	8011d16 <USBD_LL_SOF>
}
 80167e2:	bf00      	nop
 80167e4:	3708      	adds	r7, #8
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}

080167ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80167ea:	b580      	push	{r7, lr}
 80167ec:	b084      	sub	sp, #16
 80167ee:	af00      	add	r7, sp, #0
 80167f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80167f2:	2301      	movs	r3, #1
 80167f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	79db      	ldrb	r3, [r3, #7]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d102      	bne.n	8016804 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80167fe:	2300      	movs	r3, #0
 8016800:	73fb      	strb	r3, [r7, #15]
 8016802:	e008      	b.n	8016816 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	79db      	ldrb	r3, [r3, #7]
 8016808:	2b02      	cmp	r3, #2
 801680a:	d102      	bne.n	8016812 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801680c:	2301      	movs	r3, #1
 801680e:	73fb      	strb	r3, [r7, #15]
 8016810:	e001      	b.n	8016816 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016812:	f7f2 fdb7 	bl	8009384 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801681c:	7bfa      	ldrb	r2, [r7, #15]
 801681e:	4611      	mov	r1, r2
 8016820:	4618      	mov	r0, r3
 8016822:	f7fb fa34 	bl	8011c8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801682c:	4618      	mov	r0, r3
 801682e:	f7fb f9dc 	bl	8011bea <USBD_LL_Reset>
}
 8016832:	bf00      	nop
 8016834:	3710      	adds	r7, #16
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}
	...

0801683c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b082      	sub	sp, #8
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801684a:	4618      	mov	r0, r3
 801684c:	f7fb fa2f 	bl	8011cae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	687a      	ldr	r2, [r7, #4]
 801685c:	6812      	ldr	r2, [r2, #0]
 801685e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016862:	f043 0301 	orr.w	r3, r3, #1
 8016866:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	7adb      	ldrb	r3, [r3, #11]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d005      	beq.n	801687c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016870:	4b04      	ldr	r3, [pc, #16]	; (8016884 <HAL_PCD_SuspendCallback+0x48>)
 8016872:	691b      	ldr	r3, [r3, #16]
 8016874:	4a03      	ldr	r2, [pc, #12]	; (8016884 <HAL_PCD_SuspendCallback+0x48>)
 8016876:	f043 0306 	orr.w	r3, r3, #6
 801687a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801687c:	bf00      	nop
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	e000ed00 	.word	0xe000ed00

08016888 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016896:	4618      	mov	r0, r3
 8016898:	f7fb fa25 	bl	8011ce6 <USBD_LL_Resume>
}
 801689c:	bf00      	nop
 801689e:	3708      	adds	r7, #8
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}

080168a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
 80168ac:	460b      	mov	r3, r1
 80168ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80168b6:	78fa      	ldrb	r2, [r7, #3]
 80168b8:	4611      	mov	r1, r2
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fb fa7d 	bl	8011dba <USBD_LL_IsoOUTIncomplete>
}
 80168c0:	bf00      	nop
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	460b      	mov	r3, r1
 80168d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80168da:	78fa      	ldrb	r2, [r7, #3]
 80168dc:	4611      	mov	r1, r2
 80168de:	4618      	mov	r0, r3
 80168e0:	f7fb fa39 	bl	8011d56 <USBD_LL_IsoINIncomplete>
}
 80168e4:	bf00      	nop
 80168e6:	3708      	adds	r7, #8
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7fb fa8f 	bl	8011e1e <USBD_LL_DevConnected>
}
 8016900:	bf00      	nop
 8016902:	3708      	adds	r7, #8
 8016904:	46bd      	mov	sp, r7
 8016906:	bd80      	pop	{r7, pc}

08016908 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8016916:	4618      	mov	r0, r3
 8016918:	f7fb fa8c 	bl	8011e34 <USBD_LL_DevDisconnected>
}
 801691c:	bf00      	nop
 801691e:	3708      	adds	r7, #8
 8016920:	46bd      	mov	sp, r7
 8016922:	bd80      	pop	{r7, pc}

08016924 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	781b      	ldrb	r3, [r3, #0]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d13c      	bne.n	80169ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016934:	4a20      	ldr	r2, [pc, #128]	; (80169b8 <USBD_LL_Init+0x94>)
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	4a1e      	ldr	r2, [pc, #120]	; (80169b8 <USBD_LL_Init+0x94>)
 8016940:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016944:	4b1c      	ldr	r3, [pc, #112]	; (80169b8 <USBD_LL_Init+0x94>)
 8016946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801694a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801694c:	4b1a      	ldr	r3, [pc, #104]	; (80169b8 <USBD_LL_Init+0x94>)
 801694e:	2204      	movs	r2, #4
 8016950:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016952:	4b19      	ldr	r3, [pc, #100]	; (80169b8 <USBD_LL_Init+0x94>)
 8016954:	2202      	movs	r2, #2
 8016956:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016958:	4b17      	ldr	r3, [pc, #92]	; (80169b8 <USBD_LL_Init+0x94>)
 801695a:	2200      	movs	r2, #0
 801695c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801695e:	4b16      	ldr	r3, [pc, #88]	; (80169b8 <USBD_LL_Init+0x94>)
 8016960:	2202      	movs	r2, #2
 8016962:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016964:	4b14      	ldr	r3, [pc, #80]	; (80169b8 <USBD_LL_Init+0x94>)
 8016966:	2200      	movs	r2, #0
 8016968:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801696a:	4b13      	ldr	r3, [pc, #76]	; (80169b8 <USBD_LL_Init+0x94>)
 801696c:	2200      	movs	r2, #0
 801696e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016970:	4b11      	ldr	r3, [pc, #68]	; (80169b8 <USBD_LL_Init+0x94>)
 8016972:	2200      	movs	r2, #0
 8016974:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016976:	4b10      	ldr	r3, [pc, #64]	; (80169b8 <USBD_LL_Init+0x94>)
 8016978:	2200      	movs	r2, #0
 801697a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801697c:	4b0e      	ldr	r3, [pc, #56]	; (80169b8 <USBD_LL_Init+0x94>)
 801697e:	2200      	movs	r2, #0
 8016980:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016982:	480d      	ldr	r0, [pc, #52]	; (80169b8 <USBD_LL_Init+0x94>)
 8016984:	f7f4 fc8b 	bl	800b29e <HAL_PCD_Init>
 8016988:	4603      	mov	r3, r0
 801698a:	2b00      	cmp	r3, #0
 801698c:	d001      	beq.n	8016992 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801698e:	f7f2 fcf9 	bl	8009384 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016992:	2180      	movs	r1, #128	; 0x80
 8016994:	4808      	ldr	r0, [pc, #32]	; (80169b8 <USBD_LL_Init+0x94>)
 8016996:	f7f5 feb6 	bl	800c706 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801699a:	2240      	movs	r2, #64	; 0x40
 801699c:	2100      	movs	r1, #0
 801699e:	4806      	ldr	r0, [pc, #24]	; (80169b8 <USBD_LL_Init+0x94>)
 80169a0:	f7f5 fe6a 	bl	800c678 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80169a4:	2280      	movs	r2, #128	; 0x80
 80169a6:	2101      	movs	r1, #1
 80169a8:	4803      	ldr	r0, [pc, #12]	; (80169b8 <USBD_LL_Init+0x94>)
 80169aa:	f7f5 fe65 	bl	800c678 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80169ae:	2300      	movs	r3, #0
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	3708      	adds	r7, #8
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	2000d4f4 	.word	0x2000d4f4

080169bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b084      	sub	sp, #16
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80169c4:	2300      	movs	r3, #0
 80169c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80169c8:	2300      	movs	r3, #0
 80169ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7f4 fd72 	bl	800b4bc <HAL_PCD_Start>
 80169d8:	4603      	mov	r3, r0
 80169da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80169dc:	7bfb      	ldrb	r3, [r7, #15]
 80169de:	4618      	mov	r0, r3
 80169e0:	f000 f942 	bl	8016c68 <USBD_Get_USB_Status>
 80169e4:	4603      	mov	r3, r0
 80169e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3710      	adds	r7, #16
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}

080169f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80169f2:	b580      	push	{r7, lr}
 80169f4:	b084      	sub	sp, #16
 80169f6:	af00      	add	r7, sp, #0
 80169f8:	6078      	str	r0, [r7, #4]
 80169fa:	4608      	mov	r0, r1
 80169fc:	4611      	mov	r1, r2
 80169fe:	461a      	mov	r2, r3
 8016a00:	4603      	mov	r3, r0
 8016a02:	70fb      	strb	r3, [r7, #3]
 8016a04:	460b      	mov	r3, r1
 8016a06:	70bb      	strb	r3, [r7, #2]
 8016a08:	4613      	mov	r3, r2
 8016a0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a10:	2300      	movs	r3, #0
 8016a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016a1a:	78bb      	ldrb	r3, [r7, #2]
 8016a1c:	883a      	ldrh	r2, [r7, #0]
 8016a1e:	78f9      	ldrb	r1, [r7, #3]
 8016a20:	f7f5 fa46 	bl	800beb0 <HAL_PCD_EP_Open>
 8016a24:	4603      	mov	r3, r0
 8016a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a28:	7bfb      	ldrb	r3, [r7, #15]
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f000 f91c 	bl	8016c68 <USBD_Get_USB_Status>
 8016a30:	4603      	mov	r3, r0
 8016a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	3710      	adds	r7, #16
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}

08016a3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a3e:	b580      	push	{r7, lr}
 8016a40:	b084      	sub	sp, #16
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
 8016a46:	460b      	mov	r3, r1
 8016a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a58:	78fa      	ldrb	r2, [r7, #3]
 8016a5a:	4611      	mov	r1, r2
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7f5 fa8f 	bl	800bf80 <HAL_PCD_EP_Close>
 8016a62:	4603      	mov	r3, r0
 8016a64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a66:	7bfb      	ldrb	r3, [r7, #15]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f000 f8fd 	bl	8016c68 <USBD_Get_USB_Status>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a72:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3710      	adds	r7, #16
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}

08016a7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	b084      	sub	sp, #16
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
 8016a84:	460b      	mov	r3, r1
 8016a86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016a96:	78fa      	ldrb	r2, [r7, #3]
 8016a98:	4611      	mov	r1, r2
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f7f5 fb47 	bl	800c12e <HAL_PCD_EP_SetStall>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016aa4:	7bfb      	ldrb	r3, [r7, #15]
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f000 f8de 	bl	8016c68 <USBD_Get_USB_Status>
 8016aac:	4603      	mov	r3, r0
 8016aae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016ab0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	3710      	adds	r7, #16
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b084      	sub	sp, #16
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	6078      	str	r0, [r7, #4]
 8016ac2:	460b      	mov	r3, r1
 8016ac4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016aca:	2300      	movs	r3, #0
 8016acc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ad4:	78fa      	ldrb	r2, [r7, #3]
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7f5 fb8b 	bl	800c1f4 <HAL_PCD_EP_ClrStall>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ae2:	7bfb      	ldrb	r3, [r7, #15]
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f000 f8bf 	bl	8016c68 <USBD_Get_USB_Status>
 8016aea:	4603      	mov	r3, r0
 8016aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8016af0:	4618      	mov	r0, r3
 8016af2:	3710      	adds	r7, #16
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}

08016af8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016af8:	b480      	push	{r7}
 8016afa:	b085      	sub	sp, #20
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	460b      	mov	r3, r1
 8016b02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016b0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	da0b      	bge.n	8016b2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016b14:	78fb      	ldrb	r3, [r7, #3]
 8016b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b1a:	68f9      	ldr	r1, [r7, #12]
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	4413      	add	r3, r2
 8016b22:	009b      	lsls	r3, r3, #2
 8016b24:	440b      	add	r3, r1
 8016b26:	3316      	adds	r3, #22
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	e00b      	b.n	8016b44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016b2c:	78fb      	ldrb	r3, [r7, #3]
 8016b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016b32:	68f9      	ldr	r1, [r7, #12]
 8016b34:	4613      	mov	r3, r2
 8016b36:	00db      	lsls	r3, r3, #3
 8016b38:	4413      	add	r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	440b      	add	r3, r1
 8016b3e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8016b42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016b44:	4618      	mov	r0, r3
 8016b46:	3714      	adds	r7, #20
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4e:	4770      	bx	lr

08016b50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b084      	sub	sp, #16
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	6078      	str	r0, [r7, #4]
 8016b58:	460b      	mov	r3, r1
 8016b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b60:	2300      	movs	r3, #0
 8016b62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016b6a:	78fa      	ldrb	r2, [r7, #3]
 8016b6c:	4611      	mov	r1, r2
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7f5 f97a 	bl	800be68 <HAL_PCD_SetAddress>
 8016b74:	4603      	mov	r3, r0
 8016b76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b78:	7bfb      	ldrb	r3, [r7, #15]
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f000 f874 	bl	8016c68 <USBD_Get_USB_Status>
 8016b80:	4603      	mov	r3, r0
 8016b82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	3710      	adds	r7, #16
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	bd80      	pop	{r7, pc}

08016b8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016b8e:	b580      	push	{r7, lr}
 8016b90:	b086      	sub	sp, #24
 8016b92:	af00      	add	r7, sp, #0
 8016b94:	60f8      	str	r0, [r7, #12]
 8016b96:	607a      	str	r2, [r7, #4]
 8016b98:	603b      	str	r3, [r7, #0]
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ba6:	68fb      	ldr	r3, [r7, #12]
 8016ba8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016bac:	7af9      	ldrb	r1, [r7, #11]
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	687a      	ldr	r2, [r7, #4]
 8016bb2:	f7f5 fa82 	bl	800c0ba <HAL_PCD_EP_Transmit>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bba:	7dfb      	ldrb	r3, [r7, #23]
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f000 f853 	bl	8016c68 <USBD_Get_USB_Status>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016bc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3718      	adds	r7, #24
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}

08016bd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b086      	sub	sp, #24
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	60f8      	str	r0, [r7, #12]
 8016bd8:	607a      	str	r2, [r7, #4]
 8016bda:	603b      	str	r3, [r7, #0]
 8016bdc:	460b      	mov	r3, r1
 8016bde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016be0:	2300      	movs	r3, #0
 8016be2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016be4:	2300      	movs	r3, #0
 8016be6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016bee:	7af9      	ldrb	r1, [r7, #11]
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	f7f5 fa0e 	bl	800c014 <HAL_PCD_EP_Receive>
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bfc:	7dfb      	ldrb	r3, [r7, #23]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f000 f832 	bl	8016c68 <USBD_Get_USB_Status>
 8016c04:	4603      	mov	r3, r0
 8016c06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016c08:	7dbb      	ldrb	r3, [r7, #22]
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3718      	adds	r7, #24
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}

08016c12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c12:	b580      	push	{r7, lr}
 8016c14:	b082      	sub	sp, #8
 8016c16:	af00      	add	r7, sp, #0
 8016c18:	6078      	str	r0, [r7, #4]
 8016c1a:	460b      	mov	r3, r1
 8016c1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c24:	78fa      	ldrb	r2, [r7, #3]
 8016c26:	4611      	mov	r1, r2
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f7f5 fa2e 	bl	800c08a <HAL_PCD_EP_GetRxCount>
 8016c2e:	4603      	mov	r3, r0
}
 8016c30:	4618      	mov	r0, r3
 8016c32:	3708      	adds	r7, #8
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bd80      	pop	{r7, pc}

08016c38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016c38:	b480      	push	{r7}
 8016c3a:	b083      	sub	sp, #12
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016c40:	4b03      	ldr	r3, [pc, #12]	; (8016c50 <USBD_static_malloc+0x18>)
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	370c      	adds	r7, #12
 8016c46:	46bd      	mov	sp, r7
 8016c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4c:	4770      	bx	lr
 8016c4e:	bf00      	nop
 8016c50:	2000d9d8 	.word	0x2000d9d8

08016c54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016c54:	b480      	push	{r7}
 8016c56:	b083      	sub	sp, #12
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]

}
 8016c5c:	bf00      	nop
 8016c5e:	370c      	adds	r7, #12
 8016c60:	46bd      	mov	sp, r7
 8016c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c66:	4770      	bx	lr

08016c68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b085      	sub	sp, #20
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	4603      	mov	r3, r0
 8016c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c72:	2300      	movs	r3, #0
 8016c74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016c76:	79fb      	ldrb	r3, [r7, #7]
 8016c78:	2b03      	cmp	r3, #3
 8016c7a:	d817      	bhi.n	8016cac <USBD_Get_USB_Status+0x44>
 8016c7c:	a201      	add	r2, pc, #4	; (adr r2, 8016c84 <USBD_Get_USB_Status+0x1c>)
 8016c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c82:	bf00      	nop
 8016c84:	08016c95 	.word	0x08016c95
 8016c88:	08016c9b 	.word	0x08016c9b
 8016c8c:	08016ca1 	.word	0x08016ca1
 8016c90:	08016ca7 	.word	0x08016ca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016c94:	2300      	movs	r3, #0
 8016c96:	73fb      	strb	r3, [r7, #15]
    break;
 8016c98:	e00b      	b.n	8016cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016c9a:	2303      	movs	r3, #3
 8016c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8016c9e:	e008      	b.n	8016cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8016ca4:	e005      	b.n	8016cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ca6:	2303      	movs	r3, #3
 8016ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8016caa:	e002      	b.n	8016cb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016cac:	2303      	movs	r3, #3
 8016cae:	73fb      	strb	r3, [r7, #15]
    break;
 8016cb0:	bf00      	nop
  }
  return usb_status;
 8016cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	3714      	adds	r7, #20
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr

08016cc0 <__cvt>:
 8016cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016cc4:	ec55 4b10 	vmov	r4, r5, d0
 8016cc8:	2d00      	cmp	r5, #0
 8016cca:	460e      	mov	r6, r1
 8016ccc:	4619      	mov	r1, r3
 8016cce:	462b      	mov	r3, r5
 8016cd0:	bfbb      	ittet	lt
 8016cd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016cd6:	461d      	movlt	r5, r3
 8016cd8:	2300      	movge	r3, #0
 8016cda:	232d      	movlt	r3, #45	; 0x2d
 8016cdc:	700b      	strb	r3, [r1, #0]
 8016cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ce0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016ce4:	4691      	mov	r9, r2
 8016ce6:	f023 0820 	bic.w	r8, r3, #32
 8016cea:	bfbc      	itt	lt
 8016cec:	4622      	movlt	r2, r4
 8016cee:	4614      	movlt	r4, r2
 8016cf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016cf4:	d005      	beq.n	8016d02 <__cvt+0x42>
 8016cf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016cfa:	d100      	bne.n	8016cfe <__cvt+0x3e>
 8016cfc:	3601      	adds	r6, #1
 8016cfe:	2102      	movs	r1, #2
 8016d00:	e000      	b.n	8016d04 <__cvt+0x44>
 8016d02:	2103      	movs	r1, #3
 8016d04:	ab03      	add	r3, sp, #12
 8016d06:	9301      	str	r3, [sp, #4]
 8016d08:	ab02      	add	r3, sp, #8
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	ec45 4b10 	vmov	d0, r4, r5
 8016d10:	4653      	mov	r3, sl
 8016d12:	4632      	mov	r2, r6
 8016d14:	f001 f84c 	bl	8017db0 <_dtoa_r>
 8016d18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016d1c:	4607      	mov	r7, r0
 8016d1e:	d102      	bne.n	8016d26 <__cvt+0x66>
 8016d20:	f019 0f01 	tst.w	r9, #1
 8016d24:	d022      	beq.n	8016d6c <__cvt+0xac>
 8016d26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016d2a:	eb07 0906 	add.w	r9, r7, r6
 8016d2e:	d110      	bne.n	8016d52 <__cvt+0x92>
 8016d30:	783b      	ldrb	r3, [r7, #0]
 8016d32:	2b30      	cmp	r3, #48	; 0x30
 8016d34:	d10a      	bne.n	8016d4c <__cvt+0x8c>
 8016d36:	2200      	movs	r2, #0
 8016d38:	2300      	movs	r3, #0
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	4629      	mov	r1, r5
 8016d3e:	f7e9 fed3 	bl	8000ae8 <__aeabi_dcmpeq>
 8016d42:	b918      	cbnz	r0, 8016d4c <__cvt+0x8c>
 8016d44:	f1c6 0601 	rsb	r6, r6, #1
 8016d48:	f8ca 6000 	str.w	r6, [sl]
 8016d4c:	f8da 3000 	ldr.w	r3, [sl]
 8016d50:	4499      	add	r9, r3
 8016d52:	2200      	movs	r2, #0
 8016d54:	2300      	movs	r3, #0
 8016d56:	4620      	mov	r0, r4
 8016d58:	4629      	mov	r1, r5
 8016d5a:	f7e9 fec5 	bl	8000ae8 <__aeabi_dcmpeq>
 8016d5e:	b108      	cbz	r0, 8016d64 <__cvt+0xa4>
 8016d60:	f8cd 900c 	str.w	r9, [sp, #12]
 8016d64:	2230      	movs	r2, #48	; 0x30
 8016d66:	9b03      	ldr	r3, [sp, #12]
 8016d68:	454b      	cmp	r3, r9
 8016d6a:	d307      	bcc.n	8016d7c <__cvt+0xbc>
 8016d6c:	9b03      	ldr	r3, [sp, #12]
 8016d6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d70:	1bdb      	subs	r3, r3, r7
 8016d72:	4638      	mov	r0, r7
 8016d74:	6013      	str	r3, [r2, #0]
 8016d76:	b004      	add	sp, #16
 8016d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d7c:	1c59      	adds	r1, r3, #1
 8016d7e:	9103      	str	r1, [sp, #12]
 8016d80:	701a      	strb	r2, [r3, #0]
 8016d82:	e7f0      	b.n	8016d66 <__cvt+0xa6>

08016d84 <__exponent>:
 8016d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d86:	4603      	mov	r3, r0
 8016d88:	2900      	cmp	r1, #0
 8016d8a:	bfb8      	it	lt
 8016d8c:	4249      	neglt	r1, r1
 8016d8e:	f803 2b02 	strb.w	r2, [r3], #2
 8016d92:	bfb4      	ite	lt
 8016d94:	222d      	movlt	r2, #45	; 0x2d
 8016d96:	222b      	movge	r2, #43	; 0x2b
 8016d98:	2909      	cmp	r1, #9
 8016d9a:	7042      	strb	r2, [r0, #1]
 8016d9c:	dd2a      	ble.n	8016df4 <__exponent+0x70>
 8016d9e:	f10d 0207 	add.w	r2, sp, #7
 8016da2:	4617      	mov	r7, r2
 8016da4:	260a      	movs	r6, #10
 8016da6:	4694      	mov	ip, r2
 8016da8:	fb91 f5f6 	sdiv	r5, r1, r6
 8016dac:	fb06 1415 	mls	r4, r6, r5, r1
 8016db0:	3430      	adds	r4, #48	; 0x30
 8016db2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016db6:	460c      	mov	r4, r1
 8016db8:	2c63      	cmp	r4, #99	; 0x63
 8016dba:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8016dbe:	4629      	mov	r1, r5
 8016dc0:	dcf1      	bgt.n	8016da6 <__exponent+0x22>
 8016dc2:	3130      	adds	r1, #48	; 0x30
 8016dc4:	f1ac 0402 	sub.w	r4, ip, #2
 8016dc8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016dcc:	1c41      	adds	r1, r0, #1
 8016dce:	4622      	mov	r2, r4
 8016dd0:	42ba      	cmp	r2, r7
 8016dd2:	d30a      	bcc.n	8016dea <__exponent+0x66>
 8016dd4:	f10d 0209 	add.w	r2, sp, #9
 8016dd8:	eba2 020c 	sub.w	r2, r2, ip
 8016ddc:	42bc      	cmp	r4, r7
 8016dde:	bf88      	it	hi
 8016de0:	2200      	movhi	r2, #0
 8016de2:	4413      	add	r3, r2
 8016de4:	1a18      	subs	r0, r3, r0
 8016de6:	b003      	add	sp, #12
 8016de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dea:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016dee:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016df2:	e7ed      	b.n	8016dd0 <__exponent+0x4c>
 8016df4:	2330      	movs	r3, #48	; 0x30
 8016df6:	3130      	adds	r1, #48	; 0x30
 8016df8:	7083      	strb	r3, [r0, #2]
 8016dfa:	70c1      	strb	r1, [r0, #3]
 8016dfc:	1d03      	adds	r3, r0, #4
 8016dfe:	e7f1      	b.n	8016de4 <__exponent+0x60>

08016e00 <_printf_float>:
 8016e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e04:	ed2d 8b02 	vpush	{d8}
 8016e08:	b08d      	sub	sp, #52	; 0x34
 8016e0a:	460c      	mov	r4, r1
 8016e0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016e10:	4616      	mov	r6, r2
 8016e12:	461f      	mov	r7, r3
 8016e14:	4605      	mov	r5, r0
 8016e16:	f000 fe67 	bl	8017ae8 <_localeconv_r>
 8016e1a:	f8d0 a000 	ldr.w	sl, [r0]
 8016e1e:	4650      	mov	r0, sl
 8016e20:	f7e9 fa36 	bl	8000290 <strlen>
 8016e24:	2300      	movs	r3, #0
 8016e26:	930a      	str	r3, [sp, #40]	; 0x28
 8016e28:	6823      	ldr	r3, [r4, #0]
 8016e2a:	9305      	str	r3, [sp, #20]
 8016e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8016e30:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016e34:	3307      	adds	r3, #7
 8016e36:	f023 0307 	bic.w	r3, r3, #7
 8016e3a:	f103 0208 	add.w	r2, r3, #8
 8016e3e:	f8c8 2000 	str.w	r2, [r8]
 8016e42:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016e46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016e4a:	9307      	str	r3, [sp, #28]
 8016e4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8016e50:	ee08 0a10 	vmov	s16, r0
 8016e54:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e5c:	4b9e      	ldr	r3, [pc, #632]	; (80170d8 <_printf_float+0x2d8>)
 8016e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016e62:	f7e9 fe73 	bl	8000b4c <__aeabi_dcmpun>
 8016e66:	bb88      	cbnz	r0, 8016ecc <_printf_float+0xcc>
 8016e68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e6c:	4b9a      	ldr	r3, [pc, #616]	; (80170d8 <_printf_float+0x2d8>)
 8016e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016e72:	f7e9 fe4d 	bl	8000b10 <__aeabi_dcmple>
 8016e76:	bb48      	cbnz	r0, 8016ecc <_printf_float+0xcc>
 8016e78:	2200      	movs	r2, #0
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	4640      	mov	r0, r8
 8016e7e:	4649      	mov	r1, r9
 8016e80:	f7e9 fe3c 	bl	8000afc <__aeabi_dcmplt>
 8016e84:	b110      	cbz	r0, 8016e8c <_printf_float+0x8c>
 8016e86:	232d      	movs	r3, #45	; 0x2d
 8016e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e8c:	4a93      	ldr	r2, [pc, #588]	; (80170dc <_printf_float+0x2dc>)
 8016e8e:	4b94      	ldr	r3, [pc, #592]	; (80170e0 <_printf_float+0x2e0>)
 8016e90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016e94:	bf94      	ite	ls
 8016e96:	4690      	movls	r8, r2
 8016e98:	4698      	movhi	r8, r3
 8016e9a:	2303      	movs	r3, #3
 8016e9c:	6123      	str	r3, [r4, #16]
 8016e9e:	9b05      	ldr	r3, [sp, #20]
 8016ea0:	f023 0304 	bic.w	r3, r3, #4
 8016ea4:	6023      	str	r3, [r4, #0]
 8016ea6:	f04f 0900 	mov.w	r9, #0
 8016eaa:	9700      	str	r7, [sp, #0]
 8016eac:	4633      	mov	r3, r6
 8016eae:	aa0b      	add	r2, sp, #44	; 0x2c
 8016eb0:	4621      	mov	r1, r4
 8016eb2:	4628      	mov	r0, r5
 8016eb4:	f000 f9da 	bl	801726c <_printf_common>
 8016eb8:	3001      	adds	r0, #1
 8016eba:	f040 8090 	bne.w	8016fde <_printf_float+0x1de>
 8016ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ec2:	b00d      	add	sp, #52	; 0x34
 8016ec4:	ecbd 8b02 	vpop	{d8}
 8016ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ecc:	4642      	mov	r2, r8
 8016ece:	464b      	mov	r3, r9
 8016ed0:	4640      	mov	r0, r8
 8016ed2:	4649      	mov	r1, r9
 8016ed4:	f7e9 fe3a 	bl	8000b4c <__aeabi_dcmpun>
 8016ed8:	b140      	cbz	r0, 8016eec <_printf_float+0xec>
 8016eda:	464b      	mov	r3, r9
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	bfbc      	itt	lt
 8016ee0:	232d      	movlt	r3, #45	; 0x2d
 8016ee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016ee6:	4a7f      	ldr	r2, [pc, #508]	; (80170e4 <_printf_float+0x2e4>)
 8016ee8:	4b7f      	ldr	r3, [pc, #508]	; (80170e8 <_printf_float+0x2e8>)
 8016eea:	e7d1      	b.n	8016e90 <_printf_float+0x90>
 8016eec:	6863      	ldr	r3, [r4, #4]
 8016eee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016ef2:	9206      	str	r2, [sp, #24]
 8016ef4:	1c5a      	adds	r2, r3, #1
 8016ef6:	d13f      	bne.n	8016f78 <_printf_float+0x178>
 8016ef8:	2306      	movs	r3, #6
 8016efa:	6063      	str	r3, [r4, #4]
 8016efc:	9b05      	ldr	r3, [sp, #20]
 8016efe:	6861      	ldr	r1, [r4, #4]
 8016f00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016f04:	2300      	movs	r3, #0
 8016f06:	9303      	str	r3, [sp, #12]
 8016f08:	ab0a      	add	r3, sp, #40	; 0x28
 8016f0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016f0e:	ab09      	add	r3, sp, #36	; 0x24
 8016f10:	ec49 8b10 	vmov	d0, r8, r9
 8016f14:	9300      	str	r3, [sp, #0]
 8016f16:	6022      	str	r2, [r4, #0]
 8016f18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	f7ff fecf 	bl	8016cc0 <__cvt>
 8016f22:	9b06      	ldr	r3, [sp, #24]
 8016f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016f26:	2b47      	cmp	r3, #71	; 0x47
 8016f28:	4680      	mov	r8, r0
 8016f2a:	d108      	bne.n	8016f3e <_printf_float+0x13e>
 8016f2c:	1cc8      	adds	r0, r1, #3
 8016f2e:	db02      	blt.n	8016f36 <_printf_float+0x136>
 8016f30:	6863      	ldr	r3, [r4, #4]
 8016f32:	4299      	cmp	r1, r3
 8016f34:	dd41      	ble.n	8016fba <_printf_float+0x1ba>
 8016f36:	f1ab 0302 	sub.w	r3, fp, #2
 8016f3a:	fa5f fb83 	uxtb.w	fp, r3
 8016f3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016f42:	d820      	bhi.n	8016f86 <_printf_float+0x186>
 8016f44:	3901      	subs	r1, #1
 8016f46:	465a      	mov	r2, fp
 8016f48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016f4c:	9109      	str	r1, [sp, #36]	; 0x24
 8016f4e:	f7ff ff19 	bl	8016d84 <__exponent>
 8016f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f54:	1813      	adds	r3, r2, r0
 8016f56:	2a01      	cmp	r2, #1
 8016f58:	4681      	mov	r9, r0
 8016f5a:	6123      	str	r3, [r4, #16]
 8016f5c:	dc02      	bgt.n	8016f64 <_printf_float+0x164>
 8016f5e:	6822      	ldr	r2, [r4, #0]
 8016f60:	07d2      	lsls	r2, r2, #31
 8016f62:	d501      	bpl.n	8016f68 <_printf_float+0x168>
 8016f64:	3301      	adds	r3, #1
 8016f66:	6123      	str	r3, [r4, #16]
 8016f68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d09c      	beq.n	8016eaa <_printf_float+0xaa>
 8016f70:	232d      	movs	r3, #45	; 0x2d
 8016f72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f76:	e798      	b.n	8016eaa <_printf_float+0xaa>
 8016f78:	9a06      	ldr	r2, [sp, #24]
 8016f7a:	2a47      	cmp	r2, #71	; 0x47
 8016f7c:	d1be      	bne.n	8016efc <_printf_float+0xfc>
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d1bc      	bne.n	8016efc <_printf_float+0xfc>
 8016f82:	2301      	movs	r3, #1
 8016f84:	e7b9      	b.n	8016efa <_printf_float+0xfa>
 8016f86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016f8a:	d118      	bne.n	8016fbe <_printf_float+0x1be>
 8016f8c:	2900      	cmp	r1, #0
 8016f8e:	6863      	ldr	r3, [r4, #4]
 8016f90:	dd0b      	ble.n	8016faa <_printf_float+0x1aa>
 8016f92:	6121      	str	r1, [r4, #16]
 8016f94:	b913      	cbnz	r3, 8016f9c <_printf_float+0x19c>
 8016f96:	6822      	ldr	r2, [r4, #0]
 8016f98:	07d0      	lsls	r0, r2, #31
 8016f9a:	d502      	bpl.n	8016fa2 <_printf_float+0x1a2>
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	440b      	add	r3, r1
 8016fa0:	6123      	str	r3, [r4, #16]
 8016fa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8016fa4:	f04f 0900 	mov.w	r9, #0
 8016fa8:	e7de      	b.n	8016f68 <_printf_float+0x168>
 8016faa:	b913      	cbnz	r3, 8016fb2 <_printf_float+0x1b2>
 8016fac:	6822      	ldr	r2, [r4, #0]
 8016fae:	07d2      	lsls	r2, r2, #31
 8016fb0:	d501      	bpl.n	8016fb6 <_printf_float+0x1b6>
 8016fb2:	3302      	adds	r3, #2
 8016fb4:	e7f4      	b.n	8016fa0 <_printf_float+0x1a0>
 8016fb6:	2301      	movs	r3, #1
 8016fb8:	e7f2      	b.n	8016fa0 <_printf_float+0x1a0>
 8016fba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fc0:	4299      	cmp	r1, r3
 8016fc2:	db05      	blt.n	8016fd0 <_printf_float+0x1d0>
 8016fc4:	6823      	ldr	r3, [r4, #0]
 8016fc6:	6121      	str	r1, [r4, #16]
 8016fc8:	07d8      	lsls	r0, r3, #31
 8016fca:	d5ea      	bpl.n	8016fa2 <_printf_float+0x1a2>
 8016fcc:	1c4b      	adds	r3, r1, #1
 8016fce:	e7e7      	b.n	8016fa0 <_printf_float+0x1a0>
 8016fd0:	2900      	cmp	r1, #0
 8016fd2:	bfd4      	ite	le
 8016fd4:	f1c1 0202 	rsble	r2, r1, #2
 8016fd8:	2201      	movgt	r2, #1
 8016fda:	4413      	add	r3, r2
 8016fdc:	e7e0      	b.n	8016fa0 <_printf_float+0x1a0>
 8016fde:	6823      	ldr	r3, [r4, #0]
 8016fe0:	055a      	lsls	r2, r3, #21
 8016fe2:	d407      	bmi.n	8016ff4 <_printf_float+0x1f4>
 8016fe4:	6923      	ldr	r3, [r4, #16]
 8016fe6:	4642      	mov	r2, r8
 8016fe8:	4631      	mov	r1, r6
 8016fea:	4628      	mov	r0, r5
 8016fec:	47b8      	blx	r7
 8016fee:	3001      	adds	r0, #1
 8016ff0:	d12c      	bne.n	801704c <_printf_float+0x24c>
 8016ff2:	e764      	b.n	8016ebe <_printf_float+0xbe>
 8016ff4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016ff8:	f240 80e0 	bls.w	80171bc <_printf_float+0x3bc>
 8016ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017000:	2200      	movs	r2, #0
 8017002:	2300      	movs	r3, #0
 8017004:	f7e9 fd70 	bl	8000ae8 <__aeabi_dcmpeq>
 8017008:	2800      	cmp	r0, #0
 801700a:	d034      	beq.n	8017076 <_printf_float+0x276>
 801700c:	4a37      	ldr	r2, [pc, #220]	; (80170ec <_printf_float+0x2ec>)
 801700e:	2301      	movs	r3, #1
 8017010:	4631      	mov	r1, r6
 8017012:	4628      	mov	r0, r5
 8017014:	47b8      	blx	r7
 8017016:	3001      	adds	r0, #1
 8017018:	f43f af51 	beq.w	8016ebe <_printf_float+0xbe>
 801701c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017020:	429a      	cmp	r2, r3
 8017022:	db02      	blt.n	801702a <_printf_float+0x22a>
 8017024:	6823      	ldr	r3, [r4, #0]
 8017026:	07d8      	lsls	r0, r3, #31
 8017028:	d510      	bpl.n	801704c <_printf_float+0x24c>
 801702a:	ee18 3a10 	vmov	r3, s16
 801702e:	4652      	mov	r2, sl
 8017030:	4631      	mov	r1, r6
 8017032:	4628      	mov	r0, r5
 8017034:	47b8      	blx	r7
 8017036:	3001      	adds	r0, #1
 8017038:	f43f af41 	beq.w	8016ebe <_printf_float+0xbe>
 801703c:	f04f 0800 	mov.w	r8, #0
 8017040:	f104 091a 	add.w	r9, r4, #26
 8017044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017046:	3b01      	subs	r3, #1
 8017048:	4543      	cmp	r3, r8
 801704a:	dc09      	bgt.n	8017060 <_printf_float+0x260>
 801704c:	6823      	ldr	r3, [r4, #0]
 801704e:	079b      	lsls	r3, r3, #30
 8017050:	f100 8107 	bmi.w	8017262 <_printf_float+0x462>
 8017054:	68e0      	ldr	r0, [r4, #12]
 8017056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017058:	4298      	cmp	r0, r3
 801705a:	bfb8      	it	lt
 801705c:	4618      	movlt	r0, r3
 801705e:	e730      	b.n	8016ec2 <_printf_float+0xc2>
 8017060:	2301      	movs	r3, #1
 8017062:	464a      	mov	r2, r9
 8017064:	4631      	mov	r1, r6
 8017066:	4628      	mov	r0, r5
 8017068:	47b8      	blx	r7
 801706a:	3001      	adds	r0, #1
 801706c:	f43f af27 	beq.w	8016ebe <_printf_float+0xbe>
 8017070:	f108 0801 	add.w	r8, r8, #1
 8017074:	e7e6      	b.n	8017044 <_printf_float+0x244>
 8017076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017078:	2b00      	cmp	r3, #0
 801707a:	dc39      	bgt.n	80170f0 <_printf_float+0x2f0>
 801707c:	4a1b      	ldr	r2, [pc, #108]	; (80170ec <_printf_float+0x2ec>)
 801707e:	2301      	movs	r3, #1
 8017080:	4631      	mov	r1, r6
 8017082:	4628      	mov	r0, r5
 8017084:	47b8      	blx	r7
 8017086:	3001      	adds	r0, #1
 8017088:	f43f af19 	beq.w	8016ebe <_printf_float+0xbe>
 801708c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017090:	4313      	orrs	r3, r2
 8017092:	d102      	bne.n	801709a <_printf_float+0x29a>
 8017094:	6823      	ldr	r3, [r4, #0]
 8017096:	07d9      	lsls	r1, r3, #31
 8017098:	d5d8      	bpl.n	801704c <_printf_float+0x24c>
 801709a:	ee18 3a10 	vmov	r3, s16
 801709e:	4652      	mov	r2, sl
 80170a0:	4631      	mov	r1, r6
 80170a2:	4628      	mov	r0, r5
 80170a4:	47b8      	blx	r7
 80170a6:	3001      	adds	r0, #1
 80170a8:	f43f af09 	beq.w	8016ebe <_printf_float+0xbe>
 80170ac:	f04f 0900 	mov.w	r9, #0
 80170b0:	f104 0a1a 	add.w	sl, r4, #26
 80170b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170b6:	425b      	negs	r3, r3
 80170b8:	454b      	cmp	r3, r9
 80170ba:	dc01      	bgt.n	80170c0 <_printf_float+0x2c0>
 80170bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170be:	e792      	b.n	8016fe6 <_printf_float+0x1e6>
 80170c0:	2301      	movs	r3, #1
 80170c2:	4652      	mov	r2, sl
 80170c4:	4631      	mov	r1, r6
 80170c6:	4628      	mov	r0, r5
 80170c8:	47b8      	blx	r7
 80170ca:	3001      	adds	r0, #1
 80170cc:	f43f aef7 	beq.w	8016ebe <_printf_float+0xbe>
 80170d0:	f109 0901 	add.w	r9, r9, #1
 80170d4:	e7ee      	b.n	80170b4 <_printf_float+0x2b4>
 80170d6:	bf00      	nop
 80170d8:	7fefffff 	.word	0x7fefffff
 80170dc:	0801c665 	.word	0x0801c665
 80170e0:	0801c669 	.word	0x0801c669
 80170e4:	0801c66d 	.word	0x0801c66d
 80170e8:	0801c671 	.word	0x0801c671
 80170ec:	0801c675 	.word	0x0801c675
 80170f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80170f4:	429a      	cmp	r2, r3
 80170f6:	bfa8      	it	ge
 80170f8:	461a      	movge	r2, r3
 80170fa:	2a00      	cmp	r2, #0
 80170fc:	4691      	mov	r9, r2
 80170fe:	dc37      	bgt.n	8017170 <_printf_float+0x370>
 8017100:	f04f 0b00 	mov.w	fp, #0
 8017104:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017108:	f104 021a 	add.w	r2, r4, #26
 801710c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801710e:	9305      	str	r3, [sp, #20]
 8017110:	eba3 0309 	sub.w	r3, r3, r9
 8017114:	455b      	cmp	r3, fp
 8017116:	dc33      	bgt.n	8017180 <_printf_float+0x380>
 8017118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801711c:	429a      	cmp	r2, r3
 801711e:	db3b      	blt.n	8017198 <_printf_float+0x398>
 8017120:	6823      	ldr	r3, [r4, #0]
 8017122:	07da      	lsls	r2, r3, #31
 8017124:	d438      	bmi.n	8017198 <_printf_float+0x398>
 8017126:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801712a:	eba2 0903 	sub.w	r9, r2, r3
 801712e:	9b05      	ldr	r3, [sp, #20]
 8017130:	1ad2      	subs	r2, r2, r3
 8017132:	4591      	cmp	r9, r2
 8017134:	bfa8      	it	ge
 8017136:	4691      	movge	r9, r2
 8017138:	f1b9 0f00 	cmp.w	r9, #0
 801713c:	dc35      	bgt.n	80171aa <_printf_float+0x3aa>
 801713e:	f04f 0800 	mov.w	r8, #0
 8017142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017146:	f104 0a1a 	add.w	sl, r4, #26
 801714a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801714e:	1a9b      	subs	r3, r3, r2
 8017150:	eba3 0309 	sub.w	r3, r3, r9
 8017154:	4543      	cmp	r3, r8
 8017156:	f77f af79 	ble.w	801704c <_printf_float+0x24c>
 801715a:	2301      	movs	r3, #1
 801715c:	4652      	mov	r2, sl
 801715e:	4631      	mov	r1, r6
 8017160:	4628      	mov	r0, r5
 8017162:	47b8      	blx	r7
 8017164:	3001      	adds	r0, #1
 8017166:	f43f aeaa 	beq.w	8016ebe <_printf_float+0xbe>
 801716a:	f108 0801 	add.w	r8, r8, #1
 801716e:	e7ec      	b.n	801714a <_printf_float+0x34a>
 8017170:	4613      	mov	r3, r2
 8017172:	4631      	mov	r1, r6
 8017174:	4642      	mov	r2, r8
 8017176:	4628      	mov	r0, r5
 8017178:	47b8      	blx	r7
 801717a:	3001      	adds	r0, #1
 801717c:	d1c0      	bne.n	8017100 <_printf_float+0x300>
 801717e:	e69e      	b.n	8016ebe <_printf_float+0xbe>
 8017180:	2301      	movs	r3, #1
 8017182:	4631      	mov	r1, r6
 8017184:	4628      	mov	r0, r5
 8017186:	9205      	str	r2, [sp, #20]
 8017188:	47b8      	blx	r7
 801718a:	3001      	adds	r0, #1
 801718c:	f43f ae97 	beq.w	8016ebe <_printf_float+0xbe>
 8017190:	9a05      	ldr	r2, [sp, #20]
 8017192:	f10b 0b01 	add.w	fp, fp, #1
 8017196:	e7b9      	b.n	801710c <_printf_float+0x30c>
 8017198:	ee18 3a10 	vmov	r3, s16
 801719c:	4652      	mov	r2, sl
 801719e:	4631      	mov	r1, r6
 80171a0:	4628      	mov	r0, r5
 80171a2:	47b8      	blx	r7
 80171a4:	3001      	adds	r0, #1
 80171a6:	d1be      	bne.n	8017126 <_printf_float+0x326>
 80171a8:	e689      	b.n	8016ebe <_printf_float+0xbe>
 80171aa:	9a05      	ldr	r2, [sp, #20]
 80171ac:	464b      	mov	r3, r9
 80171ae:	4442      	add	r2, r8
 80171b0:	4631      	mov	r1, r6
 80171b2:	4628      	mov	r0, r5
 80171b4:	47b8      	blx	r7
 80171b6:	3001      	adds	r0, #1
 80171b8:	d1c1      	bne.n	801713e <_printf_float+0x33e>
 80171ba:	e680      	b.n	8016ebe <_printf_float+0xbe>
 80171bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171be:	2a01      	cmp	r2, #1
 80171c0:	dc01      	bgt.n	80171c6 <_printf_float+0x3c6>
 80171c2:	07db      	lsls	r3, r3, #31
 80171c4:	d53a      	bpl.n	801723c <_printf_float+0x43c>
 80171c6:	2301      	movs	r3, #1
 80171c8:	4642      	mov	r2, r8
 80171ca:	4631      	mov	r1, r6
 80171cc:	4628      	mov	r0, r5
 80171ce:	47b8      	blx	r7
 80171d0:	3001      	adds	r0, #1
 80171d2:	f43f ae74 	beq.w	8016ebe <_printf_float+0xbe>
 80171d6:	ee18 3a10 	vmov	r3, s16
 80171da:	4652      	mov	r2, sl
 80171dc:	4631      	mov	r1, r6
 80171de:	4628      	mov	r0, r5
 80171e0:	47b8      	blx	r7
 80171e2:	3001      	adds	r0, #1
 80171e4:	f43f ae6b 	beq.w	8016ebe <_printf_float+0xbe>
 80171e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80171ec:	2200      	movs	r2, #0
 80171ee:	2300      	movs	r3, #0
 80171f0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80171f4:	f7e9 fc78 	bl	8000ae8 <__aeabi_dcmpeq>
 80171f8:	b9d8      	cbnz	r0, 8017232 <_printf_float+0x432>
 80171fa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80171fe:	f108 0201 	add.w	r2, r8, #1
 8017202:	4631      	mov	r1, r6
 8017204:	4628      	mov	r0, r5
 8017206:	47b8      	blx	r7
 8017208:	3001      	adds	r0, #1
 801720a:	d10e      	bne.n	801722a <_printf_float+0x42a>
 801720c:	e657      	b.n	8016ebe <_printf_float+0xbe>
 801720e:	2301      	movs	r3, #1
 8017210:	4652      	mov	r2, sl
 8017212:	4631      	mov	r1, r6
 8017214:	4628      	mov	r0, r5
 8017216:	47b8      	blx	r7
 8017218:	3001      	adds	r0, #1
 801721a:	f43f ae50 	beq.w	8016ebe <_printf_float+0xbe>
 801721e:	f108 0801 	add.w	r8, r8, #1
 8017222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017224:	3b01      	subs	r3, #1
 8017226:	4543      	cmp	r3, r8
 8017228:	dcf1      	bgt.n	801720e <_printf_float+0x40e>
 801722a:	464b      	mov	r3, r9
 801722c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017230:	e6da      	b.n	8016fe8 <_printf_float+0x1e8>
 8017232:	f04f 0800 	mov.w	r8, #0
 8017236:	f104 0a1a 	add.w	sl, r4, #26
 801723a:	e7f2      	b.n	8017222 <_printf_float+0x422>
 801723c:	2301      	movs	r3, #1
 801723e:	4642      	mov	r2, r8
 8017240:	e7df      	b.n	8017202 <_printf_float+0x402>
 8017242:	2301      	movs	r3, #1
 8017244:	464a      	mov	r2, r9
 8017246:	4631      	mov	r1, r6
 8017248:	4628      	mov	r0, r5
 801724a:	47b8      	blx	r7
 801724c:	3001      	adds	r0, #1
 801724e:	f43f ae36 	beq.w	8016ebe <_printf_float+0xbe>
 8017252:	f108 0801 	add.w	r8, r8, #1
 8017256:	68e3      	ldr	r3, [r4, #12]
 8017258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801725a:	1a5b      	subs	r3, r3, r1
 801725c:	4543      	cmp	r3, r8
 801725e:	dcf0      	bgt.n	8017242 <_printf_float+0x442>
 8017260:	e6f8      	b.n	8017054 <_printf_float+0x254>
 8017262:	f04f 0800 	mov.w	r8, #0
 8017266:	f104 0919 	add.w	r9, r4, #25
 801726a:	e7f4      	b.n	8017256 <_printf_float+0x456>

0801726c <_printf_common>:
 801726c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017270:	4616      	mov	r6, r2
 8017272:	4699      	mov	r9, r3
 8017274:	688a      	ldr	r2, [r1, #8]
 8017276:	690b      	ldr	r3, [r1, #16]
 8017278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801727c:	4293      	cmp	r3, r2
 801727e:	bfb8      	it	lt
 8017280:	4613      	movlt	r3, r2
 8017282:	6033      	str	r3, [r6, #0]
 8017284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017288:	4607      	mov	r7, r0
 801728a:	460c      	mov	r4, r1
 801728c:	b10a      	cbz	r2, 8017292 <_printf_common+0x26>
 801728e:	3301      	adds	r3, #1
 8017290:	6033      	str	r3, [r6, #0]
 8017292:	6823      	ldr	r3, [r4, #0]
 8017294:	0699      	lsls	r1, r3, #26
 8017296:	bf42      	ittt	mi
 8017298:	6833      	ldrmi	r3, [r6, #0]
 801729a:	3302      	addmi	r3, #2
 801729c:	6033      	strmi	r3, [r6, #0]
 801729e:	6825      	ldr	r5, [r4, #0]
 80172a0:	f015 0506 	ands.w	r5, r5, #6
 80172a4:	d106      	bne.n	80172b4 <_printf_common+0x48>
 80172a6:	f104 0a19 	add.w	sl, r4, #25
 80172aa:	68e3      	ldr	r3, [r4, #12]
 80172ac:	6832      	ldr	r2, [r6, #0]
 80172ae:	1a9b      	subs	r3, r3, r2
 80172b0:	42ab      	cmp	r3, r5
 80172b2:	dc26      	bgt.n	8017302 <_printf_common+0x96>
 80172b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80172b8:	1e13      	subs	r3, r2, #0
 80172ba:	6822      	ldr	r2, [r4, #0]
 80172bc:	bf18      	it	ne
 80172be:	2301      	movne	r3, #1
 80172c0:	0692      	lsls	r2, r2, #26
 80172c2:	d42b      	bmi.n	801731c <_printf_common+0xb0>
 80172c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80172c8:	4649      	mov	r1, r9
 80172ca:	4638      	mov	r0, r7
 80172cc:	47c0      	blx	r8
 80172ce:	3001      	adds	r0, #1
 80172d0:	d01e      	beq.n	8017310 <_printf_common+0xa4>
 80172d2:	6823      	ldr	r3, [r4, #0]
 80172d4:	6922      	ldr	r2, [r4, #16]
 80172d6:	f003 0306 	and.w	r3, r3, #6
 80172da:	2b04      	cmp	r3, #4
 80172dc:	bf02      	ittt	eq
 80172de:	68e5      	ldreq	r5, [r4, #12]
 80172e0:	6833      	ldreq	r3, [r6, #0]
 80172e2:	1aed      	subeq	r5, r5, r3
 80172e4:	68a3      	ldr	r3, [r4, #8]
 80172e6:	bf0c      	ite	eq
 80172e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172ec:	2500      	movne	r5, #0
 80172ee:	4293      	cmp	r3, r2
 80172f0:	bfc4      	itt	gt
 80172f2:	1a9b      	subgt	r3, r3, r2
 80172f4:	18ed      	addgt	r5, r5, r3
 80172f6:	2600      	movs	r6, #0
 80172f8:	341a      	adds	r4, #26
 80172fa:	42b5      	cmp	r5, r6
 80172fc:	d11a      	bne.n	8017334 <_printf_common+0xc8>
 80172fe:	2000      	movs	r0, #0
 8017300:	e008      	b.n	8017314 <_printf_common+0xa8>
 8017302:	2301      	movs	r3, #1
 8017304:	4652      	mov	r2, sl
 8017306:	4649      	mov	r1, r9
 8017308:	4638      	mov	r0, r7
 801730a:	47c0      	blx	r8
 801730c:	3001      	adds	r0, #1
 801730e:	d103      	bne.n	8017318 <_printf_common+0xac>
 8017310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017318:	3501      	adds	r5, #1
 801731a:	e7c6      	b.n	80172aa <_printf_common+0x3e>
 801731c:	18e1      	adds	r1, r4, r3
 801731e:	1c5a      	adds	r2, r3, #1
 8017320:	2030      	movs	r0, #48	; 0x30
 8017322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017326:	4422      	add	r2, r4
 8017328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801732c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017330:	3302      	adds	r3, #2
 8017332:	e7c7      	b.n	80172c4 <_printf_common+0x58>
 8017334:	2301      	movs	r3, #1
 8017336:	4622      	mov	r2, r4
 8017338:	4649      	mov	r1, r9
 801733a:	4638      	mov	r0, r7
 801733c:	47c0      	blx	r8
 801733e:	3001      	adds	r0, #1
 8017340:	d0e6      	beq.n	8017310 <_printf_common+0xa4>
 8017342:	3601      	adds	r6, #1
 8017344:	e7d9      	b.n	80172fa <_printf_common+0x8e>
	...

08017348 <_printf_i>:
 8017348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801734c:	7e0f      	ldrb	r7, [r1, #24]
 801734e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017350:	2f78      	cmp	r7, #120	; 0x78
 8017352:	4691      	mov	r9, r2
 8017354:	4680      	mov	r8, r0
 8017356:	460c      	mov	r4, r1
 8017358:	469a      	mov	sl, r3
 801735a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801735e:	d807      	bhi.n	8017370 <_printf_i+0x28>
 8017360:	2f62      	cmp	r7, #98	; 0x62
 8017362:	d80a      	bhi.n	801737a <_printf_i+0x32>
 8017364:	2f00      	cmp	r7, #0
 8017366:	f000 80d4 	beq.w	8017512 <_printf_i+0x1ca>
 801736a:	2f58      	cmp	r7, #88	; 0x58
 801736c:	f000 80c0 	beq.w	80174f0 <_printf_i+0x1a8>
 8017370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017378:	e03a      	b.n	80173f0 <_printf_i+0xa8>
 801737a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801737e:	2b15      	cmp	r3, #21
 8017380:	d8f6      	bhi.n	8017370 <_printf_i+0x28>
 8017382:	a101      	add	r1, pc, #4	; (adr r1, 8017388 <_printf_i+0x40>)
 8017384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017388:	080173e1 	.word	0x080173e1
 801738c:	080173f5 	.word	0x080173f5
 8017390:	08017371 	.word	0x08017371
 8017394:	08017371 	.word	0x08017371
 8017398:	08017371 	.word	0x08017371
 801739c:	08017371 	.word	0x08017371
 80173a0:	080173f5 	.word	0x080173f5
 80173a4:	08017371 	.word	0x08017371
 80173a8:	08017371 	.word	0x08017371
 80173ac:	08017371 	.word	0x08017371
 80173b0:	08017371 	.word	0x08017371
 80173b4:	080174f9 	.word	0x080174f9
 80173b8:	08017421 	.word	0x08017421
 80173bc:	080174b3 	.word	0x080174b3
 80173c0:	08017371 	.word	0x08017371
 80173c4:	08017371 	.word	0x08017371
 80173c8:	0801751b 	.word	0x0801751b
 80173cc:	08017371 	.word	0x08017371
 80173d0:	08017421 	.word	0x08017421
 80173d4:	08017371 	.word	0x08017371
 80173d8:	08017371 	.word	0x08017371
 80173dc:	080174bb 	.word	0x080174bb
 80173e0:	682b      	ldr	r3, [r5, #0]
 80173e2:	1d1a      	adds	r2, r3, #4
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	602a      	str	r2, [r5, #0]
 80173e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173f0:	2301      	movs	r3, #1
 80173f2:	e09f      	b.n	8017534 <_printf_i+0x1ec>
 80173f4:	6820      	ldr	r0, [r4, #0]
 80173f6:	682b      	ldr	r3, [r5, #0]
 80173f8:	0607      	lsls	r7, r0, #24
 80173fa:	f103 0104 	add.w	r1, r3, #4
 80173fe:	6029      	str	r1, [r5, #0]
 8017400:	d501      	bpl.n	8017406 <_printf_i+0xbe>
 8017402:	681e      	ldr	r6, [r3, #0]
 8017404:	e003      	b.n	801740e <_printf_i+0xc6>
 8017406:	0646      	lsls	r6, r0, #25
 8017408:	d5fb      	bpl.n	8017402 <_printf_i+0xba>
 801740a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801740e:	2e00      	cmp	r6, #0
 8017410:	da03      	bge.n	801741a <_printf_i+0xd2>
 8017412:	232d      	movs	r3, #45	; 0x2d
 8017414:	4276      	negs	r6, r6
 8017416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801741a:	485a      	ldr	r0, [pc, #360]	; (8017584 <_printf_i+0x23c>)
 801741c:	230a      	movs	r3, #10
 801741e:	e012      	b.n	8017446 <_printf_i+0xfe>
 8017420:	682b      	ldr	r3, [r5, #0]
 8017422:	6820      	ldr	r0, [r4, #0]
 8017424:	1d19      	adds	r1, r3, #4
 8017426:	6029      	str	r1, [r5, #0]
 8017428:	0605      	lsls	r5, r0, #24
 801742a:	d501      	bpl.n	8017430 <_printf_i+0xe8>
 801742c:	681e      	ldr	r6, [r3, #0]
 801742e:	e002      	b.n	8017436 <_printf_i+0xee>
 8017430:	0641      	lsls	r1, r0, #25
 8017432:	d5fb      	bpl.n	801742c <_printf_i+0xe4>
 8017434:	881e      	ldrh	r6, [r3, #0]
 8017436:	4853      	ldr	r0, [pc, #332]	; (8017584 <_printf_i+0x23c>)
 8017438:	2f6f      	cmp	r7, #111	; 0x6f
 801743a:	bf0c      	ite	eq
 801743c:	2308      	moveq	r3, #8
 801743e:	230a      	movne	r3, #10
 8017440:	2100      	movs	r1, #0
 8017442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017446:	6865      	ldr	r5, [r4, #4]
 8017448:	60a5      	str	r5, [r4, #8]
 801744a:	2d00      	cmp	r5, #0
 801744c:	bfa2      	ittt	ge
 801744e:	6821      	ldrge	r1, [r4, #0]
 8017450:	f021 0104 	bicge.w	r1, r1, #4
 8017454:	6021      	strge	r1, [r4, #0]
 8017456:	b90e      	cbnz	r6, 801745c <_printf_i+0x114>
 8017458:	2d00      	cmp	r5, #0
 801745a:	d04b      	beq.n	80174f4 <_printf_i+0x1ac>
 801745c:	4615      	mov	r5, r2
 801745e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017462:	fb03 6711 	mls	r7, r3, r1, r6
 8017466:	5dc7      	ldrb	r7, [r0, r7]
 8017468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801746c:	4637      	mov	r7, r6
 801746e:	42bb      	cmp	r3, r7
 8017470:	460e      	mov	r6, r1
 8017472:	d9f4      	bls.n	801745e <_printf_i+0x116>
 8017474:	2b08      	cmp	r3, #8
 8017476:	d10b      	bne.n	8017490 <_printf_i+0x148>
 8017478:	6823      	ldr	r3, [r4, #0]
 801747a:	07de      	lsls	r6, r3, #31
 801747c:	d508      	bpl.n	8017490 <_printf_i+0x148>
 801747e:	6923      	ldr	r3, [r4, #16]
 8017480:	6861      	ldr	r1, [r4, #4]
 8017482:	4299      	cmp	r1, r3
 8017484:	bfde      	ittt	le
 8017486:	2330      	movle	r3, #48	; 0x30
 8017488:	f805 3c01 	strble.w	r3, [r5, #-1]
 801748c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017490:	1b52      	subs	r2, r2, r5
 8017492:	6122      	str	r2, [r4, #16]
 8017494:	f8cd a000 	str.w	sl, [sp]
 8017498:	464b      	mov	r3, r9
 801749a:	aa03      	add	r2, sp, #12
 801749c:	4621      	mov	r1, r4
 801749e:	4640      	mov	r0, r8
 80174a0:	f7ff fee4 	bl	801726c <_printf_common>
 80174a4:	3001      	adds	r0, #1
 80174a6:	d14a      	bne.n	801753e <_printf_i+0x1f6>
 80174a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174ac:	b004      	add	sp, #16
 80174ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174b2:	6823      	ldr	r3, [r4, #0]
 80174b4:	f043 0320 	orr.w	r3, r3, #32
 80174b8:	6023      	str	r3, [r4, #0]
 80174ba:	4833      	ldr	r0, [pc, #204]	; (8017588 <_printf_i+0x240>)
 80174bc:	2778      	movs	r7, #120	; 0x78
 80174be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80174c2:	6823      	ldr	r3, [r4, #0]
 80174c4:	6829      	ldr	r1, [r5, #0]
 80174c6:	061f      	lsls	r7, r3, #24
 80174c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80174cc:	d402      	bmi.n	80174d4 <_printf_i+0x18c>
 80174ce:	065f      	lsls	r7, r3, #25
 80174d0:	bf48      	it	mi
 80174d2:	b2b6      	uxthmi	r6, r6
 80174d4:	07df      	lsls	r7, r3, #31
 80174d6:	bf48      	it	mi
 80174d8:	f043 0320 	orrmi.w	r3, r3, #32
 80174dc:	6029      	str	r1, [r5, #0]
 80174de:	bf48      	it	mi
 80174e0:	6023      	strmi	r3, [r4, #0]
 80174e2:	b91e      	cbnz	r6, 80174ec <_printf_i+0x1a4>
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	f023 0320 	bic.w	r3, r3, #32
 80174ea:	6023      	str	r3, [r4, #0]
 80174ec:	2310      	movs	r3, #16
 80174ee:	e7a7      	b.n	8017440 <_printf_i+0xf8>
 80174f0:	4824      	ldr	r0, [pc, #144]	; (8017584 <_printf_i+0x23c>)
 80174f2:	e7e4      	b.n	80174be <_printf_i+0x176>
 80174f4:	4615      	mov	r5, r2
 80174f6:	e7bd      	b.n	8017474 <_printf_i+0x12c>
 80174f8:	682b      	ldr	r3, [r5, #0]
 80174fa:	6826      	ldr	r6, [r4, #0]
 80174fc:	6961      	ldr	r1, [r4, #20]
 80174fe:	1d18      	adds	r0, r3, #4
 8017500:	6028      	str	r0, [r5, #0]
 8017502:	0635      	lsls	r5, r6, #24
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	d501      	bpl.n	801750c <_printf_i+0x1c4>
 8017508:	6019      	str	r1, [r3, #0]
 801750a:	e002      	b.n	8017512 <_printf_i+0x1ca>
 801750c:	0670      	lsls	r0, r6, #25
 801750e:	d5fb      	bpl.n	8017508 <_printf_i+0x1c0>
 8017510:	8019      	strh	r1, [r3, #0]
 8017512:	2300      	movs	r3, #0
 8017514:	6123      	str	r3, [r4, #16]
 8017516:	4615      	mov	r5, r2
 8017518:	e7bc      	b.n	8017494 <_printf_i+0x14c>
 801751a:	682b      	ldr	r3, [r5, #0]
 801751c:	1d1a      	adds	r2, r3, #4
 801751e:	602a      	str	r2, [r5, #0]
 8017520:	681d      	ldr	r5, [r3, #0]
 8017522:	6862      	ldr	r2, [r4, #4]
 8017524:	2100      	movs	r1, #0
 8017526:	4628      	mov	r0, r5
 8017528:	f7e8 fe62 	bl	80001f0 <memchr>
 801752c:	b108      	cbz	r0, 8017532 <_printf_i+0x1ea>
 801752e:	1b40      	subs	r0, r0, r5
 8017530:	6060      	str	r0, [r4, #4]
 8017532:	6863      	ldr	r3, [r4, #4]
 8017534:	6123      	str	r3, [r4, #16]
 8017536:	2300      	movs	r3, #0
 8017538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801753c:	e7aa      	b.n	8017494 <_printf_i+0x14c>
 801753e:	6923      	ldr	r3, [r4, #16]
 8017540:	462a      	mov	r2, r5
 8017542:	4649      	mov	r1, r9
 8017544:	4640      	mov	r0, r8
 8017546:	47d0      	blx	sl
 8017548:	3001      	adds	r0, #1
 801754a:	d0ad      	beq.n	80174a8 <_printf_i+0x160>
 801754c:	6823      	ldr	r3, [r4, #0]
 801754e:	079b      	lsls	r3, r3, #30
 8017550:	d413      	bmi.n	801757a <_printf_i+0x232>
 8017552:	68e0      	ldr	r0, [r4, #12]
 8017554:	9b03      	ldr	r3, [sp, #12]
 8017556:	4298      	cmp	r0, r3
 8017558:	bfb8      	it	lt
 801755a:	4618      	movlt	r0, r3
 801755c:	e7a6      	b.n	80174ac <_printf_i+0x164>
 801755e:	2301      	movs	r3, #1
 8017560:	4632      	mov	r2, r6
 8017562:	4649      	mov	r1, r9
 8017564:	4640      	mov	r0, r8
 8017566:	47d0      	blx	sl
 8017568:	3001      	adds	r0, #1
 801756a:	d09d      	beq.n	80174a8 <_printf_i+0x160>
 801756c:	3501      	adds	r5, #1
 801756e:	68e3      	ldr	r3, [r4, #12]
 8017570:	9903      	ldr	r1, [sp, #12]
 8017572:	1a5b      	subs	r3, r3, r1
 8017574:	42ab      	cmp	r3, r5
 8017576:	dcf2      	bgt.n	801755e <_printf_i+0x216>
 8017578:	e7eb      	b.n	8017552 <_printf_i+0x20a>
 801757a:	2500      	movs	r5, #0
 801757c:	f104 0619 	add.w	r6, r4, #25
 8017580:	e7f5      	b.n	801756e <_printf_i+0x226>
 8017582:	bf00      	nop
 8017584:	0801c677 	.word	0x0801c677
 8017588:	0801c688 	.word	0x0801c688

0801758c <__sflush_r>:
 801758c:	898a      	ldrh	r2, [r1, #12]
 801758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017592:	4605      	mov	r5, r0
 8017594:	0710      	lsls	r0, r2, #28
 8017596:	460c      	mov	r4, r1
 8017598:	d458      	bmi.n	801764c <__sflush_r+0xc0>
 801759a:	684b      	ldr	r3, [r1, #4]
 801759c:	2b00      	cmp	r3, #0
 801759e:	dc05      	bgt.n	80175ac <__sflush_r+0x20>
 80175a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	dc02      	bgt.n	80175ac <__sflush_r+0x20>
 80175a6:	2000      	movs	r0, #0
 80175a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175ae:	2e00      	cmp	r6, #0
 80175b0:	d0f9      	beq.n	80175a6 <__sflush_r+0x1a>
 80175b2:	2300      	movs	r3, #0
 80175b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80175b8:	682f      	ldr	r7, [r5, #0]
 80175ba:	6a21      	ldr	r1, [r4, #32]
 80175bc:	602b      	str	r3, [r5, #0]
 80175be:	d032      	beq.n	8017626 <__sflush_r+0x9a>
 80175c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80175c2:	89a3      	ldrh	r3, [r4, #12]
 80175c4:	075a      	lsls	r2, r3, #29
 80175c6:	d505      	bpl.n	80175d4 <__sflush_r+0x48>
 80175c8:	6863      	ldr	r3, [r4, #4]
 80175ca:	1ac0      	subs	r0, r0, r3
 80175cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80175ce:	b10b      	cbz	r3, 80175d4 <__sflush_r+0x48>
 80175d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80175d2:	1ac0      	subs	r0, r0, r3
 80175d4:	2300      	movs	r3, #0
 80175d6:	4602      	mov	r2, r0
 80175d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80175da:	6a21      	ldr	r1, [r4, #32]
 80175dc:	4628      	mov	r0, r5
 80175de:	47b0      	blx	r6
 80175e0:	1c43      	adds	r3, r0, #1
 80175e2:	89a3      	ldrh	r3, [r4, #12]
 80175e4:	d106      	bne.n	80175f4 <__sflush_r+0x68>
 80175e6:	6829      	ldr	r1, [r5, #0]
 80175e8:	291d      	cmp	r1, #29
 80175ea:	d82b      	bhi.n	8017644 <__sflush_r+0xb8>
 80175ec:	4a29      	ldr	r2, [pc, #164]	; (8017694 <__sflush_r+0x108>)
 80175ee:	410a      	asrs	r2, r1
 80175f0:	07d6      	lsls	r6, r2, #31
 80175f2:	d427      	bmi.n	8017644 <__sflush_r+0xb8>
 80175f4:	2200      	movs	r2, #0
 80175f6:	6062      	str	r2, [r4, #4]
 80175f8:	04d9      	lsls	r1, r3, #19
 80175fa:	6922      	ldr	r2, [r4, #16]
 80175fc:	6022      	str	r2, [r4, #0]
 80175fe:	d504      	bpl.n	801760a <__sflush_r+0x7e>
 8017600:	1c42      	adds	r2, r0, #1
 8017602:	d101      	bne.n	8017608 <__sflush_r+0x7c>
 8017604:	682b      	ldr	r3, [r5, #0]
 8017606:	b903      	cbnz	r3, 801760a <__sflush_r+0x7e>
 8017608:	6560      	str	r0, [r4, #84]	; 0x54
 801760a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801760c:	602f      	str	r7, [r5, #0]
 801760e:	2900      	cmp	r1, #0
 8017610:	d0c9      	beq.n	80175a6 <__sflush_r+0x1a>
 8017612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017616:	4299      	cmp	r1, r3
 8017618:	d002      	beq.n	8017620 <__sflush_r+0x94>
 801761a:	4628      	mov	r0, r5
 801761c:	f001 f9ba 	bl	8018994 <_free_r>
 8017620:	2000      	movs	r0, #0
 8017622:	6360      	str	r0, [r4, #52]	; 0x34
 8017624:	e7c0      	b.n	80175a8 <__sflush_r+0x1c>
 8017626:	2301      	movs	r3, #1
 8017628:	4628      	mov	r0, r5
 801762a:	47b0      	blx	r6
 801762c:	1c41      	adds	r1, r0, #1
 801762e:	d1c8      	bne.n	80175c2 <__sflush_r+0x36>
 8017630:	682b      	ldr	r3, [r5, #0]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d0c5      	beq.n	80175c2 <__sflush_r+0x36>
 8017636:	2b1d      	cmp	r3, #29
 8017638:	d001      	beq.n	801763e <__sflush_r+0xb2>
 801763a:	2b16      	cmp	r3, #22
 801763c:	d101      	bne.n	8017642 <__sflush_r+0xb6>
 801763e:	602f      	str	r7, [r5, #0]
 8017640:	e7b1      	b.n	80175a6 <__sflush_r+0x1a>
 8017642:	89a3      	ldrh	r3, [r4, #12]
 8017644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017648:	81a3      	strh	r3, [r4, #12]
 801764a:	e7ad      	b.n	80175a8 <__sflush_r+0x1c>
 801764c:	690f      	ldr	r7, [r1, #16]
 801764e:	2f00      	cmp	r7, #0
 8017650:	d0a9      	beq.n	80175a6 <__sflush_r+0x1a>
 8017652:	0793      	lsls	r3, r2, #30
 8017654:	680e      	ldr	r6, [r1, #0]
 8017656:	bf08      	it	eq
 8017658:	694b      	ldreq	r3, [r1, #20]
 801765a:	600f      	str	r7, [r1, #0]
 801765c:	bf18      	it	ne
 801765e:	2300      	movne	r3, #0
 8017660:	eba6 0807 	sub.w	r8, r6, r7
 8017664:	608b      	str	r3, [r1, #8]
 8017666:	f1b8 0f00 	cmp.w	r8, #0
 801766a:	dd9c      	ble.n	80175a6 <__sflush_r+0x1a>
 801766c:	6a21      	ldr	r1, [r4, #32]
 801766e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017670:	4643      	mov	r3, r8
 8017672:	463a      	mov	r2, r7
 8017674:	4628      	mov	r0, r5
 8017676:	47b0      	blx	r6
 8017678:	2800      	cmp	r0, #0
 801767a:	dc06      	bgt.n	801768a <__sflush_r+0xfe>
 801767c:	89a3      	ldrh	r3, [r4, #12]
 801767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017682:	81a3      	strh	r3, [r4, #12]
 8017684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017688:	e78e      	b.n	80175a8 <__sflush_r+0x1c>
 801768a:	4407      	add	r7, r0
 801768c:	eba8 0800 	sub.w	r8, r8, r0
 8017690:	e7e9      	b.n	8017666 <__sflush_r+0xda>
 8017692:	bf00      	nop
 8017694:	dfbffffe 	.word	0xdfbffffe

08017698 <_fflush_r>:
 8017698:	b538      	push	{r3, r4, r5, lr}
 801769a:	690b      	ldr	r3, [r1, #16]
 801769c:	4605      	mov	r5, r0
 801769e:	460c      	mov	r4, r1
 80176a0:	b913      	cbnz	r3, 80176a8 <_fflush_r+0x10>
 80176a2:	2500      	movs	r5, #0
 80176a4:	4628      	mov	r0, r5
 80176a6:	bd38      	pop	{r3, r4, r5, pc}
 80176a8:	b118      	cbz	r0, 80176b2 <_fflush_r+0x1a>
 80176aa:	6a03      	ldr	r3, [r0, #32]
 80176ac:	b90b      	cbnz	r3, 80176b2 <_fflush_r+0x1a>
 80176ae:	f000 f8bb 	bl	8017828 <__sinit>
 80176b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d0f3      	beq.n	80176a2 <_fflush_r+0xa>
 80176ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80176bc:	07d0      	lsls	r0, r2, #31
 80176be:	d404      	bmi.n	80176ca <_fflush_r+0x32>
 80176c0:	0599      	lsls	r1, r3, #22
 80176c2:	d402      	bmi.n	80176ca <_fflush_r+0x32>
 80176c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176c6:	f000 fada 	bl	8017c7e <__retarget_lock_acquire_recursive>
 80176ca:	4628      	mov	r0, r5
 80176cc:	4621      	mov	r1, r4
 80176ce:	f7ff ff5d 	bl	801758c <__sflush_r>
 80176d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80176d4:	07da      	lsls	r2, r3, #31
 80176d6:	4605      	mov	r5, r0
 80176d8:	d4e4      	bmi.n	80176a4 <_fflush_r+0xc>
 80176da:	89a3      	ldrh	r3, [r4, #12]
 80176dc:	059b      	lsls	r3, r3, #22
 80176de:	d4e1      	bmi.n	80176a4 <_fflush_r+0xc>
 80176e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80176e2:	f000 facd 	bl	8017c80 <__retarget_lock_release_recursive>
 80176e6:	e7dd      	b.n	80176a4 <_fflush_r+0xc>

080176e8 <fflush>:
 80176e8:	4601      	mov	r1, r0
 80176ea:	b920      	cbnz	r0, 80176f6 <fflush+0xe>
 80176ec:	4a04      	ldr	r2, [pc, #16]	; (8017700 <fflush+0x18>)
 80176ee:	4905      	ldr	r1, [pc, #20]	; (8017704 <fflush+0x1c>)
 80176f0:	4805      	ldr	r0, [pc, #20]	; (8017708 <fflush+0x20>)
 80176f2:	f000 b8b1 	b.w	8017858 <_fwalk_sglue>
 80176f6:	4b05      	ldr	r3, [pc, #20]	; (801770c <fflush+0x24>)
 80176f8:	6818      	ldr	r0, [r3, #0]
 80176fa:	f7ff bfcd 	b.w	8017698 <_fflush_r>
 80176fe:	bf00      	nop
 8017700:	20000454 	.word	0x20000454
 8017704:	08017699 	.word	0x08017699
 8017708:	20000460 	.word	0x20000460
 801770c:	200004ac 	.word	0x200004ac

08017710 <std>:
 8017710:	2300      	movs	r3, #0
 8017712:	b510      	push	{r4, lr}
 8017714:	4604      	mov	r4, r0
 8017716:	e9c0 3300 	strd	r3, r3, [r0]
 801771a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801771e:	6083      	str	r3, [r0, #8]
 8017720:	8181      	strh	r1, [r0, #12]
 8017722:	6643      	str	r3, [r0, #100]	; 0x64
 8017724:	81c2      	strh	r2, [r0, #14]
 8017726:	6183      	str	r3, [r0, #24]
 8017728:	4619      	mov	r1, r3
 801772a:	2208      	movs	r2, #8
 801772c:	305c      	adds	r0, #92	; 0x5c
 801772e:	f000 f9a3 	bl	8017a78 <memset>
 8017732:	4b0d      	ldr	r3, [pc, #52]	; (8017768 <std+0x58>)
 8017734:	6263      	str	r3, [r4, #36]	; 0x24
 8017736:	4b0d      	ldr	r3, [pc, #52]	; (801776c <std+0x5c>)
 8017738:	62a3      	str	r3, [r4, #40]	; 0x28
 801773a:	4b0d      	ldr	r3, [pc, #52]	; (8017770 <std+0x60>)
 801773c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801773e:	4b0d      	ldr	r3, [pc, #52]	; (8017774 <std+0x64>)
 8017740:	6323      	str	r3, [r4, #48]	; 0x30
 8017742:	4b0d      	ldr	r3, [pc, #52]	; (8017778 <std+0x68>)
 8017744:	6224      	str	r4, [r4, #32]
 8017746:	429c      	cmp	r4, r3
 8017748:	d006      	beq.n	8017758 <std+0x48>
 801774a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801774e:	4294      	cmp	r4, r2
 8017750:	d002      	beq.n	8017758 <std+0x48>
 8017752:	33d0      	adds	r3, #208	; 0xd0
 8017754:	429c      	cmp	r4, r3
 8017756:	d105      	bne.n	8017764 <std+0x54>
 8017758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801775c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017760:	f000 ba8c 	b.w	8017c7c <__retarget_lock_init_recursive>
 8017764:	bd10      	pop	{r4, pc}
 8017766:	bf00      	nop
 8017768:	080178c9 	.word	0x080178c9
 801776c:	080178eb 	.word	0x080178eb
 8017770:	08017923 	.word	0x08017923
 8017774:	08017947 	.word	0x08017947
 8017778:	2000dbf8 	.word	0x2000dbf8

0801777c <stdio_exit_handler>:
 801777c:	4a02      	ldr	r2, [pc, #8]	; (8017788 <stdio_exit_handler+0xc>)
 801777e:	4903      	ldr	r1, [pc, #12]	; (801778c <stdio_exit_handler+0x10>)
 8017780:	4803      	ldr	r0, [pc, #12]	; (8017790 <stdio_exit_handler+0x14>)
 8017782:	f000 b869 	b.w	8017858 <_fwalk_sglue>
 8017786:	bf00      	nop
 8017788:	20000454 	.word	0x20000454
 801778c:	08017699 	.word	0x08017699
 8017790:	20000460 	.word	0x20000460

08017794 <cleanup_stdio>:
 8017794:	6841      	ldr	r1, [r0, #4]
 8017796:	4b0c      	ldr	r3, [pc, #48]	; (80177c8 <cleanup_stdio+0x34>)
 8017798:	4299      	cmp	r1, r3
 801779a:	b510      	push	{r4, lr}
 801779c:	4604      	mov	r4, r0
 801779e:	d001      	beq.n	80177a4 <cleanup_stdio+0x10>
 80177a0:	f7ff ff7a 	bl	8017698 <_fflush_r>
 80177a4:	68a1      	ldr	r1, [r4, #8]
 80177a6:	4b09      	ldr	r3, [pc, #36]	; (80177cc <cleanup_stdio+0x38>)
 80177a8:	4299      	cmp	r1, r3
 80177aa:	d002      	beq.n	80177b2 <cleanup_stdio+0x1e>
 80177ac:	4620      	mov	r0, r4
 80177ae:	f7ff ff73 	bl	8017698 <_fflush_r>
 80177b2:	68e1      	ldr	r1, [r4, #12]
 80177b4:	4b06      	ldr	r3, [pc, #24]	; (80177d0 <cleanup_stdio+0x3c>)
 80177b6:	4299      	cmp	r1, r3
 80177b8:	d004      	beq.n	80177c4 <cleanup_stdio+0x30>
 80177ba:	4620      	mov	r0, r4
 80177bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177c0:	f7ff bf6a 	b.w	8017698 <_fflush_r>
 80177c4:	bd10      	pop	{r4, pc}
 80177c6:	bf00      	nop
 80177c8:	2000dbf8 	.word	0x2000dbf8
 80177cc:	2000dc60 	.word	0x2000dc60
 80177d0:	2000dcc8 	.word	0x2000dcc8

080177d4 <global_stdio_init.part.0>:
 80177d4:	b510      	push	{r4, lr}
 80177d6:	4b0b      	ldr	r3, [pc, #44]	; (8017804 <global_stdio_init.part.0+0x30>)
 80177d8:	4c0b      	ldr	r4, [pc, #44]	; (8017808 <global_stdio_init.part.0+0x34>)
 80177da:	4a0c      	ldr	r2, [pc, #48]	; (801780c <global_stdio_init.part.0+0x38>)
 80177dc:	601a      	str	r2, [r3, #0]
 80177de:	4620      	mov	r0, r4
 80177e0:	2200      	movs	r2, #0
 80177e2:	2104      	movs	r1, #4
 80177e4:	f7ff ff94 	bl	8017710 <std>
 80177e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80177ec:	2201      	movs	r2, #1
 80177ee:	2109      	movs	r1, #9
 80177f0:	f7ff ff8e 	bl	8017710 <std>
 80177f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80177f8:	2202      	movs	r2, #2
 80177fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177fe:	2112      	movs	r1, #18
 8017800:	f7ff bf86 	b.w	8017710 <std>
 8017804:	2000dd30 	.word	0x2000dd30
 8017808:	2000dbf8 	.word	0x2000dbf8
 801780c:	0801777d 	.word	0x0801777d

08017810 <__sfp_lock_acquire>:
 8017810:	4801      	ldr	r0, [pc, #4]	; (8017818 <__sfp_lock_acquire+0x8>)
 8017812:	f000 ba34 	b.w	8017c7e <__retarget_lock_acquire_recursive>
 8017816:	bf00      	nop
 8017818:	2000dd39 	.word	0x2000dd39

0801781c <__sfp_lock_release>:
 801781c:	4801      	ldr	r0, [pc, #4]	; (8017824 <__sfp_lock_release+0x8>)
 801781e:	f000 ba2f 	b.w	8017c80 <__retarget_lock_release_recursive>
 8017822:	bf00      	nop
 8017824:	2000dd39 	.word	0x2000dd39

08017828 <__sinit>:
 8017828:	b510      	push	{r4, lr}
 801782a:	4604      	mov	r4, r0
 801782c:	f7ff fff0 	bl	8017810 <__sfp_lock_acquire>
 8017830:	6a23      	ldr	r3, [r4, #32]
 8017832:	b11b      	cbz	r3, 801783c <__sinit+0x14>
 8017834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017838:	f7ff bff0 	b.w	801781c <__sfp_lock_release>
 801783c:	4b04      	ldr	r3, [pc, #16]	; (8017850 <__sinit+0x28>)
 801783e:	6223      	str	r3, [r4, #32]
 8017840:	4b04      	ldr	r3, [pc, #16]	; (8017854 <__sinit+0x2c>)
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d1f5      	bne.n	8017834 <__sinit+0xc>
 8017848:	f7ff ffc4 	bl	80177d4 <global_stdio_init.part.0>
 801784c:	e7f2      	b.n	8017834 <__sinit+0xc>
 801784e:	bf00      	nop
 8017850:	08017795 	.word	0x08017795
 8017854:	2000dd30 	.word	0x2000dd30

08017858 <_fwalk_sglue>:
 8017858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801785c:	4607      	mov	r7, r0
 801785e:	4688      	mov	r8, r1
 8017860:	4614      	mov	r4, r2
 8017862:	2600      	movs	r6, #0
 8017864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017868:	f1b9 0901 	subs.w	r9, r9, #1
 801786c:	d505      	bpl.n	801787a <_fwalk_sglue+0x22>
 801786e:	6824      	ldr	r4, [r4, #0]
 8017870:	2c00      	cmp	r4, #0
 8017872:	d1f7      	bne.n	8017864 <_fwalk_sglue+0xc>
 8017874:	4630      	mov	r0, r6
 8017876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801787a:	89ab      	ldrh	r3, [r5, #12]
 801787c:	2b01      	cmp	r3, #1
 801787e:	d907      	bls.n	8017890 <_fwalk_sglue+0x38>
 8017880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017884:	3301      	adds	r3, #1
 8017886:	d003      	beq.n	8017890 <_fwalk_sglue+0x38>
 8017888:	4629      	mov	r1, r5
 801788a:	4638      	mov	r0, r7
 801788c:	47c0      	blx	r8
 801788e:	4306      	orrs	r6, r0
 8017890:	3568      	adds	r5, #104	; 0x68
 8017892:	e7e9      	b.n	8017868 <_fwalk_sglue+0x10>

08017894 <iprintf>:
 8017894:	b40f      	push	{r0, r1, r2, r3}
 8017896:	b507      	push	{r0, r1, r2, lr}
 8017898:	4906      	ldr	r1, [pc, #24]	; (80178b4 <iprintf+0x20>)
 801789a:	ab04      	add	r3, sp, #16
 801789c:	6808      	ldr	r0, [r1, #0]
 801789e:	f853 2b04 	ldr.w	r2, [r3], #4
 80178a2:	6881      	ldr	r1, [r0, #8]
 80178a4:	9301      	str	r3, [sp, #4]
 80178a6:	f001 fd1b 	bl	80192e0 <_vfiprintf_r>
 80178aa:	b003      	add	sp, #12
 80178ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80178b0:	b004      	add	sp, #16
 80178b2:	4770      	bx	lr
 80178b4:	200004ac 	.word	0x200004ac

080178b8 <putchar>:
 80178b8:	4b02      	ldr	r3, [pc, #8]	; (80178c4 <putchar+0xc>)
 80178ba:	4601      	mov	r1, r0
 80178bc:	6818      	ldr	r0, [r3, #0]
 80178be:	6882      	ldr	r2, [r0, #8]
 80178c0:	f001 be8a 	b.w	80195d8 <_putc_r>
 80178c4:	200004ac 	.word	0x200004ac

080178c8 <__sread>:
 80178c8:	b510      	push	{r4, lr}
 80178ca:	460c      	mov	r4, r1
 80178cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178d0:	f000 f986 	bl	8017be0 <_read_r>
 80178d4:	2800      	cmp	r0, #0
 80178d6:	bfab      	itete	ge
 80178d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80178da:	89a3      	ldrhlt	r3, [r4, #12]
 80178dc:	181b      	addge	r3, r3, r0
 80178de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80178e2:	bfac      	ite	ge
 80178e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80178e6:	81a3      	strhlt	r3, [r4, #12]
 80178e8:	bd10      	pop	{r4, pc}

080178ea <__swrite>:
 80178ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ee:	461f      	mov	r7, r3
 80178f0:	898b      	ldrh	r3, [r1, #12]
 80178f2:	05db      	lsls	r3, r3, #23
 80178f4:	4605      	mov	r5, r0
 80178f6:	460c      	mov	r4, r1
 80178f8:	4616      	mov	r6, r2
 80178fa:	d505      	bpl.n	8017908 <__swrite+0x1e>
 80178fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017900:	2302      	movs	r3, #2
 8017902:	2200      	movs	r2, #0
 8017904:	f000 f95a 	bl	8017bbc <_lseek_r>
 8017908:	89a3      	ldrh	r3, [r4, #12]
 801790a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801790e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017912:	81a3      	strh	r3, [r4, #12]
 8017914:	4632      	mov	r2, r6
 8017916:	463b      	mov	r3, r7
 8017918:	4628      	mov	r0, r5
 801791a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801791e:	f000 b971 	b.w	8017c04 <_write_r>

08017922 <__sseek>:
 8017922:	b510      	push	{r4, lr}
 8017924:	460c      	mov	r4, r1
 8017926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801792a:	f000 f947 	bl	8017bbc <_lseek_r>
 801792e:	1c43      	adds	r3, r0, #1
 8017930:	89a3      	ldrh	r3, [r4, #12]
 8017932:	bf15      	itete	ne
 8017934:	6560      	strne	r0, [r4, #84]	; 0x54
 8017936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801793a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801793e:	81a3      	strheq	r3, [r4, #12]
 8017940:	bf18      	it	ne
 8017942:	81a3      	strhne	r3, [r4, #12]
 8017944:	bd10      	pop	{r4, pc}

08017946 <__sclose>:
 8017946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801794a:	f000 b8d1 	b.w	8017af0 <_close_r>

0801794e <__swbuf_r>:
 801794e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017950:	460e      	mov	r6, r1
 8017952:	4614      	mov	r4, r2
 8017954:	4605      	mov	r5, r0
 8017956:	b118      	cbz	r0, 8017960 <__swbuf_r+0x12>
 8017958:	6a03      	ldr	r3, [r0, #32]
 801795a:	b90b      	cbnz	r3, 8017960 <__swbuf_r+0x12>
 801795c:	f7ff ff64 	bl	8017828 <__sinit>
 8017960:	69a3      	ldr	r3, [r4, #24]
 8017962:	60a3      	str	r3, [r4, #8]
 8017964:	89a3      	ldrh	r3, [r4, #12]
 8017966:	071a      	lsls	r2, r3, #28
 8017968:	d525      	bpl.n	80179b6 <__swbuf_r+0x68>
 801796a:	6923      	ldr	r3, [r4, #16]
 801796c:	b31b      	cbz	r3, 80179b6 <__swbuf_r+0x68>
 801796e:	6823      	ldr	r3, [r4, #0]
 8017970:	6922      	ldr	r2, [r4, #16]
 8017972:	1a98      	subs	r0, r3, r2
 8017974:	6963      	ldr	r3, [r4, #20]
 8017976:	b2f6      	uxtb	r6, r6
 8017978:	4283      	cmp	r3, r0
 801797a:	4637      	mov	r7, r6
 801797c:	dc04      	bgt.n	8017988 <__swbuf_r+0x3a>
 801797e:	4621      	mov	r1, r4
 8017980:	4628      	mov	r0, r5
 8017982:	f7ff fe89 	bl	8017698 <_fflush_r>
 8017986:	b9e0      	cbnz	r0, 80179c2 <__swbuf_r+0x74>
 8017988:	68a3      	ldr	r3, [r4, #8]
 801798a:	3b01      	subs	r3, #1
 801798c:	60a3      	str	r3, [r4, #8]
 801798e:	6823      	ldr	r3, [r4, #0]
 8017990:	1c5a      	adds	r2, r3, #1
 8017992:	6022      	str	r2, [r4, #0]
 8017994:	701e      	strb	r6, [r3, #0]
 8017996:	6962      	ldr	r2, [r4, #20]
 8017998:	1c43      	adds	r3, r0, #1
 801799a:	429a      	cmp	r2, r3
 801799c:	d004      	beq.n	80179a8 <__swbuf_r+0x5a>
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	07db      	lsls	r3, r3, #31
 80179a2:	d506      	bpl.n	80179b2 <__swbuf_r+0x64>
 80179a4:	2e0a      	cmp	r6, #10
 80179a6:	d104      	bne.n	80179b2 <__swbuf_r+0x64>
 80179a8:	4621      	mov	r1, r4
 80179aa:	4628      	mov	r0, r5
 80179ac:	f7ff fe74 	bl	8017698 <_fflush_r>
 80179b0:	b938      	cbnz	r0, 80179c2 <__swbuf_r+0x74>
 80179b2:	4638      	mov	r0, r7
 80179b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179b6:	4621      	mov	r1, r4
 80179b8:	4628      	mov	r0, r5
 80179ba:	f000 f805 	bl	80179c8 <__swsetup_r>
 80179be:	2800      	cmp	r0, #0
 80179c0:	d0d5      	beq.n	801796e <__swbuf_r+0x20>
 80179c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80179c6:	e7f4      	b.n	80179b2 <__swbuf_r+0x64>

080179c8 <__swsetup_r>:
 80179c8:	b538      	push	{r3, r4, r5, lr}
 80179ca:	4b2a      	ldr	r3, [pc, #168]	; (8017a74 <__swsetup_r+0xac>)
 80179cc:	4605      	mov	r5, r0
 80179ce:	6818      	ldr	r0, [r3, #0]
 80179d0:	460c      	mov	r4, r1
 80179d2:	b118      	cbz	r0, 80179dc <__swsetup_r+0x14>
 80179d4:	6a03      	ldr	r3, [r0, #32]
 80179d6:	b90b      	cbnz	r3, 80179dc <__swsetup_r+0x14>
 80179d8:	f7ff ff26 	bl	8017828 <__sinit>
 80179dc:	89a3      	ldrh	r3, [r4, #12]
 80179de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179e2:	0718      	lsls	r0, r3, #28
 80179e4:	d422      	bmi.n	8017a2c <__swsetup_r+0x64>
 80179e6:	06d9      	lsls	r1, r3, #27
 80179e8:	d407      	bmi.n	80179fa <__swsetup_r+0x32>
 80179ea:	2309      	movs	r3, #9
 80179ec:	602b      	str	r3, [r5, #0]
 80179ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80179f2:	81a3      	strh	r3, [r4, #12]
 80179f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179f8:	e034      	b.n	8017a64 <__swsetup_r+0x9c>
 80179fa:	0758      	lsls	r0, r3, #29
 80179fc:	d512      	bpl.n	8017a24 <__swsetup_r+0x5c>
 80179fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a00:	b141      	cbz	r1, 8017a14 <__swsetup_r+0x4c>
 8017a02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a06:	4299      	cmp	r1, r3
 8017a08:	d002      	beq.n	8017a10 <__swsetup_r+0x48>
 8017a0a:	4628      	mov	r0, r5
 8017a0c:	f000 ffc2 	bl	8018994 <_free_r>
 8017a10:	2300      	movs	r3, #0
 8017a12:	6363      	str	r3, [r4, #52]	; 0x34
 8017a14:	89a3      	ldrh	r3, [r4, #12]
 8017a16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a1a:	81a3      	strh	r3, [r4, #12]
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	6063      	str	r3, [r4, #4]
 8017a20:	6923      	ldr	r3, [r4, #16]
 8017a22:	6023      	str	r3, [r4, #0]
 8017a24:	89a3      	ldrh	r3, [r4, #12]
 8017a26:	f043 0308 	orr.w	r3, r3, #8
 8017a2a:	81a3      	strh	r3, [r4, #12]
 8017a2c:	6923      	ldr	r3, [r4, #16]
 8017a2e:	b94b      	cbnz	r3, 8017a44 <__swsetup_r+0x7c>
 8017a30:	89a3      	ldrh	r3, [r4, #12]
 8017a32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a3a:	d003      	beq.n	8017a44 <__swsetup_r+0x7c>
 8017a3c:	4621      	mov	r1, r4
 8017a3e:	4628      	mov	r0, r5
 8017a40:	f001 fd8e 	bl	8019560 <__smakebuf_r>
 8017a44:	89a0      	ldrh	r0, [r4, #12]
 8017a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a4a:	f010 0301 	ands.w	r3, r0, #1
 8017a4e:	d00a      	beq.n	8017a66 <__swsetup_r+0x9e>
 8017a50:	2300      	movs	r3, #0
 8017a52:	60a3      	str	r3, [r4, #8]
 8017a54:	6963      	ldr	r3, [r4, #20]
 8017a56:	425b      	negs	r3, r3
 8017a58:	61a3      	str	r3, [r4, #24]
 8017a5a:	6923      	ldr	r3, [r4, #16]
 8017a5c:	b943      	cbnz	r3, 8017a70 <__swsetup_r+0xa8>
 8017a5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017a62:	d1c4      	bne.n	80179ee <__swsetup_r+0x26>
 8017a64:	bd38      	pop	{r3, r4, r5, pc}
 8017a66:	0781      	lsls	r1, r0, #30
 8017a68:	bf58      	it	pl
 8017a6a:	6963      	ldrpl	r3, [r4, #20]
 8017a6c:	60a3      	str	r3, [r4, #8]
 8017a6e:	e7f4      	b.n	8017a5a <__swsetup_r+0x92>
 8017a70:	2000      	movs	r0, #0
 8017a72:	e7f7      	b.n	8017a64 <__swsetup_r+0x9c>
 8017a74:	200004ac 	.word	0x200004ac

08017a78 <memset>:
 8017a78:	4402      	add	r2, r0
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	4293      	cmp	r3, r2
 8017a7e:	d100      	bne.n	8017a82 <memset+0xa>
 8017a80:	4770      	bx	lr
 8017a82:	f803 1b01 	strb.w	r1, [r3], #1
 8017a86:	e7f9      	b.n	8017a7c <memset+0x4>

08017a88 <strcat>:
 8017a88:	b510      	push	{r4, lr}
 8017a8a:	4602      	mov	r2, r0
 8017a8c:	7814      	ldrb	r4, [r2, #0]
 8017a8e:	4613      	mov	r3, r2
 8017a90:	3201      	adds	r2, #1
 8017a92:	2c00      	cmp	r4, #0
 8017a94:	d1fa      	bne.n	8017a8c <strcat+0x4>
 8017a96:	3b01      	subs	r3, #1
 8017a98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017aa0:	2a00      	cmp	r2, #0
 8017aa2:	d1f9      	bne.n	8017a98 <strcat+0x10>
 8017aa4:	bd10      	pop	{r4, pc}

08017aa6 <strchr>:
 8017aa6:	b2c9      	uxtb	r1, r1
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017aae:	b11a      	cbz	r2, 8017ab8 <strchr+0x12>
 8017ab0:	428a      	cmp	r2, r1
 8017ab2:	d1f9      	bne.n	8017aa8 <strchr+0x2>
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	4770      	bx	lr
 8017ab8:	2900      	cmp	r1, #0
 8017aba:	bf18      	it	ne
 8017abc:	2300      	movne	r3, #0
 8017abe:	e7f9      	b.n	8017ab4 <strchr+0xe>

08017ac0 <strncpy>:
 8017ac0:	b510      	push	{r4, lr}
 8017ac2:	3901      	subs	r1, #1
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	b132      	cbz	r2, 8017ad6 <strncpy+0x16>
 8017ac8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017acc:	f803 4b01 	strb.w	r4, [r3], #1
 8017ad0:	3a01      	subs	r2, #1
 8017ad2:	2c00      	cmp	r4, #0
 8017ad4:	d1f7      	bne.n	8017ac6 <strncpy+0x6>
 8017ad6:	441a      	add	r2, r3
 8017ad8:	2100      	movs	r1, #0
 8017ada:	4293      	cmp	r3, r2
 8017adc:	d100      	bne.n	8017ae0 <strncpy+0x20>
 8017ade:	bd10      	pop	{r4, pc}
 8017ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8017ae4:	e7f9      	b.n	8017ada <strncpy+0x1a>
	...

08017ae8 <_localeconv_r>:
 8017ae8:	4800      	ldr	r0, [pc, #0]	; (8017aec <_localeconv_r+0x4>)
 8017aea:	4770      	bx	lr
 8017aec:	200005a0 	.word	0x200005a0

08017af0 <_close_r>:
 8017af0:	b538      	push	{r3, r4, r5, lr}
 8017af2:	4d06      	ldr	r5, [pc, #24]	; (8017b0c <_close_r+0x1c>)
 8017af4:	2300      	movs	r3, #0
 8017af6:	4604      	mov	r4, r0
 8017af8:	4608      	mov	r0, r1
 8017afa:	602b      	str	r3, [r5, #0]
 8017afc:	f7f1 ff99 	bl	8009a32 <_close>
 8017b00:	1c43      	adds	r3, r0, #1
 8017b02:	d102      	bne.n	8017b0a <_close_r+0x1a>
 8017b04:	682b      	ldr	r3, [r5, #0]
 8017b06:	b103      	cbz	r3, 8017b0a <_close_r+0x1a>
 8017b08:	6023      	str	r3, [r4, #0]
 8017b0a:	bd38      	pop	{r3, r4, r5, pc}
 8017b0c:	2000dd34 	.word	0x2000dd34

08017b10 <_reclaim_reent>:
 8017b10:	4b29      	ldr	r3, [pc, #164]	; (8017bb8 <_reclaim_reent+0xa8>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	4283      	cmp	r3, r0
 8017b16:	b570      	push	{r4, r5, r6, lr}
 8017b18:	4604      	mov	r4, r0
 8017b1a:	d04b      	beq.n	8017bb4 <_reclaim_reent+0xa4>
 8017b1c:	69c3      	ldr	r3, [r0, #28]
 8017b1e:	b143      	cbz	r3, 8017b32 <_reclaim_reent+0x22>
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d144      	bne.n	8017bb0 <_reclaim_reent+0xa0>
 8017b26:	69e3      	ldr	r3, [r4, #28]
 8017b28:	6819      	ldr	r1, [r3, #0]
 8017b2a:	b111      	cbz	r1, 8017b32 <_reclaim_reent+0x22>
 8017b2c:	4620      	mov	r0, r4
 8017b2e:	f000 ff31 	bl	8018994 <_free_r>
 8017b32:	6961      	ldr	r1, [r4, #20]
 8017b34:	b111      	cbz	r1, 8017b3c <_reclaim_reent+0x2c>
 8017b36:	4620      	mov	r0, r4
 8017b38:	f000 ff2c 	bl	8018994 <_free_r>
 8017b3c:	69e1      	ldr	r1, [r4, #28]
 8017b3e:	b111      	cbz	r1, 8017b46 <_reclaim_reent+0x36>
 8017b40:	4620      	mov	r0, r4
 8017b42:	f000 ff27 	bl	8018994 <_free_r>
 8017b46:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017b48:	b111      	cbz	r1, 8017b50 <_reclaim_reent+0x40>
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	f000 ff22 	bl	8018994 <_free_r>
 8017b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b52:	b111      	cbz	r1, 8017b5a <_reclaim_reent+0x4a>
 8017b54:	4620      	mov	r0, r4
 8017b56:	f000 ff1d 	bl	8018994 <_free_r>
 8017b5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017b5c:	b111      	cbz	r1, 8017b64 <_reclaim_reent+0x54>
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f000 ff18 	bl	8018994 <_free_r>
 8017b64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017b66:	b111      	cbz	r1, 8017b6e <_reclaim_reent+0x5e>
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f000 ff13 	bl	8018994 <_free_r>
 8017b6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017b70:	b111      	cbz	r1, 8017b78 <_reclaim_reent+0x68>
 8017b72:	4620      	mov	r0, r4
 8017b74:	f000 ff0e 	bl	8018994 <_free_r>
 8017b78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017b7a:	b111      	cbz	r1, 8017b82 <_reclaim_reent+0x72>
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	f000 ff09 	bl	8018994 <_free_r>
 8017b82:	6a23      	ldr	r3, [r4, #32]
 8017b84:	b1b3      	cbz	r3, 8017bb4 <_reclaim_reent+0xa4>
 8017b86:	4620      	mov	r0, r4
 8017b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b8c:	4718      	bx	r3
 8017b8e:	5949      	ldr	r1, [r1, r5]
 8017b90:	b941      	cbnz	r1, 8017ba4 <_reclaim_reent+0x94>
 8017b92:	3504      	adds	r5, #4
 8017b94:	69e3      	ldr	r3, [r4, #28]
 8017b96:	2d80      	cmp	r5, #128	; 0x80
 8017b98:	68d9      	ldr	r1, [r3, #12]
 8017b9a:	d1f8      	bne.n	8017b8e <_reclaim_reent+0x7e>
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f000 fef9 	bl	8018994 <_free_r>
 8017ba2:	e7c0      	b.n	8017b26 <_reclaim_reent+0x16>
 8017ba4:	680e      	ldr	r6, [r1, #0]
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	f000 fef4 	bl	8018994 <_free_r>
 8017bac:	4631      	mov	r1, r6
 8017bae:	e7ef      	b.n	8017b90 <_reclaim_reent+0x80>
 8017bb0:	2500      	movs	r5, #0
 8017bb2:	e7ef      	b.n	8017b94 <_reclaim_reent+0x84>
 8017bb4:	bd70      	pop	{r4, r5, r6, pc}
 8017bb6:	bf00      	nop
 8017bb8:	200004ac 	.word	0x200004ac

08017bbc <_lseek_r>:
 8017bbc:	b538      	push	{r3, r4, r5, lr}
 8017bbe:	4d07      	ldr	r5, [pc, #28]	; (8017bdc <_lseek_r+0x20>)
 8017bc0:	4604      	mov	r4, r0
 8017bc2:	4608      	mov	r0, r1
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	602a      	str	r2, [r5, #0]
 8017bca:	461a      	mov	r2, r3
 8017bcc:	f7f1 ff58 	bl	8009a80 <_lseek>
 8017bd0:	1c43      	adds	r3, r0, #1
 8017bd2:	d102      	bne.n	8017bda <_lseek_r+0x1e>
 8017bd4:	682b      	ldr	r3, [r5, #0]
 8017bd6:	b103      	cbz	r3, 8017bda <_lseek_r+0x1e>
 8017bd8:	6023      	str	r3, [r4, #0]
 8017bda:	bd38      	pop	{r3, r4, r5, pc}
 8017bdc:	2000dd34 	.word	0x2000dd34

08017be0 <_read_r>:
 8017be0:	b538      	push	{r3, r4, r5, lr}
 8017be2:	4d07      	ldr	r5, [pc, #28]	; (8017c00 <_read_r+0x20>)
 8017be4:	4604      	mov	r4, r0
 8017be6:	4608      	mov	r0, r1
 8017be8:	4611      	mov	r1, r2
 8017bea:	2200      	movs	r2, #0
 8017bec:	602a      	str	r2, [r5, #0]
 8017bee:	461a      	mov	r2, r3
 8017bf0:	f7f1 fee6 	bl	80099c0 <_read>
 8017bf4:	1c43      	adds	r3, r0, #1
 8017bf6:	d102      	bne.n	8017bfe <_read_r+0x1e>
 8017bf8:	682b      	ldr	r3, [r5, #0]
 8017bfa:	b103      	cbz	r3, 8017bfe <_read_r+0x1e>
 8017bfc:	6023      	str	r3, [r4, #0]
 8017bfe:	bd38      	pop	{r3, r4, r5, pc}
 8017c00:	2000dd34 	.word	0x2000dd34

08017c04 <_write_r>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	4d07      	ldr	r5, [pc, #28]	; (8017c24 <_write_r+0x20>)
 8017c08:	4604      	mov	r4, r0
 8017c0a:	4608      	mov	r0, r1
 8017c0c:	4611      	mov	r1, r2
 8017c0e:	2200      	movs	r2, #0
 8017c10:	602a      	str	r2, [r5, #0]
 8017c12:	461a      	mov	r2, r3
 8017c14:	f7f1 fef1 	bl	80099fa <_write>
 8017c18:	1c43      	adds	r3, r0, #1
 8017c1a:	d102      	bne.n	8017c22 <_write_r+0x1e>
 8017c1c:	682b      	ldr	r3, [r5, #0]
 8017c1e:	b103      	cbz	r3, 8017c22 <_write_r+0x1e>
 8017c20:	6023      	str	r3, [r4, #0]
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	2000dd34 	.word	0x2000dd34

08017c28 <__errno>:
 8017c28:	4b01      	ldr	r3, [pc, #4]	; (8017c30 <__errno+0x8>)
 8017c2a:	6818      	ldr	r0, [r3, #0]
 8017c2c:	4770      	bx	lr
 8017c2e:	bf00      	nop
 8017c30:	200004ac 	.word	0x200004ac

08017c34 <__libc_init_array>:
 8017c34:	b570      	push	{r4, r5, r6, lr}
 8017c36:	4d0d      	ldr	r5, [pc, #52]	; (8017c6c <__libc_init_array+0x38>)
 8017c38:	4c0d      	ldr	r4, [pc, #52]	; (8017c70 <__libc_init_array+0x3c>)
 8017c3a:	1b64      	subs	r4, r4, r5
 8017c3c:	10a4      	asrs	r4, r4, #2
 8017c3e:	2600      	movs	r6, #0
 8017c40:	42a6      	cmp	r6, r4
 8017c42:	d109      	bne.n	8017c58 <__libc_init_array+0x24>
 8017c44:	4d0b      	ldr	r5, [pc, #44]	; (8017c74 <__libc_init_array+0x40>)
 8017c46:	4c0c      	ldr	r4, [pc, #48]	; (8017c78 <__libc_init_array+0x44>)
 8017c48:	f001 fe00 	bl	801984c <_init>
 8017c4c:	1b64      	subs	r4, r4, r5
 8017c4e:	10a4      	asrs	r4, r4, #2
 8017c50:	2600      	movs	r6, #0
 8017c52:	42a6      	cmp	r6, r4
 8017c54:	d105      	bne.n	8017c62 <__libc_init_array+0x2e>
 8017c56:	bd70      	pop	{r4, r5, r6, pc}
 8017c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c5c:	4798      	blx	r3
 8017c5e:	3601      	adds	r6, #1
 8017c60:	e7ee      	b.n	8017c40 <__libc_init_array+0xc>
 8017c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c66:	4798      	blx	r3
 8017c68:	3601      	adds	r6, #1
 8017c6a:	e7f2      	b.n	8017c52 <__libc_init_array+0x1e>
 8017c6c:	0801c8dc 	.word	0x0801c8dc
 8017c70:	0801c8dc 	.word	0x0801c8dc
 8017c74:	0801c8dc 	.word	0x0801c8dc
 8017c78:	0801c8e0 	.word	0x0801c8e0

08017c7c <__retarget_lock_init_recursive>:
 8017c7c:	4770      	bx	lr

08017c7e <__retarget_lock_acquire_recursive>:
 8017c7e:	4770      	bx	lr

08017c80 <__retarget_lock_release_recursive>:
 8017c80:	4770      	bx	lr

08017c82 <memcpy>:
 8017c82:	440a      	add	r2, r1
 8017c84:	4291      	cmp	r1, r2
 8017c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017c8a:	d100      	bne.n	8017c8e <memcpy+0xc>
 8017c8c:	4770      	bx	lr
 8017c8e:	b510      	push	{r4, lr}
 8017c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c98:	4291      	cmp	r1, r2
 8017c9a:	d1f9      	bne.n	8017c90 <memcpy+0xe>
 8017c9c:	bd10      	pop	{r4, pc}

08017c9e <quorem>:
 8017c9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca2:	6903      	ldr	r3, [r0, #16]
 8017ca4:	690c      	ldr	r4, [r1, #16]
 8017ca6:	42a3      	cmp	r3, r4
 8017ca8:	4607      	mov	r7, r0
 8017caa:	db7e      	blt.n	8017daa <quorem+0x10c>
 8017cac:	3c01      	subs	r4, #1
 8017cae:	f101 0814 	add.w	r8, r1, #20
 8017cb2:	f100 0514 	add.w	r5, r0, #20
 8017cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017cba:	9301      	str	r3, [sp, #4]
 8017cbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017cc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017cc4:	3301      	adds	r3, #1
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017ccc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017cd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8017cd4:	d331      	bcc.n	8017d3a <quorem+0x9c>
 8017cd6:	f04f 0e00 	mov.w	lr, #0
 8017cda:	4640      	mov	r0, r8
 8017cdc:	46ac      	mov	ip, r5
 8017cde:	46f2      	mov	sl, lr
 8017ce0:	f850 2b04 	ldr.w	r2, [r0], #4
 8017ce4:	b293      	uxth	r3, r2
 8017ce6:	fb06 e303 	mla	r3, r6, r3, lr
 8017cea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017cee:	0c1a      	lsrs	r2, r3, #16
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	ebaa 0303 	sub.w	r3, sl, r3
 8017cf6:	f8dc a000 	ldr.w	sl, [ip]
 8017cfa:	fa13 f38a 	uxtah	r3, r3, sl
 8017cfe:	fb06 220e 	mla	r2, r6, lr, r2
 8017d02:	9300      	str	r3, [sp, #0]
 8017d04:	9b00      	ldr	r3, [sp, #0]
 8017d06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017d0a:	b292      	uxth	r2, r2
 8017d0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017d10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d14:	f8bd 3000 	ldrh.w	r3, [sp]
 8017d18:	4581      	cmp	r9, r0
 8017d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d1e:	f84c 3b04 	str.w	r3, [ip], #4
 8017d22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017d26:	d2db      	bcs.n	8017ce0 <quorem+0x42>
 8017d28:	f855 300b 	ldr.w	r3, [r5, fp]
 8017d2c:	b92b      	cbnz	r3, 8017d3a <quorem+0x9c>
 8017d2e:	9b01      	ldr	r3, [sp, #4]
 8017d30:	3b04      	subs	r3, #4
 8017d32:	429d      	cmp	r5, r3
 8017d34:	461a      	mov	r2, r3
 8017d36:	d32c      	bcc.n	8017d92 <quorem+0xf4>
 8017d38:	613c      	str	r4, [r7, #16]
 8017d3a:	4638      	mov	r0, r7
 8017d3c:	f001 f9a6 	bl	801908c <__mcmp>
 8017d40:	2800      	cmp	r0, #0
 8017d42:	db22      	blt.n	8017d8a <quorem+0xec>
 8017d44:	3601      	adds	r6, #1
 8017d46:	4629      	mov	r1, r5
 8017d48:	2000      	movs	r0, #0
 8017d4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8017d4e:	f8d1 c000 	ldr.w	ip, [r1]
 8017d52:	b293      	uxth	r3, r2
 8017d54:	1ac3      	subs	r3, r0, r3
 8017d56:	0c12      	lsrs	r2, r2, #16
 8017d58:	fa13 f38c 	uxtah	r3, r3, ip
 8017d5c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017d64:	b29b      	uxth	r3, r3
 8017d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d6a:	45c1      	cmp	r9, r8
 8017d6c:	f841 3b04 	str.w	r3, [r1], #4
 8017d70:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017d74:	d2e9      	bcs.n	8017d4a <quorem+0xac>
 8017d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d7e:	b922      	cbnz	r2, 8017d8a <quorem+0xec>
 8017d80:	3b04      	subs	r3, #4
 8017d82:	429d      	cmp	r5, r3
 8017d84:	461a      	mov	r2, r3
 8017d86:	d30a      	bcc.n	8017d9e <quorem+0x100>
 8017d88:	613c      	str	r4, [r7, #16]
 8017d8a:	4630      	mov	r0, r6
 8017d8c:	b003      	add	sp, #12
 8017d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d92:	6812      	ldr	r2, [r2, #0]
 8017d94:	3b04      	subs	r3, #4
 8017d96:	2a00      	cmp	r2, #0
 8017d98:	d1ce      	bne.n	8017d38 <quorem+0x9a>
 8017d9a:	3c01      	subs	r4, #1
 8017d9c:	e7c9      	b.n	8017d32 <quorem+0x94>
 8017d9e:	6812      	ldr	r2, [r2, #0]
 8017da0:	3b04      	subs	r3, #4
 8017da2:	2a00      	cmp	r2, #0
 8017da4:	d1f0      	bne.n	8017d88 <quorem+0xea>
 8017da6:	3c01      	subs	r4, #1
 8017da8:	e7eb      	b.n	8017d82 <quorem+0xe4>
 8017daa:	2000      	movs	r0, #0
 8017dac:	e7ee      	b.n	8017d8c <quorem+0xee>
	...

08017db0 <_dtoa_r>:
 8017db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017db4:	ed2d 8b04 	vpush	{d8-d9}
 8017db8:	69c5      	ldr	r5, [r0, #28]
 8017dba:	b093      	sub	sp, #76	; 0x4c
 8017dbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017dc0:	ec57 6b10 	vmov	r6, r7, d0
 8017dc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017dc8:	9107      	str	r1, [sp, #28]
 8017dca:	4604      	mov	r4, r0
 8017dcc:	920a      	str	r2, [sp, #40]	; 0x28
 8017dce:	930d      	str	r3, [sp, #52]	; 0x34
 8017dd0:	b975      	cbnz	r5, 8017df0 <_dtoa_r+0x40>
 8017dd2:	2010      	movs	r0, #16
 8017dd4:	f000 fe2a 	bl	8018a2c <malloc>
 8017dd8:	4602      	mov	r2, r0
 8017dda:	61e0      	str	r0, [r4, #28]
 8017ddc:	b920      	cbnz	r0, 8017de8 <_dtoa_r+0x38>
 8017dde:	4bae      	ldr	r3, [pc, #696]	; (8018098 <_dtoa_r+0x2e8>)
 8017de0:	21ef      	movs	r1, #239	; 0xef
 8017de2:	48ae      	ldr	r0, [pc, #696]	; (801809c <_dtoa_r+0x2ec>)
 8017de4:	f001 fc5e 	bl	80196a4 <__assert_func>
 8017de8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017dec:	6005      	str	r5, [r0, #0]
 8017dee:	60c5      	str	r5, [r0, #12]
 8017df0:	69e3      	ldr	r3, [r4, #28]
 8017df2:	6819      	ldr	r1, [r3, #0]
 8017df4:	b151      	cbz	r1, 8017e0c <_dtoa_r+0x5c>
 8017df6:	685a      	ldr	r2, [r3, #4]
 8017df8:	604a      	str	r2, [r1, #4]
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	4093      	lsls	r3, r2
 8017dfe:	608b      	str	r3, [r1, #8]
 8017e00:	4620      	mov	r0, r4
 8017e02:	f000 ff07 	bl	8018c14 <_Bfree>
 8017e06:	69e3      	ldr	r3, [r4, #28]
 8017e08:	2200      	movs	r2, #0
 8017e0a:	601a      	str	r2, [r3, #0]
 8017e0c:	1e3b      	subs	r3, r7, #0
 8017e0e:	bfbb      	ittet	lt
 8017e10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017e14:	9303      	strlt	r3, [sp, #12]
 8017e16:	2300      	movge	r3, #0
 8017e18:	2201      	movlt	r2, #1
 8017e1a:	bfac      	ite	ge
 8017e1c:	f8c8 3000 	strge.w	r3, [r8]
 8017e20:	f8c8 2000 	strlt.w	r2, [r8]
 8017e24:	4b9e      	ldr	r3, [pc, #632]	; (80180a0 <_dtoa_r+0x2f0>)
 8017e26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8017e2a:	ea33 0308 	bics.w	r3, r3, r8
 8017e2e:	d11b      	bne.n	8017e68 <_dtoa_r+0xb8>
 8017e30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8017e36:	6013      	str	r3, [r2, #0]
 8017e38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8017e3c:	4333      	orrs	r3, r6
 8017e3e:	f000 8593 	beq.w	8018968 <_dtoa_r+0xbb8>
 8017e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e44:	b963      	cbnz	r3, 8017e60 <_dtoa_r+0xb0>
 8017e46:	4b97      	ldr	r3, [pc, #604]	; (80180a4 <_dtoa_r+0x2f4>)
 8017e48:	e027      	b.n	8017e9a <_dtoa_r+0xea>
 8017e4a:	4b97      	ldr	r3, [pc, #604]	; (80180a8 <_dtoa_r+0x2f8>)
 8017e4c:	9300      	str	r3, [sp, #0]
 8017e4e:	3308      	adds	r3, #8
 8017e50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017e52:	6013      	str	r3, [r2, #0]
 8017e54:	9800      	ldr	r0, [sp, #0]
 8017e56:	b013      	add	sp, #76	; 0x4c
 8017e58:	ecbd 8b04 	vpop	{d8-d9}
 8017e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e60:	4b90      	ldr	r3, [pc, #576]	; (80180a4 <_dtoa_r+0x2f4>)
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	3303      	adds	r3, #3
 8017e66:	e7f3      	b.n	8017e50 <_dtoa_r+0xa0>
 8017e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	ec51 0b17 	vmov	r0, r1, d7
 8017e72:	eeb0 8a47 	vmov.f32	s16, s14
 8017e76:	eef0 8a67 	vmov.f32	s17, s15
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	f7e8 fe34 	bl	8000ae8 <__aeabi_dcmpeq>
 8017e80:	4681      	mov	r9, r0
 8017e82:	b160      	cbz	r0, 8017e9e <_dtoa_r+0xee>
 8017e84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017e86:	2301      	movs	r3, #1
 8017e88:	6013      	str	r3, [r2, #0]
 8017e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	f000 8568 	beq.w	8018962 <_dtoa_r+0xbb2>
 8017e92:	4b86      	ldr	r3, [pc, #536]	; (80180ac <_dtoa_r+0x2fc>)
 8017e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017e96:	6013      	str	r3, [r2, #0]
 8017e98:	3b01      	subs	r3, #1
 8017e9a:	9300      	str	r3, [sp, #0]
 8017e9c:	e7da      	b.n	8017e54 <_dtoa_r+0xa4>
 8017e9e:	aa10      	add	r2, sp, #64	; 0x40
 8017ea0:	a911      	add	r1, sp, #68	; 0x44
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	eeb0 0a48 	vmov.f32	s0, s16
 8017ea8:	eef0 0a68 	vmov.f32	s1, s17
 8017eac:	f001 f994 	bl	80191d8 <__d2b>
 8017eb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017eb4:	4682      	mov	sl, r0
 8017eb6:	2d00      	cmp	r5, #0
 8017eb8:	d07f      	beq.n	8017fba <_dtoa_r+0x20a>
 8017eba:	ee18 3a90 	vmov	r3, s17
 8017ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017ec2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017ec6:	ec51 0b18 	vmov	r0, r1, d8
 8017eca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017ece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017ed2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017ed6:	4619      	mov	r1, r3
 8017ed8:	2200      	movs	r2, #0
 8017eda:	4b75      	ldr	r3, [pc, #468]	; (80180b0 <_dtoa_r+0x300>)
 8017edc:	f7e8 f9e4 	bl	80002a8 <__aeabi_dsub>
 8017ee0:	a367      	add	r3, pc, #412	; (adr r3, 8018080 <_dtoa_r+0x2d0>)
 8017ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ee6:	f7e8 fb97 	bl	8000618 <__aeabi_dmul>
 8017eea:	a367      	add	r3, pc, #412	; (adr r3, 8018088 <_dtoa_r+0x2d8>)
 8017eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ef0:	f7e8 f9dc 	bl	80002ac <__adddf3>
 8017ef4:	4606      	mov	r6, r0
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	460f      	mov	r7, r1
 8017efa:	f7e8 fb23 	bl	8000544 <__aeabi_i2d>
 8017efe:	a364      	add	r3, pc, #400	; (adr r3, 8018090 <_dtoa_r+0x2e0>)
 8017f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f04:	f7e8 fb88 	bl	8000618 <__aeabi_dmul>
 8017f08:	4602      	mov	r2, r0
 8017f0a:	460b      	mov	r3, r1
 8017f0c:	4630      	mov	r0, r6
 8017f0e:	4639      	mov	r1, r7
 8017f10:	f7e8 f9cc 	bl	80002ac <__adddf3>
 8017f14:	4606      	mov	r6, r0
 8017f16:	460f      	mov	r7, r1
 8017f18:	f7e8 fe2e 	bl	8000b78 <__aeabi_d2iz>
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	4683      	mov	fp, r0
 8017f20:	2300      	movs	r3, #0
 8017f22:	4630      	mov	r0, r6
 8017f24:	4639      	mov	r1, r7
 8017f26:	f7e8 fde9 	bl	8000afc <__aeabi_dcmplt>
 8017f2a:	b148      	cbz	r0, 8017f40 <_dtoa_r+0x190>
 8017f2c:	4658      	mov	r0, fp
 8017f2e:	f7e8 fb09 	bl	8000544 <__aeabi_i2d>
 8017f32:	4632      	mov	r2, r6
 8017f34:	463b      	mov	r3, r7
 8017f36:	f7e8 fdd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8017f3a:	b908      	cbnz	r0, 8017f40 <_dtoa_r+0x190>
 8017f3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017f40:	f1bb 0f16 	cmp.w	fp, #22
 8017f44:	d857      	bhi.n	8017ff6 <_dtoa_r+0x246>
 8017f46:	4b5b      	ldr	r3, [pc, #364]	; (80180b4 <_dtoa_r+0x304>)
 8017f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f50:	ec51 0b18 	vmov	r0, r1, d8
 8017f54:	f7e8 fdd2 	bl	8000afc <__aeabi_dcmplt>
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	d04e      	beq.n	8017ffa <_dtoa_r+0x24a>
 8017f5c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017f60:	2300      	movs	r3, #0
 8017f62:	930c      	str	r3, [sp, #48]	; 0x30
 8017f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f66:	1b5b      	subs	r3, r3, r5
 8017f68:	1e5a      	subs	r2, r3, #1
 8017f6a:	bf45      	ittet	mi
 8017f6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017f70:	9305      	strmi	r3, [sp, #20]
 8017f72:	2300      	movpl	r3, #0
 8017f74:	2300      	movmi	r3, #0
 8017f76:	9206      	str	r2, [sp, #24]
 8017f78:	bf54      	ite	pl
 8017f7a:	9305      	strpl	r3, [sp, #20]
 8017f7c:	9306      	strmi	r3, [sp, #24]
 8017f7e:	f1bb 0f00 	cmp.w	fp, #0
 8017f82:	db3c      	blt.n	8017ffe <_dtoa_r+0x24e>
 8017f84:	9b06      	ldr	r3, [sp, #24]
 8017f86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017f8a:	445b      	add	r3, fp
 8017f8c:	9306      	str	r3, [sp, #24]
 8017f8e:	2300      	movs	r3, #0
 8017f90:	9308      	str	r3, [sp, #32]
 8017f92:	9b07      	ldr	r3, [sp, #28]
 8017f94:	2b09      	cmp	r3, #9
 8017f96:	d868      	bhi.n	801806a <_dtoa_r+0x2ba>
 8017f98:	2b05      	cmp	r3, #5
 8017f9a:	bfc4      	itt	gt
 8017f9c:	3b04      	subgt	r3, #4
 8017f9e:	9307      	strgt	r3, [sp, #28]
 8017fa0:	9b07      	ldr	r3, [sp, #28]
 8017fa2:	f1a3 0302 	sub.w	r3, r3, #2
 8017fa6:	bfcc      	ite	gt
 8017fa8:	2500      	movgt	r5, #0
 8017faa:	2501      	movle	r5, #1
 8017fac:	2b03      	cmp	r3, #3
 8017fae:	f200 8085 	bhi.w	80180bc <_dtoa_r+0x30c>
 8017fb2:	e8df f003 	tbb	[pc, r3]
 8017fb6:	3b2e      	.short	0x3b2e
 8017fb8:	5839      	.short	0x5839
 8017fba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017fbe:	441d      	add	r5, r3
 8017fc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017fc4:	2b20      	cmp	r3, #32
 8017fc6:	bfc1      	itttt	gt
 8017fc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017fcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8017fd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017fd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017fd8:	bfd6      	itet	le
 8017fda:	f1c3 0320 	rsble	r3, r3, #32
 8017fde:	ea48 0003 	orrgt.w	r0, r8, r3
 8017fe2:	fa06 f003 	lslle.w	r0, r6, r3
 8017fe6:	f7e8 fa9d 	bl	8000524 <__aeabi_ui2d>
 8017fea:	2201      	movs	r2, #1
 8017fec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017ff0:	3d01      	subs	r5, #1
 8017ff2:	920e      	str	r2, [sp, #56]	; 0x38
 8017ff4:	e76f      	b.n	8017ed6 <_dtoa_r+0x126>
 8017ff6:	2301      	movs	r3, #1
 8017ff8:	e7b3      	b.n	8017f62 <_dtoa_r+0x1b2>
 8017ffa:	900c      	str	r0, [sp, #48]	; 0x30
 8017ffc:	e7b2      	b.n	8017f64 <_dtoa_r+0x1b4>
 8017ffe:	9b05      	ldr	r3, [sp, #20]
 8018000:	eba3 030b 	sub.w	r3, r3, fp
 8018004:	9305      	str	r3, [sp, #20]
 8018006:	f1cb 0300 	rsb	r3, fp, #0
 801800a:	9308      	str	r3, [sp, #32]
 801800c:	2300      	movs	r3, #0
 801800e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018010:	e7bf      	b.n	8017f92 <_dtoa_r+0x1e2>
 8018012:	2300      	movs	r3, #0
 8018014:	9309      	str	r3, [sp, #36]	; 0x24
 8018016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018018:	2b00      	cmp	r3, #0
 801801a:	dc52      	bgt.n	80180c2 <_dtoa_r+0x312>
 801801c:	2301      	movs	r3, #1
 801801e:	9301      	str	r3, [sp, #4]
 8018020:	9304      	str	r3, [sp, #16]
 8018022:	461a      	mov	r2, r3
 8018024:	920a      	str	r2, [sp, #40]	; 0x28
 8018026:	e00b      	b.n	8018040 <_dtoa_r+0x290>
 8018028:	2301      	movs	r3, #1
 801802a:	e7f3      	b.n	8018014 <_dtoa_r+0x264>
 801802c:	2300      	movs	r3, #0
 801802e:	9309      	str	r3, [sp, #36]	; 0x24
 8018030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018032:	445b      	add	r3, fp
 8018034:	9301      	str	r3, [sp, #4]
 8018036:	3301      	adds	r3, #1
 8018038:	2b01      	cmp	r3, #1
 801803a:	9304      	str	r3, [sp, #16]
 801803c:	bfb8      	it	lt
 801803e:	2301      	movlt	r3, #1
 8018040:	69e0      	ldr	r0, [r4, #28]
 8018042:	2100      	movs	r1, #0
 8018044:	2204      	movs	r2, #4
 8018046:	f102 0614 	add.w	r6, r2, #20
 801804a:	429e      	cmp	r6, r3
 801804c:	d93d      	bls.n	80180ca <_dtoa_r+0x31a>
 801804e:	6041      	str	r1, [r0, #4]
 8018050:	4620      	mov	r0, r4
 8018052:	f000 fd9f 	bl	8018b94 <_Balloc>
 8018056:	9000      	str	r0, [sp, #0]
 8018058:	2800      	cmp	r0, #0
 801805a:	d139      	bne.n	80180d0 <_dtoa_r+0x320>
 801805c:	4b16      	ldr	r3, [pc, #88]	; (80180b8 <_dtoa_r+0x308>)
 801805e:	4602      	mov	r2, r0
 8018060:	f240 11af 	movw	r1, #431	; 0x1af
 8018064:	e6bd      	b.n	8017de2 <_dtoa_r+0x32>
 8018066:	2301      	movs	r3, #1
 8018068:	e7e1      	b.n	801802e <_dtoa_r+0x27e>
 801806a:	2501      	movs	r5, #1
 801806c:	2300      	movs	r3, #0
 801806e:	9307      	str	r3, [sp, #28]
 8018070:	9509      	str	r5, [sp, #36]	; 0x24
 8018072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018076:	9301      	str	r3, [sp, #4]
 8018078:	9304      	str	r3, [sp, #16]
 801807a:	2200      	movs	r2, #0
 801807c:	2312      	movs	r3, #18
 801807e:	e7d1      	b.n	8018024 <_dtoa_r+0x274>
 8018080:	636f4361 	.word	0x636f4361
 8018084:	3fd287a7 	.word	0x3fd287a7
 8018088:	8b60c8b3 	.word	0x8b60c8b3
 801808c:	3fc68a28 	.word	0x3fc68a28
 8018090:	509f79fb 	.word	0x509f79fb
 8018094:	3fd34413 	.word	0x3fd34413
 8018098:	0801c6a6 	.word	0x0801c6a6
 801809c:	0801c6bd 	.word	0x0801c6bd
 80180a0:	7ff00000 	.word	0x7ff00000
 80180a4:	0801c6a2 	.word	0x0801c6a2
 80180a8:	0801c699 	.word	0x0801c699
 80180ac:	0801c676 	.word	0x0801c676
 80180b0:	3ff80000 	.word	0x3ff80000
 80180b4:	0801c7a8 	.word	0x0801c7a8
 80180b8:	0801c715 	.word	0x0801c715
 80180bc:	2301      	movs	r3, #1
 80180be:	9309      	str	r3, [sp, #36]	; 0x24
 80180c0:	e7d7      	b.n	8018072 <_dtoa_r+0x2c2>
 80180c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180c4:	9301      	str	r3, [sp, #4]
 80180c6:	9304      	str	r3, [sp, #16]
 80180c8:	e7ba      	b.n	8018040 <_dtoa_r+0x290>
 80180ca:	3101      	adds	r1, #1
 80180cc:	0052      	lsls	r2, r2, #1
 80180ce:	e7ba      	b.n	8018046 <_dtoa_r+0x296>
 80180d0:	69e3      	ldr	r3, [r4, #28]
 80180d2:	9a00      	ldr	r2, [sp, #0]
 80180d4:	601a      	str	r2, [r3, #0]
 80180d6:	9b04      	ldr	r3, [sp, #16]
 80180d8:	2b0e      	cmp	r3, #14
 80180da:	f200 80a8 	bhi.w	801822e <_dtoa_r+0x47e>
 80180de:	2d00      	cmp	r5, #0
 80180e0:	f000 80a5 	beq.w	801822e <_dtoa_r+0x47e>
 80180e4:	f1bb 0f00 	cmp.w	fp, #0
 80180e8:	dd38      	ble.n	801815c <_dtoa_r+0x3ac>
 80180ea:	4bc0      	ldr	r3, [pc, #768]	; (80183ec <_dtoa_r+0x63c>)
 80180ec:	f00b 020f 	and.w	r2, fp, #15
 80180f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80180f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80180f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80180fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8018100:	d019      	beq.n	8018136 <_dtoa_r+0x386>
 8018102:	4bbb      	ldr	r3, [pc, #748]	; (80183f0 <_dtoa_r+0x640>)
 8018104:	ec51 0b18 	vmov	r0, r1, d8
 8018108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801810c:	f7e8 fbae 	bl	800086c <__aeabi_ddiv>
 8018110:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018114:	f008 080f 	and.w	r8, r8, #15
 8018118:	2503      	movs	r5, #3
 801811a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80183f0 <_dtoa_r+0x640>
 801811e:	f1b8 0f00 	cmp.w	r8, #0
 8018122:	d10a      	bne.n	801813a <_dtoa_r+0x38a>
 8018124:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018128:	4632      	mov	r2, r6
 801812a:	463b      	mov	r3, r7
 801812c:	f7e8 fb9e 	bl	800086c <__aeabi_ddiv>
 8018130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018134:	e02b      	b.n	801818e <_dtoa_r+0x3de>
 8018136:	2502      	movs	r5, #2
 8018138:	e7ef      	b.n	801811a <_dtoa_r+0x36a>
 801813a:	f018 0f01 	tst.w	r8, #1
 801813e:	d008      	beq.n	8018152 <_dtoa_r+0x3a2>
 8018140:	4630      	mov	r0, r6
 8018142:	4639      	mov	r1, r7
 8018144:	e9d9 2300 	ldrd	r2, r3, [r9]
 8018148:	f7e8 fa66 	bl	8000618 <__aeabi_dmul>
 801814c:	3501      	adds	r5, #1
 801814e:	4606      	mov	r6, r0
 8018150:	460f      	mov	r7, r1
 8018152:	ea4f 0868 	mov.w	r8, r8, asr #1
 8018156:	f109 0908 	add.w	r9, r9, #8
 801815a:	e7e0      	b.n	801811e <_dtoa_r+0x36e>
 801815c:	f000 809f 	beq.w	801829e <_dtoa_r+0x4ee>
 8018160:	f1cb 0600 	rsb	r6, fp, #0
 8018164:	4ba1      	ldr	r3, [pc, #644]	; (80183ec <_dtoa_r+0x63c>)
 8018166:	4fa2      	ldr	r7, [pc, #648]	; (80183f0 <_dtoa_r+0x640>)
 8018168:	f006 020f 	and.w	r2, r6, #15
 801816c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018174:	ec51 0b18 	vmov	r0, r1, d8
 8018178:	f7e8 fa4e 	bl	8000618 <__aeabi_dmul>
 801817c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018180:	1136      	asrs	r6, r6, #4
 8018182:	2300      	movs	r3, #0
 8018184:	2502      	movs	r5, #2
 8018186:	2e00      	cmp	r6, #0
 8018188:	d17e      	bne.n	8018288 <_dtoa_r+0x4d8>
 801818a:	2b00      	cmp	r3, #0
 801818c:	d1d0      	bne.n	8018130 <_dtoa_r+0x380>
 801818e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018190:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8018194:	2b00      	cmp	r3, #0
 8018196:	f000 8084 	beq.w	80182a2 <_dtoa_r+0x4f2>
 801819a:	4b96      	ldr	r3, [pc, #600]	; (80183f4 <_dtoa_r+0x644>)
 801819c:	2200      	movs	r2, #0
 801819e:	4640      	mov	r0, r8
 80181a0:	4649      	mov	r1, r9
 80181a2:	f7e8 fcab 	bl	8000afc <__aeabi_dcmplt>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d07b      	beq.n	80182a2 <_dtoa_r+0x4f2>
 80181aa:	9b04      	ldr	r3, [sp, #16]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d078      	beq.n	80182a2 <_dtoa_r+0x4f2>
 80181b0:	9b01      	ldr	r3, [sp, #4]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	dd39      	ble.n	801822a <_dtoa_r+0x47a>
 80181b6:	4b90      	ldr	r3, [pc, #576]	; (80183f8 <_dtoa_r+0x648>)
 80181b8:	2200      	movs	r2, #0
 80181ba:	4640      	mov	r0, r8
 80181bc:	4649      	mov	r1, r9
 80181be:	f7e8 fa2b 	bl	8000618 <__aeabi_dmul>
 80181c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181c6:	9e01      	ldr	r6, [sp, #4]
 80181c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80181cc:	3501      	adds	r5, #1
 80181ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80181d2:	4628      	mov	r0, r5
 80181d4:	f7e8 f9b6 	bl	8000544 <__aeabi_i2d>
 80181d8:	4642      	mov	r2, r8
 80181da:	464b      	mov	r3, r9
 80181dc:	f7e8 fa1c 	bl	8000618 <__aeabi_dmul>
 80181e0:	4b86      	ldr	r3, [pc, #536]	; (80183fc <_dtoa_r+0x64c>)
 80181e2:	2200      	movs	r2, #0
 80181e4:	f7e8 f862 	bl	80002ac <__adddf3>
 80181e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80181ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181f0:	9303      	str	r3, [sp, #12]
 80181f2:	2e00      	cmp	r6, #0
 80181f4:	d158      	bne.n	80182a8 <_dtoa_r+0x4f8>
 80181f6:	4b82      	ldr	r3, [pc, #520]	; (8018400 <_dtoa_r+0x650>)
 80181f8:	2200      	movs	r2, #0
 80181fa:	4640      	mov	r0, r8
 80181fc:	4649      	mov	r1, r9
 80181fe:	f7e8 f853 	bl	80002a8 <__aeabi_dsub>
 8018202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018206:	4680      	mov	r8, r0
 8018208:	4689      	mov	r9, r1
 801820a:	f7e8 fc95 	bl	8000b38 <__aeabi_dcmpgt>
 801820e:	2800      	cmp	r0, #0
 8018210:	f040 8296 	bne.w	8018740 <_dtoa_r+0x990>
 8018214:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018218:	4640      	mov	r0, r8
 801821a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801821e:	4649      	mov	r1, r9
 8018220:	f7e8 fc6c 	bl	8000afc <__aeabi_dcmplt>
 8018224:	2800      	cmp	r0, #0
 8018226:	f040 8289 	bne.w	801873c <_dtoa_r+0x98c>
 801822a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801822e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018230:	2b00      	cmp	r3, #0
 8018232:	f2c0 814e 	blt.w	80184d2 <_dtoa_r+0x722>
 8018236:	f1bb 0f0e 	cmp.w	fp, #14
 801823a:	f300 814a 	bgt.w	80184d2 <_dtoa_r+0x722>
 801823e:	4b6b      	ldr	r3, [pc, #428]	; (80183ec <_dtoa_r+0x63c>)
 8018240:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801824a:	2b00      	cmp	r3, #0
 801824c:	f280 80dc 	bge.w	8018408 <_dtoa_r+0x658>
 8018250:	9b04      	ldr	r3, [sp, #16]
 8018252:	2b00      	cmp	r3, #0
 8018254:	f300 80d8 	bgt.w	8018408 <_dtoa_r+0x658>
 8018258:	f040 826f 	bne.w	801873a <_dtoa_r+0x98a>
 801825c:	4b68      	ldr	r3, [pc, #416]	; (8018400 <_dtoa_r+0x650>)
 801825e:	2200      	movs	r2, #0
 8018260:	4640      	mov	r0, r8
 8018262:	4649      	mov	r1, r9
 8018264:	f7e8 f9d8 	bl	8000618 <__aeabi_dmul>
 8018268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801826c:	f7e8 fc5a 	bl	8000b24 <__aeabi_dcmpge>
 8018270:	9e04      	ldr	r6, [sp, #16]
 8018272:	4637      	mov	r7, r6
 8018274:	2800      	cmp	r0, #0
 8018276:	f040 8245 	bne.w	8018704 <_dtoa_r+0x954>
 801827a:	9d00      	ldr	r5, [sp, #0]
 801827c:	2331      	movs	r3, #49	; 0x31
 801827e:	f805 3b01 	strb.w	r3, [r5], #1
 8018282:	f10b 0b01 	add.w	fp, fp, #1
 8018286:	e241      	b.n	801870c <_dtoa_r+0x95c>
 8018288:	07f2      	lsls	r2, r6, #31
 801828a:	d505      	bpl.n	8018298 <_dtoa_r+0x4e8>
 801828c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018290:	f7e8 f9c2 	bl	8000618 <__aeabi_dmul>
 8018294:	3501      	adds	r5, #1
 8018296:	2301      	movs	r3, #1
 8018298:	1076      	asrs	r6, r6, #1
 801829a:	3708      	adds	r7, #8
 801829c:	e773      	b.n	8018186 <_dtoa_r+0x3d6>
 801829e:	2502      	movs	r5, #2
 80182a0:	e775      	b.n	801818e <_dtoa_r+0x3de>
 80182a2:	9e04      	ldr	r6, [sp, #16]
 80182a4:	465f      	mov	r7, fp
 80182a6:	e792      	b.n	80181ce <_dtoa_r+0x41e>
 80182a8:	9900      	ldr	r1, [sp, #0]
 80182aa:	4b50      	ldr	r3, [pc, #320]	; (80183ec <_dtoa_r+0x63c>)
 80182ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80182b0:	4431      	add	r1, r6
 80182b2:	9102      	str	r1, [sp, #8]
 80182b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80182b6:	eeb0 9a47 	vmov.f32	s18, s14
 80182ba:	eef0 9a67 	vmov.f32	s19, s15
 80182be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80182c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80182c6:	2900      	cmp	r1, #0
 80182c8:	d044      	beq.n	8018354 <_dtoa_r+0x5a4>
 80182ca:	494e      	ldr	r1, [pc, #312]	; (8018404 <_dtoa_r+0x654>)
 80182cc:	2000      	movs	r0, #0
 80182ce:	f7e8 facd 	bl	800086c <__aeabi_ddiv>
 80182d2:	ec53 2b19 	vmov	r2, r3, d9
 80182d6:	f7e7 ffe7 	bl	80002a8 <__aeabi_dsub>
 80182da:	9d00      	ldr	r5, [sp, #0]
 80182dc:	ec41 0b19 	vmov	d9, r0, r1
 80182e0:	4649      	mov	r1, r9
 80182e2:	4640      	mov	r0, r8
 80182e4:	f7e8 fc48 	bl	8000b78 <__aeabi_d2iz>
 80182e8:	4606      	mov	r6, r0
 80182ea:	f7e8 f92b 	bl	8000544 <__aeabi_i2d>
 80182ee:	4602      	mov	r2, r0
 80182f0:	460b      	mov	r3, r1
 80182f2:	4640      	mov	r0, r8
 80182f4:	4649      	mov	r1, r9
 80182f6:	f7e7 ffd7 	bl	80002a8 <__aeabi_dsub>
 80182fa:	3630      	adds	r6, #48	; 0x30
 80182fc:	f805 6b01 	strb.w	r6, [r5], #1
 8018300:	ec53 2b19 	vmov	r2, r3, d9
 8018304:	4680      	mov	r8, r0
 8018306:	4689      	mov	r9, r1
 8018308:	f7e8 fbf8 	bl	8000afc <__aeabi_dcmplt>
 801830c:	2800      	cmp	r0, #0
 801830e:	d164      	bne.n	80183da <_dtoa_r+0x62a>
 8018310:	4642      	mov	r2, r8
 8018312:	464b      	mov	r3, r9
 8018314:	4937      	ldr	r1, [pc, #220]	; (80183f4 <_dtoa_r+0x644>)
 8018316:	2000      	movs	r0, #0
 8018318:	f7e7 ffc6 	bl	80002a8 <__aeabi_dsub>
 801831c:	ec53 2b19 	vmov	r2, r3, d9
 8018320:	f7e8 fbec 	bl	8000afc <__aeabi_dcmplt>
 8018324:	2800      	cmp	r0, #0
 8018326:	f040 80b6 	bne.w	8018496 <_dtoa_r+0x6e6>
 801832a:	9b02      	ldr	r3, [sp, #8]
 801832c:	429d      	cmp	r5, r3
 801832e:	f43f af7c 	beq.w	801822a <_dtoa_r+0x47a>
 8018332:	4b31      	ldr	r3, [pc, #196]	; (80183f8 <_dtoa_r+0x648>)
 8018334:	ec51 0b19 	vmov	r0, r1, d9
 8018338:	2200      	movs	r2, #0
 801833a:	f7e8 f96d 	bl	8000618 <__aeabi_dmul>
 801833e:	4b2e      	ldr	r3, [pc, #184]	; (80183f8 <_dtoa_r+0x648>)
 8018340:	ec41 0b19 	vmov	d9, r0, r1
 8018344:	2200      	movs	r2, #0
 8018346:	4640      	mov	r0, r8
 8018348:	4649      	mov	r1, r9
 801834a:	f7e8 f965 	bl	8000618 <__aeabi_dmul>
 801834e:	4680      	mov	r8, r0
 8018350:	4689      	mov	r9, r1
 8018352:	e7c5      	b.n	80182e0 <_dtoa_r+0x530>
 8018354:	ec51 0b17 	vmov	r0, r1, d7
 8018358:	f7e8 f95e 	bl	8000618 <__aeabi_dmul>
 801835c:	9b02      	ldr	r3, [sp, #8]
 801835e:	9d00      	ldr	r5, [sp, #0]
 8018360:	930f      	str	r3, [sp, #60]	; 0x3c
 8018362:	ec41 0b19 	vmov	d9, r0, r1
 8018366:	4649      	mov	r1, r9
 8018368:	4640      	mov	r0, r8
 801836a:	f7e8 fc05 	bl	8000b78 <__aeabi_d2iz>
 801836e:	4606      	mov	r6, r0
 8018370:	f7e8 f8e8 	bl	8000544 <__aeabi_i2d>
 8018374:	3630      	adds	r6, #48	; 0x30
 8018376:	4602      	mov	r2, r0
 8018378:	460b      	mov	r3, r1
 801837a:	4640      	mov	r0, r8
 801837c:	4649      	mov	r1, r9
 801837e:	f7e7 ff93 	bl	80002a8 <__aeabi_dsub>
 8018382:	f805 6b01 	strb.w	r6, [r5], #1
 8018386:	9b02      	ldr	r3, [sp, #8]
 8018388:	429d      	cmp	r5, r3
 801838a:	4680      	mov	r8, r0
 801838c:	4689      	mov	r9, r1
 801838e:	f04f 0200 	mov.w	r2, #0
 8018392:	d124      	bne.n	80183de <_dtoa_r+0x62e>
 8018394:	4b1b      	ldr	r3, [pc, #108]	; (8018404 <_dtoa_r+0x654>)
 8018396:	ec51 0b19 	vmov	r0, r1, d9
 801839a:	f7e7 ff87 	bl	80002ac <__adddf3>
 801839e:	4602      	mov	r2, r0
 80183a0:	460b      	mov	r3, r1
 80183a2:	4640      	mov	r0, r8
 80183a4:	4649      	mov	r1, r9
 80183a6:	f7e8 fbc7 	bl	8000b38 <__aeabi_dcmpgt>
 80183aa:	2800      	cmp	r0, #0
 80183ac:	d173      	bne.n	8018496 <_dtoa_r+0x6e6>
 80183ae:	ec53 2b19 	vmov	r2, r3, d9
 80183b2:	4914      	ldr	r1, [pc, #80]	; (8018404 <_dtoa_r+0x654>)
 80183b4:	2000      	movs	r0, #0
 80183b6:	f7e7 ff77 	bl	80002a8 <__aeabi_dsub>
 80183ba:	4602      	mov	r2, r0
 80183bc:	460b      	mov	r3, r1
 80183be:	4640      	mov	r0, r8
 80183c0:	4649      	mov	r1, r9
 80183c2:	f7e8 fb9b 	bl	8000afc <__aeabi_dcmplt>
 80183c6:	2800      	cmp	r0, #0
 80183c8:	f43f af2f 	beq.w	801822a <_dtoa_r+0x47a>
 80183cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80183ce:	1e6b      	subs	r3, r5, #1
 80183d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80183d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80183d6:	2b30      	cmp	r3, #48	; 0x30
 80183d8:	d0f8      	beq.n	80183cc <_dtoa_r+0x61c>
 80183da:	46bb      	mov	fp, r7
 80183dc:	e04a      	b.n	8018474 <_dtoa_r+0x6c4>
 80183de:	4b06      	ldr	r3, [pc, #24]	; (80183f8 <_dtoa_r+0x648>)
 80183e0:	f7e8 f91a 	bl	8000618 <__aeabi_dmul>
 80183e4:	4680      	mov	r8, r0
 80183e6:	4689      	mov	r9, r1
 80183e8:	e7bd      	b.n	8018366 <_dtoa_r+0x5b6>
 80183ea:	bf00      	nop
 80183ec:	0801c7a8 	.word	0x0801c7a8
 80183f0:	0801c780 	.word	0x0801c780
 80183f4:	3ff00000 	.word	0x3ff00000
 80183f8:	40240000 	.word	0x40240000
 80183fc:	401c0000 	.word	0x401c0000
 8018400:	40140000 	.word	0x40140000
 8018404:	3fe00000 	.word	0x3fe00000
 8018408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801840c:	9d00      	ldr	r5, [sp, #0]
 801840e:	4642      	mov	r2, r8
 8018410:	464b      	mov	r3, r9
 8018412:	4630      	mov	r0, r6
 8018414:	4639      	mov	r1, r7
 8018416:	f7e8 fa29 	bl	800086c <__aeabi_ddiv>
 801841a:	f7e8 fbad 	bl	8000b78 <__aeabi_d2iz>
 801841e:	9001      	str	r0, [sp, #4]
 8018420:	f7e8 f890 	bl	8000544 <__aeabi_i2d>
 8018424:	4642      	mov	r2, r8
 8018426:	464b      	mov	r3, r9
 8018428:	f7e8 f8f6 	bl	8000618 <__aeabi_dmul>
 801842c:	4602      	mov	r2, r0
 801842e:	460b      	mov	r3, r1
 8018430:	4630      	mov	r0, r6
 8018432:	4639      	mov	r1, r7
 8018434:	f7e7 ff38 	bl	80002a8 <__aeabi_dsub>
 8018438:	9e01      	ldr	r6, [sp, #4]
 801843a:	9f04      	ldr	r7, [sp, #16]
 801843c:	3630      	adds	r6, #48	; 0x30
 801843e:	f805 6b01 	strb.w	r6, [r5], #1
 8018442:	9e00      	ldr	r6, [sp, #0]
 8018444:	1bae      	subs	r6, r5, r6
 8018446:	42b7      	cmp	r7, r6
 8018448:	4602      	mov	r2, r0
 801844a:	460b      	mov	r3, r1
 801844c:	d134      	bne.n	80184b8 <_dtoa_r+0x708>
 801844e:	f7e7 ff2d 	bl	80002ac <__adddf3>
 8018452:	4642      	mov	r2, r8
 8018454:	464b      	mov	r3, r9
 8018456:	4606      	mov	r6, r0
 8018458:	460f      	mov	r7, r1
 801845a:	f7e8 fb6d 	bl	8000b38 <__aeabi_dcmpgt>
 801845e:	b9c8      	cbnz	r0, 8018494 <_dtoa_r+0x6e4>
 8018460:	4642      	mov	r2, r8
 8018462:	464b      	mov	r3, r9
 8018464:	4630      	mov	r0, r6
 8018466:	4639      	mov	r1, r7
 8018468:	f7e8 fb3e 	bl	8000ae8 <__aeabi_dcmpeq>
 801846c:	b110      	cbz	r0, 8018474 <_dtoa_r+0x6c4>
 801846e:	9b01      	ldr	r3, [sp, #4]
 8018470:	07db      	lsls	r3, r3, #31
 8018472:	d40f      	bmi.n	8018494 <_dtoa_r+0x6e4>
 8018474:	4651      	mov	r1, sl
 8018476:	4620      	mov	r0, r4
 8018478:	f000 fbcc 	bl	8018c14 <_Bfree>
 801847c:	2300      	movs	r3, #0
 801847e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018480:	702b      	strb	r3, [r5, #0]
 8018482:	f10b 0301 	add.w	r3, fp, #1
 8018486:	6013      	str	r3, [r2, #0]
 8018488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801848a:	2b00      	cmp	r3, #0
 801848c:	f43f ace2 	beq.w	8017e54 <_dtoa_r+0xa4>
 8018490:	601d      	str	r5, [r3, #0]
 8018492:	e4df      	b.n	8017e54 <_dtoa_r+0xa4>
 8018494:	465f      	mov	r7, fp
 8018496:	462b      	mov	r3, r5
 8018498:	461d      	mov	r5, r3
 801849a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801849e:	2a39      	cmp	r2, #57	; 0x39
 80184a0:	d106      	bne.n	80184b0 <_dtoa_r+0x700>
 80184a2:	9a00      	ldr	r2, [sp, #0]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d1f7      	bne.n	8018498 <_dtoa_r+0x6e8>
 80184a8:	9900      	ldr	r1, [sp, #0]
 80184aa:	2230      	movs	r2, #48	; 0x30
 80184ac:	3701      	adds	r7, #1
 80184ae:	700a      	strb	r2, [r1, #0]
 80184b0:	781a      	ldrb	r2, [r3, #0]
 80184b2:	3201      	adds	r2, #1
 80184b4:	701a      	strb	r2, [r3, #0]
 80184b6:	e790      	b.n	80183da <_dtoa_r+0x62a>
 80184b8:	4ba3      	ldr	r3, [pc, #652]	; (8018748 <_dtoa_r+0x998>)
 80184ba:	2200      	movs	r2, #0
 80184bc:	f7e8 f8ac 	bl	8000618 <__aeabi_dmul>
 80184c0:	2200      	movs	r2, #0
 80184c2:	2300      	movs	r3, #0
 80184c4:	4606      	mov	r6, r0
 80184c6:	460f      	mov	r7, r1
 80184c8:	f7e8 fb0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	d09e      	beq.n	801840e <_dtoa_r+0x65e>
 80184d0:	e7d0      	b.n	8018474 <_dtoa_r+0x6c4>
 80184d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184d4:	2a00      	cmp	r2, #0
 80184d6:	f000 80ca 	beq.w	801866e <_dtoa_r+0x8be>
 80184da:	9a07      	ldr	r2, [sp, #28]
 80184dc:	2a01      	cmp	r2, #1
 80184de:	f300 80ad 	bgt.w	801863c <_dtoa_r+0x88c>
 80184e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80184e4:	2a00      	cmp	r2, #0
 80184e6:	f000 80a5 	beq.w	8018634 <_dtoa_r+0x884>
 80184ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80184ee:	9e08      	ldr	r6, [sp, #32]
 80184f0:	9d05      	ldr	r5, [sp, #20]
 80184f2:	9a05      	ldr	r2, [sp, #20]
 80184f4:	441a      	add	r2, r3
 80184f6:	9205      	str	r2, [sp, #20]
 80184f8:	9a06      	ldr	r2, [sp, #24]
 80184fa:	2101      	movs	r1, #1
 80184fc:	441a      	add	r2, r3
 80184fe:	4620      	mov	r0, r4
 8018500:	9206      	str	r2, [sp, #24]
 8018502:	f000 fc3d 	bl	8018d80 <__i2b>
 8018506:	4607      	mov	r7, r0
 8018508:	b165      	cbz	r5, 8018524 <_dtoa_r+0x774>
 801850a:	9b06      	ldr	r3, [sp, #24]
 801850c:	2b00      	cmp	r3, #0
 801850e:	dd09      	ble.n	8018524 <_dtoa_r+0x774>
 8018510:	42ab      	cmp	r3, r5
 8018512:	9a05      	ldr	r2, [sp, #20]
 8018514:	bfa8      	it	ge
 8018516:	462b      	movge	r3, r5
 8018518:	1ad2      	subs	r2, r2, r3
 801851a:	9205      	str	r2, [sp, #20]
 801851c:	9a06      	ldr	r2, [sp, #24]
 801851e:	1aed      	subs	r5, r5, r3
 8018520:	1ad3      	subs	r3, r2, r3
 8018522:	9306      	str	r3, [sp, #24]
 8018524:	9b08      	ldr	r3, [sp, #32]
 8018526:	b1f3      	cbz	r3, 8018566 <_dtoa_r+0x7b6>
 8018528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801852a:	2b00      	cmp	r3, #0
 801852c:	f000 80a3 	beq.w	8018676 <_dtoa_r+0x8c6>
 8018530:	2e00      	cmp	r6, #0
 8018532:	dd10      	ble.n	8018556 <_dtoa_r+0x7a6>
 8018534:	4639      	mov	r1, r7
 8018536:	4632      	mov	r2, r6
 8018538:	4620      	mov	r0, r4
 801853a:	f000 fce1 	bl	8018f00 <__pow5mult>
 801853e:	4652      	mov	r2, sl
 8018540:	4601      	mov	r1, r0
 8018542:	4607      	mov	r7, r0
 8018544:	4620      	mov	r0, r4
 8018546:	f000 fc31 	bl	8018dac <__multiply>
 801854a:	4651      	mov	r1, sl
 801854c:	4680      	mov	r8, r0
 801854e:	4620      	mov	r0, r4
 8018550:	f000 fb60 	bl	8018c14 <_Bfree>
 8018554:	46c2      	mov	sl, r8
 8018556:	9b08      	ldr	r3, [sp, #32]
 8018558:	1b9a      	subs	r2, r3, r6
 801855a:	d004      	beq.n	8018566 <_dtoa_r+0x7b6>
 801855c:	4651      	mov	r1, sl
 801855e:	4620      	mov	r0, r4
 8018560:	f000 fcce 	bl	8018f00 <__pow5mult>
 8018564:	4682      	mov	sl, r0
 8018566:	2101      	movs	r1, #1
 8018568:	4620      	mov	r0, r4
 801856a:	f000 fc09 	bl	8018d80 <__i2b>
 801856e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018570:	2b00      	cmp	r3, #0
 8018572:	4606      	mov	r6, r0
 8018574:	f340 8081 	ble.w	801867a <_dtoa_r+0x8ca>
 8018578:	461a      	mov	r2, r3
 801857a:	4601      	mov	r1, r0
 801857c:	4620      	mov	r0, r4
 801857e:	f000 fcbf 	bl	8018f00 <__pow5mult>
 8018582:	9b07      	ldr	r3, [sp, #28]
 8018584:	2b01      	cmp	r3, #1
 8018586:	4606      	mov	r6, r0
 8018588:	dd7a      	ble.n	8018680 <_dtoa_r+0x8d0>
 801858a:	f04f 0800 	mov.w	r8, #0
 801858e:	6933      	ldr	r3, [r6, #16]
 8018590:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018594:	6918      	ldr	r0, [r3, #16]
 8018596:	f000 fba5 	bl	8018ce4 <__hi0bits>
 801859a:	f1c0 0020 	rsb	r0, r0, #32
 801859e:	9b06      	ldr	r3, [sp, #24]
 80185a0:	4418      	add	r0, r3
 80185a2:	f010 001f 	ands.w	r0, r0, #31
 80185a6:	f000 8094 	beq.w	80186d2 <_dtoa_r+0x922>
 80185aa:	f1c0 0320 	rsb	r3, r0, #32
 80185ae:	2b04      	cmp	r3, #4
 80185b0:	f340 8085 	ble.w	80186be <_dtoa_r+0x90e>
 80185b4:	9b05      	ldr	r3, [sp, #20]
 80185b6:	f1c0 001c 	rsb	r0, r0, #28
 80185ba:	4403      	add	r3, r0
 80185bc:	9305      	str	r3, [sp, #20]
 80185be:	9b06      	ldr	r3, [sp, #24]
 80185c0:	4403      	add	r3, r0
 80185c2:	4405      	add	r5, r0
 80185c4:	9306      	str	r3, [sp, #24]
 80185c6:	9b05      	ldr	r3, [sp, #20]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	dd05      	ble.n	80185d8 <_dtoa_r+0x828>
 80185cc:	4651      	mov	r1, sl
 80185ce:	461a      	mov	r2, r3
 80185d0:	4620      	mov	r0, r4
 80185d2:	f000 fcef 	bl	8018fb4 <__lshift>
 80185d6:	4682      	mov	sl, r0
 80185d8:	9b06      	ldr	r3, [sp, #24]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	dd05      	ble.n	80185ea <_dtoa_r+0x83a>
 80185de:	4631      	mov	r1, r6
 80185e0:	461a      	mov	r2, r3
 80185e2:	4620      	mov	r0, r4
 80185e4:	f000 fce6 	bl	8018fb4 <__lshift>
 80185e8:	4606      	mov	r6, r0
 80185ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d072      	beq.n	80186d6 <_dtoa_r+0x926>
 80185f0:	4631      	mov	r1, r6
 80185f2:	4650      	mov	r0, sl
 80185f4:	f000 fd4a 	bl	801908c <__mcmp>
 80185f8:	2800      	cmp	r0, #0
 80185fa:	da6c      	bge.n	80186d6 <_dtoa_r+0x926>
 80185fc:	2300      	movs	r3, #0
 80185fe:	4651      	mov	r1, sl
 8018600:	220a      	movs	r2, #10
 8018602:	4620      	mov	r0, r4
 8018604:	f000 fb28 	bl	8018c58 <__multadd>
 8018608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801860a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801860e:	4682      	mov	sl, r0
 8018610:	2b00      	cmp	r3, #0
 8018612:	f000 81b0 	beq.w	8018976 <_dtoa_r+0xbc6>
 8018616:	2300      	movs	r3, #0
 8018618:	4639      	mov	r1, r7
 801861a:	220a      	movs	r2, #10
 801861c:	4620      	mov	r0, r4
 801861e:	f000 fb1b 	bl	8018c58 <__multadd>
 8018622:	9b01      	ldr	r3, [sp, #4]
 8018624:	2b00      	cmp	r3, #0
 8018626:	4607      	mov	r7, r0
 8018628:	f300 8096 	bgt.w	8018758 <_dtoa_r+0x9a8>
 801862c:	9b07      	ldr	r3, [sp, #28]
 801862e:	2b02      	cmp	r3, #2
 8018630:	dc59      	bgt.n	80186e6 <_dtoa_r+0x936>
 8018632:	e091      	b.n	8018758 <_dtoa_r+0x9a8>
 8018634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801863a:	e758      	b.n	80184ee <_dtoa_r+0x73e>
 801863c:	9b04      	ldr	r3, [sp, #16]
 801863e:	1e5e      	subs	r6, r3, #1
 8018640:	9b08      	ldr	r3, [sp, #32]
 8018642:	42b3      	cmp	r3, r6
 8018644:	bfbf      	itttt	lt
 8018646:	9b08      	ldrlt	r3, [sp, #32]
 8018648:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801864a:	9608      	strlt	r6, [sp, #32]
 801864c:	1af3      	sublt	r3, r6, r3
 801864e:	bfb4      	ite	lt
 8018650:	18d2      	addlt	r2, r2, r3
 8018652:	1b9e      	subge	r6, r3, r6
 8018654:	9b04      	ldr	r3, [sp, #16]
 8018656:	bfbc      	itt	lt
 8018658:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801865a:	2600      	movlt	r6, #0
 801865c:	2b00      	cmp	r3, #0
 801865e:	bfb7      	itett	lt
 8018660:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018664:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018668:	1a9d      	sublt	r5, r3, r2
 801866a:	2300      	movlt	r3, #0
 801866c:	e741      	b.n	80184f2 <_dtoa_r+0x742>
 801866e:	9e08      	ldr	r6, [sp, #32]
 8018670:	9d05      	ldr	r5, [sp, #20]
 8018672:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018674:	e748      	b.n	8018508 <_dtoa_r+0x758>
 8018676:	9a08      	ldr	r2, [sp, #32]
 8018678:	e770      	b.n	801855c <_dtoa_r+0x7ac>
 801867a:	9b07      	ldr	r3, [sp, #28]
 801867c:	2b01      	cmp	r3, #1
 801867e:	dc19      	bgt.n	80186b4 <_dtoa_r+0x904>
 8018680:	9b02      	ldr	r3, [sp, #8]
 8018682:	b9bb      	cbnz	r3, 80186b4 <_dtoa_r+0x904>
 8018684:	9b03      	ldr	r3, [sp, #12]
 8018686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801868a:	b99b      	cbnz	r3, 80186b4 <_dtoa_r+0x904>
 801868c:	9b03      	ldr	r3, [sp, #12]
 801868e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018692:	0d1b      	lsrs	r3, r3, #20
 8018694:	051b      	lsls	r3, r3, #20
 8018696:	b183      	cbz	r3, 80186ba <_dtoa_r+0x90a>
 8018698:	9b05      	ldr	r3, [sp, #20]
 801869a:	3301      	adds	r3, #1
 801869c:	9305      	str	r3, [sp, #20]
 801869e:	9b06      	ldr	r3, [sp, #24]
 80186a0:	3301      	adds	r3, #1
 80186a2:	9306      	str	r3, [sp, #24]
 80186a4:	f04f 0801 	mov.w	r8, #1
 80186a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	f47f af6f 	bne.w	801858e <_dtoa_r+0x7de>
 80186b0:	2001      	movs	r0, #1
 80186b2:	e774      	b.n	801859e <_dtoa_r+0x7ee>
 80186b4:	f04f 0800 	mov.w	r8, #0
 80186b8:	e7f6      	b.n	80186a8 <_dtoa_r+0x8f8>
 80186ba:	4698      	mov	r8, r3
 80186bc:	e7f4      	b.n	80186a8 <_dtoa_r+0x8f8>
 80186be:	d082      	beq.n	80185c6 <_dtoa_r+0x816>
 80186c0:	9a05      	ldr	r2, [sp, #20]
 80186c2:	331c      	adds	r3, #28
 80186c4:	441a      	add	r2, r3
 80186c6:	9205      	str	r2, [sp, #20]
 80186c8:	9a06      	ldr	r2, [sp, #24]
 80186ca:	441a      	add	r2, r3
 80186cc:	441d      	add	r5, r3
 80186ce:	9206      	str	r2, [sp, #24]
 80186d0:	e779      	b.n	80185c6 <_dtoa_r+0x816>
 80186d2:	4603      	mov	r3, r0
 80186d4:	e7f4      	b.n	80186c0 <_dtoa_r+0x910>
 80186d6:	9b04      	ldr	r3, [sp, #16]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	dc37      	bgt.n	801874c <_dtoa_r+0x99c>
 80186dc:	9b07      	ldr	r3, [sp, #28]
 80186de:	2b02      	cmp	r3, #2
 80186e0:	dd34      	ble.n	801874c <_dtoa_r+0x99c>
 80186e2:	9b04      	ldr	r3, [sp, #16]
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	9b01      	ldr	r3, [sp, #4]
 80186e8:	b963      	cbnz	r3, 8018704 <_dtoa_r+0x954>
 80186ea:	4631      	mov	r1, r6
 80186ec:	2205      	movs	r2, #5
 80186ee:	4620      	mov	r0, r4
 80186f0:	f000 fab2 	bl	8018c58 <__multadd>
 80186f4:	4601      	mov	r1, r0
 80186f6:	4606      	mov	r6, r0
 80186f8:	4650      	mov	r0, sl
 80186fa:	f000 fcc7 	bl	801908c <__mcmp>
 80186fe:	2800      	cmp	r0, #0
 8018700:	f73f adbb 	bgt.w	801827a <_dtoa_r+0x4ca>
 8018704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018706:	9d00      	ldr	r5, [sp, #0]
 8018708:	ea6f 0b03 	mvn.w	fp, r3
 801870c:	f04f 0800 	mov.w	r8, #0
 8018710:	4631      	mov	r1, r6
 8018712:	4620      	mov	r0, r4
 8018714:	f000 fa7e 	bl	8018c14 <_Bfree>
 8018718:	2f00      	cmp	r7, #0
 801871a:	f43f aeab 	beq.w	8018474 <_dtoa_r+0x6c4>
 801871e:	f1b8 0f00 	cmp.w	r8, #0
 8018722:	d005      	beq.n	8018730 <_dtoa_r+0x980>
 8018724:	45b8      	cmp	r8, r7
 8018726:	d003      	beq.n	8018730 <_dtoa_r+0x980>
 8018728:	4641      	mov	r1, r8
 801872a:	4620      	mov	r0, r4
 801872c:	f000 fa72 	bl	8018c14 <_Bfree>
 8018730:	4639      	mov	r1, r7
 8018732:	4620      	mov	r0, r4
 8018734:	f000 fa6e 	bl	8018c14 <_Bfree>
 8018738:	e69c      	b.n	8018474 <_dtoa_r+0x6c4>
 801873a:	2600      	movs	r6, #0
 801873c:	4637      	mov	r7, r6
 801873e:	e7e1      	b.n	8018704 <_dtoa_r+0x954>
 8018740:	46bb      	mov	fp, r7
 8018742:	4637      	mov	r7, r6
 8018744:	e599      	b.n	801827a <_dtoa_r+0x4ca>
 8018746:	bf00      	nop
 8018748:	40240000 	.word	0x40240000
 801874c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801874e:	2b00      	cmp	r3, #0
 8018750:	f000 80c8 	beq.w	80188e4 <_dtoa_r+0xb34>
 8018754:	9b04      	ldr	r3, [sp, #16]
 8018756:	9301      	str	r3, [sp, #4]
 8018758:	2d00      	cmp	r5, #0
 801875a:	dd05      	ble.n	8018768 <_dtoa_r+0x9b8>
 801875c:	4639      	mov	r1, r7
 801875e:	462a      	mov	r2, r5
 8018760:	4620      	mov	r0, r4
 8018762:	f000 fc27 	bl	8018fb4 <__lshift>
 8018766:	4607      	mov	r7, r0
 8018768:	f1b8 0f00 	cmp.w	r8, #0
 801876c:	d05b      	beq.n	8018826 <_dtoa_r+0xa76>
 801876e:	6879      	ldr	r1, [r7, #4]
 8018770:	4620      	mov	r0, r4
 8018772:	f000 fa0f 	bl	8018b94 <_Balloc>
 8018776:	4605      	mov	r5, r0
 8018778:	b928      	cbnz	r0, 8018786 <_dtoa_r+0x9d6>
 801877a:	4b83      	ldr	r3, [pc, #524]	; (8018988 <_dtoa_r+0xbd8>)
 801877c:	4602      	mov	r2, r0
 801877e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018782:	f7ff bb2e 	b.w	8017de2 <_dtoa_r+0x32>
 8018786:	693a      	ldr	r2, [r7, #16]
 8018788:	3202      	adds	r2, #2
 801878a:	0092      	lsls	r2, r2, #2
 801878c:	f107 010c 	add.w	r1, r7, #12
 8018790:	300c      	adds	r0, #12
 8018792:	f7ff fa76 	bl	8017c82 <memcpy>
 8018796:	2201      	movs	r2, #1
 8018798:	4629      	mov	r1, r5
 801879a:	4620      	mov	r0, r4
 801879c:	f000 fc0a 	bl	8018fb4 <__lshift>
 80187a0:	9b00      	ldr	r3, [sp, #0]
 80187a2:	3301      	adds	r3, #1
 80187a4:	9304      	str	r3, [sp, #16]
 80187a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80187aa:	4413      	add	r3, r2
 80187ac:	9308      	str	r3, [sp, #32]
 80187ae:	9b02      	ldr	r3, [sp, #8]
 80187b0:	f003 0301 	and.w	r3, r3, #1
 80187b4:	46b8      	mov	r8, r7
 80187b6:	9306      	str	r3, [sp, #24]
 80187b8:	4607      	mov	r7, r0
 80187ba:	9b04      	ldr	r3, [sp, #16]
 80187bc:	4631      	mov	r1, r6
 80187be:	3b01      	subs	r3, #1
 80187c0:	4650      	mov	r0, sl
 80187c2:	9301      	str	r3, [sp, #4]
 80187c4:	f7ff fa6b 	bl	8017c9e <quorem>
 80187c8:	4641      	mov	r1, r8
 80187ca:	9002      	str	r0, [sp, #8]
 80187cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80187d0:	4650      	mov	r0, sl
 80187d2:	f000 fc5b 	bl	801908c <__mcmp>
 80187d6:	463a      	mov	r2, r7
 80187d8:	9005      	str	r0, [sp, #20]
 80187da:	4631      	mov	r1, r6
 80187dc:	4620      	mov	r0, r4
 80187de:	f000 fc71 	bl	80190c4 <__mdiff>
 80187e2:	68c2      	ldr	r2, [r0, #12]
 80187e4:	4605      	mov	r5, r0
 80187e6:	bb02      	cbnz	r2, 801882a <_dtoa_r+0xa7a>
 80187e8:	4601      	mov	r1, r0
 80187ea:	4650      	mov	r0, sl
 80187ec:	f000 fc4e 	bl	801908c <__mcmp>
 80187f0:	4602      	mov	r2, r0
 80187f2:	4629      	mov	r1, r5
 80187f4:	4620      	mov	r0, r4
 80187f6:	9209      	str	r2, [sp, #36]	; 0x24
 80187f8:	f000 fa0c 	bl	8018c14 <_Bfree>
 80187fc:	9b07      	ldr	r3, [sp, #28]
 80187fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018800:	9d04      	ldr	r5, [sp, #16]
 8018802:	ea43 0102 	orr.w	r1, r3, r2
 8018806:	9b06      	ldr	r3, [sp, #24]
 8018808:	4319      	orrs	r1, r3
 801880a:	d110      	bne.n	801882e <_dtoa_r+0xa7e>
 801880c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018810:	d029      	beq.n	8018866 <_dtoa_r+0xab6>
 8018812:	9b05      	ldr	r3, [sp, #20]
 8018814:	2b00      	cmp	r3, #0
 8018816:	dd02      	ble.n	801881e <_dtoa_r+0xa6e>
 8018818:	9b02      	ldr	r3, [sp, #8]
 801881a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801881e:	9b01      	ldr	r3, [sp, #4]
 8018820:	f883 9000 	strb.w	r9, [r3]
 8018824:	e774      	b.n	8018710 <_dtoa_r+0x960>
 8018826:	4638      	mov	r0, r7
 8018828:	e7ba      	b.n	80187a0 <_dtoa_r+0x9f0>
 801882a:	2201      	movs	r2, #1
 801882c:	e7e1      	b.n	80187f2 <_dtoa_r+0xa42>
 801882e:	9b05      	ldr	r3, [sp, #20]
 8018830:	2b00      	cmp	r3, #0
 8018832:	db04      	blt.n	801883e <_dtoa_r+0xa8e>
 8018834:	9907      	ldr	r1, [sp, #28]
 8018836:	430b      	orrs	r3, r1
 8018838:	9906      	ldr	r1, [sp, #24]
 801883a:	430b      	orrs	r3, r1
 801883c:	d120      	bne.n	8018880 <_dtoa_r+0xad0>
 801883e:	2a00      	cmp	r2, #0
 8018840:	dded      	ble.n	801881e <_dtoa_r+0xa6e>
 8018842:	4651      	mov	r1, sl
 8018844:	2201      	movs	r2, #1
 8018846:	4620      	mov	r0, r4
 8018848:	f000 fbb4 	bl	8018fb4 <__lshift>
 801884c:	4631      	mov	r1, r6
 801884e:	4682      	mov	sl, r0
 8018850:	f000 fc1c 	bl	801908c <__mcmp>
 8018854:	2800      	cmp	r0, #0
 8018856:	dc03      	bgt.n	8018860 <_dtoa_r+0xab0>
 8018858:	d1e1      	bne.n	801881e <_dtoa_r+0xa6e>
 801885a:	f019 0f01 	tst.w	r9, #1
 801885e:	d0de      	beq.n	801881e <_dtoa_r+0xa6e>
 8018860:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018864:	d1d8      	bne.n	8018818 <_dtoa_r+0xa68>
 8018866:	9a01      	ldr	r2, [sp, #4]
 8018868:	2339      	movs	r3, #57	; 0x39
 801886a:	7013      	strb	r3, [r2, #0]
 801886c:	462b      	mov	r3, r5
 801886e:	461d      	mov	r5, r3
 8018870:	3b01      	subs	r3, #1
 8018872:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018876:	2a39      	cmp	r2, #57	; 0x39
 8018878:	d06c      	beq.n	8018954 <_dtoa_r+0xba4>
 801887a:	3201      	adds	r2, #1
 801887c:	701a      	strb	r2, [r3, #0]
 801887e:	e747      	b.n	8018710 <_dtoa_r+0x960>
 8018880:	2a00      	cmp	r2, #0
 8018882:	dd07      	ble.n	8018894 <_dtoa_r+0xae4>
 8018884:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018888:	d0ed      	beq.n	8018866 <_dtoa_r+0xab6>
 801888a:	9a01      	ldr	r2, [sp, #4]
 801888c:	f109 0301 	add.w	r3, r9, #1
 8018890:	7013      	strb	r3, [r2, #0]
 8018892:	e73d      	b.n	8018710 <_dtoa_r+0x960>
 8018894:	9b04      	ldr	r3, [sp, #16]
 8018896:	9a08      	ldr	r2, [sp, #32]
 8018898:	f803 9c01 	strb.w	r9, [r3, #-1]
 801889c:	4293      	cmp	r3, r2
 801889e:	d043      	beq.n	8018928 <_dtoa_r+0xb78>
 80188a0:	4651      	mov	r1, sl
 80188a2:	2300      	movs	r3, #0
 80188a4:	220a      	movs	r2, #10
 80188a6:	4620      	mov	r0, r4
 80188a8:	f000 f9d6 	bl	8018c58 <__multadd>
 80188ac:	45b8      	cmp	r8, r7
 80188ae:	4682      	mov	sl, r0
 80188b0:	f04f 0300 	mov.w	r3, #0
 80188b4:	f04f 020a 	mov.w	r2, #10
 80188b8:	4641      	mov	r1, r8
 80188ba:	4620      	mov	r0, r4
 80188bc:	d107      	bne.n	80188ce <_dtoa_r+0xb1e>
 80188be:	f000 f9cb 	bl	8018c58 <__multadd>
 80188c2:	4680      	mov	r8, r0
 80188c4:	4607      	mov	r7, r0
 80188c6:	9b04      	ldr	r3, [sp, #16]
 80188c8:	3301      	adds	r3, #1
 80188ca:	9304      	str	r3, [sp, #16]
 80188cc:	e775      	b.n	80187ba <_dtoa_r+0xa0a>
 80188ce:	f000 f9c3 	bl	8018c58 <__multadd>
 80188d2:	4639      	mov	r1, r7
 80188d4:	4680      	mov	r8, r0
 80188d6:	2300      	movs	r3, #0
 80188d8:	220a      	movs	r2, #10
 80188da:	4620      	mov	r0, r4
 80188dc:	f000 f9bc 	bl	8018c58 <__multadd>
 80188e0:	4607      	mov	r7, r0
 80188e2:	e7f0      	b.n	80188c6 <_dtoa_r+0xb16>
 80188e4:	9b04      	ldr	r3, [sp, #16]
 80188e6:	9301      	str	r3, [sp, #4]
 80188e8:	9d00      	ldr	r5, [sp, #0]
 80188ea:	4631      	mov	r1, r6
 80188ec:	4650      	mov	r0, sl
 80188ee:	f7ff f9d6 	bl	8017c9e <quorem>
 80188f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80188f6:	9b00      	ldr	r3, [sp, #0]
 80188f8:	f805 9b01 	strb.w	r9, [r5], #1
 80188fc:	1aea      	subs	r2, r5, r3
 80188fe:	9b01      	ldr	r3, [sp, #4]
 8018900:	4293      	cmp	r3, r2
 8018902:	dd07      	ble.n	8018914 <_dtoa_r+0xb64>
 8018904:	4651      	mov	r1, sl
 8018906:	2300      	movs	r3, #0
 8018908:	220a      	movs	r2, #10
 801890a:	4620      	mov	r0, r4
 801890c:	f000 f9a4 	bl	8018c58 <__multadd>
 8018910:	4682      	mov	sl, r0
 8018912:	e7ea      	b.n	80188ea <_dtoa_r+0xb3a>
 8018914:	9b01      	ldr	r3, [sp, #4]
 8018916:	2b00      	cmp	r3, #0
 8018918:	bfc8      	it	gt
 801891a:	461d      	movgt	r5, r3
 801891c:	9b00      	ldr	r3, [sp, #0]
 801891e:	bfd8      	it	le
 8018920:	2501      	movle	r5, #1
 8018922:	441d      	add	r5, r3
 8018924:	f04f 0800 	mov.w	r8, #0
 8018928:	4651      	mov	r1, sl
 801892a:	2201      	movs	r2, #1
 801892c:	4620      	mov	r0, r4
 801892e:	f000 fb41 	bl	8018fb4 <__lshift>
 8018932:	4631      	mov	r1, r6
 8018934:	4682      	mov	sl, r0
 8018936:	f000 fba9 	bl	801908c <__mcmp>
 801893a:	2800      	cmp	r0, #0
 801893c:	dc96      	bgt.n	801886c <_dtoa_r+0xabc>
 801893e:	d102      	bne.n	8018946 <_dtoa_r+0xb96>
 8018940:	f019 0f01 	tst.w	r9, #1
 8018944:	d192      	bne.n	801886c <_dtoa_r+0xabc>
 8018946:	462b      	mov	r3, r5
 8018948:	461d      	mov	r5, r3
 801894a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801894e:	2a30      	cmp	r2, #48	; 0x30
 8018950:	d0fa      	beq.n	8018948 <_dtoa_r+0xb98>
 8018952:	e6dd      	b.n	8018710 <_dtoa_r+0x960>
 8018954:	9a00      	ldr	r2, [sp, #0]
 8018956:	429a      	cmp	r2, r3
 8018958:	d189      	bne.n	801886e <_dtoa_r+0xabe>
 801895a:	f10b 0b01 	add.w	fp, fp, #1
 801895e:	2331      	movs	r3, #49	; 0x31
 8018960:	e796      	b.n	8018890 <_dtoa_r+0xae0>
 8018962:	4b0a      	ldr	r3, [pc, #40]	; (801898c <_dtoa_r+0xbdc>)
 8018964:	f7ff ba99 	b.w	8017e9a <_dtoa_r+0xea>
 8018968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801896a:	2b00      	cmp	r3, #0
 801896c:	f47f aa6d 	bne.w	8017e4a <_dtoa_r+0x9a>
 8018970:	4b07      	ldr	r3, [pc, #28]	; (8018990 <_dtoa_r+0xbe0>)
 8018972:	f7ff ba92 	b.w	8017e9a <_dtoa_r+0xea>
 8018976:	9b01      	ldr	r3, [sp, #4]
 8018978:	2b00      	cmp	r3, #0
 801897a:	dcb5      	bgt.n	80188e8 <_dtoa_r+0xb38>
 801897c:	9b07      	ldr	r3, [sp, #28]
 801897e:	2b02      	cmp	r3, #2
 8018980:	f73f aeb1 	bgt.w	80186e6 <_dtoa_r+0x936>
 8018984:	e7b0      	b.n	80188e8 <_dtoa_r+0xb38>
 8018986:	bf00      	nop
 8018988:	0801c715 	.word	0x0801c715
 801898c:	0801c675 	.word	0x0801c675
 8018990:	0801c699 	.word	0x0801c699

08018994 <_free_r>:
 8018994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018996:	2900      	cmp	r1, #0
 8018998:	d044      	beq.n	8018a24 <_free_r+0x90>
 801899a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801899e:	9001      	str	r0, [sp, #4]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	f1a1 0404 	sub.w	r4, r1, #4
 80189a6:	bfb8      	it	lt
 80189a8:	18e4      	addlt	r4, r4, r3
 80189aa:	f000 f8e7 	bl	8018b7c <__malloc_lock>
 80189ae:	4a1e      	ldr	r2, [pc, #120]	; (8018a28 <_free_r+0x94>)
 80189b0:	9801      	ldr	r0, [sp, #4]
 80189b2:	6813      	ldr	r3, [r2, #0]
 80189b4:	b933      	cbnz	r3, 80189c4 <_free_r+0x30>
 80189b6:	6063      	str	r3, [r4, #4]
 80189b8:	6014      	str	r4, [r2, #0]
 80189ba:	b003      	add	sp, #12
 80189bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189c0:	f000 b8e2 	b.w	8018b88 <__malloc_unlock>
 80189c4:	42a3      	cmp	r3, r4
 80189c6:	d908      	bls.n	80189da <_free_r+0x46>
 80189c8:	6825      	ldr	r5, [r4, #0]
 80189ca:	1961      	adds	r1, r4, r5
 80189cc:	428b      	cmp	r3, r1
 80189ce:	bf01      	itttt	eq
 80189d0:	6819      	ldreq	r1, [r3, #0]
 80189d2:	685b      	ldreq	r3, [r3, #4]
 80189d4:	1949      	addeq	r1, r1, r5
 80189d6:	6021      	streq	r1, [r4, #0]
 80189d8:	e7ed      	b.n	80189b6 <_free_r+0x22>
 80189da:	461a      	mov	r2, r3
 80189dc:	685b      	ldr	r3, [r3, #4]
 80189de:	b10b      	cbz	r3, 80189e4 <_free_r+0x50>
 80189e0:	42a3      	cmp	r3, r4
 80189e2:	d9fa      	bls.n	80189da <_free_r+0x46>
 80189e4:	6811      	ldr	r1, [r2, #0]
 80189e6:	1855      	adds	r5, r2, r1
 80189e8:	42a5      	cmp	r5, r4
 80189ea:	d10b      	bne.n	8018a04 <_free_r+0x70>
 80189ec:	6824      	ldr	r4, [r4, #0]
 80189ee:	4421      	add	r1, r4
 80189f0:	1854      	adds	r4, r2, r1
 80189f2:	42a3      	cmp	r3, r4
 80189f4:	6011      	str	r1, [r2, #0]
 80189f6:	d1e0      	bne.n	80189ba <_free_r+0x26>
 80189f8:	681c      	ldr	r4, [r3, #0]
 80189fa:	685b      	ldr	r3, [r3, #4]
 80189fc:	6053      	str	r3, [r2, #4]
 80189fe:	440c      	add	r4, r1
 8018a00:	6014      	str	r4, [r2, #0]
 8018a02:	e7da      	b.n	80189ba <_free_r+0x26>
 8018a04:	d902      	bls.n	8018a0c <_free_r+0x78>
 8018a06:	230c      	movs	r3, #12
 8018a08:	6003      	str	r3, [r0, #0]
 8018a0a:	e7d6      	b.n	80189ba <_free_r+0x26>
 8018a0c:	6825      	ldr	r5, [r4, #0]
 8018a0e:	1961      	adds	r1, r4, r5
 8018a10:	428b      	cmp	r3, r1
 8018a12:	bf04      	itt	eq
 8018a14:	6819      	ldreq	r1, [r3, #0]
 8018a16:	685b      	ldreq	r3, [r3, #4]
 8018a18:	6063      	str	r3, [r4, #4]
 8018a1a:	bf04      	itt	eq
 8018a1c:	1949      	addeq	r1, r1, r5
 8018a1e:	6021      	streq	r1, [r4, #0]
 8018a20:	6054      	str	r4, [r2, #4]
 8018a22:	e7ca      	b.n	80189ba <_free_r+0x26>
 8018a24:	b003      	add	sp, #12
 8018a26:	bd30      	pop	{r4, r5, pc}
 8018a28:	2000dd3c 	.word	0x2000dd3c

08018a2c <malloc>:
 8018a2c:	4b02      	ldr	r3, [pc, #8]	; (8018a38 <malloc+0xc>)
 8018a2e:	4601      	mov	r1, r0
 8018a30:	6818      	ldr	r0, [r3, #0]
 8018a32:	f000 b823 	b.w	8018a7c <_malloc_r>
 8018a36:	bf00      	nop
 8018a38:	200004ac 	.word	0x200004ac

08018a3c <sbrk_aligned>:
 8018a3c:	b570      	push	{r4, r5, r6, lr}
 8018a3e:	4e0e      	ldr	r6, [pc, #56]	; (8018a78 <sbrk_aligned+0x3c>)
 8018a40:	460c      	mov	r4, r1
 8018a42:	6831      	ldr	r1, [r6, #0]
 8018a44:	4605      	mov	r5, r0
 8018a46:	b911      	cbnz	r1, 8018a4e <sbrk_aligned+0x12>
 8018a48:	f000 fe1c 	bl	8019684 <_sbrk_r>
 8018a4c:	6030      	str	r0, [r6, #0]
 8018a4e:	4621      	mov	r1, r4
 8018a50:	4628      	mov	r0, r5
 8018a52:	f000 fe17 	bl	8019684 <_sbrk_r>
 8018a56:	1c43      	adds	r3, r0, #1
 8018a58:	d00a      	beq.n	8018a70 <sbrk_aligned+0x34>
 8018a5a:	1cc4      	adds	r4, r0, #3
 8018a5c:	f024 0403 	bic.w	r4, r4, #3
 8018a60:	42a0      	cmp	r0, r4
 8018a62:	d007      	beq.n	8018a74 <sbrk_aligned+0x38>
 8018a64:	1a21      	subs	r1, r4, r0
 8018a66:	4628      	mov	r0, r5
 8018a68:	f000 fe0c 	bl	8019684 <_sbrk_r>
 8018a6c:	3001      	adds	r0, #1
 8018a6e:	d101      	bne.n	8018a74 <sbrk_aligned+0x38>
 8018a70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018a74:	4620      	mov	r0, r4
 8018a76:	bd70      	pop	{r4, r5, r6, pc}
 8018a78:	2000dd40 	.word	0x2000dd40

08018a7c <_malloc_r>:
 8018a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a80:	1ccd      	adds	r5, r1, #3
 8018a82:	f025 0503 	bic.w	r5, r5, #3
 8018a86:	3508      	adds	r5, #8
 8018a88:	2d0c      	cmp	r5, #12
 8018a8a:	bf38      	it	cc
 8018a8c:	250c      	movcc	r5, #12
 8018a8e:	2d00      	cmp	r5, #0
 8018a90:	4607      	mov	r7, r0
 8018a92:	db01      	blt.n	8018a98 <_malloc_r+0x1c>
 8018a94:	42a9      	cmp	r1, r5
 8018a96:	d905      	bls.n	8018aa4 <_malloc_r+0x28>
 8018a98:	230c      	movs	r3, #12
 8018a9a:	603b      	str	r3, [r7, #0]
 8018a9c:	2600      	movs	r6, #0
 8018a9e:	4630      	mov	r0, r6
 8018aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018aa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018b78 <_malloc_r+0xfc>
 8018aa8:	f000 f868 	bl	8018b7c <__malloc_lock>
 8018aac:	f8d8 3000 	ldr.w	r3, [r8]
 8018ab0:	461c      	mov	r4, r3
 8018ab2:	bb5c      	cbnz	r4, 8018b0c <_malloc_r+0x90>
 8018ab4:	4629      	mov	r1, r5
 8018ab6:	4638      	mov	r0, r7
 8018ab8:	f7ff ffc0 	bl	8018a3c <sbrk_aligned>
 8018abc:	1c43      	adds	r3, r0, #1
 8018abe:	4604      	mov	r4, r0
 8018ac0:	d155      	bne.n	8018b6e <_malloc_r+0xf2>
 8018ac2:	f8d8 4000 	ldr.w	r4, [r8]
 8018ac6:	4626      	mov	r6, r4
 8018ac8:	2e00      	cmp	r6, #0
 8018aca:	d145      	bne.n	8018b58 <_malloc_r+0xdc>
 8018acc:	2c00      	cmp	r4, #0
 8018ace:	d048      	beq.n	8018b62 <_malloc_r+0xe6>
 8018ad0:	6823      	ldr	r3, [r4, #0]
 8018ad2:	4631      	mov	r1, r6
 8018ad4:	4638      	mov	r0, r7
 8018ad6:	eb04 0903 	add.w	r9, r4, r3
 8018ada:	f000 fdd3 	bl	8019684 <_sbrk_r>
 8018ade:	4581      	cmp	r9, r0
 8018ae0:	d13f      	bne.n	8018b62 <_malloc_r+0xe6>
 8018ae2:	6821      	ldr	r1, [r4, #0]
 8018ae4:	1a6d      	subs	r5, r5, r1
 8018ae6:	4629      	mov	r1, r5
 8018ae8:	4638      	mov	r0, r7
 8018aea:	f7ff ffa7 	bl	8018a3c <sbrk_aligned>
 8018aee:	3001      	adds	r0, #1
 8018af0:	d037      	beq.n	8018b62 <_malloc_r+0xe6>
 8018af2:	6823      	ldr	r3, [r4, #0]
 8018af4:	442b      	add	r3, r5
 8018af6:	6023      	str	r3, [r4, #0]
 8018af8:	f8d8 3000 	ldr.w	r3, [r8]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d038      	beq.n	8018b72 <_malloc_r+0xf6>
 8018b00:	685a      	ldr	r2, [r3, #4]
 8018b02:	42a2      	cmp	r2, r4
 8018b04:	d12b      	bne.n	8018b5e <_malloc_r+0xe2>
 8018b06:	2200      	movs	r2, #0
 8018b08:	605a      	str	r2, [r3, #4]
 8018b0a:	e00f      	b.n	8018b2c <_malloc_r+0xb0>
 8018b0c:	6822      	ldr	r2, [r4, #0]
 8018b0e:	1b52      	subs	r2, r2, r5
 8018b10:	d41f      	bmi.n	8018b52 <_malloc_r+0xd6>
 8018b12:	2a0b      	cmp	r2, #11
 8018b14:	d917      	bls.n	8018b46 <_malloc_r+0xca>
 8018b16:	1961      	adds	r1, r4, r5
 8018b18:	42a3      	cmp	r3, r4
 8018b1a:	6025      	str	r5, [r4, #0]
 8018b1c:	bf18      	it	ne
 8018b1e:	6059      	strne	r1, [r3, #4]
 8018b20:	6863      	ldr	r3, [r4, #4]
 8018b22:	bf08      	it	eq
 8018b24:	f8c8 1000 	streq.w	r1, [r8]
 8018b28:	5162      	str	r2, [r4, r5]
 8018b2a:	604b      	str	r3, [r1, #4]
 8018b2c:	4638      	mov	r0, r7
 8018b2e:	f104 060b 	add.w	r6, r4, #11
 8018b32:	f000 f829 	bl	8018b88 <__malloc_unlock>
 8018b36:	f026 0607 	bic.w	r6, r6, #7
 8018b3a:	1d23      	adds	r3, r4, #4
 8018b3c:	1af2      	subs	r2, r6, r3
 8018b3e:	d0ae      	beq.n	8018a9e <_malloc_r+0x22>
 8018b40:	1b9b      	subs	r3, r3, r6
 8018b42:	50a3      	str	r3, [r4, r2]
 8018b44:	e7ab      	b.n	8018a9e <_malloc_r+0x22>
 8018b46:	42a3      	cmp	r3, r4
 8018b48:	6862      	ldr	r2, [r4, #4]
 8018b4a:	d1dd      	bne.n	8018b08 <_malloc_r+0x8c>
 8018b4c:	f8c8 2000 	str.w	r2, [r8]
 8018b50:	e7ec      	b.n	8018b2c <_malloc_r+0xb0>
 8018b52:	4623      	mov	r3, r4
 8018b54:	6864      	ldr	r4, [r4, #4]
 8018b56:	e7ac      	b.n	8018ab2 <_malloc_r+0x36>
 8018b58:	4634      	mov	r4, r6
 8018b5a:	6876      	ldr	r6, [r6, #4]
 8018b5c:	e7b4      	b.n	8018ac8 <_malloc_r+0x4c>
 8018b5e:	4613      	mov	r3, r2
 8018b60:	e7cc      	b.n	8018afc <_malloc_r+0x80>
 8018b62:	230c      	movs	r3, #12
 8018b64:	603b      	str	r3, [r7, #0]
 8018b66:	4638      	mov	r0, r7
 8018b68:	f000 f80e 	bl	8018b88 <__malloc_unlock>
 8018b6c:	e797      	b.n	8018a9e <_malloc_r+0x22>
 8018b6e:	6025      	str	r5, [r4, #0]
 8018b70:	e7dc      	b.n	8018b2c <_malloc_r+0xb0>
 8018b72:	605b      	str	r3, [r3, #4]
 8018b74:	deff      	udf	#255	; 0xff
 8018b76:	bf00      	nop
 8018b78:	2000dd3c 	.word	0x2000dd3c

08018b7c <__malloc_lock>:
 8018b7c:	4801      	ldr	r0, [pc, #4]	; (8018b84 <__malloc_lock+0x8>)
 8018b7e:	f7ff b87e 	b.w	8017c7e <__retarget_lock_acquire_recursive>
 8018b82:	bf00      	nop
 8018b84:	2000dd38 	.word	0x2000dd38

08018b88 <__malloc_unlock>:
 8018b88:	4801      	ldr	r0, [pc, #4]	; (8018b90 <__malloc_unlock+0x8>)
 8018b8a:	f7ff b879 	b.w	8017c80 <__retarget_lock_release_recursive>
 8018b8e:	bf00      	nop
 8018b90:	2000dd38 	.word	0x2000dd38

08018b94 <_Balloc>:
 8018b94:	b570      	push	{r4, r5, r6, lr}
 8018b96:	69c6      	ldr	r6, [r0, #28]
 8018b98:	4604      	mov	r4, r0
 8018b9a:	460d      	mov	r5, r1
 8018b9c:	b976      	cbnz	r6, 8018bbc <_Balloc+0x28>
 8018b9e:	2010      	movs	r0, #16
 8018ba0:	f7ff ff44 	bl	8018a2c <malloc>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	61e0      	str	r0, [r4, #28]
 8018ba8:	b920      	cbnz	r0, 8018bb4 <_Balloc+0x20>
 8018baa:	4b18      	ldr	r3, [pc, #96]	; (8018c0c <_Balloc+0x78>)
 8018bac:	4818      	ldr	r0, [pc, #96]	; (8018c10 <_Balloc+0x7c>)
 8018bae:	216b      	movs	r1, #107	; 0x6b
 8018bb0:	f000 fd78 	bl	80196a4 <__assert_func>
 8018bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018bb8:	6006      	str	r6, [r0, #0]
 8018bba:	60c6      	str	r6, [r0, #12]
 8018bbc:	69e6      	ldr	r6, [r4, #28]
 8018bbe:	68f3      	ldr	r3, [r6, #12]
 8018bc0:	b183      	cbz	r3, 8018be4 <_Balloc+0x50>
 8018bc2:	69e3      	ldr	r3, [r4, #28]
 8018bc4:	68db      	ldr	r3, [r3, #12]
 8018bc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018bca:	b9b8      	cbnz	r0, 8018bfc <_Balloc+0x68>
 8018bcc:	2101      	movs	r1, #1
 8018bce:	fa01 f605 	lsl.w	r6, r1, r5
 8018bd2:	1d72      	adds	r2, r6, #5
 8018bd4:	0092      	lsls	r2, r2, #2
 8018bd6:	4620      	mov	r0, r4
 8018bd8:	f000 fd82 	bl	80196e0 <_calloc_r>
 8018bdc:	b160      	cbz	r0, 8018bf8 <_Balloc+0x64>
 8018bde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018be2:	e00e      	b.n	8018c02 <_Balloc+0x6e>
 8018be4:	2221      	movs	r2, #33	; 0x21
 8018be6:	2104      	movs	r1, #4
 8018be8:	4620      	mov	r0, r4
 8018bea:	f000 fd79 	bl	80196e0 <_calloc_r>
 8018bee:	69e3      	ldr	r3, [r4, #28]
 8018bf0:	60f0      	str	r0, [r6, #12]
 8018bf2:	68db      	ldr	r3, [r3, #12]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d1e4      	bne.n	8018bc2 <_Balloc+0x2e>
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	bd70      	pop	{r4, r5, r6, pc}
 8018bfc:	6802      	ldr	r2, [r0, #0]
 8018bfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c02:	2300      	movs	r3, #0
 8018c04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c08:	e7f7      	b.n	8018bfa <_Balloc+0x66>
 8018c0a:	bf00      	nop
 8018c0c:	0801c6a6 	.word	0x0801c6a6
 8018c10:	0801c726 	.word	0x0801c726

08018c14 <_Bfree>:
 8018c14:	b570      	push	{r4, r5, r6, lr}
 8018c16:	69c6      	ldr	r6, [r0, #28]
 8018c18:	4605      	mov	r5, r0
 8018c1a:	460c      	mov	r4, r1
 8018c1c:	b976      	cbnz	r6, 8018c3c <_Bfree+0x28>
 8018c1e:	2010      	movs	r0, #16
 8018c20:	f7ff ff04 	bl	8018a2c <malloc>
 8018c24:	4602      	mov	r2, r0
 8018c26:	61e8      	str	r0, [r5, #28]
 8018c28:	b920      	cbnz	r0, 8018c34 <_Bfree+0x20>
 8018c2a:	4b09      	ldr	r3, [pc, #36]	; (8018c50 <_Bfree+0x3c>)
 8018c2c:	4809      	ldr	r0, [pc, #36]	; (8018c54 <_Bfree+0x40>)
 8018c2e:	218f      	movs	r1, #143	; 0x8f
 8018c30:	f000 fd38 	bl	80196a4 <__assert_func>
 8018c34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c38:	6006      	str	r6, [r0, #0]
 8018c3a:	60c6      	str	r6, [r0, #12]
 8018c3c:	b13c      	cbz	r4, 8018c4e <_Bfree+0x3a>
 8018c3e:	69eb      	ldr	r3, [r5, #28]
 8018c40:	6862      	ldr	r2, [r4, #4]
 8018c42:	68db      	ldr	r3, [r3, #12]
 8018c44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018c48:	6021      	str	r1, [r4, #0]
 8018c4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018c4e:	bd70      	pop	{r4, r5, r6, pc}
 8018c50:	0801c6a6 	.word	0x0801c6a6
 8018c54:	0801c726 	.word	0x0801c726

08018c58 <__multadd>:
 8018c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5c:	690d      	ldr	r5, [r1, #16]
 8018c5e:	4607      	mov	r7, r0
 8018c60:	460c      	mov	r4, r1
 8018c62:	461e      	mov	r6, r3
 8018c64:	f101 0c14 	add.w	ip, r1, #20
 8018c68:	2000      	movs	r0, #0
 8018c6a:	f8dc 3000 	ldr.w	r3, [ip]
 8018c6e:	b299      	uxth	r1, r3
 8018c70:	fb02 6101 	mla	r1, r2, r1, r6
 8018c74:	0c1e      	lsrs	r6, r3, #16
 8018c76:	0c0b      	lsrs	r3, r1, #16
 8018c78:	fb02 3306 	mla	r3, r2, r6, r3
 8018c7c:	b289      	uxth	r1, r1
 8018c7e:	3001      	adds	r0, #1
 8018c80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018c84:	4285      	cmp	r5, r0
 8018c86:	f84c 1b04 	str.w	r1, [ip], #4
 8018c8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018c8e:	dcec      	bgt.n	8018c6a <__multadd+0x12>
 8018c90:	b30e      	cbz	r6, 8018cd6 <__multadd+0x7e>
 8018c92:	68a3      	ldr	r3, [r4, #8]
 8018c94:	42ab      	cmp	r3, r5
 8018c96:	dc19      	bgt.n	8018ccc <__multadd+0x74>
 8018c98:	6861      	ldr	r1, [r4, #4]
 8018c9a:	4638      	mov	r0, r7
 8018c9c:	3101      	adds	r1, #1
 8018c9e:	f7ff ff79 	bl	8018b94 <_Balloc>
 8018ca2:	4680      	mov	r8, r0
 8018ca4:	b928      	cbnz	r0, 8018cb2 <__multadd+0x5a>
 8018ca6:	4602      	mov	r2, r0
 8018ca8:	4b0c      	ldr	r3, [pc, #48]	; (8018cdc <__multadd+0x84>)
 8018caa:	480d      	ldr	r0, [pc, #52]	; (8018ce0 <__multadd+0x88>)
 8018cac:	21ba      	movs	r1, #186	; 0xba
 8018cae:	f000 fcf9 	bl	80196a4 <__assert_func>
 8018cb2:	6922      	ldr	r2, [r4, #16]
 8018cb4:	3202      	adds	r2, #2
 8018cb6:	f104 010c 	add.w	r1, r4, #12
 8018cba:	0092      	lsls	r2, r2, #2
 8018cbc:	300c      	adds	r0, #12
 8018cbe:	f7fe ffe0 	bl	8017c82 <memcpy>
 8018cc2:	4621      	mov	r1, r4
 8018cc4:	4638      	mov	r0, r7
 8018cc6:	f7ff ffa5 	bl	8018c14 <_Bfree>
 8018cca:	4644      	mov	r4, r8
 8018ccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018cd0:	3501      	adds	r5, #1
 8018cd2:	615e      	str	r6, [r3, #20]
 8018cd4:	6125      	str	r5, [r4, #16]
 8018cd6:	4620      	mov	r0, r4
 8018cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cdc:	0801c715 	.word	0x0801c715
 8018ce0:	0801c726 	.word	0x0801c726

08018ce4 <__hi0bits>:
 8018ce4:	0c03      	lsrs	r3, r0, #16
 8018ce6:	041b      	lsls	r3, r3, #16
 8018ce8:	b9d3      	cbnz	r3, 8018d20 <__hi0bits+0x3c>
 8018cea:	0400      	lsls	r0, r0, #16
 8018cec:	2310      	movs	r3, #16
 8018cee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018cf2:	bf04      	itt	eq
 8018cf4:	0200      	lsleq	r0, r0, #8
 8018cf6:	3308      	addeq	r3, #8
 8018cf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018cfc:	bf04      	itt	eq
 8018cfe:	0100      	lsleq	r0, r0, #4
 8018d00:	3304      	addeq	r3, #4
 8018d02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018d06:	bf04      	itt	eq
 8018d08:	0080      	lsleq	r0, r0, #2
 8018d0a:	3302      	addeq	r3, #2
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	db05      	blt.n	8018d1c <__hi0bits+0x38>
 8018d10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018d14:	f103 0301 	add.w	r3, r3, #1
 8018d18:	bf08      	it	eq
 8018d1a:	2320      	moveq	r3, #32
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	4770      	bx	lr
 8018d20:	2300      	movs	r3, #0
 8018d22:	e7e4      	b.n	8018cee <__hi0bits+0xa>

08018d24 <__lo0bits>:
 8018d24:	6803      	ldr	r3, [r0, #0]
 8018d26:	f013 0207 	ands.w	r2, r3, #7
 8018d2a:	d00c      	beq.n	8018d46 <__lo0bits+0x22>
 8018d2c:	07d9      	lsls	r1, r3, #31
 8018d2e:	d422      	bmi.n	8018d76 <__lo0bits+0x52>
 8018d30:	079a      	lsls	r2, r3, #30
 8018d32:	bf49      	itett	mi
 8018d34:	085b      	lsrmi	r3, r3, #1
 8018d36:	089b      	lsrpl	r3, r3, #2
 8018d38:	6003      	strmi	r3, [r0, #0]
 8018d3a:	2201      	movmi	r2, #1
 8018d3c:	bf5c      	itt	pl
 8018d3e:	6003      	strpl	r3, [r0, #0]
 8018d40:	2202      	movpl	r2, #2
 8018d42:	4610      	mov	r0, r2
 8018d44:	4770      	bx	lr
 8018d46:	b299      	uxth	r1, r3
 8018d48:	b909      	cbnz	r1, 8018d4e <__lo0bits+0x2a>
 8018d4a:	0c1b      	lsrs	r3, r3, #16
 8018d4c:	2210      	movs	r2, #16
 8018d4e:	b2d9      	uxtb	r1, r3
 8018d50:	b909      	cbnz	r1, 8018d56 <__lo0bits+0x32>
 8018d52:	3208      	adds	r2, #8
 8018d54:	0a1b      	lsrs	r3, r3, #8
 8018d56:	0719      	lsls	r1, r3, #28
 8018d58:	bf04      	itt	eq
 8018d5a:	091b      	lsreq	r3, r3, #4
 8018d5c:	3204      	addeq	r2, #4
 8018d5e:	0799      	lsls	r1, r3, #30
 8018d60:	bf04      	itt	eq
 8018d62:	089b      	lsreq	r3, r3, #2
 8018d64:	3202      	addeq	r2, #2
 8018d66:	07d9      	lsls	r1, r3, #31
 8018d68:	d403      	bmi.n	8018d72 <__lo0bits+0x4e>
 8018d6a:	085b      	lsrs	r3, r3, #1
 8018d6c:	f102 0201 	add.w	r2, r2, #1
 8018d70:	d003      	beq.n	8018d7a <__lo0bits+0x56>
 8018d72:	6003      	str	r3, [r0, #0]
 8018d74:	e7e5      	b.n	8018d42 <__lo0bits+0x1e>
 8018d76:	2200      	movs	r2, #0
 8018d78:	e7e3      	b.n	8018d42 <__lo0bits+0x1e>
 8018d7a:	2220      	movs	r2, #32
 8018d7c:	e7e1      	b.n	8018d42 <__lo0bits+0x1e>
	...

08018d80 <__i2b>:
 8018d80:	b510      	push	{r4, lr}
 8018d82:	460c      	mov	r4, r1
 8018d84:	2101      	movs	r1, #1
 8018d86:	f7ff ff05 	bl	8018b94 <_Balloc>
 8018d8a:	4602      	mov	r2, r0
 8018d8c:	b928      	cbnz	r0, 8018d9a <__i2b+0x1a>
 8018d8e:	4b05      	ldr	r3, [pc, #20]	; (8018da4 <__i2b+0x24>)
 8018d90:	4805      	ldr	r0, [pc, #20]	; (8018da8 <__i2b+0x28>)
 8018d92:	f240 1145 	movw	r1, #325	; 0x145
 8018d96:	f000 fc85 	bl	80196a4 <__assert_func>
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	6144      	str	r4, [r0, #20]
 8018d9e:	6103      	str	r3, [r0, #16]
 8018da0:	bd10      	pop	{r4, pc}
 8018da2:	bf00      	nop
 8018da4:	0801c715 	.word	0x0801c715
 8018da8:	0801c726 	.word	0x0801c726

08018dac <__multiply>:
 8018dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018db0:	4691      	mov	r9, r2
 8018db2:	690a      	ldr	r2, [r1, #16]
 8018db4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018db8:	429a      	cmp	r2, r3
 8018dba:	bfb8      	it	lt
 8018dbc:	460b      	movlt	r3, r1
 8018dbe:	460c      	mov	r4, r1
 8018dc0:	bfbc      	itt	lt
 8018dc2:	464c      	movlt	r4, r9
 8018dc4:	4699      	movlt	r9, r3
 8018dc6:	6927      	ldr	r7, [r4, #16]
 8018dc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018dcc:	68a3      	ldr	r3, [r4, #8]
 8018dce:	6861      	ldr	r1, [r4, #4]
 8018dd0:	eb07 060a 	add.w	r6, r7, sl
 8018dd4:	42b3      	cmp	r3, r6
 8018dd6:	b085      	sub	sp, #20
 8018dd8:	bfb8      	it	lt
 8018dda:	3101      	addlt	r1, #1
 8018ddc:	f7ff feda 	bl	8018b94 <_Balloc>
 8018de0:	b930      	cbnz	r0, 8018df0 <__multiply+0x44>
 8018de2:	4602      	mov	r2, r0
 8018de4:	4b44      	ldr	r3, [pc, #272]	; (8018ef8 <__multiply+0x14c>)
 8018de6:	4845      	ldr	r0, [pc, #276]	; (8018efc <__multiply+0x150>)
 8018de8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018dec:	f000 fc5a 	bl	80196a4 <__assert_func>
 8018df0:	f100 0514 	add.w	r5, r0, #20
 8018df4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018df8:	462b      	mov	r3, r5
 8018dfa:	2200      	movs	r2, #0
 8018dfc:	4543      	cmp	r3, r8
 8018dfe:	d321      	bcc.n	8018e44 <__multiply+0x98>
 8018e00:	f104 0314 	add.w	r3, r4, #20
 8018e04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018e08:	f109 0314 	add.w	r3, r9, #20
 8018e0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018e10:	9202      	str	r2, [sp, #8]
 8018e12:	1b3a      	subs	r2, r7, r4
 8018e14:	3a15      	subs	r2, #21
 8018e16:	f022 0203 	bic.w	r2, r2, #3
 8018e1a:	3204      	adds	r2, #4
 8018e1c:	f104 0115 	add.w	r1, r4, #21
 8018e20:	428f      	cmp	r7, r1
 8018e22:	bf38      	it	cc
 8018e24:	2204      	movcc	r2, #4
 8018e26:	9201      	str	r2, [sp, #4]
 8018e28:	9a02      	ldr	r2, [sp, #8]
 8018e2a:	9303      	str	r3, [sp, #12]
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d80c      	bhi.n	8018e4a <__multiply+0x9e>
 8018e30:	2e00      	cmp	r6, #0
 8018e32:	dd03      	ble.n	8018e3c <__multiply+0x90>
 8018e34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d05b      	beq.n	8018ef4 <__multiply+0x148>
 8018e3c:	6106      	str	r6, [r0, #16]
 8018e3e:	b005      	add	sp, #20
 8018e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e44:	f843 2b04 	str.w	r2, [r3], #4
 8018e48:	e7d8      	b.n	8018dfc <__multiply+0x50>
 8018e4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8018e4e:	f1ba 0f00 	cmp.w	sl, #0
 8018e52:	d024      	beq.n	8018e9e <__multiply+0xf2>
 8018e54:	f104 0e14 	add.w	lr, r4, #20
 8018e58:	46a9      	mov	r9, r5
 8018e5a:	f04f 0c00 	mov.w	ip, #0
 8018e5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018e62:	f8d9 1000 	ldr.w	r1, [r9]
 8018e66:	fa1f fb82 	uxth.w	fp, r2
 8018e6a:	b289      	uxth	r1, r1
 8018e6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8018e70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018e74:	f8d9 2000 	ldr.w	r2, [r9]
 8018e78:	4461      	add	r1, ip
 8018e7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018e7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8018e82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018e86:	b289      	uxth	r1, r1
 8018e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018e8c:	4577      	cmp	r7, lr
 8018e8e:	f849 1b04 	str.w	r1, [r9], #4
 8018e92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018e96:	d8e2      	bhi.n	8018e5e <__multiply+0xb2>
 8018e98:	9a01      	ldr	r2, [sp, #4]
 8018e9a:	f845 c002 	str.w	ip, [r5, r2]
 8018e9e:	9a03      	ldr	r2, [sp, #12]
 8018ea0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018ea4:	3304      	adds	r3, #4
 8018ea6:	f1b9 0f00 	cmp.w	r9, #0
 8018eaa:	d021      	beq.n	8018ef0 <__multiply+0x144>
 8018eac:	6829      	ldr	r1, [r5, #0]
 8018eae:	f104 0c14 	add.w	ip, r4, #20
 8018eb2:	46ae      	mov	lr, r5
 8018eb4:	f04f 0a00 	mov.w	sl, #0
 8018eb8:	f8bc b000 	ldrh.w	fp, [ip]
 8018ebc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018ec0:	fb09 220b 	mla	r2, r9, fp, r2
 8018ec4:	4452      	add	r2, sl
 8018ec6:	b289      	uxth	r1, r1
 8018ec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018ecc:	f84e 1b04 	str.w	r1, [lr], #4
 8018ed0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018ed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018ed8:	f8be 1000 	ldrh.w	r1, [lr]
 8018edc:	fb09 110a 	mla	r1, r9, sl, r1
 8018ee0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8018ee4:	4567      	cmp	r7, ip
 8018ee6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018eea:	d8e5      	bhi.n	8018eb8 <__multiply+0x10c>
 8018eec:	9a01      	ldr	r2, [sp, #4]
 8018eee:	50a9      	str	r1, [r5, r2]
 8018ef0:	3504      	adds	r5, #4
 8018ef2:	e799      	b.n	8018e28 <__multiply+0x7c>
 8018ef4:	3e01      	subs	r6, #1
 8018ef6:	e79b      	b.n	8018e30 <__multiply+0x84>
 8018ef8:	0801c715 	.word	0x0801c715
 8018efc:	0801c726 	.word	0x0801c726

08018f00 <__pow5mult>:
 8018f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f04:	4615      	mov	r5, r2
 8018f06:	f012 0203 	ands.w	r2, r2, #3
 8018f0a:	4606      	mov	r6, r0
 8018f0c:	460f      	mov	r7, r1
 8018f0e:	d007      	beq.n	8018f20 <__pow5mult+0x20>
 8018f10:	4c25      	ldr	r4, [pc, #148]	; (8018fa8 <__pow5mult+0xa8>)
 8018f12:	3a01      	subs	r2, #1
 8018f14:	2300      	movs	r3, #0
 8018f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f1a:	f7ff fe9d 	bl	8018c58 <__multadd>
 8018f1e:	4607      	mov	r7, r0
 8018f20:	10ad      	asrs	r5, r5, #2
 8018f22:	d03d      	beq.n	8018fa0 <__pow5mult+0xa0>
 8018f24:	69f4      	ldr	r4, [r6, #28]
 8018f26:	b97c      	cbnz	r4, 8018f48 <__pow5mult+0x48>
 8018f28:	2010      	movs	r0, #16
 8018f2a:	f7ff fd7f 	bl	8018a2c <malloc>
 8018f2e:	4602      	mov	r2, r0
 8018f30:	61f0      	str	r0, [r6, #28]
 8018f32:	b928      	cbnz	r0, 8018f40 <__pow5mult+0x40>
 8018f34:	4b1d      	ldr	r3, [pc, #116]	; (8018fac <__pow5mult+0xac>)
 8018f36:	481e      	ldr	r0, [pc, #120]	; (8018fb0 <__pow5mult+0xb0>)
 8018f38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018f3c:	f000 fbb2 	bl	80196a4 <__assert_func>
 8018f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018f44:	6004      	str	r4, [r0, #0]
 8018f46:	60c4      	str	r4, [r0, #12]
 8018f48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018f50:	b94c      	cbnz	r4, 8018f66 <__pow5mult+0x66>
 8018f52:	f240 2171 	movw	r1, #625	; 0x271
 8018f56:	4630      	mov	r0, r6
 8018f58:	f7ff ff12 	bl	8018d80 <__i2b>
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018f62:	4604      	mov	r4, r0
 8018f64:	6003      	str	r3, [r0, #0]
 8018f66:	f04f 0900 	mov.w	r9, #0
 8018f6a:	07eb      	lsls	r3, r5, #31
 8018f6c:	d50a      	bpl.n	8018f84 <__pow5mult+0x84>
 8018f6e:	4639      	mov	r1, r7
 8018f70:	4622      	mov	r2, r4
 8018f72:	4630      	mov	r0, r6
 8018f74:	f7ff ff1a 	bl	8018dac <__multiply>
 8018f78:	4639      	mov	r1, r7
 8018f7a:	4680      	mov	r8, r0
 8018f7c:	4630      	mov	r0, r6
 8018f7e:	f7ff fe49 	bl	8018c14 <_Bfree>
 8018f82:	4647      	mov	r7, r8
 8018f84:	106d      	asrs	r5, r5, #1
 8018f86:	d00b      	beq.n	8018fa0 <__pow5mult+0xa0>
 8018f88:	6820      	ldr	r0, [r4, #0]
 8018f8a:	b938      	cbnz	r0, 8018f9c <__pow5mult+0x9c>
 8018f8c:	4622      	mov	r2, r4
 8018f8e:	4621      	mov	r1, r4
 8018f90:	4630      	mov	r0, r6
 8018f92:	f7ff ff0b 	bl	8018dac <__multiply>
 8018f96:	6020      	str	r0, [r4, #0]
 8018f98:	f8c0 9000 	str.w	r9, [r0]
 8018f9c:	4604      	mov	r4, r0
 8018f9e:	e7e4      	b.n	8018f6a <__pow5mult+0x6a>
 8018fa0:	4638      	mov	r0, r7
 8018fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fa6:	bf00      	nop
 8018fa8:	0801c870 	.word	0x0801c870
 8018fac:	0801c6a6 	.word	0x0801c6a6
 8018fb0:	0801c726 	.word	0x0801c726

08018fb4 <__lshift>:
 8018fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fb8:	460c      	mov	r4, r1
 8018fba:	6849      	ldr	r1, [r1, #4]
 8018fbc:	6923      	ldr	r3, [r4, #16]
 8018fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018fc2:	68a3      	ldr	r3, [r4, #8]
 8018fc4:	4607      	mov	r7, r0
 8018fc6:	4691      	mov	r9, r2
 8018fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018fcc:	f108 0601 	add.w	r6, r8, #1
 8018fd0:	42b3      	cmp	r3, r6
 8018fd2:	db0b      	blt.n	8018fec <__lshift+0x38>
 8018fd4:	4638      	mov	r0, r7
 8018fd6:	f7ff fddd 	bl	8018b94 <_Balloc>
 8018fda:	4605      	mov	r5, r0
 8018fdc:	b948      	cbnz	r0, 8018ff2 <__lshift+0x3e>
 8018fde:	4602      	mov	r2, r0
 8018fe0:	4b28      	ldr	r3, [pc, #160]	; (8019084 <__lshift+0xd0>)
 8018fe2:	4829      	ldr	r0, [pc, #164]	; (8019088 <__lshift+0xd4>)
 8018fe4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018fe8:	f000 fb5c 	bl	80196a4 <__assert_func>
 8018fec:	3101      	adds	r1, #1
 8018fee:	005b      	lsls	r3, r3, #1
 8018ff0:	e7ee      	b.n	8018fd0 <__lshift+0x1c>
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	f100 0114 	add.w	r1, r0, #20
 8018ff8:	f100 0210 	add.w	r2, r0, #16
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	4553      	cmp	r3, sl
 8019000:	db33      	blt.n	801906a <__lshift+0xb6>
 8019002:	6920      	ldr	r0, [r4, #16]
 8019004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019008:	f104 0314 	add.w	r3, r4, #20
 801900c:	f019 091f 	ands.w	r9, r9, #31
 8019010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019018:	d02b      	beq.n	8019072 <__lshift+0xbe>
 801901a:	f1c9 0e20 	rsb	lr, r9, #32
 801901e:	468a      	mov	sl, r1
 8019020:	2200      	movs	r2, #0
 8019022:	6818      	ldr	r0, [r3, #0]
 8019024:	fa00 f009 	lsl.w	r0, r0, r9
 8019028:	4310      	orrs	r0, r2
 801902a:	f84a 0b04 	str.w	r0, [sl], #4
 801902e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019032:	459c      	cmp	ip, r3
 8019034:	fa22 f20e 	lsr.w	r2, r2, lr
 8019038:	d8f3      	bhi.n	8019022 <__lshift+0x6e>
 801903a:	ebac 0304 	sub.w	r3, ip, r4
 801903e:	3b15      	subs	r3, #21
 8019040:	f023 0303 	bic.w	r3, r3, #3
 8019044:	3304      	adds	r3, #4
 8019046:	f104 0015 	add.w	r0, r4, #21
 801904a:	4584      	cmp	ip, r0
 801904c:	bf38      	it	cc
 801904e:	2304      	movcc	r3, #4
 8019050:	50ca      	str	r2, [r1, r3]
 8019052:	b10a      	cbz	r2, 8019058 <__lshift+0xa4>
 8019054:	f108 0602 	add.w	r6, r8, #2
 8019058:	3e01      	subs	r6, #1
 801905a:	4638      	mov	r0, r7
 801905c:	612e      	str	r6, [r5, #16]
 801905e:	4621      	mov	r1, r4
 8019060:	f7ff fdd8 	bl	8018c14 <_Bfree>
 8019064:	4628      	mov	r0, r5
 8019066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801906a:	f842 0f04 	str.w	r0, [r2, #4]!
 801906e:	3301      	adds	r3, #1
 8019070:	e7c5      	b.n	8018ffe <__lshift+0x4a>
 8019072:	3904      	subs	r1, #4
 8019074:	f853 2b04 	ldr.w	r2, [r3], #4
 8019078:	f841 2f04 	str.w	r2, [r1, #4]!
 801907c:	459c      	cmp	ip, r3
 801907e:	d8f9      	bhi.n	8019074 <__lshift+0xc0>
 8019080:	e7ea      	b.n	8019058 <__lshift+0xa4>
 8019082:	bf00      	nop
 8019084:	0801c715 	.word	0x0801c715
 8019088:	0801c726 	.word	0x0801c726

0801908c <__mcmp>:
 801908c:	b530      	push	{r4, r5, lr}
 801908e:	6902      	ldr	r2, [r0, #16]
 8019090:	690c      	ldr	r4, [r1, #16]
 8019092:	1b12      	subs	r2, r2, r4
 8019094:	d10e      	bne.n	80190b4 <__mcmp+0x28>
 8019096:	f100 0314 	add.w	r3, r0, #20
 801909a:	3114      	adds	r1, #20
 801909c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80190a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80190a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80190a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80190ac:	42a5      	cmp	r5, r4
 80190ae:	d003      	beq.n	80190b8 <__mcmp+0x2c>
 80190b0:	d305      	bcc.n	80190be <__mcmp+0x32>
 80190b2:	2201      	movs	r2, #1
 80190b4:	4610      	mov	r0, r2
 80190b6:	bd30      	pop	{r4, r5, pc}
 80190b8:	4283      	cmp	r3, r0
 80190ba:	d3f3      	bcc.n	80190a4 <__mcmp+0x18>
 80190bc:	e7fa      	b.n	80190b4 <__mcmp+0x28>
 80190be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80190c2:	e7f7      	b.n	80190b4 <__mcmp+0x28>

080190c4 <__mdiff>:
 80190c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c8:	460c      	mov	r4, r1
 80190ca:	4606      	mov	r6, r0
 80190cc:	4611      	mov	r1, r2
 80190ce:	4620      	mov	r0, r4
 80190d0:	4690      	mov	r8, r2
 80190d2:	f7ff ffdb 	bl	801908c <__mcmp>
 80190d6:	1e05      	subs	r5, r0, #0
 80190d8:	d110      	bne.n	80190fc <__mdiff+0x38>
 80190da:	4629      	mov	r1, r5
 80190dc:	4630      	mov	r0, r6
 80190de:	f7ff fd59 	bl	8018b94 <_Balloc>
 80190e2:	b930      	cbnz	r0, 80190f2 <__mdiff+0x2e>
 80190e4:	4b3a      	ldr	r3, [pc, #232]	; (80191d0 <__mdiff+0x10c>)
 80190e6:	4602      	mov	r2, r0
 80190e8:	f240 2137 	movw	r1, #567	; 0x237
 80190ec:	4839      	ldr	r0, [pc, #228]	; (80191d4 <__mdiff+0x110>)
 80190ee:	f000 fad9 	bl	80196a4 <__assert_func>
 80190f2:	2301      	movs	r3, #1
 80190f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80190f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190fc:	bfa4      	itt	ge
 80190fe:	4643      	movge	r3, r8
 8019100:	46a0      	movge	r8, r4
 8019102:	4630      	mov	r0, r6
 8019104:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019108:	bfa6      	itte	ge
 801910a:	461c      	movge	r4, r3
 801910c:	2500      	movge	r5, #0
 801910e:	2501      	movlt	r5, #1
 8019110:	f7ff fd40 	bl	8018b94 <_Balloc>
 8019114:	b920      	cbnz	r0, 8019120 <__mdiff+0x5c>
 8019116:	4b2e      	ldr	r3, [pc, #184]	; (80191d0 <__mdiff+0x10c>)
 8019118:	4602      	mov	r2, r0
 801911a:	f240 2145 	movw	r1, #581	; 0x245
 801911e:	e7e5      	b.n	80190ec <__mdiff+0x28>
 8019120:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019124:	6926      	ldr	r6, [r4, #16]
 8019126:	60c5      	str	r5, [r0, #12]
 8019128:	f104 0914 	add.w	r9, r4, #20
 801912c:	f108 0514 	add.w	r5, r8, #20
 8019130:	f100 0e14 	add.w	lr, r0, #20
 8019134:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019138:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801913c:	f108 0210 	add.w	r2, r8, #16
 8019140:	46f2      	mov	sl, lr
 8019142:	2100      	movs	r1, #0
 8019144:	f859 3b04 	ldr.w	r3, [r9], #4
 8019148:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801914c:	fa11 f88b 	uxtah	r8, r1, fp
 8019150:	b299      	uxth	r1, r3
 8019152:	0c1b      	lsrs	r3, r3, #16
 8019154:	eba8 0801 	sub.w	r8, r8, r1
 8019158:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801915c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019160:	fa1f f888 	uxth.w	r8, r8
 8019164:	1419      	asrs	r1, r3, #16
 8019166:	454e      	cmp	r6, r9
 8019168:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801916c:	f84a 3b04 	str.w	r3, [sl], #4
 8019170:	d8e8      	bhi.n	8019144 <__mdiff+0x80>
 8019172:	1b33      	subs	r3, r6, r4
 8019174:	3b15      	subs	r3, #21
 8019176:	f023 0303 	bic.w	r3, r3, #3
 801917a:	3304      	adds	r3, #4
 801917c:	3415      	adds	r4, #21
 801917e:	42a6      	cmp	r6, r4
 8019180:	bf38      	it	cc
 8019182:	2304      	movcc	r3, #4
 8019184:	441d      	add	r5, r3
 8019186:	4473      	add	r3, lr
 8019188:	469e      	mov	lr, r3
 801918a:	462e      	mov	r6, r5
 801918c:	4566      	cmp	r6, ip
 801918e:	d30e      	bcc.n	80191ae <__mdiff+0xea>
 8019190:	f10c 0203 	add.w	r2, ip, #3
 8019194:	1b52      	subs	r2, r2, r5
 8019196:	f022 0203 	bic.w	r2, r2, #3
 801919a:	3d03      	subs	r5, #3
 801919c:	45ac      	cmp	ip, r5
 801919e:	bf38      	it	cc
 80191a0:	2200      	movcc	r2, #0
 80191a2:	4413      	add	r3, r2
 80191a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80191a8:	b17a      	cbz	r2, 80191ca <__mdiff+0x106>
 80191aa:	6107      	str	r7, [r0, #16]
 80191ac:	e7a4      	b.n	80190f8 <__mdiff+0x34>
 80191ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80191b2:	fa11 f288 	uxtah	r2, r1, r8
 80191b6:	1414      	asrs	r4, r2, #16
 80191b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80191bc:	b292      	uxth	r2, r2
 80191be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80191c2:	f84e 2b04 	str.w	r2, [lr], #4
 80191c6:	1421      	asrs	r1, r4, #16
 80191c8:	e7e0      	b.n	801918c <__mdiff+0xc8>
 80191ca:	3f01      	subs	r7, #1
 80191cc:	e7ea      	b.n	80191a4 <__mdiff+0xe0>
 80191ce:	bf00      	nop
 80191d0:	0801c715 	.word	0x0801c715
 80191d4:	0801c726 	.word	0x0801c726

080191d8 <__d2b>:
 80191d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80191dc:	460f      	mov	r7, r1
 80191de:	2101      	movs	r1, #1
 80191e0:	ec59 8b10 	vmov	r8, r9, d0
 80191e4:	4616      	mov	r6, r2
 80191e6:	f7ff fcd5 	bl	8018b94 <_Balloc>
 80191ea:	4604      	mov	r4, r0
 80191ec:	b930      	cbnz	r0, 80191fc <__d2b+0x24>
 80191ee:	4602      	mov	r2, r0
 80191f0:	4b24      	ldr	r3, [pc, #144]	; (8019284 <__d2b+0xac>)
 80191f2:	4825      	ldr	r0, [pc, #148]	; (8019288 <__d2b+0xb0>)
 80191f4:	f240 310f 	movw	r1, #783	; 0x30f
 80191f8:	f000 fa54 	bl	80196a4 <__assert_func>
 80191fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019204:	bb2d      	cbnz	r5, 8019252 <__d2b+0x7a>
 8019206:	9301      	str	r3, [sp, #4]
 8019208:	f1b8 0300 	subs.w	r3, r8, #0
 801920c:	d026      	beq.n	801925c <__d2b+0x84>
 801920e:	4668      	mov	r0, sp
 8019210:	9300      	str	r3, [sp, #0]
 8019212:	f7ff fd87 	bl	8018d24 <__lo0bits>
 8019216:	e9dd 1200 	ldrd	r1, r2, [sp]
 801921a:	b1e8      	cbz	r0, 8019258 <__d2b+0x80>
 801921c:	f1c0 0320 	rsb	r3, r0, #32
 8019220:	fa02 f303 	lsl.w	r3, r2, r3
 8019224:	430b      	orrs	r3, r1
 8019226:	40c2      	lsrs	r2, r0
 8019228:	6163      	str	r3, [r4, #20]
 801922a:	9201      	str	r2, [sp, #4]
 801922c:	9b01      	ldr	r3, [sp, #4]
 801922e:	61a3      	str	r3, [r4, #24]
 8019230:	2b00      	cmp	r3, #0
 8019232:	bf14      	ite	ne
 8019234:	2202      	movne	r2, #2
 8019236:	2201      	moveq	r2, #1
 8019238:	6122      	str	r2, [r4, #16]
 801923a:	b1bd      	cbz	r5, 801926c <__d2b+0x94>
 801923c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019240:	4405      	add	r5, r0
 8019242:	603d      	str	r5, [r7, #0]
 8019244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019248:	6030      	str	r0, [r6, #0]
 801924a:	4620      	mov	r0, r4
 801924c:	b003      	add	sp, #12
 801924e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019256:	e7d6      	b.n	8019206 <__d2b+0x2e>
 8019258:	6161      	str	r1, [r4, #20]
 801925a:	e7e7      	b.n	801922c <__d2b+0x54>
 801925c:	a801      	add	r0, sp, #4
 801925e:	f7ff fd61 	bl	8018d24 <__lo0bits>
 8019262:	9b01      	ldr	r3, [sp, #4]
 8019264:	6163      	str	r3, [r4, #20]
 8019266:	3020      	adds	r0, #32
 8019268:	2201      	movs	r2, #1
 801926a:	e7e5      	b.n	8019238 <__d2b+0x60>
 801926c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019274:	6038      	str	r0, [r7, #0]
 8019276:	6918      	ldr	r0, [r3, #16]
 8019278:	f7ff fd34 	bl	8018ce4 <__hi0bits>
 801927c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019280:	e7e2      	b.n	8019248 <__d2b+0x70>
 8019282:	bf00      	nop
 8019284:	0801c715 	.word	0x0801c715
 8019288:	0801c726 	.word	0x0801c726

0801928c <__sfputc_r>:
 801928c:	6893      	ldr	r3, [r2, #8]
 801928e:	3b01      	subs	r3, #1
 8019290:	2b00      	cmp	r3, #0
 8019292:	b410      	push	{r4}
 8019294:	6093      	str	r3, [r2, #8]
 8019296:	da08      	bge.n	80192aa <__sfputc_r+0x1e>
 8019298:	6994      	ldr	r4, [r2, #24]
 801929a:	42a3      	cmp	r3, r4
 801929c:	db01      	blt.n	80192a2 <__sfputc_r+0x16>
 801929e:	290a      	cmp	r1, #10
 80192a0:	d103      	bne.n	80192aa <__sfputc_r+0x1e>
 80192a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192a6:	f7fe bb52 	b.w	801794e <__swbuf_r>
 80192aa:	6813      	ldr	r3, [r2, #0]
 80192ac:	1c58      	adds	r0, r3, #1
 80192ae:	6010      	str	r0, [r2, #0]
 80192b0:	7019      	strb	r1, [r3, #0]
 80192b2:	4608      	mov	r0, r1
 80192b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80192b8:	4770      	bx	lr

080192ba <__sfputs_r>:
 80192ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192bc:	4606      	mov	r6, r0
 80192be:	460f      	mov	r7, r1
 80192c0:	4614      	mov	r4, r2
 80192c2:	18d5      	adds	r5, r2, r3
 80192c4:	42ac      	cmp	r4, r5
 80192c6:	d101      	bne.n	80192cc <__sfputs_r+0x12>
 80192c8:	2000      	movs	r0, #0
 80192ca:	e007      	b.n	80192dc <__sfputs_r+0x22>
 80192cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192d0:	463a      	mov	r2, r7
 80192d2:	4630      	mov	r0, r6
 80192d4:	f7ff ffda 	bl	801928c <__sfputc_r>
 80192d8:	1c43      	adds	r3, r0, #1
 80192da:	d1f3      	bne.n	80192c4 <__sfputs_r+0xa>
 80192dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080192e0 <_vfiprintf_r>:
 80192e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e4:	460d      	mov	r5, r1
 80192e6:	b09d      	sub	sp, #116	; 0x74
 80192e8:	4614      	mov	r4, r2
 80192ea:	4698      	mov	r8, r3
 80192ec:	4606      	mov	r6, r0
 80192ee:	b118      	cbz	r0, 80192f8 <_vfiprintf_r+0x18>
 80192f0:	6a03      	ldr	r3, [r0, #32]
 80192f2:	b90b      	cbnz	r3, 80192f8 <_vfiprintf_r+0x18>
 80192f4:	f7fe fa98 	bl	8017828 <__sinit>
 80192f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80192fa:	07d9      	lsls	r1, r3, #31
 80192fc:	d405      	bmi.n	801930a <_vfiprintf_r+0x2a>
 80192fe:	89ab      	ldrh	r3, [r5, #12]
 8019300:	059a      	lsls	r2, r3, #22
 8019302:	d402      	bmi.n	801930a <_vfiprintf_r+0x2a>
 8019304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019306:	f7fe fcba 	bl	8017c7e <__retarget_lock_acquire_recursive>
 801930a:	89ab      	ldrh	r3, [r5, #12]
 801930c:	071b      	lsls	r3, r3, #28
 801930e:	d501      	bpl.n	8019314 <_vfiprintf_r+0x34>
 8019310:	692b      	ldr	r3, [r5, #16]
 8019312:	b99b      	cbnz	r3, 801933c <_vfiprintf_r+0x5c>
 8019314:	4629      	mov	r1, r5
 8019316:	4630      	mov	r0, r6
 8019318:	f7fe fb56 	bl	80179c8 <__swsetup_r>
 801931c:	b170      	cbz	r0, 801933c <_vfiprintf_r+0x5c>
 801931e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019320:	07dc      	lsls	r4, r3, #31
 8019322:	d504      	bpl.n	801932e <_vfiprintf_r+0x4e>
 8019324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019328:	b01d      	add	sp, #116	; 0x74
 801932a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801932e:	89ab      	ldrh	r3, [r5, #12]
 8019330:	0598      	lsls	r0, r3, #22
 8019332:	d4f7      	bmi.n	8019324 <_vfiprintf_r+0x44>
 8019334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019336:	f7fe fca3 	bl	8017c80 <__retarget_lock_release_recursive>
 801933a:	e7f3      	b.n	8019324 <_vfiprintf_r+0x44>
 801933c:	2300      	movs	r3, #0
 801933e:	9309      	str	r3, [sp, #36]	; 0x24
 8019340:	2320      	movs	r3, #32
 8019342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019346:	f8cd 800c 	str.w	r8, [sp, #12]
 801934a:	2330      	movs	r3, #48	; 0x30
 801934c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019500 <_vfiprintf_r+0x220>
 8019350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019354:	f04f 0901 	mov.w	r9, #1
 8019358:	4623      	mov	r3, r4
 801935a:	469a      	mov	sl, r3
 801935c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019360:	b10a      	cbz	r2, 8019366 <_vfiprintf_r+0x86>
 8019362:	2a25      	cmp	r2, #37	; 0x25
 8019364:	d1f9      	bne.n	801935a <_vfiprintf_r+0x7a>
 8019366:	ebba 0b04 	subs.w	fp, sl, r4
 801936a:	d00b      	beq.n	8019384 <_vfiprintf_r+0xa4>
 801936c:	465b      	mov	r3, fp
 801936e:	4622      	mov	r2, r4
 8019370:	4629      	mov	r1, r5
 8019372:	4630      	mov	r0, r6
 8019374:	f7ff ffa1 	bl	80192ba <__sfputs_r>
 8019378:	3001      	adds	r0, #1
 801937a:	f000 80a9 	beq.w	80194d0 <_vfiprintf_r+0x1f0>
 801937e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019380:	445a      	add	r2, fp
 8019382:	9209      	str	r2, [sp, #36]	; 0x24
 8019384:	f89a 3000 	ldrb.w	r3, [sl]
 8019388:	2b00      	cmp	r3, #0
 801938a:	f000 80a1 	beq.w	80194d0 <_vfiprintf_r+0x1f0>
 801938e:	2300      	movs	r3, #0
 8019390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019398:	f10a 0a01 	add.w	sl, sl, #1
 801939c:	9304      	str	r3, [sp, #16]
 801939e:	9307      	str	r3, [sp, #28]
 80193a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80193a4:	931a      	str	r3, [sp, #104]	; 0x68
 80193a6:	4654      	mov	r4, sl
 80193a8:	2205      	movs	r2, #5
 80193aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193ae:	4854      	ldr	r0, [pc, #336]	; (8019500 <_vfiprintf_r+0x220>)
 80193b0:	f7e6 ff1e 	bl	80001f0 <memchr>
 80193b4:	9a04      	ldr	r2, [sp, #16]
 80193b6:	b9d8      	cbnz	r0, 80193f0 <_vfiprintf_r+0x110>
 80193b8:	06d1      	lsls	r1, r2, #27
 80193ba:	bf44      	itt	mi
 80193bc:	2320      	movmi	r3, #32
 80193be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80193c2:	0713      	lsls	r3, r2, #28
 80193c4:	bf44      	itt	mi
 80193c6:	232b      	movmi	r3, #43	; 0x2b
 80193c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80193cc:	f89a 3000 	ldrb.w	r3, [sl]
 80193d0:	2b2a      	cmp	r3, #42	; 0x2a
 80193d2:	d015      	beq.n	8019400 <_vfiprintf_r+0x120>
 80193d4:	9a07      	ldr	r2, [sp, #28]
 80193d6:	4654      	mov	r4, sl
 80193d8:	2000      	movs	r0, #0
 80193da:	f04f 0c0a 	mov.w	ip, #10
 80193de:	4621      	mov	r1, r4
 80193e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193e4:	3b30      	subs	r3, #48	; 0x30
 80193e6:	2b09      	cmp	r3, #9
 80193e8:	d94d      	bls.n	8019486 <_vfiprintf_r+0x1a6>
 80193ea:	b1b0      	cbz	r0, 801941a <_vfiprintf_r+0x13a>
 80193ec:	9207      	str	r2, [sp, #28]
 80193ee:	e014      	b.n	801941a <_vfiprintf_r+0x13a>
 80193f0:	eba0 0308 	sub.w	r3, r0, r8
 80193f4:	fa09 f303 	lsl.w	r3, r9, r3
 80193f8:	4313      	orrs	r3, r2
 80193fa:	9304      	str	r3, [sp, #16]
 80193fc:	46a2      	mov	sl, r4
 80193fe:	e7d2      	b.n	80193a6 <_vfiprintf_r+0xc6>
 8019400:	9b03      	ldr	r3, [sp, #12]
 8019402:	1d19      	adds	r1, r3, #4
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	9103      	str	r1, [sp, #12]
 8019408:	2b00      	cmp	r3, #0
 801940a:	bfbb      	ittet	lt
 801940c:	425b      	neglt	r3, r3
 801940e:	f042 0202 	orrlt.w	r2, r2, #2
 8019412:	9307      	strge	r3, [sp, #28]
 8019414:	9307      	strlt	r3, [sp, #28]
 8019416:	bfb8      	it	lt
 8019418:	9204      	strlt	r2, [sp, #16]
 801941a:	7823      	ldrb	r3, [r4, #0]
 801941c:	2b2e      	cmp	r3, #46	; 0x2e
 801941e:	d10c      	bne.n	801943a <_vfiprintf_r+0x15a>
 8019420:	7863      	ldrb	r3, [r4, #1]
 8019422:	2b2a      	cmp	r3, #42	; 0x2a
 8019424:	d134      	bne.n	8019490 <_vfiprintf_r+0x1b0>
 8019426:	9b03      	ldr	r3, [sp, #12]
 8019428:	1d1a      	adds	r2, r3, #4
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	9203      	str	r2, [sp, #12]
 801942e:	2b00      	cmp	r3, #0
 8019430:	bfb8      	it	lt
 8019432:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019436:	3402      	adds	r4, #2
 8019438:	9305      	str	r3, [sp, #20]
 801943a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019510 <_vfiprintf_r+0x230>
 801943e:	7821      	ldrb	r1, [r4, #0]
 8019440:	2203      	movs	r2, #3
 8019442:	4650      	mov	r0, sl
 8019444:	f7e6 fed4 	bl	80001f0 <memchr>
 8019448:	b138      	cbz	r0, 801945a <_vfiprintf_r+0x17a>
 801944a:	9b04      	ldr	r3, [sp, #16]
 801944c:	eba0 000a 	sub.w	r0, r0, sl
 8019450:	2240      	movs	r2, #64	; 0x40
 8019452:	4082      	lsls	r2, r0
 8019454:	4313      	orrs	r3, r2
 8019456:	3401      	adds	r4, #1
 8019458:	9304      	str	r3, [sp, #16]
 801945a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801945e:	4829      	ldr	r0, [pc, #164]	; (8019504 <_vfiprintf_r+0x224>)
 8019460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019464:	2206      	movs	r2, #6
 8019466:	f7e6 fec3 	bl	80001f0 <memchr>
 801946a:	2800      	cmp	r0, #0
 801946c:	d03f      	beq.n	80194ee <_vfiprintf_r+0x20e>
 801946e:	4b26      	ldr	r3, [pc, #152]	; (8019508 <_vfiprintf_r+0x228>)
 8019470:	bb1b      	cbnz	r3, 80194ba <_vfiprintf_r+0x1da>
 8019472:	9b03      	ldr	r3, [sp, #12]
 8019474:	3307      	adds	r3, #7
 8019476:	f023 0307 	bic.w	r3, r3, #7
 801947a:	3308      	adds	r3, #8
 801947c:	9303      	str	r3, [sp, #12]
 801947e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019480:	443b      	add	r3, r7
 8019482:	9309      	str	r3, [sp, #36]	; 0x24
 8019484:	e768      	b.n	8019358 <_vfiprintf_r+0x78>
 8019486:	fb0c 3202 	mla	r2, ip, r2, r3
 801948a:	460c      	mov	r4, r1
 801948c:	2001      	movs	r0, #1
 801948e:	e7a6      	b.n	80193de <_vfiprintf_r+0xfe>
 8019490:	2300      	movs	r3, #0
 8019492:	3401      	adds	r4, #1
 8019494:	9305      	str	r3, [sp, #20]
 8019496:	4619      	mov	r1, r3
 8019498:	f04f 0c0a 	mov.w	ip, #10
 801949c:	4620      	mov	r0, r4
 801949e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80194a2:	3a30      	subs	r2, #48	; 0x30
 80194a4:	2a09      	cmp	r2, #9
 80194a6:	d903      	bls.n	80194b0 <_vfiprintf_r+0x1d0>
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d0c6      	beq.n	801943a <_vfiprintf_r+0x15a>
 80194ac:	9105      	str	r1, [sp, #20]
 80194ae:	e7c4      	b.n	801943a <_vfiprintf_r+0x15a>
 80194b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80194b4:	4604      	mov	r4, r0
 80194b6:	2301      	movs	r3, #1
 80194b8:	e7f0      	b.n	801949c <_vfiprintf_r+0x1bc>
 80194ba:	ab03      	add	r3, sp, #12
 80194bc:	9300      	str	r3, [sp, #0]
 80194be:	462a      	mov	r2, r5
 80194c0:	4b12      	ldr	r3, [pc, #72]	; (801950c <_vfiprintf_r+0x22c>)
 80194c2:	a904      	add	r1, sp, #16
 80194c4:	4630      	mov	r0, r6
 80194c6:	f7fd fc9b 	bl	8016e00 <_printf_float>
 80194ca:	4607      	mov	r7, r0
 80194cc:	1c78      	adds	r0, r7, #1
 80194ce:	d1d6      	bne.n	801947e <_vfiprintf_r+0x19e>
 80194d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80194d2:	07d9      	lsls	r1, r3, #31
 80194d4:	d405      	bmi.n	80194e2 <_vfiprintf_r+0x202>
 80194d6:	89ab      	ldrh	r3, [r5, #12]
 80194d8:	059a      	lsls	r2, r3, #22
 80194da:	d402      	bmi.n	80194e2 <_vfiprintf_r+0x202>
 80194dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194de:	f7fe fbcf 	bl	8017c80 <__retarget_lock_release_recursive>
 80194e2:	89ab      	ldrh	r3, [r5, #12]
 80194e4:	065b      	lsls	r3, r3, #25
 80194e6:	f53f af1d 	bmi.w	8019324 <_vfiprintf_r+0x44>
 80194ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194ec:	e71c      	b.n	8019328 <_vfiprintf_r+0x48>
 80194ee:	ab03      	add	r3, sp, #12
 80194f0:	9300      	str	r3, [sp, #0]
 80194f2:	462a      	mov	r2, r5
 80194f4:	4b05      	ldr	r3, [pc, #20]	; (801950c <_vfiprintf_r+0x22c>)
 80194f6:	a904      	add	r1, sp, #16
 80194f8:	4630      	mov	r0, r6
 80194fa:	f7fd ff25 	bl	8017348 <_printf_i>
 80194fe:	e7e4      	b.n	80194ca <_vfiprintf_r+0x1ea>
 8019500:	0801c87c 	.word	0x0801c87c
 8019504:	0801c886 	.word	0x0801c886
 8019508:	08016e01 	.word	0x08016e01
 801950c:	080192bb 	.word	0x080192bb
 8019510:	0801c882 	.word	0x0801c882

08019514 <__swhatbuf_r>:
 8019514:	b570      	push	{r4, r5, r6, lr}
 8019516:	460c      	mov	r4, r1
 8019518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801951c:	2900      	cmp	r1, #0
 801951e:	b096      	sub	sp, #88	; 0x58
 8019520:	4615      	mov	r5, r2
 8019522:	461e      	mov	r6, r3
 8019524:	da0d      	bge.n	8019542 <__swhatbuf_r+0x2e>
 8019526:	89a3      	ldrh	r3, [r4, #12]
 8019528:	f013 0f80 	tst.w	r3, #128	; 0x80
 801952c:	f04f 0100 	mov.w	r1, #0
 8019530:	bf0c      	ite	eq
 8019532:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019536:	2340      	movne	r3, #64	; 0x40
 8019538:	2000      	movs	r0, #0
 801953a:	6031      	str	r1, [r6, #0]
 801953c:	602b      	str	r3, [r5, #0]
 801953e:	b016      	add	sp, #88	; 0x58
 8019540:	bd70      	pop	{r4, r5, r6, pc}
 8019542:	466a      	mov	r2, sp
 8019544:	f000 f87c 	bl	8019640 <_fstat_r>
 8019548:	2800      	cmp	r0, #0
 801954a:	dbec      	blt.n	8019526 <__swhatbuf_r+0x12>
 801954c:	9901      	ldr	r1, [sp, #4]
 801954e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019552:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019556:	4259      	negs	r1, r3
 8019558:	4159      	adcs	r1, r3
 801955a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801955e:	e7eb      	b.n	8019538 <__swhatbuf_r+0x24>

08019560 <__smakebuf_r>:
 8019560:	898b      	ldrh	r3, [r1, #12]
 8019562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019564:	079d      	lsls	r5, r3, #30
 8019566:	4606      	mov	r6, r0
 8019568:	460c      	mov	r4, r1
 801956a:	d507      	bpl.n	801957c <__smakebuf_r+0x1c>
 801956c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019570:	6023      	str	r3, [r4, #0]
 8019572:	6123      	str	r3, [r4, #16]
 8019574:	2301      	movs	r3, #1
 8019576:	6163      	str	r3, [r4, #20]
 8019578:	b002      	add	sp, #8
 801957a:	bd70      	pop	{r4, r5, r6, pc}
 801957c:	ab01      	add	r3, sp, #4
 801957e:	466a      	mov	r2, sp
 8019580:	f7ff ffc8 	bl	8019514 <__swhatbuf_r>
 8019584:	9900      	ldr	r1, [sp, #0]
 8019586:	4605      	mov	r5, r0
 8019588:	4630      	mov	r0, r6
 801958a:	f7ff fa77 	bl	8018a7c <_malloc_r>
 801958e:	b948      	cbnz	r0, 80195a4 <__smakebuf_r+0x44>
 8019590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019594:	059a      	lsls	r2, r3, #22
 8019596:	d4ef      	bmi.n	8019578 <__smakebuf_r+0x18>
 8019598:	f023 0303 	bic.w	r3, r3, #3
 801959c:	f043 0302 	orr.w	r3, r3, #2
 80195a0:	81a3      	strh	r3, [r4, #12]
 80195a2:	e7e3      	b.n	801956c <__smakebuf_r+0xc>
 80195a4:	89a3      	ldrh	r3, [r4, #12]
 80195a6:	6020      	str	r0, [r4, #0]
 80195a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80195ac:	81a3      	strh	r3, [r4, #12]
 80195ae:	9b00      	ldr	r3, [sp, #0]
 80195b0:	6163      	str	r3, [r4, #20]
 80195b2:	9b01      	ldr	r3, [sp, #4]
 80195b4:	6120      	str	r0, [r4, #16]
 80195b6:	b15b      	cbz	r3, 80195d0 <__smakebuf_r+0x70>
 80195b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195bc:	4630      	mov	r0, r6
 80195be:	f000 f851 	bl	8019664 <_isatty_r>
 80195c2:	b128      	cbz	r0, 80195d0 <__smakebuf_r+0x70>
 80195c4:	89a3      	ldrh	r3, [r4, #12]
 80195c6:	f023 0303 	bic.w	r3, r3, #3
 80195ca:	f043 0301 	orr.w	r3, r3, #1
 80195ce:	81a3      	strh	r3, [r4, #12]
 80195d0:	89a3      	ldrh	r3, [r4, #12]
 80195d2:	431d      	orrs	r5, r3
 80195d4:	81a5      	strh	r5, [r4, #12]
 80195d6:	e7cf      	b.n	8019578 <__smakebuf_r+0x18>

080195d8 <_putc_r>:
 80195d8:	b570      	push	{r4, r5, r6, lr}
 80195da:	460d      	mov	r5, r1
 80195dc:	4614      	mov	r4, r2
 80195de:	4606      	mov	r6, r0
 80195e0:	b118      	cbz	r0, 80195ea <_putc_r+0x12>
 80195e2:	6a03      	ldr	r3, [r0, #32]
 80195e4:	b90b      	cbnz	r3, 80195ea <_putc_r+0x12>
 80195e6:	f7fe f91f 	bl	8017828 <__sinit>
 80195ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80195ec:	07d8      	lsls	r0, r3, #31
 80195ee:	d405      	bmi.n	80195fc <_putc_r+0x24>
 80195f0:	89a3      	ldrh	r3, [r4, #12]
 80195f2:	0599      	lsls	r1, r3, #22
 80195f4:	d402      	bmi.n	80195fc <_putc_r+0x24>
 80195f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195f8:	f7fe fb41 	bl	8017c7e <__retarget_lock_acquire_recursive>
 80195fc:	68a3      	ldr	r3, [r4, #8]
 80195fe:	3b01      	subs	r3, #1
 8019600:	2b00      	cmp	r3, #0
 8019602:	60a3      	str	r3, [r4, #8]
 8019604:	da05      	bge.n	8019612 <_putc_r+0x3a>
 8019606:	69a2      	ldr	r2, [r4, #24]
 8019608:	4293      	cmp	r3, r2
 801960a:	db12      	blt.n	8019632 <_putc_r+0x5a>
 801960c:	b2eb      	uxtb	r3, r5
 801960e:	2b0a      	cmp	r3, #10
 8019610:	d00f      	beq.n	8019632 <_putc_r+0x5a>
 8019612:	6823      	ldr	r3, [r4, #0]
 8019614:	1c5a      	adds	r2, r3, #1
 8019616:	6022      	str	r2, [r4, #0]
 8019618:	701d      	strb	r5, [r3, #0]
 801961a:	b2ed      	uxtb	r5, r5
 801961c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801961e:	07da      	lsls	r2, r3, #31
 8019620:	d405      	bmi.n	801962e <_putc_r+0x56>
 8019622:	89a3      	ldrh	r3, [r4, #12]
 8019624:	059b      	lsls	r3, r3, #22
 8019626:	d402      	bmi.n	801962e <_putc_r+0x56>
 8019628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801962a:	f7fe fb29 	bl	8017c80 <__retarget_lock_release_recursive>
 801962e:	4628      	mov	r0, r5
 8019630:	bd70      	pop	{r4, r5, r6, pc}
 8019632:	4629      	mov	r1, r5
 8019634:	4622      	mov	r2, r4
 8019636:	4630      	mov	r0, r6
 8019638:	f7fe f989 	bl	801794e <__swbuf_r>
 801963c:	4605      	mov	r5, r0
 801963e:	e7ed      	b.n	801961c <_putc_r+0x44>

08019640 <_fstat_r>:
 8019640:	b538      	push	{r3, r4, r5, lr}
 8019642:	4d07      	ldr	r5, [pc, #28]	; (8019660 <_fstat_r+0x20>)
 8019644:	2300      	movs	r3, #0
 8019646:	4604      	mov	r4, r0
 8019648:	4608      	mov	r0, r1
 801964a:	4611      	mov	r1, r2
 801964c:	602b      	str	r3, [r5, #0]
 801964e:	f7f0 f9fc 	bl	8009a4a <_fstat>
 8019652:	1c43      	adds	r3, r0, #1
 8019654:	d102      	bne.n	801965c <_fstat_r+0x1c>
 8019656:	682b      	ldr	r3, [r5, #0]
 8019658:	b103      	cbz	r3, 801965c <_fstat_r+0x1c>
 801965a:	6023      	str	r3, [r4, #0]
 801965c:	bd38      	pop	{r3, r4, r5, pc}
 801965e:	bf00      	nop
 8019660:	2000dd34 	.word	0x2000dd34

08019664 <_isatty_r>:
 8019664:	b538      	push	{r3, r4, r5, lr}
 8019666:	4d06      	ldr	r5, [pc, #24]	; (8019680 <_isatty_r+0x1c>)
 8019668:	2300      	movs	r3, #0
 801966a:	4604      	mov	r4, r0
 801966c:	4608      	mov	r0, r1
 801966e:	602b      	str	r3, [r5, #0]
 8019670:	f7f0 f9fb 	bl	8009a6a <_isatty>
 8019674:	1c43      	adds	r3, r0, #1
 8019676:	d102      	bne.n	801967e <_isatty_r+0x1a>
 8019678:	682b      	ldr	r3, [r5, #0]
 801967a:	b103      	cbz	r3, 801967e <_isatty_r+0x1a>
 801967c:	6023      	str	r3, [r4, #0]
 801967e:	bd38      	pop	{r3, r4, r5, pc}
 8019680:	2000dd34 	.word	0x2000dd34

08019684 <_sbrk_r>:
 8019684:	b538      	push	{r3, r4, r5, lr}
 8019686:	4d06      	ldr	r5, [pc, #24]	; (80196a0 <_sbrk_r+0x1c>)
 8019688:	2300      	movs	r3, #0
 801968a:	4604      	mov	r4, r0
 801968c:	4608      	mov	r0, r1
 801968e:	602b      	str	r3, [r5, #0]
 8019690:	f7f0 fa04 	bl	8009a9c <_sbrk>
 8019694:	1c43      	adds	r3, r0, #1
 8019696:	d102      	bne.n	801969e <_sbrk_r+0x1a>
 8019698:	682b      	ldr	r3, [r5, #0]
 801969a:	b103      	cbz	r3, 801969e <_sbrk_r+0x1a>
 801969c:	6023      	str	r3, [r4, #0]
 801969e:	bd38      	pop	{r3, r4, r5, pc}
 80196a0:	2000dd34 	.word	0x2000dd34

080196a4 <__assert_func>:
 80196a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80196a6:	4614      	mov	r4, r2
 80196a8:	461a      	mov	r2, r3
 80196aa:	4b09      	ldr	r3, [pc, #36]	; (80196d0 <__assert_func+0x2c>)
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	4605      	mov	r5, r0
 80196b0:	68d8      	ldr	r0, [r3, #12]
 80196b2:	b14c      	cbz	r4, 80196c8 <__assert_func+0x24>
 80196b4:	4b07      	ldr	r3, [pc, #28]	; (80196d4 <__assert_func+0x30>)
 80196b6:	9100      	str	r1, [sp, #0]
 80196b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80196bc:	4906      	ldr	r1, [pc, #24]	; (80196d8 <__assert_func+0x34>)
 80196be:	462b      	mov	r3, r5
 80196c0:	f000 f844 	bl	801974c <fiprintf>
 80196c4:	f000 f854 	bl	8019770 <abort>
 80196c8:	4b04      	ldr	r3, [pc, #16]	; (80196dc <__assert_func+0x38>)
 80196ca:	461c      	mov	r4, r3
 80196cc:	e7f3      	b.n	80196b6 <__assert_func+0x12>
 80196ce:	bf00      	nop
 80196d0:	200004ac 	.word	0x200004ac
 80196d4:	0801c897 	.word	0x0801c897
 80196d8:	0801c8a4 	.word	0x0801c8a4
 80196dc:	0801c8d2 	.word	0x0801c8d2

080196e0 <_calloc_r>:
 80196e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80196e2:	fba1 2402 	umull	r2, r4, r1, r2
 80196e6:	b94c      	cbnz	r4, 80196fc <_calloc_r+0x1c>
 80196e8:	4611      	mov	r1, r2
 80196ea:	9201      	str	r2, [sp, #4]
 80196ec:	f7ff f9c6 	bl	8018a7c <_malloc_r>
 80196f0:	9a01      	ldr	r2, [sp, #4]
 80196f2:	4605      	mov	r5, r0
 80196f4:	b930      	cbnz	r0, 8019704 <_calloc_r+0x24>
 80196f6:	4628      	mov	r0, r5
 80196f8:	b003      	add	sp, #12
 80196fa:	bd30      	pop	{r4, r5, pc}
 80196fc:	220c      	movs	r2, #12
 80196fe:	6002      	str	r2, [r0, #0]
 8019700:	2500      	movs	r5, #0
 8019702:	e7f8      	b.n	80196f6 <_calloc_r+0x16>
 8019704:	4621      	mov	r1, r4
 8019706:	f7fe f9b7 	bl	8017a78 <memset>
 801970a:	e7f4      	b.n	80196f6 <_calloc_r+0x16>

0801970c <__ascii_mbtowc>:
 801970c:	b082      	sub	sp, #8
 801970e:	b901      	cbnz	r1, 8019712 <__ascii_mbtowc+0x6>
 8019710:	a901      	add	r1, sp, #4
 8019712:	b142      	cbz	r2, 8019726 <__ascii_mbtowc+0x1a>
 8019714:	b14b      	cbz	r3, 801972a <__ascii_mbtowc+0x1e>
 8019716:	7813      	ldrb	r3, [r2, #0]
 8019718:	600b      	str	r3, [r1, #0]
 801971a:	7812      	ldrb	r2, [r2, #0]
 801971c:	1e10      	subs	r0, r2, #0
 801971e:	bf18      	it	ne
 8019720:	2001      	movne	r0, #1
 8019722:	b002      	add	sp, #8
 8019724:	4770      	bx	lr
 8019726:	4610      	mov	r0, r2
 8019728:	e7fb      	b.n	8019722 <__ascii_mbtowc+0x16>
 801972a:	f06f 0001 	mvn.w	r0, #1
 801972e:	e7f8      	b.n	8019722 <__ascii_mbtowc+0x16>

08019730 <__ascii_wctomb>:
 8019730:	b149      	cbz	r1, 8019746 <__ascii_wctomb+0x16>
 8019732:	2aff      	cmp	r2, #255	; 0xff
 8019734:	bf85      	ittet	hi
 8019736:	238a      	movhi	r3, #138	; 0x8a
 8019738:	6003      	strhi	r3, [r0, #0]
 801973a:	700a      	strbls	r2, [r1, #0]
 801973c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019740:	bf98      	it	ls
 8019742:	2001      	movls	r0, #1
 8019744:	4770      	bx	lr
 8019746:	4608      	mov	r0, r1
 8019748:	4770      	bx	lr
	...

0801974c <fiprintf>:
 801974c:	b40e      	push	{r1, r2, r3}
 801974e:	b503      	push	{r0, r1, lr}
 8019750:	4601      	mov	r1, r0
 8019752:	ab03      	add	r3, sp, #12
 8019754:	4805      	ldr	r0, [pc, #20]	; (801976c <fiprintf+0x20>)
 8019756:	f853 2b04 	ldr.w	r2, [r3], #4
 801975a:	6800      	ldr	r0, [r0, #0]
 801975c:	9301      	str	r3, [sp, #4]
 801975e:	f7ff fdbf 	bl	80192e0 <_vfiprintf_r>
 8019762:	b002      	add	sp, #8
 8019764:	f85d eb04 	ldr.w	lr, [sp], #4
 8019768:	b003      	add	sp, #12
 801976a:	4770      	bx	lr
 801976c:	200004ac 	.word	0x200004ac

08019770 <abort>:
 8019770:	b508      	push	{r3, lr}
 8019772:	2006      	movs	r0, #6
 8019774:	f000 f82c 	bl	80197d0 <raise>
 8019778:	2001      	movs	r0, #1
 801977a:	f7f0 f917 	bl	80099ac <_exit>

0801977e <_raise_r>:
 801977e:	291f      	cmp	r1, #31
 8019780:	b538      	push	{r3, r4, r5, lr}
 8019782:	4604      	mov	r4, r0
 8019784:	460d      	mov	r5, r1
 8019786:	d904      	bls.n	8019792 <_raise_r+0x14>
 8019788:	2316      	movs	r3, #22
 801978a:	6003      	str	r3, [r0, #0]
 801978c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019790:	bd38      	pop	{r3, r4, r5, pc}
 8019792:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019794:	b112      	cbz	r2, 801979c <_raise_r+0x1e>
 8019796:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801979a:	b94b      	cbnz	r3, 80197b0 <_raise_r+0x32>
 801979c:	4620      	mov	r0, r4
 801979e:	f000 f831 	bl	8019804 <_getpid_r>
 80197a2:	462a      	mov	r2, r5
 80197a4:	4601      	mov	r1, r0
 80197a6:	4620      	mov	r0, r4
 80197a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80197ac:	f000 b818 	b.w	80197e0 <_kill_r>
 80197b0:	2b01      	cmp	r3, #1
 80197b2:	d00a      	beq.n	80197ca <_raise_r+0x4c>
 80197b4:	1c59      	adds	r1, r3, #1
 80197b6:	d103      	bne.n	80197c0 <_raise_r+0x42>
 80197b8:	2316      	movs	r3, #22
 80197ba:	6003      	str	r3, [r0, #0]
 80197bc:	2001      	movs	r0, #1
 80197be:	e7e7      	b.n	8019790 <_raise_r+0x12>
 80197c0:	2400      	movs	r4, #0
 80197c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80197c6:	4628      	mov	r0, r5
 80197c8:	4798      	blx	r3
 80197ca:	2000      	movs	r0, #0
 80197cc:	e7e0      	b.n	8019790 <_raise_r+0x12>
	...

080197d0 <raise>:
 80197d0:	4b02      	ldr	r3, [pc, #8]	; (80197dc <raise+0xc>)
 80197d2:	4601      	mov	r1, r0
 80197d4:	6818      	ldr	r0, [r3, #0]
 80197d6:	f7ff bfd2 	b.w	801977e <_raise_r>
 80197da:	bf00      	nop
 80197dc:	200004ac 	.word	0x200004ac

080197e0 <_kill_r>:
 80197e0:	b538      	push	{r3, r4, r5, lr}
 80197e2:	4d07      	ldr	r5, [pc, #28]	; (8019800 <_kill_r+0x20>)
 80197e4:	2300      	movs	r3, #0
 80197e6:	4604      	mov	r4, r0
 80197e8:	4608      	mov	r0, r1
 80197ea:	4611      	mov	r1, r2
 80197ec:	602b      	str	r3, [r5, #0]
 80197ee:	f7f0 f8cd 	bl	800998c <_kill>
 80197f2:	1c43      	adds	r3, r0, #1
 80197f4:	d102      	bne.n	80197fc <_kill_r+0x1c>
 80197f6:	682b      	ldr	r3, [r5, #0]
 80197f8:	b103      	cbz	r3, 80197fc <_kill_r+0x1c>
 80197fa:	6023      	str	r3, [r4, #0]
 80197fc:	bd38      	pop	{r3, r4, r5, pc}
 80197fe:	bf00      	nop
 8019800:	2000dd34 	.word	0x2000dd34

08019804 <_getpid_r>:
 8019804:	f7f0 b8ba 	b.w	800997c <_getpid>

08019808 <sqrtf>:
 8019808:	b508      	push	{r3, lr}
 801980a:	ed2d 8b02 	vpush	{d8}
 801980e:	eeb0 8a40 	vmov.f32	s16, s0
 8019812:	f000 f817 	bl	8019844 <__ieee754_sqrtf>
 8019816:	eeb4 8a48 	vcmp.f32	s16, s16
 801981a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801981e:	d60c      	bvs.n	801983a <sqrtf+0x32>
 8019820:	eddf 8a07 	vldr	s17, [pc, #28]	; 8019840 <sqrtf+0x38>
 8019824:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801982c:	d505      	bpl.n	801983a <sqrtf+0x32>
 801982e:	f7fe f9fb 	bl	8017c28 <__errno>
 8019832:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8019836:	2321      	movs	r3, #33	; 0x21
 8019838:	6003      	str	r3, [r0, #0]
 801983a:	ecbd 8b02 	vpop	{d8}
 801983e:	bd08      	pop	{r3, pc}
 8019840:	00000000 	.word	0x00000000

08019844 <__ieee754_sqrtf>:
 8019844:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019848:	4770      	bx	lr
	...

0801984c <_init>:
 801984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801984e:	bf00      	nop
 8019850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019852:	bc08      	pop	{r3}
 8019854:	469e      	mov	lr, r3
 8019856:	4770      	bx	lr

08019858 <_fini>:
 8019858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801985a:	bf00      	nop
 801985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801985e:	bc08      	pop	{r3}
 8019860:	469e      	mov	lr, r3
 8019862:	4770      	bx	lr

08019864 <__params_locSrv>:
 8019864:	0081 0000 a0bc 0801 0000 0000 0000 0000     ................
 8019874:	0000 0000 0028 0000 a10c 0801 4780 2000     ....(........G. 
	...
 801988c:	0028 0000 a120 0801 4781 2000 0000 0000     (... ....G. ....
 801989c:	0000 0000 0026 0000 a130 0801 0050 2000     ....&...0...P.. 
	...
 80198b4:	0026 0000 a140 0801 0054 2000 0000 0000     &...@...T.. ....
 80198c4:	0000 0000 0080 0000 a0e0 0801 0000 0000     ................
	...

080198dc <__params_crtpsrv>:
 80198dc:	0081 0000 a170 0801 0000 0000 0000 0000     ....p...........
 80198ec:	0000 0000 0009 0000 a178 0801 478e 2000     ........x....G. 
	...
 8019904:	0080 0000 a184 0801 0000 0000 0000 0000     ................
 8019914:	0000 0000                                   ....

08019918 <__params_syslink>:
 8019918:	0081 0000 a3f0 0801 0000 0000 0000 0000     ................
 8019928:	0000 0000 0008 0000 a3f8 0801 4900 2000     .............I. 
	...
 8019940:	0080 0000 a400 0801 0000 0000 0000 0000     ................
 8019950:	0000 0000                                   ....

08019954 <__params_led>:
 8019954:	0081 0000 a4b8 0801 0000 0000 0000 0000     ................
 8019964:	0000 0000 0008 0000 a4bc 0801 494b 2000     ............KI. 
 8019974:	2e95 0800 0000 0000 0080 0000 a4c4 0801     ................
	...

08019990 <__params_pm>:
 8019990:	0081 0000 a4f0 0801 0000 0000 0000 0000     ................
 80199a0:	0000 0000 0136 0000 a550 0801 02b4 2000     ....6...P...... 
	...
 80199b8:	0136 0000 a55c 0801 02b0 2000 0000 0000     6...\...... ....
 80199c8:	0000 0000 0080 0000 a548 0801 0000 0000     ........H.......
	...

080199e0 <__params_sound>:
 80199e0:	0081 0000 a5bc 0801 0000 0000 0000 0000     ................
 80199f0:	0000 0000 0138 0000 a5c4 0801 4bc4 2000     ....8........K. 
	...
 8019a08:	006a 0000 a5cc 0801 4bbc 2000 0000 0000     j........K. ....
 8019a18:	0000 0000 0029 0000 a5d4 0801 02b8 2000     ....).......... 
	...
 8019a30:	0080 0000 a5dc 0801 0000 0000 0000 0000     ................
 8019a40:	0000 0000                                   ....

08019a44 <__params_system>:
 8019a44:	0081 0000 a648 0801 0000 0000 0000 0000     ....H...........
 8019a54:	0000 0000 0008 0000 a650 0801 4bcd 2000     ........P....K. 
 8019a64:	3d09 0800 0000 0000 0008 0000 a660 0801     .=..........`...
 8019a74:	4bce 2000 3d29 0800 0000 0000 0080 0000     .K. )=..........
 8019a84:	a670 0801 0000 0000 0000 0000 0000 0000     p...............

08019a94 <__params_system>:
 8019a94:	0081 0000 b04c 0801 0000 0000 0000 0000     ....L...........
 8019aa4:	0000 0000 0028 0000 b054 0801 70de 2000     ....(...T....p. 
	...
 8019abc:	0080 0000 b060 0801 0000 0000 0000 0000     ....`...........
 8019acc:	0000 0000                                   ....

08019ad0 <__params_usec>:
 8019ad0:	0081 0000 b094 0801 0000 0000 0000 0000     ................
 8019ae0:	0000 0000 0008 0000 b09c 0801 7115 2000     .............q. 
 8019af0:	8959 0800 0000 0000 0080 0000 b0a4 0801     Y...............
	...

08019b0c <__params_firmware>:
 8019b0c:	0081 0000 b0d8 0801 0000 0000 0000 0000     ................
 8019b1c:	0000 0000 006a 0000 b0e4 0801 c53c 0801     ....j.......<...
	...
 8019b34:	0069 0000 b0f0 0801 c540 0801 0000 0000     i.......@.......
 8019b44:	0000 0000 0068 0000 b0fc 0801 c538 0801     ....h.......8...
	...
 8019b5c:	0080 0000 b108 0801 0000 0000 0000 0000     ................
 8019b6c:	0000 0000                                   ....

08019b70 <__logs_estimator>:
 8019b70:	0081 0000 9f64 0801 0000 0000 0047 0000     ....d.......G...
 8019b80:	9f70 0801 0000 2000 0047 0000 9f78 0801     p...... G...x...
 8019b90:	001c 2000 0080 0000 9f80 0801 0000 0000     ... ............

08019ba0 <__logs_ext_pos>:
 8019ba0:	0081 0000 a098 0801 0000 0000 0007 0000     ................
 8019bb0:	a0a0 0801 4748 2000 0007 0000 a0a4 0801     ....HG. ........
 8019bc0:	474c 2000 0007 0000 a0a8 0801 4750 2000     LG. ........PG. 
 8019bd0:	0080 0000 a0ac 0801 0000 0000               ............

08019bdc <__logs_locSrv>:
 8019bdc:	0081 0000 a0bc 0801 0000 0000 0027 0000     ............'...
 8019bec:	a0c4 0801 475c 2000 0027 0000 a0c8 0801     ....\G. '.......
 8019bfc:	4760 2000 0027 0000 a0cc 0801 4764 2000     `G. '.......dG. 
 8019c0c:	0027 0000 a0d0 0801 4768 2000 0027 0000     '.......hG. '...
 8019c1c:	a0d4 0801 476c 2000 0027 0000 a0d8 0801     ....lG. '.......
 8019c2c:	4770 2000 0027 0000 a0dc 0801 4774 2000     pG. '.......tG. 
 8019c3c:	0080 0000 a0e0 0801 0000 0000               ............

08019c48 <__logs_locSrvZ>:
 8019c48:	0081 0000 a0ec 0801 0000 0000 0022 0000     ............"...
 8019c58:	a0f4 0801 4784 2000 0080 0000 a0fc 0801     .....G. ........
 8019c68:	0000 0000                                   ....

08019c6c <__logs_radio>:
 8019c6c:	0081 0000 a25c 0801 0000 0000 0021 0000     ....\.......!...
 8019c7c:	a264 0801 4821 2000 0021 0000 a26c 0801     d...!H. !...l...
 8019c8c:	4822 2000 0080 0000 a278 0801 0000 0000     "H. ....x.......

08019c9c <__logs_pm>:
 8019c9c:	0081 0000 a4f0 0801 0000 0000 0027 0000     ............'...
 8019cac:	a4f4 0801 4964 2000 0002 0000 a4fc 0801     ....dI. ........
 8019cbc:	4968 2000 0007 0000 a504 0801 4970 2000     hI. ........pI. 
 8019ccc:	0002 0000 a50c 0801 4974 2000 0007 0000     ........tI. ....
 8019cdc:	a518 0801 497c 2000 0007 0000 a520 0801     ....|I. .... ...
 8019cec:	4999 2000 0024 0000 a530 0801 4991 2000     .I. $...0....I. 
 8019cfc:	0021 0000 a538 0801 499d 2000 0080 0000     !...8....I. ....
 8019d0c:	a548 0801 0000 0000                         H.......

08019d14 <eventTrigger_estTDOA>:
 8019d14:	9e20 0801 c48c 0801 0003 0000 4104 2000      ............A. 
 8019d24:	0006 0000                                   ....

08019d28 <eventTrigger_estPosition>:
 8019d28:	9e30 0801 c4a4 0801 0001 0000 410c 2000     0............A. 
 8019d38:	0001 0000                                   ....

08019d3c <eventTrigger_estPose>:
 8019d3c:	9e3c 0801 0000 0000 0000 0000 0000 0000     <...............
 8019d4c:	0000 0000                                   ....

08019d50 <eventTrigger_estDistance>:
 8019d50:	9e54 0801 c4ac 0801 0002 0000 4110 2000     T............A. 
 8019d60:	0005 0000                                   ....

08019d64 <eventTrigger_estTOF>:
 8019d64:	9e60 0801 0000 0000 0000 0000 0000 0000     `...............
 8019d74:	0000 0000                                   ....

08019d78 <eventTrigger_estAbsoluteHeight>:
 8019d78:	9e68 0801 0000 0000 0000 0000 0000 0000     h...............
 8019d88:	0000 0000                                   ....

08019d8c <eventTrigger_estFlow>:
 8019d8c:	9e7c 0801 0000 0000 0000 0000 0000 0000     |...............
 8019d9c:	0000 0000                                   ....

08019da0 <eventTrigger_estYawError>:
 8019da0:	9e90 0801 c4bc 0801 0001 0000 4118 2000     .............A. 
 8019db0:	0004 0000                                   ....

08019db4 <eventTrigger_estSweepAngle>:
 8019db4:	9ed0 0801 c4c4 0801 0005 0000 411c 2000     .............A. 
 8019dc4:	000b 0000                                   ....

08019dc8 <eventTrigger_estGyroscope>:
 8019dc8:	9ee0 0801 0000 0000 0000 0000 0000 0000     ................
 8019dd8:	0000 0000                                   ....

08019ddc <eventTrigger_estAcceleration>:
 8019ddc:	9ef0 0801 0000 0000 0000 0000 0000 0000     ................
 8019dec:	0000 0000                                   ....

08019df0 <eventTrigger_estBarometer>:
 8019df0:	9f00 0801 0000 0000 0000 0000 0000 0000     ................
 8019e00:	0000 0000                                   ....
