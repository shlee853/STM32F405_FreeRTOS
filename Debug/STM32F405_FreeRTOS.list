
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e9c  08014918  08014918  00024918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080167b4  080167b4  00031c80  2**0
                  CONTENTS
  4 .ARM          00000008  080167b4  080167b4  000267b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080167bc  080167bc  00031c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080167bc  080167bc  000267bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080167c0  080167c0  000267c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ac  20000000  080167c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       000016ac  200005ac  08016d70  000305ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20001c58  0801841c  00031c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00031c80  2**0
                  CONTENTS
 12 .bss          00007ce4  20001c80  20001c80  00031c80  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20009964  20009964  00031c80  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00031c80  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00031cb0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000325e6  00000000  00000000  00031cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00008ffe  00000000  00000000  000642d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000026a0  00000000  00000000  0006d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001d31  00000000  00000000  0006f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000138ba  00000000  00000000  000716a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00038c3b  00000000  00000000  00084f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f581f  00000000  00000000  000bdb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000ad00  00000000  00000000  001b33c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  001be0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001c80 	.word	0x20001c80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014900 	.word	0x08014900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001c84 	.word	0x20001c84
 80001cc:	08014900 	.word	0x08014900

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83a 	bl	8000d00 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2lz>:
 8000c98:	ee07 0a90 	vmov	s15, r0
 8000c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	d401      	bmi.n	8000caa <__aeabi_f2lz+0x12>
 8000ca6:	f000 b80b 	b.w	8000cc0 <__aeabi_f2ulz>
 8000caa:	eef1 7a67 	vneg.f32	s15, s15
 8000cae:	b508      	push	{r3, lr}
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f000 f804 	bl	8000cc0 <__aeabi_f2ulz>
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <__aeabi_f2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	f7ff fc51 	bl	8000568 <__aeabi_f2d>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__aeabi_f2ulz+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	f7ff fca3 	bl	8000618 <__aeabi_dmul>
 8000cd2:	f000 f97b 	bl	8000fcc <__aeabi_d2uiz>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	f7ff fc24 	bl	8000524 <__aeabi_ui2d>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__aeabi_f2ulz+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f7ff fc9a 	bl	8000618 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4630      	mov	r0, r6
 8000cea:	4639      	mov	r1, r7
 8000cec:	f7ff fadc 	bl	80002a8 <__aeabi_dsub>
 8000cf0:	f000 f96c 	bl	8000fcc <__aeabi_d2uiz>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf8:	3df00000 	.word	0x3df00000
 8000cfc:	41f00000 	.word	0x41f00000

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9e08      	ldr	r6, [sp, #32]
 8000d06:	460d      	mov	r5, r1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d14a      	bne.n	8000da6 <__udivmoddi4+0xa6>
 8000d10:	428a      	cmp	r2, r1
 8000d12:	4694      	mov	ip, r2
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0xe2>
 8000d16:	fab2 f382 	clz	r3, r2
 8000d1a:	b143      	cbz	r3, 8000d2e <__udivmoddi4+0x2e>
 8000d1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d20:	f1c3 0220 	rsb	r2, r3, #32
 8000d24:	409f      	lsls	r7, r3
 8000d26:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d32:	fa1f f58c 	uxth.w	r5, ip
 8000d36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d44:	fb01 f005 	mul.w	r0, r1, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x62>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d54:	f080 811c 	bcs.w	8000f90 <__udivmoddi4+0x290>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f240 8119 	bls.w	8000f90 <__udivmoddi4+0x290>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a12      	subs	r2, r2, r0
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x90>
 8000d7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d82:	f080 8107 	bcs.w	8000f94 <__udivmoddi4+0x294>
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	f240 8104 	bls.w	8000f94 <__udivmoddi4+0x294>
 8000d8c:	4464      	add	r4, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11e      	cbz	r6, 8000da2 <__udivmoddi4+0xa2>
 8000d9a:	40dc      	lsrs	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0xbc>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f000 80ed 	beq.w	8000f8a <__udivmoddi4+0x28a>
 8000db0:	2100      	movs	r1, #0
 8000db2:	e9c6 0500 	strd	r0, r5, [r6]
 8000db6:	4608      	mov	r0, r1
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	fab3 f183 	clz	r1, r3
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d149      	bne.n	8000e58 <__udivmoddi4+0x158>
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d302      	bcc.n	8000dce <__udivmoddi4+0xce>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	f200 80f8 	bhi.w	8000fbe <__udivmoddi4+0x2be>
 8000dce:	1a84      	subs	r4, r0, r2
 8000dd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d0e2      	beq.n	8000da2 <__udivmoddi4+0xa2>
 8000ddc:	e9c6 4700 	strd	r4, r7, [r6]
 8000de0:	e7df      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000de2:	b902      	cbnz	r2, 8000de6 <__udivmoddi4+0xe6>
 8000de4:	deff      	udf	#255	; 0xff
 8000de6:	fab2 f382 	clz	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8090 	bne.w	8000f10 <__udivmoddi4+0x210>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e00:	fb07 2015 	mls	r0, r7, r5, r2
 8000e04:	0c22      	lsrs	r2, r4, #16
 8000e06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0a:	fb0e f005 	mul.w	r0, lr, r5
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x124>
 8000e12:	eb1c 0202 	adds.w	r2, ip, r2
 8000e16:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x122>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2b8>
 8000e22:	4645      	mov	r5, r8
 8000e24:	1a12      	subs	r2, r2, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x14e>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x14c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2c2>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e56:	e79f      	b.n	8000d98 <__udivmoddi4+0x98>
 8000e58:	f1c1 0720 	rsb	r7, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	40fd      	lsrs	r5, r7
 8000e70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e74:	4323      	orrs	r3, r4
 8000e76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e82:	0c1c      	lsrs	r4, r3, #16
 8000e84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e88:	fb08 f50e 	mul.w	r5, r8, lr
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	fa00 f001 	lsl.w	r0, r0, r1
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b0>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2b4>
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2b4>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4464      	add	r4, ip
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	b29d      	uxth	r5, r3
 8000eb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1da>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2ac>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2ac>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	4464      	add	r4, ip
 8000eda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ede:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46ae      	mov	lr, r5
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x29c>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x298>
 8000ef0:	b156      	cbz	r6, 8000f08 <__udivmoddi4+0x208>
 8000ef2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ef6:	eb64 040e 	sbc.w	r4, r4, lr
 8000efa:	fa04 f707 	lsl.w	r7, r4, r7
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	4317      	orrs	r7, r2
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	f1c3 0120 	rsb	r1, r3, #32
 8000f14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f18:	fa20 f201 	lsr.w	r2, r0, r1
 8000f1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000f20:	409d      	lsls	r5, r3
 8000f22:	432a      	orrs	r2, r5
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f30:	fb07 1510 	mls	r5, r7, r0, r1
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	fa04 f403 	lsl.w	r4, r4, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x258>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f50:	428d      	cmp	r5, r1
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	1b49      	subs	r1, r1, r5
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f60:	fb07 1115 	mls	r1, r7, r5, r1
 8000f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f68:	fb05 f10e 	mul.w	r1, r5, lr
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x282>
 8000f70:	eb1c 0202 	adds.w	r2, ip, r2
 8000f74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7e:	3d02      	subs	r5, #2
 8000f80:	4462      	add	r2, ip
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0xfc>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000f90:	4639      	mov	r1, r7
 8000f92:	e6e6      	b.n	8000d62 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6fb      	b.n	8000d90 <__udivmoddi4+0x90>
 8000f98:	4548      	cmp	r0, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f0>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f0>
 8000fa8:	4645      	mov	r5, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x282>
 8000fac:	462b      	mov	r3, r5
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1da>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x258>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b0>
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	4462      	add	r2, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x124>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e70a      	b.n	8000dd8 <__udivmoddi4+0xd8>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x14e>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af04      	add	r7, sp, #16
  if(isInit)
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <crtpInit+0x70>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d12d      	bne.n	8001076 <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	2078      	movs	r0, #120	; 0x78
 8001020:	f00d f832 	bl	800e088 <xQueueGenericCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a16      	ldr	r2, [pc, #88]	; (8001080 <crtpInit+0x74>)
 8001028:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <crtpInit+0x74>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <crtpInit+0x78>)
 8001030:	4915      	ldr	r1, [pc, #84]	; (8001088 <crtpInit+0x7c>)
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fba6 	bl	8003784 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	461a      	mov	r2, r3
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <crtpInit+0x80>)
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <crtpInit+0x84>)
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	2302      	movs	r3, #2
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	4912      	ldr	r1, [pc, #72]	; (8001094 <crtpInit+0x88>)
 800104c:	4812      	ldr	r0, [pc, #72]	; (8001098 <crtpInit+0x8c>)
 800104e:	f00d fee3 	bl	800ee18 <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	461a      	mov	r2, r3
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <crtpInit+0x90>)
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <crtpInit+0x94>)
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	2302      	movs	r3, #2
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	490f      	ldr	r1, [pc, #60]	; (80010a4 <crtpInit+0x98>)
 8001068:	480f      	ldr	r0, [pc, #60]	; (80010a8 <crtpInit+0x9c>)
 800106a:	f00d fed5 	bl	800ee18 <xTaskCreateStatic>

  isInit = true;
 800106e:	4b03      	ldr	r3, [pc, #12]	; (800107c <crtpInit+0x70>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e000      	b.n	8001078 <crtpInit+0x6c>
    return;
 8001076:	bf00      	nop
}
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20001c9c 	.word	0x20001c9c
 8001080:	20001cb4 	.word	0x20001cb4
 8001084:	08014918 	.word	0x08014918
 8001088:	08014920 	.word	0x08014920
 800108c:	200007ac 	.word	0x200007ac
 8001090:	200005ac 	.word	0x200005ac
 8001094:	0801493c 	.word	0x0801493c
 8001098:	080010ad 	.word	0x080010ad
 800109c:	20000c64 	.word	0x20000c64
 80010a0:	20000864 	.word	0x20000864
 80010a4:	08014944 	.word	0x08014944
 80010a8:	0800111d 	.word	0x0800111d

080010ac <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <crtpTxTask+0x60>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a15      	ldr	r2, [pc, #84]	; (8001110 <crtpTxTask+0x64>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d021      	beq.n	8001102 <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <crtpTxTask+0x68>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f107 0108 	add.w	r1, r7, #8
 80010c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00d faac 	bl	800e628 <xQueueReceive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d1ee      	bne.n	80010b4 <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 80010d6:	e002      	b.n	80010de <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 80010d8:	200a      	movs	r0, #10
 80010da:	f00e f855 	bl	800f188 <vTaskDelay>
        while (link->sendPacket(&p) == false)
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <crtpTxTask+0x60>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f107 0208 	add.w	r2, r7, #8
 80010e8:	4610      	mov	r0, r2
 80010ea:	4798      	blx	r3
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f2      	beq.n	80010d8 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <crtpTxTask+0x6c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	3301      	adds	r3, #1
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <crtpTxTask+0x6c>)
 80010fa:	6053      	str	r3, [r2, #4]
        updateStats();
 80010fc:	f000 f87e 	bl	80011fc <updateStats>
 8001100:	e7d8      	b.n	80010b4 <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 8001102:	200a      	movs	r0, #10
 8001104:	f00e f840 	bl	800f188 <vTaskDelay>
    if (link != &nopLink)
 8001108:	e7d4      	b.n	80010b4 <crtpTxTask+0x8>
 800110a:	bf00      	nop
 800110c:	20000014 	.word	0x20000014
 8001110:	20000000 	.word	0x20000000
 8001114:	20001cb4 	.word	0x20001cb4
 8001118:	20001ca0 	.word	0x20001ca0

0800111c <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <crtpRxTask+0x9c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a24      	ldr	r2, [pc, #144]	; (80011bc <crtpRxTask+0xa0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d040      	beq.n	80011b0 <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <crtpRxTask+0x9c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f107 0208 	add.w	r2, r7, #8
 8001138:	4610      	mov	r0, r2
 800113a:	4798      	blx	r3
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <crtpRxTask+0x8>
      {
        if (queues[p.port])
 8001142:	7a7b      	ldrb	r3, [r7, #9]
 8001144:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <crtpRxTask+0xa4>)
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00e      	beq.n	8001174 <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 8001156:	7a7b      	ldrb	r3, [r7, #9]
 8001158:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <crtpRxTask+0xa4>)
 8001162:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001166:	f107 0108 	add.w	r1, r7, #8
 800116a:	2300      	movs	r3, #0
 800116c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001170:	f00d f834 	bl	800e1dc <xQueueGenericSend>
        }

        if (callbacks[p.port])
 8001174:	7a7b      	ldrb	r3, [r7, #9]
 8001176:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <crtpRxTask+0xa8>)
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00b      	beq.n	80011a0 <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 8001188:	7a7b      	ldrb	r3, [r7, #9]
 800118a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <crtpRxTask+0xa8>)
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	f107 0208 	add.w	r2, r7, #8
 800119c:	4610      	mov	r0, r2
 800119e:	4798      	blx	r3
        }

        stats.rxCount++;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <crtpRxTask+0xac>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <crtpRxTask+0xac>)
 80011a8:	6013      	str	r3, [r2, #0]
        updateStats();
 80011aa:	f000 f827 	bl	80011fc <updateStats>
 80011ae:	e7b9      	b.n	8001124 <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 80011b0:	200a      	movs	r0, #10
 80011b2:	f00d ffe9 	bl	800f188 <vTaskDelay>
    if (link != &nopLink)
 80011b6:	e7b5      	b.n	8001124 <crtpRxTask+0x8>
 80011b8:	20000014 	.word	0x20000014
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20001cb8 	.word	0x20001cb8
 80011c4:	20001cf8 	.word	0x20001cf8
 80011c8:	20001ca0 	.word	0x20001ca0

080011cc <nopFunc>:

  link->setEnable(true);
}

static int nopFunc(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ENETDOWN;
 80011d0:	2373      	movs	r3, #115	; 0x73
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <clearStats>:

static void clearStats()
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <clearStats+0x1c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <clearStats+0x1c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20001ca0 	.word	0x20001ca0

080011fc <updateStats>:

static void updateStats()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 8001202:	f00e f97f 	bl	800f504 <xTaskGetTickCount>
 8001206:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <updateStats+0x9c>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	d93d      	bls.n	800128e <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <updateStats+0x9c>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001222:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <updateStats+0x9c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001232:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800129c <updateStats+0xa0>
 8001236:	ee67 6a87 	vmul.f32	s13, s15, s14
 800123a:	ed97 7a00 	vldr	s14, [r7]
 800123e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <updateStats+0x9c>)
 800124e:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <updateStats+0x9c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800129c <updateStats+0xa0>
 8001260:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001264:	ed97 7a00 	vldr	s14, [r7]
 8001268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <updateStats+0x9c>)
 8001278:	815a      	strh	r2, [r3, #10]

    clearStats();
 800127a:	f7ff ffaf 	bl	80011dc <clearStats>
    stats.previousStatisticsTime = now;
 800127e:	4a06      	ldr	r2, [pc, #24]	; (8001298 <updateStats+0x9c>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800128a:	4a03      	ldr	r2, [pc, #12]	; (8001298 <updateStats+0x9c>)
 800128c:	60d3      	str	r3, [r2, #12]
  }
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001ca0 	.word	0x20001ca0
 800129c:	447a0000 	.word	0x447a0000

080012a0 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 0210 	bic.w	r2, r3, #16
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	605a      	str	r2, [r3, #4]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <LL_SPI_IsActiveFlag_RXNE+0x18>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d101      	bne.n	8001324 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330c      	adds	r3, #12
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800134e:	b480      	push	{r7}
 8001350:	b085      	sub	sp, #20
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	330c      	adds	r3, #12
 800135e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4013      	ands	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	40023800 	.word	0x40023800

080013a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013b0:	4907      	ldr	r1, [pc, #28]	; (80013d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40023800 	.word	0x40023800

080013d4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	619a      	str	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2228      	movs	r2, #40	; 0x28
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f011 fbc2 	bl	8012ba8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001434:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001438:	f7ff ffb4 	bl	80013a4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800143c:	2001      	movs	r0, #1
 800143e:	f7ff ff99 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001442:	2004      	movs	r0, #4
 8001444:	f7ff ff96 	bl	8001374 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001448:	23e0      	movs	r3, #224	; 0xe0
 800144a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800144c:	2302      	movs	r3, #2
 800144e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800145c:	2305      	movs	r3, #5
 800145e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	4825      	ldr	r0, [pc, #148]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001466:	f009 f840 	bl	800a4ea <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800146e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001472:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001478:	2302      	movs	r3, #2
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800147c:	2301      	movs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8001486:	2310      	movs	r3, #16
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800148a:	2300      	movs	r3, #0
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001492:	230a      	movs	r3, #10
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001496:	f107 0318 	add.w	r3, r7, #24
 800149a:	4619      	mov	r1, r3
 800149c:	4818      	ldr	r0, [pc, #96]	; (8001500 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800149e:	f009 f8c8 	bl	800a632 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80014a2:	2100      	movs	r1, #0
 80014a4:	4816      	ldr	r0, [pc, #88]	; (8001500 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80014a6:	f7ff ff0b 	bl	80012c0 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80014aa:	2110      	movs	r1, #16
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014ae:	f7ff ff9f 	bl	80013f0 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80014b2:	2310      	movs	r3, #16
 80014b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014cc:	f009 f80d 	bl	800a4ea <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80014d0:	2310      	movs	r3, #16
 80014d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80014dc:	463b      	mov	r3, r7
 80014de:	4619      	mov	r1, r3
 80014e0:	4808      	ldr	r0, [pc, #32]	; (8001504 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80014e2:	f009 f802 	bl	800a4ea <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80014e6:	4806      	ldr	r0, [pc, #24]	; (8001500 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80014e8:	f7ff feda 	bl	80012a0 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80014ec:	2110      	movs	r1, #16
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <ICM20602_GPIO_SPI_Initialization+0xec>)
 80014f0:	f7ff ff70 	bl	80013d4 <LL_GPIO_SetOutputPin>
}
 80014f4:	bf00      	nop
 80014f6:	3740      	adds	r7, #64	; 0x40
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40020000 	.word	0x40020000
 8001500:	40013000 	.word	0x40013000
 8001504:	40020800 	.word	0x40020800

08001508 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001512:	bf00      	nop
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <SPI1_SendByte+0x40>)
 8001516:	f7ff fef9 	bl	800130c <LL_SPI_IsActiveFlag_TXE>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f9      	beq.n	8001514 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4619      	mov	r1, r3
 8001524:	4808      	ldr	r0, [pc, #32]	; (8001548 <SPI1_SendByte+0x40>)
 8001526:	f7ff ff12 	bl	800134e <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800152a:	bf00      	nop
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <SPI1_SendByte+0x40>)
 800152e:	f7ff feda 	bl	80012e6 <LL_SPI_IsActiveFlag_RXNE>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f9      	beq.n	800152c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <SPI1_SendByte+0x40>)
 800153a:	f7ff fefa 	bl	8001332 <LL_SPI_ReceiveData8>
 800153e:	4603      	mov	r3, r0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40013000 	.word	0x40013000

0800154c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001556:	2110      	movs	r1, #16
 8001558:	480b      	ldr	r0, [pc, #44]	; (8001588 <ICM20602_Readbyte+0x3c>)
 800155a:	f7ff ff49 	bl	80013f0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffce 	bl	8001508 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ffcb 	bl	8001508 <SPI1_SendByte>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8001576:	2110      	movs	r1, #16
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <ICM20602_Readbyte+0x3c>)
 800157a:	f7ff ff2b 	bl	80013d4 <LL_GPIO_SetOutputPin>
	
	return val;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40020000 	.word	0x40020000

0800158c <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 800159c:	2110      	movs	r1, #16
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <ICM20602_Writebyte+0x40>)
 80015a0:	f7ff ff26 	bl	80013f0 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ffab 	bl	8001508 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80015b2:	79bb      	ldrb	r3, [r7, #6]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ffa7 	bl	8001508 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80015ba:	2110      	movs	r1, #16
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <ICM20602_Writebyte+0x40>)
 80015be:	f7ff ff09 	bl	80013d4 <LL_GPIO_SetOutputPin>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40020000 	.word	0x40020000

080015d0 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 80015ec:	f7ff ff10 	bl	8001410 <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 80015f0:	4934      	ldr	r1, [pc, #208]	; (80016c4 <ICM20602_Initialization+0xf4>)
 80015f2:	4835      	ldr	r0, [pc, #212]	; (80016c8 <ICM20602_Initialization+0xf8>)
 80015f4:	f002 f868 	bl	80036c8 <eprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 80015f8:	2075      	movs	r0, #117	; 0x75
 80015fa:	f7ff ffa7 	bl	800154c <ICM20602_Readbyte>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d106      	bne.n	8001616 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	461a      	mov	r2, r3
 800160c:	492f      	ldr	r1, [pc, #188]	; (80016cc <ICM20602_Initialization+0xfc>)
 800160e:	482e      	ldr	r0, [pc, #184]	; (80016c8 <ICM20602_Initialization+0xf8>)
 8001610:	f002 f85a 	bl	80036c8 <eprintf>
 8001614:	e012      	b.n	800163c <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	2b12      	cmp	r3, #18
 800161a:	d00f      	beq.n	800163c <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 800161c:	2075      	movs	r0, #117	; 0x75
 800161e:	f7ff ff95 	bl	800154c <ICM20602_Readbyte>
 8001622:	4603      	mov	r3, r0
 8001624:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b12      	cmp	r3, #18
 800162a:	d007      	beq.n	800163c <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 800162c:	7bfa      	ldrb	r2, [r7, #15]
 800162e:	2312      	movs	r3, #18
 8001630:	4927      	ldr	r1, [pc, #156]	; (80016d0 <ICM20602_Initialization+0x100>)
 8001632:	4825      	ldr	r0, [pc, #148]	; (80016c8 <ICM20602_Initialization+0xf8>)
 8001634:	f002 f848 	bl	80036c8 <eprintf>
			return 1; //ERROR
 8001638:	2301      	movs	r3, #1
 800163a:	e03f      	b.n	80016bc <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	206b      	movs	r0, #107	; 0x6b
 8001640:	f7ff ffa4 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001646:	f002 ff5d 	bl	8004504 <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800164a:	2101      	movs	r1, #1
 800164c:	206b      	movs	r0, #107	; 0x6b
 800164e:	f7ff ff9d 	bl	800158c <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001654:	f002 ff56 	bl	8004504 <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8001658:	2100      	movs	r1, #0
 800165a:	206c      	movs	r0, #108	; 0x6c
 800165c:	f7ff ff96 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 8001660:	481c      	ldr	r0, [pc, #112]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001662:	f002 ff4f 	bl	8004504 <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001666:	2100      	movs	r1, #0
 8001668:	2019      	movs	r0, #25
 800166a:	f7ff ff8f 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 800166e:	4819      	ldr	r0, [pc, #100]	; (80016d4 <ICM20602_Initialization+0x104>)
 8001670:	f002 ff48 	bl	8004504 <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001674:	2105      	movs	r1, #5
 8001676:	201a      	movs	r0, #26
 8001678:	f7ff ff88 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 800167c:	4815      	ldr	r0, [pc, #84]	; (80016d4 <ICM20602_Initialization+0x104>)
 800167e:	f002 ff41 	bl	8004504 <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001682:	2118      	movs	r1, #24
 8001684:	201b      	movs	r0, #27
 8001686:	f7ff ff81 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 800168a:	4812      	ldr	r0, [pc, #72]	; (80016d4 <ICM20602_Initialization+0x104>)
 800168c:	f002 ff3a 	bl	8004504 <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001690:	2118      	movs	r1, #24
 8001692:	201c      	movs	r0, #28
 8001694:	f7ff ff7a 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 8001698:	480e      	ldr	r0, [pc, #56]	; (80016d4 <ICM20602_Initialization+0x104>)
 800169a:	f002 ff33 	bl	8004504 <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 800169e:	2103      	movs	r1, #3
 80016a0:	201d      	movs	r0, #29
 80016a2:	f7ff ff73 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <ICM20602_Initialization+0x104>)
 80016a8:	f002 ff2c 	bl	8004504 <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80016ac:	2101      	movs	r1, #1
 80016ae:	2038      	movs	r0, #56	; 0x38
 80016b0:	f7ff ff6c 	bl	800158c <ICM20602_Writebyte>
	delay_us(5000000);
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <ICM20602_Initialization+0x104>)
 80016b6:	f002 ff25 	bl	8004504 <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	08014998 	.word	0x08014998
 80016c8:	08002e39 	.word	0x08002e39
 80016cc:	080149b0 	.word	0x080149b0
 80016d0:	080149e4 	.word	0x080149e4
 80016d4:	004c4b40 	.word	0x004c4b40

080016d8 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80016e2:	680a      	ldr	r2, [r1, #0]
 80016e4:	f382 8808 	msr	MSP, r2
 80016e8:	684a      	ldr	r2, [r1, #4]
 80016ea:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 80016ec:	e7fe      	b.n	80016ec <branch_to_bootloader+0x14>
	...

080016f0 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 80016f6:	491d      	ldr	r1, [pc, #116]	; (800176c <check_enter_bootloader+0x7c>)
 80016f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016fc:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8001700:	4c1a      	ldr	r4, [pc, #104]	; (800176c <check_enter_bootloader+0x7c>)
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 800170e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001712:	f04f 0000 	mov.w	r0, #0
 8001716:	f04f 0100 	mov.w	r1, #0
 800171a:	0028      	movs	r0, r5
 800171c:	2100      	movs	r1, #0
 800171e:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8001722:	2300      	movs	r3, #0
 8001724:	4912      	ldr	r1, [pc, #72]	; (8001770 <check_enter_bootloader+0x80>)
 8001726:	4411      	add	r1, r2
 8001728:	430b      	orrs	r3, r1
 800172a:	d11a      	bne.n	8001762 <check_enter_bootloader+0x72>
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <check_enter_bootloader+0x84>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d014      	beq.n	8001762 <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <check_enter_bootloader+0x88>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 800173e:	683c      	ldr	r4, [r7, #0]
 8001740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	000a      	movs	r2, r1
 800174e:	2300      	movs	r3, #0
 8001750:	4613      	mov	r3, r2
 8001752:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001756:	f023 030f 	bic.w	r3, r3, #15
 800175a:	4619      	mov	r1, r3
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff ffbb 	bl	80016d8 <branch_to_bootloader>
    }
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bdb0      	pop	{r4, r5, r7, pc}
 800176a:	bf00      	nop
 800176c:	2001c000 	.word	0x2001c000
 8001770:	fffffa5b 	.word	0xfffffa5b
 8001774:	40023800 	.word	0x40023800
 8001778:	40013800 	.word	0x40013800

0800177c <buzzerInit>:




void buzzerInit()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001780:	2100      	movs	r1, #0
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <buzzerInit+0x18>)
 8001784:	f006 feb8 	bl	80084f8 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <buzzerInit+0x1c>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20003a60 	.word	0x20003a60
 8001798:	40000400 	.word	0x40000400

0800179c <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <buzzerOff+0x18>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80017a6:	2100      	movs	r1, #0
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <buzzerOff+0x1c>)
 80017aa:	f006 ff6d 	bl	8008688 <HAL_TIM_PWM_Stop>
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40000400 	.word	0x40000400
 80017b8:	20003a60 	.word	0x20003a60

080017bc <buzzerOn>:

void buzzerOn(uint32_t freq)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	TIM3->PSC = (1000000-1)/freq;
 80017c4:	4a05      	ldr	r2, [pc, #20]	; (80017dc <buzzerOn+0x20>)
 80017c6:	4906      	ldr	r1, [pc, #24]	; (80017e0 <buzzerOn+0x24>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ce:	6293      	str	r3, [r2, #40]	; 0x28
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	40000400 	.word	0x40000400
 80017e0:	000f423f 	.word	0x000f423f

080017e4 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d832      	bhi.n	8001860 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <ledSetForce+0x84>)
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10d      	bne.n	8001822 <ledSetForce+0x3e>
  {
    value = !value;
 8001806:	79bb      	ldrb	r3, [r7, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f083 0301 	eor.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	71bb      	strb	r3, [r7, #6]
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00d      	beq.n	8001844 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4a10      	ldr	r2, [pc, #64]	; (800186c <ledSetForce+0x88>)
 800182c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4a0f      	ldr	r2, [pc, #60]	; (8001870 <ledSetForce+0x8c>)
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	b29b      	uxth	r3, r3
 800183a:	2201      	movs	r2, #1
 800183c:	4619      	mov	r1, r3
 800183e:	f004 fe11 	bl	8006464 <HAL_GPIO_WritePin>
 8001842:	e00e      	b.n	8001862 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <ledSetForce+0x88>)
 8001848:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <ledSetForce+0x8c>)
 8001850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001854:	b29b      	uxth	r3, r3
 8001856:	2200      	movs	r2, #0
 8001858:	4619      	mov	r1, r3
 800185a:	f004 fe03 	bl	8006464 <HAL_GPIO_WritePin>
 800185e:	e000      	b.n	8001862 <ledSetForce+0x7e>
    return;
 8001860:	bf00      	nop
    }

//  }

}
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000048 	.word	0x20000048
 800186c:	20000018 	.word	0x20000018
 8001870:	20000030 	.word	0x20000030

08001874 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <ledInit+0xd0>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d15b      	bne.n	800193a <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <ledInit+0xd4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a2b      	ldr	r2, [pc, #172]	; (8001948 <ledInit+0xd4>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b29      	ldr	r3, [pc, #164]	; (8001948 <ledInit+0xd4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b25      	ldr	r3, [pc, #148]	; (8001948 <ledInit+0xd4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <ledInit+0xd4>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <ledInit+0xd4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	e02a      	b.n	8001926 <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 80018d0:	4a1e      	ldr	r2, [pc, #120]	; (800194c <ledInit+0xd8>)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <ledInit+0xdc>)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f004 fdbd 	bl	8006464 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 80018ea:	4a19      	ldr	r2, [pc, #100]	; (8001950 <ledInit+0xdc>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018f8:	2301      	movs	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <ledInit+0xd8>)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	f107 0208 	add.w	r2, r7, #8
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f004 fc0c 	bl	800612c <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f81c 	bl	8001958 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	3301      	adds	r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b05      	cmp	r3, #5
 800192a:	ddd1      	ble.n	80018d0 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <ledInit+0xe0>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <ledInit+0xd0>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e000      	b.n	800193c <ledInit+0xc8>
    return;
 800193a:	bf00      	nop
}
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20001d38 	.word	0x20001d38
 8001948:	40023800 	.word	0x40023800
 800194c:	20000018 	.word	0x20000018
 8001950:	20000030 	.word	0x20000030
 8001954:	20001d42 	.word	0x20001d42

08001958 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	460a      	mov	r2, r1
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d904      	bls.n	8001978 <ledSet+0x20>
 800196e:	22e4      	movs	r2, #228	; 0xe4
 8001970:	490a      	ldr	r1, [pc, #40]	; (800199c <ledSet+0x44>)
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <ledSet+0x48>)
 8001974:	f001 f948 	bl	8002c08 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <ledSet+0x4c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001980:	79ba      	ldrb	r2, [r7, #6]
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff2c 	bl	80017e4 <ledSetForce>
  }

  ledLastState[led] = value;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	79b9      	ldrb	r1, [r7, #6]
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <ledSet+0x50>)
 8001992:	54d1      	strb	r1, [r2, r3]
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	08014a14 	.word	0x08014a14
 80019a0:	08014a30 	.word	0x08014a30
 80019a4:	20001d42 	.word	0x20001d42
 80019a8:	20001d3c 	.word	0x20001d3c

080019ac <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 80019b0:	2100      	movs	r1, #0
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff ffd0 	bl	8001958 <ledSet>
  ledSet(LED_GREEN_R, 0);
 80019b8:	2100      	movs	r1, #0
 80019ba:	2003      	movs	r0, #3
 80019bc:	f7ff ffcc 	bl	8001958 <ledSet>
  ledSet(LED_RED_L, 1);
 80019c0:	2101      	movs	r1, #1
 80019c2:	2002      	movs	r0, #2
 80019c4:	f7ff ffc8 	bl	8001958 <ledSet>
  ledSet(LED_RED_R, 1);
 80019c8:	2101      	movs	r1, #1
 80019ca:	2004      	movs	r0, #4
 80019cc:	f7ff ffc4 	bl	8001958 <ledSet>
  ledSet(LED_BLUE_L, 0);
 80019d0:	2100      	movs	r1, #0
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff ffc0 	bl	8001958 <ledSet>
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}

080019dc <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af02      	add	r7, sp, #8
  if(isInit) {
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <ledseqInit+0xe4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d165      	bne.n	8001ab6 <ledseqInit+0xda>
    return;
  }

  ledInit();
 80019ea:	f7ff ff43 	bl	8001874 <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 80019ee:	4835      	ldr	r0, [pc, #212]	; (8001ac4 <ledseqInit+0xe8>)
 80019f0:	f000 f9f8 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 80019f4:	4834      	ldr	r0, [pc, #208]	; (8001ac8 <ledseqInit+0xec>)
 80019f6:	f000 f9f5 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 80019fa:	4834      	ldr	r0, [pc, #208]	; (8001acc <ledseqInit+0xf0>)
 80019fc:	f000 f9f2 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 8001a00:	4833      	ldr	r0, [pc, #204]	; (8001ad0 <ledseqInit+0xf4>)
 8001a02:	f000 f9ef 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 8001a06:	4833      	ldr	r0, [pc, #204]	; (8001ad4 <ledseqInit+0xf8>)
 8001a08:	f000 f9ec 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 8001a0c:	4832      	ldr	r0, [pc, #200]	; (8001ad8 <ledseqInit+0xfc>)
 8001a0e:	f000 f9e9 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 8001a12:	4832      	ldr	r0, [pc, #200]	; (8001adc <ledseqInit+0x100>)
 8001a14:	f000 f9e6 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 8001a18:	4831      	ldr	r0, [pc, #196]	; (8001ae0 <ledseqInit+0x104>)
 8001a1a:	f000 f9e3 	bl	8001de4 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 8001a1e:	4831      	ldr	r0, [pc, #196]	; (8001ae4 <ledseqInit+0x108>)
 8001a20:	f000 f9e0 	bl	8001de4 <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	e007      	b.n	8001a3a <ledseqInit+0x5e>
    activeSeq[i] = 0;
 8001a2a:	4a2f      	ldr	r2, [pc, #188]	; (8001ae8 <ledseqInit+0x10c>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	ddf4      	ble.n	8001a2a <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 8001a40:	2300      	movs	r3, #0
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	e018      	b.n	8001a78 <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	212c      	movs	r1, #44	; 0x2c
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4926      	ldr	r1, [pc, #152]	; (8001aec <ledseqInit+0x110>)
 8001a52:	440b      	add	r3, r1
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <ledseqInit+0x114>)
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a62:	4824      	ldr	r0, [pc, #144]	; (8001af4 <ledseqInit+0x118>)
 8001a64:	f00e fd1e 	bl	80104a4 <xTimerCreateStatic>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4923      	ldr	r1, [pc, #140]	; (8001af8 <ledseqInit+0x11c>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	dde3      	ble.n	8001a46 <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f00c fb79 	bl	800e176 <xQueueCreateMutex>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <ledseqInit+0x120>)
 8001a88:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f00c fafa 	bl	800e088 <xQueueGenericCreate>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <ledseqInit+0x124>)
 8001a98:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	4917      	ldr	r1, [pc, #92]	; (8001b04 <ledseqInit+0x128>)
 8001aa8:	4817      	ldr	r0, [pc, #92]	; (8001b08 <ledseqInit+0x12c>)
 8001aaa:	f00d fa0b 	bl	800eec4 <xTaskCreate>

  isInit = true;
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <ledseqInit+0xe4>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e000      	b.n	8001ab8 <ledseqInit+0xdc>
    return;
 8001ab6:	bf00      	nop
}
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20001d50 	.word	0x20001d50
 8001ac4:	20000238 	.word	0x20000238
 8001ac8:	20000248 	.word	0x20000248
 8001acc:	20000070 	.word	0x20000070
 8001ad0:	20000188 	.word	0x20000188
 8001ad4:	200001b0 	.word	0x200001b0
 8001ad8:	20000108 	.word	0x20000108
 8001adc:	20000130 	.word	0x20000130
 8001ae0:	20000158 	.word	0x20000158
 8001ae4:	20000168 	.word	0x20000168
 8001ae8:	20000d1c 	.word	0x20000d1c
 8001aec:	20000d4c 	.word	0x20000d4c
 8001af0:	08001ccd 	.word	0x08001ccd
 8001af4:	08014a58 	.word	0x08014a58
 8001af8:	20000d34 	.word	0x20000d34
 8001afc:	20001d48 	.word	0x20001d48
 8001b00:	20001d4c 	.word	0x20001d4c
 8001b04:	08014a64 	.word	0x08014a64
 8001b08:	08001b0d 	.word	0x08001b0d

08001b0c <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <lesdeqCmdTask+0x3c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f107 0108 	add.w	r1, r7, #8
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b20:	4618      	mov	r0, r3
 8001b22:	f00c fd81 	bl	800e628 <xQueueReceive>

    switch(command.command) {
 8001b26:	7a3b      	ldrb	r3, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <lesdeqCmdTask+0x26>
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d005      	beq.n	8001b3c <lesdeqCmdTask+0x30>
 8001b30:	e009      	b.n	8001b46 <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f825 	bl	8001b84 <ledseqRunBlocking>
        break;
 8001b3a:	e004      	b.n	8001b46 <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f898 	bl	8001c74 <ledseqStopBlocking>
        break;
 8001b44:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8001b46:	e7e5      	b.n	8001b14 <lesdeqCmdTask+0x8>
 8001b48:	20001d4c 	.word	0x20001d4c

08001b4c <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 8001b54:	2300      	movs	r3, #0
 8001b56:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <ledseqRun+0x34>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f107 0108 	add.w	r1, r7, #8
 8001b64:	2300      	movs	r3, #0
 8001b66:	2200      	movs	r2, #0
 8001b68:	f00c fb38 	bl	800e1dc <xQueueGenericSend>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <ledseqRun+0x2a>
    return true;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <ledseqRun+0x2c>
  }
  return false;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20001d4c 	.word	0x20001d4c

08001b84 <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7b1b      	ldrb	r3, [r3, #12]
 8001b90:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <ledseqRunBlocking+0x5c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f00c fe24 	bl	800e7e8 <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f94f 	bl	8001e4c <updateActive>
  xSemaphoreGive(ledseqMutex);
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <ledseqRunBlocking+0x5c>)
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f00c fb10 	bl	800e1dc <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <ledseqRunBlocking+0x60>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d106      	bne.n	8001bd8 <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <ledseqRunBlocking+0x64>)
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f87a 	bl	8001ccc <runLedseq>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20001d48 	.word	0x20001d48
 8001be4:	20000d1c 	.word	0x20000d1c
 8001be8:	20000d34 	.word	0x20000d34

08001bec <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 8001bf6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bfa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001c34 <ledseqSetChargeLevel+0x48>
 8001bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	ee17 3a90 	vmov	r3, s15
 8001c0a:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001c12:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <ledseqSetChargeLevel+0x4c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <ledseqSetChargeLevel+0x4c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3308      	adds	r3, #8
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	605a      	str	r2, [r3, #4]
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	447a0000 	.word	0x447a0000
 8001c38:	200001b0 	.word	0x200001b0

08001c3c <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 8001c44:	2301      	movs	r3, #1
 8001c46:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <ledseqStop+0x34>)
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f107 0108 	add.w	r1, r7, #8
 8001c54:	2300      	movs	r3, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	f00c fac0 	bl	800e1dc <xQueueGenericSend>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <ledseqStop+0x2a>
    return true;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <ledseqStop+0x2c>
  }
  return false;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20001d4c 	.word	0x20001d4c

08001c74 <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7b1b      	ldrb	r3, [r3, #12]
 8001c80:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <ledseqStopBlocking+0x50>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00c fdac 	bl	800e7e8 <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c96:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f8d6 	bl	8001e4c <updateActive>
  xSemaphoreGive(ledseqMutex);
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <ledseqStopBlocking+0x50>)
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	f00c fa97 	bl	800e1dc <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <ledseqStopBlocking+0x54>)
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f808 	bl	8001ccc <runLedseq>
}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20001d48 	.word	0x20001d48
 8001cc8:	20000d34 	.word	0x20000d34

08001ccc <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af02      	add	r7, sp, #8
 8001cd2:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 8001cd4:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <runLedseq+0x10c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f083 0301 	eor.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d171      	bne.n	8001dc6 <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f00e ff52 	bl	8010b8c <pvTimerGetTimerID>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 8001cec:	7dbb      	ldrb	r3, [r7, #22]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <runLedseq+0x110>)
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d066      	beq.n	8001dca <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 8001d00:	e05a      	b.n	8001db8 <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d0a:	d060      	beq.n	8001dce <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8001d1a:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <runLedseq+0x114>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00c fd60 	bl	800e7e8 <xQueueSemaphoreTake>
    context->state++;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	7b1b      	ldrb	r3, [r3, #12]
 8001d36:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f113 0f02 	cmn.w	r3, #2
 8001d40:	d003      	beq.n	8001d4a <runLedseq+0x7e>
 8001d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d46:	d004      	beq.n	8001d52 <runLedseq+0x86>
 8001d48:	e00c      	b.n	8001d64 <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
        break;
 8001d50:	e02b      	b.n	8001daa <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d58:	609a      	str	r2, [r3, #8]
        updateActive(led);
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f875 	bl	8001e4c <updateActive>
        break;
 8001d62:	e022      	b.n	8001daa <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fdf3 	bl	8001958 <ledSet>
        if (step->action == 0) {
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d016      	beq.n	8001da8 <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2300      	movs	r3, #0
 8001d86:	2104      	movs	r1, #4
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f00e fbff 	bl	801058c <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 8001d8e:	f00d fbb9 	bl	800f504 <xTaskGetTickCount>
 8001d92:	4602      	mov	r2, r0
 8001d94:	2300      	movs	r3, #0
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f00e fbf5 	bl	801058c <xTimerGenericCommand>
        leave = true;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
        break;
 8001da6:	e000      	b.n	8001daa <runLedseq+0xde>
          break;
 8001da8:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <runLedseq+0x114>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	f00c fa12 	bl	800e1dc <xQueueGenericSend>
  while(!leave) {
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	f083 0301 	eor.w	r3, r3, #1
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d19e      	bne.n	8001d02 <runLedseq+0x36>
 8001dc4:	e004      	b.n	8001dd0 <runLedseq+0x104>
    return;
 8001dc6:	bf00      	nop
 8001dc8:	e002      	b.n	8001dd0 <runLedseq+0x104>
    return;
 8001dca:	bf00      	nop
 8001dcc:	e000      	b.n	8001dd0 <runLedseq+0x104>
      return;
 8001dce:	bf00      	nop
  }
}
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20001d51 	.word	0x20001d51
 8001ddc:	20000d1c 	.word	0x20000d1c
 8001de0:	20001d48 	.word	0x20001d48

08001de4 <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df2:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <ledseqRegisterSequence+0x64>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d103      	bne.n	8001e0a <ledseqRegisterSequence+0x26>
    sequences = context;
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <ledseqRegisterSequence+0x64>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	e019      	b.n	8001e3e <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <ledseqRegisterSequence+0x64>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d00f      	beq.n	8001e38 <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 8001e18:	e006      	b.n	8001e28 <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d009      	beq.n	8001e3c <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f4      	bne.n	8001e1a <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	e002      	b.n	8001e3e <ledseqRegisterSequence+0x5a>
      return;
 8001e38:	bf00      	nop
 8001e3a:	e000      	b.n	8001e3e <ledseqRegisterSequence+0x5a>
        return;
 8001e3c:	bf00      	nop
  }
}
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20001d44 	.word	0x20001d44

08001e4c <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <updateActive+0x5c>)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fd77 	bl	8001958 <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <updateActive+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e012      	b.n	8001e98 <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	7b1b      	ldrb	r3, [r3, #12]
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d10a      	bne.n	8001e92 <updateActive+0x46>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e84:	d005      	beq.n	8001e92 <updateActive+0x46>
      activeSeq[led] = sequence;
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <updateActive+0x5c>)
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 8001e90:	e006      	b.n	8001ea0 <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e9      	bne.n	8001e72 <updateActive+0x26>
    }
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000d1c 	.word	0x20000d1c
 8001eac:	20001d44 	.word	0x20001d44

08001eb0 <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af04      	add	r7, sp, #16
  if(isInit) {
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <pmInit+0x60>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d125      	bne.n	8001f0a <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4914      	ldr	r1, [pc, #80]	; (8001f14 <pmInit+0x64>)
 8001ec2:	4815      	ldr	r0, [pc, #84]	; (8001f18 <pmInit+0x68>)
 8001ec4:	f003 f850 	bl	8004f68 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4914      	ldr	r1, [pc, #80]	; (8001f1c <pmInit+0x6c>)
 8001ecc:	4814      	ldr	r0, [pc, #80]	; (8001f20 <pmInit+0x70>)
 8001ece:	f003 f84b 	bl	8004f68 <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <pmInit+0x74>)
 8001ed8:	9302      	str	r3, [sp, #8]
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <pmInit+0x78>)
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4911      	ldr	r1, [pc, #68]	; (8001f2c <pmInit+0x7c>)
 8001ee6:	4812      	ldr	r0, [pc, #72]	; (8001f30 <pmInit+0x80>)
 8001ee8:	f00c ff96 	bl	800ee18 <xTaskCreateStatic>

  isInit = true;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <pmInit+0x60>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <pmInit+0x84>)
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <pmInit+0x88>)
 8001ef6:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <pmInit+0x84>)
 8001efc:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001f00:	ee00 3a10 	vmov	s0, r3
 8001f04:	f000 f81a 	bl	8001f3c <pmSetBatteryVoltage>
 8001f08:	e000      	b.n	8001f0c <pmInit+0x5c>
    return;
 8001f0a:	bf00      	nop
}
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20001d80 	.word	0x20001d80
 8001f14:	20001d90 	.word	0x20001d90
 8001f18:	20003910 	.word	0x20003910
 8001f1c:	20001d92 	.word	0x20001d92
 8001f20:	20003958 	.word	0x20003958
 8001f24:	20000e54 	.word	0x20000e54
 8001f28:	20001d94 	.word	0x20001d94
 8001f2c:	08014a70 	.word	0x08014a70
 8001f30:	080021b9 	.word	0x080021b9
 8001f34:	20001d84 	.word	0x20001d84
 8001f38:	406ccccd 	.word	0x406ccccd

08001f3c <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <pmSetBatteryVoltage+0x6c>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 8001f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f50:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001fac <pmSetBatteryVoltage+0x70>
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <pmSetBatteryVoltage+0x74>)
 8001f64:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <pmSetBatteryVoltage+0x78>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f78:	dd02      	ble.n	8001f80 <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <pmSetBatteryVoltage+0x78>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <pmSetBatteryVoltage+0x7c>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	d400      	bmi.n	8001f96 <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 8001f94:	e002      	b.n	8001f9c <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <pmSetBatteryVoltage+0x7c>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	20001d54 	.word	0x20001d54
 8001fac:	447a0000 	.word	0x447a0000
 8001fb0:	20001d58 	.word	0x20001d58
 8001fb4:	20001d5c 	.word	0x20001d5c
 8001fb8:	20000258 	.word	0x20000258

08001fbc <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 8001fda:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fe2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	d501      	bpl.n	8001ff0 <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e01c      	b.n	800202a <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 8001ff0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002038 <pmBatteryChargeFromVoltage+0x6c>
 8001ff4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	dd01      	ble.n	8002006 <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 8002002:	2309      	movs	r3, #9
 8002004:	e011      	b.n	800202a <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 8002006:	e002      	b.n	800200e <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3301      	adds	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <pmBatteryChargeFromVoltage+0x70>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	ed97 7a01 	vldr	s14, [r7, #4]
 800201e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002026:	dcef      	bgt.n	8002008 <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 8002028:	68fb      	ldr	r3, [r7, #12]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40833333 	.word	0x40833333
 800203c:	080163e4 	.word	0x080163e4

08002040 <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return batteryVoltage;
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <pmGetBatteryVoltage+0x18>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	ee07 3a90 	vmov	s15, r3
}
 800204c:	eeb0 0a67 	vmov.f32	s0, s15
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	20001d54 	.word	0x20001d54

0800205c <pmSetChargeState>:
    workerSchedule(pmGracefulShutdown, NULL);
  }
}

void pmSetChargeState(PMChargeStates chgState)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <pmUpdateState>:

PMStates pmUpdateState()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 800207a:	4b24      	ldr	r3, [pc, #144]	; (800210c <pmUpdateState+0x98>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <pmUpdateState+0x98>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf14      	ite	ne
 800209c:	2301      	movne	r3, #1
 800209e:	2300      	moveq	r3, #0
 80020a0:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 80020a2:	f00d fa2f 	bl	800f504 <xTaskGetTickCount>
 80020a6:	4602      	mov	r2, r0
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <pmUpdateState+0x9c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <pmUpdateState+0xa0>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d002      	beq.n	80020be <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 80020b8:	2300      	movs	r3, #0
 80020ba:	71fb      	strb	r3, [r7, #7]
 80020bc:	e016      	b.n	80020ec <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 80020be:	79bb      	ldrb	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <pmUpdateState+0x62>
 80020c4:	797b      	ldrb	r3, [r7, #5]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <pmUpdateState+0x62>
  {
    nextState = charged;
 80020d0:	2302      	movs	r3, #2
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	e00a      	b.n	80020ec <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <pmUpdateState+0x74>
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <pmUpdateState+0x74>
  {
    nextState = charging;
 80020e2:	2301      	movs	r3, #1
 80020e4:	71fb      	strb	r3, [r7, #7]
 80020e6:	e001      	b.n	80020ec <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 80020e8:	2300      	movs	r3, #0
 80020ea:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <pmUpdateState+0x8c>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 80020fc:	2303      	movs	r3, #3
 80020fe:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 8002100:	79fb      	ldrb	r3, [r7, #7]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20001d84 	.word	0x20001d84
 8002110:	20001d78 	.word	0x20001d78
 8002114:	20001d8e 	.word	0x20001d8e

08002118 <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <pmMeasureExtBatteryCurrent+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00d      	beq.n	8002142 <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <pmMeasureExtBatteryCurrent+0x48>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <pmMeasureExtBatteryCurrent+0x4c>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002140:	e002      	b.n	8002148 <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
  }

  return current;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	ee07 3a90 	vmov	s15, r3
}
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	20001d70 	.word	0x20001d70
 8002160:	20001d90 	.word	0x20001d90
 8002164:	20001d74 	.word	0x20001d74

08002168 <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <pmMeasureExtBatteryVoltage+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <pmMeasureExtBatteryVoltage+0x48>)
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <pmMeasureExtBatteryVoltage+0x4c>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002190:	e002      	b.n	8002198 <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	ee07 3a90 	vmov	s15, r3
}
 800219e:	eeb0 0a67 	vmov.f32	s0, s15
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	20001d66 	.word	0x20001d66
 80021b0:	20001d92 	.word	0x20001d92
 80021b4:	20001d68 	.word	0x20001d68

080021b8 <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 80021c0:	2300      	movs	r3, #0
 80021c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 80021c4:	2105      	movs	r1, #5
 80021c6:	2000      	movs	r0, #0
 80021c8:	f00d fafa 	bl	800f7c0 <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 80021cc:	f00d f99a 	bl	800f504 <xTaskGetTickCount>
 80021d0:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 80021d2:	4a6f      	ldr	r2, [pc, #444]	; (8002390 <pmTask+0x1d8>)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 80021d8:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <pmTask+0x1dc>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff ff3c 	bl	800205c <pmSetChargeState>
  systemWaitStart();
 80021e4:	f000 f978 	bl	80024d8 <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 80021e8:	2064      	movs	r0, #100	; 0x64
 80021ea:	f00c ffcd 	bl	800f188 <vTaskDelay>
    tickCount = xTaskGetTickCount();
 80021ee:	f00d f989 	bl	800f504 <xTaskGetTickCount>
 80021f2:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 80021f4:	f7ff ffb8 	bl	8002168 <pmMeasureExtBatteryVoltage>
 80021f8:	eef0 7a40 	vmov.f32	s15, s0
 80021fc:	4b66      	ldr	r3, [pc, #408]	; (8002398 <pmTask+0x1e0>)
 80021fe:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <pmTask+0x1e0>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800239c <pmTask+0x1e4>
 800220c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b29a      	uxth	r2, r3
 800221a:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <pmTask+0x1e8>)
 800221c:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 800221e:	f7ff ff7b 	bl	8002118 <pmMeasureExtBatteryCurrent>
 8002222:	eef0 7a40 	vmov.f32	s15, s0
 8002226:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <pmTask+0x1ec>)
 8002228:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 800222c:	f7ff ff08 	bl	8002040 <pmGetBatteryVoltage>
 8002230:	eef0 7a40 	vmov.f32	s15, s0
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	f7ff fec8 	bl	8001fcc <pmBatteryChargeFromVoltage>
 800223c:	4603      	mov	r3, r0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	4413      	add	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <pmTask+0x1f0>)
 800224c:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 800224e:	f7ff fef7 	bl	8002040 <pmGetBatteryVoltage>
 8002252:	eeb0 7a40 	vmov.f32	s14, s0
 8002256:	4b55      	ldr	r3, [pc, #340]	; (80023ac <pmTask+0x1f4>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002264:	dd02      	ble.n	800226c <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 8002266:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <pmTask+0x1d8>)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 800226c:	f7ff fee8 	bl	8002040 <pmGetBatteryVoltage>
 8002270:	eeb0 7a40 	vmov.f32	s14, s0
 8002274:	4b4e      	ldr	r3, [pc, #312]	; (80023b0 <pmTask+0x1f8>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	dd02      	ble.n	800228a <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 8002284:	4a43      	ldr	r2, [pc, #268]	; (8002394 <pmTask+0x1dc>)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 800228a:	f7ff fef3 	bl	8002074 <pmUpdateState>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	4b48      	ldr	r3, [pc, #288]	; (80023b4 <pmTask+0x1fc>)
 8002294:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <pmTask+0x1fc>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	7dfa      	ldrb	r2, [r7, #23]
 800229c:	429a      	cmp	r2, r3
 800229e:	d03b      	beq.n	8002318 <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 80022a0:	4b44      	ldr	r3, [pc, #272]	; (80023b4 <pmTask+0x1fc>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d833      	bhi.n	8002310 <pmTask+0x158>
 80022a8:	a201      	add	r2, pc, #4	; (adr r2, 80022b0 <pmTask+0xf8>)
 80022aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ae:	bf00      	nop
 80022b0:	080022fd 	.word	0x080022fd
 80022b4:	080022d5 	.word	0x080022d5
 80022b8:	080022c1 	.word	0x080022c1
 80022bc:	080022ef 	.word	0x080022ef
      {
        case charged:
          ledseqStop(&seq_charging);
 80022c0:	483d      	ldr	r0, [pc, #244]	; (80023b8 <pmTask+0x200>)
 80022c2:	f7ff fcbb 	bl	8001c3c <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 80022c6:	483d      	ldr	r0, [pc, #244]	; (80023bc <pmTask+0x204>)
 80022c8:	f7ff fc5c 	bl	8001b84 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 80022cc:	2004      	movs	r0, #4
 80022ce:	f000 f879 	bl	80023c4 <soundSetEffect>
          break;
 80022d2:	e01e      	b.n	8002312 <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 80022d4:	483a      	ldr	r0, [pc, #232]	; (80023c0 <pmTask+0x208>)
 80022d6:	f7ff fcb1 	bl	8001c3c <ledseqStop>
          ledseqStop(&seq_charged);
 80022da:	4838      	ldr	r0, [pc, #224]	; (80023bc <pmTask+0x204>)
 80022dc:	f7ff fcae 	bl	8001c3c <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 80022e0:	4835      	ldr	r0, [pc, #212]	; (80023b8 <pmTask+0x200>)
 80022e2:	f7ff fc4f 	bl	8001b84 <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 80022e6:	2003      	movs	r0, #3
 80022e8:	f000 f86c 	bl	80023c4 <soundSetEffect>
          break;
 80022ec:	e011      	b.n	8002312 <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 80022ee:	4834      	ldr	r0, [pc, #208]	; (80023c0 <pmTask+0x208>)
 80022f0:	f7ff fc48 	bl	8001b84 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 80022f4:	2005      	movs	r0, #5
 80022f6:	f000 f865 	bl	80023c4 <soundSetEffect>
          break;
 80022fa:	e00a      	b.n	8002312 <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 80022fc:	482e      	ldr	r0, [pc, #184]	; (80023b8 <pmTask+0x200>)
 80022fe:	f7ff fc41 	bl	8001b84 <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 8002302:	482e      	ldr	r0, [pc, #184]	; (80023bc <pmTask+0x204>)
 8002304:	f7ff fc22 	bl	8001b4c <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 8002308:	2002      	movs	r0, #2
 800230a:	f000 f85b 	bl	80023c4 <soundSetEffect>
          break;
 800230e:	e000      	b.n	8002312 <pmTask+0x15a>
        default:
          break;
 8002310:	bf00      	nop
      }
      pmStateOld = pmState;
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <pmTask+0x1fc>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 8002318:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <pmTask+0x1fc>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d832      	bhi.n	8002386 <pmTask+0x1ce>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <pmTask+0x170>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	08002381 	.word	0x08002381
 800232c:	08002339 	.word	0x08002339
 8002330:	08002387 	.word	0x08002387
 8002334:	08002367 	.word	0x08002367
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 8002338:	f7ff fe82 	bl	8002040 <pmGetBatteryVoltage>
 800233c:	eef0 7a40 	vmov.f32	s15, s0
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	f7ff fe42 	bl	8001fcc <pmBatteryChargeFromVoltage>
 8002348:	ee07 0a90 	vmov	s15, r0
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002358:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 800235c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002360:	f7ff fc44 	bl	8001bec <ledseqSetChargeLevel>
        }
        break;
 8002364:	e012      	b.n	800238c <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <pmTask+0x1dc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d907      	bls.n	800238a <pmTask+0x1d2>
          {
            pmSystemShutdown();
 800237a:	f7ff fe1f 	bl	8001fbc <pmSystemShutdown>
          }
        }
        break;
 800237e:	e004      	b.n	800238a <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 8002380:	f7ff fe1c 	bl	8001fbc <pmSystemShutdown>
          }
        }
        break;
 8002384:	e002      	b.n	800238c <pmTask+0x1d4>
      default:
        break;
 8002386:	bf00      	nop
 8002388:	e72e      	b.n	80021e8 <pmTask+0x30>
        break;
 800238a:	bf00      	nop
    vTaskDelay(100);
 800238c:	e72c      	b.n	80021e8 <pmTask+0x30>
 800238e:	bf00      	nop
 8002390:	20001d78 	.word	0x20001d78
 8002394:	20001d7c 	.word	0x20001d7c
 8002398:	20001d60 	.word	0x20001d60
 800239c:	447a0000 	.word	0x447a0000
 80023a0:	20001d64 	.word	0x20001d64
 80023a4:	20001d6c 	.word	0x20001d6c
 80023a8:	20001d8d 	.word	0x20001d8d
 80023ac:	20000260 	.word	0x20000260
 80023b0:	2000025c 	.word	0x2000025c
 80023b4:	20001d81 	.word	0x20001d81
 80023b8:	200001b0 	.word	0x200001b0
 80023bc:	20000188 	.word	0x20000188
 80023c0:	20000070 	.word	0x20000070

080023c4 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <soundSetEffect+0x1c>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20001f94 	.word	0x20001f94

080023e4 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 80023ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <systemLaunch+0x30>)
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <systemLaunch+0x34>)
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2302      	movs	r3, #2
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2300      	movs	r3, #0
 80023fe:	4907      	ldr	r1, [pc, #28]	; (800241c <systemLaunch+0x38>)
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <systemLaunch+0x3c>)
 8002402:	f00c fd09 	bl	800ee18 <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 8002406:	4907      	ldr	r1, [pc, #28]	; (8002424 <systemLaunch+0x40>)
 8002408:	4807      	ldr	r0, [pc, #28]	; (8002428 <systemLaunch+0x44>)
 800240a:	f001 f95d 	bl	80036c8 <eprintf>

}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20000f0c 	.word	0x20000f0c
 8002418:	20001fa4 	.word	0x20001fa4
 800241c:	08014af8 	.word	0x08014af8
 8002420:	0800242d 	.word	0x0800242d
 8002424:	08014b00 	.word	0x08014b00
 8002428:	08002e39 	.word	0x08002e39

0800242c <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  bool pass = true;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]


  uint32_t ld = SysTick->LOAD;
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <systemTask+0x8c>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <systemTask+0x90>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <systemTask+0x94>)
 8002444:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 8002446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800244a:	f002 f85b 	bl	8004504 <delay_us>
  time2 = DWT->CYCCNT;
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <systemTask+0x90>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <systemTask+0x98>)
 8002454:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(time2-time1)/CLOCK_PER_USEC);
 8002456:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <systemTask+0x98>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <systemTask+0x94>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002468:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80024c8 <systemTask+0x9c>
 800246c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002470:	ee16 0a90 	vmov	r0, s13
 8002474:	f7fe f878 	bl	8000568 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4913      	ldr	r1, [pc, #76]	; (80024cc <systemTask+0xa0>)
 800247e:	4814      	ldr	r0, [pc, #80]	; (80024d0 <systemTask+0xa4>)
 8002480:	f001 f922 	bl	80036c8 <eprintf>


  ledInit();
 8002484:	f7ff f9f6 	bl	8001874 <ledInit>
  ledSet(CHG_LED, SET);
 8002488:	2101      	movs	r1, #1
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fa64 	bl	8001958 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8002490:	f001 f930 	bl	80036f4 <queueMonitorInit>
#endif

#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  uartInit();
 8002494:	f000 fc36 	bl	8002d04 <uartInit>
  uartDmaInit();
 8002498:	f000 fc52 	bl	8002d40 <uartDmaInit>
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 800249c:	f7ff f898 	bl	80015d0 <ICM20602_Initialization>

  delay_us(5000000);
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <systemTask+0xa8>)
 80024a2:	f002 f82f 	bl	8004504 <delay_us>

  passthroughInit();	// Create passthrough task
 80024a6:	f000 fa29 	bl	80028fc <passthroughInit>

  systemInit();
 80024aa:	f000 f837 	bl	800251c <systemInit>
//  commInit();
//  commanderInit();

}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	e000e010 	.word	0xe000e010
 80024bc:	e0001000 	.word	0xe0001000
 80024c0:	20001f9c 	.word	0x20001f9c
 80024c4:	20001fa0 	.word	0x20001fa0
 80024c8:	42900000 	.word	0x42900000
 80024cc:	08014b24 	.word	0x08014b24
 80024d0:	08002e39 	.word	0x08002e39
 80024d4:	004c4b40 	.word	0x004c4b40

080024d8 <systemWaitStart>:



void systemWaitStart(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 80024dc:	e002      	b.n	80024e4 <systemWaitStart+0xc>
    vTaskDelay(2);
 80024de:	2002      	movs	r0, #2
 80024e0:	f00c fe52 	bl	800f188 <vTaskDelay>
  while(!isInit)
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <systemWaitStart+0x3c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f5      	bne.n	80024de <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <systemWaitStart+0x40>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00c f974 	bl	800e7e8 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <systemWaitStart+0x40>)
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	f00b fe67 	bl	800e1dc <xQueueGenericSend>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20001f98 	.word	0x20001f98
 8002518:	200023a4 	.word	0x200023a4

0800251c <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af02      	add	r7, sp, #8
  if(isInit)
 8002522:	4b4a      	ldr	r3, [pc, #296]	; (800264c <systemInit+0x130>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 808c 	bne.w	8002644 <systemInit+0x128>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 800252c:	4948      	ldr	r1, [pc, #288]	; (8002650 <systemInit+0x134>)
 800252e:	2001      	movs	r0, #1
 8002530:	f00b fe39 	bl	800e1a6 <xQueueCreateMutexStatic>
 8002534:	4603      	mov	r3, r0
 8002536:	4a47      	ldr	r2, [pc, #284]	; (8002654 <systemInit+0x138>)
 8002538:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800253a:	4b46      	ldr	r3, [pc, #280]	; (8002654 <systemInit+0x138>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002542:	4618      	mov	r0, r3
 8002544:	f00c f950 	bl	800e7e8 <xQueueSemaphoreTake>

  usblinkInit();
 8002548:	f000 f992 	bl	8002870 <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 800254c:	4942      	ldr	r1, [pc, #264]	; (8002658 <systemInit+0x13c>)
 800254e:	4843      	ldr	r0, [pc, #268]	; (800265c <systemInit+0x140>)
 8002550:	f001 f8ba 	bl	80036c8 <eprintf>

  sysLoadInit();
 8002554:	f001 f9ee 	bl	8003934 <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8002558:	4941      	ldr	r1, [pc, #260]	; (8002660 <systemInit+0x144>)
 800255a:	4840      	ldr	r0, [pc, #256]	; (800265c <systemInit+0x140>)
 800255c:	f001 f8b4 	bl	80036c8 <eprintf>
#if CONFIG_ENABLE_CPX
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
  debugInit();
 8002560:	f000 fbc8 	bl	8002cf4 <debugInit>
  crtpInit();
 8002564:	f7fe fd52 	bl	800100c <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8002568:	493e      	ldr	r1, [pc, #248]	; (8002664 <systemInit+0x148>)
 800256a:	483c      	ldr	r0, [pc, #240]	; (800265c <systemInit+0x140>)
 800256c:	f001 f8ac 	bl	80036c8 <eprintf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8002570:	493d      	ldr	r1, [pc, #244]	; (8002668 <systemInit+0x14c>)
 8002572:	483a      	ldr	r0, [pc, #232]	; (800265c <systemInit+0x140>)
 8002574:	f001 f8a8 	bl	80036c8 <eprintf>

  consoleInit();
 8002578:	f000 fb8c 	bl	8002c94 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 800257c:	f000 fad0 	bl	8002b20 <platformConfigGetDeviceTypeName>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	4939      	ldr	r1, [pc, #228]	; (800266c <systemInit+0x150>)
 8002586:	4835      	ldr	r0, [pc, #212]	; (800265c <systemInit+0x140>)
 8002588:	f001 f89e 	bl	80036c8 <eprintf>

  if (V_PRODUCTION_RELEASE) {
 800258c:	4b38      	ldr	r3, [pc, #224]	; (8002670 <systemInit+0x154>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <systemInit+0x88>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8002594:	4b37      	ldr	r3, [pc, #220]	; (8002674 <systemInit+0x158>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4937      	ldr	r1, [pc, #220]	; (8002678 <systemInit+0x15c>)
 800259c:	482f      	ldr	r0, [pc, #188]	; (800265c <systemInit+0x140>)
 800259e:	f001 f893 	bl	80036c8 <eprintf>
 80025a2:	e014      	b.n	80025ce <systemInit+0xb2>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <systemInit+0x160>)
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <systemInit+0x164>)
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <systemInit+0x158>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a34      	ldr	r2, [pc, #208]	; (8002684 <systemInit+0x168>)
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	2a00      	cmp	r2, #0
 80025b6:	d001      	beq.n	80025bc <systemInit+0xa0>
 80025b8:	4a33      	ldr	r2, [pc, #204]	; (8002688 <systemInit+0x16c>)
 80025ba:	e000      	b.n	80025be <systemInit+0xa2>
 80025bc:	4a33      	ldr	r2, [pc, #204]	; (800268c <systemInit+0x170>)
 80025be:	9201      	str	r2, [sp, #4]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	4603      	mov	r3, r0
 80025c4:	460a      	mov	r2, r1
 80025c6:	4932      	ldr	r1, [pc, #200]	; (8002690 <systemInit+0x174>)
 80025c8:	4824      	ldr	r0, [pc, #144]	; (800265c <systemInit+0x140>)
 80025ca:	f001 f87d 	bl	80036c8 <eprintf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <systemInit+0x178>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b31      	ldr	r3, [pc, #196]	; (8002698 <systemInit+0x17c>)
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	4b31      	ldr	r3, [pc, #196]	; (800269c <systemInit+0x180>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4831      	ldr	r0, [pc, #196]	; (80026a0 <systemInit+0x184>)
 80025dc:	f9b0 0000 	ldrsh.w	r0, [r0]
 80025e0:	9001      	str	r0, [sp, #4]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	460b      	mov	r3, r1
 80025e6:	492f      	ldr	r1, [pc, #188]	; (80026a4 <systemInit+0x188>)
 80025e8:	481c      	ldr	r0, [pc, #112]	; (800265c <systemInit+0x140>)
 80025ea:	f001 f86d 	bl	80036c8 <eprintf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 80025ee:	f001 fad1 	bl	8003b94 <workerInit>
  ledseqInit();
 80025f2:	f7ff f9f3 	bl	80019dc <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 80025f6:	492c      	ldr	r1, [pc, #176]	; (80026a8 <systemInit+0x18c>)
 80025f8:	4818      	ldr	r0, [pc, #96]	; (800265c <systemInit+0x140>)
 80025fa:	f001 f865 	bl	80036c8 <eprintf>


  pmInit();
 80025fe:	f7ff fc57 	bl	8001eb0 <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 8002602:	492a      	ldr	r1, [pc, #168]	; (80026ac <systemInit+0x190>)
 8002604:	4815      	ldr	r0, [pc, #84]	; (800265c <systemInit+0x140>)
 8002606:	f001 f85f 	bl	80036c8 <eprintf>

  buzzerInit();
 800260a:	f7ff f8b7 	bl	800177c <buzzerInit>
  buzzerOn(1000);
 800260e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002612:	f7ff f8d3 	bl	80017bc <buzzerOn>
  HAL_Delay(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f002 fc3e 	bl	8004e98 <HAL_Delay>
  buzzerOn(2000);
 800261c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002620:	f7ff f8cc 	bl	80017bc <buzzerOn>
  HAL_Delay(1);
 8002624:	2001      	movs	r0, #1
 8002626:	f002 fc37 	bl	8004e98 <HAL_Delay>
  buzzerOn(3000);
 800262a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800262e:	f7ff f8c5 	bl	80017bc <buzzerOn>
  HAL_Delay(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f002 fc30 	bl	8004e98 <HAL_Delay>
  buzzerOff();
 8002638:	f7ff f8b0 	bl	800179c <buzzerOff>

#ifdef CONFIG_APP_ENABLE
  appInit();
#endif
*/
  isInit = true;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <systemInit+0x130>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e000      	b.n	8002646 <systemInit+0x12a>
    return;
 8002644:	bf00      	nop
}
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20001f98 	.word	0x20001f98
 8002650:	200023a8 	.word	0x200023a8
 8002654:	200023a4 	.word	0x200023a4
 8002658:	08014b3c 	.word	0x08014b3c
 800265c:	08002e39 	.word	0x08002e39
 8002660:	08014b64 	.word	0x08014b64
 8002664:	08014b90 	.word	0x08014b90
 8002668:	08014bb4 	.word	0x08014bb4
 800266c:	08014bd8 	.word	0x08014bd8
 8002670:	0801641d 	.word	0x0801641d
 8002674:	200002e0 	.word	0x200002e0
 8002678:	08014bf4 	.word	0x08014bf4
 800267c:	200002d8 	.word	0x200002d8
 8002680:	200002dc 	.word	0x200002dc
 8002684:	0801641c 	.word	0x0801641c
 8002688:	08014c10 	.word	0x08014c10
 800268c:	08014c1c 	.word	0x08014c1c
 8002690:	08014c24 	.word	0x08014c24
 8002694:	1fff7a18 	.word	0x1fff7a18
 8002698:	1fff7a14 	.word	0x1fff7a14
 800269c:	1fff7a10 	.word	0x1fff7a10
 80026a0:	1fff7a22 	.word	0x1fff7a22
 80026a4:	08014c40 	.word	0x08014c40
 80026a8:	08014c74 	.word	0x08014c74
 80026ac:	08014c9c 	.word	0x08014c9c

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db12      	blt.n	8002724 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	490a      	ldr	r1, [pc, #40]	; (8002730 <__NVIC_DisableIRQ+0x44>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	3320      	adds	r3, #32
 8002714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002718:	f3bf 8f4f 	dsb	sy
}
 800271c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800271e:	f3bf 8f6f 	isb	sy
}
 8002722:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100

08002734 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 800273c:	bf00      	nop
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <usbGetDataBlocking+0x50>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4618      	mov	r0, r3
 800274a:	f00b ff6d 	bl	800e628 <xQueueReceive>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d1f4      	bne.n	800273e <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 8002754:	2043      	movs	r0, #67	; 0x43
 8002756:	f7ff ffc9 	bl	80026ec <__NVIC_DisableIRQ>
  if (rxStopped) {
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <usbGetDataBlocking+0x54>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 8002762:	2340      	movs	r3, #64	; 0x40
 8002764:	4a09      	ldr	r2, [pc, #36]	; (800278c <usbGetDataBlocking+0x58>)
 8002766:	2101      	movs	r1, #1
 8002768:	4809      	ldr	r0, [pc, #36]	; (8002790 <usbGetDataBlocking+0x5c>)
 800276a:	f00f fac9 	bl	8011d00 <USBD_LL_PrepareReceive>
    rxStopped = false;
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <usbGetDataBlocking+0x54>)
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 8002774:	2043      	movs	r0, #67	; 0x43
 8002776:	f7ff ff9b 	bl	80026b0 <__NVIC_EnableIRQ>

  return true;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200023fc 	.word	0x200023fc
 8002788:	20000264 	.word	0x20000264
 800278c:	20002405 	.word	0x20002405
 8002790:	20007c38 	.word	0x20007c38

08002794 <usbInit>:

void usbInit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 800279a:	2305      	movs	r3, #5
 800279c:	4618      	mov	r0, r3
 800279e:	2341      	movs	r3, #65	; 0x41
 80027a0:	4619      	mov	r1, r3
 80027a2:	2300      	movs	r3, #0
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <usbInit+0x64>)
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <usbInit+0x68>)
 80027aa:	f00b fc01 	bl	800dfb0 <xQueueGenericCreateStatic>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4a13      	ldr	r2, [pc, #76]	; (8002800 <usbInit+0x6c>)
 80027b2:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <usbInit+0x6c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <usbInit+0x70>)
 80027ba:	4913      	ldr	r1, [pc, #76]	; (8002808 <usbInit+0x74>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 ffe1 	bl	8003784 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 80027c2:	2301      	movs	r3, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	2341      	movs	r3, #65	; 0x41
 80027c8:	4619      	mov	r1, r3
 80027ca:	2300      	movs	r3, #0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <usbInit+0x78>)
 80027d0:	4a0f      	ldr	r2, [pc, #60]	; (8002810 <usbInit+0x7c>)
 80027d2:	f00b fbed 	bl	800dfb0 <xQueueGenericCreateStatic>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4a0e      	ldr	r2, [pc, #56]	; (8002814 <usbInit+0x80>)
 80027da:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <usbInit+0x80>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <usbInit+0x84>)
 80027e2:	4909      	ldr	r1, [pc, #36]	; (8002808 <usbInit+0x74>)
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 ffcd 	bl	8003784 <qmRegisterQueue>

  isInit = true;
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <usbInit+0x88>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000110c 	.word	0x2000110c
 80027fc:	20000fc4 	.word	0x20000fc4
 8002800:	200023fc 	.word	0x200023fc
 8002804:	08014cbc 	.word	0x08014cbc
 8002808:	08014cc8 	.word	0x08014cc8
 800280c:	200011a0 	.word	0x200011a0
 8002810:	2000115c 	.word	0x2000115c
 8002814:	20002400 	.word	0x20002400
 8002818:	08014ce4 	.word	0x08014ce4
 800281c:	200023f8 	.word	0x200023f8

08002820 <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <usblinkTask+0x3c>)
 800282a:	f7ff ff83 	bl	8002734 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <usblinkTask+0x3c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <usblinkTask+0x40>)
 8002838:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <usblinkTask+0x3c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	4908      	ldr	r1, [pc, #32]	; (8002864 <usblinkTask+0x44>)
 8002842:	4809      	ldr	r0, [pc, #36]	; (8002868 <usblinkTask+0x48>)
 8002844:	f010 fa99 	bl	8012d7a <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <usblinkTask+0x4c>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	2300      	movs	r3, #0
 800284e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002852:	4903      	ldr	r1, [pc, #12]	; (8002860 <usblinkTask+0x40>)
 8002854:	f00b fcc2 	bl	800e1dc <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 8002858:	e7e6      	b.n	8002828 <usblinkTask+0x8>
 800285a:	bf00      	nop
 800285c:	2000264c 	.word	0x2000264c
 8002860:	20002690 	.word	0x20002690
 8002864:	2000264d 	.word	0x2000264d
 8002868:	20002691 	.word	0x20002691
 800286c:	20002448 	.word	0x20002448

08002870 <usblinkInit>:
/*
 * Public functions
 */

void usblinkInit()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af04      	add	r7, sp, #16
  if(isInit)
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <usblinkInit+0x64>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d126      	bne.n	80028cc <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 800287e:	f7ff ff89 	bl	8002794 <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8002882:	2310      	movs	r3, #16
 8002884:	4618      	mov	r0, r3
 8002886:	2320      	movs	r3, #32
 8002888:	4619      	mov	r1, r3
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <usblinkInit+0x68>)
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <usblinkInit+0x6c>)
 8002892:	f00b fb8d 	bl	800dfb0 <xQueueGenericCreateStatic>
 8002896:	4603      	mov	r3, r0
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <usblinkInit+0x70>)
 800289a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <usblinkInit+0x70>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <usblinkInit+0x74>)
 80028a2:	4911      	ldr	r1, [pc, #68]	; (80028e8 <usblinkInit+0x78>)
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 ff6d 	bl	8003784 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <usblinkInit+0x7c>)
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <usblinkInit+0x80>)
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	2303      	movs	r3, #3
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	490d      	ldr	r1, [pc, #52]	; (80028f4 <usblinkInit+0x84>)
 80028be:	480e      	ldr	r0, [pc, #56]	; (80028f8 <usblinkInit+0x88>)
 80028c0:	f00c faaa 	bl	800ee18 <xTaskCreateStatic>

  isInit = true;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <usblinkInit+0x64>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e000      	b.n	80028ce <usblinkInit+0x5e>
    return;
 80028cc:	bf00      	nop
}
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20002445 	.word	0x20002445
 80028d8:	200013f0 	.word	0x200013f0
 80028dc:	200011f0 	.word	0x200011f0
 80028e0:	20002448 	.word	0x20002448
 80028e4:	08014cf0 	.word	0x08014cf0
 80028e8:	08014d04 	.word	0x08014d04
 80028ec:	20001440 	.word	0x20001440
 80028f0:	2000244c 	.word	0x2000244c
 80028f4:	08014d24 	.word	0x08014d24
 80028f8:	08002821 	.word	0x08002821

080028fc <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af04      	add	r7, sp, #16
  if(isInit)
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <passthroughInit+0x8c>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d13b      	bne.n	8002982 <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 800290a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800290e:	4618      	mov	r0, r3
 8002910:	2301      	movs	r3, #1
 8002912:	4619      	mov	r1, r3
 8002914:	2300      	movs	r3, #0
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <passthroughInit+0x90>)
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <passthroughInit+0x94>)
 800291c:	f00b fb48 	bl	800dfb0 <xQueueGenericCreateStatic>
 8002920:	4603      	mov	r3, r0
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <passthroughInit+0x98>)
 8002924:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <passthroughInit+0x98>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <passthroughInit+0x9c>)
 800292c:	491b      	ldr	r1, [pc, #108]	; (800299c <passthroughInit+0xa0>)
 800292e:	4618      	mov	r0, r3
 8002930:	f000 ff28 	bl	8003784 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8002934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002938:	4618      	mov	r0, r3
 800293a:	2301      	movs	r3, #1
 800293c:	4619      	mov	r1, r3
 800293e:	2300      	movs	r3, #0
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <passthroughInit+0xa4>)
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <passthroughInit+0xa8>)
 8002946:	f00b fb33 	bl	800dfb0 <xQueueGenericCreateStatic>
 800294a:	4603      	mov	r3, r0
 800294c:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <passthroughInit+0xac>)
 800294e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <passthroughInit+0x98>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a10      	ldr	r2, [pc, #64]	; (8002998 <passthroughInit+0x9c>)
 8002956:	4911      	ldr	r1, [pc, #68]	; (800299c <passthroughInit+0xa0>)
 8002958:	4618      	mov	r0, r3
 800295a:	f000 ff13 	bl	8003784 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 800295e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002962:	461a      	mov	r2, r3
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <passthroughInit+0xb0>)
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <passthroughInit+0xb4>)
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	2305      	movs	r3, #5
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	4910      	ldr	r1, [pc, #64]	; (80029b4 <passthroughInit+0xb8>)
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <passthroughInit+0xbc>)
 8002976:	f00c fa4f 	bl	800ee18 <xTaskCreateStatic>
 800297a:	4603      	mov	r3, r0
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <passthroughInit+0xc0>)
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e000      	b.n	8002984 <passthroughInit+0x88>
    return;
 8002982:	bf00      	nop
}
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20002ab4 	.word	0x20002ab4
 800298c:	200017b0 	.word	0x200017b0
 8002990:	200015b0 	.word	0x200015b0
 8002994:	20002ab8 	.word	0x20002ab8
 8002998:	08014d2c 	.word	0x08014d2c
 800299c:	08014d38 	.word	0x08014d38
 80029a0:	20001a00 	.word	0x20001a00
 80029a4:	20001800 	.word	0x20001800
 80029a8:	20002abc 	.word	0x20002abc
 80029ac:	200014f8 	.word	0x200014f8
 80029b0:	200026b4 	.word	0x200026b4
 80029b4:	08014d64 	.word	0x08014d64
 80029b8:	080029c1 	.word	0x080029c1
 80029bc:	200026b0 	.word	0x200026b0

080029c0 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 80029c8:	f7ff fd86 	bl	80024d8 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029d0:	2001      	movs	r0, #1
 80029d2:	f00d fc49 	bl	8010268 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 80029d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029da:	2000      	movs	r0, #0
 80029dc:	f00d fc90 	bl	8010300 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80029e0:	e7f4      	b.n	80029cc <passthroughTask+0xc>

080029e2 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f8a2 	bl	8002b38 <platformGetListOfConfigurations>
 80029f4:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4619      	mov	r1, r3
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 f854 	bl	8002aa8 <platformInitConfiguration>
 8002a00:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b30      	cmp	r3, #48	; 0x30
 8002a26:	d104      	bne.n	8002a32 <platformParseDeviceTypeString+0x1c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b3b      	cmp	r3, #59	; 0x3b
 8002a30:	d001      	beq.n	8002a36 <platformParseDeviceTypeString+0x20>
    return 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e034      	b.n	8002aa0 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8002a36:	2302      	movs	r3, #2
 8002a38:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	e00e      	b.n	8002a68 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <platformParseDeviceTypeString+0x5a>
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b3b      	cmp	r3, #59	; 0x3b
 8002a60:	d006      	beq.n	8002a70 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3301      	adds	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	ddec      	ble.n	8002a4a <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dd01      	ble.n	8002a7c <platformParseDeviceTypeString+0x66>
    return 1;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e011      	b.n	8002aa0 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f010 f973 	bl	8012d7a <memcpy>
  deviceType[length] = '\0';
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
  return 0;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b090      	sub	sp, #64	; 0x40
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f85e 	bl	8002b78 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8002abc:	f107 020c 	add.w	r2, r7, #12
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ffa5 	bl	8002a16 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8002acc:	2300      	movs	r3, #0
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad0:	e01a      	b.n	8002b08 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8002ad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	f107 020c 	add.w	r2, r7, #12
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fb6f 	bl	80001d0 <strcmp>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d104      	bne.n	8002b02 <platformInitConfiguration+0x5a>
      active_config = config;
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <platformInitConfiguration+0x74>)
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	6013      	str	r3, [r2, #0]
      return 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	e007      	b.n	8002b12 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8002b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b04:	3301      	adds	r3, #1
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dbe0      	blt.n	8002ad2 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3740      	adds	r7, #64	; 0x40
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20002ac0 	.word	0x20002ac0

08002b20 <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <platformConfigGetDeviceTypeName+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3305      	adds	r3, #5
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	20002ac0 	.word	0x20002ac0

08002b38 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2203      	movs	r2, #3
 8002b44:	601a      	str	r2, [r3, #0]
  return configs;
 8002b46:	4b03      	ldr	r3, [pc, #12]	; (8002b54 <platformGetListOfConfigurations+0x1c>)
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	20000268 	.word	0x20000268

08002b58 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002b66:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8002b6a:	015b      	lsls	r3, r3, #5
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	e00d      	b.n	8002ba6 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8002b8a:	6938      	ldr	r0, [r7, #16]
 8002b8c:	f7ff ffe4 	bl	8002b58 <getAddressOfOtpMemoryBlock>
 8002b90:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	617b      	str	r3, [r7, #20]
      break;
 8002b9e:	e005      	b.n	8002bac <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	ddee      	ble.n	8002b8a <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <platformGetDeviceTypeString+0x42>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2bff      	cmp	r3, #255	; 0xff
 8002bb8:	d101      	bne.n	8002bbe <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <platformGetDeviceTypeString+0x60>)
 8002bbc:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	6979      	ldr	r1, [r7, #20]
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f00f fff8 	bl	8012bb8 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3320      	adds	r3, #32
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	08014e58 	.word	0x08014e58

08002bdc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002be0:	f3bf 8f4f 	dsb	sy
}
 8002be4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <__NVIC_SystemReset+0x24>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bee:	4904      	ldr	r1, [pc, #16]	; (8002c00 <__NVIC_SystemReset+0x24>)
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <__NVIC_SystemReset+0x28>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bf6:	f3bf 8f4f 	dsb	sy
}
 8002bfa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <__NVIC_SystemReset+0x20>
 8002c00:	e000ed00 	.word	0xe000ed00
 8002c04:	05fa0004 	.word	0x05fa0004

08002c08 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c26:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	68b8      	ldr	r0, [r7, #8]
 8002c2c:	f000 f810 	bl	8002c50 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8002c30:	f7fe febc 	bl	80019ac <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <assertFail+0x44>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8002c40:	f7ff ffcc 	bl	8002bdc <__NVIC_SystemReset>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	e000edf0 	.word	0xe000edf0

08002c50 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <storeAssertFileData+0x38>)
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <storeAssertFileData+0x3c>)
 8002c5e:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <storeAssertFileData+0x38>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <storeAssertFileData+0x38>)
 8002c68:	791a      	ldrb	r2, [r3, #4]
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <storeAssertFileData+0x40>)
 8002c6c:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8002c6e:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <storeAssertFileData+0x38>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <storeAssertFileData+0x38>)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	60d3      	str	r3, [r2, #12]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	20001c58 	.word	0x20001c58
 8002c8c:	2f8a001f 	.word	0x2f8a001f
 8002c90:	20002ac4 	.word	0x20002ac4

08002c94 <consoleInit>:

  return true;
}

void consoleInit()
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  if (isInit)
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <consoleInit+0x50>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d11f      	bne.n	8002ce0 <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <consoleInit+0x54>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <consoleInit+0x54>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 8002cac:	2203      	movs	r2, #3
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f00b f9e9 	bl	800e088 <xQueueGenericCreate>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <consoleInit+0x58>)
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <consoleInit+0x58>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <consoleInit+0x3e>
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <consoleInit+0x58>)
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f00b fa85 	bl	800e1dc <xQueueGenericSend>
  messageSendingIsPending = false;
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <consoleInit+0x5c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]

  isInit = true;
 8002cd8:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <consoleInit+0x50>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e000      	b.n	8002ce2 <consoleInit+0x4e>
    return;
 8002ce0:	bf00      	nop
}
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20002af0 	.word	0x20002af0
 8002ce8:	20002ac8 	.word	0x20002ac8
 8002cec:	20002aec 	.word	0x20002aec
 8002cf0:	20002ae8 	.word	0x20002ae8

08002cf4 <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
#endif
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <uartInit>:
			return -1;
		return len;
}


void uartInit(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af02      	add	r7, sp, #8
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 8002d0a:	2340      	movs	r3, #64	; 0x40
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	2301      	movs	r3, #1
 8002d10:	4619      	mov	r1, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <uartInit+0x2c>)
 8002d18:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <uartInit+0x30>)
 8002d1a:	f00b f949 	bl	800dfb0 <xQueueGenericCreateStatic>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <uartInit+0x34>)
 8002d22:	6013      	str	r3, [r2, #0]
    isInit = true;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <uartInit+0x38>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20001a90 	.word	0x20001a90
 8002d34:	20001a50 	.word	0x20001a50
 8002d38:	20002af4 	.word	0x20002af4
 8002d3c:	20002ba1 	.word	0x20002ba1

08002d40 <uartDmaInit>:



void uartDmaInit(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af02      	add	r7, sp, #8

  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8002d46:	2303      	movs	r3, #3
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <uartDmaInit+0x90>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2001      	movs	r0, #1
 8002d52:	f00b f92d 	bl	800dfb0 <xQueueGenericCreateStatic>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a1e      	ldr	r2, [pc, #120]	; (8002dd4 <uartDmaInit+0x94>)
 8002d5a:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <uartDmaInit+0x98>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2001      	movs	r0, #1
 8002d68:	f00b f922 	bl	800dfb0 <xQueueGenericCreateStatic>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <uartDmaInit+0x9c>)
 8002d70:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <uartDmaInit+0x9c>)
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	f00b fa2e 	bl	800e1dc <xQueueGenericSend>
  xSemaphoreGive(waitUntilSendDone);
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <uartDmaInit+0x94>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	2300      	movs	r3, #0
 8002d86:	2200      	movs	r2, #0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f00b fa27 	bl	800e1dc <xQueueGenericSend>

  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <uartDmaInit+0xa0>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <uartDmaInit+0xa0>)
 8002d98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <uartDmaInit+0xa0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
  HAL_DMA_Init(&hdma_usart6_tx);
 8002daa:	480e      	ldr	r0, [pc, #56]	; (8002de4 <uartDmaInit+0xa4>)
 8002dac:	f002 fdbc 	bl	8005928 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002db0:	2200      	movs	r2, #0
 8002db2:	2105      	movs	r1, #5
 8002db4:	2045      	movs	r0, #69	; 0x45
 8002db6:	f002 fd80 	bl	80058ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002dba:	2045      	movs	r0, #69	; 0x45
 8002dbc:	f002 fd99 	bl	80058f2 <HAL_NVIC_EnableIRQ>

  isUartDmaInitialized = true;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <uartDmaInit+0xa8>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]

}
 8002dc6:	bf00      	nop
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20002b50 	.word	0x20002b50
 8002dd4:	20002b4c 	.word	0x20002b4c
 8002dd8:	20002afc 	.word	0x20002afc
 8002ddc:	20002af8 	.word	0x20002af8
 8002de0:	40023800 	.word	0x40023800
 8002de4:	20003b38 	.word	0x20003b38
 8002de8:	20002ba0 	.word	0x20002ba0

08002dec <uartSendData>:




void uartSendData(uint32_t size, uint8_t* data)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for(i = 0; i < size; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e00f      	b.n	8002e1c <uartSendData+0x30>
  {
    while (!(USART6->SR & UART_FLAG_TXE));
 8002dfc:	bf00      	nop
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <uartSendData+0x48>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f9      	beq.n	8002dfe <uartSendData+0x12>
    USART6->DR = (data[i] & 0x00FF);
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <uartSendData+0x48>)
 8002e14:	605a      	str	r2, [r3, #4]
  for(i = 0; i < size; i++)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d3eb      	bcc.n	8002dfc <uartSendData+0x10>
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40011400 	.word	0x40011400

08002e38 <uartPutchar>:


int uartPutchar(int ch)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
    uartSendData(1, (uint8_t *)&ch);
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	2001      	movs	r0, #1
 8002e46:	f7ff ffd1 	bl	8002dec <uartSendData>
    return (unsigned char)ch;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	b2db      	uxtb	r3, r3
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <getIntLen>:

static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  int l = 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 8002e64:	e00a      	b.n	8002e7c <getIntLen+0x24>
  {
    l++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <getIntLen+0x38>)
 8002e70:	fb82 1203 	smull	r1, r2, r2, r3
 8002e74:	1092      	asrs	r2, r2, #2
 8002e76:	17db      	asrs	r3, r3, #31
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	607b      	str	r3, [r7, #4]
  while(value > 9)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b09      	cmp	r3, #9
 8002e80:	dcf1      	bgt.n	8002e66 <getIntLen+0xe>
  }
  return l;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	66666667 	.word	0x66666667

08002e94 <power>:

int power(int a, int b)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e007      	b.n	8002eb8 <power+0x24>
  {
    x *= a;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbf3      	blt.n	8002ea8 <power+0x14>
  }

  return x;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 8002ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 8002ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	d104      	bne.n	8002ef4 <itoa10Unsigned+0x24>
  {
    putcf('0');
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2030      	movs	r0, #48	; 0x30
 8002eee:	4798      	blx	r3
    return 1;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e057      	b.n	8002fa4 <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 8002ef4:	f04f 0201 	mov.w	r2, #1
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 8002f00:	e019      	b.n	8002f36 <itoa10Unsigned+0x66>
  {
    i *= 10L;
 8002f02:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002f06:	4642      	mov	r2, r8
 8002f08:	464b      	mov	r3, r9
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	0099      	lsls	r1, r3, #2
 8002f14:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f18:	0090      	lsls	r0, r2, #2
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	eb12 0408 	adds.w	r4, r2, r8
 8002f22:	eb43 0509 	adc.w	r5, r3, r9
 8002f26:	eb14 0a04 	adds.w	sl, r4, r4
 8002f2a:	eb45 0b05 	adc.w	fp, r5, r5
 8002f2e:	4654      	mov	r4, sl
 8002f30:	465d      	mov	r5, fp
 8002f32:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 8002f36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f3e:	f7fd fe93 	bl	8000c68 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	2a0a      	cmp	r2, #10
 8002f48:	f173 0300 	sbcs.w	r3, r3, #0
 8002f4c:	d2d9      	bcs.n	8002f02 <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 8002f4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f56:	f7fd fe87 	bl	8000c68 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 020a 	mov.w	r2, #10
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	f7fd fe7d 	bl	8000c68 <__aeabi_uldivmod>
 8002f6e:	4910      	ldr	r1, [pc, #64]	; (8002fb0 <itoa10Unsigned+0xe0>)
 8002f70:	188b      	adds	r3, r1, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4798      	blx	r3
    len++;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 8002f82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f86:	f04f 020a 	mov.w	r2, #10
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	f7fd fe6b 	bl	8000c68 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002f9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	d1d5      	bne.n	8002f4e <itoa10Unsigned+0x7e>

  return len;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3720      	adds	r7, #32
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fae:	bf00      	nop
 8002fb0:	0801640c 	.word	0x0801640c

08002fb4 <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (num == 0)
 8002fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	d104      	bne.n	8002fd6 <itoa10+0x22>
  {
    putcf('0');
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2030      	movs	r0, #48	; 0x30
 8002fd0:	4798      	blx	r3
    return 1;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e037      	b.n	8003046 <itoa10+0x92>
  }

  long long unsigned int n = num;
 8002fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fda:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 8002fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da0d      	bge.n	8003002 <itoa10+0x4e>
  {
    n = -num;
 8002fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fea:	2100      	movs	r1, #0
 8002fec:	4254      	negs	r4, r2
 8002fee:	eb61 0503 	sbc.w	r5, r1, r3
 8002ff2:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	202d      	movs	r0, #45	; 0x2d
 8002ffa:	4798      	blx	r3
    len++;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	3301      	adds	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  }

  int numLenght = getIntLen(num);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff ff27 	bl	8002e58 <getIntLen>
 800300a:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	429a      	cmp	r2, r3
 8003012:	da10      	bge.n	8003036 <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 8003014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 800301c:	e008      	b.n	8003030 <itoa10+0x7c>
    {
      putcf('0');
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2030      	movs	r0, #48	; 0x30
 8003022:	4798      	blx	r3
      len++;
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	3301      	adds	r3, #1
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
      fillWithZero--;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3b01      	subs	r3, #1
 800302e:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	dcf3      	bgt.n	800301e <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 8003036:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff ff48 	bl	8002ed0 <itoa10Unsigned>
 8003040:	4602      	mov	r2, r0
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	4413      	add	r3, r2
}
 8003046:	4618      	mov	r0, r3
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003050 <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 8003050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003054:	b08d      	sub	sp, #52	; 0x34
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool foundFirst = false;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (int i = 15; i >= 0; i--)
 8003068:	230f      	movs	r3, #15
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
 800306c:	e059      	b.n	8003122 <itoa16+0xd2>
  {
    int shift = i * 4;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 8003074:	f04f 020f 	mov.w	r2, #15
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	f1a1 0620 	sub.w	r6, r1, #32
 8003082:	f1c1 0020 	rsb	r0, r1, #32
 8003086:	fa03 f501 	lsl.w	r5, r3, r1
 800308a:	fa02 f606 	lsl.w	r6, r2, r6
 800308e:	4335      	orrs	r5, r6
 8003090:	fa22 f000 	lsr.w	r0, r2, r0
 8003094:	4305      	orrs	r5, r0
 8003096:	fa02 f401 	lsl.w	r4, r2, r1
 800309a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 800309e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a6:	ea00 0a02 	and.w	sl, r0, r2
 80030aa:	ea01 0b03 	and.w	fp, r1, r3
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f1c3 0120 	rsb	r1, r3, #32
 80030b4:	f1a3 0220 	sub.w	r2, r3, #32
 80030b8:	fa2a f803 	lsr.w	r8, sl, r3
 80030bc:	fa0b f101 	lsl.w	r1, fp, r1
 80030c0:	ea48 0801 	orr.w	r8, r8, r1
 80030c4:	fa2b f202 	lsr.w	r2, fp, r2
 80030c8:	ea48 0802 	orr.w	r8, r8, r2
 80030cc:	fa2b f903 	lsr.w	r9, fp, r3
 80030d0:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 80030d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	d002      	beq.n	80030e2 <itoa16+0x92>
    {
      foundFirst = true;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    if (foundFirst || i < width)
 80030e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <itoa16+0xa2>
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ee:	429a      	cmp	r2, r3
 80030f0:	da14      	bge.n	800311c <itoa16+0xcc>
    {
      if (foundFirst)
 80030f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <itoa16+0xbc>
      {
        putcf(digit[val]);
 80030fa:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <itoa16+0xe4>)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4610      	mov	r0, r2
 8003108:	4798      	blx	r3
 800310a:	e004      	b.n	8003116 <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 800310c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4610      	mov	r0, r2
 8003114:	4798      	blx	r3
      }

      len++;
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	3301      	adds	r3, #1
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 15; i >= 0; i--)
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	3b01      	subs	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	daa2      	bge.n	800306e <itoa16+0x1e>
    }
  }

  return len;
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800312a:	4618      	mov	r0, r3
 800312c:	3734      	adds	r7, #52	; 0x34
 800312e:	46bd      	mov	sp, r7
 8003130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003134:	0801640c 	.word	0x0801640c

08003138 <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	6011      	str	r1, [r2, #0]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3b58      	subs	r3, #88	; 0x58
 8003158:	2b20      	cmp	r3, #32
 800315a:	d861      	bhi.n	8003220 <handleLongLong+0xe8>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <handleLongLong+0x2c>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003209 	.word	0x08003209
 8003168:	08003221 	.word	0x08003221
 800316c:	08003221 	.word	0x08003221
 8003170:	08003221 	.word	0x08003221
 8003174:	08003221 	.word	0x08003221
 8003178:	08003221 	.word	0x08003221
 800317c:	08003221 	.word	0x08003221
 8003180:	08003221 	.word	0x08003221
 8003184:	08003221 	.word	0x08003221
 8003188:	08003221 	.word	0x08003221
 800318c:	08003221 	.word	0x08003221
 8003190:	08003221 	.word	0x08003221
 8003194:	080031e9 	.word	0x080031e9
 8003198:	08003221 	.word	0x08003221
 800319c:	08003221 	.word	0x08003221
 80031a0:	08003221 	.word	0x08003221
 80031a4:	08003221 	.word	0x08003221
 80031a8:	080031e9 	.word	0x080031e9
 80031ac:	08003221 	.word	0x08003221
 80031b0:	08003221 	.word	0x08003221
 80031b4:	08003221 	.word	0x08003221
 80031b8:	08003221 	.word	0x08003221
 80031bc:	08003221 	.word	0x08003221
 80031c0:	08003221 	.word	0x08003221
 80031c4:	08003221 	.word	0x08003221
 80031c8:	08003221 	.word	0x08003221
 80031cc:	08003221 	.word	0x08003221
 80031d0:	08003221 	.word	0x08003221
 80031d4:	08003221 	.word	0x08003221
 80031d8:	080031fb 	.word	0x080031fb
 80031dc:	08003221 	.word	0x08003221
 80031e0:	08003221 	.word	0x08003221
 80031e4:	08003209 	.word	0x08003209
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 80031e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031ec:	2100      	movs	r1, #0
 80031ee:	9100      	str	r1, [sp, #0]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fedf 	bl	8002fb4 <itoa10>
 80031f6:	6178      	str	r0, [r7, #20]
      break;
 80031f8:	e013      	b.n	8003222 <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80031fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fe66 	bl	8002ed0 <itoa10Unsigned>
 8003204:	6178      	str	r0, [r7, #20]
      break;
 8003206:	e00c      	b.n	8003222 <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 8003208:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff ff1a 	bl	8003050 <itoa16>
 800321c:	6178      	str	r0, [r7, #20]
      break;
 800321e:	e000      	b.n	8003222 <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 8003220:	bf00      	nop
  }

  return len;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b088      	sub	sp, #32
 8003232:	af02      	add	r7, sp, #8
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
  int len = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1c59      	adds	r1, r3, #1
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	6011      	str	r1, [r2, #0]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	3b58      	subs	r3, #88	; 0x58
 800324e:	2b20      	cmp	r3, #32
 8003250:	d86c      	bhi.n	800332c <handleLong+0x100>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <handleLong+0x2c>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	0800330d 	.word	0x0800330d
 800325c:	0800332d 	.word	0x0800332d
 8003260:	0800332d 	.word	0x0800332d
 8003264:	0800332d 	.word	0x0800332d
 8003268:	0800332d 	.word	0x0800332d
 800326c:	0800332d 	.word	0x0800332d
 8003270:	0800332d 	.word	0x0800332d
 8003274:	0800332d 	.word	0x0800332d
 8003278:	0800332d 	.word	0x0800332d
 800327c:	0800332d 	.word	0x0800332d
 8003280:	0800332d 	.word	0x0800332d
 8003284:	0800332d 	.word	0x0800332d
 8003288:	080032dd 	.word	0x080032dd
 800328c:	0800332d 	.word	0x0800332d
 8003290:	0800332d 	.word	0x0800332d
 8003294:	0800332d 	.word	0x0800332d
 8003298:	0800332d 	.word	0x0800332d
 800329c:	080032dd 	.word	0x080032dd
 80032a0:	0800332d 	.word	0x0800332d
 80032a4:	0800332d 	.word	0x0800332d
 80032a8:	0800332d 	.word	0x0800332d
 80032ac:	0800332d 	.word	0x0800332d
 80032b0:	0800332d 	.word	0x0800332d
 80032b4:	0800332d 	.word	0x0800332d
 80032b8:	0800332d 	.word	0x0800332d
 80032bc:	0800332d 	.word	0x0800332d
 80032c0:	0800332d 	.word	0x0800332d
 80032c4:	0800332d 	.word	0x0800332d
 80032c8:	0800332d 	.word	0x0800332d
 80032cc:	080032f7 	.word	0x080032f7
 80032d0:	0800332d 	.word	0x0800332d
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	0800330d 	.word	0x0800330d
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	17da      	asrs	r2, r3, #31
 80032e0:	469a      	mov	sl, r3
 80032e2:	4693      	mov	fp, r2
 80032e4:	2300      	movs	r3, #0
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4652      	mov	r2, sl
 80032ea:	465b      	mov	r3, fp
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff fe61 	bl	8002fb4 <itoa10>
 80032f2:	6178      	str	r0, [r7, #20]
      break;
 80032f4:	e01b      	b.n	800332e <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	4698      	mov	r8, r3
 80032fc:	4691      	mov	r9, r2
 80032fe:	4642      	mov	r2, r8
 8003300:	464b      	mov	r3, r9
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff fde4 	bl	8002ed0 <itoa10Unsigned>
 8003308:	6178      	str	r0, [r7, #20]
      break;
 800330a:	e010      	b.n	800332e <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	461c      	mov	r4, r3
 8003312:	4615      	mov	r5, r2
 8003314:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4622      	mov	r2, r4
 8003320:	462b      	mov	r3, r5
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fe94 	bl	8003050 <itoa16>
 8003328:	6178      	str	r0, [r7, #20]
      break;
 800332a:	e000      	b.n	800332e <handleLong+0x102>
    default:
      // Nothing here
      break;
 800332c:	bf00      	nop
  }

  return len;
 800332e:	697b      	ldr	r3, [r7, #20]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800333a:	bf00      	nop

0800333c <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 800333c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003340:	ed2d 8b02 	vpush	{d8}
 8003344:	b08e      	sub	sp, #56	; 0x38
 8003346:	af02      	add	r7, sp, #8
 8003348:	6178      	str	r0, [r7, #20]
 800334a:	6139      	str	r1, [r7, #16]
 800334c:	60fa      	str	r2, [r7, #12]
  int len=0;
 800334e:	2300      	movs	r3, #0
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 8003352:	e1ac      	b.n	80036ae <evprintf+0x372>
  {
    if (*fmt == '%')
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b25      	cmp	r3, #37	; 0x25
 800335a:	f040 819d 	bne.w	8003698 <evprintf+0x35c>
    {
      precision = 6;
 800335e:	2306      	movs	r3, #6
 8003360:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 8003362:	2320      	movs	r3, #32
 8003364:	76fb      	strb	r3, [r7, #27]
      width = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]

      fmt++;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	3301      	adds	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b25      	cmp	r3, #37	; 0x25
 8003376:	d110      	bne.n	800339a <evprintf+0x5e>
        putcf(*fmt++);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1c5a      	adds	r2, r3, #1
 800337c:	613a      	str	r2, [r7, #16]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	4610      	mov	r0, r2
 8003386:	4798      	blx	r3
        len++;
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	3301      	adds	r3, #1
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
        continue;
 800338e:	e18e      	b.n	80036ae <evprintf+0x372>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 8003390:	2330      	movs	r3, #48	; 0x30
 8003392:	76fb      	strb	r3, [r7, #27]
        fmt++;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3301      	adds	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b30      	cmp	r3, #48	; 0x30
 80033a0:	d0f6      	beq.n	8003390 <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 80033a2:	e00e      	b.n	80033c2 <evprintf+0x86>
			{
				width *= 10;
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	3b30      	subs	r3, #48	; 0x30
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	61fb      	str	r3, [r7, #28]
				fmt++;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	3301      	adds	r3, #1
 80033c0:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	4ab2      	ldr	r2, [pc, #712]	; (8003694 <evprintf+0x358>)
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e6      	bne.n	80033a4 <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 80033d6:	e017      	b.n	8003408 <evprintf+0xcc>
      {
        if (*fmt == '.')
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b2e      	cmp	r3, #46	; 0x2e
 80033de:	d113      	bne.n	8003408 <evprintf+0xcc>
        {
          fmt++;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	3301      	adds	r3, #1
 80033e4:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4aa9      	ldr	r2, [pc, #676]	; (8003694 <evprintf+0x358>)
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <evprintf+0xcc>
          {
            precision = *fmt - '0';
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	3b30      	subs	r3, #48	; 0x30
 8003400:	623b      	str	r3, [r7, #32]
            fmt++;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	3301      	adds	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4aa1      	ldr	r2, [pc, #644]	; (8003694 <evprintf+0x358>)
 8003410:	4413      	add	r3, r2
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0dd      	beq.n	80033d8 <evprintf+0x9c>
          }
        }
      }
      switch (*fmt++)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	613a      	str	r2, [r7, #16]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	3b58      	subs	r3, #88	; 0x58
 8003426:	2b20      	cmp	r3, #32
 8003428:	f200 8132 	bhi.w	8003690 <evprintf+0x354>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <evprintf+0xf8>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003501 	.word	0x08003501
 8003438:	08003691 	.word	0x08003691
 800343c:	08003691 	.word	0x08003691
 8003440:	08003691 	.word	0x08003691
 8003444:	08003691 	.word	0x08003691
 8003448:	08003691 	.word	0x08003691
 800344c:	08003691 	.word	0x08003691
 8003450:	08003691 	.word	0x08003691
 8003454:	08003691 	.word	0x08003691
 8003458:	08003691 	.word	0x08003691
 800345c:	08003691 	.word	0x08003691
 8003460:	08003677 	.word	0x08003677
 8003464:	080034b9 	.word	0x080034b9
 8003468:	08003691 	.word	0x08003691
 800346c:	0800358b 	.word	0x0800358b
 8003470:	08003691 	.word	0x08003691
 8003474:	08003691 	.word	0x08003691
 8003478:	080034b9 	.word	0x080034b9
 800347c:	08003691 	.word	0x08003691
 8003480:	08003691 	.word	0x08003691
 8003484:	0800352b 	.word	0x0800352b
 8003488:	08003691 	.word	0x08003691
 800348c:	08003691 	.word	0x08003691
 8003490:	08003691 	.word	0x08003691
 8003494:	08003691 	.word	0x08003691
 8003498:	08003691 	.word	0x08003691
 800349c:	08003691 	.word	0x08003691
 80034a0:	0800364b 	.word	0x0800364b
 80034a4:	08003691 	.word	0x08003691
 80034a8:	080034df 	.word	0x080034df
 80034ac:	08003691 	.word	0x08003691
 80034b0:	08003691 	.word	0x08003691
 80034b4:	08003501 	.word	0x08003501
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1d1a      	adds	r2, r3, #4
 80034bc:	60fa      	str	r2, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	17da      	asrs	r2, r3, #31
 80034c2:	461c      	mov	r4, r3
 80034c4:	4615      	mov	r5, r2
 80034c6:	2300      	movs	r3, #0
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4622      	mov	r2, r4
 80034cc:	462b      	mov	r3, r5
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff fd70 	bl	8002fb4 <itoa10>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	4413      	add	r3, r2
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80034dc:	e0e7      	b.n	80036ae <evprintf+0x372>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1d1a      	adds	r2, r3, #4
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	4698      	mov	r8, r3
 80034ea:	4691      	mov	r9, r2
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	6978      	ldr	r0, [r7, #20]
 80034f2:	f7ff fced 	bl	8002ed0 <itoa10Unsigned>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	4413      	add	r3, r2
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80034fe:	e0d6      	b.n	80036ae <evprintf+0x372>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1d1a      	adds	r2, r3, #4
 8003504:	60fa      	str	r2, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	469a      	mov	sl, r3
 800350c:	4693      	mov	fp, r2
 800350e:	7efb      	ldrb	r3, [r7, #27]
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	4652      	mov	r2, sl
 8003518:	465b      	mov	r3, fp
 800351a:	6978      	ldr	r0, [r7, #20]
 800351c:	f7ff fd98 	bl	8003050 <itoa16>
 8003520:	4602      	mov	r2, r0
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	4413      	add	r3, r2
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8003528:	e0c1      	b.n	80036ae <evprintf+0x372>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b6c      	cmp	r3, #108	; 0x6c
 8003530:	d11a      	bne.n	8003568 <evprintf+0x22c>
            fmt++;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3301      	adds	r3, #1
 8003536:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3307      	adds	r3, #7
 800353c:	f023 0307 	bic.w	r3, r3, #7
 8003540:	f103 0208 	add.w	r2, r3, #8
 8003544:	60fa      	str	r2, [r7, #12]
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f107 0010 	add.w	r0, r7, #16
 800354e:	7ef9      	ldrb	r1, [r7, #27]
 8003550:	9101      	str	r1, [sp, #4]
 8003552:	69f9      	ldr	r1, [r7, #28]
 8003554:	9100      	str	r1, [sp, #0]
 8003556:	4601      	mov	r1, r0
 8003558:	6978      	ldr	r0, [r7, #20]
 800355a:	f7ff fded 	bl	8003138 <handleLongLong>
 800355e:	4602      	mov	r2, r0
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	4413      	add	r3, r2
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 8003566:	e0a2      	b.n	80036ae <evprintf+0x372>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1d1a      	adds	r2, r3, #4
 800356c:	60fa      	str	r2, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	f107 0110 	add.w	r1, r7, #16
 8003574:	7efb      	ldrb	r3, [r7, #27]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff fe56 	bl	800322c <handleLong>
 8003580:	4602      	mov	r2, r0
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	4413      	add	r3, r2
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8003588:	e091      	b.n	80036ae <evprintf+0x372>
        case 'f':
          num = va_arg(ap, double);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3307      	adds	r3, #7
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	f103 0208 	add.w	r2, r3, #8
 8003596:	60fa      	str	r2, [r7, #12]
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f7fd fb12 	bl	8000bc8 <__aeabi_d2f>
 80035a4:	4603      	mov	r3, r0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
          if(num<0)
 80035a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	d50b      	bpl.n	80035ce <evprintf+0x292>
          {
            putcf('-');
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	202d      	movs	r0, #45	; 0x2d
 80035ba:	4798      	blx	r3
            num = -num;
 80035bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035c0:	eef1 7a67 	vneg.f32	s15, s15
 80035c4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            len++;
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	3301      	adds	r3, #1
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 80035ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d6:	ee17 2a90 	vmov	r2, s15
 80035da:	17d3      	asrs	r3, r2, #31
 80035dc:	603a      	str	r2, [r7, #0]
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035e8:	6978      	ldr	r0, [r7, #20]
 80035ea:	f7ff fce3 	bl	8002fb4 <itoa10>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f2:	4413      	add	r3, r2
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          putcf('.'); len++;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	202e      	movs	r0, #46	; 0x2e
 80035fa:	4798      	blx	r3
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	3301      	adds	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 8003602:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800360a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003612:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003616:	6a39      	ldr	r1, [r7, #32]
 8003618:	200a      	movs	r0, #10
 800361a:	f7ff fc3b 	bl	8002e94 <power>
 800361e:	ee07 0a90 	vmov	s15, r0
 8003622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003626:	ee68 7a27 	vmul.f32	s15, s16, s15
 800362a:	ee17 0a90 	vmov	r0, s15
 800362e:	f7fd fb33 	bl	8000c98 <__aeabi_f2lz>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	6a39      	ldr	r1, [r7, #32]
 8003638:	9100      	str	r1, [sp, #0]
 800363a:	6978      	ldr	r0, [r7, #20]
 800363c:	f7ff fcba 	bl	8002fb4 <itoa10>
 8003640:	4602      	mov	r2, r0
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	4413      	add	r3, r2
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8003648:	e031      	b.n	80036ae <evprintf+0x372>
        case 's':
          str = va_arg(ap, char* );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1d1a      	adds	r2, r3, #4
 800364e:	60fa      	str	r2, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
          while(*str)
 8003654:	e00a      	b.n	800366c <evprintf+0x330>
          {
            putcf(*str++);
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	627a      	str	r2, [r7, #36]	; 0x24
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4610      	mov	r0, r2
 8003664:	4798      	blx	r3
            len++;
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	3301      	adds	r3, #1
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
          while(*str)
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <evprintf+0x31a>
          }
          break;
 8003674:	e01b      	b.n	80036ae <evprintf+0x372>
        case 'c':
          putcf((char)va_arg(ap, int));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1d1a      	adds	r2, r3, #4
 800367a:	60fa      	str	r2, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4610      	mov	r0, r2
 8003686:	4798      	blx	r3
          len++;
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	3301      	adds	r3, #1
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 800368e:	e00e      	b.n	80036ae <evprintf+0x372>
        default:
          break;
 8003690:	bf00      	nop
 8003692:	e00c      	b.n	80036ae <evprintf+0x372>
 8003694:	08016440 	.word	0x08016440
      }
    }
    else
    {
      putcf(*fmt++);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	613a      	str	r2, [r7, #16]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	4610      	mov	r0, r2
 80036a6:	4798      	blx	r3
      len++;
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	3301      	adds	r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (*fmt)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f47f ae4e 	bne.w	8003354 <evprintf+0x18>
    }
  }
  
  return len;
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3730      	adds	r7, #48	; 0x30
 80036be:	46bd      	mov	sp, r7
 80036c0:	ecbd 8b02 	vpop	{d8}
 80036c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036c8 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 80036c8:	b40e      	push	{r1, r2, r3}
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	69f9      	ldr	r1, [r7, #28]
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fe2d 	bl	800333c <evprintf>
 80036e2:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 80036e4:	68fb      	ldr	r3, [r7, #12]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f0:	b003      	add	sp, #12
 80036f2:	4770      	bx	lr

080036f4 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 80036fa:	4b19      	ldr	r3, [pc, #100]	; (8003760 <queueMonitorInit+0x6c>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <queueMonitorInit+0x1e>
 8003708:	2248      	movs	r2, #72	; 0x48
 800370a:	4916      	ldr	r1, [pc, #88]	; (8003764 <queueMonitorInit+0x70>)
 800370c:	4816      	ldr	r0, [pc, #88]	; (8003768 <queueMonitorInit+0x74>)
 800370e:	f7ff fa7b 	bl	8002c08 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <queueMonitorInit+0x78>)
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	4b16      	ldr	r3, [pc, #88]	; (8003770 <queueMonitorInit+0x7c>)
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2300      	movs	r3, #0
 800371c:	2201      	movs	r2, #1
 800371e:	f242 7110 	movw	r1, #10000	; 0x2710
 8003722:	4814      	ldr	r0, [pc, #80]	; (8003774 <queueMonitorInit+0x80>)
 8003724:	f00c febe 	bl	80104a4 <xTimerCreateStatic>
 8003728:	4603      	mov	r3, r0
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <queueMonitorInit+0x84>)
 800372c:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 800372e:	4b12      	ldr	r3, [pc, #72]	; (8003778 <queueMonitorInit+0x84>)
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	f00b fee7 	bl	800f504 <xTaskGetTickCount>
 8003736:	4602      	mov	r2, r0
 8003738:	2364      	movs	r3, #100	; 0x64
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2300      	movs	r3, #0
 800373e:	2101      	movs	r1, #1
 8003740:	4620      	mov	r0, r4
 8003742:	f00c ff23 	bl	801058c <xTimerGenericCommand>

  data[0].fileName = "Na";
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <queueMonitorInit+0x88>)
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <queueMonitorInit+0x8c>)
 800374a:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <queueMonitorInit+0x88>)
 800374e:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <queueMonitorInit+0x8c>)
 8003750:	605a      	str	r2, [r3, #4]

  initialized = true;
 8003752:	4b03      	ldr	r3, [pc, #12]	; (8003760 <queueMonitorInit+0x6c>)
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	3704      	adds	r7, #4
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}
 8003760:	20002d64 	.word	0x20002d64
 8003764:	08014e60 	.word	0x08014e60
 8003768:	08014e84 	.word	0x08014e84
 800376c:	20002d38 	.word	0x20002d38
 8003770:	08003921 	.word	0x08003921
 8003774:	08014e94 	.word	0x08014e94
 8003778:	20002d34 	.word	0x20002d34
 800377c:	20002ba4 	.word	0x20002ba4
 8003780:	08014ea8 	.word	0x08014ea8

08003784 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <qmRegisterQueue+0x70>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <qmRegisterQueue+0x1e>
 8003798:	2265      	movs	r2, #101	; 0x65
 800379a:	4917      	ldr	r1, [pc, #92]	; (80037f8 <qmRegisterQueue+0x74>)
 800379c:	4817      	ldr	r0, [pc, #92]	; (80037fc <qmRegisterQueue+0x78>)
 800379e:	f7ff fa33 	bl	8002c08 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <qmRegisterQueue+0x7c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b13      	cmp	r3, #19
 80037a8:	d904      	bls.n	80037b4 <qmRegisterQueue+0x30>
 80037aa:	2266      	movs	r2, #102	; 0x66
 80037ac:	4912      	ldr	r1, [pc, #72]	; (80037f8 <qmRegisterQueue+0x74>)
 80037ae:	4815      	ldr	r0, [pc, #84]	; (8003804 <qmRegisterQueue+0x80>)
 80037b0:	f7ff fa2a 	bl	8002c08 <assertFail>
  Data* queueData = &data[nrOfQueues];
 80037b4:	4b12      	ldr	r3, [pc, #72]	; (8003800 <qmRegisterQueue+0x7c>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <qmRegisterQueue+0x84>)
 80037c4:	4413      	add	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <qmRegisterQueue+0x7c>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f00b f988 	bl	800eaf0 <vQueueSetQueueNumber>

  nrOfQueues++;
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <qmRegisterQueue+0x7c>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <qmRegisterQueue+0x7c>)
 80037ea:	701a      	strb	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20002d64 	.word	0x20002d64
 80037f8:	08014e60 	.word	0x08014e60
 80037fc:	08014eac 	.word	0x08014eac
 8003800:	200002d7 	.word	0x200002d7
 8003804:	08014eb8 	.word	0x08014eb8
 8003808:	20002ba4 	.word	0x20002ba4

0800380c <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
  int i = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	e013      	b.n	8003844 <debugPrint+0x38>
    Data* queueData = &data[i];
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4a0d      	ldr	r2, [pc, #52]	; (800385c <debugPrint+0x50>)
 8003828:	4413      	add	r3, r2
 800382a:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f000 f819 	bl	8003864 <filter>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <debugPrint+0x32>
      debugPrintQueue(queueData);
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	f000 f827 	bl	800388c <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3301      	adds	r3, #1
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <debugPrint+0x54>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4293      	cmp	r3, r2
 800384e:	dbe5      	blt.n	800381c <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8003850:	f000 f838 	bl	80038c4 <resetCounters>
  }
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20002ba4 	.word	0x20002ba4
 8003860:	200002d7 	.word	0x200002d7

08003864 <filter>:

static bool filter(Data* queueData) {
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af02      	add	r7, sp, #8
 8003892:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6858      	ldr	r0, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689c      	ldr	r4, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6912      	ldr	r2, [r2, #16]
 80038a8:	9201      	str	r2, [sp, #4]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	4623      	mov	r3, r4
 80038ae:	4602      	mov	r2, r0
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <debugPrintQueue+0x34>)
 80038b2:	f00f f887 	bl	80129c4 <iprintf>
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	bf00      	nop
 80038c0:	08014ef4 	.word	0x08014ef4

080038c4 <resetCounters>:

static void resetCounters() {
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
  int i = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	e013      	b.n	80038fc <resetCounters+0x38>
    Data* queueData = &data[i];
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <resetCounters+0x54>)
 80038e0:	4413      	add	r3, r2
 80038e2:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2200      	movs	r2, #0
 80038ee:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3301      	adds	r3, #1
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <resetCounters+0x58>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4293      	cmp	r3, r2
 8003906:	dbe5      	blt.n	80038d4 <resetCounters+0x10>
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20002ba4 	.word	0x20002ba4
 800391c:	200002d7 	.word	0x200002d7

08003920 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  debugPrint();
 8003928:	f7ff ff70 	bl	800380c <debugPrint>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 800393a:	4b14      	ldr	r3, [pc, #80]	; (800398c <sysLoadInit+0x58>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	f083 0301 	eor.w	r3, r3, #1
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <sysLoadInit+0x1e>
 8003948:	223c      	movs	r2, #60	; 0x3c
 800394a:	4911      	ldr	r1, [pc, #68]	; (8003990 <sysLoadInit+0x5c>)
 800394c:	4811      	ldr	r0, [pc, #68]	; (8003994 <sysLoadInit+0x60>)
 800394e:	f7ff f95b 	bl	8002c08 <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <sysLoadInit+0x64>)
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <sysLoadInit+0x68>)
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2300      	movs	r3, #0
 800395c:	2201      	movs	r2, #1
 800395e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003962:	480f      	ldr	r0, [pc, #60]	; (80039a0 <sysLoadInit+0x6c>)
 8003964:	f00c fd9e 	bl	80104a4 <xTimerCreateStatic>
 8003968:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 800396a:	f00b fdcb 	bl	800f504 <xTaskGetTickCount>
 800396e:	4602      	mov	r2, r0
 8003970:	2364      	movs	r3, #100	; 0x64
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2300      	movs	r3, #0
 8003976:	2101      	movs	r1, #1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f00c fe07 	bl	801058c <xTimerGenericCommand>

  initialized = true;
 800397e:	4b03      	ldr	r3, [pc, #12]	; (800398c <sysLoadInit+0x58>)
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
}
 8003984:	bf00      	nop
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20002d65 	.word	0x20002d65
 8003990:	08014f1c 	.word	0x08014f1c
 8003994:	08014f38 	.word	0x08014f38
 8003998:	20002d70 	.word	0x20002d70
 800399c:	08003a25 	.word	0x08003a25
 80039a0:	08014f48 	.word	0x08014f48

080039a4 <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e00f      	b.n	80039d2 <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 80039b2:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <getPreviousTaskData+0x70>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d104      	bne.n	80039cc <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <getPreviousTaskData+0x70>)
 80039c8:	4413      	add	r3, r2
 80039ca:	e01f      	b.n	8003a0c <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <getPreviousTaskData+0x74>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	429a      	cmp	r2, r3
 80039da:	dbea      	blt.n	80039b2 <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 80039dc:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <getPreviousTaskData+0x74>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b1f      	cmp	r3, #31
 80039e2:	dd04      	ble.n	80039ee <getPreviousTaskData+0x4a>
 80039e4:	224e      	movs	r2, #78	; 0x4e
 80039e6:	490d      	ldr	r1, [pc, #52]	; (8003a1c <getPreviousTaskData+0x78>)
 80039e8:	480d      	ldr	r0, [pc, #52]	; (8003a20 <getPreviousTaskData+0x7c>)
 80039ea:	f7ff f90d 	bl	8002c08 <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <getPreviousTaskData+0x74>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <getPreviousTaskData+0x70>)
 80039f6:	4413      	add	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <getPreviousTaskData+0x74>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <getPreviousTaskData+0x74>)
 8003a08:	6013      	str	r3, [r2, #0]

  return result;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20001ae0 	.word	0x20001ae0
 8003a18:	20002d68 	.word	0x20002d68
 8003a1c:	08014f1c 	.word	0x08014f1c
 8003a20:	08014f5c 	.word	0x08014f5c

08003a24 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8003a2a:	af02      	add	r7, sp, #8
 8003a2c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003a30:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003a34:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 8003a36:	4b4e      	ldr	r3, [pc, #312]	; (8003b70 <timerHandler+0x14c>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8092 	beq.w	8003b64 <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 8003a40:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 8003a44:	f107 030c 	add.w	r3, r7, #12
 8003a48:	2120      	movs	r1, #32
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f00b fd6a 	bl	800f524 <uxTaskGetSystemState>
 8003a50:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 8003a54:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8003a58:	2b1f      	cmp	r3, #31
 8003a5a:	d904      	bls.n	8003a66 <timerHandler+0x42>
 8003a5c:	225d      	movs	r2, #93	; 0x5d
 8003a5e:	4945      	ldr	r1, [pc, #276]	; (8003b74 <timerHandler+0x150>)
 8003a60:	4845      	ldr	r0, [pc, #276]	; (8003b78 <timerHandler+0x154>)
 8003a62:	f7ff f8d1 	bl	8002c08 <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 8003a66:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <timerHandler+0x158>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 8003a74:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 8003a78:	f7fc fd54 	bl	8000524 <__aeabi_ui2d>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	f04f 0000 	mov.w	r0, #0
 8003a84:	493e      	ldr	r1, [pc, #248]	; (8003b80 <timerHandler+0x15c>)
 8003a86:	f7fc fef1 	bl	800086c <__aeabi_ddiv>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	f7fd f899 	bl	8000bc8 <__aeabi_d2f>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8003a9c:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 8003a9e:	4939      	ldr	r1, [pc, #228]	; (8003b84 <timerHandler+0x160>)
 8003aa0:	4839      	ldr	r0, [pc, #228]	; (8003b88 <timerHandler+0x164>)
 8003aa2:	f7ff fe11 	bl	80036c8 <eprintf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 8003aa6:	4939      	ldr	r1, [pc, #228]	; (8003b8c <timerHandler+0x168>)
 8003aa8:	4837      	ldr	r0, [pc, #220]	; (8003b88 <timerHandler+0x164>)
 8003aaa:	f7ff fe0d 	bl	80036c8 <eprintf>
    for (uint32_t i = 0; i < taskCount; i++) {
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8003ab4:	e049      	b.n	8003b4a <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 8003ab6:	f107 010c 	add.w	r1, r7, #12
 8003aba:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 8003acc:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff66 	bl	80039a4 <getPreviousTaskData>
 8003ad8:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 8003adc:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 8003ae6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8003afe:	ed93 7a00 	vldr	s14, [r3]
 8003b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b06:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003b0a:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 8003b0e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	f7fc fd28 	bl	8000568 <__aeabi_f2d>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8003b20:	8c09      	ldrh	r1, [r1, #32]
 8003b22:	4608      	mov	r0, r1
 8003b24:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 8003b28:	6849      	ldr	r1, [r1, #4]
 8003b2a:	9101      	str	r1, [sp, #4]
 8003b2c:	9000      	str	r0, [sp, #0]
 8003b2e:	4918      	ldr	r1, [pc, #96]	; (8003b90 <timerHandler+0x16c>)
 8003b30:	4815      	ldr	r0, [pc, #84]	; (8003b88 <timerHandler+0x164>)
 8003b32:	f7ff fdc9 	bl	80036c8 <eprintf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 8003b36:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8003b3a:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 8003b3e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 8003b40:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 8003b44:	3301      	adds	r3, #1
 8003b46:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8003b4a:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 8003b4e:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3af      	bcc.n	8003ab6 <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 8003b56:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <timerHandler+0x158>)
 8003b5c:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <timerHandler+0x14c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
  }
}
 8003b64:	bf00      	nop
 8003b66:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20002d66 	.word	0x20002d66
 8003b74:	08014f1c 	.word	0x08014f1c
 8003b78:	08014f7c 	.word	0x08014f7c
 8003b7c:	20002d6c 	.word	0x20002d6c
 8003b80:	40590000 	.word	0x40590000
 8003b84:	08014f98 	.word	0x08014f98
 8003b88:	08002e39 	.word	0x08002e39
 8003b8c:	08014fac 	.word	0x08014fac
 8003b90:	08014fcc 	.word	0x08014fcc

08003b94 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af02      	add	r7, sp, #8
  if (workerQueue)
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <workerInit+0x40>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d114      	bne.n	8003bcc <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	4619      	mov	r1, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <workerInit+0x44>)
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <workerInit+0x48>)
 8003bb2:	f00a f9fd 	bl	800dfb0 <xQueueGenericCreateStatic>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4a06      	ldr	r2, [pc, #24]	; (8003bd4 <workerInit+0x40>)
 8003bba:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <workerInit+0x40>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a07      	ldr	r2, [pc, #28]	; (8003be0 <workerInit+0x4c>)
 8003bc2:	4908      	ldr	r1, [pc, #32]	; (8003be4 <workerInit+0x50>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fddd 	bl	8003784 <qmRegisterQueue>
 8003bca:	e000      	b.n	8003bce <workerInit+0x3a>
    return;
 8003bcc:	bf00      	nop
}
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20002d9c 	.word	0x20002d9c
 8003bd8:	20001c08 	.word	0x20001c08
 8003bdc:	20001be0 	.word	0x20001be0
 8003be0:	0801506c 	.word	0x0801506c
 8003be4:	08015078 	.word	0x08015078

08003be8 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0

}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0
return 0;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4a06      	ldr	r2, [pc, #24]	; (8003c4c <vApplicationGetIdleTaskMemory+0x30>)
 8003c32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2280      	movs	r2, #128	; 0x80
 8003c38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20002da0 	.word	0x20002da0
 8003c4c:	20002e58 	.word	0x20002e58

08003c50 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <vApplicationGetTimerTaskMemory+0x2c>)
 8003c60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <vApplicationGetTimerTaskMemory+0x30>)
 8003c66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	20003058 	.word	0x20003058
 8003c80:	20003110 	.word	0x20003110

08003c84 <LL_SPI_SetStandard>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f023 0210 	bic.w	r2, r3, #16
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	605a      	str	r2, [r3, #4]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <LL_AHB1_GRP1_EnableClock>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb8:	4907      	ldr	r1, [pc, #28]	; (8003cd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cca:	68fb      	ldr	r3, [r7, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40023800 	.word	0x40023800

08003cdc <LL_APB2_GRP1_EnableClock>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003ce4:	4b08      	ldr	r3, [pc, #32]	; (8003d08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce8:	4907      	ldr	r1, [pc, #28]	; (8003d08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003cf0:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40023800 	.word	0x40023800

08003d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d0c:	b5b0      	push	{r4, r5, r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d12:	f001 f84f 	bl	8004db4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d16:	f000 f877 	bl	8003e08 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d1a:	f000 fad9 	bl	80042d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003d1e:	f000 faa7 	bl	8004270 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8003d22:	f000 fa7b 	bl	800421c <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8003d26:	f000 fa43 	bl	80041b0 <MX_TIM7_Init>
  MX_SPI1_Init();
 8003d2a:	f000 f979 	bl	8004020 <MX_SPI1_Init>
  MX_ADC1_Init();
 8003d2e:	f000 f8d3 	bl	8003ed8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003d32:	f000 f923 	bl	8003f7c <MX_ADC2_Init>
  MX_TIM3_Init();
 8003d36:	f000 f9c5 	bl	80040c4 <MX_TIM3_Init>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <main+0xd4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <main+0xd4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0220 	orr.w	r2, r2, #32
 8003d48:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8003d4a:	f000 fb4d 	bl	80043e8 <freertos_IntroTitle>



  check_enter_bootloader();
 8003d4e:	f7fd fccf 	bl	80016f0 <check_enter_bootloader>

  int err = platformInit();
 8003d52:	f7fe fe46 	bl	80029e2 <platformInit>
 8003d56:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d000      	beq.n	8003d60 <main+0x54>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 8003d5e:	e7fe      	b.n	8003d5e <main+0x52>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8003d60:	4820      	ldr	r0, [pc, #128]	; (8003de4 <main+0xd8>)
 8003d62:	f004 fad1 	bl	8008308 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <main+0xdc>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a20      	ldr	r2, [pc, #128]	; (8003dec <main+0xe0>)
 8003d6c:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1002 us
 8003d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d72:	f000 fbc7 	bl	8004504 <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <main+0xdc>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	; (8003df0 <main+0xe4>)
 8003d7c:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 8003d7e:	4819      	ldr	r0, [pc, #100]	; (8003de4 <main+0xd8>)
 8003d80:	f004 fb32 	bl	80083e8 <HAL_TIM_Base_Stop_IT>
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <main+0xe4>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <main+0xe0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003df4 <main+0xe8>
 8003d9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d9e:	ee16 0a90 	vmov	r0, s13
 8003da2:	f7fc fbe1 	bl	8000568 <__aeabi_f2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4913      	ldr	r1, [pc, #76]	; (8003df8 <main+0xec>)
 8003dac:	4813      	ldr	r0, [pc, #76]	; (8003dfc <main+0xf0>)
 8003dae:	f7ff fc8b 	bl	80036c8 <eprintf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 8003db2:	f7fe fb17 	bl	80023e4 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003db6:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <main+0xf4>)
 8003db8:	463c      	mov	r4, r7
 8003dba:	461d      	mov	r5, r3
 8003dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003dc8:	463b      	mov	r3, r7
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f009 ff6c 	bl	800dcaa <osThreadCreate>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <main+0xf8>)
 8003dd6:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003dd8:	f009 ff60 	bl	800dc9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <main+0xd0>
 8003dde:	bf00      	nop
 8003de0:	20003af0 	.word	0x20003af0
 8003de4:	20003aa8 	.word	0x20003aa8
 8003de8:	e0001000 	.word	0xe0001000
 8003dec:	20003b9c 	.word	0x20003b9c
 8003df0:	20003ba0 	.word	0x20003ba0
 8003df4:	42900000 	.word	0x42900000
 8003df8:	08015094 	.word	0x08015094
 8003dfc:	08002e39 	.word	0x08002e39
 8003e00:	080150b4 	.word	0x080150b4
 8003e04:	20003b98 	.word	0x20003b98

08003e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b094      	sub	sp, #80	; 0x50
 8003e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e0e:	f107 0320 	add.w	r3, r7, #32
 8003e12:	2230      	movs	r2, #48	; 0x30
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f00e fec6 	bl	8012ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <SystemClock_Config+0xc8>)
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <SystemClock_Config+0xc8>)
 8003e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <SystemClock_Config+0xc8>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	4b21      	ldr	r3, [pc, #132]	; (8003ed4 <SystemClock_Config+0xcc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a20      	ldr	r2, [pc, #128]	; (8003ed4 <SystemClock_Config+0xcc>)
 8003e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b1e      	ldr	r3, [pc, #120]	; (8003ed4 <SystemClock_Config+0xcc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e64:	2301      	movs	r3, #1
 8003e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e78:	2304      	movs	r3, #4
 8003e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003e7c:	2348      	movs	r3, #72	; 0x48
 8003e7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e80:	2302      	movs	r3, #2
 8003e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003e84:	2303      	movs	r3, #3
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e88:	f107 0320 	add.w	r3, r7, #32
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f003 fd53 	bl	8007938 <HAL_RCC_OscConfig>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e98:	f000 fb62 	bl	8004560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e9c:	230f      	movs	r3, #15
 8003e9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003eb2:	f107 030c 	add.w	r3, r7, #12
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 ffb5 	bl	8007e28 <HAL_RCC_ClockConfig>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003ec4:	f000 fb4c 	bl	8004560 <Error_Handler>
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3750      	adds	r7, #80	; 0x50
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40007000 	.word	0x40007000

08003ed8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ede:	463b      	mov	r3, r7
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003eec:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <MX_ADC1_Init+0x9c>)
 8003eee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003f02:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f18:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <MX_ADC1_Init+0xa0>)
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003f28:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f36:	480e      	ldr	r0, [pc, #56]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f38:	f000 ffd2 	bl	8004ee0 <HAL_ADC_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003f42:	f000 fb0d 	bl	8004560 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003f46:	230b      	movs	r3, #11
 8003f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f4e:	2307      	movs	r3, #7
 8003f50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f52:	463b      	mov	r3, r7
 8003f54:	4619      	mov	r1, r3
 8003f56:	4806      	ldr	r0, [pc, #24]	; (8003f70 <MX_ADC1_Init+0x98>)
 8003f58:	f001 f934 	bl	80051c4 <HAL_ADC_ConfigChannel>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003f62:	f000 fafd 	bl	8004560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20003910 	.word	0x20003910
 8003f74:	40012000 	.word	0x40012000
 8003f78:	0f000001 	.word	0x0f000001

08003f7c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f82:	463b      	mov	r3, r7
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <MX_ADC2_Init+0x98>)
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <MX_ADC2_Init+0x9c>)
 8003f92:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003f94:	4b1f      	ldr	r3, [pc, #124]	; (8004014 <MX_ADC2_Init+0x98>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <MX_ADC2_Init+0x98>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fbc:	4a17      	ldr	r2, [pc, #92]	; (800401c <MX_ADC2_Init+0xa0>)
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003fc6:	4b13      	ldr	r3, [pc, #76]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003fda:	480e      	ldr	r0, [pc, #56]	; (8004014 <MX_ADC2_Init+0x98>)
 8003fdc:	f000 ff80 	bl	8004ee0 <HAL_ADC_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8003fe6:	f000 fabb 	bl	8004560 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003fea:	230c      	movs	r3, #12
 8003fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003ff2:	2307      	movs	r3, #7
 8003ff4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ff6:	463b      	mov	r3, r7
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4806      	ldr	r0, [pc, #24]	; (8004014 <MX_ADC2_Init+0x98>)
 8003ffc:	f001 f8e2 	bl	80051c4 <HAL_ADC_ConfigChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8004006:	f000 faab 	bl	8004560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20003958 	.word	0x20003958
 8004018:	40012100 	.word	0x40012100
 800401c:	0f000001 	.word	0x0f000001

08004020 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b090      	sub	sp, #64	; 0x40
 8004024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004026:	f107 0318 	add.w	r3, r7, #24
 800402a:	2228      	movs	r2, #40	; 0x28
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f00e fdba 	bl	8012ba8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	463b      	mov	r3, r7
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	609a      	str	r2, [r3, #8]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	611a      	str	r2, [r3, #16]
 8004042:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004044:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004048:	f7ff fe48 	bl	8003cdc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800404c:	2001      	movs	r0, #1
 800404e:	f7ff fe2d 	bl	8003cac <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004052:	23e0      	movs	r3, #224	; 0xe0
 8004054:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004056:	2302      	movs	r3, #2
 8004058:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800405a:	2303      	movs	r3, #3
 800405c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004066:	2305      	movs	r3, #5
 8004068:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406a:	463b      	mov	r3, r7
 800406c:	4619      	mov	r1, r3
 800406e:	4813      	ldr	r0, [pc, #76]	; (80040bc <MX_SPI1_Init+0x9c>)
 8004070:	f006 fa3b 	bl	800a4ea <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004078:	f44f 7382 	mov.w	r3, #260	; 0x104
 800407c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8004082:	2302      	movs	r3, #2
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004086:	2301      	movs	r3, #1
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800408a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8004090:	2310      	movs	r3, #16
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004094:	2300      	movs	r3, #0
 8004096:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800409c:	230a      	movs	r3, #10
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80040a0:	f107 0318 	add.w	r3, r7, #24
 80040a4:	4619      	mov	r1, r3
 80040a6:	4806      	ldr	r0, [pc, #24]	; (80040c0 <MX_SPI1_Init+0xa0>)
 80040a8:	f006 fac3 	bl	800a632 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80040ac:	2100      	movs	r1, #0
 80040ae:	4804      	ldr	r0, [pc, #16]	; (80040c0 <MX_SPI1_Init+0xa0>)
 80040b0:	f7ff fde8 	bl	8003c84 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80040b4:	bf00      	nop
 80040b6:	3740      	adds	r7, #64	; 0x40
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40020000 	.word	0x40020000
 80040c0:	40013000 	.word	0x40013000

080040c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	; 0x38
 80040c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	605a      	str	r2, [r3, #4]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d8:	f107 0320 	add.w	r3, r7, #32
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	615a      	str	r2, [r3, #20]
 80040f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040f4:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <MX_TIM3_Init+0xe4>)
 80040f6:	4a2d      	ldr	r2, [pc, #180]	; (80041ac <MX_TIM3_Init+0xe8>)
 80040f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <MX_TIM3_Init+0xe4>)
 80040fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004100:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <MX_TIM3_Init+0xe4>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <MX_TIM3_Init+0xe4>)
 800410a:	2247      	movs	r2, #71	; 0x47
 800410c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <MX_TIM3_Init+0xe4>)
 8004110:	2200      	movs	r2, #0
 8004112:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004114:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <MX_TIM3_Init+0xe4>)
 8004116:	2200      	movs	r2, #0
 8004118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800411a:	4823      	ldr	r0, [pc, #140]	; (80041a8 <MX_TIM3_Init+0xe4>)
 800411c:	f004 f8a4 	bl	8008268 <HAL_TIM_Base_Init>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004126:	f000 fa1b 	bl	8004560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800412a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004134:	4619      	mov	r1, r3
 8004136:	481c      	ldr	r0, [pc, #112]	; (80041a8 <MX_TIM3_Init+0xe4>)
 8004138:	f004 fcc8 	bl	8008acc <HAL_TIM_ConfigClockSource>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004142:	f000 fa0d 	bl	8004560 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004146:	4818      	ldr	r0, [pc, #96]	; (80041a8 <MX_TIM3_Init+0xe4>)
 8004148:	f004 f97d 	bl	8008446 <HAL_TIM_PWM_Init>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004152:	f000 fa05 	bl	8004560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800415e:	f107 0320 	add.w	r3, r7, #32
 8004162:	4619      	mov	r1, r3
 8004164:	4810      	ldr	r0, [pc, #64]	; (80041a8 <MX_TIM3_Init+0xe4>)
 8004166:	f005 f8c7 	bl	80092f8 <HAL_TIMEx_MasterConfigSynchronization>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004170:	f000 f9f6 	bl	8004560 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004174:	2360      	movs	r3, #96	; 0x60
 8004176:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 8004178:	2324      	movs	r3, #36	; 0x24
 800417a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004184:	1d3b      	adds	r3, r7, #4
 8004186:	2200      	movs	r2, #0
 8004188:	4619      	mov	r1, r3
 800418a:	4807      	ldr	r0, [pc, #28]	; (80041a8 <MX_TIM3_Init+0xe4>)
 800418c:	f004 fbdc 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004196:	f000 f9e3 	bl	8004560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800419a:	4803      	ldr	r0, [pc, #12]	; (80041a8 <MX_TIM3_Init+0xe4>)
 800419c:	f000 fb34 	bl	8004808 <HAL_TIM_MspPostInit>

}
 80041a0:	bf00      	nop
 80041a2:	3738      	adds	r7, #56	; 0x38
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20003a60 	.word	0x20003a60
 80041ac:	40000400 	.word	0x40000400

080041b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b6:	463b      	mov	r3, r7
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <MX_TIM7_Init+0x64>)
 80041c0:	4a15      	ldr	r2, [pc, #84]	; (8004218 <MX_TIM7_Init+0x68>)
 80041c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <MX_TIM7_Init+0x64>)
 80041c6:	2247      	movs	r2, #71	; 0x47
 80041c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ca:	4b12      	ldr	r3, [pc, #72]	; (8004214 <MX_TIM7_Init+0x64>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80041d0:	4b10      	ldr	r3, [pc, #64]	; (8004214 <MX_TIM7_Init+0x64>)
 80041d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <MX_TIM7_Init+0x64>)
 80041da:	2200      	movs	r2, #0
 80041dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80041de:	480d      	ldr	r0, [pc, #52]	; (8004214 <MX_TIM7_Init+0x64>)
 80041e0:	f004 f842 	bl	8008268 <HAL_TIM_Base_Init>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80041ea:	f000 f9b9 	bl	8004560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80041f6:	463b      	mov	r3, r7
 80041f8:	4619      	mov	r1, r3
 80041fa:	4806      	ldr	r0, [pc, #24]	; (8004214 <MX_TIM7_Init+0x64>)
 80041fc:	f005 f87c 	bl	80092f8 <HAL_TIMEx_MasterConfigSynchronization>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8004206:	f000 f9ab 	bl	8004560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20003aa8 	.word	0x20003aa8
 8004218:	40001400 	.word	0x40001400

0800421c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004220:	4b11      	ldr	r3, [pc, #68]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 8004222:	4a12      	ldr	r2, [pc, #72]	; (800426c <MX_USART6_UART_Init+0x50>)
 8004224:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 8004228:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800422c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800422e:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 8004230:	2200      	movs	r2, #0
 8004232:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 8004236:	2200      	movs	r2, #0
 8004238:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 800423c:	2200      	movs	r2, #0
 800423e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 8004242:	220c      	movs	r2, #12
 8004244:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 8004248:	2200      	movs	r2, #0
 800424a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800424c:	4b06      	ldr	r3, [pc, #24]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 800424e:	2200      	movs	r2, #0
 8004250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004252:	4805      	ldr	r0, [pc, #20]	; (8004268 <MX_USART6_UART_Init+0x4c>)
 8004254:	f005 f8e0 	bl	8009418 <HAL_UART_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800425e:	f000 f97f 	bl	8004560 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20003af0 	.word	0x20003af0
 800426c:	40011400 	.word	0x40011400

08004270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <MX_DMA_Init+0x5c>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <MX_DMA_Init+0x5c>)
 8004280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <MX_DMA_Init+0x5c>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	2105      	movs	r1, #5
 8004296:	2038      	movs	r0, #56	; 0x38
 8004298:	f001 fb0f 	bl	80058ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800429c:	2038      	movs	r0, #56	; 0x38
 800429e:	f001 fb28 	bl	80058f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2105      	movs	r1, #5
 80042a6:	203a      	movs	r0, #58	; 0x3a
 80042a8:	f001 fb07 	bl	80058ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80042ac:	203a      	movs	r0, #58	; 0x3a
 80042ae:	f001 fb20 	bl	80058f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80042b2:	2200      	movs	r2, #0
 80042b4:	2105      	movs	r1, #5
 80042b6:	2045      	movs	r0, #69	; 0x45
 80042b8:	f001 faff 	bl	80058ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80042bc:	2045      	movs	r0, #69	; 0x45
 80042be:	f001 fb18 	bl	80058f2 <HAL_NVIC_EnableIRQ>

}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800

080042d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08a      	sub	sp, #40	; 0x28
 80042d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d6:	f107 0314 	add.w	r3, r7, #20
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	609a      	str	r2, [r3, #8]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <MX_GPIO_Init+0xf4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	4a35      	ldr	r2, [pc, #212]	; (80043c4 <MX_GPIO_Init+0xf4>)
 80042f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f4:	6313      	str	r3, [r2, #48]	; 0x30
 80042f6:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <MX_GPIO_Init+0xf4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	613b      	str	r3, [r7, #16]
 8004300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <MX_GPIO_Init+0xf4>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	4a2e      	ldr	r2, [pc, #184]	; (80043c4 <MX_GPIO_Init+0xf4>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6313      	str	r3, [r2, #48]	; 0x30
 8004312:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <MX_GPIO_Init+0xf4>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <MX_GPIO_Init+0xf4>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <MX_GPIO_Init+0xf4>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
 800432e:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <MX_GPIO_Init+0xf4>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <MX_GPIO_Init+0xf4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <MX_GPIO_Init+0xf4>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <MX_GPIO_Init+0xf4>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8004356:	2201      	movs	r2, #1
 8004358:	2110      	movs	r1, #16
 800435a:	481b      	ldr	r0, [pc, #108]	; (80043c8 <MX_GPIO_Init+0xf8>)
 800435c:	f002 f882 	bl	8006464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8004360:	2200      	movs	r2, #0
 8004362:	2120      	movs	r1, #32
 8004364:	4819      	ldr	r0, [pc, #100]	; (80043cc <MX_GPIO_Init+0xfc>)
 8004366:	f002 f87d 	bl	8006464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 800436a:	2310      	movs	r3, #16
 800436c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800436e:	2301      	movs	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004376:	2303      	movs	r3, #3
 8004378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	4619      	mov	r1, r3
 8004380:	4811      	ldr	r0, [pc, #68]	; (80043c8 <MX_GPIO_Init+0xf8>)
 8004382:	f001 fed3 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8004386:	2310      	movs	r3, #16
 8004388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800438a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800438e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	4619      	mov	r1, r3
 800439a:	480d      	ldr	r0, [pc, #52]	; (80043d0 <MX_GPIO_Init+0x100>)
 800439c:	f001 fec6 	bl	800612c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 80043a0:	2320      	movs	r3, #32
 80043a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a4:	2301      	movs	r3, #1
 80043a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4619      	mov	r1, r3
 80043b6:	4805      	ldr	r0, [pc, #20]	; (80043cc <MX_GPIO_Init+0xfc>)
 80043b8:	f001 feb8 	bl	800612c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80043bc:	bf00      	nop
 80043be:	3728      	adds	r7, #40	; 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40020000 	.word	0x40020000
 80043cc:	40020400 	.word	0x40020400
 80043d0:	40020800 	.word	0x40020800

080043d4 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 80043d8:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <OSVersion+0x10>)
}
 80043da:	4618      	mov	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	080150d0 	.word	0x080150d0

080043e8 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 80043ec:	492e      	ldr	r1, [pc, #184]	; (80044a8 <freertos_IntroTitle+0xc0>)
 80043ee:	482f      	ldr	r0, [pc, #188]	; (80044ac <freertos_IntroTitle+0xc4>)
 80043f0:	f7ff f96a 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 80043f4:	492e      	ldr	r1, [pc, #184]	; (80044b0 <freertos_IntroTitle+0xc8>)
 80043f6:	482d      	ldr	r0, [pc, #180]	; (80044ac <freertos_IntroTitle+0xc4>)
 80043f8:	f7ff f966 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 80043fc:	492d      	ldr	r1, [pc, #180]	; (80044b4 <freertos_IntroTitle+0xcc>)
 80043fe:	482b      	ldr	r0, [pc, #172]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004400:	f7ff f962 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8004404:	492c      	ldr	r1, [pc, #176]	; (80044b8 <freertos_IntroTitle+0xd0>)
 8004406:	4829      	ldr	r0, [pc, #164]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004408:	f7ff f95e 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 800440c:	492b      	ldr	r1, [pc, #172]	; (80044bc <freertos_IntroTitle+0xd4>)
 800440e:	4827      	ldr	r0, [pc, #156]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004410:	f7ff f95a 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8004414:	492a      	ldr	r1, [pc, #168]	; (80044c0 <freertos_IntroTitle+0xd8>)
 8004416:	4825      	ldr	r0, [pc, #148]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004418:	f7ff f956 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 800441c:	4929      	ldr	r1, [pc, #164]	; (80044c4 <freertos_IntroTitle+0xdc>)
 800441e:	4823      	ldr	r0, [pc, #140]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004420:	f7ff f952 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8004424:	4928      	ldr	r1, [pc, #160]	; (80044c8 <freertos_IntroTitle+0xe0>)
 8004426:	4821      	ldr	r0, [pc, #132]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004428:	f7ff f94e 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 800442c:	4927      	ldr	r1, [pc, #156]	; (80044cc <freertos_IntroTitle+0xe4>)
 800442e:	481f      	ldr	r0, [pc, #124]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004430:	f7ff f94a 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8004434:	4926      	ldr	r1, [pc, #152]	; (80044d0 <freertos_IntroTitle+0xe8>)
 8004436:	481d      	ldr	r0, [pc, #116]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004438:	f7ff f946 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 800443c:	4925      	ldr	r1, [pc, #148]	; (80044d4 <freertos_IntroTitle+0xec>)
 800443e:	481b      	ldr	r0, [pc, #108]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004440:	f7ff f942 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8004444:	4924      	ldr	r1, [pc, #144]	; (80044d8 <freertos_IntroTitle+0xf0>)
 8004446:	4819      	ldr	r0, [pc, #100]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004448:	f7ff f93e 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 800444c:	4923      	ldr	r1, [pc, #140]	; (80044dc <freertos_IntroTitle+0xf4>)
 800444e:	4817      	ldr	r0, [pc, #92]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004450:	f7ff f93a 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8004454:	4922      	ldr	r1, [pc, #136]	; (80044e0 <freertos_IntroTitle+0xf8>)
 8004456:	4815      	ldr	r0, [pc, #84]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004458:	f7ff f936 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 800445c:	4921      	ldr	r1, [pc, #132]	; (80044e4 <freertos_IntroTitle+0xfc>)
 800445e:	4813      	ldr	r0, [pc, #76]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004460:	f7ff f932 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8004464:	4920      	ldr	r1, [pc, #128]	; (80044e8 <freertos_IntroTitle+0x100>)
 8004466:	4811      	ldr	r0, [pc, #68]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004468:	f7ff f92e 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 800446c:	491f      	ldr	r1, [pc, #124]	; (80044ec <freertos_IntroTitle+0x104>)
 800446e:	480f      	ldr	r0, [pc, #60]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004470:	f7ff f92a 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8004474:	491e      	ldr	r1, [pc, #120]	; (80044f0 <freertos_IntroTitle+0x108>)
 8004476:	480d      	ldr	r0, [pc, #52]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004478:	f7ff f926 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800447c:	491d      	ldr	r1, [pc, #116]	; (80044f4 <freertos_IntroTitle+0x10c>)
 800447e:	480b      	ldr	r0, [pc, #44]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004480:	f7ff f922 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8004484:	f7ff ffa6 	bl	80043d4 <OSVersion>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	491a      	ldr	r1, [pc, #104]	; (80044f8 <freertos_IntroTitle+0x110>)
 800448e:	4807      	ldr	r0, [pc, #28]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004490:	f7ff f91a 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8004494:	4919      	ldr	r1, [pc, #100]	; (80044fc <freertos_IntroTitle+0x114>)
 8004496:	4805      	ldr	r0, [pc, #20]	; (80044ac <freertos_IntroTitle+0xc4>)
 8004498:	f7ff f916 	bl	80036c8 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800449c:	4918      	ldr	r1, [pc, #96]	; (8004500 <freertos_IntroTitle+0x118>)
 800449e:	4803      	ldr	r0, [pc, #12]	; (80044ac <freertos_IntroTitle+0xc4>)
 80044a0:	f7ff f912 	bl	80036c8 <eprintf>
}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	080150d8 	.word	0x080150d8
 80044ac:	08002e39 	.word	0x08002e39
 80044b0:	08015118 	.word	0x08015118
 80044b4:	0801516c 	.word	0x0801516c
 80044b8:	080151c0 	.word	0x080151c0
 80044bc:	08015214 	.word	0x08015214
 80044c0:	08015268 	.word	0x08015268
 80044c4:	080152bc 	.word	0x080152bc
 80044c8:	08015310 	.word	0x08015310
 80044cc:	08015364 	.word	0x08015364
 80044d0:	080153b8 	.word	0x080153b8
 80044d4:	0801540c 	.word	0x0801540c
 80044d8:	08015460 	.word	0x08015460
 80044dc:	080154b4 	.word	0x080154b4
 80044e0:	08015508 	.word	0x08015508
 80044e4:	0801555c 	.word	0x0801555c
 80044e8:	080155b0 	.word	0x080155b0
 80044ec:	08015604 	.word	0x08015604
 80044f0:	08015658 	.word	0x08015658
 80044f4:	080156a0 	.word	0x080156a0
 80044f8:	080156d0 	.word	0x080156d0
 80044fc:	08015714 	.word	0x08015714
 8004500:	08015740 	.word	0x08015740

08004504 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 800450e:	480a      	ldr	r0, [pc, #40]	; (8004538 <delay_us+0x34>)
 8004510:	f003 fefa 	bl	8008308 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8004514:	4b08      	ldr	r3, [pc, #32]	; (8004538 <delay_us+0x34>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 800451c:	bf00      	nop
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <delay_us+0x34>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	429a      	cmp	r2, r3
 8004528:	d3f9      	bcc.n	800451e <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 800452a:	4803      	ldr	r0, [pc, #12]	; (8004538 <delay_us+0x34>)
 800452c:	f003 ff5c 	bl	80083e8 <HAL_TIM_Base_Stop_IT>
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20003aa8 	.word	0x20003aa8

0800453c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004544:	f00c ff60 	bl	8011408 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <StartDefaultTask+0x1c>)
 800454a:	4804      	ldr	r0, [pc, #16]	; (800455c <StartDefaultTask+0x20>)
 800454c:	f7ff f8bc 	bl	80036c8 <eprintf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004550:	2001      	movs	r0, #1
 8004552:	f009 fbf7 	bl	800dd44 <osDelay>
 8004556:	e7fb      	b.n	8004550 <StartDefaultTask+0x14>
 8004558:	0801578c 	.word	0x0801578c
 800455c:	08002e39 	.word	0x08002e39

08004560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004564:	b672      	cpsid	i
}
 8004566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004568:	e7fe      	b.n	8004568 <Error_Handler+0x8>
	...

0800456c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <HAL_MspInit+0x64>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_MspInit+0x64>)
 800457c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004580:	6453      	str	r3, [r2, #68]	; 0x44
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <HAL_MspInit+0x64>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <HAL_MspInit+0x64>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a0e      	ldr	r2, [pc, #56]	; (80045d0 <HAL_MspInit+0x64>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
 800459e:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <HAL_MspInit+0x64>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045aa:	2200      	movs	r2, #0
 80045ac:	210f      	movs	r1, #15
 80045ae:	f06f 0001 	mvn.w	r0, #1
 80045b2:	f001 f982 	bl	80058ba <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2105      	movs	r1, #5
 80045ba:	2005      	movs	r0, #5
 80045bc:	f001 f97d 	bl	80058ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80045c0:	2005      	movs	r0, #5
 80045c2:	f001 f996 	bl	80058f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045c6:	bf00      	nop
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800

080045d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	; 0x30
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a5e      	ldr	r2, [pc, #376]	; (800476c <HAL_ADC_MspInit+0x198>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d158      	bne.n	80046a8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	4b5d      	ldr	r3, [pc, #372]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	4a5c      	ldr	r2, [pc, #368]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004604:	6453      	str	r3, [r2, #68]	; 0x44
 8004606:	4b5a      	ldr	r3, [pc, #360]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a55      	ldr	r2, [pc, #340]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 800462e:	2302      	movs	r3, #2
 8004630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004632:	2303      	movs	r3, #3
 8004634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 800463a:	f107 031c 	add.w	r3, r7, #28
 800463e:	4619      	mov	r1, r3
 8004640:	484c      	ldr	r0, [pc, #304]	; (8004774 <HAL_ADC_MspInit+0x1a0>)
 8004642:	f001 fd73 	bl	800612c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004646:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004648:	4a4c      	ldr	r2, [pc, #304]	; (800477c <HAL_ADC_MspInit+0x1a8>)
 800464a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800464c:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 800464e:	2200      	movs	r2, #0
 8004650:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004652:	4b49      	ldr	r3, [pc, #292]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004654:	2200      	movs	r2, #0
 8004656:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004658:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 800465a:	2200      	movs	r2, #0
 800465c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800465e:	4b46      	ldr	r3, [pc, #280]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004664:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800466c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800466e:	4b42      	ldr	r3, [pc, #264]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004674:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004676:	4b40      	ldr	r3, [pc, #256]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800467c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004680:	2200      	movs	r2, #0
 8004682:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004684:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 8004686:	2200      	movs	r2, #0
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800468a:	483b      	ldr	r0, [pc, #236]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 800468c:	f001 f94c 	bl	8005928 <HAL_DMA_Init>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004696:	f7ff ff63 	bl	8004560 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a36      	ldr	r2, [pc, #216]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
 80046a0:	4a35      	ldr	r2, [pc, #212]	; (8004778 <HAL_ADC_MspInit+0x1a4>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80046a6:	e05d      	b.n	8004764 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a34      	ldr	r2, [pc, #208]	; (8004780 <HAL_ADC_MspInit+0x1ac>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d158      	bne.n	8004764 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 80046bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046c0:	6453      	str	r3, [r2, #68]	; 0x44
 80046c2:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4b27      	ldr	r3, [pc, #156]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4a26      	ldr	r2, [pc, #152]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 80046d8:	f043 0304 	orr.w	r3, r3, #4
 80046dc:	6313      	str	r3, [r2, #48]	; 0x30
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_ADC_MspInit+0x19c>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 80046ea:	2304      	movs	r3, #4
 80046ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046ee:	2303      	movs	r3, #3
 80046f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 80046f6:	f107 031c 	add.w	r3, r7, #28
 80046fa:	4619      	mov	r1, r3
 80046fc:	481d      	ldr	r0, [pc, #116]	; (8004774 <HAL_ADC_MspInit+0x1a0>)
 80046fe:	f001 fd15 	bl	800612c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 8004704:	4a20      	ldr	r2, [pc, #128]	; (8004788 <HAL_ADC_MspInit+0x1b4>)
 8004706:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004708:	4b1e      	ldr	r3, [pc, #120]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 800470a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800470e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004710:	4b1c      	ldr	r3, [pc, #112]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004716:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 8004718:	2200      	movs	r2, #0
 800471a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 800471e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004722:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004724:	4b17      	ldr	r3, [pc, #92]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 8004726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800472a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800472c:	4b15      	ldr	r3, [pc, #84]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 800472e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004732:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004734:	4b13      	ldr	r3, [pc, #76]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 8004736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800473a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800473c:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 800473e:	2200      	movs	r2, #0
 8004740:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 8004744:	2200      	movs	r2, #0
 8004746:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004748:	480e      	ldr	r0, [pc, #56]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 800474a:	f001 f8ed 	bl	8005928 <HAL_DMA_Init>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8004754:	f7ff ff04 	bl	8004560 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 800475c:	639a      	str	r2, [r3, #56]	; 0x38
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_ADC_MspInit+0x1b0>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004764:	bf00      	nop
 8004766:	3730      	adds	r7, #48	; 0x30
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40012000 	.word	0x40012000
 8004770:	40023800 	.word	0x40023800
 8004774:	40020800 	.word	0x40020800
 8004778:	200039a0 	.word	0x200039a0
 800477c:	40026410 	.word	0x40026410
 8004780:	40012100 	.word	0x40012100
 8004784:	20003a00 	.word	0x20003a00
 8004788:	40026440 	.word	0x40026440

0800478c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_TIM_Base_MspInit+0x70>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d10e      	bne.n	80047bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4b17      	ldr	r3, [pc, #92]	; (8004800 <HAL_TIM_Base_MspInit+0x74>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a16      	ldr	r2, [pc, #88]	; (8004800 <HAL_TIM_Base_MspInit+0x74>)
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_TIM_Base_MspInit+0x74>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80047ba:	e01a      	b.n	80047f2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a10      	ldr	r2, [pc, #64]	; (8004804 <HAL_TIM_Base_MspInit+0x78>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d115      	bne.n	80047f2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <HAL_TIM_Base_MspInit+0x74>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <HAL_TIM_Base_MspInit+0x74>)
 80047d0:	f043 0320 	orr.w	r3, r3, #32
 80047d4:	6413      	str	r3, [r2, #64]	; 0x40
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <HAL_TIM_Base_MspInit+0x74>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80047e2:	2200      	movs	r2, #0
 80047e4:	2105      	movs	r1, #5
 80047e6:	2037      	movs	r0, #55	; 0x37
 80047e8:	f001 f867 	bl	80058ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80047ec:	2037      	movs	r0, #55	; 0x37
 80047ee:	f001 f880 	bl	80058f2 <HAL_NVIC_EnableIRQ>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40000400 	.word	0x40000400
 8004800:	40023800 	.word	0x40023800
 8004804:	40001400 	.word	0x40001400

08004808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a12      	ldr	r2, [pc, #72]	; (8004870 <HAL_TIM_MspPostInit+0x68>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d11d      	bne.n	8004866 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <HAL_TIM_MspPostInit+0x6c>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	4a10      	ldr	r2, [pc, #64]	; (8004874 <HAL_TIM_MspPostInit+0x6c>)
 8004834:	f043 0302 	orr.w	r3, r3, #2
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <HAL_TIM_MspPostInit+0x6c>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	60bb      	str	r3, [r7, #8]
 8004844:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 8004846:	2310      	movs	r3, #16
 8004848:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484a:	2302      	movs	r3, #2
 800484c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004852:	2300      	movs	r3, #0
 8004854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004856:	2302      	movs	r3, #2
 8004858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	4619      	mov	r1, r3
 8004860:	4805      	ldr	r0, [pc, #20]	; (8004878 <HAL_TIM_MspPostInit+0x70>)
 8004862:	f001 fc63 	bl	800612c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004866:	bf00      	nop
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40000400 	.word	0x40000400
 8004874:	40023800 	.word	0x40023800
 8004878:	40020400 	.word	0x40020400

0800487c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a34      	ldr	r2, [pc, #208]	; (800496c <HAL_UART_MspInit+0xf0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d161      	bne.n	8004962 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	4b33      	ldr	r3, [pc, #204]	; (8004970 <HAL_UART_MspInit+0xf4>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	4a32      	ldr	r2, [pc, #200]	; (8004970 <HAL_UART_MspInit+0xf4>)
 80048a8:	f043 0320 	orr.w	r3, r3, #32
 80048ac:	6453      	str	r3, [r2, #68]	; 0x44
 80048ae:	4b30      	ldr	r3, [pc, #192]	; (8004970 <HAL_UART_MspInit+0xf4>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4b2c      	ldr	r3, [pc, #176]	; (8004970 <HAL_UART_MspInit+0xf4>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <HAL_UART_MspInit+0xf4>)
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ca:	4b29      	ldr	r3, [pc, #164]	; (8004970 <HAL_UART_MspInit+0xf4>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 80048d6:	23c0      	movs	r3, #192	; 0xc0
 80048d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048da:	2302      	movs	r3, #2
 80048dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e2:	2303      	movs	r3, #3
 80048e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048e6:	2308      	movs	r3, #8
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ea:	f107 0314 	add.w	r3, r7, #20
 80048ee:	4619      	mov	r1, r3
 80048f0:	4820      	ldr	r0, [pc, #128]	; (8004974 <HAL_UART_MspInit+0xf8>)
 80048f2:	f001 fc1b 	bl	800612c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80048f6:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_UART_MspInit+0xfc>)
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <HAL_UART_MspInit+0x100>)
 80048fa:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80048fc:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_UART_MspInit+0xfc>)
 80048fe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004902:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_UART_MspInit+0xfc>)
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_UART_MspInit+0xfc>)
 800490c:	2200      	movs	r2, #0
 800490e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_UART_MspInit+0xfc>)
 8004912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004916:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_UART_MspInit+0xfc>)
 800491a:	2200      	movs	r2, #0
 800491c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_UART_MspInit+0xfc>)
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_UART_MspInit+0xfc>)
 8004926:	2200      	movs	r2, #0
 8004928:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <HAL_UART_MspInit+0xfc>)
 800492c:	2200      	movs	r2, #0
 800492e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <HAL_UART_MspInit+0xfc>)
 8004932:	2200      	movs	r2, #0
 8004934:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004936:	4810      	ldr	r0, [pc, #64]	; (8004978 <HAL_UART_MspInit+0xfc>)
 8004938:	f000 fff6 	bl	8005928 <HAL_DMA_Init>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004942:	f7ff fe0d 	bl	8004560 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_UART_MspInit+0xfc>)
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
 800494c:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <HAL_UART_MspInit+0xfc>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004952:	2200      	movs	r2, #0
 8004954:	2105      	movs	r1, #5
 8004956:	2047      	movs	r0, #71	; 0x47
 8004958:	f000 ffaf 	bl	80058ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800495c:	2047      	movs	r0, #71	; 0x47
 800495e:	f000 ffc8 	bl	80058f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004962:	bf00      	nop
 8004964:	3728      	adds	r7, #40	; 0x28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40011400 	.word	0x40011400
 8004970:	40023800 	.word	0x40023800
 8004974:	40020800 	.word	0x40020800
 8004978:	20003b38 	.word	0x20003b38
 800497c:	400264a0 	.word	0x400264a0

08004980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004984:	e7fe      	b.n	8004984 <NMI_Handler+0x4>

08004986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800498a:	e7fe      	b.n	800498a <HardFault_Handler+0x4>

0800498c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004990:	e7fe      	b.n	8004990 <MemManage_Handler+0x4>

08004992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004996:	e7fe      	b.n	8004996 <BusFault_Handler+0x4>

08004998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800499c:	e7fe      	b.n	800499c <UsageFault_Handler+0x4>

0800499e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <SysTick_Handler+0x2c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <SysTick_Handler+0x16>

		TimingDelay--;
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <SysTick_Handler+0x2c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <SysTick_Handler+0x2c>)
 80049c0:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049c2:	f000 fa49 	bl	8004e58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80049c6:	f00b fa9b 	bl	800ff00 <xTaskGetSchedulerState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80049d0:	f00c faba 	bl	8010f48 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049d4:	bf00      	nop
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20003ba8 	.word	0x20003ba8

080049dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80049f0:	4802      	ldr	r0, [pc, #8]	; (80049fc <TIM7_IRQHandler+0x10>)
 80049f2:	f003 feb9 	bl	8008768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20003aa8 	.word	0x20003aa8

08004a00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004a04:	4802      	ldr	r0, [pc, #8]	; (8004a10 <DMA2_Stream0_IRQHandler+0x10>)
 8004a06:	f001 f927 	bl	8005c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	200039a0 	.word	0x200039a0

08004a14 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004a18:	4802      	ldr	r0, [pc, #8]	; (8004a24 <DMA2_Stream2_IRQHandler+0x10>)
 8004a1a:	f001 f91d 	bl	8005c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	20003a00 	.word	0x20003a00

08004a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a2c:	4802      	ldr	r0, [pc, #8]	; (8004a38 <OTG_FS_IRQHandler+0x10>)
 8004a2e:	f001 fe76 	bl	800671e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20009114 	.word	0x20009114

08004a3c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
  xSemaphoreTakeFromISR(waitUntilSendDone, portMAX_DELAY);
 8004a42:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <DMA2_Stream6_IRQHandler+0xa8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f009 ffd5 	bl	800e9fc <xQueueReceiveFromISR>

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
  __HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <DMA2_Stream6_IRQHandler+0xac>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b23      	ldr	r3, [pc, #140]	; (8004aec <DMA2_Stream6_IRQHandler+0xb0>)
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d904      	bls.n	8004a6c <DMA2_Stream6_IRQHandler+0x30>
 8004a62:	4b23      	ldr	r3, [pc, #140]	; (8004af0 <DMA2_Stream6_IRQHandler+0xb4>)
 8004a64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	e019      	b.n	8004aa0 <DMA2_Stream6_IRQHandler+0x64>
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <DMA2_Stream6_IRQHandler+0xac>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <DMA2_Stream6_IRQHandler+0xb8>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d904      	bls.n	8004a82 <DMA2_Stream6_IRQHandler+0x46>
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <DMA2_Stream6_IRQHandler+0xb4>)
 8004a7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a7e:	6093      	str	r3, [r2, #8]
 8004a80:	e00e      	b.n	8004aa0 <DMA2_Stream6_IRQHandler+0x64>
 8004a82:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <DMA2_Stream6_IRQHandler+0xac>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <DMA2_Stream6_IRQHandler+0xbc>)
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d904      	bls.n	8004a98 <DMA2_Stream6_IRQHandler+0x5c>
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <DMA2_Stream6_IRQHandler+0xc0>)
 8004a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a94:	60d3      	str	r3, [r2, #12]
 8004a96:	e003      	b.n	8004aa0 <DMA2_Stream6_IRQHandler+0x64>
 8004a98:	4a18      	ldr	r2, [pc, #96]	; (8004afc <DMA2_Stream6_IRQHandler+0xc0>)
 8004a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a9e:	6093      	str	r3, [r2, #8]
  __HAL_DMA_DISABLE(&hdma_usart6_tx);
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <DMA2_Stream6_IRQHandler+0xac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <DMA2_Stream6_IRQHandler+0xac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
  xSemaphoreGiveFromISR(waitUntilSendDone, &xHigherPriorityTaskWoken);
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <DMA2_Stream6_IRQHandler+0xa8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	1d3a      	adds	r2, r7, #4
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f009 fd31 	bl	800e520 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <DMA2_Stream6_IRQHandler+0x98>
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <DMA2_Stream6_IRQHandler+0xc4>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004ad4:	4804      	ldr	r0, [pc, #16]	; (8004ae8 <DMA2_Stream6_IRQHandler+0xac>)
 8004ad6:	f001 f8bf 	bl	8005c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20002b4c 	.word	0x20002b4c
 8004ae8:	20003b38 	.word	0x20003b38
 8004aec:	40026458 	.word	0x40026458
 8004af0:	40026400 	.word	0x40026400
 8004af4:	400260b8 	.word	0x400260b8
 8004af8:	40026058 	.word	0x40026058
 8004afc:	40026000 	.word	0x40026000
 8004b00:	e000ed04 	.word	0xe000ed04

08004b04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <USART6_IRQHandler+0x7c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d12b      	bne.n	8004b70 <USART6_IRQHandler+0x6c>
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <USART6_IRQHandler+0x7c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d024      	beq.n	8004b70 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 8004b2a:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <USART6_IRQHandler+0x7c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <USART6_IRQHandler+0x80>)
 8004b34:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8004b36:	2300      	movs	r3, #0
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <USART6_IRQHandler+0x7c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <USART6_IRQHandler+0x7c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <USART6_IRQHandler+0x84>)
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	1d3a      	adds	r2, r7, #4
 8004b52:	2300      	movs	r3, #0
 8004b54:	490b      	ldr	r1, [pc, #44]	; (8004b84 <USART6_IRQHandler+0x80>)
 8004b56:	f009 fc4f 	bl	800e3f8 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <USART6_IRQHandler+0x6c>
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <USART6_IRQHandler+0x88>)
 8004b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004b70:	4803      	ldr	r0, [pc, #12]	; (8004b80 <USART6_IRQHandler+0x7c>)
 8004b72:	f004 fca1 	bl	80094b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20003af0 	.word	0x20003af0
 8004b84:	20003ba4 	.word	0x20003ba4
 8004b88:	20002af4 	.word	0x20002af4
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return 1;
 8004b94:	2301      	movs	r3, #1
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <_kill>:

int _kill(int pid, int sig)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004baa:	f00e f8b9 	bl	8012d20 <__errno>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2216      	movs	r2, #22
 8004bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <_exit>:

void _exit (int status)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ffe7 	bl	8004ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004bd2:	e7fe      	b.n	8004bd2 <_exit+0x12>

08004bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e00a      	b.n	8004bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004be6:	f3af 8000 	nop.w
 8004bea:	4601      	mov	r1, r0
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	60ba      	str	r2, [r7, #8]
 8004bf2:	b2ca      	uxtb	r2, r1
 8004bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	dbf0      	blt.n	8004be6 <_read+0x12>
  }

  return len;
 8004c04:	687b      	ldr	r3, [r7, #4]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e009      	b.n	8004c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	60ba      	str	r2, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	3301      	adds	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	dbf1      	blt.n	8004c20 <_write+0x12>
  }
  return len;
 8004c3c:	687b      	ldr	r3, [r7, #4]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <_close>:

int _close(int file)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <_isatty>:

int _isatty(int file)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c86:	2301      	movs	r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <_sbrk+0x5c>)
 8004cba:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <_sbrk+0x60>)
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <_sbrk+0x64>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <_sbrk+0x64>)
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <_sbrk+0x68>)
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <_sbrk+0x64>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d207      	bcs.n	8004cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ce0:	f00e f81e 	bl	8012d20 <__errno>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cee:	e009      	b.n	8004d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <_sbrk+0x64>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <_sbrk+0x64>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <_sbrk+0x64>)
 8004d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20020000 	.word	0x20020000
 8004d10:	00000400 	.word	0x00000400
 8004d14:	20003bac 	.word	0x20003bac
 8004d18:	20009968 	.word	0x20009968

08004d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <SystemInit+0x20>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <SystemInit+0x20>)
 8004d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8004d44:	202e      	movs	r0, #46	; 0x2e
 8004d46:	f00d fe4f 	bl	80129e8 <putchar>
 8004d4a:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <vApplicationIdleHook+0x1c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f00d fd61 	bl	8012818 <fflush>
}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	2000043c 	.word	0x2000043c

08004d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004d64:	f7ff ffda 	bl	8004d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d68:	480c      	ldr	r0, [pc, #48]	; (8004d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d6a:	490d      	ldr	r1, [pc, #52]	; (8004da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d70:	e002      	b.n	8004d78 <LoopCopyDataInit>

08004d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d76:	3304      	adds	r3, #4

08004d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d7c:	d3f9      	bcc.n	8004d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d80:	4c0a      	ldr	r4, [pc, #40]	; (8004dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d84:	e001      	b.n	8004d8a <LoopFillZerobss>

08004d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d88:	3204      	adds	r2, #4

08004d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d8c:	d3fb      	bcc.n	8004d86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004d8e:	f00d ffcd 	bl	8012d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d92:	f7fe ffbb 	bl	8003d0c <main>
  bx  lr    
 8004d96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004da0:	200005ac 	.word	0x200005ac
  ldr r2, =_sidata
 8004da4:	080167c4 	.word	0x080167c4
  ldr r2, =_sbss
 8004da8:	20001c80 	.word	0x20001c80
  ldr r4, =_ebss
 8004dac:	20009964 	.word	0x20009964

08004db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004db0:	e7fe      	b.n	8004db0 <ADC_IRQHandler>
	...

08004db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004db8:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <HAL_Init+0x40>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <HAL_Init+0x40>)
 8004dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_Init+0x40>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <HAL_Init+0x40>)
 8004dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <HAL_Init+0x40>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <HAL_Init+0x40>)
 8004dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ddc:	2003      	movs	r0, #3
 8004dde:	f000 fd61 	bl	80058a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004de2:	200f      	movs	r0, #15
 8004de4:	f000 f808 	bl	8004df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004de8:	f7ff fbc0 	bl	800456c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40023c00 	.word	0x40023c00

08004df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_InitTick+0x54>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_InitTick+0x58>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fd79 	bl	800590e <HAL_SYSTICK_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e00e      	b.n	8004e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b0f      	cmp	r3, #15
 8004e2a:	d80a      	bhi.n	8004e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e34:	f000 fd41 	bl	80058ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e38:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <HAL_InitTick+0x5c>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200002e4 	.word	0x200002e4
 8004e50:	200002ec 	.word	0x200002ec
 8004e54:	200002e8 	.word	0x200002e8

08004e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_IncTick+0x20>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	4b06      	ldr	r3, [pc, #24]	; (8004e7c <HAL_IncTick+0x24>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4413      	add	r3, r2
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <HAL_IncTick+0x24>)
 8004e6a:	6013      	str	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	200002ec 	.word	0x200002ec
 8004e7c:	20003bb0 	.word	0x20003bb0

08004e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return uwTick;
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <HAL_GetTick+0x14>)
 8004e86:	681b      	ldr	r3, [r3, #0]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20003bb0 	.word	0x20003bb0

08004e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ea0:	f7ff ffee 	bl	8004e80 <HAL_GetTick>
 8004ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eb0:	d005      	beq.n	8004ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <HAL_Delay+0x44>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ebe:	bf00      	nop
 8004ec0:	f7ff ffde 	bl	8004e80 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d8f7      	bhi.n	8004ec0 <HAL_Delay+0x28>
  {
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200002ec 	.word	0x200002ec

08004ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e033      	b.n	8004f5e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fb68 	bl	80045d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d118      	bne.n	8004f50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f26:	f023 0302 	bic.w	r3, r3, #2
 8004f2a:	f043 0202 	orr.w	r2, r3, #2
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fa68 	bl	8005408 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	f043 0201 	orr.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8004f4e:	e001      	b.n	8004f54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_Start_DMA+0x1e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0e9      	b.n	800515a <HAL_ADC_Start_DMA+0x1f2>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d018      	beq.n	8004fce <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fac:	4b6d      	ldr	r3, [pc, #436]	; (8005164 <HAL_ADC_Start_DMA+0x1fc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a6d      	ldr	r2, [pc, #436]	; (8005168 <HAL_ADC_Start_DMA+0x200>)
 8004fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb6:	0c9a      	lsrs	r2, r3, #18
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004fc0:	e002      	b.n	8004fc8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f9      	bne.n	8004fc2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fdc:	d107      	bne.n	8004fee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	f040 80a1 	bne.w	8005140 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005028:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503c:	d106      	bne.n	800504c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	f023 0206 	bic.w	r2, r3, #6
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	645a      	str	r2, [r3, #68]	; 0x44
 800504a:	e002      	b.n	8005052 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800505a:	4b44      	ldr	r3, [pc, #272]	; (800516c <HAL_ADC_Start_DMA+0x204>)
 800505c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	4a43      	ldr	r2, [pc, #268]	; (8005170 <HAL_ADC_Start_DMA+0x208>)
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	4a42      	ldr	r2, [pc, #264]	; (8005174 <HAL_ADC_Start_DMA+0x20c>)
 800506c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	4a41      	ldr	r2, [pc, #260]	; (8005178 <HAL_ADC_Start_DMA+0x210>)
 8005074:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800507e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800508e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	334c      	adds	r3, #76	; 0x4c
 80050aa:	4619      	mov	r1, r3
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f000 fce8 	bl	8005a84 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d12a      	bne.n	8005116 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2d      	ldr	r2, [pc, #180]	; (800517c <HAL_ADC_Start_DMA+0x214>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d015      	beq.n	80050f6 <HAL_ADC_Start_DMA+0x18e>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <HAL_ADC_Start_DMA+0x218>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d105      	bne.n	80050e0 <HAL_ADC_Start_DMA+0x178>
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_ADC_Start_DMA+0x204>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <HAL_ADC_Start_DMA+0x21c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d136      	bne.n	8005158 <HAL_ADC_Start_DMA+0x1f0>
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_ADC_Start_DMA+0x204>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d130      	bne.n	8005158 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d129      	bne.n	8005158 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	e020      	b.n	8005158 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_ADC_Start_DMA+0x214>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d11b      	bne.n	8005158 <HAL_ADC_Start_DMA+0x1f0>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d114      	bne.n	8005158 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	e00b      	b.n	8005158 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f043 0210 	orr.w	r2, r3, #16
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	f043 0201 	orr.w	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	200002e4 	.word	0x200002e4
 8005168:	431bde83 	.word	0x431bde83
 800516c:	40012300 	.word	0x40012300
 8005170:	08005601 	.word	0x08005601
 8005174:	080056bb 	.word	0x080056bb
 8005178:	080056d7 	.word	0x080056d7
 800517c:	40012000 	.word	0x40012000
 8005180:	40012100 	.word	0x40012100
 8005184:	40012200 	.word	0x40012200

08005188 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_ADC_ConfigChannel+0x1c>
 80051dc:	2302      	movs	r3, #2
 80051de:	e105      	b.n	80053ec <HAL_ADC_ConfigChannel+0x228>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	d925      	bls.n	800523c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68d9      	ldr	r1, [r3, #12]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	4613      	mov	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	4413      	add	r3, r2
 8005204:	3b1e      	subs	r3, #30
 8005206:	2207      	movs	r2, #7
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43da      	mvns	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	400a      	ands	r2, r1
 8005214:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68d9      	ldr	r1, [r3, #12]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	4618      	mov	r0, r3
 8005228:	4603      	mov	r3, r0
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4403      	add	r3, r0
 800522e:	3b1e      	subs	r3, #30
 8005230:	409a      	lsls	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e022      	b.n	8005282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6919      	ldr	r1, [r3, #16]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	b29b      	uxth	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	2207      	movs	r2, #7
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43da      	mvns	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	400a      	ands	r2, r1
 800525e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6919      	ldr	r1, [r3, #16]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	4618      	mov	r0, r3
 8005272:	4603      	mov	r3, r0
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4403      	add	r3, r0
 8005278:	409a      	lsls	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b06      	cmp	r3, #6
 8005288:	d824      	bhi.n	80052d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	3b05      	subs	r3, #5
 800529c:	221f      	movs	r2, #31
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43da      	mvns	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	400a      	ands	r2, r1
 80052aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4618      	mov	r0, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	3b05      	subs	r3, #5
 80052c6:	fa00 f203 	lsl.w	r2, r0, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	635a      	str	r2, [r3, #52]	; 0x34
 80052d2:	e04c      	b.n	800536e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b0c      	cmp	r3, #12
 80052da:	d824      	bhi.n	8005326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	3b23      	subs	r3, #35	; 0x23
 80052ee:	221f      	movs	r2, #31
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43da      	mvns	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	400a      	ands	r2, r1
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	4618      	mov	r0, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	3b23      	subs	r3, #35	; 0x23
 8005318:	fa00 f203 	lsl.w	r2, r0, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	631a      	str	r2, [r3, #48]	; 0x30
 8005324:	e023      	b.n	800536e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	3b41      	subs	r3, #65	; 0x41
 8005338:	221f      	movs	r2, #31
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	400a      	ands	r2, r1
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4618      	mov	r0, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	3b41      	subs	r3, #65	; 0x41
 8005362:	fa00 f203 	lsl.w	r2, r0, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <HAL_ADC_ConfigChannel+0x234>)
 8005370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a21      	ldr	r2, [pc, #132]	; (80053fc <HAL_ADC_ConfigChannel+0x238>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d109      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x1cc>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b12      	cmp	r3, #18
 8005382:	d105      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a19      	ldr	r2, [pc, #100]	; (80053fc <HAL_ADC_ConfigChannel+0x238>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d123      	bne.n	80053e2 <HAL_ADC_ConfigChannel+0x21e>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d003      	beq.n	80053aa <HAL_ADC_ConfigChannel+0x1e6>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b11      	cmp	r3, #17
 80053a8:	d11b      	bne.n	80053e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d111      	bne.n	80053e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_ADC_ConfigChannel+0x23c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <HAL_ADC_ConfigChannel+0x240>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	0c9a      	lsrs	r2, r3, #18
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053d4:	e002      	b.n	80053dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	3b01      	subs	r3, #1
 80053da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f9      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40012300 	.word	0x40012300
 80053fc:	40012000 	.word	0x40012000
 8005400:	200002e4 	.word	0x200002e4
 8005404:	431bde83 	.word	0x431bde83

08005408 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005410:	4b79      	ldr	r3, [pc, #484]	; (80055f8 <ADC_Init+0x1f0>)
 8005412:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800543c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6859      	ldr	r1, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	021a      	lsls	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6859      	ldr	r1, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6899      	ldr	r1, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	4a58      	ldr	r2, [pc, #352]	; (80055fc <ADC_Init+0x1f4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d022      	beq.n	80054e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6899      	ldr	r1, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	e00f      	b.n	8005506 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005504:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0202 	bic.w	r2, r2, #2
 8005514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7e1b      	ldrb	r3, [r3, #24]
 8005520:	005a      	lsls	r2, r3, #1
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005542:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005552:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	3b01      	subs	r3, #1
 8005560:	035a      	lsls	r2, r3, #13
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	e007      	b.n	800557c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	3b01      	subs	r3, #1
 8005598:	051a      	lsls	r2, r3, #20
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6899      	ldr	r1, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055be:	025a      	lsls	r2, r3, #9
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6899      	ldr	r1, [r3, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	029a      	lsls	r2, r3, #10
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40012300 	.word	0x40012300
 80055fc:	0f000001 	.word	0x0f000001

08005600 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005616:	2b00      	cmp	r3, #0
 8005618:	d13c      	bne.n	8005694 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d12b      	bne.n	800568c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005638:	2b00      	cmp	r3, #0
 800563a:	d127      	bne.n	800568c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005646:	2b00      	cmp	r3, #0
 8005648:	d006      	beq.n	8005658 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005654:	2b00      	cmp	r3, #0
 8005656:	d119      	bne.n	800568c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0220 	bic.w	r2, r2, #32
 8005666:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0201 	orr.w	r2, r3, #1
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff fd7b 	bl	8005188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005692:	e00e      	b.n	80056b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fd85 	bl	80051b0 <HAL_ADC_ErrorCallback>
}
 80056a6:	e004      	b.n	80056b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff fd67 	bl	800519c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff fd5a 	bl	80051b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <__NVIC_SetPriorityGrouping>:
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005714:	4b0c      	ldr	r3, [pc, #48]	; (8005748 <__NVIC_SetPriorityGrouping+0x44>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005720:	4013      	ands	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800572c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005736:	4a04      	ldr	r2, [pc, #16]	; (8005748 <__NVIC_SetPriorityGrouping+0x44>)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	60d3      	str	r3, [r2, #12]
}
 800573c:	bf00      	nop
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	e000ed00 	.word	0xe000ed00

0800574c <__NVIC_GetPriorityGrouping>:
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <__NVIC_GetPriorityGrouping+0x18>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f003 0307 	and.w	r3, r3, #7
}
 800575a:	4618      	mov	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	e000ed00 	.word	0xe000ed00

08005768 <__NVIC_EnableIRQ>:
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	4603      	mov	r3, r0
 8005770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005776:	2b00      	cmp	r3, #0
 8005778:	db0b      	blt.n	8005792 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	f003 021f 	and.w	r2, r3, #31
 8005780:	4907      	ldr	r1, [pc, #28]	; (80057a0 <__NVIC_EnableIRQ+0x38>)
 8005782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	2001      	movs	r0, #1
 800578a:	fa00 f202 	lsl.w	r2, r0, r2
 800578e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	e000e100 	.word	0xe000e100

080057a4 <__NVIC_SetPriority>:
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	6039      	str	r1, [r7, #0]
 80057ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	db0a      	blt.n	80057ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	490c      	ldr	r1, [pc, #48]	; (80057f0 <__NVIC_SetPriority+0x4c>)
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	0112      	lsls	r2, r2, #4
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	440b      	add	r3, r1
 80057c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057cc:	e00a      	b.n	80057e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	4908      	ldr	r1, [pc, #32]	; (80057f4 <__NVIC_SetPriority+0x50>)
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	3b04      	subs	r3, #4
 80057dc:	0112      	lsls	r2, r2, #4
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	440b      	add	r3, r1
 80057e2:	761a      	strb	r2, [r3, #24]
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	e000e100 	.word	0xe000e100
 80057f4:	e000ed00 	.word	0xe000ed00

080057f8 <NVIC_EncodePriority>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	b089      	sub	sp, #36	; 0x24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f1c3 0307 	rsb	r3, r3, #7
 8005812:	2b04      	cmp	r3, #4
 8005814:	bf28      	it	cs
 8005816:	2304      	movcs	r3, #4
 8005818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3304      	adds	r3, #4
 800581e:	2b06      	cmp	r3, #6
 8005820:	d902      	bls.n	8005828 <NVIC_EncodePriority+0x30>
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3b03      	subs	r3, #3
 8005826:	e000      	b.n	800582a <NVIC_EncodePriority+0x32>
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800582c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43da      	mvns	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	401a      	ands	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005840:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	fa01 f303 	lsl.w	r3, r1, r3
 800584a:	43d9      	mvns	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005850:	4313      	orrs	r3, r2
}
 8005852:	4618      	mov	r0, r3
 8005854:	3724      	adds	r7, #36	; 0x24
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3b01      	subs	r3, #1
 800586c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005870:	d301      	bcc.n	8005876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005872:	2301      	movs	r3, #1
 8005874:	e00f      	b.n	8005896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005876:	4a0a      	ldr	r2, [pc, #40]	; (80058a0 <SysTick_Config+0x40>)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3b01      	subs	r3, #1
 800587c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800587e:	210f      	movs	r1, #15
 8005880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005884:	f7ff ff8e 	bl	80057a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <SysTick_Config+0x40>)
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800588e:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <SysTick_Config+0x40>)
 8005890:	2207      	movs	r2, #7
 8005892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	e000e010 	.word	0xe000e010

080058a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff ff29 	bl	8005704 <__NVIC_SetPriorityGrouping>
}
 80058b2:	bf00      	nop
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b086      	sub	sp, #24
 80058be:	af00      	add	r7, sp, #0
 80058c0:	4603      	mov	r3, r0
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058cc:	f7ff ff3e 	bl	800574c <__NVIC_GetPriorityGrouping>
 80058d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	f7ff ff8e 	bl	80057f8 <NVIC_EncodePriority>
 80058dc:	4602      	mov	r2, r0
 80058de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e2:	4611      	mov	r1, r2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff ff5d 	bl	80057a4 <__NVIC_SetPriority>
}
 80058ea:	bf00      	nop
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	4603      	mov	r3, r0
 80058fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff ff31 	bl	8005768 <__NVIC_EnableIRQ>
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff ffa2 	bl	8005860 <SysTick_Config>
 800591c:	4603      	mov	r3, r0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005934:	f7ff faa4 	bl	8004e80 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e099      	b.n	8005a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005964:	e00f      	b.n	8005986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005966:	f7ff fa8b 	bl	8004e80 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b05      	cmp	r3, #5
 8005972:	d908      	bls.n	8005986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2203      	movs	r2, #3
 800597e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e078      	b.n	8005a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e8      	bne.n	8005966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4b38      	ldr	r3, [pc, #224]	; (8005a80 <HAL_DMA_Init+0x158>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d107      	bne.n	80059f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e8:	4313      	orrs	r3, r2
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0307 	bic.w	r3, r3, #7
 8005a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d117      	bne.n	8005a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00e      	beq.n	8005a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb01 	bl	8006034 <DMA_CheckFifoParam>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2240      	movs	r2, #64	; 0x40
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a46:	2301      	movs	r3, #1
 8005a48:	e016      	b.n	8005a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fab8 	bl	8005fc8 <DMA_CalcBaseAndBitshift>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a60:	223f      	movs	r2, #63	; 0x3f
 8005a62:	409a      	lsls	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	f010803f 	.word	0xf010803f

08005a84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_DMA_Start_IT+0x26>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e040      	b.n	8005b2c <HAL_DMA_Start_IT+0xa8>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d12f      	bne.n	8005b1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f000 fa4a 	bl	8005f6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005adc:	223f      	movs	r2, #63	; 0x3f
 8005ade:	409a      	lsls	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0216 	orr.w	r2, r2, #22
 8005af2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0208 	orr.w	r2, r2, #8
 8005b0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e005      	b.n	8005b2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
 8005b28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b42:	f7ff f99d 	bl	8004e80 <HAL_GetTick>
 8005b46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d008      	beq.n	8005b66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e052      	b.n	8005c0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0216 	bic.w	r2, r2, #22
 8005b74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <HAL_DMA_Abort+0x62>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0208 	bic.w	r2, r2, #8
 8005ba4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bb6:	e013      	b.n	8005be0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bb8:	f7ff f962 	bl	8004e80 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d90c      	bls.n	8005be0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2203      	movs	r2, #3
 8005bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e015      	b.n	8005c0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e4      	bne.n	8005bb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf2:	223f      	movs	r2, #63	; 0x3f
 8005bf4:	409a      	lsls	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d004      	beq.n	8005c32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2280      	movs	r2, #128	; 0x80
 8005c2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e00c      	b.n	8005c4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2205      	movs	r2, #5
 8005c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c64:	4b8e      	ldr	r3, [pc, #568]	; (8005ea0 <HAL_DMA_IRQHandler+0x248>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a8e      	ldr	r2, [pc, #568]	; (8005ea4 <HAL_DMA_IRQHandler+0x24c>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c82:	2208      	movs	r2, #8
 8005c84:	409a      	lsls	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01a      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d013      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0204 	bic.w	r2, r2, #4
 8005caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbc:	f043 0201 	orr.w	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc8:	2201      	movs	r2, #1
 8005cca:	409a      	lsls	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d012      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	409a      	lsls	r2, r3
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf2:	f043 0202 	orr.w	r2, r3, #2
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfe:	2204      	movs	r2, #4
 8005d00:	409a      	lsls	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d012      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00b      	beq.n	8005d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	f043 0204 	orr.w	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d34:	2210      	movs	r2, #16
 8005d36:	409a      	lsls	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d043      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d03c      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d52:	2210      	movs	r2, #16
 8005d54:	409a      	lsls	r2, r3
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d018      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d108      	bne.n	8005d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d024      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	4798      	blx	r3
 8005d86:	e01f      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
 8005d98:	e016      	b.n	8005dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d107      	bne.n	8005db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0208 	bic.w	r2, r2, #8
 8005db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dcc:	2220      	movs	r2, #32
 8005dce:	409a      	lsls	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 808f 	beq.w	8005ef8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0310 	and.w	r3, r3, #16
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 8087 	beq.w	8005ef8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dee:	2220      	movs	r2, #32
 8005df0:	409a      	lsls	r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d136      	bne.n	8005e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0216 	bic.w	r2, r2, #22
 8005e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d103      	bne.n	8005e32 <HAL_DMA_IRQHandler+0x1da>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0208 	bic.w	r2, r2, #8
 8005e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e46:	223f      	movs	r2, #63	; 0x3f
 8005e48:	409a      	lsls	r2, r3
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d07e      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
        }
        return;
 8005e6e:	e079      	b.n	8005f64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10d      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d031      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	4798      	blx	r3
 8005e9c:	e02c      	b.n	8005ef8 <HAL_DMA_IRQHandler+0x2a0>
 8005e9e:	bf00      	nop
 8005ea0:	200002e4 	.word	0x200002e4
 8005ea4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d023      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
 8005eb8:	e01e      	b.n	8005ef8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10f      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0210 	bic.w	r2, r2, #16
 8005ed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d032      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d022      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2205      	movs	r2, #5
 8005f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0201 	bic.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60bb      	str	r3, [r7, #8]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d307      	bcc.n	8005f40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f2      	bne.n	8005f24 <HAL_DMA_IRQHandler+0x2cc>
 8005f3e:	e000      	b.n	8005f42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
 8005f62:	e000      	b.n	8005f66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f64:	bf00      	nop
    }
  }
}
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d108      	bne.n	8005fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005faa:	e007      	b.n	8005fbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	60da      	str	r2, [r3, #12]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	3b10      	subs	r3, #16
 8005fd8:	4a14      	ldr	r2, [pc, #80]	; (800602c <DMA_CalcBaseAndBitshift+0x64>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fe2:	4a13      	ldr	r2, [pc, #76]	; (8006030 <DMA_CalcBaseAndBitshift+0x68>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d909      	bls.n	800600a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	659a      	str	r2, [r3, #88]	; 0x58
 8006008:	e007      	b.n	800601a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	aaaaaaab 	.word	0xaaaaaaab
 8006030:	08016438 	.word	0x08016438

08006034 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d11f      	bne.n	800608e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d856      	bhi.n	8006102 <DMA_CheckFifoParam+0xce>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <DMA_CheckFifoParam+0x28>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	0800606d 	.word	0x0800606d
 8006060:	0800607f 	.word	0x0800607f
 8006064:	0800606d 	.word	0x0800606d
 8006068:	08006103 	.word	0x08006103
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d046      	beq.n	8006106 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607c:	e043      	b.n	8006106 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006086:	d140      	bne.n	800610a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800608c:	e03d      	b.n	800610a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006096:	d121      	bne.n	80060dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d837      	bhi.n	800610e <DMA_CheckFifoParam+0xda>
 800609e:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <DMA_CheckFifoParam+0x70>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060bb 	.word	0x080060bb
 80060ac:	080060b5 	.word	0x080060b5
 80060b0:	080060cd 	.word	0x080060cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
      break;
 80060b8:	e030      	b.n	800611c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d025      	beq.n	8006112 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ca:	e022      	b.n	8006112 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060d4:	d11f      	bne.n	8006116 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060da:	e01c      	b.n	8006116 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d903      	bls.n	80060ea <DMA_CheckFifoParam+0xb6>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	d003      	beq.n	80060f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060e8:	e018      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
      break;
 80060ee:	e015      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00e      	beq.n	800611a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006100:	e00b      	b.n	800611a <DMA_CheckFifoParam+0xe6>
      break;
 8006102:	bf00      	nop
 8006104:	e00a      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      break;
 8006106:	bf00      	nop
 8006108:	e008      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      break;
 800610a:	bf00      	nop
 800610c:	e006      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      break;
 800610e:	bf00      	nop
 8006110:	e004      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      break;
 8006112:	bf00      	nop
 8006114:	e002      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      break;   
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <DMA_CheckFifoParam+0xe8>
      break;
 800611a:	bf00      	nop
    }
  } 
  
  return status; 
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop

0800612c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800613a:	2300      	movs	r3, #0
 800613c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
 8006146:	e16b      	b.n	8006420 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006148:	2201      	movs	r2, #1
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4013      	ands	r3, r2
 800615a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	429a      	cmp	r2, r3
 8006162:	f040 815a 	bne.w	800641a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b01      	cmp	r3, #1
 8006170:	d005      	beq.n	800617e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800617a:	2b02      	cmp	r3, #2
 800617c:	d130      	bne.n	80061e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	2203      	movs	r2, #3
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061b4:	2201      	movs	r2, #1
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	43db      	mvns	r3, r3
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	4013      	ands	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	091b      	lsrs	r3, r3, #4
 80061ca:	f003 0201 	and.w	r2, r3, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d017      	beq.n	800621c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	2203      	movs	r2, #3
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	43db      	mvns	r3, r3
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	4013      	ands	r3, r2
 8006202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d123      	bne.n	8006270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	08da      	lsrs	r2, r3, #3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3208      	adds	r2, #8
 8006230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	220f      	movs	r2, #15
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	43db      	mvns	r3, r3
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4013      	ands	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4313      	orrs	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	08da      	lsrs	r2, r3, #3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3208      	adds	r2, #8
 800626a:	69b9      	ldr	r1, [r7, #24]
 800626c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	2203      	movs	r2, #3
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	43db      	mvns	r3, r3
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	4013      	ands	r3, r2
 8006286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f003 0203 	and.w	r2, r3, #3
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80b4 	beq.w	800641a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	4b60      	ldr	r3, [pc, #384]	; (8006438 <HAL_GPIO_Init+0x30c>)
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	4a5f      	ldr	r2, [pc, #380]	; (8006438 <HAL_GPIO_Init+0x30c>)
 80062bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062c0:	6453      	str	r3, [r2, #68]	; 0x44
 80062c2:	4b5d      	ldr	r3, [pc, #372]	; (8006438 <HAL_GPIO_Init+0x30c>)
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062ce:	4a5b      	ldr	r2, [pc, #364]	; (800643c <HAL_GPIO_Init+0x310>)
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	089b      	lsrs	r3, r3, #2
 80062d4:	3302      	adds	r3, #2
 80062d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	220f      	movs	r2, #15
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	43db      	mvns	r3, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4013      	ands	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a52      	ldr	r2, [pc, #328]	; (8006440 <HAL_GPIO_Init+0x314>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d02b      	beq.n	8006352 <HAL_GPIO_Init+0x226>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a51      	ldr	r2, [pc, #324]	; (8006444 <HAL_GPIO_Init+0x318>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d025      	beq.n	800634e <HAL_GPIO_Init+0x222>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a50      	ldr	r2, [pc, #320]	; (8006448 <HAL_GPIO_Init+0x31c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01f      	beq.n	800634a <HAL_GPIO_Init+0x21e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a4f      	ldr	r2, [pc, #316]	; (800644c <HAL_GPIO_Init+0x320>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d019      	beq.n	8006346 <HAL_GPIO_Init+0x21a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a4e      	ldr	r2, [pc, #312]	; (8006450 <HAL_GPIO_Init+0x324>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_GPIO_Init+0x216>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a4d      	ldr	r2, [pc, #308]	; (8006454 <HAL_GPIO_Init+0x328>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00d      	beq.n	800633e <HAL_GPIO_Init+0x212>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a4c      	ldr	r2, [pc, #304]	; (8006458 <HAL_GPIO_Init+0x32c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d007      	beq.n	800633a <HAL_GPIO_Init+0x20e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a4b      	ldr	r2, [pc, #300]	; (800645c <HAL_GPIO_Init+0x330>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_GPIO_Init+0x20a>
 8006332:	2307      	movs	r3, #7
 8006334:	e00e      	b.n	8006354 <HAL_GPIO_Init+0x228>
 8006336:	2308      	movs	r3, #8
 8006338:	e00c      	b.n	8006354 <HAL_GPIO_Init+0x228>
 800633a:	2306      	movs	r3, #6
 800633c:	e00a      	b.n	8006354 <HAL_GPIO_Init+0x228>
 800633e:	2305      	movs	r3, #5
 8006340:	e008      	b.n	8006354 <HAL_GPIO_Init+0x228>
 8006342:	2304      	movs	r3, #4
 8006344:	e006      	b.n	8006354 <HAL_GPIO_Init+0x228>
 8006346:	2303      	movs	r3, #3
 8006348:	e004      	b.n	8006354 <HAL_GPIO_Init+0x228>
 800634a:	2302      	movs	r3, #2
 800634c:	e002      	b.n	8006354 <HAL_GPIO_Init+0x228>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <HAL_GPIO_Init+0x228>
 8006352:	2300      	movs	r3, #0
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	f002 0203 	and.w	r2, r2, #3
 800635a:	0092      	lsls	r2, r2, #2
 800635c:	4093      	lsls	r3, r2
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4313      	orrs	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006364:	4935      	ldr	r1, [pc, #212]	; (800643c <HAL_GPIO_Init+0x310>)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	089b      	lsrs	r3, r3, #2
 800636a:	3302      	adds	r3, #2
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006372:	4b3b      	ldr	r3, [pc, #236]	; (8006460 <HAL_GPIO_Init+0x334>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	43db      	mvns	r3, r3
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	4013      	ands	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006396:	4a32      	ldr	r2, [pc, #200]	; (8006460 <HAL_GPIO_Init+0x334>)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800639c:	4b30      	ldr	r3, [pc, #192]	; (8006460 <HAL_GPIO_Init+0x334>)
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	4013      	ands	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063c0:	4a27      	ldr	r2, [pc, #156]	; (8006460 <HAL_GPIO_Init+0x334>)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063c6:	4b26      	ldr	r3, [pc, #152]	; (8006460 <HAL_GPIO_Init+0x334>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	4013      	ands	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063ea:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <HAL_GPIO_Init+0x334>)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063f0:	4b1b      	ldr	r3, [pc, #108]	; (8006460 <HAL_GPIO_Init+0x334>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006414:	4a12      	ldr	r2, [pc, #72]	; (8006460 <HAL_GPIO_Init+0x334>)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	3301      	adds	r3, #1
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	f67f ae90 	bls.w	8006148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	3724      	adds	r7, #36	; 0x24
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800
 800643c:	40013800 	.word	0x40013800
 8006440:	40020000 	.word	0x40020000
 8006444:	40020400 	.word	0x40020400
 8006448:	40020800 	.word	0x40020800
 800644c:	40020c00 	.word	0x40020c00
 8006450:	40021000 	.word	0x40021000
 8006454:	40021400 	.word	0x40021400
 8006458:	40021800 	.word	0x40021800
 800645c:	40021c00 	.word	0x40021c00
 8006460:	40013c00 	.word	0x40013c00

08006464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	807b      	strh	r3, [r7, #2]
 8006470:	4613      	mov	r3, r2
 8006472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006474:	787b      	ldrb	r3, [r7, #1]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800647a:	887a      	ldrh	r2, [r7, #2]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006480:	e003      	b.n	800648a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006482:	887b      	ldrh	r3, [r7, #2]
 8006484:	041a      	lsls	r2, r3, #16
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	619a      	str	r2, [r3, #24]
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b086      	sub	sp, #24
 800649a:	af02      	add	r7, sp, #8
 800649c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e101      	b.n	80066ac <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f00b f980 	bl	80117c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2203      	movs	r2, #3
 80064cc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064d6:	d102      	bne.n	80064de <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f004 fa0f 	bl	800a906 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	7c1a      	ldrb	r2, [r3, #16]
 80064f0:	f88d 2000 	strb.w	r2, [sp]
 80064f4:	3304      	adds	r3, #4
 80064f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064f8:	f004 f8ed 	bl	800a6d6 <USB_CoreInit>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e0ce      	b.n	80066ac <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f004 fa07 	bl	800a928 <USB_SetCurrentMode>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0bf      	b.n	80066ac <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
 8006530:	e04a      	b.n	80065c8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006532:	7bfa      	ldrb	r2, [r7, #15]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	4613      	mov	r3, r2
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	440b      	add	r3, r1
 8006540:	3315      	adds	r3, #21
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006546:	7bfa      	ldrb	r2, [r7, #15]
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	3314      	adds	r3, #20
 8006556:	7bfa      	ldrb	r2, [r7, #15]
 8006558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800655a:	7bfa      	ldrb	r2, [r7, #15]
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	b298      	uxth	r0, r3
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	332e      	adds	r3, #46	; 0x2e
 800656e:	4602      	mov	r2, r0
 8006570:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006572:	7bfa      	ldrb	r2, [r7, #15]
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	3318      	adds	r3, #24
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006586:	7bfa      	ldrb	r2, [r7, #15]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	331c      	adds	r3, #28
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800659a:	7bfa      	ldrb	r2, [r7, #15]
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3320      	adds	r3, #32
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065ae:	7bfa      	ldrb	r2, [r7, #15]
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	3324      	adds	r3, #36	; 0x24
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	3301      	adds	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	791b      	ldrb	r3, [r3, #4]
 80065cc:	7bfa      	ldrb	r2, [r7, #15]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d3af      	bcc.n	8006532 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
 80065d6:	e044      	b.n	8006662 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065d8:	7bfa      	ldrb	r2, [r7, #15]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	f203 2355 	addw	r3, r3, #597	; 0x255
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065ee:	7bfa      	ldrb	r2, [r7, #15]
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006600:	7bfa      	ldrb	r2, [r7, #15]
 8006602:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006604:	7bfa      	ldrb	r2, [r7, #15]
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006616:	2200      	movs	r2, #0
 8006618:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800661a:	7bfa      	ldrb	r2, [r7, #15]
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006630:	7bfa      	ldrb	r2, [r7, #15]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006646:	7bfa      	ldrb	r2, [r7, #15]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	3301      	adds	r3, #1
 8006660:	73fb      	strb	r3, [r7, #15]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	791b      	ldrb	r3, [r3, #4]
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	429a      	cmp	r2, r3
 800666a:	d3b5      	bcc.n	80065d8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7c1a      	ldrb	r2, [r3, #16]
 8006674:	f88d 2000 	strb.w	r2, [sp]
 8006678:	3304      	adds	r3, #4
 800667a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800667c:	f004 f9a0 	bl	800a9c0 <USB_DevInit>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e00c      	b.n	80066ac <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f005 f9e4 	bl	800ba72 <USB_DevDisconnect>

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_PCD_Start+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e022      	b.n	8006716 <HAL_PCD_Start+0x62>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d009      	beq.n	80066f8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d105      	bne.n	80066f8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f004 f8f1 	bl	800a8e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f005 f992 	bl	800ba30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800671e:	b590      	push	{r4, r7, lr}
 8006720:	b08d      	sub	sp, #52	; 0x34
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f005 fa50 	bl	800bbda <USB_GetMode>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 848c 	bne.w	800705a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f005 f9b4 	bl	800bab4 <USB_ReadInterrupts>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8482 	beq.w	8007058 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	0a1b      	lsrs	r3, r3, #8
 800675e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f005 f9a1 	bl	800bab4 <USB_ReadInterrupts>
 8006772:	4603      	mov	r3, r0
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f002 0202 	and.w	r2, r2, #2
 800678a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f005 f98f 	bl	800bab4 <USB_ReadInterrupts>
 8006796:	4603      	mov	r3, r0
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b10      	cmp	r3, #16
 800679e:	d161      	bne.n	8006864 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0210 	bic.w	r2, r2, #16
 80067ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	4613      	mov	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	3304      	adds	r3, #4
 80067ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	0c5b      	lsrs	r3, r3, #17
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d124      	bne.n	8006826 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d035      	beq.n	8006854 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	6a38      	ldr	r0, [r7, #32]
 80067fc:	f004 ffc6 	bl	800b78c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	091b      	lsrs	r3, r3, #4
 8006808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800680c:	441a      	add	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	695a      	ldr	r2, [r3, #20]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800681e:	441a      	add	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	615a      	str	r2, [r3, #20]
 8006824:	e016      	b.n	8006854 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	0c5b      	lsrs	r3, r3, #17
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	2b06      	cmp	r3, #6
 8006830:	d110      	bne.n	8006854 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006838:	2208      	movs	r2, #8
 800683a:	4619      	mov	r1, r3
 800683c:	6a38      	ldr	r0, [r7, #32]
 800683e:	f004 ffa5 	bl	800b78c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800684e:	441a      	add	r2, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0210 	orr.w	r2, r2, #16
 8006862:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f005 f923 	bl	800bab4 <USB_ReadInterrupts>
 800686e:	4603      	mov	r3, r0
 8006870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006874:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006878:	f040 80a7 	bne.w	80069ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f005 f928 	bl	800bada <USB_ReadDevAllOutEpInterrupt>
 800688a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800688c:	e099      	b.n	80069c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 808e 	beq.w	80069b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f005 f94c 	bl	800bb42 <USB_ReadDevOutEPInterrupt>
 80068aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00c      	beq.n	80068d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	2301      	movs	r3, #1
 80068c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80068c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fea2 	bl	8007614 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	461a      	mov	r2, r3
 80068e8:	2308      	movs	r3, #8
 80068ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80068ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 ff78 	bl	80077e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	461a      	mov	r2, r3
 800690c:	2310      	movs	r3, #16
 800690e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d030      	beq.n	800697c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d109      	bne.n	800693a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006938:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	3304      	adds	r3, #4
 800694e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d108      	bne.n	800696a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2200      	movs	r2, #0
 800695c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	b2db      	uxtb	r3, r3
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f00b f835 	bl	80119d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006976:	461a      	mov	r2, r3
 8006978:	2302      	movs	r3, #2
 800697a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	2320      	movs	r3, #32
 8006996:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	461a      	mov	r2, r3
 80069b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	3301      	adds	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f47f af62 	bne.w	800688e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f005 f870 	bl	800bab4 <USB_ReadInterrupts>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069de:	f040 80db 	bne.w	8006b98 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f005 f891 	bl	800bb0e <USB_ReadDevAllInEpInterrupt>
 80069ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80069f2:	e0cd      	b.n	8006b90 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80c2 	beq.w	8006b84 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f005 f8b7 	bl	800bb7e <USB_ReadDevInEPInterrupt>
 8006a10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d057      	beq.n	8006acc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	2201      	movs	r2, #1
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	69f9      	ldr	r1, [r7, #28]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2301      	movs	r3, #1
 8006a50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	799b      	ldrb	r3, [r3, #6]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d132      	bne.n	8006ac0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3320      	adds	r3, #32
 8006a6a:	6819      	ldr	r1, [r3, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	4613      	mov	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4403      	add	r3, r0
 8006a7a:	331c      	adds	r3, #28
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4419      	add	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a84:	4613      	mov	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4403      	add	r3, r0
 8006a8e:	3320      	adds	r3, #32
 8006a90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d113      	bne.n	8006ac0 <HAL_PCD_IRQHandler+0x3a2>
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3324      	adds	r3, #36	; 0x24
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2101      	movs	r1, #1
 8006abc:	f005 f8be 	bl	800bc3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f00a feff 	bl	80118ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	461a      	mov	r2, r3
 8006b00:	2310      	movs	r3, #16
 8006b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d023      	beq.n	8006b72 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b2c:	6a38      	ldr	r0, [r7, #32]
 8006b2e:	f004 f8ab 	bl	800ac88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	4413      	add	r3, r2
 8006b42:	3304      	adds	r3, #4
 8006b44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	78db      	ldrb	r3, [r3, #3]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d108      	bne.n	8006b60 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f00a ff4c 	bl	80119f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2302      	movs	r3, #2
 8006b70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fcbb 	bl	80074fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	3301      	adds	r3, #1
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f47f af2e 	bne.w	80069f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f004 ff89 	bl	800bab4 <USB_ReadInterrupts>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bac:	d122      	bne.n	8006bf4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d108      	bne.n	8006bde <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fea2 	bl	8007920 <HAL_PCDEx_LPM_Callback>
 8006bdc:	e002      	b.n	8006be4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f00a feea 	bl	80119b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f004 ff5b 	bl	800bab4 <USB_ReadInterrupts>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c08:	d112      	bne.n	8006c30 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d102      	bne.n	8006c20 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f00a fea6 	bl	801196c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006c2e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f004 ff3d 	bl	800bab4 <USB_ReadInterrupts>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c44:	f040 80b7 	bne.w	8006db6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2110      	movs	r1, #16
 8006c62:	4618      	mov	r0, r3
 8006c64:	f004 f810 	bl	800ac88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6c:	e046      	b.n	8006cfc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	791b      	ldrb	r3, [r3, #4]
 8006d00:	461a      	mov	r2, r3
 8006d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d3b2      	bcc.n	8006c6e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006d1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7bdb      	ldrb	r3, [r3, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d016      	beq.n	8006d52 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d34:	f043 030b 	orr.w	r3, r3, #11
 8006d38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d4a:	f043 030b 	orr.w	r3, r3, #11
 8006d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8006d50:	e015      	b.n	8006d7e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d64:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006d68:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d78:	f043 030b 	orr.w	r3, r3, #11
 8006d7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006da0:	461a      	mov	r2, r3
 8006da2:	f004 ff4b 	bl	800bc3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f004 fe7a 	bl	800bab4 <USB_ReadInterrupts>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dca:	d123      	bne.n	8006e14 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f004 ff10 	bl	800bbf6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f003 ffcd 	bl	800ad7a <USB_GetDevSpeed>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681c      	ldr	r4, [r3, #0]
 8006dec:	f001 fa08 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8006df0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006df6:	461a      	mov	r2, r3
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f003 fcd1 	bl	800a7a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f00a fd8b 	bl	801191a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695a      	ldr	r2, [r3, #20]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f004 fe4b 	bl	800bab4 <USB_ReadInterrupts>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d10a      	bne.n	8006e3e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f00a fd68 	bl	80118fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f002 0208 	and.w	r2, r2, #8
 8006e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f004 fe36 	bl	800bab4 <USB_ReadInterrupts>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4e:	2b80      	cmp	r3, #128	; 0x80
 8006e50:	d123      	bne.n	8006e9a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e5e:	2301      	movs	r3, #1
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
 8006e62:	e014      	b.n	8006e8e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e68:	4613      	mov	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d105      	bne.n	8006e88 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fb08 	bl	8007498 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	791b      	ldrb	r3, [r3, #4]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d3e4      	bcc.n	8006e64 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f004 fe08 	bl	800bab4 <USB_ReadInterrupts>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eae:	d13c      	bne.n	8006f2a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb4:	e02b      	b.n	8006f0e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eca:	4613      	mov	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3318      	adds	r3, #24
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d115      	bne.n	8006f08 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006edc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da12      	bge.n	8006f08 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	3317      	adds	r3, #23
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fac8 	bl	8007498 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d3cd      	bcc.n	8006eb6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695a      	ldr	r2, [r3, #20]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f004 fdc0 	bl	800bab4 <USB_ReadInterrupts>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f3e:	d156      	bne.n	8006fee <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f40:	2301      	movs	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
 8006f44:	e045      	b.n	8006fd2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d12e      	bne.n	8006fcc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da2b      	bge.n	8006fcc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8006f80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d121      	bne.n	8006fcc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fc8:	6053      	str	r3, [r2, #4]
            break;
 8006fca:	e008      	b.n	8006fde <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	3301      	adds	r3, #1
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d3b3      	bcc.n	8006f46 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695a      	ldr	r2, [r3, #20]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f004 fd5e 	bl	800bab4 <USB_ReadInterrupts>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d10a      	bne.n	800701a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f00a fd09 	bl	8011a1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	695a      	ldr	r2, [r3, #20]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f004 fd48 	bl	800bab4 <USB_ReadInterrupts>
 8007024:	4603      	mov	r3, r0
 8007026:	f003 0304 	and.w	r3, r3, #4
 800702a:	2b04      	cmp	r3, #4
 800702c:	d115      	bne.n	800705a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f00a fcf9 	bl	8011a38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6859      	ldr	r1, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]
 8007056:	e000      	b.n	800705a <HAL_PCD_IRQHandler+0x93c>
      return;
 8007058:	bf00      	nop
    }
  }
}
 800705a:	3734      	adds	r7, #52	; 0x34
 800705c:	46bd      	mov	sp, r7
 800705e:	bd90      	pop	{r4, r7, pc}

08007060 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_PCD_SetAddress+0x1a>
 8007076:	2302      	movs	r3, #2
 8007078:	e012      	b.n	80070a0 <HAL_PCD_SetAddress+0x40>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	78fa      	ldrb	r2, [r7, #3]
 8007086:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	4611      	mov	r1, r2
 8007090:	4618      	mov	r0, r3
 8007092:	f004 fca7 	bl	800b9e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	4608      	mov	r0, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	461a      	mov	r2, r3
 80070b6:	4603      	mov	r3, r0
 80070b8:	70fb      	strb	r3, [r7, #3]
 80070ba:	460b      	mov	r3, r1
 80070bc:	803b      	strh	r3, [r7, #0]
 80070be:	4613      	mov	r3, r2
 80070c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da0f      	bge.n	80070ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	3310      	adds	r3, #16
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	3304      	adds	r3, #4
 80070e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	705a      	strb	r2, [r3, #1]
 80070ec:	e00f      	b.n	800710e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	f003 020f 	and.w	r2, r3, #15
 80070f4:	4613      	mov	r3, r2
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	3304      	adds	r3, #4
 8007106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	b2da      	uxtb	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800711a:	883a      	ldrh	r2, [r7, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	78ba      	ldrb	r2, [r7, #2]
 8007124:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d004      	beq.n	8007138 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007138:	78bb      	ldrb	r3, [r7, #2]
 800713a:	2b02      	cmp	r3, #2
 800713c:	d102      	bne.n	8007144 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_PCD_EP_Open+0xaa>
 800714e:	2302      	movs	r3, #2
 8007150:	e00e      	b.n	8007170 <HAL_PCD_EP_Open+0xc8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	4618      	mov	r0, r3
 8007162:	f003 fe2f 	bl	800adc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800716e:	7afb      	ldrb	r3, [r7, #11]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007188:	2b00      	cmp	r3, #0
 800718a:	da0f      	bge.n	80071ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	f003 020f 	and.w	r2, r3, #15
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	3310      	adds	r3, #16
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4413      	add	r3, r2
 80071a0:	3304      	adds	r3, #4
 80071a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2201      	movs	r2, #1
 80071a8:	705a      	strb	r2, [r3, #1]
 80071aa:	e00f      	b.n	80071cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	f003 020f 	and.w	r2, r3, #15
 80071b2:	4613      	mov	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	4413      	add	r3, r2
 80071c2:	3304      	adds	r3, #4
 80071c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_PCD_EP_Close+0x6e>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e00e      	b.n	8007204 <HAL_PCD_EP_Close+0x8c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f003 fe6d 	bl	800aed4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	460b      	mov	r3, r1
 800721a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	f003 020f 	and.w	r2, r3, #15
 8007222:	4613      	mov	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	3304      	adds	r3, #4
 8007234:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2200      	movs	r2, #0
 800724c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	f003 030f 	and.w	r3, r3, #15
 8007254:	b2da      	uxtb	r2, r3
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	799b      	ldrb	r3, [r3, #6]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d102      	bne.n	8007268 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	799b      	ldrb	r3, [r3, #6]
 8007270:	461a      	mov	r2, r3
 8007272:	6979      	ldr	r1, [r7, #20]
 8007274:	f003 ff0a 	bl	800b08c <USB_EPStartXfer>

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80072a4:	681b      	ldr	r3, [r3, #0]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	460b      	mov	r3, r1
 80072c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	f003 020f 	and.w	r2, r3, #15
 80072c8:	4613      	mov	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	3310      	adds	r3, #16
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	3304      	adds	r3, #4
 80072d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2200      	movs	r2, #0
 80072ea:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2201      	movs	r2, #1
 80072f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	799b      	ldrb	r3, [r3, #6]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d102      	bne.n	800730c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	799b      	ldrb	r3, [r3, #6]
 8007314:	461a      	mov	r2, r3
 8007316:	6979      	ldr	r1, [r7, #20]
 8007318:	f003 feb8 	bl	800b08c <USB_EPStartXfer>

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	f003 030f 	and.w	r3, r3, #15
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	7912      	ldrb	r2, [r2, #4]
 800733c:	4293      	cmp	r3, r2
 800733e:	d901      	bls.n	8007344 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e04f      	b.n	80073e4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007348:	2b00      	cmp	r3, #0
 800734a:	da0f      	bge.n	800736c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	f003 020f 	and.w	r2, r3, #15
 8007352:	4613      	mov	r3, r2
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	3310      	adds	r3, #16
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	3304      	adds	r3, #4
 8007362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	705a      	strb	r2, [r3, #1]
 800736a:	e00d      	b.n	8007388 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	4613      	mov	r3, r2
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	4413      	add	r3, r2
 800737e:	3304      	adds	r3, #4
 8007380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	b2da      	uxtb	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_PCD_EP_SetStall+0x82>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e01d      	b.n	80073e4 <HAL_PCD_EP_SetStall+0xbe>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68f9      	ldr	r1, [r7, #12]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f004 fa40 	bl	800b83c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7999      	ldrb	r1, [r3, #6]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80073d4:	461a      	mov	r2, r3
 80073d6:	f004 fc31 	bl	800bc3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	7912      	ldrb	r2, [r2, #4]
 8007402:	4293      	cmp	r3, r2
 8007404:	d901      	bls.n	800740a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e042      	b.n	8007490 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800740a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800740e:	2b00      	cmp	r3, #0
 8007410:	da0f      	bge.n	8007432 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	4613      	mov	r3, r2
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	3310      	adds	r3, #16
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	3304      	adds	r3, #4
 8007428:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	705a      	strb	r2, [r3, #1]
 8007430:	e00f      	b.n	8007452 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	f003 020f 	and.w	r2, r3, #15
 8007438:	4613      	mov	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	4413      	add	r3, r2
 8007448:	3304      	adds	r3, #4
 800744a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	b2da      	uxtb	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_PCD_EP_ClrStall+0x86>
 800746e:	2302      	movs	r3, #2
 8007470:	e00e      	b.n	8007490 <HAL_PCD_EP_ClrStall+0xa4>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	4618      	mov	r0, r3
 8007482:	f004 fa49 	bl	800b918 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80074a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	da0c      	bge.n	80074c6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ac:	78fb      	ldrb	r3, [r7, #3]
 80074ae:	f003 020f 	and.w	r2, r3, #15
 80074b2:	4613      	mov	r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	3310      	adds	r3, #16
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	4413      	add	r3, r2
 80074c0:	3304      	adds	r3, #4
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e00c      	b.n	80074e0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	4613      	mov	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	4413      	add	r3, r2
 80074dc:	3304      	adds	r3, #4
 80074de:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68f9      	ldr	r1, [r7, #12]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f004 f868 	bl	800b5bc <USB_EPStopXfer>
 80074ec:	4603      	mov	r3, r0
 80074ee:	72fb      	strb	r3, [r7, #11]

  return ret;
 80074f0:	7afb      	ldrb	r3, [r7, #11]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b08a      	sub	sp, #40	; 0x28
 80074fe:	af02      	add	r7, sp, #8
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	00db      	lsls	r3, r3, #3
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	3310      	adds	r3, #16
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	3304      	adds	r3, #4
 8007520:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	695a      	ldr	r2, [r3, #20]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	429a      	cmp	r2, r3
 800752c:	d901      	bls.n	8007532 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e06b      	b.n	800760a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	429a      	cmp	r2, r3
 8007546:	d902      	bls.n	800754e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	3303      	adds	r3, #3
 8007552:	089b      	lsrs	r3, r3, #2
 8007554:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007556:	e02a      	b.n	80075ae <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	429a      	cmp	r2, r3
 800756c:	d902      	bls.n	8007574 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	3303      	adds	r3, #3
 8007578:	089b      	lsrs	r3, r3, #2
 800757a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68d9      	ldr	r1, [r3, #12]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	b2da      	uxtb	r2, r3
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	4603      	mov	r3, r0
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	f004 f8bd 	bl	800b710 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	441a      	add	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	441a      	add	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d809      	bhi.n	80075d8 <PCD_WriteEmptyTxFifo+0xde>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	695a      	ldr	r2, [r3, #20]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d203      	bcs.n	80075d8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1bf      	bne.n	8007558 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d811      	bhi.n	8007608 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	2201      	movs	r2, #1
 80075ec:	fa02 f303 	lsl.w	r3, r2, r3
 80075f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	6939      	ldr	r1, [r7, #16]
 8007600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007604:	4013      	ands	r3, r2
 8007606:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	333c      	adds	r3, #60	; 0x3c
 800762c:	3304      	adds	r3, #4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	799b      	ldrb	r3, [r3, #6]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d17b      	bne.n	8007742 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d015      	beq.n	8007680 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4a61      	ldr	r2, [pc, #388]	; (80077dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	f240 80b9 	bls.w	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80b3 	beq.w	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	461a      	mov	r2, r3
 8007678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800767c:	6093      	str	r3, [r2, #8]
 800767e:	e0a7      	b.n	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	461a      	mov	r2, r3
 8007698:	2320      	movs	r3, #32
 800769a:	6093      	str	r3, [r2, #8]
 800769c:	e098      	b.n	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f040 8093 	bne.w	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4a4b      	ldr	r2, [pc, #300]	; (80077dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d90f      	bls.n	80076d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	461a      	mov	r2, r3
 80076ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ce:	6093      	str	r3, [r2, #8]
 80076d0:	e07e      	b.n	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	4613      	mov	r3, r2
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4413      	add	r3, r2
 80076e4:	3304      	adds	r3, #4
 80076e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a1a      	ldr	r2, [r3, #32]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	0159      	lsls	r1, r3, #5
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	440b      	add	r3, r1
 80076f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fe:	1ad2      	subs	r2, r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d114      	bne.n	8007734 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800771c:	461a      	mov	r2, r3
 800771e:	2101      	movs	r1, #1
 8007720:	f004 fa8c 	bl	800bc3c <USB_EP0_OutStart>
 8007724:	e006      	b.n	8007734 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	441a      	add	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f00a f8aa 	bl	8011894 <HAL_PCD_DataOutStageCallback>
 8007740:	e046      	b.n	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	4a26      	ldr	r2, [pc, #152]	; (80077e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d124      	bne.n	8007794 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	461a      	mov	r2, r3
 8007762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007766:	6093      	str	r3, [r2, #8]
 8007768:	e032      	b.n	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007780:	461a      	mov	r2, r3
 8007782:	2320      	movs	r3, #32
 8007784:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f00a f881 	bl	8011894 <HAL_PCD_DataOutStageCallback>
 8007792:	e01d      	b.n	80077d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d114      	bne.n	80077c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800779a:	6879      	ldr	r1, [r7, #4]
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	00db      	lsls	r3, r3, #3
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	440b      	add	r3, r1
 80077a8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d108      	bne.n	80077c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80077bc:	461a      	mov	r2, r3
 80077be:	2100      	movs	r1, #0
 80077c0:	f004 fa3c 	bl	800bc3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f00a f862 	bl	8011894 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	4f54300a 	.word	0x4f54300a
 80077e0:	4f54310a 	.word	0x4f54310a

080077e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	333c      	adds	r3, #60	; 0x3c
 80077fc:	3304      	adds	r3, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4a15      	ldr	r2, [pc, #84]	; (800786c <PCD_EP_OutSetupPacket_int+0x88>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d90e      	bls.n	8007838 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007830:	461a      	mov	r2, r3
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f00a f819 	bl	8011870 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <PCD_EP_OutSetupPacket_int+0x88>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d90c      	bls.n	8007860 <PCD_EP_OutSetupPacket_int+0x7c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	799b      	ldrb	r3, [r3, #6]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d108      	bne.n	8007860 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007858:	461a      	mov	r2, r3
 800785a:	2101      	movs	r1, #1
 800785c:	f004 f9ee 	bl	800bc3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	4f54300a 	.word	0x4f54300a

08007870 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
 800787c:	4613      	mov	r3, r2
 800787e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d107      	bne.n	800789e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800788e:	883b      	ldrh	r3, [r7, #0]
 8007890:	0419      	lsls	r1, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	430a      	orrs	r2, r1
 800789a:	629a      	str	r2, [r3, #40]	; 0x28
 800789c:	e028      	b.n	80078f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	4413      	add	r3, r2
 80078aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	e00d      	b.n	80078ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	3340      	adds	r3, #64	; 0x40
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	4413      	add	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	3301      	adds	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
 80078ce:	7bfa      	ldrb	r2, [r7, #15]
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d3ec      	bcc.n	80078b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80078d8:	883b      	ldrh	r3, [r7, #0]
 80078da:	0418      	lsls	r0, r3, #16
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	4302      	orrs	r2, r0
 80078e8:	3340      	adds	r3, #64	; 0x40
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	887a      	ldrh	r2, [r7, #2]
 8007910:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e267      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d075      	beq.n	8007a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007956:	4b88      	ldr	r3, [pc, #544]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 030c 	and.w	r3, r3, #12
 800795e:	2b04      	cmp	r3, #4
 8007960:	d00c      	beq.n	800797c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007962:	4b85      	ldr	r3, [pc, #532]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800796a:	2b08      	cmp	r3, #8
 800796c:	d112      	bne.n	8007994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800796e:	4b82      	ldr	r3, [pc, #520]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800797a:	d10b      	bne.n	8007994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800797c:	4b7e      	ldr	r3, [pc, #504]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d05b      	beq.n	8007a40 <HAL_RCC_OscConfig+0x108>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d157      	bne.n	8007a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e242      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800799c:	d106      	bne.n	80079ac <HAL_RCC_OscConfig+0x74>
 800799e:	4b76      	ldr	r3, [pc, #472]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a75      	ldr	r2, [pc, #468]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e01d      	b.n	80079e8 <HAL_RCC_OscConfig+0xb0>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079b4:	d10c      	bne.n	80079d0 <HAL_RCC_OscConfig+0x98>
 80079b6:	4b70      	ldr	r3, [pc, #448]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a6f      	ldr	r2, [pc, #444]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	4b6d      	ldr	r3, [pc, #436]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a6c      	ldr	r2, [pc, #432]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	e00b      	b.n	80079e8 <HAL_RCC_OscConfig+0xb0>
 80079d0:	4b69      	ldr	r3, [pc, #420]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a68      	ldr	r2, [pc, #416]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	4b66      	ldr	r3, [pc, #408]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a65      	ldr	r2, [pc, #404]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 80079e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d013      	beq.n	8007a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f0:	f7fd fa46 	bl	8004e80 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079f8:	f7fd fa42 	bl	8004e80 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b64      	cmp	r3, #100	; 0x64
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e207      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a0a:	4b5b      	ldr	r3, [pc, #364]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0xc0>
 8007a16:	e014      	b.n	8007a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a18:	f7fd fa32 	bl	8004e80 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a20:	f7fd fa2e 	bl	8004e80 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b64      	cmp	r3, #100	; 0x64
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e1f3      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a32:	4b51      	ldr	r3, [pc, #324]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f0      	bne.n	8007a20 <HAL_RCC_OscConfig+0xe8>
 8007a3e:	e000      	b.n	8007a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d063      	beq.n	8007b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a4e:	4b4a      	ldr	r3, [pc, #296]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 030c 	and.w	r3, r3, #12
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a5a:	4b47      	ldr	r3, [pc, #284]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a62:	2b08      	cmp	r3, #8
 8007a64:	d11c      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a66:	4b44      	ldr	r3, [pc, #272]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d116      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a72:	4b41      	ldr	r3, [pc, #260]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_RCC_OscConfig+0x152>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d001      	beq.n	8007a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e1c7      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8a:	4b3b      	ldr	r3, [pc, #236]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4937      	ldr	r1, [pc, #220]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a9e:	e03a      	b.n	8007b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d020      	beq.n	8007aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007aa8:	4b34      	ldr	r3, [pc, #208]	; (8007b7c <HAL_RCC_OscConfig+0x244>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aae:	f7fd f9e7 	bl	8004e80 <HAL_GetTick>
 8007ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ab6:	f7fd f9e3 	bl	8004e80 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d901      	bls.n	8007ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e1a8      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac8:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0f0      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ad4:	4b28      	ldr	r3, [pc, #160]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4925      	ldr	r1, [pc, #148]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	600b      	str	r3, [r1, #0]
 8007ae8:	e015      	b.n	8007b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <HAL_RCC_OscConfig+0x244>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af0:	f7fd f9c6 	bl	8004e80 <HAL_GetTick>
 8007af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007af6:	e008      	b.n	8007b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007af8:	f7fd f9c2 	bl	8004e80 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e187      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f0      	bne.n	8007af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d036      	beq.n	8007b90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d016      	beq.n	8007b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b2a:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <HAL_RCC_OscConfig+0x248>)
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b30:	f7fd f9a6 	bl	8004e80 <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b38:	f7fd f9a2 	bl	8004e80 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e167      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <HAL_RCC_OscConfig+0x240>)
 8007b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x200>
 8007b56:	e01b      	b.n	8007b90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <HAL_RCC_OscConfig+0x248>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b5e:	f7fd f98f 	bl	8004e80 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b64:	e00e      	b.n	8007b84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b66:	f7fd f98b 	bl	8004e80 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d907      	bls.n	8007b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e150      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	42470000 	.word	0x42470000
 8007b80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b84:	4b88      	ldr	r3, [pc, #544]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1ea      	bne.n	8007b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8097 	beq.w	8007ccc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ba2:	4b81      	ldr	r3, [pc, #516]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10f      	bne.n	8007bce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60bb      	str	r3, [r7, #8]
 8007bb2:	4b7d      	ldr	r3, [pc, #500]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	4a7c      	ldr	r2, [pc, #496]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8007bbe:	4b7a      	ldr	r3, [pc, #488]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bc6:	60bb      	str	r3, [r7, #8]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bce:	4b77      	ldr	r3, [pc, #476]	; (8007dac <HAL_RCC_OscConfig+0x474>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d118      	bne.n	8007c0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bda:	4b74      	ldr	r3, [pc, #464]	; (8007dac <HAL_RCC_OscConfig+0x474>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a73      	ldr	r2, [pc, #460]	; (8007dac <HAL_RCC_OscConfig+0x474>)
 8007be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007be6:	f7fd f94b 	bl	8004e80 <HAL_GetTick>
 8007bea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bec:	e008      	b.n	8007c00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bee:	f7fd f947 	bl	8004e80 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e10c      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c00:	4b6a      	ldr	r3, [pc, #424]	; (8007dac <HAL_RCC_OscConfig+0x474>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0f0      	beq.n	8007bee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d106      	bne.n	8007c22 <HAL_RCC_OscConfig+0x2ea>
 8007c14:	4b64      	ldr	r3, [pc, #400]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c18:	4a63      	ldr	r2, [pc, #396]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c20:	e01c      	b.n	8007c5c <HAL_RCC_OscConfig+0x324>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	d10c      	bne.n	8007c44 <HAL_RCC_OscConfig+0x30c>
 8007c2a:	4b5f      	ldr	r3, [pc, #380]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	4a5e      	ldr	r2, [pc, #376]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c30:	f043 0304 	orr.w	r3, r3, #4
 8007c34:	6713      	str	r3, [r2, #112]	; 0x70
 8007c36:	4b5c      	ldr	r3, [pc, #368]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3a:	4a5b      	ldr	r2, [pc, #364]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	6713      	str	r3, [r2, #112]	; 0x70
 8007c42:	e00b      	b.n	8007c5c <HAL_RCC_OscConfig+0x324>
 8007c44:	4b58      	ldr	r3, [pc, #352]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c48:	4a57      	ldr	r2, [pc, #348]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c4a:	f023 0301 	bic.w	r3, r3, #1
 8007c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c50:	4b55      	ldr	r3, [pc, #340]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c54:	4a54      	ldr	r2, [pc, #336]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c56:	f023 0304 	bic.w	r3, r3, #4
 8007c5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d015      	beq.n	8007c90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c64:	f7fd f90c 	bl	8004e80 <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c6a:	e00a      	b.n	8007c82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c6c:	f7fd f908 	bl	8004e80 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e0cb      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c82:	4b49      	ldr	r3, [pc, #292]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0ee      	beq.n	8007c6c <HAL_RCC_OscConfig+0x334>
 8007c8e:	e014      	b.n	8007cba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c90:	f7fd f8f6 	bl	8004e80 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c96:	e00a      	b.n	8007cae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c98:	f7fd f8f2 	bl	8004e80 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e0b5      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cae:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1ee      	bne.n	8007c98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d105      	bne.n	8007ccc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cc0:	4b39      	ldr	r3, [pc, #228]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	4a38      	ldr	r2, [pc, #224]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80a1 	beq.w	8007e18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cd6:	4b34      	ldr	r3, [pc, #208]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 030c 	and.w	r3, r3, #12
 8007cde:	2b08      	cmp	r3, #8
 8007ce0:	d05c      	beq.n	8007d9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d141      	bne.n	8007d6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cea:	4b31      	ldr	r3, [pc, #196]	; (8007db0 <HAL_RCC_OscConfig+0x478>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf0:	f7fd f8c6 	bl	8004e80 <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cf8:	f7fd f8c2 	bl	8004e80 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e087      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d0a:	4b27      	ldr	r3, [pc, #156]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1f0      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69da      	ldr	r2, [r3, #28]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	019b      	lsls	r3, r3, #6
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2c:	085b      	lsrs	r3, r3, #1
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	041b      	lsls	r3, r3, #16
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	061b      	lsls	r3, r3, #24
 8007d3a:	491b      	ldr	r1, [pc, #108]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d40:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <HAL_RCC_OscConfig+0x478>)
 8007d42:	2201      	movs	r2, #1
 8007d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d46:	f7fd f89b 	bl	8004e80 <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d4e:	f7fd f897 	bl	8004e80 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e05c      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d60:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d0f0      	beq.n	8007d4e <HAL_RCC_OscConfig+0x416>
 8007d6c:	e054      	b.n	8007e18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d6e:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <HAL_RCC_OscConfig+0x478>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d74:	f7fd f884 	bl	8004e80 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d7c:	f7fd f880 	bl	8004e80 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e045      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d8e:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <HAL_RCC_OscConfig+0x470>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x444>
 8007d9a:	e03d      	b.n	8007e18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d107      	bne.n	8007db4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e038      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
 8007da8:	40023800 	.word	0x40023800
 8007dac:	40007000 	.word	0x40007000
 8007db0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007db4:	4b1b      	ldr	r3, [pc, #108]	; (8007e24 <HAL_RCC_OscConfig+0x4ec>)
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d028      	beq.n	8007e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d121      	bne.n	8007e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d11a      	bne.n	8007e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007de4:	4013      	ands	r3, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d111      	bne.n	8007e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d107      	bne.n	8007e14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d001      	beq.n	8007e18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e000      	b.n	8007e1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40023800 	.word	0x40023800

08007e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0cc      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e3c:	4b68      	ldr	r3, [pc, #416]	; (8007fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d90c      	bls.n	8007e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4a:	4b65      	ldr	r3, [pc, #404]	; (8007fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e52:	4b63      	ldr	r3, [pc, #396]	; (8007fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d001      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e0b8      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d020      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e7c:	4b59      	ldr	r3, [pc, #356]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	4a58      	ldr	r2, [pc, #352]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e94:	4b53      	ldr	r3, [pc, #332]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	4a52      	ldr	r2, [pc, #328]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ea0:	4b50      	ldr	r3, [pc, #320]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	494d      	ldr	r1, [pc, #308]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d044      	beq.n	8007f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d107      	bne.n	8007ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ec6:	4b47      	ldr	r3, [pc, #284]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d119      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e07f      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d003      	beq.n	8007ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d107      	bne.n	8007ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ee6:	4b3f      	ldr	r3, [pc, #252]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e06f      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ef6:	4b3b      	ldr	r3, [pc, #236]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e067      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f06:	4b37      	ldr	r3, [pc, #220]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f023 0203 	bic.w	r2, r3, #3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	4934      	ldr	r1, [pc, #208]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f14:	4313      	orrs	r3, r2
 8007f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f18:	f7fc ffb2 	bl	8004e80 <HAL_GetTick>
 8007f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1e:	e00a      	b.n	8007f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f20:	f7fc ffae 	bl	8004e80 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e04f      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f36:	4b2b      	ldr	r3, [pc, #172]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	f003 020c 	and.w	r2, r3, #12
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d1eb      	bne.n	8007f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f48:	4b25      	ldr	r3, [pc, #148]	; (8007fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0307 	and.w	r3, r3, #7
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d20c      	bcs.n	8007f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f56:	4b22      	ldr	r3, [pc, #136]	; (8007fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f5e:	4b20      	ldr	r3, [pc, #128]	; (8007fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0307 	and.w	r3, r3, #7
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d001      	beq.n	8007f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e032      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f7c:	4b19      	ldr	r3, [pc, #100]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	4916      	ldr	r1, [pc, #88]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0308 	and.w	r3, r3, #8
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f9a:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	490e      	ldr	r1, [pc, #56]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007faa:	4313      	orrs	r3, r2
 8007fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007fae:	f000 f821 	bl	8007ff4 <HAL_RCC_GetSysClockFreq>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	490a      	ldr	r1, [pc, #40]	; (8007fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8007fc0:	5ccb      	ldrb	r3, [r1, r3]
 8007fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fc6:	4a09      	ldr	r2, [pc, #36]	; (8007fec <HAL_RCC_ClockConfig+0x1c4>)
 8007fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fc ff12 	bl	8004df8 <HAL_InitTick>

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	40023c00 	.word	0x40023c00
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	08016420 	.word	0x08016420
 8007fec:	200002e4 	.word	0x200002e4
 8007ff0:	200002e8 	.word	0x200002e8

08007ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ff8:	b094      	sub	sp, #80	; 0x50
 8007ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8008000:	2300      	movs	r3, #0
 8008002:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008004:	2300      	movs	r3, #0
 8008006:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800800c:	4b79      	ldr	r3, [pc, #484]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f003 030c 	and.w	r3, r3, #12
 8008014:	2b08      	cmp	r3, #8
 8008016:	d00d      	beq.n	8008034 <HAL_RCC_GetSysClockFreq+0x40>
 8008018:	2b08      	cmp	r3, #8
 800801a:	f200 80e1 	bhi.w	80081e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_RCC_GetSysClockFreq+0x34>
 8008022:	2b04      	cmp	r3, #4
 8008024:	d003      	beq.n	800802e <HAL_RCC_GetSysClockFreq+0x3a>
 8008026:	e0db      	b.n	80081e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008028:	4b73      	ldr	r3, [pc, #460]	; (80081f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800802a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800802c:	e0db      	b.n	80081e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800802e:	4b73      	ldr	r3, [pc, #460]	; (80081fc <HAL_RCC_GetSysClockFreq+0x208>)
 8008030:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008032:	e0d8      	b.n	80081e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008034:	4b6f      	ldr	r3, [pc, #444]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800803c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800803e:	4b6d      	ldr	r3, [pc, #436]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d063      	beq.n	8008112 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800804a:	4b6a      	ldr	r3, [pc, #424]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	099b      	lsrs	r3, r3, #6
 8008050:	2200      	movs	r2, #0
 8008052:	63bb      	str	r3, [r7, #56]	; 0x38
 8008054:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805c:	633b      	str	r3, [r7, #48]	; 0x30
 800805e:	2300      	movs	r3, #0
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
 8008062:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008066:	4622      	mov	r2, r4
 8008068:	462b      	mov	r3, r5
 800806a:	f04f 0000 	mov.w	r0, #0
 800806e:	f04f 0100 	mov.w	r1, #0
 8008072:	0159      	lsls	r1, r3, #5
 8008074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008078:	0150      	lsls	r0, r2, #5
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4621      	mov	r1, r4
 8008080:	1a51      	subs	r1, r2, r1
 8008082:	6139      	str	r1, [r7, #16]
 8008084:	4629      	mov	r1, r5
 8008086:	eb63 0301 	sbc.w	r3, r3, r1
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008098:	4659      	mov	r1, fp
 800809a:	018b      	lsls	r3, r1, #6
 800809c:	4651      	mov	r1, sl
 800809e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080a2:	4651      	mov	r1, sl
 80080a4:	018a      	lsls	r2, r1, #6
 80080a6:	4651      	mov	r1, sl
 80080a8:	ebb2 0801 	subs.w	r8, r2, r1
 80080ac:	4659      	mov	r1, fp
 80080ae:	eb63 0901 	sbc.w	r9, r3, r1
 80080b2:	f04f 0200 	mov.w	r2, #0
 80080b6:	f04f 0300 	mov.w	r3, #0
 80080ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080c6:	4690      	mov	r8, r2
 80080c8:	4699      	mov	r9, r3
 80080ca:	4623      	mov	r3, r4
 80080cc:	eb18 0303 	adds.w	r3, r8, r3
 80080d0:	60bb      	str	r3, [r7, #8]
 80080d2:	462b      	mov	r3, r5
 80080d4:	eb49 0303 	adc.w	r3, r9, r3
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080e6:	4629      	mov	r1, r5
 80080e8:	024b      	lsls	r3, r1, #9
 80080ea:	4621      	mov	r1, r4
 80080ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080f0:	4621      	mov	r1, r4
 80080f2:	024a      	lsls	r2, r1, #9
 80080f4:	4610      	mov	r0, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080fa:	2200      	movs	r2, #0
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008104:	f7f8 fdb0 	bl	8000c68 <__aeabi_uldivmod>
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4613      	mov	r3, r2
 800810e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008110:	e058      	b.n	80081c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008112:	4b38      	ldr	r3, [pc, #224]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	099b      	lsrs	r3, r3, #6
 8008118:	2200      	movs	r2, #0
 800811a:	4618      	mov	r0, r3
 800811c:	4611      	mov	r1, r2
 800811e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008122:	623b      	str	r3, [r7, #32]
 8008124:	2300      	movs	r3, #0
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
 8008128:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800812c:	4642      	mov	r2, r8
 800812e:	464b      	mov	r3, r9
 8008130:	f04f 0000 	mov.w	r0, #0
 8008134:	f04f 0100 	mov.w	r1, #0
 8008138:	0159      	lsls	r1, r3, #5
 800813a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800813e:	0150      	lsls	r0, r2, #5
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4641      	mov	r1, r8
 8008146:	ebb2 0a01 	subs.w	sl, r2, r1
 800814a:	4649      	mov	r1, r9
 800814c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800815c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008160:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008164:	ebb2 040a 	subs.w	r4, r2, sl
 8008168:	eb63 050b 	sbc.w	r5, r3, fp
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	00eb      	lsls	r3, r5, #3
 8008176:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800817a:	00e2      	lsls	r2, r4, #3
 800817c:	4614      	mov	r4, r2
 800817e:	461d      	mov	r5, r3
 8008180:	4643      	mov	r3, r8
 8008182:	18e3      	adds	r3, r4, r3
 8008184:	603b      	str	r3, [r7, #0]
 8008186:	464b      	mov	r3, r9
 8008188:	eb45 0303 	adc.w	r3, r5, r3
 800818c:	607b      	str	r3, [r7, #4]
 800818e:	f04f 0200 	mov.w	r2, #0
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800819a:	4629      	mov	r1, r5
 800819c:	028b      	lsls	r3, r1, #10
 800819e:	4621      	mov	r1, r4
 80081a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081a4:	4621      	mov	r1, r4
 80081a6:	028a      	lsls	r2, r1, #10
 80081a8:	4610      	mov	r0, r2
 80081aa:	4619      	mov	r1, r3
 80081ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ae:	2200      	movs	r2, #0
 80081b0:	61bb      	str	r3, [r7, #24]
 80081b2:	61fa      	str	r2, [r7, #28]
 80081b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081b8:	f7f8 fd56 	bl	8000c68 <__aeabi_uldivmod>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4613      	mov	r3, r2
 80081c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80081c4:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	3301      	adds	r3, #1
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80081d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081de:	e002      	b.n	80081e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081e0:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80081e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3750      	adds	r7, #80	; 0x50
 80081ec:	46bd      	mov	sp, r7
 80081ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081f2:	bf00      	nop
 80081f4:	40023800 	.word	0x40023800
 80081f8:	00f42400 	.word	0x00f42400
 80081fc:	007a1200 	.word	0x007a1200

08008200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008204:	4b03      	ldr	r3, [pc, #12]	; (8008214 <HAL_RCC_GetHCLKFreq+0x14>)
 8008206:	681b      	ldr	r3, [r3, #0]
}
 8008208:	4618      	mov	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	200002e4 	.word	0x200002e4

08008218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800821c:	f7ff fff0 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008220:	4602      	mov	r2, r0
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	0a9b      	lsrs	r3, r3, #10
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	4903      	ldr	r1, [pc, #12]	; (800823c <HAL_RCC_GetPCLK1Freq+0x24>)
 800822e:	5ccb      	ldrb	r3, [r1, r3]
 8008230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008234:	4618      	mov	r0, r3
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40023800 	.word	0x40023800
 800823c:	08016430 	.word	0x08016430

08008240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008244:	f7ff ffdc 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008248:	4602      	mov	r2, r0
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	0b5b      	lsrs	r3, r3, #13
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	4903      	ldr	r1, [pc, #12]	; (8008264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008256:	5ccb      	ldrb	r3, [r1, r3]
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800825c:	4618      	mov	r0, r3
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40023800 	.word	0x40023800
 8008264:	08016430 	.word	0x08016430

08008268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e041      	b.n	80082fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fc fa7c 	bl	800478c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f000 fd0a 	bl	8008cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b01      	cmp	r3, #1
 800831a:	d001      	beq.n	8008320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e04e      	b.n	80083be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0201 	orr.w	r2, r2, #1
 8008336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a23      	ldr	r2, [pc, #140]	; (80083cc <HAL_TIM_Base_Start_IT+0xc4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d022      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x80>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834a:	d01d      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x80>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d018      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x80>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1e      	ldr	r2, [pc, #120]	; (80083d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x80>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a1c      	ldr	r2, [pc, #112]	; (80083d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00e      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x80>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a1b      	ldr	r2, [pc, #108]	; (80083dc <HAL_TIM_Base_Start_IT+0xd4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d009      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x80>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a19      	ldr	r2, [pc, #100]	; (80083e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d004      	beq.n	8008388 <HAL_TIM_Base_Start_IT+0x80>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a18      	ldr	r2, [pc, #96]	; (80083e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d111      	bne.n	80083ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b06      	cmp	r3, #6
 8008398:	d010      	beq.n	80083bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0201 	orr.w	r2, r2, #1
 80083a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083aa:	e007      	b.n	80083bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0201 	orr.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	40010000 	.word	0x40010000
 80083d0:	40000400 	.word	0x40000400
 80083d4:	40000800 	.word	0x40000800
 80083d8:	40000c00 	.word	0x40000c00
 80083dc:	40010400 	.word	0x40010400
 80083e0:	40014000 	.word	0x40014000
 80083e4:	40001800 	.word	0x40001800

080083e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6a1a      	ldr	r2, [r3, #32]
 8008406:	f241 1311 	movw	r3, #4369	; 0x1111
 800840a:	4013      	ands	r3, r2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10f      	bne.n	8008430 <HAL_TIM_Base_Stop_IT+0x48>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a1a      	ldr	r2, [r3, #32]
 8008416:	f240 4344 	movw	r3, #1092	; 0x444
 800841a:	4013      	ands	r3, r2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d107      	bne.n	8008430 <HAL_TIM_Base_Stop_IT+0x48>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0201 	bic.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e041      	b.n	80084dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d106      	bne.n	8008472 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f839 	bl	80084e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f000 fc1b 	bl	8008cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d109      	bne.n	800851c <HAL_TIM_PWM_Start+0x24>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b01      	cmp	r3, #1
 8008512:	bf14      	ite	ne
 8008514:	2301      	movne	r3, #1
 8008516:	2300      	moveq	r3, #0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	e022      	b.n	8008562 <HAL_TIM_PWM_Start+0x6a>
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b04      	cmp	r3, #4
 8008520:	d109      	bne.n	8008536 <HAL_TIM_PWM_Start+0x3e>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b01      	cmp	r3, #1
 800852c:	bf14      	ite	ne
 800852e:	2301      	movne	r3, #1
 8008530:	2300      	moveq	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	e015      	b.n	8008562 <HAL_TIM_PWM_Start+0x6a>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b08      	cmp	r3, #8
 800853a:	d109      	bne.n	8008550 <HAL_TIM_PWM_Start+0x58>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	e008      	b.n	8008562 <HAL_TIM_PWM_Start+0x6a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e07c      	b.n	8008664 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d104      	bne.n	800857a <HAL_TIM_PWM_Start+0x82>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008578:	e013      	b.n	80085a2 <HAL_TIM_PWM_Start+0xaa>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b04      	cmp	r3, #4
 800857e:	d104      	bne.n	800858a <HAL_TIM_PWM_Start+0x92>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008588:	e00b      	b.n	80085a2 <HAL_TIM_PWM_Start+0xaa>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b08      	cmp	r3, #8
 800858e:	d104      	bne.n	800859a <HAL_TIM_PWM_Start+0xa2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2202      	movs	r2, #2
 8008594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008598:	e003      	b.n	80085a2 <HAL_TIM_PWM_Start+0xaa>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2201      	movs	r2, #1
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fe7e 	bl	80092ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a2d      	ldr	r2, [pc, #180]	; (800866c <HAL_TIM_PWM_Start+0x174>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <HAL_TIM_PWM_Start+0xcc>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2c      	ldr	r2, [pc, #176]	; (8008670 <HAL_TIM_PWM_Start+0x178>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d101      	bne.n	80085c8 <HAL_TIM_PWM_Start+0xd0>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e000      	b.n	80085ca <HAL_TIM_PWM_Start+0xd2>
 80085c8:	2300      	movs	r3, #0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d007      	beq.n	80085de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a22      	ldr	r2, [pc, #136]	; (800866c <HAL_TIM_PWM_Start+0x174>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d022      	beq.n	800862e <HAL_TIM_PWM_Start+0x136>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f0:	d01d      	beq.n	800862e <HAL_TIM_PWM_Start+0x136>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a1f      	ldr	r2, [pc, #124]	; (8008674 <HAL_TIM_PWM_Start+0x17c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d018      	beq.n	800862e <HAL_TIM_PWM_Start+0x136>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a1d      	ldr	r2, [pc, #116]	; (8008678 <HAL_TIM_PWM_Start+0x180>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d013      	beq.n	800862e <HAL_TIM_PWM_Start+0x136>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a1c      	ldr	r2, [pc, #112]	; (800867c <HAL_TIM_PWM_Start+0x184>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00e      	beq.n	800862e <HAL_TIM_PWM_Start+0x136>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a16      	ldr	r2, [pc, #88]	; (8008670 <HAL_TIM_PWM_Start+0x178>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d009      	beq.n	800862e <HAL_TIM_PWM_Start+0x136>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a18      	ldr	r2, [pc, #96]	; (8008680 <HAL_TIM_PWM_Start+0x188>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d004      	beq.n	800862e <HAL_TIM_PWM_Start+0x136>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a16      	ldr	r2, [pc, #88]	; (8008684 <HAL_TIM_PWM_Start+0x18c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d111      	bne.n	8008652 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b06      	cmp	r3, #6
 800863e:	d010      	beq.n	8008662 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0201 	orr.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008650:	e007      	b.n	8008662 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	40010000 	.word	0x40010000
 8008670:	40010400 	.word	0x40010400
 8008674:	40000400 	.word	0x40000400
 8008678:	40000800 	.word	0x40000800
 800867c:	40000c00 	.word	0x40000c00
 8008680:	40014000 	.word	0x40014000
 8008684:	40001800 	.word	0x40001800

08008688 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2200      	movs	r2, #0
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f000 fe06 	bl	80092ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a2e      	ldr	r2, [pc, #184]	; (8008760 <HAL_TIM_PWM_Stop+0xd8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d004      	beq.n	80086b4 <HAL_TIM_PWM_Stop+0x2c>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a2d      	ldr	r2, [pc, #180]	; (8008764 <HAL_TIM_PWM_Stop+0xdc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d101      	bne.n	80086b8 <HAL_TIM_PWM_Stop+0x30>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <HAL_TIM_PWM_Stop+0x32>
 80086b8:	2300      	movs	r3, #0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d017      	beq.n	80086ee <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	f241 1311 	movw	r3, #4369	; 0x1111
 80086c8:	4013      	ands	r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10f      	bne.n	80086ee <HAL_TIM_PWM_Stop+0x66>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6a1a      	ldr	r2, [r3, #32]
 80086d4:	f240 4344 	movw	r3, #1092	; 0x444
 80086d8:	4013      	ands	r3, r2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d107      	bne.n	80086ee <HAL_TIM_PWM_Stop+0x66>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10f      	bne.n	800871e <HAL_TIM_PWM_Stop+0x96>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6a1a      	ldr	r2, [r3, #32]
 8008704:	f240 4344 	movw	r3, #1092	; 0x444
 8008708:	4013      	ands	r3, r2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d107      	bne.n	800871e <HAL_TIM_PWM_Stop+0x96>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0201 	bic.w	r2, r2, #1
 800871c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d104      	bne.n	800872e <HAL_TIM_PWM_Stop+0xa6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800872c:	e013      	b.n	8008756 <HAL_TIM_PWM_Stop+0xce>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b04      	cmp	r3, #4
 8008732:	d104      	bne.n	800873e <HAL_TIM_PWM_Stop+0xb6>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800873c:	e00b      	b.n	8008756 <HAL_TIM_PWM_Stop+0xce>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b08      	cmp	r3, #8
 8008742:	d104      	bne.n	800874e <HAL_TIM_PWM_Stop+0xc6>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800874c:	e003      	b.n	8008756 <HAL_TIM_PWM_Stop+0xce>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40010000 	.word	0x40010000
 8008764:	40010400 	.word	0x40010400

08008768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d020      	beq.n	80087cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01b      	beq.n	80087cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f06f 0202 	mvn.w	r2, #2
 800879c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fa65 	bl	8008c82 <HAL_TIM_IC_CaptureCallback>
 80087b8:	e005      	b.n	80087c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa57 	bl	8008c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa68 	bl	8008c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d020      	beq.n	8008818 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01b      	beq.n	8008818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f06f 0204 	mvn.w	r2, #4
 80087e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fa3f 	bl	8008c82 <HAL_TIM_IC_CaptureCallback>
 8008804:	e005      	b.n	8008812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa31 	bl	8008c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fa42 	bl	8008c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d020      	beq.n	8008864 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d01b      	beq.n	8008864 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f06f 0208 	mvn.w	r2, #8
 8008834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2204      	movs	r2, #4
 800883a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa19 	bl	8008c82 <HAL_TIM_IC_CaptureCallback>
 8008850:	e005      	b.n	800885e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fa0b 	bl	8008c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa1c 	bl	8008c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b00      	cmp	r3, #0
 800886c:	d020      	beq.n	80088b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01b      	beq.n	80088b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0210 	mvn.w	r2, #16
 8008880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2208      	movs	r2, #8
 8008886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f9f3 	bl	8008c82 <HAL_TIM_IC_CaptureCallback>
 800889c:	e005      	b.n	80088aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f9e5 	bl	8008c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f9f6 	bl	8008c96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f003 0301 	and.w	r3, r3, #1
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00c      	beq.n	80088d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0201 	mvn.w	r2, #1
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f9c3 	bl	8008c5a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00c      	beq.n	80088f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d007      	beq.n	80088f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fd86 	bl	8009404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00c      	beq.n	800891c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f9c7 	bl	8008caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00c      	beq.n	8008940 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f003 0320 	and.w	r3, r3, #32
 800892c:	2b00      	cmp	r3, #0
 800892e:	d007      	beq.n	8008940 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f06f 0220 	mvn.w	r2, #32
 8008938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fd58 	bl	80093f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008940:	bf00      	nop
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008962:	2302      	movs	r3, #2
 8008964:	e0ae      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b0c      	cmp	r3, #12
 8008972:	f200 809f 	bhi.w	8008ab4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	080089b1 	.word	0x080089b1
 8008980:	08008ab5 	.word	0x08008ab5
 8008984:	08008ab5 	.word	0x08008ab5
 8008988:	08008ab5 	.word	0x08008ab5
 800898c:	080089f1 	.word	0x080089f1
 8008990:	08008ab5 	.word	0x08008ab5
 8008994:	08008ab5 	.word	0x08008ab5
 8008998:	08008ab5 	.word	0x08008ab5
 800899c:	08008a33 	.word	0x08008a33
 80089a0:	08008ab5 	.word	0x08008ab5
 80089a4:	08008ab5 	.word	0x08008ab5
 80089a8:	08008ab5 	.word	0x08008ab5
 80089ac:	08008a73 	.word	0x08008a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fa2e 	bl	8008e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699a      	ldr	r2, [r3, #24]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0208 	orr.w	r2, r2, #8
 80089ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0204 	bic.w	r2, r2, #4
 80089da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6999      	ldr	r1, [r3, #24]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	619a      	str	r2, [r3, #24]
      break;
 80089ee:	e064      	b.n	8008aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68b9      	ldr	r1, [r7, #8]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 fa7e 	bl	8008ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6999      	ldr	r1, [r3, #24]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	021a      	lsls	r2, r3, #8
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	619a      	str	r2, [r3, #24]
      break;
 8008a30:	e043      	b.n	8008aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68b9      	ldr	r1, [r7, #8]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fad3 	bl	8008fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69da      	ldr	r2, [r3, #28]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f042 0208 	orr.w	r2, r2, #8
 8008a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69da      	ldr	r2, [r3, #28]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 0204 	bic.w	r2, r2, #4
 8008a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69d9      	ldr	r1, [r3, #28]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	691a      	ldr	r2, [r3, #16]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	61da      	str	r2, [r3, #28]
      break;
 8008a70:	e023      	b.n	8008aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 fb27 	bl	80090cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69da      	ldr	r2, [r3, #28]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69d9      	ldr	r1, [r3, #28]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	021a      	lsls	r2, r3, #8
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	61da      	str	r2, [r3, #28]
      break;
 8008ab2:	e002      	b.n	8008aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ab8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e0b4      	b.n	8008c52 <HAL_TIM_ConfigClockSource+0x186>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2202      	movs	r2, #2
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b20:	d03e      	beq.n	8008ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8008b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b26:	f200 8087 	bhi.w	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2e:	f000 8086 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x172>
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b36:	d87f      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b38:	2b70      	cmp	r3, #112	; 0x70
 8008b3a:	d01a      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0xa6>
 8008b3c:	2b70      	cmp	r3, #112	; 0x70
 8008b3e:	d87b      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b40:	2b60      	cmp	r3, #96	; 0x60
 8008b42:	d050      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x11a>
 8008b44:	2b60      	cmp	r3, #96	; 0x60
 8008b46:	d877      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b48:	2b50      	cmp	r3, #80	; 0x50
 8008b4a:	d03c      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8008b4c:	2b50      	cmp	r3, #80	; 0x50
 8008b4e:	d873      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b50:	2b40      	cmp	r3, #64	; 0x40
 8008b52:	d058      	beq.n	8008c06 <HAL_TIM_ConfigClockSource+0x13a>
 8008b54:	2b40      	cmp	r3, #64	; 0x40
 8008b56:	d86f      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b58:	2b30      	cmp	r3, #48	; 0x30
 8008b5a:	d064      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x15a>
 8008b5c:	2b30      	cmp	r3, #48	; 0x30
 8008b5e:	d86b      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d060      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x15a>
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d867      	bhi.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d05c      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x15a>
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	d05a      	beq.n	8008c26 <HAL_TIM_ConfigClockSource+0x15a>
 8008b70:	e062      	b.n	8008c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b82:	f000 fb73 	bl	800926c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	609a      	str	r2, [r3, #8]
      break;
 8008b9e:	e04f      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bb0:	f000 fb5c 	bl	800926c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bc2:	609a      	str	r2, [r3, #8]
      break;
 8008bc4:	e03c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f000 fad0 	bl	8009178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2150      	movs	r1, #80	; 0x50
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fb29 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008be4:	e02c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f000 faef 	bl	80091d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2160      	movs	r1, #96	; 0x60
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fb19 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008c04:	e01c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c12:	461a      	mov	r2, r3
 8008c14:	f000 fab0 	bl	8009178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2140      	movs	r1, #64	; 0x40
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f000 fb09 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008c24:	e00c      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f000 fb00 	bl	8009236 <TIM_ITRx_SetConfig>
      break;
 8008c36:	e003      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c3c:	e000      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b083      	sub	sp, #12
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c8a:	bf00      	nop
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b083      	sub	sp, #12
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c9e:	bf00      	nop
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
	...

08008cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a46      	ldr	r2, [pc, #280]	; (8008dec <TIM_Base_SetConfig+0x12c>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d013      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cde:	d00f      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a43      	ldr	r2, [pc, #268]	; (8008df0 <TIM_Base_SetConfig+0x130>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00b      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a42      	ldr	r2, [pc, #264]	; (8008df4 <TIM_Base_SetConfig+0x134>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a41      	ldr	r2, [pc, #260]	; (8008df8 <TIM_Base_SetConfig+0x138>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_Base_SetConfig+0x40>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a40      	ldr	r2, [pc, #256]	; (8008dfc <TIM_Base_SetConfig+0x13c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d108      	bne.n	8008d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a35      	ldr	r2, [pc, #212]	; (8008dec <TIM_Base_SetConfig+0x12c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d02b      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d20:	d027      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a32      	ldr	r2, [pc, #200]	; (8008df0 <TIM_Base_SetConfig+0x130>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d023      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a31      	ldr	r2, [pc, #196]	; (8008df4 <TIM_Base_SetConfig+0x134>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d01f      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a30      	ldr	r2, [pc, #192]	; (8008df8 <TIM_Base_SetConfig+0x138>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d01b      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a2f      	ldr	r2, [pc, #188]	; (8008dfc <TIM_Base_SetConfig+0x13c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d017      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a2e      	ldr	r2, [pc, #184]	; (8008e00 <TIM_Base_SetConfig+0x140>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a2d      	ldr	r2, [pc, #180]	; (8008e04 <TIM_Base_SetConfig+0x144>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00f      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a2c      	ldr	r2, [pc, #176]	; (8008e08 <TIM_Base_SetConfig+0x148>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00b      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a2b      	ldr	r2, [pc, #172]	; (8008e0c <TIM_Base_SetConfig+0x14c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d007      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a2a      	ldr	r2, [pc, #168]	; (8008e10 <TIM_Base_SetConfig+0x150>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d003      	beq.n	8008d72 <TIM_Base_SetConfig+0xb2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a29      	ldr	r2, [pc, #164]	; (8008e14 <TIM_Base_SetConfig+0x154>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d108      	bne.n	8008d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a10      	ldr	r2, [pc, #64]	; (8008dec <TIM_Base_SetConfig+0x12c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_Base_SetConfig+0xf8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a12      	ldr	r2, [pc, #72]	; (8008dfc <TIM_Base_SetConfig+0x13c>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d103      	bne.n	8008dc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	691a      	ldr	r2, [r3, #16]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d105      	bne.n	8008dde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f023 0201 	bic.w	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	611a      	str	r2, [r3, #16]
  }
}
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800
 8008df8:	40000c00 	.word	0x40000c00
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400
 8008e08:	40014800 	.word	0x40014800
 8008e0c:	40001800 	.word	0x40001800
 8008e10:	40001c00 	.word	0x40001c00
 8008e14:	40002000 	.word	0x40002000

08008e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	f023 0201 	bic.w	r2, r3, #1
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0303 	bic.w	r3, r3, #3
 8008e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f023 0302 	bic.w	r3, r3, #2
 8008e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <TIM_OC1_SetConfig+0xd8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d003      	beq.n	8008e7c <TIM_OC1_SetConfig+0x64>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a1f      	ldr	r2, [pc, #124]	; (8008ef4 <TIM_OC1_SetConfig+0xdc>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d10c      	bne.n	8008e96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f023 0308 	bic.w	r3, r3, #8
 8008e82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f023 0304 	bic.w	r3, r3, #4
 8008e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <TIM_OC1_SetConfig+0xd8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d003      	beq.n	8008ea6 <TIM_OC1_SetConfig+0x8e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a14      	ldr	r2, [pc, #80]	; (8008ef4 <TIM_OC1_SetConfig+0xdc>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d111      	bne.n	8008eca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	621a      	str	r2, [r3, #32]
}
 8008ee4:	bf00      	nop
 8008ee6:	371c      	adds	r7, #28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400

08008ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	f023 0210 	bic.w	r2, r3, #16
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	021b      	lsls	r3, r3, #8
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f023 0320 	bic.w	r3, r3, #32
 8008f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a22      	ldr	r2, [pc, #136]	; (8008fdc <TIM_OC2_SetConfig+0xe4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_OC2_SetConfig+0x68>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a21      	ldr	r2, [pc, #132]	; (8008fe0 <TIM_OC2_SetConfig+0xe8>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10d      	bne.n	8008f7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a17      	ldr	r2, [pc, #92]	; (8008fdc <TIM_OC2_SetConfig+0xe4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d003      	beq.n	8008f8c <TIM_OC2_SetConfig+0x94>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a16      	ldr	r2, [pc, #88]	; (8008fe0 <TIM_OC2_SetConfig+0xe8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d113      	bne.n	8008fb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	621a      	str	r2, [r3, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40010000 	.word	0x40010000
 8008fe0:	40010400 	.word	0x40010400

08008fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0303 	bic.w	r3, r3, #3
 800901a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800902c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a21      	ldr	r2, [pc, #132]	; (80090c4 <TIM_OC3_SetConfig+0xe0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_OC3_SetConfig+0x66>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a20      	ldr	r2, [pc, #128]	; (80090c8 <TIM_OC3_SetConfig+0xe4>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d10d      	bne.n	8009066 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	021b      	lsls	r3, r3, #8
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a16      	ldr	r2, [pc, #88]	; (80090c4 <TIM_OC3_SetConfig+0xe0>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d003      	beq.n	8009076 <TIM_OC3_SetConfig+0x92>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a15      	ldr	r2, [pc, #84]	; (80090c8 <TIM_OC3_SetConfig+0xe4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d113      	bne.n	800909e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800907c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	4313      	orrs	r3, r2
 800909c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	621a      	str	r2, [r3, #32]
}
 80090b8:	bf00      	nop
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	40010000 	.word	0x40010000
 80090c8:	40010400 	.word	0x40010400

080090cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	031b      	lsls	r3, r3, #12
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a12      	ldr	r2, [pc, #72]	; (8009170 <TIM_OC4_SetConfig+0xa4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d003      	beq.n	8009134 <TIM_OC4_SetConfig+0x68>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a11      	ldr	r2, [pc, #68]	; (8009174 <TIM_OC4_SetConfig+0xa8>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d109      	bne.n	8009148 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800913a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	019b      	lsls	r3, r3, #6
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	4313      	orrs	r3, r2
 8009146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	621a      	str	r2, [r3, #32]
}
 8009162:	bf00      	nop
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010000 	.word	0x40010000
 8009174:	40010400 	.word	0x40010400

08009178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f023 0201 	bic.w	r2, r3, #1
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f023 030a 	bic.w	r3, r3, #10
 80091b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	621a      	str	r2, [r3, #32]
}
 80091ca:	bf00      	nop
 80091cc:	371c      	adds	r7, #28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b087      	sub	sp, #28
 80091da:	af00      	add	r7, sp, #0
 80091dc:	60f8      	str	r0, [r7, #12]
 80091de:	60b9      	str	r1, [r7, #8]
 80091e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	f023 0210 	bic.w	r2, r3, #16
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	031b      	lsls	r3, r3, #12
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009212:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	4313      	orrs	r3, r2
 800921c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	621a      	str	r2, [r3, #32]
}
 800922a:	bf00      	nop
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009236:	b480      	push	{r7}
 8009238:	b085      	sub	sp, #20
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4313      	orrs	r3, r2
 8009254:	f043 0307 	orr.w	r3, r3, #7
 8009258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	609a      	str	r2, [r3, #8]
}
 8009260:	bf00      	nop
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	021a      	lsls	r2, r3, #8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	431a      	orrs	r2, r3
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4313      	orrs	r3, r2
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	609a      	str	r2, [r3, #8]
}
 80092a0:	bf00      	nop
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f003 031f 	and.w	r3, r3, #31
 80092be:	2201      	movs	r2, #1
 80092c0:	fa02 f303 	lsl.w	r3, r2, r3
 80092c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6a1a      	ldr	r2, [r3, #32]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	43db      	mvns	r3, r3
 80092ce:	401a      	ands	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6a1a      	ldr	r2, [r3, #32]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	f003 031f 	and.w	r3, r3, #31
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	fa01 f303 	lsl.w	r3, r1, r3
 80092e4:	431a      	orrs	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
	...

080092f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d101      	bne.n	8009310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800930c:	2302      	movs	r3, #2
 800930e:	e05a      	b.n	80093c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a21      	ldr	r2, [pc, #132]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d022      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935c:	d01d      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a1d      	ldr	r2, [pc, #116]	; (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d018      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1b      	ldr	r2, [pc, #108]	; (80093dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d013      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a1a      	ldr	r2, [pc, #104]	; (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00e      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a18      	ldr	r2, [pc, #96]	; (80093e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d009      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a17      	ldr	r2, [pc, #92]	; (80093e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d004      	beq.n	800939a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a15      	ldr	r2, [pc, #84]	; (80093ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d10c      	bne.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	40010000 	.word	0x40010000
 80093d8:	40000400 	.word	0x40000400
 80093dc:	40000800 	.word	0x40000800
 80093e0:	40000c00 	.word	0x40000c00
 80093e4:	40010400 	.word	0x40010400
 80093e8:	40014000 	.word	0x40014000
 80093ec:	40001800 	.word	0x40001800

080093f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093f8:	bf00      	nop
 80093fa:	370c      	adds	r7, #12
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e042      	b.n	80094b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d106      	bne.n	8009444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7fb fa1c 	bl	800487c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2224      	movs	r2, #36	; 0x24
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68da      	ldr	r2, [r3, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800945a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fc85 	bl	8009d6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	691a      	ldr	r2, [r3, #16]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695a      	ldr	r2, [r3, #20]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2220      	movs	r2, #32
 800949c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b0ba      	sub	sp, #232	; 0xe8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80094de:	2300      	movs	r3, #0
 80094e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80094f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10f      	bne.n	800951e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b00      	cmp	r3, #0
 8009508:	d009      	beq.n	800951e <HAL_UART_IRQHandler+0x66>
 800950a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fb69 	bl	8009bee <UART_Receive_IT>
      return;
 800951c:	e25b      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800951e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 80de 	beq.w	80096e4 <HAL_UART_IRQHandler+0x22c>
 8009528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d106      	bne.n	8009542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009538:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 80d1 	beq.w	80096e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <HAL_UART_IRQHandler+0xae>
 800954e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955e:	f043 0201 	orr.w	r2, r3, #1
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <HAL_UART_IRQHandler+0xd2>
 8009572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009582:	f043 0202 	orr.w	r2, r3, #2
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800958a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <HAL_UART_IRQHandler+0xf6>
 8009596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d005      	beq.n	80095ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a6:	f043 0204 	orr.w	r2, r3, #4
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b2:	f003 0308 	and.w	r3, r3, #8
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d011      	beq.n	80095de <HAL_UART_IRQHandler+0x126>
 80095ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095be:	f003 0320 	and.w	r3, r3, #32
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d005      	beq.n	80095de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	f043 0208 	orr.w	r2, r3, #8
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 81f2 	beq.w	80099cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <HAL_UART_IRQHandler+0x14e>
 80095f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f8:	f003 0320 	and.w	r3, r3, #32
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 faf4 	bl	8009bee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009610:	2b40      	cmp	r3, #64	; 0x40
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009622:	f003 0308 	and.w	r3, r3, #8
 8009626:	2b00      	cmp	r3, #0
 8009628:	d103      	bne.n	8009632 <HAL_UART_IRQHandler+0x17a>
 800962a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800962e:	2b00      	cmp	r3, #0
 8009630:	d04f      	beq.n	80096d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f9fc 	bl	8009a30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009642:	2b40      	cmp	r3, #64	; 0x40
 8009644:	d141      	bne.n	80096ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3314      	adds	r3, #20
 800964c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009654:	e853 3f00 	ldrex	r3, [r3]
 8009658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800965c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3314      	adds	r3, #20
 800966e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009672:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800967e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800968a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1d9      	bne.n	8009646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009696:	2b00      	cmp	r3, #0
 8009698:	d013      	beq.n	80096c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	4a7e      	ldr	r2, [pc, #504]	; (8009898 <HAL_UART_IRQHandler+0x3e0>)
 80096a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fc fab4 	bl	8005c14 <HAL_DMA_Abort_IT>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d016      	beq.n	80096e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	e00e      	b.n	80096e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f99e 	bl	8009a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c8:	e00a      	b.n	80096e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f99a 	bl	8009a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d0:	e006      	b.n	80096e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f996 	bl	8009a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80096de:	e175      	b.n	80099cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096e0:	bf00      	nop
    return;
 80096e2:	e173      	b.n	80099cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	f040 814f 	bne.w	800998c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f2:	f003 0310 	and.w	r3, r3, #16
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8148 	beq.w	800998c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80096fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 8141 	beq.w	800998c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800970a:	2300      	movs	r3, #0
 800970c:	60bb      	str	r3, [r7, #8]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	60bb      	str	r3, [r7, #8]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972a:	2b40      	cmp	r3, #64	; 0x40
 800972c:	f040 80b6 	bne.w	800989c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800973c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 8145 	beq.w	80099d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800974a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800974e:	429a      	cmp	r2, r3
 8009750:	f080 813e 	bcs.w	80099d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800975a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009766:	f000 8088 	beq.w	800987a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	330c      	adds	r3, #12
 8009770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009796:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800979a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1d9      	bne.n	800976a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3314      	adds	r3, #20
 80097bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097c8:	f023 0301 	bic.w	r3, r3, #1
 80097cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3314      	adds	r3, #20
 80097d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097e6:	e841 2300 	strex	r3, r2, [r1]
 80097ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1e1      	bne.n	80097b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3314      	adds	r3, #20
 80097f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3314      	adds	r3, #20
 8009812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009816:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009818:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800981c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e3      	bne.n	80097f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2220      	movs	r2, #32
 800982e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	330c      	adds	r3, #12
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984a:	f023 0310 	bic.w	r3, r3, #16
 800984e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	330c      	adds	r3, #12
 8009858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800985c:	65ba      	str	r2, [r7, #88]	; 0x58
 800985e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009862:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800986a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e3      	bne.n	8009838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009874:	4618      	mov	r0, r3
 8009876:	f7fc f95d 	bl	8005b34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2202      	movs	r2, #2
 800987e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009888:	b29b      	uxth	r3, r3
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	b29b      	uxth	r3, r3
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f8c1 	bl	8009a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009896:	e09b      	b.n	80099d0 <HAL_UART_IRQHandler+0x518>
 8009898:	08009af7 	.word	0x08009af7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 808e 	beq.w	80099d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80098b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8089 	beq.w	80099d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	330c      	adds	r3, #12
 80098c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098cc:	e853 3f00 	ldrex	r3, [r3]
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	330c      	adds	r3, #12
 80098e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80098e6:	647a      	str	r2, [r7, #68]	; 0x44
 80098e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e3      	bne.n	80098c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3314      	adds	r3, #20
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	623b      	str	r3, [r7, #32]
   return(result);
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	f023 0301 	bic.w	r3, r3, #1
 8009910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3314      	adds	r3, #20
 800991a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800991e:	633a      	str	r2, [r7, #48]	; 0x30
 8009920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e3      	bne.n	80098fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	330c      	adds	r3, #12
 8009946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0310 	bic.w	r3, r3, #16
 8009956:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	330c      	adds	r3, #12
 8009960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009964:	61fa      	str	r2, [r7, #28]
 8009966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	69b9      	ldr	r1, [r7, #24]
 800996a:	69fa      	ldr	r2, [r7, #28]
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	617b      	str	r3, [r7, #20]
   return(result);
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e3      	bne.n	8009940 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800997e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f847 	bl	8009a18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800998a:	e023      	b.n	80099d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800998c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <HAL_UART_IRQHandler+0x4f4>
 8009998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f8ba 	bl	8009b1e <UART_Transmit_IT>
    return;
 80099aa:	e014      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00e      	beq.n	80099d6 <HAL_UART_IRQHandler+0x51e>
 80099b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d008      	beq.n	80099d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8fa 	bl	8009bbe <UART_EndTransmit_IT>
    return;
 80099ca:	e004      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80099cc:	bf00      	nop
 80099ce:	e002      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80099d4:	bf00      	nop
  }
}
 80099d6:	37e8      	adds	r7, #232	; 0xe8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b095      	sub	sp, #84	; 0x54
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	330c      	adds	r3, #12
 8009a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a42:	e853 3f00 	ldrex	r3, [r3]
 8009a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	330c      	adds	r3, #12
 8009a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a58:	643a      	str	r2, [r7, #64]	; 0x40
 8009a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e5      	bne.n	8009a38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3314      	adds	r3, #20
 8009a72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	f023 0301 	bic.w	r3, r3, #1
 8009a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3314      	adds	r3, #20
 8009a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e5      	bne.n	8009a6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d119      	bne.n	8009adc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	330c      	adds	r3, #12
 8009aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	f023 0310 	bic.w	r3, r3, #16
 8009abe:	647b      	str	r3, [r7, #68]	; 0x44
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	330c      	adds	r3, #12
 8009ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ac8:	61ba      	str	r2, [r7, #24]
 8009aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009acc:	6979      	ldr	r1, [r7, #20]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	e841 2300 	strex	r3, r2, [r1]
 8009ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1e5      	bne.n	8009aa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2220      	movs	r2, #32
 8009ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009aea:	bf00      	nop
 8009aec:	3754      	adds	r7, #84	; 0x54
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f7ff ff77 	bl	8009a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b16:	bf00      	nop
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b085      	sub	sp, #20
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b21      	cmp	r3, #33	; 0x21
 8009b30:	d13e      	bne.n	8009bb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b3a:	d114      	bne.n	8009b66 <UART_Transmit_IT+0x48>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d110      	bne.n	8009b66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	1c9a      	adds	r2, r3, #2
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	621a      	str	r2, [r3, #32]
 8009b64:	e008      	b.n	8009b78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	1c59      	adds	r1, r3, #1
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	6211      	str	r1, [r2, #32]
 8009b70:	781a      	ldrb	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	4619      	mov	r1, r3
 8009b86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10f      	bne.n	8009bac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009baa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	e000      	b.n	8009bb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bb0:	2302      	movs	r3, #2
  }
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff fefc 	bl	80099dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b08c      	sub	sp, #48	; 0x30
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b22      	cmp	r3, #34	; 0x22
 8009c00:	f040 80ae 	bne.w	8009d60 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c0c:	d117      	bne.n	8009c3e <UART_Receive_IT+0x50>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d113      	bne.n	8009c3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	1c9a      	adds	r2, r3, #2
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8009c3c:	e026      	b.n	8009c8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c50:	d007      	beq.n	8009c62 <UART_Receive_IT+0x74>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <UART_Receive_IT+0x82>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d106      	bne.n	8009c70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	701a      	strb	r2, [r3, #0]
 8009c6e:	e008      	b.n	8009c82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d15d      	bne.n	8009d5c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68da      	ldr	r2, [r3, #12]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0220 	bic.w	r2, r2, #32
 8009cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68da      	ldr	r2, [r3, #12]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695a      	ldr	r2, [r3, #20]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0201 	bic.w	r2, r2, #1
 8009cce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d135      	bne.n	8009d52 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	330c      	adds	r3, #12
 8009cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	f023 0310 	bic.w	r3, r3, #16
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	330c      	adds	r3, #12
 8009d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0c:	623a      	str	r2, [r7, #32]
 8009d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d10:	69f9      	ldr	r1, [r7, #28]
 8009d12:	6a3a      	ldr	r2, [r7, #32]
 8009d14:	e841 2300 	strex	r3, r2, [r1]
 8009d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1e5      	bne.n	8009cec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0310 	and.w	r3, r3, #16
 8009d2a:	2b10      	cmp	r3, #16
 8009d2c:	d10a      	bne.n	8009d44 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60fb      	str	r3, [r7, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff fe64 	bl	8009a18 <HAL_UARTEx_RxEventCallback>
 8009d50:	e002      	b.n	8009d58 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff fe4c 	bl	80099f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e002      	b.n	8009d62 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e000      	b.n	8009d62 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d60:	2302      	movs	r3, #2
  }
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3730      	adds	r7, #48	; 0x30
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d70:	b0c0      	sub	sp, #256	; 0x100
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d88:	68d9      	ldr	r1, [r3, #12]
 8009d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	ea40 0301 	orr.w	r3, r0, r1
 8009d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	431a      	orrs	r2, r3
 8009da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	431a      	orrs	r2, r3
 8009dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009dc4:	f021 010c 	bic.w	r1, r1, #12
 8009dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	695b      	ldr	r3, [r3, #20]
 8009dde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de6:	6999      	ldr	r1, [r3, #24]
 8009de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	ea40 0301 	orr.w	r3, r0, r1
 8009df2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4b8f      	ldr	r3, [pc, #572]	; (800a038 <UART_SetConfig+0x2cc>)
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d005      	beq.n	8009e0c <UART_SetConfig+0xa0>
 8009e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4b8d      	ldr	r3, [pc, #564]	; (800a03c <UART_SetConfig+0x2d0>)
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d104      	bne.n	8009e16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e0c:	f7fe fa18 	bl	8008240 <HAL_RCC_GetPCLK2Freq>
 8009e10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e14:	e003      	b.n	8009e1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e16:	f7fe f9ff 	bl	8008218 <HAL_RCC_GetPCLK1Freq>
 8009e1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e28:	f040 810c 	bne.w	800a044 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e30:	2200      	movs	r2, #0
 8009e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e3e:	4622      	mov	r2, r4
 8009e40:	462b      	mov	r3, r5
 8009e42:	1891      	adds	r1, r2, r2
 8009e44:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e46:	415b      	adcs	r3, r3
 8009e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e4e:	4621      	mov	r1, r4
 8009e50:	eb12 0801 	adds.w	r8, r2, r1
 8009e54:	4629      	mov	r1, r5
 8009e56:	eb43 0901 	adc.w	r9, r3, r1
 8009e5a:	f04f 0200 	mov.w	r2, #0
 8009e5e:	f04f 0300 	mov.w	r3, #0
 8009e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e6e:	4690      	mov	r8, r2
 8009e70:	4699      	mov	r9, r3
 8009e72:	4623      	mov	r3, r4
 8009e74:	eb18 0303 	adds.w	r3, r8, r3
 8009e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e7c:	462b      	mov	r3, r5
 8009e7e:	eb49 0303 	adc.w	r3, r9, r3
 8009e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009e96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	18db      	adds	r3, r3, r3
 8009e9e:	653b      	str	r3, [r7, #80]	; 0x50
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	eb42 0303 	adc.w	r3, r2, r3
 8009ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8009ea8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009eac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009eb0:	f7f6 feda 	bl	8000c68 <__aeabi_uldivmod>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4b61      	ldr	r3, [pc, #388]	; (800a040 <UART_SetConfig+0x2d4>)
 8009eba:	fba3 2302 	umull	r2, r3, r3, r2
 8009ebe:	095b      	lsrs	r3, r3, #5
 8009ec0:	011c      	lsls	r4, r3, #4
 8009ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ecc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009ed0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009ed4:	4642      	mov	r2, r8
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	1891      	adds	r1, r2, r2
 8009eda:	64b9      	str	r1, [r7, #72]	; 0x48
 8009edc:	415b      	adcs	r3, r3
 8009ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ee0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009ee4:	4641      	mov	r1, r8
 8009ee6:	eb12 0a01 	adds.w	sl, r2, r1
 8009eea:	4649      	mov	r1, r9
 8009eec:	eb43 0b01 	adc.w	fp, r3, r1
 8009ef0:	f04f 0200 	mov.w	r2, #0
 8009ef4:	f04f 0300 	mov.w	r3, #0
 8009ef8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009efc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f04:	4692      	mov	sl, r2
 8009f06:	469b      	mov	fp, r3
 8009f08:	4643      	mov	r3, r8
 8009f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8009f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f12:	464b      	mov	r3, r9
 8009f14:	eb4b 0303 	adc.w	r3, fp, r3
 8009f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f30:	460b      	mov	r3, r1
 8009f32:	18db      	adds	r3, r3, r3
 8009f34:	643b      	str	r3, [r7, #64]	; 0x40
 8009f36:	4613      	mov	r3, r2
 8009f38:	eb42 0303 	adc.w	r3, r2, r3
 8009f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f46:	f7f6 fe8f 	bl	8000c68 <__aeabi_uldivmod>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4611      	mov	r1, r2
 8009f50:	4b3b      	ldr	r3, [pc, #236]	; (800a040 <UART_SetConfig+0x2d4>)
 8009f52:	fba3 2301 	umull	r2, r3, r3, r1
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	2264      	movs	r2, #100	; 0x64
 8009f5a:	fb02 f303 	mul.w	r3, r2, r3
 8009f5e:	1acb      	subs	r3, r1, r3
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009f66:	4b36      	ldr	r3, [pc, #216]	; (800a040 <UART_SetConfig+0x2d4>)
 8009f68:	fba3 2302 	umull	r2, r3, r3, r2
 8009f6c:	095b      	lsrs	r3, r3, #5
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009f74:	441c      	add	r4, r3
 8009f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009f84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	1891      	adds	r1, r2, r2
 8009f8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009f90:	415b      	adcs	r3, r3
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009f98:	4641      	mov	r1, r8
 8009f9a:	1851      	adds	r1, r2, r1
 8009f9c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f9e:	4649      	mov	r1, r9
 8009fa0:	414b      	adcs	r3, r1
 8009fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	f04f 0300 	mov.w	r3, #0
 8009fac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009fb0:	4659      	mov	r1, fp
 8009fb2:	00cb      	lsls	r3, r1, #3
 8009fb4:	4651      	mov	r1, sl
 8009fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fba:	4651      	mov	r1, sl
 8009fbc:	00ca      	lsls	r2, r1, #3
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4642      	mov	r2, r8
 8009fc6:	189b      	adds	r3, r3, r2
 8009fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fcc:	464b      	mov	r3, r9
 8009fce:	460a      	mov	r2, r1
 8009fd0:	eb42 0303 	adc.w	r3, r2, r3
 8009fd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009fe4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009fe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009fec:	460b      	mov	r3, r1
 8009fee:	18db      	adds	r3, r3, r3
 8009ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	eb42 0303 	adc.w	r3, r2, r3
 8009ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ffa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ffe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a002:	f7f6 fe31 	bl	8000c68 <__aeabi_uldivmod>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4b0d      	ldr	r3, [pc, #52]	; (800a040 <UART_SetConfig+0x2d4>)
 800a00c:	fba3 1302 	umull	r1, r3, r3, r2
 800a010:	095b      	lsrs	r3, r3, #5
 800a012:	2164      	movs	r1, #100	; 0x64
 800a014:	fb01 f303 	mul.w	r3, r1, r3
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	3332      	adds	r3, #50	; 0x32
 800a01e:	4a08      	ldr	r2, [pc, #32]	; (800a040 <UART_SetConfig+0x2d4>)
 800a020:	fba2 2303 	umull	r2, r3, r2, r3
 800a024:	095b      	lsrs	r3, r3, #5
 800a026:	f003 0207 	and.w	r2, r3, #7
 800a02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4422      	add	r2, r4
 800a032:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a034:	e106      	b.n	800a244 <UART_SetConfig+0x4d8>
 800a036:	bf00      	nop
 800a038:	40011000 	.word	0x40011000
 800a03c:	40011400 	.word	0x40011400
 800a040:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a04e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a052:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a056:	4642      	mov	r2, r8
 800a058:	464b      	mov	r3, r9
 800a05a:	1891      	adds	r1, r2, r2
 800a05c:	6239      	str	r1, [r7, #32]
 800a05e:	415b      	adcs	r3, r3
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
 800a062:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a066:	4641      	mov	r1, r8
 800a068:	1854      	adds	r4, r2, r1
 800a06a:	4649      	mov	r1, r9
 800a06c:	eb43 0501 	adc.w	r5, r3, r1
 800a070:	f04f 0200 	mov.w	r2, #0
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	00eb      	lsls	r3, r5, #3
 800a07a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a07e:	00e2      	lsls	r2, r4, #3
 800a080:	4614      	mov	r4, r2
 800a082:	461d      	mov	r5, r3
 800a084:	4643      	mov	r3, r8
 800a086:	18e3      	adds	r3, r4, r3
 800a088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a08c:	464b      	mov	r3, r9
 800a08e:	eb45 0303 	adc.w	r3, r5, r3
 800a092:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0a6:	f04f 0200 	mov.w	r2, #0
 800a0aa:	f04f 0300 	mov.w	r3, #0
 800a0ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	008b      	lsls	r3, r1, #2
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0bc:	4621      	mov	r1, r4
 800a0be:	008a      	lsls	r2, r1, #2
 800a0c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a0c4:	f7f6 fdd0 	bl	8000c68 <__aeabi_uldivmod>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4b60      	ldr	r3, [pc, #384]	; (800a250 <UART_SetConfig+0x4e4>)
 800a0ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a0d2:	095b      	lsrs	r3, r3, #5
 800a0d4:	011c      	lsls	r4, r3, #4
 800a0d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a0e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	464b      	mov	r3, r9
 800a0ec:	1891      	adds	r1, r2, r2
 800a0ee:	61b9      	str	r1, [r7, #24]
 800a0f0:	415b      	adcs	r3, r3
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0f8:	4641      	mov	r1, r8
 800a0fa:	1851      	adds	r1, r2, r1
 800a0fc:	6139      	str	r1, [r7, #16]
 800a0fe:	4649      	mov	r1, r9
 800a100:	414b      	adcs	r3, r1
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	f04f 0200 	mov.w	r2, #0
 800a108:	f04f 0300 	mov.w	r3, #0
 800a10c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a110:	4659      	mov	r1, fp
 800a112:	00cb      	lsls	r3, r1, #3
 800a114:	4651      	mov	r1, sl
 800a116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a11a:	4651      	mov	r1, sl
 800a11c:	00ca      	lsls	r2, r1, #3
 800a11e:	4610      	mov	r0, r2
 800a120:	4619      	mov	r1, r3
 800a122:	4603      	mov	r3, r0
 800a124:	4642      	mov	r2, r8
 800a126:	189b      	adds	r3, r3, r2
 800a128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a12c:	464b      	mov	r3, r9
 800a12e:	460a      	mov	r2, r1
 800a130:	eb42 0303 	adc.w	r3, r2, r3
 800a134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	67bb      	str	r3, [r7, #120]	; 0x78
 800a142:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a144:	f04f 0200 	mov.w	r2, #0
 800a148:	f04f 0300 	mov.w	r3, #0
 800a14c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a150:	4649      	mov	r1, r9
 800a152:	008b      	lsls	r3, r1, #2
 800a154:	4641      	mov	r1, r8
 800a156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a15a:	4641      	mov	r1, r8
 800a15c:	008a      	lsls	r2, r1, #2
 800a15e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a162:	f7f6 fd81 	bl	8000c68 <__aeabi_uldivmod>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4611      	mov	r1, r2
 800a16c:	4b38      	ldr	r3, [pc, #224]	; (800a250 <UART_SetConfig+0x4e4>)
 800a16e:	fba3 2301 	umull	r2, r3, r3, r1
 800a172:	095b      	lsrs	r3, r3, #5
 800a174:	2264      	movs	r2, #100	; 0x64
 800a176:	fb02 f303 	mul.w	r3, r2, r3
 800a17a:	1acb      	subs	r3, r1, r3
 800a17c:	011b      	lsls	r3, r3, #4
 800a17e:	3332      	adds	r3, #50	; 0x32
 800a180:	4a33      	ldr	r2, [pc, #204]	; (800a250 <UART_SetConfig+0x4e4>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a18c:	441c      	add	r4, r3
 800a18e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a192:	2200      	movs	r2, #0
 800a194:	673b      	str	r3, [r7, #112]	; 0x70
 800a196:	677a      	str	r2, [r7, #116]	; 0x74
 800a198:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a19c:	4642      	mov	r2, r8
 800a19e:	464b      	mov	r3, r9
 800a1a0:	1891      	adds	r1, r2, r2
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	415b      	adcs	r3, r3
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1ac:	4641      	mov	r1, r8
 800a1ae:	1851      	adds	r1, r2, r1
 800a1b0:	6039      	str	r1, [r7, #0]
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	414b      	adcs	r3, r1
 800a1b6:	607b      	str	r3, [r7, #4]
 800a1b8:	f04f 0200 	mov.w	r2, #0
 800a1bc:	f04f 0300 	mov.w	r3, #0
 800a1c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1c4:	4659      	mov	r1, fp
 800a1c6:	00cb      	lsls	r3, r1, #3
 800a1c8:	4651      	mov	r1, sl
 800a1ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1ce:	4651      	mov	r1, sl
 800a1d0:	00ca      	lsls	r2, r1, #3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	4642      	mov	r2, r8
 800a1da:	189b      	adds	r3, r3, r2
 800a1dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1de:	464b      	mov	r3, r9
 800a1e0:	460a      	mov	r2, r1
 800a1e2:	eb42 0303 	adc.w	r3, r2, r3
 800a1e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1f2:	667a      	str	r2, [r7, #100]	; 0x64
 800a1f4:	f04f 0200 	mov.w	r2, #0
 800a1f8:	f04f 0300 	mov.w	r3, #0
 800a1fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a200:	4649      	mov	r1, r9
 800a202:	008b      	lsls	r3, r1, #2
 800a204:	4641      	mov	r1, r8
 800a206:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a20a:	4641      	mov	r1, r8
 800a20c:	008a      	lsls	r2, r1, #2
 800a20e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a212:	f7f6 fd29 	bl	8000c68 <__aeabi_uldivmod>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <UART_SetConfig+0x4e4>)
 800a21c:	fba3 1302 	umull	r1, r3, r3, r2
 800a220:	095b      	lsrs	r3, r3, #5
 800a222:	2164      	movs	r1, #100	; 0x64
 800a224:	fb01 f303 	mul.w	r3, r1, r3
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	3332      	adds	r3, #50	; 0x32
 800a22e:	4a08      	ldr	r2, [pc, #32]	; (800a250 <UART_SetConfig+0x4e4>)
 800a230:	fba2 2303 	umull	r2, r3, r2, r3
 800a234:	095b      	lsrs	r3, r3, #5
 800a236:	f003 020f 	and.w	r2, r3, #15
 800a23a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4422      	add	r2, r4
 800a242:	609a      	str	r2, [r3, #8]
}
 800a244:	bf00      	nop
 800a246:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a24a:	46bd      	mov	sp, r7
 800a24c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a250:	51eb851f 	.word	0x51eb851f

0800a254 <LL_GPIO_SetPinMode>:
{
 800a254:	b480      	push	{r7}
 800a256:	b08b      	sub	sp, #44	; 0x2c
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	fa93 f3a3 	rbit	r3, r3
 800a26e:	613b      	str	r3, [r7, #16]
  return result;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a27a:	2320      	movs	r3, #32
 800a27c:	e003      	b.n	800a286 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	fab3 f383 	clz	r3, r3
 800a284:	b2db      	uxtb	r3, r3
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	2103      	movs	r1, #3
 800a28a:	fa01 f303 	lsl.w	r3, r1, r3
 800a28e:	43db      	mvns	r3, r3
 800a290:	401a      	ands	r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	fa93 f3a3 	rbit	r3, r3
 800a29c:	61fb      	str	r3, [r7, #28]
  return result;
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a2a8:	2320      	movs	r3, #32
 800a2aa:	e003      	b.n	800a2b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	fab3 f383 	clz	r3, r3
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	601a      	str	r2, [r3, #0]
}
 800a2c2:	bf00      	nop
 800a2c4:	372c      	adds	r7, #44	; 0x2c
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <LL_GPIO_SetPinOutputType>:
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	60f8      	str	r0, [r7, #12]
 800a2d6:	60b9      	str	r1, [r7, #8]
 800a2d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	43db      	mvns	r3, r3
 800a2e2:	401a      	ands	r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	605a      	str	r2, [r3, #4]
}
 800a2f2:	bf00      	nop
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <LL_GPIO_SetPinSpeed>:
{
 800a2fe:	b480      	push	{r7}
 800a300:	b08b      	sub	sp, #44	; 0x2c
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	fa93 f3a3 	rbit	r3, r3
 800a318:	613b      	str	r3, [r7, #16]
  return result;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d101      	bne.n	800a328 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a324:	2320      	movs	r3, #32
 800a326:	e003      	b.n	800a330 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	fab3 f383 	clz	r3, r3
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	2103      	movs	r1, #3
 800a334:	fa01 f303 	lsl.w	r3, r1, r3
 800a338:	43db      	mvns	r3, r3
 800a33a:	401a      	ands	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a340:	6a3b      	ldr	r3, [r7, #32]
 800a342:	fa93 f3a3 	rbit	r3, r3
 800a346:	61fb      	str	r3, [r7, #28]
  return result;
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a352:	2320      	movs	r3, #32
 800a354:	e003      	b.n	800a35e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	fab3 f383 	clz	r3, r3
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	005b      	lsls	r3, r3, #1
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	fa01 f303 	lsl.w	r3, r1, r3
 800a366:	431a      	orrs	r2, r3
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	609a      	str	r2, [r3, #8]
}
 800a36c:	bf00      	nop
 800a36e:	372c      	adds	r7, #44	; 0x2c
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <LL_GPIO_SetPinPull>:
{
 800a378:	b480      	push	{r7}
 800a37a:	b08b      	sub	sp, #44	; 0x2c
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	fa93 f3a3 	rbit	r3, r3
 800a392:	613b      	str	r3, [r7, #16]
  return result;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a39e:	2320      	movs	r3, #32
 800a3a0:	e003      	b.n	800a3aa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	fab3 f383 	clz	r3, r3
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	2103      	movs	r1, #3
 800a3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b2:	43db      	mvns	r3, r3
 800a3b4:	401a      	ands	r2, r3
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	fa93 f3a3 	rbit	r3, r3
 800a3c0:	61fb      	str	r3, [r7, #28]
  return result;
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a3cc:	2320      	movs	r3, #32
 800a3ce:	e003      	b.n	800a3d8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	fab3 f383 	clz	r3, r3
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	005b      	lsls	r3, r3, #1
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	60da      	str	r2, [r3, #12]
}
 800a3e6:	bf00      	nop
 800a3e8:	372c      	adds	r7, #44	; 0x2c
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <LL_GPIO_SetAFPin_0_7>:
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b08b      	sub	sp, #44	; 0x2c
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	60f8      	str	r0, [r7, #12]
 800a3fa:	60b9      	str	r1, [r7, #8]
 800a3fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1a      	ldr	r2, [r3, #32]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	fa93 f3a3 	rbit	r3, r3
 800a40c:	613b      	str	r3, [r7, #16]
  return result;
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a418:	2320      	movs	r3, #32
 800a41a:	e003      	b.n	800a424 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	fab3 f383 	clz	r3, r3
 800a422:	b2db      	uxtb	r3, r3
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	210f      	movs	r1, #15
 800a428:	fa01 f303 	lsl.w	r3, r1, r3
 800a42c:	43db      	mvns	r3, r3
 800a42e:	401a      	ands	r2, r3
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	fa93 f3a3 	rbit	r3, r3
 800a43a:	61fb      	str	r3, [r7, #28]
  return result;
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a446:	2320      	movs	r3, #32
 800a448:	e003      	b.n	800a452 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	fab3 f383 	clz	r3, r3
 800a450:	b2db      	uxtb	r3, r3
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	fa01 f303 	lsl.w	r3, r1, r3
 800a45a:	431a      	orrs	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	621a      	str	r2, [r3, #32]
}
 800a460:	bf00      	nop
 800a462:	372c      	adds	r7, #44	; 0x2c
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <LL_GPIO_SetAFPin_8_15>:
{
 800a46c:	b480      	push	{r7}
 800a46e:	b08b      	sub	sp, #44	; 0x2c
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	0a1b      	lsrs	r3, r3, #8
 800a480:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	fa93 f3a3 	rbit	r3, r3
 800a488:	613b      	str	r3, [r7, #16]
  return result;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a494:	2320      	movs	r3, #32
 800a496:	e003      	b.n	800a4a0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	fab3 f383 	clz	r3, r3
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	210f      	movs	r1, #15
 800a4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a8:	43db      	mvns	r3, r3
 800a4aa:	401a      	ands	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	0a1b      	lsrs	r3, r3, #8
 800a4b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	fa93 f3a3 	rbit	r3, r3
 800a4b8:	61fb      	str	r3, [r7, #28]
  return result;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	e003      	b.n	800a4d0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ca:	fab3 f383 	clz	r3, r3
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a4de:	bf00      	nop
 800a4e0:	372c      	adds	r7, #44	; 0x2c
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b08a      	sub	sp, #40	; 0x28
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	fa93 f3a3 	rbit	r3, r3
 800a508:	617b      	str	r3, [r7, #20]
  return result;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <LL_GPIO_Init+0x2e>
    return 32U;
 800a514:	2320      	movs	r3, #32
 800a516:	e003      	b.n	800a520 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	fab3 f383 	clz	r3, r3
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a522:	e057      	b.n	800a5d4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	2101      	movs	r1, #1
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	fa01 f303 	lsl.w	r3, r1, r3
 800a530:	4013      	ands	r3, r2
 800a532:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d049      	beq.n	800a5ce <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d003      	beq.n	800a54a <LL_GPIO_Init+0x60>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d10d      	bne.n	800a566 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	461a      	mov	r2, r3
 800a550:	6a39      	ldr	r1, [r7, #32]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f7ff fed3 	bl	800a2fe <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	461a      	mov	r2, r3
 800a55e:	6a39      	ldr	r1, [r7, #32]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff feb4 	bl	800a2ce <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	461a      	mov	r2, r3
 800a56c:	6a39      	ldr	r1, [r7, #32]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff ff02 	bl	800a378 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d121      	bne.n	800a5c0 <LL_GPIO_Init+0xd6>
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	fa93 f3a3 	rbit	r3, r3
 800a586:	60bb      	str	r3, [r7, #8]
  return result;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <LL_GPIO_Init+0xac>
    return 32U;
 800a592:	2320      	movs	r3, #32
 800a594:	e003      	b.n	800a59e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	fab3 f383 	clz	r3, r3
 800a59c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800a59e:	2b07      	cmp	r3, #7
 800a5a0:	d807      	bhi.n	800a5b2 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	6a39      	ldr	r1, [r7, #32]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff ff21 	bl	800a3f2 <LL_GPIO_SetAFPin_0_7>
 800a5b0:	e006      	b.n	800a5c0 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	6a39      	ldr	r1, [r7, #32]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7ff ff56 	bl	800a46c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	6a39      	ldr	r1, [r7, #32]
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff fe43 	bl	800a254 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	fa22 f303 	lsr.w	r3, r2, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d1a0      	bne.n	800a524 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3728      	adds	r7, #40	; 0x28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <LL_SPI_IsEnabled>:
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5fc:	2b40      	cmp	r3, #64	; 0x40
 800a5fe:	d101      	bne.n	800a604 <LL_SPI_IsEnabled+0x18>
 800a600:	2301      	movs	r3, #1
 800a602:	e000      	b.n	800a606 <LL_SPI_IsEnabled+0x1a>
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <LL_SPI_SetCRCPolynomial>:
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	b29b      	uxth	r3, r3
 800a620:	461a      	mov	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	611a      	str	r2, [r3, #16]
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7ff ffd3 	bl	800a5ec <LL_SPI_IsEnabled>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d139      	bne.n	800a6c0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a654:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	6811      	ldr	r1, [r2, #0]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	6852      	ldr	r2, [r2, #4]
 800a660:	4311      	orrs	r1, r2
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	6892      	ldr	r2, [r2, #8]
 800a666:	4311      	orrs	r1, r2
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	68d2      	ldr	r2, [r2, #12]
 800a66c:	4311      	orrs	r1, r2
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	6912      	ldr	r2, [r2, #16]
 800a672:	4311      	orrs	r1, r2
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	6952      	ldr	r2, [r2, #20]
 800a678:	4311      	orrs	r1, r2
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	6992      	ldr	r2, [r2, #24]
 800a67e:	4311      	orrs	r1, r2
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	69d2      	ldr	r2, [r2, #28]
 800a684:	4311      	orrs	r1, r2
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	6a12      	ldr	r2, [r2, #32]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	431a      	orrs	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f023 0204 	bic.w	r2, r3, #4
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	0c1b      	lsrs	r3, r3, #16
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ae:	d105      	bne.n	800a6bc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff ffab 	bl	800a612 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	61da      	str	r2, [r3, #28]
  return status;
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	f107 001c 	add.w	r0, r7, #28
 800a6e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d123      	bne.n	800a738 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d105      	bne.n	800a72c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 fae3 	bl	800bcf8 <USB_CoreReset>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
 800a736:	e01b      	b.n	800a770 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f001 fad7 	bl	800bcf8 <USB_CoreReset>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a74e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a752:	2b00      	cmp	r3, #0
 800a754:	d106      	bne.n	800a764 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	639a      	str	r2, [r3, #56]	; 0x38
 800a762:	e005      	b.n	800a770 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a770:	7fbb      	ldrb	r3, [r7, #30]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d10b      	bne.n	800a78e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f043 0206 	orr.w	r2, r3, #6
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	f043 0220 	orr.w	r2, r3, #32
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a79a:	b004      	add	sp, #16
 800a79c:	4770      	bx	lr
	...

0800a7a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a7ae:	79fb      	ldrb	r3, [r7, #7]
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d165      	bne.n	800a880 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4a41      	ldr	r2, [pc, #260]	; (800a8bc <USB_SetTurnaroundTime+0x11c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d906      	bls.n	800a7ca <USB_SetTurnaroundTime+0x2a>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4a40      	ldr	r2, [pc, #256]	; (800a8c0 <USB_SetTurnaroundTime+0x120>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d202      	bcs.n	800a7ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a7c4:	230f      	movs	r3, #15
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	e062      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	4a3c      	ldr	r2, [pc, #240]	; (800a8c0 <USB_SetTurnaroundTime+0x120>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d306      	bcc.n	800a7e0 <USB_SetTurnaroundTime+0x40>
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	4a3b      	ldr	r2, [pc, #236]	; (800a8c4 <USB_SetTurnaroundTime+0x124>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d202      	bcs.n	800a7e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a7da:	230e      	movs	r3, #14
 800a7dc:	617b      	str	r3, [r7, #20]
 800a7de:	e057      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	4a38      	ldr	r2, [pc, #224]	; (800a8c4 <USB_SetTurnaroundTime+0x124>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d306      	bcc.n	800a7f6 <USB_SetTurnaroundTime+0x56>
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	4a37      	ldr	r2, [pc, #220]	; (800a8c8 <USB_SetTurnaroundTime+0x128>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d202      	bcs.n	800a7f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a7f0:	230d      	movs	r3, #13
 800a7f2:	617b      	str	r3, [r7, #20]
 800a7f4:	e04c      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	4a33      	ldr	r2, [pc, #204]	; (800a8c8 <USB_SetTurnaroundTime+0x128>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d306      	bcc.n	800a80c <USB_SetTurnaroundTime+0x6c>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	4a32      	ldr	r2, [pc, #200]	; (800a8cc <USB_SetTurnaroundTime+0x12c>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d802      	bhi.n	800a80c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a806:	230c      	movs	r3, #12
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	e041      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	4a2f      	ldr	r2, [pc, #188]	; (800a8cc <USB_SetTurnaroundTime+0x12c>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d906      	bls.n	800a822 <USB_SetTurnaroundTime+0x82>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	4a2e      	ldr	r2, [pc, #184]	; (800a8d0 <USB_SetTurnaroundTime+0x130>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d802      	bhi.n	800a822 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a81c:	230b      	movs	r3, #11
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	e036      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	4a2a      	ldr	r2, [pc, #168]	; (800a8d0 <USB_SetTurnaroundTime+0x130>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d906      	bls.n	800a838 <USB_SetTurnaroundTime+0x98>
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	4a29      	ldr	r2, [pc, #164]	; (800a8d4 <USB_SetTurnaroundTime+0x134>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d802      	bhi.n	800a838 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a832:	230a      	movs	r3, #10
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	e02b      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	4a26      	ldr	r2, [pc, #152]	; (800a8d4 <USB_SetTurnaroundTime+0x134>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d906      	bls.n	800a84e <USB_SetTurnaroundTime+0xae>
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4a25      	ldr	r2, [pc, #148]	; (800a8d8 <USB_SetTurnaroundTime+0x138>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d202      	bcs.n	800a84e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a848:	2309      	movs	r3, #9
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	e020      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	4a21      	ldr	r2, [pc, #132]	; (800a8d8 <USB_SetTurnaroundTime+0x138>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d306      	bcc.n	800a864 <USB_SetTurnaroundTime+0xc4>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4a20      	ldr	r2, [pc, #128]	; (800a8dc <USB_SetTurnaroundTime+0x13c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d802      	bhi.n	800a864 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a85e:	2308      	movs	r3, #8
 800a860:	617b      	str	r3, [r7, #20]
 800a862:	e015      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4a1d      	ldr	r2, [pc, #116]	; (800a8dc <USB_SetTurnaroundTime+0x13c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d906      	bls.n	800a87a <USB_SetTurnaroundTime+0xda>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	4a1c      	ldr	r2, [pc, #112]	; (800a8e0 <USB_SetTurnaroundTime+0x140>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d202      	bcs.n	800a87a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a874:	2307      	movs	r3, #7
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e00a      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a87a:	2306      	movs	r3, #6
 800a87c:	617b      	str	r3, [r7, #20]
 800a87e:	e007      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a880:	79fb      	ldrb	r3, [r7, #7]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a886:	2309      	movs	r3, #9
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	e001      	b.n	800a890 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a88c:	2309      	movs	r3, #9
 800a88e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	68da      	ldr	r2, [r3, #12]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	029b      	lsls	r3, r3, #10
 800a8a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	371c      	adds	r7, #28
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	00d8acbf 	.word	0x00d8acbf
 800a8c0:	00e4e1c0 	.word	0x00e4e1c0
 800a8c4:	00f42400 	.word	0x00f42400
 800a8c8:	01067380 	.word	0x01067380
 800a8cc:	011a499f 	.word	0x011a499f
 800a8d0:	01312cff 	.word	0x01312cff
 800a8d4:	014ca43f 	.word	0x014ca43f
 800a8d8:	016e3600 	.word	0x016e3600
 800a8dc:	01a6ab1f 	.word	0x01a6ab1f
 800a8e0:	01e84800 	.word	0x01e84800

0800a8e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f043 0201 	orr.w	r2, r3, #1
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f023 0201 	bic.w	r2, r3, #1
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d115      	bne.n	800a976 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a956:	200a      	movs	r0, #10
 800a958:	f7fa fa9e 	bl	8004e98 <HAL_Delay>
      ms += 10U;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	330a      	adds	r3, #10
 800a960:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f001 f939 	bl	800bbda <USB_GetMode>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d01e      	beq.n	800a9ac <USB_SetCurrentMode+0x84>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2bc7      	cmp	r3, #199	; 0xc7
 800a972:	d9f0      	bls.n	800a956 <USB_SetCurrentMode+0x2e>
 800a974:	e01a      	b.n	800a9ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a976:	78fb      	ldrb	r3, [r7, #3]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d115      	bne.n	800a9a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a988:	200a      	movs	r0, #10
 800a98a:	f7fa fa85 	bl	8004e98 <HAL_Delay>
      ms += 10U;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	330a      	adds	r3, #10
 800a992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f001 f920 	bl	800bbda <USB_GetMode>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <USB_SetCurrentMode+0x84>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2bc7      	cmp	r3, #199	; 0xc7
 800a9a4:	d9f0      	bls.n	800a988 <USB_SetCurrentMode+0x60>
 800a9a6:	e001      	b.n	800a9ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e005      	b.n	800a9b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2bc8      	cmp	r3, #200	; 0xc8
 800a9b0:	d101      	bne.n	800a9b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3710      	adds	r7, #16
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b086      	sub	sp, #24
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a9da:	2300      	movs	r3, #0
 800a9dc:	613b      	str	r3, [r7, #16]
 800a9de:	e009      	b.n	800a9f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	3340      	adds	r3, #64	; 0x40
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	613b      	str	r3, [r7, #16]
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	2b0e      	cmp	r3, #14
 800a9f8:	d9f2      	bls.n	800a9e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a9fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d11c      	bne.n	800aa3c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa10:	f043 0302 	orr.w	r3, r3, #2
 800aa14:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38
 800aa3a:	e00b      	b.n	800aa54 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa60:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d10d      	bne.n	800aa84 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aa68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d104      	bne.n	800aa7a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aa70:	2100      	movs	r1, #0
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f968 	bl	800ad48 <USB_SetDevSpeed>
 800aa78:	e008      	b.n	800aa8c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f963 	bl	800ad48 <USB_SetDevSpeed>
 800aa82:	e003      	b.n	800aa8c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa84:	2103      	movs	r1, #3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f95e 	bl	800ad48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa8c:	2110      	movs	r1, #16
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f8fa 	bl	800ac88 <USB_FlushTxFifo>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d001      	beq.n	800aa9e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f924 	bl	800acec <USB_FlushRxFifo>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab4:	461a      	mov	r2, r3
 800aab6:	2300      	movs	r3, #0
 800aab8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac0:	461a      	mov	r2, r3
 800aac2:	2300      	movs	r3, #0
 800aac4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aacc:	461a      	mov	r2, r3
 800aace:	2300      	movs	r3, #0
 800aad0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aad2:	2300      	movs	r3, #0
 800aad4:	613b      	str	r3, [r7, #16]
 800aad6:	e043      	b.n	800ab60 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaee:	d118      	bne.n	800ab22 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10a      	bne.n	800ab0c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab02:	461a      	mov	r2, r3
 800ab04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	e013      	b.n	800ab34 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab18:	461a      	mov	r2, r3
 800ab1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab1e:	6013      	str	r3, [r2, #0]
 800ab20:	e008      	b.n	800ab34 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	015a      	lsls	r2, r3, #5
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab2e:	461a      	mov	r2, r3
 800ab30:	2300      	movs	r3, #0
 800ab32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab40:	461a      	mov	r2, r3
 800ab42:	2300      	movs	r3, #0
 800ab44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab52:	461a      	mov	r2, r3
 800ab54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	613b      	str	r3, [r7, #16]
 800ab60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab64:	461a      	mov	r2, r3
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d3b5      	bcc.n	800aad8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	613b      	str	r3, [r7, #16]
 800ab70:	e043      	b.n	800abfa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab88:	d118      	bne.n	800abbc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	e013      	b.n	800abce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb2:	461a      	mov	r2, r3
 800abb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	e008      	b.n	800abce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc8:	461a      	mov	r2, r3
 800abca:	2300      	movs	r3, #0
 800abcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abda:	461a      	mov	r2, r3
 800abdc:	2300      	movs	r3, #0
 800abde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abec:	461a      	mov	r2, r3
 800abee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	3301      	adds	r3, #1
 800abf8:	613b      	str	r3, [r7, #16]
 800abfa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800abfe:	461a      	mov	r2, r3
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d3b5      	bcc.n	800ab72 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	f043 0210 	orr.w	r2, r3, #16
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	699a      	ldr	r2, [r3, #24]
 800ac40:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <USB_DevInit+0x2c4>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	f043 0208 	orr.w	r2, r3, #8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac5c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d107      	bne.n	800ac74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac6c:	f043 0304 	orr.w	r3, r3, #4
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac80:	b004      	add	sp, #16
 800ac82:	4770      	bx	lr
 800ac84:	803c3800 	.word	0x803c3800

0800ac88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800aca2:	d901      	bls.n	800aca8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e01b      	b.n	800ace0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	daf2      	bge.n	800ac96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	019b      	lsls	r3, r3, #6
 800acb8:	f043 0220 	orr.w	r2, r3, #32
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800accc:	d901      	bls.n	800acd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800acce:	2303      	movs	r3, #3
 800acd0:	e006      	b.n	800ace0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	f003 0320 	and.w	r3, r3, #32
 800acda:	2b20      	cmp	r3, #32
 800acdc:	d0f0      	beq.n	800acc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3714      	adds	r7, #20
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3301      	adds	r3, #1
 800acfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ad04:	d901      	bls.n	800ad0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e018      	b.n	800ad3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	691b      	ldr	r3, [r3, #16]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	daf2      	bge.n	800acf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad12:	2300      	movs	r3, #0
 800ad14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2210      	movs	r2, #16
 800ad1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ad28:	d901      	bls.n	800ad2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e006      	b.n	800ad3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f003 0310 	and.w	r3, r3, #16
 800ad36:	2b10      	cmp	r3, #16
 800ad38:	d0f0      	beq.n	800ad1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	68f9      	ldr	r1, [r7, #12]
 800ad64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b087      	sub	sp, #28
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f003 0306 	and.w	r3, r3, #6
 800ad92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	75fb      	strb	r3, [r7, #23]
 800ad9e:	e00a      	b.n	800adb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d002      	beq.n	800adac <USB_GetDevSpeed+0x32>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b06      	cmp	r3, #6
 800adaa:	d102      	bne.n	800adb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800adac:	2302      	movs	r3, #2
 800adae:	75fb      	strb	r3, [r7, #23]
 800adb0:	e001      	b.n	800adb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800adb2:	230f      	movs	r3, #15
 800adb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d13a      	bne.n	800ae56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade6:	69da      	ldr	r2, [r3, #28]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	f003 030f 	and.w	r3, r3, #15
 800adf0:	2101      	movs	r1, #1
 800adf2:	fa01 f303 	lsl.w	r3, r1, r3
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	68f9      	ldr	r1, [r7, #12]
 800adfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adfe:	4313      	orrs	r3, r2
 800ae00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d155      	bne.n	800aec4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	791b      	ldrb	r3, [r3, #4]
 800ae32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	059b      	lsls	r3, r3, #22
 800ae3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	0151      	lsls	r1, r2, #5
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	440a      	add	r2, r1
 800ae46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	e036      	b.n	800aec4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae5c:	69da      	ldr	r2, [r3, #28]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	f003 030f 	and.w	r3, r3, #15
 800ae66:	2101      	movs	r1, #1
 800ae68:	fa01 f303 	lsl.w	r3, r1, r3
 800ae6c:	041b      	lsls	r3, r3, #16
 800ae6e:	68f9      	ldr	r1, [r7, #12]
 800ae70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae74:	4313      	orrs	r3, r2
 800ae76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d11a      	bne.n	800aec4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	015a      	lsls	r2, r3, #5
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	4413      	add	r3, r2
 800ae96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	791b      	ldrb	r3, [r3, #4]
 800aea8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	4313      	orrs	r3, r2
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	0151      	lsls	r1, r2, #5
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	440a      	add	r2, r1
 800aeb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
	...

0800aed4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d161      	bne.n	800afb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af06:	d11f      	bne.n	800af48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	0151      	lsls	r1, r2, #5
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	440a      	add	r2, r1
 800af1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	0151      	lsls	r1, r2, #5
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	440a      	add	r2, r1
 800af3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	2101      	movs	r1, #1
 800af5a:	fa01 f303 	lsl.w	r3, r1, r3
 800af5e:	b29b      	uxth	r3, r3
 800af60:	43db      	mvns	r3, r3
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af68:	4013      	ands	r3, r2
 800af6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	2101      	movs	r1, #1
 800af7e:	fa01 f303 	lsl.w	r3, r1, r3
 800af82:	b29b      	uxth	r3, r3
 800af84:	43db      	mvns	r3, r3
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af8c:	4013      	ands	r3, r2
 800af8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	0159      	lsls	r1, r3, #5
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	440b      	add	r3, r1
 800afa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afaa:	4619      	mov	r1, r3
 800afac:	4b35      	ldr	r3, [pc, #212]	; (800b084 <USB_DeactivateEndpoint+0x1b0>)
 800afae:	4013      	ands	r3, r2
 800afb0:	600b      	str	r3, [r1, #0]
 800afb2:	e060      	b.n	800b076 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afca:	d11f      	bne.n	800b00c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	0151      	lsls	r1, r2, #5
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	440a      	add	r2, r1
 800afe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	0151      	lsls	r1, r2, #5
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	440a      	add	r2, r1
 800b002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b00a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	2101      	movs	r1, #1
 800b01e:	fa01 f303 	lsl.w	r3, r1, r3
 800b022:	041b      	lsls	r3, r3, #16
 800b024:	43db      	mvns	r3, r3
 800b026:	68f9      	ldr	r1, [r7, #12]
 800b028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b02c:	4013      	ands	r3, r2
 800b02e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b036:	69da      	ldr	r2, [r3, #28]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	f003 030f 	and.w	r3, r3, #15
 800b040:	2101      	movs	r1, #1
 800b042:	fa01 f303 	lsl.w	r3, r1, r3
 800b046:	041b      	lsls	r3, r3, #16
 800b048:	43db      	mvns	r3, r3
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b050:	4013      	ands	r3, r2
 800b052:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	0159      	lsls	r1, r3, #5
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	440b      	add	r3, r1
 800b06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06e:	4619      	mov	r1, r3
 800b070:	4b05      	ldr	r3, [pc, #20]	; (800b088 <USB_DeactivateEndpoint+0x1b4>)
 800b072:	4013      	ands	r3, r2
 800b074:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	ec337800 	.word	0xec337800
 800b088:	eff37800 	.word	0xeff37800

0800b08c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08a      	sub	sp, #40	; 0x28
 800b090:	af02      	add	r7, sp, #8
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	f040 817a 	bne.w	800b3a2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d132      	bne.n	800b11c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	69fa      	ldr	r2, [r7, #28]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	0151      	lsls	r1, r2, #5
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	0151      	lsls	r1, r2, #5
 800b10c:	69fa      	ldr	r2, [r7, #28]
 800b10e:	440a      	add	r2, r1
 800b110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b114:	0cdb      	lsrs	r3, r3, #19
 800b116:	04db      	lsls	r3, r3, #19
 800b118:	6113      	str	r3, [r2, #16]
 800b11a:	e092      	b.n	800b242 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	0151      	lsls	r1, r2, #5
 800b12e:	69fa      	ldr	r2, [r7, #28]
 800b130:	440a      	add	r2, r1
 800b132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b136:	0cdb      	lsrs	r3, r3, #19
 800b138:	04db      	lsls	r3, r3, #19
 800b13a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	440a      	add	r2, r1
 800b152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b156:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b15a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b15e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d11a      	bne.n	800b19c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	691a      	ldr	r2, [r3, #16]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d903      	bls.n	800b17a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	689a      	ldr	r2, [r3, #8]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	0151      	lsls	r1, r2, #5
 800b18c:	69fa      	ldr	r2, [r7, #28]
 800b18e:	440a      	add	r2, r1
 800b190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b198:	6113      	str	r3, [r2, #16]
 800b19a:	e01b      	b.n	800b1d4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	6919      	ldr	r1, [r3, #16]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	440b      	add	r3, r1
 800b1b4:	1e59      	subs	r1, r3, #1
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1be:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1c0:	4ba2      	ldr	r3, [pc, #648]	; (800b44c <USB_EPStartXfer+0x3c0>)
 800b1c2:	400b      	ands	r3, r1
 800b1c4:	69b9      	ldr	r1, [r7, #24]
 800b1c6:	0148      	lsls	r0, r1, #5
 800b1c8:	69f9      	ldr	r1, [r7, #28]
 800b1ca:	4401      	add	r1, r0
 800b1cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e0:	691a      	ldr	r2, [r3, #16]
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	691b      	ldr	r3, [r3, #16]
 800b1e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ea:	69b9      	ldr	r1, [r7, #24]
 800b1ec:	0148      	lsls	r0, r1, #5
 800b1ee:	69f9      	ldr	r1, [r7, #28]
 800b1f0:	4401      	add	r1, r0
 800b1f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	791b      	ldrb	r3, [r3, #4]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d11f      	bne.n	800b242 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	0151      	lsls	r1, r2, #5
 800b214:	69fa      	ldr	r2, [r7, #28]
 800b216:	440a      	add	r2, r1
 800b218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b21c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b220:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	0151      	lsls	r1, r2, #5
 800b234:	69fa      	ldr	r2, [r7, #28]
 800b236:	440a      	add	r2, r1
 800b238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b23c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b240:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	2b01      	cmp	r3, #1
 800b246:	d14b      	bne.n	800b2e0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d009      	beq.n	800b264 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25c:	461a      	mov	r2, r3
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	791b      	ldrb	r3, [r3, #4]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d128      	bne.n	800b2be <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d110      	bne.n	800b29e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	4413      	add	r3, r2
 800b284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	0151      	lsls	r1, r2, #5
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	440a      	add	r2, r1
 800b292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b296:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	e00f      	b.n	800b2be <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	015a      	lsls	r2, r3, #5
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	69ba      	ldr	r2, [r7, #24]
 800b2ae:	0151      	lsls	r1, r2, #5
 800b2b0:	69fa      	ldr	r2, [r7, #28]
 800b2b2:	440a      	add	r2, r1
 800b2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	015a      	lsls	r2, r3, #5
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	0151      	lsls	r1, r2, #5
 800b2d0:	69fa      	ldr	r2, [r7, #28]
 800b2d2:	440a      	add	r2, r1
 800b2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2dc:	6013      	str	r3, [r2, #0]
 800b2de:	e165      	b.n	800b5ac <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	0151      	lsls	r1, r2, #5
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	440a      	add	r2, r1
 800b2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	791b      	ldrb	r3, [r3, #4]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d015      	beq.n	800b334 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 814d 	beq.w	800b5ac <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	f003 030f 	and.w	r3, r3, #15
 800b322:	2101      	movs	r1, #1
 800b324:	fa01 f303 	lsl.w	r3, r1, r3
 800b328:	69f9      	ldr	r1, [r7, #28]
 800b32a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b32e:	4313      	orrs	r3, r2
 800b330:	634b      	str	r3, [r1, #52]	; 0x34
 800b332:	e13b      	b.n	800b5ac <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b340:	2b00      	cmp	r3, #0
 800b342:	d110      	bne.n	800b366 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b35e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	e00f      	b.n	800b386 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	0151      	lsls	r1, r2, #5
 800b378:	69fa      	ldr	r2, [r7, #28]
 800b37a:	440a      	add	r2, r1
 800b37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b384:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	68d9      	ldr	r1, [r3, #12]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	b298      	uxth	r0, r3
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	4603      	mov	r3, r0
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f000 f9b8 	bl	800b710 <USB_WritePacket>
 800b3a0:	e104      	b.n	800b5ac <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	0151      	lsls	r1, r2, #5
 800b3b4:	69fa      	ldr	r2, [r7, #28]
 800b3b6:	440a      	add	r2, r1
 800b3b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3bc:	0cdb      	lsrs	r3, r3, #19
 800b3be:	04db      	lsls	r3, r3, #19
 800b3c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	0151      	lsls	r1, r2, #5
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	440a      	add	r2, r1
 800b3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3e4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d131      	bne.n	800b450 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d003      	beq.n	800b3fc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	689a      	ldr	r2, [r3, #8]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	689a      	ldr	r2, [r3, #8]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b410:	691a      	ldr	r2, [r3, #16]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b41a:	69b9      	ldr	r1, [r7, #24]
 800b41c:	0148      	lsls	r0, r1, #5
 800b41e:	69f9      	ldr	r1, [r7, #28]
 800b420:	4401      	add	r1, r0
 800b422:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b426:	4313      	orrs	r3, r2
 800b428:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	0151      	lsls	r1, r2, #5
 800b43c:	69fa      	ldr	r2, [r7, #28]
 800b43e:	440a      	add	r2, r1
 800b440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b448:	6113      	str	r3, [r2, #16]
 800b44a:	e061      	b.n	800b510 <USB_EPStartXfer+0x484>
 800b44c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d123      	bne.n	800b4a0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b464:	691a      	ldr	r2, [r3, #16]
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b46e:	69b9      	ldr	r1, [r7, #24]
 800b470:	0148      	lsls	r0, r1, #5
 800b472:	69f9      	ldr	r1, [r7, #28]
 800b474:	4401      	add	r1, r0
 800b476:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b47a:	4313      	orrs	r3, r2
 800b47c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	69ba      	ldr	r2, [r7, #24]
 800b48e:	0151      	lsls	r1, r2, #5
 800b490:	69fa      	ldr	r2, [r7, #28]
 800b492:	440a      	add	r2, r1
 800b494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b498:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b49c:	6113      	str	r3, [r2, #16]
 800b49e:	e037      	b.n	800b510 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	691a      	ldr	r2, [r3, #16]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	4413      	add	r3, r2
 800b4aa:	1e5a      	subs	r2, r3, #1
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	8afa      	ldrh	r2, [r7, #22]
 800b4bc:	fb03 f202 	mul.w	r2, r3, r2
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	015a      	lsls	r2, r3, #5
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d0:	691a      	ldr	r2, [r3, #16]
 800b4d2:	8afb      	ldrh	r3, [r7, #22]
 800b4d4:	04d9      	lsls	r1, r3, #19
 800b4d6:	4b38      	ldr	r3, [pc, #224]	; (800b5b8 <USB_EPStartXfer+0x52c>)
 800b4d8:	400b      	ands	r3, r1
 800b4da:	69b9      	ldr	r1, [r7, #24]
 800b4dc:	0148      	lsls	r0, r1, #5
 800b4de:	69f9      	ldr	r1, [r7, #28]
 800b4e0:	4401      	add	r1, r0
 800b4e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	015a      	lsls	r2, r3, #5
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f6:	691a      	ldr	r2, [r3, #16]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
 800b4fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b500:	69b9      	ldr	r1, [r7, #24]
 800b502:	0148      	lsls	r0, r1, #5
 800b504:	69f9      	ldr	r1, [r7, #28]
 800b506:	4401      	add	r1, r0
 800b508:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b50c:	4313      	orrs	r3, r2
 800b50e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b510:	79fb      	ldrb	r3, [r7, #7]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d10d      	bne.n	800b532 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d009      	beq.n	800b532 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	68d9      	ldr	r1, [r3, #12]
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52e:	460a      	mov	r2, r1
 800b530:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	791b      	ldrb	r3, [r3, #4]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d128      	bne.n	800b58c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b546:	2b00      	cmp	r3, #0
 800b548:	d110      	bne.n	800b56c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	4413      	add	r3, r2
 800b552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	69ba      	ldr	r2, [r7, #24]
 800b55a:	0151      	lsls	r1, r2, #5
 800b55c:	69fa      	ldr	r2, [r7, #28]
 800b55e:	440a      	add	r2, r1
 800b560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b564:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	e00f      	b.n	800b58c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	69ba      	ldr	r2, [r7, #24]
 800b57c:	0151      	lsls	r1, r2, #5
 800b57e:	69fa      	ldr	r2, [r7, #28]
 800b580:	440a      	add	r2, r1
 800b582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b58a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	0151      	lsls	r1, r2, #5
 800b59e:	69fa      	ldr	r2, [r7, #28]
 800b5a0:	440a      	add	r2, r1
 800b5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3720      	adds	r7, #32
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	1ff80000 	.word	0x1ff80000

0800b5bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	785b      	ldrb	r3, [r3, #1]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d14a      	bne.n	800b670 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5f2:	f040 8086 	bne.w	800b702 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	7812      	ldrb	r2, [r2, #0]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	693a      	ldr	r2, [r7, #16]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b614:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b618:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	7812      	ldrb	r2, [r2, #0]
 800b62e:	0151      	lsls	r1, r2, #5
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	440a      	add	r2, r1
 800b634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b63c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	f242 7210 	movw	r2, #10000	; 0x2710
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d902      	bls.n	800b654 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	75fb      	strb	r3, [r7, #23]
          break;
 800b652:	e056      	b.n	800b702 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	015a      	lsls	r2, r3, #5
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	4413      	add	r3, r2
 800b65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b66c:	d0e7      	beq.n	800b63e <USB_EPStopXfer+0x82>
 800b66e:	e048      	b.n	800b702 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	015a      	lsls	r2, r3, #5
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	4413      	add	r3, r2
 800b67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b688:	d13b      	bne.n	800b702 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	7812      	ldrb	r2, [r2, #0]
 800b69e:	0151      	lsls	r1, r2, #5
 800b6a0:	693a      	ldr	r2, [r7, #16]
 800b6a2:	440a      	add	r2, r1
 800b6a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	7812      	ldrb	r2, [r2, #0]
 800b6c2:	0151      	lsls	r1, r2, #5
 800b6c4:	693a      	ldr	r2, [r7, #16]
 800b6c6:	440a      	add	r2, r1
 800b6c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f242 7210 	movw	r2, #10000	; 0x2710
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d902      	bls.n	800b6e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	75fb      	strb	r3, [r7, #23]
          break;
 800b6e6:	e00c      	b.n	800b702 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b700:	d0e7      	beq.n	800b6d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b702:	7dfb      	ldrb	r3, [r7, #23]
}
 800b704:	4618      	mov	r0, r3
 800b706:	371c      	adds	r7, #28
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b710:	b480      	push	{r7}
 800b712:	b089      	sub	sp, #36	; 0x24
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	4611      	mov	r1, r2
 800b71c:	461a      	mov	r2, r3
 800b71e:	460b      	mov	r3, r1
 800b720:	71fb      	strb	r3, [r7, #7]
 800b722:	4613      	mov	r3, r2
 800b724:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b72e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b732:	2b00      	cmp	r3, #0
 800b734:	d123      	bne.n	800b77e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b736:	88bb      	ldrh	r3, [r7, #4]
 800b738:	3303      	adds	r3, #3
 800b73a:	089b      	lsrs	r3, r3, #2
 800b73c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b73e:	2300      	movs	r3, #0
 800b740:	61bb      	str	r3, [r7, #24]
 800b742:	e018      	b.n	800b776 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b744:	79fb      	ldrb	r3, [r7, #7]
 800b746:	031a      	lsls	r2, r3, #12
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	4413      	add	r3, r2
 800b74c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b750:	461a      	mov	r2, r3
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	3301      	adds	r3, #1
 800b75c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	3301      	adds	r3, #1
 800b762:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	3301      	adds	r3, #1
 800b768:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	3301      	adds	r3, #1
 800b76e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	3301      	adds	r3, #1
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	69ba      	ldr	r2, [r7, #24]
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d3e2      	bcc.n	800b744 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3724      	adds	r7, #36	; 0x24
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b08b      	sub	sp, #44	; 0x2c
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4613      	mov	r3, r2
 800b798:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b7a2:	88fb      	ldrh	r3, [r7, #6]
 800b7a4:	089b      	lsrs	r3, r3, #2
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b7aa:	88fb      	ldrh	r3, [r7, #6]
 800b7ac:	f003 0303 	and.w	r3, r3, #3
 800b7b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	623b      	str	r3, [r7, #32]
 800b7b6:	e014      	b.n	800b7e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	3301      	adds	r3, #1
 800b7da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	623b      	str	r3, [r7, #32]
 800b7e2:	6a3a      	ldr	r2, [r7, #32]
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d3e6      	bcc.n	800b7b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b7ea:	8bfb      	ldrh	r3, [r7, #30]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01e      	beq.n	800b82e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f107 0310 	add.w	r3, r7, #16
 800b800:	6812      	ldr	r2, [r2, #0]
 800b802:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	00db      	lsls	r3, r3, #3
 800b80c:	fa22 f303 	lsr.w	r3, r2, r3
 800b810:	b2da      	uxtb	r2, r3
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	701a      	strb	r2, [r3, #0]
      i++;
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	3301      	adds	r3, #1
 800b81a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81e:	3301      	adds	r3, #1
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b822:	8bfb      	ldrh	r3, [r7, #30]
 800b824:	3b01      	subs	r3, #1
 800b826:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b828:	8bfb      	ldrh	r3, [r7, #30]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1ea      	bne.n	800b804 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b830:	4618      	mov	r0, r3
 800b832:	372c      	adds	r7, #44	; 0x2c
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	785b      	ldrb	r3, [r3, #1]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d12c      	bne.n	800b8b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2b00      	cmp	r3, #0
 800b868:	db12      	blt.n	800b890 <USB_EPSetStall+0x54>
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00f      	beq.n	800b890 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	015a      	lsls	r2, r3, #5
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	4413      	add	r3, r2
 800b878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	0151      	lsls	r1, r2, #5
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	440a      	add	r2, r1
 800b886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b88a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b88e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	0151      	lsls	r1, r2, #5
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	440a      	add	r2, r1
 800b8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	e02b      	b.n	800b90a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	db12      	blt.n	800b8ea <USB_EPSetStall+0xae>
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00f      	beq.n	800b8ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	015a      	lsls	r2, r3, #5
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	0151      	lsls	r1, r2, #5
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	440a      	add	r2, r1
 800b8e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	0151      	lsls	r1, r2, #5
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	440a      	add	r2, r1
 800b900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b908:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3714      	adds	r7, #20
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	785b      	ldrb	r3, [r3, #1]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d128      	bne.n	800b986 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	015a      	lsls	r2, r3, #5
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4413      	add	r3, r2
 800b93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	0151      	lsls	r1, r2, #5
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	440a      	add	r2, r1
 800b94a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b94e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b952:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	791b      	ldrb	r3, [r3, #4]
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d003      	beq.n	800b964 <USB_EPClearStall+0x4c>
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	791b      	ldrb	r3, [r3, #4]
 800b960:	2b02      	cmp	r3, #2
 800b962:	d138      	bne.n	800b9d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	0151      	lsls	r1, r2, #5
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	440a      	add	r2, r1
 800b97a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b97e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	e027      	b.n	800b9d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	015a      	lsls	r2, r3, #5
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	4413      	add	r3, r2
 800b98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	0151      	lsls	r1, r2, #5
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	440a      	add	r2, r1
 800b99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	791b      	ldrb	r3, [r3, #4]
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	d003      	beq.n	800b9b6 <USB_EPClearStall+0x9e>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	791b      	ldrb	r3, [r3, #4]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d10f      	bne.n	800b9d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	015a      	lsls	r2, r3, #5
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4413      	add	r3, r2
 800b9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	0151      	lsls	r1, r2, #5
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	440a      	add	r2, r1
 800b9cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3714      	adds	r7, #20
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	78fb      	ldrb	r3, [r7, #3]
 800ba12:	011b      	lsls	r3, r3, #4
 800ba14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ba18:	68f9      	ldr	r1, [r7, #12]
 800ba1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3714      	adds	r7, #20
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba5e:	f023 0302 	bic.w	r3, r3, #2
 800ba62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b085      	sub	sp, #20
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68fa      	ldr	r2, [r7, #12]
 800ba88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba8c:	f023 0303 	bic.w	r3, r3, #3
 800ba90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baa0:	f043 0302 	orr.w	r3, r3, #2
 800baa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b085      	sub	sp, #20
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	4013      	ands	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bacc:	68fb      	ldr	r3, [r7, #12]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	4013      	ands	r3, r2
 800bafc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	0c1b      	lsrs	r3, r3, #16
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb2a:	69db      	ldr	r3, [r3, #28]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	4013      	ands	r3, r2
 800bb30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	b29b      	uxth	r3, r3
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb42:	b480      	push	{r7}
 800bb44:	b085      	sub	sp, #20
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb52:	78fb      	ldrb	r3, [r7, #3]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb68:	695b      	ldr	r3, [r3, #20]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb70:	68bb      	ldr	r3, [r7, #8]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr

0800bb7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb7e:	b480      	push	{r7}
 800bb80:	b087      	sub	sp, #28
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bba2:	78fb      	ldrb	r3, [r7, #3]
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	fa22 f303 	lsr.w	r3, r2, r3
 800bbae:	01db      	lsls	r3, r3, #7
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bbb8:	78fb      	ldrb	r3, [r7, #3]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	4013      	ands	r3, r2
 800bbca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	371c      	adds	r7, #28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0301 	and.w	r3, r3, #1
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b085      	sub	sp, #20
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bc14:	f023 0307 	bic.w	r3, r3, #7
 800bc18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	460b      	mov	r3, r1
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	333c      	adds	r3, #60	; 0x3c
 800bc52:	3304      	adds	r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	4a26      	ldr	r2, [pc, #152]	; (800bcf4 <USB_EP0_OutStart+0xb8>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d90a      	bls.n	800bc76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc70:	d101      	bne.n	800bc76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e037      	b.n	800bce6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bca4:	f043 0318 	orr.w	r3, r3, #24
 800bca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb0:	691b      	ldr	r3, [r3, #16]
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcb8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bcbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bcbe:	7afb      	ldrb	r3, [r7, #11]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d10f      	bne.n	800bce4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcca:	461a      	mov	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bce2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	371c      	adds	r7, #28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	4f54300a 	.word	0x4f54300a

0800bcf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd00:	2300      	movs	r3, #0
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3301      	adds	r3, #1
 800bd08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bd10:	d901      	bls.n	800bd16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e01b      	b.n	800bd4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	daf2      	bge.n	800bd04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	f043 0201 	orr.w	r2, r3, #1
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3301      	adds	r3, #1
 800bd32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bd3a:	d901      	bls.n	800bd40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e006      	b.n	800bd4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	f003 0301 	and.w	r3, r3, #1
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d0f0      	beq.n	800bd2e <USB_CoreReset+0x36>

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
	...

0800bd5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd6c:	f005 fffc 	bl	8011d68 <USBD_static_malloc>
 800bd70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d109      	bne.n	800bd8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32b0      	adds	r2, #176	; 0xb0
 800bd82:	2100      	movs	r1, #0
 800bd84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bd88:	2302      	movs	r3, #2
 800bd8a:	e0d4      	b.n	800bf36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bd8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bd90:	2100      	movs	r1, #0
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f006 ff08 	bl	8012ba8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	32b0      	adds	r2, #176	; 0xb0
 800bda2:	68f9      	ldr	r1, [r7, #12]
 800bda4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	32b0      	adds	r2, #176	; 0xb0
 800bdb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	7c1b      	ldrb	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d138      	bne.n	800be36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bdc4:	4b5e      	ldr	r3, [pc, #376]	; (800bf40 <USBD_CDC_Init+0x1e4>)
 800bdc6:	7819      	ldrb	r1, [r3, #0]
 800bdc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdcc:	2202      	movs	r2, #2
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f005 fea7 	bl	8011b22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bdd4:	4b5a      	ldr	r3, [pc, #360]	; (800bf40 <USBD_CDC_Init+0x1e4>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	f003 020f 	and.w	r2, r3, #15
 800bddc:	6879      	ldr	r1, [r7, #4]
 800bdde:	4613      	mov	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	440b      	add	r3, r1
 800bde8:	3324      	adds	r3, #36	; 0x24
 800bdea:	2201      	movs	r2, #1
 800bdec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bdee:	4b55      	ldr	r3, [pc, #340]	; (800bf44 <USBD_CDC_Init+0x1e8>)
 800bdf0:	7819      	ldrb	r1, [r3, #0]
 800bdf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f005 fe92 	bl	8011b22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bdfe:	4b51      	ldr	r3, [pc, #324]	; (800bf44 <USBD_CDC_Init+0x1e8>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	f003 020f 	and.w	r2, r3, #15
 800be06:	6879      	ldr	r1, [r7, #4]
 800be08:	4613      	mov	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4413      	add	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	440b      	add	r3, r1
 800be12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be16:	2201      	movs	r2, #1
 800be18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be1a:	4b4b      	ldr	r3, [pc, #300]	; (800bf48 <USBD_CDC_Init+0x1ec>)
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	f003 020f 	and.w	r2, r3, #15
 800be22:	6879      	ldr	r1, [r7, #4]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	440b      	add	r3, r1
 800be2e:	3326      	adds	r3, #38	; 0x26
 800be30:	2210      	movs	r2, #16
 800be32:	801a      	strh	r2, [r3, #0]
 800be34:	e035      	b.n	800bea2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be36:	4b42      	ldr	r3, [pc, #264]	; (800bf40 <USBD_CDC_Init+0x1e4>)
 800be38:	7819      	ldrb	r1, [r3, #0]
 800be3a:	2340      	movs	r3, #64	; 0x40
 800be3c:	2202      	movs	r2, #2
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f005 fe6f 	bl	8011b22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be44:	4b3e      	ldr	r3, [pc, #248]	; (800bf40 <USBD_CDC_Init+0x1e4>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	f003 020f 	and.w	r2, r3, #15
 800be4c:	6879      	ldr	r1, [r7, #4]
 800be4e:	4613      	mov	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	440b      	add	r3, r1
 800be58:	3324      	adds	r3, #36	; 0x24
 800be5a:	2201      	movs	r2, #1
 800be5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be5e:	4b39      	ldr	r3, [pc, #228]	; (800bf44 <USBD_CDC_Init+0x1e8>)
 800be60:	7819      	ldrb	r1, [r3, #0]
 800be62:	2340      	movs	r3, #64	; 0x40
 800be64:	2202      	movs	r2, #2
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f005 fe5b 	bl	8011b22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be6c:	4b35      	ldr	r3, [pc, #212]	; (800bf44 <USBD_CDC_Init+0x1e8>)
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	f003 020f 	and.w	r2, r3, #15
 800be74:	6879      	ldr	r1, [r7, #4]
 800be76:	4613      	mov	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4413      	add	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	440b      	add	r3, r1
 800be80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be84:	2201      	movs	r2, #1
 800be86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be88:	4b2f      	ldr	r3, [pc, #188]	; (800bf48 <USBD_CDC_Init+0x1ec>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	f003 020f 	and.w	r2, r3, #15
 800be90:	6879      	ldr	r1, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	3326      	adds	r3, #38	; 0x26
 800be9e:	2210      	movs	r2, #16
 800bea0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bea2:	4b29      	ldr	r3, [pc, #164]	; (800bf48 <USBD_CDC_Init+0x1ec>)
 800bea4:	7819      	ldrb	r1, [r3, #0]
 800bea6:	2308      	movs	r3, #8
 800bea8:	2203      	movs	r2, #3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f005 fe39 	bl	8011b22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800beb0:	4b25      	ldr	r3, [pc, #148]	; (800bf48 <USBD_CDC_Init+0x1ec>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f003 020f 	and.w	r2, r3, #15
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	3324      	adds	r3, #36	; 0x24
 800bec6:	2201      	movs	r2, #1
 800bec8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	33b0      	adds	r3, #176	; 0xb0
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4413      	add	r3, r2
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bf00:	2302      	movs	r3, #2
 800bf02:	e018      	b.n	800bf36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	7c1b      	ldrb	r3, [r3, #16]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf0c:	4b0d      	ldr	r3, [pc, #52]	; (800bf44 <USBD_CDC_Init+0x1e8>)
 800bf0e:	7819      	ldrb	r1, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f005 fef0 	bl	8011d00 <USBD_LL_PrepareReceive>
 800bf20:	e008      	b.n	800bf34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf22:	4b08      	ldr	r3, [pc, #32]	; (800bf44 <USBD_CDC_Init+0x1e8>)
 800bf24:	7819      	ldrb	r1, [r3, #0]
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf2c:	2340      	movs	r3, #64	; 0x40
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f005 fee6 	bl	8011d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20000377 	.word	0x20000377
 800bf44:	20000378 	.word	0x20000378
 800bf48:	20000379 	.word	0x20000379

0800bf4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bf58:	4b3a      	ldr	r3, [pc, #232]	; (800c044 <USBD_CDC_DeInit+0xf8>)
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f005 fe05 	bl	8011b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bf64:	4b37      	ldr	r3, [pc, #220]	; (800c044 <USBD_CDC_DeInit+0xf8>)
 800bf66:	781b      	ldrb	r3, [r3, #0]
 800bf68:	f003 020f 	and.w	r2, r3, #15
 800bf6c:	6879      	ldr	r1, [r7, #4]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	440b      	add	r3, r1
 800bf78:	3324      	adds	r3, #36	; 0x24
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bf7e:	4b32      	ldr	r3, [pc, #200]	; (800c048 <USBD_CDC_DeInit+0xfc>)
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	4619      	mov	r1, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f005 fdf2 	bl	8011b6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bf8a:	4b2f      	ldr	r3, [pc, #188]	; (800c048 <USBD_CDC_DeInit+0xfc>)
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	f003 020f 	and.w	r2, r3, #15
 800bf92:	6879      	ldr	r1, [r7, #4]
 800bf94:	4613      	mov	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	440b      	add	r3, r1
 800bf9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bfa6:	4b29      	ldr	r3, [pc, #164]	; (800c04c <USBD_CDC_DeInit+0x100>)
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f005 fdde 	bl	8011b6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bfb2:	4b26      	ldr	r3, [pc, #152]	; (800c04c <USBD_CDC_DeInit+0x100>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	f003 020f 	and.w	r2, r3, #15
 800bfba:	6879      	ldr	r1, [r7, #4]
 800bfbc:	4613      	mov	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4413      	add	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	440b      	add	r3, r1
 800bfc6:	3324      	adds	r3, #36	; 0x24
 800bfc8:	2200      	movs	r2, #0
 800bfca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bfcc:	4b1f      	ldr	r3, [pc, #124]	; (800c04c <USBD_CDC_DeInit+0x100>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	f003 020f 	and.w	r2, r3, #15
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	4413      	add	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	440b      	add	r3, r1
 800bfe0:	3326      	adds	r3, #38	; 0x26
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	32b0      	adds	r2, #176	; 0xb0
 800bff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d01f      	beq.n	800c038 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	33b0      	adds	r3, #176	; 0xb0
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	32b0      	adds	r2, #176	; 0xb0
 800c016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01a:	4618      	mov	r0, r3
 800c01c:	f005 feb2 	bl	8011d84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	32b0      	adds	r2, #176	; 0xb0
 800c02a:	2100      	movs	r1, #0
 800c02c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20000377 	.word	0x20000377
 800c048:	20000378 	.word	0x20000378
 800c04c:	20000379 	.word	0x20000379

0800c050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	32b0      	adds	r2, #176	; 0xb0
 800c064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c068:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e0bf      	b.n	800c200 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d050      	beq.n	800c12e <USBD_CDC_Setup+0xde>
 800c08c:	2b20      	cmp	r3, #32
 800c08e:	f040 80af 	bne.w	800c1f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	88db      	ldrh	r3, [r3, #6]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d03a      	beq.n	800c110 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	b25b      	sxtb	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	da1b      	bge.n	800c0dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	33b0      	adds	r3, #176	; 0xb0
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c0ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	88d2      	ldrh	r2, [r2, #6]
 800c0c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	88db      	ldrh	r3, [r3, #6]
 800c0c6:	2b07      	cmp	r3, #7
 800c0c8:	bf28      	it	cs
 800c0ca:	2307      	movcs	r3, #7
 800c0cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	89fa      	ldrh	r2, [r7, #14]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 fd49 	bl	800db6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c0da:	e090      	b.n	800c1fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	785a      	ldrb	r2, [r3, #1]
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	88db      	ldrh	r3, [r3, #6]
 800c0ea:	2b3f      	cmp	r3, #63	; 0x3f
 800c0ec:	d803      	bhi.n	800c0f6 <USBD_CDC_Setup+0xa6>
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	88db      	ldrh	r3, [r3, #6]
 800c0f2:	b2da      	uxtb	r2, r3
 800c0f4:	e000      	b.n	800c0f8 <USBD_CDC_Setup+0xa8>
 800c0f6:	2240      	movs	r2, #64	; 0x40
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c0fe:	6939      	ldr	r1, [r7, #16]
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c106:	461a      	mov	r2, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 fd5b 	bl	800dbc4 <USBD_CtlPrepareRx>
      break;
 800c10e:	e076      	b.n	800c1fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	33b0      	adds	r3, #176	; 0xb0
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	7850      	ldrb	r0, [r2, #1]
 800c126:	2200      	movs	r2, #0
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	4798      	blx	r3
      break;
 800c12c:	e067      	b.n	800c1fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	785b      	ldrb	r3, [r3, #1]
 800c132:	2b0b      	cmp	r3, #11
 800c134:	d851      	bhi.n	800c1da <USBD_CDC_Setup+0x18a>
 800c136:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <USBD_CDC_Setup+0xec>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c16d 	.word	0x0800c16d
 800c140:	0800c1e9 	.word	0x0800c1e9
 800c144:	0800c1db 	.word	0x0800c1db
 800c148:	0800c1db 	.word	0x0800c1db
 800c14c:	0800c1db 	.word	0x0800c1db
 800c150:	0800c1db 	.word	0x0800c1db
 800c154:	0800c1db 	.word	0x0800c1db
 800c158:	0800c1db 	.word	0x0800c1db
 800c15c:	0800c1db 	.word	0x0800c1db
 800c160:	0800c1db 	.word	0x0800c1db
 800c164:	0800c197 	.word	0x0800c197
 800c168:	0800c1c1 	.word	0x0800c1c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b03      	cmp	r3, #3
 800c176:	d107      	bne.n	800c188 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c178:	f107 030a 	add.w	r3, r7, #10
 800c17c:	2202      	movs	r2, #2
 800c17e:	4619      	mov	r1, r3
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f001 fcf3 	bl	800db6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c186:	e032      	b.n	800c1ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f001 fc7d 	bl	800da8a <USBD_CtlError>
            ret = USBD_FAIL;
 800c190:	2303      	movs	r3, #3
 800c192:	75fb      	strb	r3, [r7, #23]
          break;
 800c194:	e02b      	b.n	800c1ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d107      	bne.n	800c1b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1a2:	f107 030d 	add.w	r3, r7, #13
 800c1a6:	2201      	movs	r2, #1
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f001 fcde 	bl	800db6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1b0:	e01d      	b.n	800c1ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f001 fc68 	bl	800da8a <USBD_CtlError>
            ret = USBD_FAIL;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c1be:	e016      	b.n	800c1ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	d00f      	beq.n	800c1ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f001 fc5b 	bl	800da8a <USBD_CtlError>
            ret = USBD_FAIL;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c1d8:	e008      	b.n	800c1ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f001 fc54 	bl	800da8a <USBD_CtlError>
          ret = USBD_FAIL;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	75fb      	strb	r3, [r7, #23]
          break;
 800c1e6:	e002      	b.n	800c1ee <USBD_CDC_Setup+0x19e>
          break;
 800c1e8:	bf00      	nop
 800c1ea:	e008      	b.n	800c1fe <USBD_CDC_Setup+0x1ae>
          break;
 800c1ec:	bf00      	nop
      }
      break;
 800c1ee:	e006      	b.n	800c1fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f001 fc49 	bl	800da8a <USBD_CtlError>
      ret = USBD_FAIL;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c1fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800c1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c21a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	32b0      	adds	r2, #176	; 0xb0
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c22e:	2303      	movs	r3, #3
 800c230:	e065      	b.n	800c2fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	32b0      	adds	r2, #176	; 0xb0
 800c23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c240:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c242:	78fb      	ldrb	r3, [r7, #3]
 800c244:	f003 020f 	and.w	r2, r3, #15
 800c248:	6879      	ldr	r1, [r7, #4]
 800c24a:	4613      	mov	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	440b      	add	r3, r1
 800c254:	3318      	adds	r3, #24
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d02f      	beq.n	800c2bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c25c:	78fb      	ldrb	r3, [r7, #3]
 800c25e:	f003 020f 	and.w	r2, r3, #15
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	4613      	mov	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	440b      	add	r3, r1
 800c26e:	3318      	adds	r3, #24
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	78fb      	ldrb	r3, [r7, #3]
 800c274:	f003 010f 	and.w	r1, r3, #15
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	460b      	mov	r3, r1
 800c27c:	00db      	lsls	r3, r3, #3
 800c27e:	440b      	add	r3, r1
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4403      	add	r3, r0
 800c284:	331c      	adds	r3, #28
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	fbb2 f1f3 	udiv	r1, r2, r3
 800c28c:	fb01 f303 	mul.w	r3, r1, r3
 800c290:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c292:	2b00      	cmp	r3, #0
 800c294:	d112      	bne.n	800c2bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c296:	78fb      	ldrb	r3, [r7, #3]
 800c298:	f003 020f 	and.w	r2, r3, #15
 800c29c:	6879      	ldr	r1, [r7, #4]
 800c29e:	4613      	mov	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	4413      	add	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	440b      	add	r3, r1
 800c2a8:	3318      	adds	r3, #24
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c2ae:	78f9      	ldrb	r1, [r7, #3]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f005 fd02 	bl	8011cbe <USBD_LL_Transmit>
 800c2ba:	e01f      	b.n	800c2fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	33b0      	adds	r3, #176	; 0xb0
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d010      	beq.n	800c2fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	33b0      	adds	r3, #176	; 0xb0
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c2f8:	78fa      	ldrb	r2, [r7, #3]
 800c2fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b084      	sub	sp, #16
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	460b      	mov	r3, r1
 800c310:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	32b0      	adds	r2, #176	; 0xb0
 800c31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c320:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	32b0      	adds	r2, #176	; 0xb0
 800c32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c334:	2303      	movs	r3, #3
 800c336:	e01a      	b.n	800c36e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c338:	78fb      	ldrb	r3, [r7, #3]
 800c33a:	4619      	mov	r1, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f005 fd00 	bl	8011d42 <USBD_LL_GetRxDataSize>
 800c342:	4602      	mov	r2, r0
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	33b0      	adds	r3, #176	; 0xb0
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c368:	4611      	mov	r1, r2
 800c36a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c36c:	2300      	movs	r3, #0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	32b0      	adds	r2, #176	; 0xb0
 800c388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c394:	2303      	movs	r3, #3
 800c396:	e025      	b.n	800c3e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	33b0      	adds	r3, #176	; 0xb0
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d01a      	beq.n	800c3e2 <USBD_CDC_EP0_RxReady+0x6c>
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c3b2:	2bff      	cmp	r3, #255	; 0xff
 800c3b4:	d015      	beq.n	800c3e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	33b0      	adds	r3, #176	; 0xb0
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4413      	add	r3, r2
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c3ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3d6:	b292      	uxth	r2, r2
 800c3d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	22ff      	movs	r2, #255	; 0xff
 800c3de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3f4:	2182      	movs	r1, #130	; 0x82
 800c3f6:	4818      	ldr	r0, [pc, #96]	; (800c458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c3f8:	f000 fd0f 	bl	800ce1a <USBD_GetEpDesc>
 800c3fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3fe:	2101      	movs	r1, #1
 800c400:	4815      	ldr	r0, [pc, #84]	; (800c458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c402:	f000 fd0a 	bl	800ce1a <USBD_GetEpDesc>
 800c406:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c408:	2181      	movs	r1, #129	; 0x81
 800c40a:	4813      	ldr	r0, [pc, #76]	; (800c458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c40c:	f000 fd05 	bl	800ce1a <USBD_GetEpDesc>
 800c410:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2210      	movs	r2, #16
 800c41c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d006      	beq.n	800c432 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	2200      	movs	r2, #0
 800c428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c42c:	711a      	strb	r2, [r3, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c440:	711a      	strb	r2, [r3, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2243      	movs	r2, #67	; 0x43
 800c44a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c44c:	4b02      	ldr	r3, [pc, #8]	; (800c458 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20000334 	.word	0x20000334

0800c45c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c464:	2182      	movs	r1, #130	; 0x82
 800c466:	4818      	ldr	r0, [pc, #96]	; (800c4c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c468:	f000 fcd7 	bl	800ce1a <USBD_GetEpDesc>
 800c46c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c46e:	2101      	movs	r1, #1
 800c470:	4815      	ldr	r0, [pc, #84]	; (800c4c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c472:	f000 fcd2 	bl	800ce1a <USBD_GetEpDesc>
 800c476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c478:	2181      	movs	r1, #129	; 0x81
 800c47a:	4813      	ldr	r0, [pc, #76]	; (800c4c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c47c:	f000 fccd 	bl	800ce1a <USBD_GetEpDesc>
 800c480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	2210      	movs	r2, #16
 800c48c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d006      	beq.n	800c4a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	2200      	movs	r2, #0
 800c498:	711a      	strb	r2, [r3, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f042 0202 	orr.w	r2, r2, #2
 800c4a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d006      	beq.n	800c4b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	711a      	strb	r2, [r3, #4]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f042 0202 	orr.w	r2, r2, #2
 800c4b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2243      	movs	r2, #67	; 0x43
 800c4ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4bc:	4b02      	ldr	r3, [pc, #8]	; (800c4c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3718      	adds	r7, #24
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20000334 	.word	0x20000334

0800c4cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4d4:	2182      	movs	r1, #130	; 0x82
 800c4d6:	4818      	ldr	r0, [pc, #96]	; (800c538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4d8:	f000 fc9f 	bl	800ce1a <USBD_GetEpDesc>
 800c4dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4de:	2101      	movs	r1, #1
 800c4e0:	4815      	ldr	r0, [pc, #84]	; (800c538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4e2:	f000 fc9a 	bl	800ce1a <USBD_GetEpDesc>
 800c4e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4e8:	2181      	movs	r1, #129	; 0x81
 800c4ea:	4813      	ldr	r0, [pc, #76]	; (800c538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4ec:	f000 fc95 	bl	800ce1a <USBD_GetEpDesc>
 800c4f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	2210      	movs	r2, #16
 800c4fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d006      	beq.n	800c512 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	2200      	movs	r2, #0
 800c508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c50c:	711a      	strb	r2, [r3, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d006      	beq.n	800c526 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c520:	711a      	strb	r2, [r3, #4]
 800c522:	2200      	movs	r2, #0
 800c524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2243      	movs	r2, #67	; 0x43
 800c52a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c52c:	4b02      	ldr	r3, [pc, #8]	; (800c538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20000334 	.word	0x20000334

0800c53c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	220a      	movs	r2, #10
 800c548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c54a:	4b03      	ldr	r3, [pc, #12]	; (800c558 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	200002f0 	.word	0x200002f0

0800c55c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d101      	bne.n	800c570 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c56c:	2303      	movs	r3, #3
 800c56e:	e009      	b.n	800c584 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	33b0      	adds	r3, #176	; 0xb0
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c582:	2300      	movs	r3, #0
}
 800c584:	4618      	mov	r0, r3
 800c586:	370c      	adds	r7, #12
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c590:	b480      	push	{r7}
 800c592:	b087      	sub	sp, #28
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	32b0      	adds	r2, #176	; 0xb0
 800c5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e008      	b.n	800c5c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	371c      	adds	r7, #28
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	32b0      	adds	r2, #176	; 0xb0
 800c5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e004      	b.n	800c602 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3714      	adds	r7, #20
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr
	...

0800c610 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	32b0      	adds	r2, #176	; 0xb0
 800c622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c626:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	32b0      	adds	r2, #176	; 0xb0
 800c632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c63a:	2303      	movs	r3, #3
 800c63c:	e018      	b.n	800c670 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	7c1b      	ldrb	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c646:	4b0c      	ldr	r3, [pc, #48]	; (800c678 <USBD_CDC_ReceivePacket+0x68>)
 800c648:	7819      	ldrb	r1, [r3, #0]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c650:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f005 fb53 	bl	8011d00 <USBD_LL_PrepareReceive>
 800c65a:	e008      	b.n	800c66e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c65c:	4b06      	ldr	r3, [pc, #24]	; (800c678 <USBD_CDC_ReceivePacket+0x68>)
 800c65e:	7819      	ldrb	r1, [r3, #0]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c666:	2340      	movs	r3, #64	; 0x40
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f005 fb49 	bl	8011d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20000378 	.word	0x20000378

0800c67c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	4613      	mov	r3, r2
 800c688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c690:	2303      	movs	r3, #3
 800c692:	e01f      	b.n	800c6d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2200      	movs	r2, #0
 800c698:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	79fa      	ldrb	r2, [r7, #7]
 800c6c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f005 f9c3 	bl	8011a54 <USBD_LL_Init>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e025      	b.n	800c740 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	32ae      	adds	r2, #174	; 0xae
 800c706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00f      	beq.n	800c730 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	32ae      	adds	r2, #174	; 0xae
 800c71a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	f107 020e 	add.w	r2, r7, #14
 800c724:	4610      	mov	r0, r2
 800c726:	4798      	blx	r3
 800c728:	4602      	mov	r2, r0
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f005 f9cb 	bl	8011aec <USBD_LL_Start>
 800c756:	4603      	mov	r3, r0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c768:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	370c      	adds	r7, #12
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	460b      	mov	r3, r1
 800c780:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d009      	beq.n	800c7a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	78fa      	ldrb	r2, [r7, #3]
 800c79a:	4611      	mov	r1, r2
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	4798      	blx	r3
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}

0800c7ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7ae:	b580      	push	{r7, lr}
 800c7b0:	b084      	sub	sp, #16
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	78fa      	ldrb	r2, [r7, #3]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	4798      	blx	r3
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f001 f90e 	bl	800da16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c808:	461a      	mov	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c816:	f003 031f 	and.w	r3, r3, #31
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	d01a      	beq.n	800c854 <USBD_LL_SetupStage+0x72>
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d822      	bhi.n	800c868 <USBD_LL_SetupStage+0x86>
 800c822:	2b00      	cmp	r3, #0
 800c824:	d002      	beq.n	800c82c <USBD_LL_SetupStage+0x4a>
 800c826:	2b01      	cmp	r3, #1
 800c828:	d00a      	beq.n	800c840 <USBD_LL_SetupStage+0x5e>
 800c82a:	e01d      	b.n	800c868 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c832:	4619      	mov	r1, r3
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fb65 	bl	800cf04 <USBD_StdDevReq>
 800c83a:	4603      	mov	r3, r0
 800c83c:	73fb      	strb	r3, [r7, #15]
      break;
 800c83e:	e020      	b.n	800c882 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fbcd 	bl	800cfe8 <USBD_StdItfReq>
 800c84e:	4603      	mov	r3, r0
 800c850:	73fb      	strb	r3, [r7, #15]
      break;
 800c852:	e016      	b.n	800c882 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c85a:	4619      	mov	r1, r3
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fc2f 	bl	800d0c0 <USBD_StdEPReq>
 800c862:	4603      	mov	r3, r0
 800c864:	73fb      	strb	r3, [r7, #15]
      break;
 800c866:	e00c      	b.n	800c882 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c86e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c872:	b2db      	uxtb	r3, r3
 800c874:	4619      	mov	r1, r3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f005 f998 	bl	8011bac <USBD_LL_StallEP>
 800c87c:	4603      	mov	r3, r0
 800c87e:	73fb      	strb	r3, [r7, #15]
      break;
 800c880:	bf00      	nop
  }

  return ret;
 800c882:	7bfb      	ldrb	r3, [r7, #15]
}
 800c884:	4618      	mov	r0, r3
 800c886:	3710      	adds	r7, #16
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	460b      	mov	r3, r1
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c89e:	7afb      	ldrb	r3, [r7, #11]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d16e      	bne.n	800c982 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c8aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	f040 8098 	bne.w	800c9e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	689a      	ldr	r2, [r3, #8]
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d913      	bls.n	800c8ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	689a      	ldr	r2, [r3, #8]
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	1ad2      	subs	r2, r2, r3
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	68da      	ldr	r2, [r3, #12]
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	bf28      	it	cs
 800c8de:	4613      	movcs	r3, r2
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f001 f98a 	bl	800dbfe <USBD_CtlContinueRx>
 800c8ea:	e07d      	b.n	800c9e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8f2:	f003 031f 	and.w	r3, r3, #31
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d014      	beq.n	800c924 <USBD_LL_DataOutStage+0x98>
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d81d      	bhi.n	800c93a <USBD_LL_DataOutStage+0xae>
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d002      	beq.n	800c908 <USBD_LL_DataOutStage+0x7c>
 800c902:	2b01      	cmp	r3, #1
 800c904:	d003      	beq.n	800c90e <USBD_LL_DataOutStage+0x82>
 800c906:	e018      	b.n	800c93a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	75bb      	strb	r3, [r7, #22]
            break;
 800c90c:	e018      	b.n	800c940 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c914:	b2db      	uxtb	r3, r3
 800c916:	4619      	mov	r1, r3
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f000 fa64 	bl	800cde6 <USBD_CoreFindIF>
 800c91e:	4603      	mov	r3, r0
 800c920:	75bb      	strb	r3, [r7, #22]
            break;
 800c922:	e00d      	b.n	800c940 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	4619      	mov	r1, r3
 800c92e:	68f8      	ldr	r0, [r7, #12]
 800c930:	f000 fa66 	bl	800ce00 <USBD_CoreFindEP>
 800c934:	4603      	mov	r3, r0
 800c936:	75bb      	strb	r3, [r7, #22]
            break;
 800c938:	e002      	b.n	800c940 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c93a:	2300      	movs	r3, #0
 800c93c:	75bb      	strb	r3, [r7, #22]
            break;
 800c93e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c940:	7dbb      	ldrb	r3, [r7, #22]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d119      	bne.n	800c97a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d113      	bne.n	800c97a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c952:	7dba      	ldrb	r2, [r7, #22]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	32ae      	adds	r2, #174	; 0xae
 800c958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00b      	beq.n	800c97a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c962:	7dba      	ldrb	r2, [r7, #22]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c96a:	7dba      	ldrb	r2, [r7, #22]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	32ae      	adds	r2, #174	; 0xae
 800c970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f001 f950 	bl	800dc20 <USBD_CtlSendStatus>
 800c980:	e032      	b.n	800c9e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c988:	b2db      	uxtb	r3, r3
 800c98a:	4619      	mov	r1, r3
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f000 fa37 	bl	800ce00 <USBD_CoreFindEP>
 800c992:	4603      	mov	r3, r0
 800c994:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c996:	7dbb      	ldrb	r3, [r7, #22]
 800c998:	2bff      	cmp	r3, #255	; 0xff
 800c99a:	d025      	beq.n	800c9e8 <USBD_LL_DataOutStage+0x15c>
 800c99c:	7dbb      	ldrb	r3, [r7, #22]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d122      	bne.n	800c9e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b03      	cmp	r3, #3
 800c9ac:	d117      	bne.n	800c9de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c9ae:	7dba      	ldrb	r2, [r7, #22]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	32ae      	adds	r2, #174	; 0xae
 800c9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00f      	beq.n	800c9de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c9be:	7dba      	ldrb	r2, [r7, #22]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c9c6:	7dba      	ldrb	r2, [r7, #22]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	32ae      	adds	r2, #174	; 0xae
 800c9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	7afa      	ldrb	r2, [r7, #11]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	4798      	blx	r3
 800c9da:	4603      	mov	r3, r0
 800c9dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	e000      	b.n	800c9ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b086      	sub	sp, #24
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	60f8      	str	r0, [r7, #12]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	607a      	str	r2, [r7, #4]
 800c9fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ca00:	7afb      	ldrb	r3, [r7, #11]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d16f      	bne.n	800cae6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3314      	adds	r3, #20
 800ca0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d15a      	bne.n	800cacc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	689a      	ldr	r2, [r3, #8]
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d914      	bls.n	800ca4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	689a      	ldr	r2, [r3, #8]
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	1ad2      	subs	r2, r2, r3
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	461a      	mov	r2, r3
 800ca36:	6879      	ldr	r1, [r7, #4]
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f001 f8b2 	bl	800dba2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca3e:	2300      	movs	r3, #0
 800ca40:	2200      	movs	r2, #0
 800ca42:	2100      	movs	r1, #0
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f005 f95b 	bl	8011d00 <USBD_LL_PrepareReceive>
 800ca4a:	e03f      	b.n	800cacc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	68da      	ldr	r2, [r3, #12]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d11c      	bne.n	800ca92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d316      	bcc.n	800ca92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d20f      	bcs.n	800ca92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ca72:	2200      	movs	r2, #0
 800ca74:	2100      	movs	r1, #0
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f001 f893 	bl	800dba2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca84:	2300      	movs	r3, #0
 800ca86:	2200      	movs	r2, #0
 800ca88:	2100      	movs	r1, #0
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f005 f938 	bl	8011d00 <USBD_LL_PrepareReceive>
 800ca90:	e01c      	b.n	800cacc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d10f      	bne.n	800cabe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d009      	beq.n	800cabe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2200      	movs	r2, #0
 800caae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cabe:	2180      	movs	r1, #128	; 0x80
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f005 f873 	bl	8011bac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f001 f8bd 	bl	800dc46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d03a      	beq.n	800cb4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f7ff fe42 	bl	800c760 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cae4:	e032      	b.n	800cb4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cae6:	7afb      	ldrb	r3, [r7, #11]
 800cae8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800caec:	b2db      	uxtb	r3, r3
 800caee:	4619      	mov	r1, r3
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f000 f985 	bl	800ce00 <USBD_CoreFindEP>
 800caf6:	4603      	mov	r3, r0
 800caf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
 800cafc:	2bff      	cmp	r3, #255	; 0xff
 800cafe:	d025      	beq.n	800cb4c <USBD_LL_DataInStage+0x15a>
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d122      	bne.n	800cb4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b03      	cmp	r3, #3
 800cb10:	d11c      	bne.n	800cb4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cb12:	7dfa      	ldrb	r2, [r7, #23]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	32ae      	adds	r2, #174	; 0xae
 800cb18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d014      	beq.n	800cb4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cb22:	7dfa      	ldrb	r2, [r7, #23]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cb2a:	7dfa      	ldrb	r2, [r7, #23]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	32ae      	adds	r2, #174	; 0xae
 800cb30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	7afa      	ldrb	r2, [r7, #11]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	4798      	blx	r3
 800cb3e:	4603      	mov	r3, r0
 800cb40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cb42:	7dbb      	ldrb	r3, [r7, #22]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cb48:	7dbb      	ldrb	r3, [r7, #22]
 800cb4a:	e000      	b.n	800cb4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b084      	sub	sp, #16
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2201      	movs	r2, #1
 800cb66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d014      	beq.n	800cbbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00e      	beq.n	800cbbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	6852      	ldr	r2, [r2, #4]
 800cbaa:	b2d2      	uxtb	r2, r2
 800cbac:	4611      	mov	r1, r2
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	4798      	blx	r3
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cbbc:	2340      	movs	r3, #64	; 0x40
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f004 ffad 	bl	8011b22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2240      	movs	r2, #64	; 0x40
 800cbd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cbd8:	2340      	movs	r3, #64	; 0x40
 800cbda:	2200      	movs	r2, #0
 800cbdc:	2180      	movs	r1, #128	; 0x80
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f004 ff9f 	bl	8011b22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2240      	movs	r2, #64	; 0x40
 800cbee:	621a      	str	r2, [r3, #32]

  return ret;
 800cbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b083      	sub	sp, #12
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	460b      	mov	r3, r1
 800cc04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	78fa      	ldrb	r2, [r7, #3]
 800cc0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	370c      	adds	r7, #12
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr

0800cc1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cc1a:	b480      	push	{r7}
 800cc1c:	b083      	sub	sp, #12
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	2b04      	cmp	r3, #4
 800cc2c:	d006      	beq.n	800cc3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2204      	movs	r2, #4
 800cc40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	370c      	adds	r7, #12
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cc52:	b480      	push	{r7}
 800cc54:	b083      	sub	sp, #12
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	2b04      	cmp	r3, #4
 800cc64:	d106      	bne.n	800cc74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	370c      	adds	r7, #12
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr

0800cc82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b03      	cmp	r3, #3
 800cc94:	d110      	bne.n	800ccb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cca6:	69db      	ldr	r3, [r3, #28]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d005      	beq.n	800ccb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb2:	69db      	ldr	r3, [r3, #28]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ccb8:	2300      	movs	r3, #0
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	32ae      	adds	r2, #174	; 0xae
 800ccd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d101      	bne.n	800cce4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cce0:	2303      	movs	r3, #3
 800cce2:	e01c      	b.n	800cd1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d115      	bne.n	800cd1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	32ae      	adds	r2, #174	; 0xae
 800ccfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccfe:	6a1b      	ldr	r3, [r3, #32]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00b      	beq.n	800cd1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	32ae      	adds	r2, #174	; 0xae
 800cd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd12:	6a1b      	ldr	r3, [r3, #32]
 800cd14:	78fa      	ldrb	r2, [r7, #3]
 800cd16:	4611      	mov	r1, r2
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b082      	sub	sp, #8
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	32ae      	adds	r2, #174	; 0xae
 800cd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d101      	bne.n	800cd48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd44:	2303      	movs	r3, #3
 800cd46:	e01c      	b.n	800cd82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d115      	bne.n	800cd80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	32ae      	adds	r2, #174	; 0xae
 800cd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d00b      	beq.n	800cd80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	32ae      	adds	r2, #174	; 0xae
 800cd72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd78:	78fa      	ldrb	r2, [r7, #3]
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cd8a:	b480      	push	{r7}
 800cd8c:	b083      	sub	sp, #12
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00e      	beq.n	800cddc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	6852      	ldr	r2, [r2, #4]
 800cdca:	b2d2      	uxtb	r2, r2
 800cdcc:	4611      	mov	r1, r2
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	4798      	blx	r3
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cde6:	b480      	push	{r7}
 800cde8:	b083      	sub	sp, #12
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
 800cdee:	460b      	mov	r3, r1
 800cdf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b086      	sub	sp, #24
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	460b      	mov	r3, r1
 800ce24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	885b      	ldrh	r3, [r3, #2]
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d920      	bls.n	800ce84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce4a:	e013      	b.n	800ce74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce4c:	f107 030a 	add.w	r3, r7, #10
 800ce50:	4619      	mov	r1, r3
 800ce52:	6978      	ldr	r0, [r7, #20]
 800ce54:	f000 f81b 	bl	800ce8e <USBD_GetNextDesc>
 800ce58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	785b      	ldrb	r3, [r3, #1]
 800ce5e:	2b05      	cmp	r3, #5
 800ce60:	d108      	bne.n	800ce74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	789b      	ldrb	r3, [r3, #2]
 800ce6a:	78fa      	ldrb	r2, [r7, #3]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d008      	beq.n	800ce82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce70:	2300      	movs	r3, #0
 800ce72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	885b      	ldrh	r3, [r3, #2]
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	897b      	ldrh	r3, [r7, #10]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d8e5      	bhi.n	800ce4c <USBD_GetEpDesc+0x32>
 800ce80:	e000      	b.n	800ce84 <USBD_GetEpDesc+0x6a>
          break;
 800ce82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce84:	693b      	ldr	r3, [r7, #16]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce8e:	b480      	push	{r7}
 800ce90:	b085      	sub	sp, #20
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	881a      	ldrh	r2, [r3, #0]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	4413      	add	r3, r2
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4413      	add	r3, r2
 800ceb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ceba:	68fb      	ldr	r3, [r7, #12]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	3301      	adds	r3, #1
 800cede:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cee6:	8a3b      	ldrh	r3, [r7, #16]
 800cee8:	021b      	lsls	r3, r3, #8
 800ceea:	b21a      	sxth	r2, r3
 800ceec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	b21b      	sxth	r3, r3
 800cef4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cef6:	89fb      	ldrh	r3, [r7, #14]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	371c      	adds	r7, #28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b084      	sub	sp, #16
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf1a:	2b40      	cmp	r3, #64	; 0x40
 800cf1c:	d005      	beq.n	800cf2a <USBD_StdDevReq+0x26>
 800cf1e:	2b40      	cmp	r3, #64	; 0x40
 800cf20:	d857      	bhi.n	800cfd2 <USBD_StdDevReq+0xce>
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d00f      	beq.n	800cf46 <USBD_StdDevReq+0x42>
 800cf26:	2b20      	cmp	r3, #32
 800cf28:	d153      	bne.n	800cfd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	32ae      	adds	r2, #174	; 0xae
 800cf34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	4798      	blx	r3
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]
      break;
 800cf44:	e04a      	b.n	800cfdc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	785b      	ldrb	r3, [r3, #1]
 800cf4a:	2b09      	cmp	r3, #9
 800cf4c:	d83b      	bhi.n	800cfc6 <USBD_StdDevReq+0xc2>
 800cf4e:	a201      	add	r2, pc, #4	; (adr r2, 800cf54 <USBD_StdDevReq+0x50>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cfa9 	.word	0x0800cfa9
 800cf58:	0800cfbd 	.word	0x0800cfbd
 800cf5c:	0800cfc7 	.word	0x0800cfc7
 800cf60:	0800cfb3 	.word	0x0800cfb3
 800cf64:	0800cfc7 	.word	0x0800cfc7
 800cf68:	0800cf87 	.word	0x0800cf87
 800cf6c:	0800cf7d 	.word	0x0800cf7d
 800cf70:	0800cfc7 	.word	0x0800cfc7
 800cf74:	0800cf9f 	.word	0x0800cf9f
 800cf78:	0800cf91 	.word	0x0800cf91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fa3c 	bl	800d3fc <USBD_GetDescriptor>
          break;
 800cf84:	e024      	b.n	800cfd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fba1 	bl	800d6d0 <USBD_SetAddress>
          break;
 800cf8e:	e01f      	b.n	800cfd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fbe0 	bl	800d758 <USBD_SetConfig>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73fb      	strb	r3, [r7, #15]
          break;
 800cf9c:	e018      	b.n	800cfd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fc83 	bl	800d8ac <USBD_GetConfig>
          break;
 800cfa6:	e013      	b.n	800cfd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fcb4 	bl	800d918 <USBD_GetStatus>
          break;
 800cfb0:	e00e      	b.n	800cfd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fce3 	bl	800d980 <USBD_SetFeature>
          break;
 800cfba:	e009      	b.n	800cfd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fd07 	bl	800d9d2 <USBD_ClrFeature>
          break;
 800cfc4:	e004      	b.n	800cfd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fd5e 	bl	800da8a <USBD_CtlError>
          break;
 800cfce:	bf00      	nop
      }
      break;
 800cfd0:	e004      	b.n	800cfdc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fd58 	bl	800da8a <USBD_CtlError>
      break;
 800cfda:	bf00      	nop
  }

  return ret;
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop

0800cfe8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cffe:	2b40      	cmp	r3, #64	; 0x40
 800d000:	d005      	beq.n	800d00e <USBD_StdItfReq+0x26>
 800d002:	2b40      	cmp	r3, #64	; 0x40
 800d004:	d852      	bhi.n	800d0ac <USBD_StdItfReq+0xc4>
 800d006:	2b00      	cmp	r3, #0
 800d008:	d001      	beq.n	800d00e <USBD_StdItfReq+0x26>
 800d00a:	2b20      	cmp	r3, #32
 800d00c:	d14e      	bne.n	800d0ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d014:	b2db      	uxtb	r3, r3
 800d016:	3b01      	subs	r3, #1
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d840      	bhi.n	800d09e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	889b      	ldrh	r3, [r3, #4]
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b01      	cmp	r3, #1
 800d024:	d836      	bhi.n	800d094 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	889b      	ldrh	r3, [r3, #4]
 800d02a:	b2db      	uxtb	r3, r3
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7ff fed9 	bl	800cde6 <USBD_CoreFindIF>
 800d034:	4603      	mov	r3, r0
 800d036:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d038:	7bbb      	ldrb	r3, [r7, #14]
 800d03a:	2bff      	cmp	r3, #255	; 0xff
 800d03c:	d01d      	beq.n	800d07a <USBD_StdItfReq+0x92>
 800d03e:	7bbb      	ldrb	r3, [r7, #14]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d11a      	bne.n	800d07a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d044:	7bba      	ldrb	r2, [r7, #14]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	32ae      	adds	r2, #174	; 0xae
 800d04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00f      	beq.n	800d074 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d054:	7bba      	ldrb	r2, [r7, #14]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d05c:	7bba      	ldrb	r2, [r7, #14]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	32ae      	adds	r2, #174	; 0xae
 800d062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	4798      	blx	r3
 800d06e:	4603      	mov	r3, r0
 800d070:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d072:	e004      	b.n	800d07e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d074:	2303      	movs	r3, #3
 800d076:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d078:	e001      	b.n	800d07e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d07a:	2303      	movs	r3, #3
 800d07c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	88db      	ldrh	r3, [r3, #6]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d110      	bne.n	800d0a8 <USBD_StdItfReq+0xc0>
 800d086:	7bfb      	ldrb	r3, [r7, #15]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10d      	bne.n	800d0a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fdc7 	bl	800dc20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d092:	e009      	b.n	800d0a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 fcf7 	bl	800da8a <USBD_CtlError>
          break;
 800d09c:	e004      	b.n	800d0a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d09e:	6839      	ldr	r1, [r7, #0]
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fcf2 	bl	800da8a <USBD_CtlError>
          break;
 800d0a6:	e000      	b.n	800d0aa <USBD_StdItfReq+0xc2>
          break;
 800d0a8:	bf00      	nop
      }
      break;
 800d0aa:	e004      	b.n	800d0b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fceb 	bl	800da8a <USBD_CtlError>
      break;
 800d0b4:	bf00      	nop
  }

  return ret;
 800d0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	889b      	ldrh	r3, [r3, #4]
 800d0d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0dc:	2b40      	cmp	r3, #64	; 0x40
 800d0de:	d007      	beq.n	800d0f0 <USBD_StdEPReq+0x30>
 800d0e0:	2b40      	cmp	r3, #64	; 0x40
 800d0e2:	f200 817f 	bhi.w	800d3e4 <USBD_StdEPReq+0x324>
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d02a      	beq.n	800d140 <USBD_StdEPReq+0x80>
 800d0ea:	2b20      	cmp	r3, #32
 800d0ec:	f040 817a 	bne.w	800d3e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff fe83 	bl	800ce00 <USBD_CoreFindEP>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0fe:	7b7b      	ldrb	r3, [r7, #13]
 800d100:	2bff      	cmp	r3, #255	; 0xff
 800d102:	f000 8174 	beq.w	800d3ee <USBD_StdEPReq+0x32e>
 800d106:	7b7b      	ldrb	r3, [r7, #13]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f040 8170 	bne.w	800d3ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d10e:	7b7a      	ldrb	r2, [r7, #13]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d116:	7b7a      	ldrb	r2, [r7, #13]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	32ae      	adds	r2, #174	; 0xae
 800d11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 8163 	beq.w	800d3ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d128:	7b7a      	ldrb	r2, [r7, #13]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	32ae      	adds	r2, #174	; 0xae
 800d12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	4798      	blx	r3
 800d13a:	4603      	mov	r3, r0
 800d13c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d13e:	e156      	b.n	800d3ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	785b      	ldrb	r3, [r3, #1]
 800d144:	2b03      	cmp	r3, #3
 800d146:	d008      	beq.n	800d15a <USBD_StdEPReq+0x9a>
 800d148:	2b03      	cmp	r3, #3
 800d14a:	f300 8145 	bgt.w	800d3d8 <USBD_StdEPReq+0x318>
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f000 809b 	beq.w	800d28a <USBD_StdEPReq+0x1ca>
 800d154:	2b01      	cmp	r3, #1
 800d156:	d03c      	beq.n	800d1d2 <USBD_StdEPReq+0x112>
 800d158:	e13e      	b.n	800d3d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b02      	cmp	r3, #2
 800d164:	d002      	beq.n	800d16c <USBD_StdEPReq+0xac>
 800d166:	2b03      	cmp	r3, #3
 800d168:	d016      	beq.n	800d198 <USBD_StdEPReq+0xd8>
 800d16a:	e02c      	b.n	800d1c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00d      	beq.n	800d18e <USBD_StdEPReq+0xce>
 800d172:	7bbb      	ldrb	r3, [r7, #14]
 800d174:	2b80      	cmp	r3, #128	; 0x80
 800d176:	d00a      	beq.n	800d18e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d178:	7bbb      	ldrb	r3, [r7, #14]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f004 fd15 	bl	8011bac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d182:	2180      	movs	r1, #128	; 0x80
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f004 fd11 	bl	8011bac <USBD_LL_StallEP>
 800d18a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d18c:	e020      	b.n	800d1d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fc7a 	bl	800da8a <USBD_CtlError>
              break;
 800d196:	e01b      	b.n	800d1d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	885b      	ldrh	r3, [r3, #2]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10e      	bne.n	800d1be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00b      	beq.n	800d1be <USBD_StdEPReq+0xfe>
 800d1a6:	7bbb      	ldrb	r3, [r7, #14]
 800d1a8:	2b80      	cmp	r3, #128	; 0x80
 800d1aa:	d008      	beq.n	800d1be <USBD_StdEPReq+0xfe>
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	88db      	ldrh	r3, [r3, #6]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d104      	bne.n	800d1be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f004 fcf7 	bl	8011bac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 fd2e 	bl	800dc20 <USBD_CtlSendStatus>

              break;
 800d1c4:	e004      	b.n	800d1d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fc5e 	bl	800da8a <USBD_CtlError>
              break;
 800d1ce:	bf00      	nop
          }
          break;
 800d1d0:	e107      	b.n	800d3e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d002      	beq.n	800d1e4 <USBD_StdEPReq+0x124>
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d016      	beq.n	800d210 <USBD_StdEPReq+0x150>
 800d1e2:	e04b      	b.n	800d27c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1e4:	7bbb      	ldrb	r3, [r7, #14]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00d      	beq.n	800d206 <USBD_StdEPReq+0x146>
 800d1ea:	7bbb      	ldrb	r3, [r7, #14]
 800d1ec:	2b80      	cmp	r3, #128	; 0x80
 800d1ee:	d00a      	beq.n	800d206 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1f0:	7bbb      	ldrb	r3, [r7, #14]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f004 fcd9 	bl	8011bac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1fa:	2180      	movs	r1, #128	; 0x80
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f004 fcd5 	bl	8011bac <USBD_LL_StallEP>
 800d202:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d204:	e040      	b.n	800d288 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fc3e 	bl	800da8a <USBD_CtlError>
              break;
 800d20e:	e03b      	b.n	800d288 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	885b      	ldrh	r3, [r3, #2]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d136      	bne.n	800d286 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d218:	7bbb      	ldrb	r3, [r7, #14]
 800d21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d004      	beq.n	800d22c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d222:	7bbb      	ldrb	r3, [r7, #14]
 800d224:	4619      	mov	r1, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f004 fcdf 	bl	8011bea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fcf7 	bl	800dc20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d232:	7bbb      	ldrb	r3, [r7, #14]
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7ff fde2 	bl	800ce00 <USBD_CoreFindEP>
 800d23c:	4603      	mov	r3, r0
 800d23e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d240:	7b7b      	ldrb	r3, [r7, #13]
 800d242:	2bff      	cmp	r3, #255	; 0xff
 800d244:	d01f      	beq.n	800d286 <USBD_StdEPReq+0x1c6>
 800d246:	7b7b      	ldrb	r3, [r7, #13]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d11c      	bne.n	800d286 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d24c:	7b7a      	ldrb	r2, [r7, #13]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d254:	7b7a      	ldrb	r2, [r7, #13]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	32ae      	adds	r2, #174	; 0xae
 800d25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d010      	beq.n	800d286 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d264:	7b7a      	ldrb	r2, [r7, #13]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	32ae      	adds	r2, #174	; 0xae
 800d26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	4798      	blx	r3
 800d276:	4603      	mov	r3, r0
 800d278:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d27a:	e004      	b.n	800d286 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fc03 	bl	800da8a <USBD_CtlError>
              break;
 800d284:	e000      	b.n	800d288 <USBD_StdEPReq+0x1c8>
              break;
 800d286:	bf00      	nop
          }
          break;
 800d288:	e0ab      	b.n	800d3e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b02      	cmp	r3, #2
 800d294:	d002      	beq.n	800d29c <USBD_StdEPReq+0x1dc>
 800d296:	2b03      	cmp	r3, #3
 800d298:	d032      	beq.n	800d300 <USBD_StdEPReq+0x240>
 800d29a:	e097      	b.n	800d3cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d29c:	7bbb      	ldrb	r3, [r7, #14]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d007      	beq.n	800d2b2 <USBD_StdEPReq+0x1f2>
 800d2a2:	7bbb      	ldrb	r3, [r7, #14]
 800d2a4:	2b80      	cmp	r3, #128	; 0x80
 800d2a6:	d004      	beq.n	800d2b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d2a8:	6839      	ldr	r1, [r7, #0]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fbed 	bl	800da8a <USBD_CtlError>
                break;
 800d2b0:	e091      	b.n	800d3d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	da0b      	bge.n	800d2d2 <USBD_StdEPReq+0x212>
 800d2ba:	7bbb      	ldrb	r3, [r7, #14]
 800d2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	3310      	adds	r3, #16
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	e00b      	b.n	800d2ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2d2:	7bbb      	ldrb	r3, [r7, #14]
 800d2d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2d8:	4613      	mov	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	4413      	add	r3, r2
 800d2e8:	3304      	adds	r3, #4
 800d2ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 fc37 	bl	800db6c <USBD_CtlSendData>
              break;
 800d2fe:	e06a      	b.n	800d3d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d304:	2b00      	cmp	r3, #0
 800d306:	da11      	bge.n	800d32c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d308:	7bbb      	ldrb	r3, [r7, #14]
 800d30a:	f003 020f 	and.w	r2, r3, #15
 800d30e:	6879      	ldr	r1, [r7, #4]
 800d310:	4613      	mov	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	440b      	add	r3, r1
 800d31a:	3324      	adds	r3, #36	; 0x24
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d117      	bne.n	800d352 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fbb0 	bl	800da8a <USBD_CtlError>
                  break;
 800d32a:	e054      	b.n	800d3d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d32c:	7bbb      	ldrb	r3, [r7, #14]
 800d32e:	f003 020f 	and.w	r2, r3, #15
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	440b      	add	r3, r1
 800d33e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d104      	bne.n	800d352 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 fb9d 	bl	800da8a <USBD_CtlError>
                  break;
 800d350:	e041      	b.n	800d3d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d356:	2b00      	cmp	r3, #0
 800d358:	da0b      	bge.n	800d372 <USBD_StdEPReq+0x2b2>
 800d35a:	7bbb      	ldrb	r3, [r7, #14]
 800d35c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d360:	4613      	mov	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	3310      	adds	r3, #16
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	4413      	add	r3, r2
 800d36e:	3304      	adds	r3, #4
 800d370:	e00b      	b.n	800d38a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d372:	7bbb      	ldrb	r3, [r7, #14]
 800d374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	4413      	add	r3, r2
 800d388:	3304      	adds	r3, #4
 800d38a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d38c:	7bbb      	ldrb	r3, [r7, #14]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <USBD_StdEPReq+0x2d8>
 800d392:	7bbb      	ldrb	r3, [r7, #14]
 800d394:	2b80      	cmp	r3, #128	; 0x80
 800d396:	d103      	bne.n	800d3a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2200      	movs	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	e00e      	b.n	800d3be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d3a0:	7bbb      	ldrb	r3, [r7, #14]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f004 fc3f 	bl	8011c28 <USBD_LL_IsStallEP>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d003      	beq.n	800d3b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	e002      	b.n	800d3be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2202      	movs	r2, #2
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 fbd1 	bl	800db6c <USBD_CtlSendData>
              break;
 800d3ca:	e004      	b.n	800d3d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 fb5b 	bl	800da8a <USBD_CtlError>
              break;
 800d3d4:	bf00      	nop
          }
          break;
 800d3d6:	e004      	b.n	800d3e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fb55 	bl	800da8a <USBD_CtlError>
          break;
 800d3e0:	bf00      	nop
      }
      break;
 800d3e2:	e005      	b.n	800d3f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d3e4:	6839      	ldr	r1, [r7, #0]
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fb4f 	bl	800da8a <USBD_CtlError>
      break;
 800d3ec:	e000      	b.n	800d3f0 <USBD_StdEPReq+0x330>
      break;
 800d3ee:	bf00      	nop
  }

  return ret;
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
	...

0800d3fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d406:	2300      	movs	r3, #0
 800d408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	885b      	ldrh	r3, [r3, #2]
 800d416:	0a1b      	lsrs	r3, r3, #8
 800d418:	b29b      	uxth	r3, r3
 800d41a:	3b01      	subs	r3, #1
 800d41c:	2b06      	cmp	r3, #6
 800d41e:	f200 8128 	bhi.w	800d672 <USBD_GetDescriptor+0x276>
 800d422:	a201      	add	r2, pc, #4	; (adr r2, 800d428 <USBD_GetDescriptor+0x2c>)
 800d424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d428:	0800d445 	.word	0x0800d445
 800d42c:	0800d45d 	.word	0x0800d45d
 800d430:	0800d49d 	.word	0x0800d49d
 800d434:	0800d673 	.word	0x0800d673
 800d438:	0800d673 	.word	0x0800d673
 800d43c:	0800d613 	.word	0x0800d613
 800d440:	0800d63f 	.word	0x0800d63f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	7c12      	ldrb	r2, [r2, #16]
 800d450:	f107 0108 	add.w	r1, r7, #8
 800d454:	4610      	mov	r0, r2
 800d456:	4798      	blx	r3
 800d458:	60f8      	str	r0, [r7, #12]
      break;
 800d45a:	e112      	b.n	800d682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7c1b      	ldrb	r3, [r3, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d10d      	bne.n	800d480 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46c:	f107 0208 	add.w	r2, r7, #8
 800d470:	4610      	mov	r0, r2
 800d472:	4798      	blx	r3
 800d474:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3301      	adds	r3, #1
 800d47a:	2202      	movs	r2, #2
 800d47c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d47e:	e100      	b.n	800d682 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d488:	f107 0208 	add.w	r2, r7, #8
 800d48c:	4610      	mov	r0, r2
 800d48e:	4798      	blx	r3
 800d490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3301      	adds	r3, #1
 800d496:	2202      	movs	r2, #2
 800d498:	701a      	strb	r2, [r3, #0]
      break;
 800d49a:	e0f2      	b.n	800d682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	885b      	ldrh	r3, [r3, #2]
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b05      	cmp	r3, #5
 800d4a4:	f200 80ac 	bhi.w	800d600 <USBD_GetDescriptor+0x204>
 800d4a8:	a201      	add	r2, pc, #4	; (adr r2, 800d4b0 <USBD_GetDescriptor+0xb4>)
 800d4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ae:	bf00      	nop
 800d4b0:	0800d4c9 	.word	0x0800d4c9
 800d4b4:	0800d4fd 	.word	0x0800d4fd
 800d4b8:	0800d531 	.word	0x0800d531
 800d4bc:	0800d565 	.word	0x0800d565
 800d4c0:	0800d599 	.word	0x0800d599
 800d4c4:	0800d5cd 	.word	0x0800d5cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	7c12      	ldrb	r2, [r2, #16]
 800d4e0:	f107 0108 	add.w	r1, r7, #8
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4798      	blx	r3
 800d4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ea:	e091      	b.n	800d610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 facb 	bl	800da8a <USBD_CtlError>
            err++;
 800d4f4:	7afb      	ldrb	r3, [r7, #11]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4fa:	e089      	b.n	800d610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00b      	beq.n	800d520 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	7c12      	ldrb	r2, [r2, #16]
 800d514:	f107 0108 	add.w	r1, r7, #8
 800d518:	4610      	mov	r0, r2
 800d51a:	4798      	blx	r3
 800d51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d51e:	e077      	b.n	800d610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fab1 	bl	800da8a <USBD_CtlError>
            err++;
 800d528:	7afb      	ldrb	r3, [r7, #11]
 800d52a:	3301      	adds	r3, #1
 800d52c:	72fb      	strb	r3, [r7, #11]
          break;
 800d52e:	e06f      	b.n	800d610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00b      	beq.n	800d554 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	7c12      	ldrb	r2, [r2, #16]
 800d548:	f107 0108 	add.w	r1, r7, #8
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d552:	e05d      	b.n	800d610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fa97 	bl	800da8a <USBD_CtlError>
            err++;
 800d55c:	7afb      	ldrb	r3, [r7, #11]
 800d55e:	3301      	adds	r3, #1
 800d560:	72fb      	strb	r3, [r7, #11]
          break;
 800d562:	e055      	b.n	800d610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d576:	691b      	ldr	r3, [r3, #16]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	7c12      	ldrb	r2, [r2, #16]
 800d57c:	f107 0108 	add.w	r1, r7, #8
 800d580:	4610      	mov	r0, r2
 800d582:	4798      	blx	r3
 800d584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d586:	e043      	b.n	800d610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fa7d 	bl	800da8a <USBD_CtlError>
            err++;
 800d590:	7afb      	ldrb	r3, [r7, #11]
 800d592:	3301      	adds	r3, #1
 800d594:	72fb      	strb	r3, [r7, #11]
          break;
 800d596:	e03b      	b.n	800d610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00b      	beq.n	800d5bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5aa:	695b      	ldr	r3, [r3, #20]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	7c12      	ldrb	r2, [r2, #16]
 800d5b0:	f107 0108 	add.w	r1, r7, #8
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	4798      	blx	r3
 800d5b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ba:	e029      	b.n	800d610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5bc:	6839      	ldr	r1, [r7, #0]
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 fa63 	bl	800da8a <USBD_CtlError>
            err++;
 800d5c4:	7afb      	ldrb	r3, [r7, #11]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ca:	e021      	b.n	800d610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00b      	beq.n	800d5f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	7c12      	ldrb	r2, [r2, #16]
 800d5e4:	f107 0108 	add.w	r1, r7, #8
 800d5e8:	4610      	mov	r0, r2
 800d5ea:	4798      	blx	r3
 800d5ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ee:	e00f      	b.n	800d610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5f0:	6839      	ldr	r1, [r7, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fa49 	bl	800da8a <USBD_CtlError>
            err++;
 800d5f8:	7afb      	ldrb	r3, [r7, #11]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d5fe:	e007      	b.n	800d610 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa41 	bl	800da8a <USBD_CtlError>
          err++;
 800d608:	7afb      	ldrb	r3, [r7, #11]
 800d60a:	3301      	adds	r3, #1
 800d60c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d60e:	bf00      	nop
      }
      break;
 800d610:	e037      	b.n	800d682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	7c1b      	ldrb	r3, [r3, #16]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d109      	bne.n	800d62e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d622:	f107 0208 	add.w	r2, r7, #8
 800d626:	4610      	mov	r0, r2
 800d628:	4798      	blx	r3
 800d62a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d62c:	e029      	b.n	800d682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d62e:	6839      	ldr	r1, [r7, #0]
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 fa2a 	bl	800da8a <USBD_CtlError>
        err++;
 800d636:	7afb      	ldrb	r3, [r7, #11]
 800d638:	3301      	adds	r3, #1
 800d63a:	72fb      	strb	r3, [r7, #11]
      break;
 800d63c:	e021      	b.n	800d682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	7c1b      	ldrb	r3, [r3, #16]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10d      	bne.n	800d662 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64e:	f107 0208 	add.w	r2, r7, #8
 800d652:	4610      	mov	r0, r2
 800d654:	4798      	blx	r3
 800d656:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	3301      	adds	r3, #1
 800d65c:	2207      	movs	r2, #7
 800d65e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d660:	e00f      	b.n	800d682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fa10 	bl	800da8a <USBD_CtlError>
        err++;
 800d66a:	7afb      	ldrb	r3, [r7, #11]
 800d66c:	3301      	adds	r3, #1
 800d66e:	72fb      	strb	r3, [r7, #11]
      break;
 800d670:	e007      	b.n	800d682 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fa08 	bl	800da8a <USBD_CtlError>
      err++;
 800d67a:	7afb      	ldrb	r3, [r7, #11]
 800d67c:	3301      	adds	r3, #1
 800d67e:	72fb      	strb	r3, [r7, #11]
      break;
 800d680:	bf00      	nop
  }

  if (err != 0U)
 800d682:	7afb      	ldrb	r3, [r7, #11]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d11e      	bne.n	800d6c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	88db      	ldrh	r3, [r3, #6]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d016      	beq.n	800d6be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d690:	893b      	ldrh	r3, [r7, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00e      	beq.n	800d6b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	88da      	ldrh	r2, [r3, #6]
 800d69a:	893b      	ldrh	r3, [r7, #8]
 800d69c:	4293      	cmp	r3, r2
 800d69e:	bf28      	it	cs
 800d6a0:	4613      	movcs	r3, r2
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d6a6:	893b      	ldrh	r3, [r7, #8]
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	68f9      	ldr	r1, [r7, #12]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fa5d 	bl	800db6c <USBD_CtlSendData>
 800d6b2:	e009      	b.n	800d6c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 f9e7 	bl	800da8a <USBD_CtlError>
 800d6bc:	e004      	b.n	800d6c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 faae 	bl	800dc20 <USBD_CtlSendStatus>
 800d6c4:	e000      	b.n	800d6c8 <USBD_GetDescriptor+0x2cc>
    return;
 800d6c6:	bf00      	nop
  }
}
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop

0800d6d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	889b      	ldrh	r3, [r3, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d131      	bne.n	800d746 <USBD_SetAddress+0x76>
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	88db      	ldrh	r3, [r3, #6]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d12d      	bne.n	800d746 <USBD_SetAddress+0x76>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	885b      	ldrh	r3, [r3, #2]
 800d6ee:	2b7f      	cmp	r3, #127	; 0x7f
 800d6f0:	d829      	bhi.n	800d746 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	885b      	ldrh	r3, [r3, #2]
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b03      	cmp	r3, #3
 800d708:	d104      	bne.n	800d714 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 f9bc 	bl	800da8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d712:	e01d      	b.n	800d750 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	7bfa      	ldrb	r2, [r7, #15]
 800d718:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	4619      	mov	r1, r3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f004 faad 	bl	8011c80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fa7a 	bl	800dc20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d004      	beq.n	800d73c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2202      	movs	r2, #2
 800d736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d73a:	e009      	b.n	800d750 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2201      	movs	r2, #1
 800d740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d744:	e004      	b.n	800d750 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d746:	6839      	ldr	r1, [r7, #0]
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f99e 	bl	800da8a <USBD_CtlError>
  }
}
 800d74e:	bf00      	nop
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d762:	2300      	movs	r3, #0
 800d764:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	885b      	ldrh	r3, [r3, #2]
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	4b4e      	ldr	r3, [pc, #312]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d76e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d770:	4b4d      	ldr	r3, [pc, #308]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d905      	bls.n	800d784 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f985 	bl	800da8a <USBD_CtlError>
    return USBD_FAIL;
 800d780:	2303      	movs	r3, #3
 800d782:	e08c      	b.n	800d89e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d002      	beq.n	800d796 <USBD_SetConfig+0x3e>
 800d790:	2b03      	cmp	r3, #3
 800d792:	d029      	beq.n	800d7e8 <USBD_SetConfig+0x90>
 800d794:	e075      	b.n	800d882 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d796:	4b44      	ldr	r3, [pc, #272]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d020      	beq.n	800d7e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d79e:	4b42      	ldr	r3, [pc, #264]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	461a      	mov	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7a8:	4b3f      	ldr	r3, [pc, #252]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7fe ffe1 	bl	800c776 <USBD_SetClassConfig>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d008      	beq.n	800d7d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f962 	bl	800da8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2202      	movs	r2, #2
 800d7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7ce:	e065      	b.n	800d89c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fa25 	bl	800dc20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2203      	movs	r2, #3
 800d7da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d7de:	e05d      	b.n	800d89c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fa1d 	bl	800dc20 <USBD_CtlSendStatus>
      break;
 800d7e6:	e059      	b.n	800d89c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d7e8:	4b2f      	ldr	r3, [pc, #188]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d112      	bne.n	800d816 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d7f8:	4b2b      	ldr	r3, [pc, #172]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d802:	4b29      	ldr	r3, [pc, #164]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	4619      	mov	r1, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7fe ffd0 	bl	800c7ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa06 	bl	800dc20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d814:	e042      	b.n	800d89c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d816:	4b24      	ldr	r3, [pc, #144]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	461a      	mov	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d02a      	beq.n	800d87a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7fe ffbe 	bl	800c7ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d832:	4b1d      	ldr	r3, [pc, #116]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d83c:	4b1a      	ldr	r3, [pc, #104]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	4619      	mov	r1, r3
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7fe ff97 	bl	800c776 <USBD_SetClassConfig>
 800d848:	4603      	mov	r3, r0
 800d84a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00f      	beq.n	800d872 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d852:	6839      	ldr	r1, [r7, #0]
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f000 f918 	bl	800da8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7fe ffa3 	bl	800c7ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d870:	e014      	b.n	800d89c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f9d4 	bl	800dc20 <USBD_CtlSendStatus>
      break;
 800d878:	e010      	b.n	800d89c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f9d0 	bl	800dc20 <USBD_CtlSendStatus>
      break;
 800d880:	e00c      	b.n	800d89c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f900 	bl	800da8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d88a:	4b07      	ldr	r3, [pc, #28]	; (800d8a8 <USBD_SetConfig+0x150>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7fe ff8c 	bl	800c7ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d896:	2303      	movs	r3, #3
 800d898:	73fb      	strb	r3, [r7, #15]
      break;
 800d89a:	bf00      	nop
  }

  return ret;
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
 800d8a6:	bf00      	nop
 800d8a8:	20003bb4 	.word	0x20003bb4

0800d8ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	88db      	ldrh	r3, [r3, #6]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d004      	beq.n	800d8c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f8e2 	bl	800da8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d8c6:	e023      	b.n	800d910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	dc02      	bgt.n	800d8da <USBD_GetConfig+0x2e>
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	dc03      	bgt.n	800d8e0 <USBD_GetConfig+0x34>
 800d8d8:	e015      	b.n	800d906 <USBD_GetConfig+0x5a>
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d00b      	beq.n	800d8f6 <USBD_GetConfig+0x4a>
 800d8de:	e012      	b.n	800d906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f93c 	bl	800db6c <USBD_CtlSendData>
        break;
 800d8f4:	e00c      	b.n	800d910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f934 	bl	800db6c <USBD_CtlSendData>
        break;
 800d904:	e004      	b.n	800d910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d906:	6839      	ldr	r1, [r7, #0]
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f000 f8be 	bl	800da8a <USBD_CtlError>
        break;
 800d90e:	bf00      	nop
}
 800d910:	bf00      	nop
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	3b01      	subs	r3, #1
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d81e      	bhi.n	800d96e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	88db      	ldrh	r3, [r3, #6]
 800d934:	2b02      	cmp	r3, #2
 800d936:	d004      	beq.n	800d942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 f8a5 	bl	800da8a <USBD_CtlError>
        break;
 800d940:	e01a      	b.n	800d978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2201      	movs	r2, #1
 800d946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d005      	beq.n	800d95e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	f043 0202 	orr.w	r2, r3, #2
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	330c      	adds	r3, #12
 800d962:	2202      	movs	r2, #2
 800d964:	4619      	mov	r1, r3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f900 	bl	800db6c <USBD_CtlSendData>
      break;
 800d96c:	e004      	b.n	800d978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d96e:	6839      	ldr	r1, [r7, #0]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 f88a 	bl	800da8a <USBD_CtlError>
      break;
 800d976:	bf00      	nop
  }
}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	885b      	ldrh	r3, [r3, #2]
 800d98e:	2b01      	cmp	r3, #1
 800d990:	d107      	bne.n	800d9a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f940 	bl	800dc20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d9a0:	e013      	b.n	800d9ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	885b      	ldrh	r3, [r3, #2]
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	d10b      	bne.n	800d9c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	889b      	ldrh	r3, [r3, #4]
 800d9ae:	0a1b      	lsrs	r3, r3, #8
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 f930 	bl	800dc20 <USBD_CtlSendStatus>
}
 800d9c0:	e003      	b.n	800d9ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 f860 	bl	800da8a <USBD_CtlError>
}
 800d9ca:	bf00      	nop
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	3b01      	subs	r3, #1
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d80b      	bhi.n	800da02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d10c      	bne.n	800da0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f910 	bl	800dc20 <USBD_CtlSendStatus>
      }
      break;
 800da00:	e004      	b.n	800da0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f840 	bl	800da8a <USBD_CtlError>
      break;
 800da0a:	e000      	b.n	800da0e <USBD_ClrFeature+0x3c>
      break;
 800da0c:	bf00      	nop
  }
}
 800da0e:	bf00      	nop
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da16:	b580      	push	{r7, lr}
 800da18:	b084      	sub	sp, #16
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
 800da1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	781a      	ldrb	r2, [r3, #0]
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3301      	adds	r3, #1
 800da30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	781a      	ldrb	r2, [r3, #0]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	3301      	adds	r3, #1
 800da3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7ff fa41 	bl	800cec8 <SWAPBYTE>
 800da46:	4603      	mov	r3, r0
 800da48:	461a      	mov	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3301      	adds	r3, #1
 800da52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	3301      	adds	r3, #1
 800da58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f7ff fa34 	bl	800cec8 <SWAPBYTE>
 800da60:	4603      	mov	r3, r0
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3301      	adds	r3, #1
 800da6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3301      	adds	r3, #1
 800da72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f7ff fa27 	bl	800cec8 <SWAPBYTE>
 800da7a:	4603      	mov	r3, r0
 800da7c:	461a      	mov	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	80da      	strh	r2, [r3, #6]
}
 800da82:	bf00      	nop
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800da94:	2180      	movs	r1, #128	; 0x80
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f004 f888 	bl	8011bac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da9c:	2100      	movs	r1, #0
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f004 f884 	bl	8011bac <USBD_LL_StallEP>
}
 800daa4:	bf00      	nop
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dab8:	2300      	movs	r3, #0
 800daba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d036      	beq.n	800db30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dac6:	6938      	ldr	r0, [r7, #16]
 800dac8:	f000 f836 	bl	800db38 <USBD_GetLen>
 800dacc:	4603      	mov	r3, r0
 800dace:	3301      	adds	r3, #1
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dada:	7dfb      	ldrb	r3, [r7, #23]
 800dadc:	68ba      	ldr	r2, [r7, #8]
 800dade:	4413      	add	r3, r2
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	7812      	ldrb	r2, [r2, #0]
 800dae4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	3301      	adds	r3, #1
 800daea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800daec:	7dfb      	ldrb	r3, [r7, #23]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	4413      	add	r3, r2
 800daf2:	2203      	movs	r2, #3
 800daf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800daf6:	7dfb      	ldrb	r3, [r7, #23]
 800daf8:	3301      	adds	r3, #1
 800dafa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dafc:	e013      	b.n	800db26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dafe:	7dfb      	ldrb	r3, [r7, #23]
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	4413      	add	r3, r2
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	7812      	ldrb	r2, [r2, #0]
 800db08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	3301      	adds	r3, #1
 800db0e:	613b      	str	r3, [r7, #16]
    idx++;
 800db10:	7dfb      	ldrb	r3, [r7, #23]
 800db12:	3301      	adds	r3, #1
 800db14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	4413      	add	r3, r2
 800db1c:	2200      	movs	r2, #0
 800db1e:	701a      	strb	r2, [r3, #0]
    idx++;
 800db20:	7dfb      	ldrb	r3, [r7, #23]
 800db22:	3301      	adds	r3, #1
 800db24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e7      	bne.n	800dafe <USBD_GetString+0x52>
 800db2e:	e000      	b.n	800db32 <USBD_GetString+0x86>
    return;
 800db30:	bf00      	nop
  }
}
 800db32:	3718      	adds	r7, #24
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800db40:	2300      	movs	r3, #0
 800db42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db48:	e005      	b.n	800db56 <USBD_GetLen+0x1e>
  {
    len++;
 800db4a:	7bfb      	ldrb	r3, [r7, #15]
 800db4c:	3301      	adds	r3, #1
 800db4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	3301      	adds	r3, #1
 800db54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1f5      	bne.n	800db4a <USBD_GetLen+0x12>
  }

  return len;
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db60:	4618      	mov	r0, r3
 800db62:	3714      	adds	r7, #20
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2202      	movs	r2, #2
 800db7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	2100      	movs	r1, #0
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f004 f893 	bl	8011cbe <USBD_LL_Transmit>

  return USBD_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b084      	sub	sp, #16
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	60b9      	str	r1, [r7, #8]
 800dbac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	68f8      	ldr	r0, [r7, #12]
 800dbb6:	f004 f882 	bl	8011cbe <USBD_LL_Transmit>

  return USBD_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	60b9      	str	r1, [r7, #8]
 800dbce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2203      	movs	r2, #3
 800dbd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	687a      	ldr	r2, [r7, #4]
 800dbdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	2100      	movs	r1, #0
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f004 f886 	bl	8011d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b084      	sub	sp, #16
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	60f8      	str	r0, [r7, #12]
 800dc06:	60b9      	str	r1, [r7, #8]
 800dc08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	2100      	movs	r1, #0
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f004 f875 	bl	8011d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2204      	movs	r2, #4
 800dc2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc30:	2300      	movs	r3, #0
 800dc32:	2200      	movs	r2, #0
 800dc34:	2100      	movs	r1, #0
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f004 f841 	bl	8011cbe <USBD_LL_Transmit>

  return USBD_OK;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2205      	movs	r2, #5
 800dc52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc56:	2300      	movs	r3, #0
 800dc58:	2200      	movs	r2, #0
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f004 f84f 	bl	8011d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3708      	adds	r7, #8
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dc76:	2300      	movs	r3, #0
 800dc78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dc7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc7e:	2b84      	cmp	r3, #132	; 0x84
 800dc80:	d005      	beq.n	800dc8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dc82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	4413      	add	r3, r2
 800dc8a:	3303      	adds	r3, #3
 800dc8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3714      	adds	r7, #20
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dca0:	f001 fb0c 	bl	800f2bc <vTaskStartScheduler>
  
  return osOK;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dcaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcac:	b089      	sub	sp, #36	; 0x24
 800dcae:	af04      	add	r7, sp, #16
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d020      	beq.n	800dcfe <osThreadCreate+0x54>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d01c      	beq.n	800dcfe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	685c      	ldr	r4, [r3, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	691e      	ldr	r6, [r3, #16]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff ffc8 	bl	800dc6c <makeFreeRtosPriority>
 800dcdc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	695b      	ldr	r3, [r3, #20]
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dce6:	9202      	str	r2, [sp, #8]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	9100      	str	r1, [sp, #0]
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	4632      	mov	r2, r6
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f001 f890 	bl	800ee18 <xTaskCreateStatic>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	e01c      	b.n	800dd38 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685c      	ldr	r4, [r3, #4]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd0a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7ff ffaa 	bl	800dc6c <makeFreeRtosPriority>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	f107 030c 	add.w	r3, r7, #12
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	9200      	str	r2, [sp, #0]
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	4632      	mov	r2, r6
 800dd26:	4629      	mov	r1, r5
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f001 f8cb 	bl	800eec4 <xTaskCreate>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d001      	beq.n	800dd38 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800dd34:	2300      	movs	r3, #0
 800dd36:	e000      	b.n	800dd3a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dd38:	68fb      	ldr	r3, [r7, #12]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800dd44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a09      	ldr	r2, [pc, #36]	; (800dd74 <osDelay+0x30>)
 800dd50:	fba2 2303 	umull	r2, r3, r2, r3
 800dd54:	099b      	lsrs	r3, r3, #6
 800dd56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <osDelay+0x1e>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	e000      	b.n	800dd64 <osDelay+0x20>
 800dd62:	2301      	movs	r3, #1
 800dd64:	4618      	mov	r0, r3
 800dd66:	f001 fa0f 	bl	800f188 <vTaskDelay>
  
  return osOK;
 800dd6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	10624dd3 	.word	0x10624dd3

0800dd78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b083      	sub	sp, #12
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f103 0208 	add.w	r2, r3, #8
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f103 0208 	add.w	r2, r3, #8
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f103 0208 	add.w	r2, r3, #8
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ddac:	bf00      	nop
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddc6:	bf00      	nop
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr

0800ddd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b085      	sub	sp, #20
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	68fa      	ldr	r2, [r7, #12]
 800dde6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	689a      	ldr	r2, [r3, #8]
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	601a      	str	r2, [r3, #0]
}
 800de0e:	bf00      	nop
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr

0800de1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de1a:	b480      	push	{r7}
 800de1c:	b085      	sub	sp, #20
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de30:	d103      	bne.n	800de3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	60fb      	str	r3, [r7, #12]
 800de38:	e00c      	b.n	800de54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	3308      	adds	r3, #8
 800de3e:	60fb      	str	r3, [r7, #12]
 800de40:	e002      	b.n	800de48 <vListInsert+0x2e>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68ba      	ldr	r2, [r7, #8]
 800de50:	429a      	cmp	r2, r3
 800de52:	d2f6      	bcs.n	800de42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	1c5a      	adds	r2, r3, #1
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	601a      	str	r2, [r3, #0]
}
 800de80:	bf00      	nop
 800de82:	3714      	adds	r7, #20
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	6892      	ldr	r2, [r2, #8]
 800dea2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	6852      	ldr	r2, [r2, #4]
 800deac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d103      	bne.n	800dec0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	689a      	ldr	r2, [r3, #8]
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	1e5a      	subs	r2, r3, #1
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr

0800dee0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d105      	bne.n	800df00 <xQueueGenericReset+0x20>
 800def4:	f240 1203 	movw	r2, #259	; 0x103
 800def8:	492a      	ldr	r1, [pc, #168]	; (800dfa4 <xQueueGenericReset+0xc4>)
 800defa:	482b      	ldr	r0, [pc, #172]	; (800dfa8 <xQueueGenericReset+0xc8>)
 800defc:	f7f4 fe84 	bl	8002c08 <assertFail>

	taskENTER_CRITICAL();
 800df00:	f002 ff96 	bl	8010e30 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df0c:	68f9      	ldr	r1, [r7, #12]
 800df0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df10:	fb01 f303 	mul.w	r3, r1, r3
 800df14:	441a      	add	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df30:	3b01      	subs	r3, #1
 800df32:	68f9      	ldr	r1, [r7, #12]
 800df34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df36:	fb01 f303 	mul.w	r3, r1, r3
 800df3a:	441a      	add	r2, r3
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	22ff      	movs	r2, #255	; 0xff
 800df44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	22ff      	movs	r2, #255	; 0xff
 800df4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d114      	bne.n	800df80 <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d01a      	beq.n	800df94 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3310      	adds	r3, #16
 800df62:	4618      	mov	r0, r3
 800df64:	f001 fd3a 	bl	800f9dc <xTaskRemoveFromEventList>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d012      	beq.n	800df94 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df6e:	4b0f      	ldr	r3, [pc, #60]	; (800dfac <xQueueGenericReset+0xcc>)
 800df70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df74:	601a      	str	r2, [r3, #0]
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	e009      	b.n	800df94 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3310      	adds	r3, #16
 800df84:	4618      	mov	r0, r3
 800df86:	f7ff fef7 	bl	800dd78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3324      	adds	r3, #36	; 0x24
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff fef2 	bl	800dd78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df94:	f002 ff7a 	bl	8010e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df98:	2301      	movs	r3, #1
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	080157b4 	.word	0x080157b4
 800dfa8:	080157e8 	.word	0x080157e8
 800dfac:	e000ed04 	.word	0xe000ed04

0800dfb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af02      	add	r7, sp, #8
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	607a      	str	r2, [r7, #4]
 800dfbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d105      	bne.n	800dfd0 <xQueueGenericCreateStatic+0x20>
 800dfc4:	f44f 729d 	mov.w	r2, #314	; 0x13a
 800dfc8:	4929      	ldr	r1, [pc, #164]	; (800e070 <xQueueGenericCreateStatic+0xc0>)
 800dfca:	482a      	ldr	r0, [pc, #168]	; (800e074 <xQueueGenericCreateStatic+0xc4>)
 800dfcc:	f7f4 fe1c 	bl	8002c08 <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d105      	bne.n	800dfe2 <xQueueGenericCreateStatic+0x32>
 800dfd6:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800dfda:	4925      	ldr	r1, [pc, #148]	; (800e070 <xQueueGenericCreateStatic+0xc0>)
 800dfdc:	4826      	ldr	r0, [pc, #152]	; (800e078 <xQueueGenericCreateStatic+0xc8>)
 800dfde:	f7f4 fe13 	bl	8002c08 <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <xQueueGenericCreateStatic+0x3e>
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <xQueueGenericCreateStatic+0x42>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e000      	b.n	800dff4 <xQueueGenericCreateStatic+0x44>
 800dff2:	2300      	movs	r3, #0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d105      	bne.n	800e004 <xQueueGenericCreateStatic+0x54>
 800dff8:	f44f 72a1 	mov.w	r2, #322	; 0x142
 800dffc:	491c      	ldr	r1, [pc, #112]	; (800e070 <xQueueGenericCreateStatic+0xc0>)
 800dffe:	481f      	ldr	r0, [pc, #124]	; (800e07c <xQueueGenericCreateStatic+0xcc>)
 800e000:	f7f4 fe02 	bl	8002c08 <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d102      	bne.n	800e010 <xQueueGenericCreateStatic+0x60>
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d101      	bne.n	800e014 <xQueueGenericCreateStatic+0x64>
 800e010:	2301      	movs	r3, #1
 800e012:	e000      	b.n	800e016 <xQueueGenericCreateStatic+0x66>
 800e014:	2300      	movs	r3, #0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d105      	bne.n	800e026 <xQueueGenericCreateStatic+0x76>
 800e01a:	f240 1243 	movw	r2, #323	; 0x143
 800e01e:	4914      	ldr	r1, [pc, #80]	; (800e070 <xQueueGenericCreateStatic+0xc0>)
 800e020:	4817      	ldr	r0, [pc, #92]	; (800e080 <xQueueGenericCreateStatic+0xd0>)
 800e022:	f7f4 fdf1 	bl	8002c08 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e026:	2350      	movs	r3, #80	; 0x50
 800e028:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	2b50      	cmp	r3, #80	; 0x50
 800e02e:	d005      	beq.n	800e03c <xQueueGenericCreateStatic+0x8c>
 800e030:	f240 124b 	movw	r2, #331	; 0x14b
 800e034:	490e      	ldr	r1, [pc, #56]	; (800e070 <xQueueGenericCreateStatic+0xc0>)
 800e036:	4813      	ldr	r0, [pc, #76]	; (800e084 <xQueueGenericCreateStatic+0xd4>)
 800e038:	f7f4 fde6 	bl	8002c08 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e03c:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00d      	beq.n	800e064 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e050:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	4613      	mov	r3, r2
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	68b9      	ldr	r1, [r7, #8]
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	f000 f84c 	bl	800e0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e064:	697b      	ldr	r3, [r7, #20]
	}
 800e066:	4618      	mov	r0, r3
 800e068:	3718      	adds	r7, #24
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	080157b4 	.word	0x080157b4
 800e074:	080157f0 	.word	0x080157f0
 800e078:	08015814 	.word	0x08015814
 800e07c:	0801582c 	.word	0x0801582c
 800e080:	08015864 	.word	0x08015864
 800e084:	0801589c 	.word	0x0801589c

0800e088 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08a      	sub	sp, #40	; 0x28
 800e08c:	af02      	add	r7, sp, #8
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4613      	mov	r3, r2
 800e094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d105      	bne.n	800e0a8 <xQueueGenericCreate+0x20>
 800e09c:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800e0a0:	4914      	ldr	r1, [pc, #80]	; (800e0f4 <xQueueGenericCreate+0x6c>)
 800e0a2:	4815      	ldr	r0, [pc, #84]	; (800e0f8 <xQueueGenericCreate+0x70>)
 800e0a4:	f7f4 fdb0 	bl	8002c08 <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	68ba      	ldr	r2, [r7, #8]
 800e0ac:	fb02 f303 	mul.w	r3, r2, r3
 800e0b0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	3350      	adds	r3, #80	; 0x50
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f002 ffca 	bl	8011050 <pvPortMalloc>
 800e0bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d011      	beq.n	800e0e8 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	3350      	adds	r3, #80	; 0x50
 800e0cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0d6:	79fa      	ldrb	r2, [r7, #7]
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	697a      	ldr	r2, [r7, #20]
 800e0e0:	68b9      	ldr	r1, [r7, #8]
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f000 f80a 	bl	800e0fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0e8:	69bb      	ldr	r3, [r7, #24]
	}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3720      	adds	r7, #32
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	080157b4 	.word	0x080157b4
 800e0f8:	080157f0 	.word	0x080157f0

0800e0fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d103      	bne.n	800e118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	69ba      	ldr	r2, [r7, #24]
 800e114:	601a      	str	r2, [r3, #0]
 800e116:	e002      	b.n	800e11e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e12a:	2101      	movs	r1, #1
 800e12c:	69b8      	ldr	r0, [r7, #24]
 800e12e:	f7ff fed7 	bl	800dee0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	78fa      	ldrb	r2, [r7, #3]
 800e136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e13a:	bf00      	nop
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00e      	beq.n	800e16e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e162:	2300      	movs	r3, #0
 800e164:	2200      	movs	r2, #0
 800e166:	2100      	movs	r1, #0
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 f837 	bl	800e1dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e176:	b580      	push	{r7, lr}
 800e178:	b086      	sub	sp, #24
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	4603      	mov	r3, r0
 800e17e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e180:	2301      	movs	r3, #1
 800e182:	617b      	str	r3, [r7, #20]
 800e184:	2300      	movs	r3, #0
 800e186:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	461a      	mov	r2, r3
 800e18c:	6939      	ldr	r1, [r7, #16]
 800e18e:	6978      	ldr	r0, [r7, #20]
 800e190:	f7ff ff7a 	bl	800e088 <xQueueGenericCreate>
 800e194:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f7ff ffd3 	bl	800e142 <prvInitialiseMutex>

		return xNewQueue;
 800e19c:	68fb      	ldr	r3, [r7, #12]
	}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3718      	adds	r7, #24
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b088      	sub	sp, #32
 800e1aa:	af02      	add	r7, sp, #8
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	6039      	str	r1, [r7, #0]
 800e1b0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	617b      	str	r3, [r7, #20]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	6939      	ldr	r1, [r7, #16]
 800e1c4:	6978      	ldr	r0, [r7, #20]
 800e1c6:	f7ff fef3 	bl	800dfb0 <xQueueGenericCreateStatic>
 800e1ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f7ff ffb8 	bl	800e142 <prvInitialiseMutex>

		return xNewQueue;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
	}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08a      	sub	sp, #40	; 0x28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800e1f2:	6a3b      	ldr	r3, [r7, #32]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d105      	bne.n	800e204 <xQueueGenericSend+0x28>
 800e1f8:	f240 22ea 	movw	r2, #746	; 0x2ea
 800e1fc:	4977      	ldr	r1, [pc, #476]	; (800e3dc <xQueueGenericSend+0x200>)
 800e1fe:	4878      	ldr	r0, [pc, #480]	; (800e3e0 <xQueueGenericSend+0x204>)
 800e200:	f7f4 fd02 	bl	8002c08 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d103      	bne.n	800e212 <xQueueGenericSend+0x36>
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d101      	bne.n	800e216 <xQueueGenericSend+0x3a>
 800e212:	2301      	movs	r3, #1
 800e214:	e000      	b.n	800e218 <xQueueGenericSend+0x3c>
 800e216:	2300      	movs	r3, #0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d105      	bne.n	800e228 <xQueueGenericSend+0x4c>
 800e21c:	f240 22eb 	movw	r2, #747	; 0x2eb
 800e220:	496e      	ldr	r1, [pc, #440]	; (800e3dc <xQueueGenericSend+0x200>)
 800e222:	4870      	ldr	r0, [pc, #448]	; (800e3e4 <xQueueGenericSend+0x208>)
 800e224:	f7f4 fcf0 	bl	8002c08 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d103      	bne.n	800e236 <xQueueGenericSend+0x5a>
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e232:	2b01      	cmp	r3, #1
 800e234:	d101      	bne.n	800e23a <xQueueGenericSend+0x5e>
 800e236:	2301      	movs	r3, #1
 800e238:	e000      	b.n	800e23c <xQueueGenericSend+0x60>
 800e23a:	2300      	movs	r3, #0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d105      	bne.n	800e24c <xQueueGenericSend+0x70>
 800e240:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800e244:	4965      	ldr	r1, [pc, #404]	; (800e3dc <xQueueGenericSend+0x200>)
 800e246:	4868      	ldr	r0, [pc, #416]	; (800e3e8 <xQueueGenericSend+0x20c>)
 800e248:	f7f4 fcde 	bl	8002c08 <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e24c:	f001 fe58 	bl	800ff00 <xTaskGetSchedulerState>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	d102      	bne.n	800e25c <xQueueGenericSend+0x80>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <xQueueGenericSend+0x84>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e000      	b.n	800e262 <xQueueGenericSend+0x86>
 800e260:	2300      	movs	r3, #0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d105      	bne.n	800e272 <xQueueGenericSend+0x96>
 800e266:	f240 22ef 	movw	r2, #751	; 0x2ef
 800e26a:	495c      	ldr	r1, [pc, #368]	; (800e3dc <xQueueGenericSend+0x200>)
 800e26c:	485f      	ldr	r0, [pc, #380]	; (800e3ec <xQueueGenericSend+0x210>)
 800e26e:	f7f4 fccb 	bl	8002c08 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e272:	f002 fddd 	bl	8010e30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e27e:	429a      	cmp	r2, r3
 800e280:	d302      	bcc.n	800e288 <xQueueGenericSend+0xac>
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2b02      	cmp	r3, #2
 800e286:	d12f      	bne.n	800e2e8 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 800e288:	6a3b      	ldr	r3, [r7, #32]
 800e28a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e28c:	4a58      	ldr	r2, [pc, #352]	; (800e3f0 <xQueueGenericSend+0x214>)
 800e28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e292:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	6a38      	ldr	r0, [r7, #32]
 800e29a:	f000 fc4f 	bl	800eb3c <prvCopyDataToQueue>
 800e29e:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2a0:	6a3b      	ldr	r3, [r7, #32]
 800e2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d010      	beq.n	800e2ca <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2a8:	6a3b      	ldr	r3, [r7, #32]
 800e2aa:	3324      	adds	r3, #36	; 0x24
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f001 fb95 	bl	800f9dc <xTaskRemoveFromEventList>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d013      	beq.n	800e2e0 <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e2b8:	4b4e      	ldr	r3, [pc, #312]	; (800e3f4 <xQueueGenericSend+0x218>)
 800e2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	e00a      	b.n	800e2e0 <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d007      	beq.n	800e2e0 <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e2d0:	4b48      	ldr	r3, [pc, #288]	; (800e3f4 <xQueueGenericSend+0x218>)
 800e2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e2e0:	f002 fdd4 	bl	8010e8c <vPortExitCritical>
				return pdPASS;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e075      	b.n	800e3d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d109      	bne.n	800e302 <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e2ee:	f002 fdcd 	bl	8010e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2f6:	4a3e      	ldr	r2, [pc, #248]	; (800e3f0 <xQueueGenericSend+0x214>)
 800e2f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e2fc:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 800e2fe:	2300      	movs	r3, #0
 800e300:	e068      	b.n	800e3d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	2b00      	cmp	r3, #0
 800e306:	d106      	bne.n	800e316 <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e308:	f107 0314 	add.w	r3, r7, #20
 800e30c:	4618      	mov	r0, r3
 800e30e:	f001 fbc7 	bl	800faa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e312:	2301      	movs	r3, #1
 800e314:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e316:	f002 fdb9 	bl	8010e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e31a:	f001 f849 	bl	800f3b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e31e:	f002 fd87 	bl	8010e30 <vPortEnterCritical>
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e328:	b25b      	sxtb	r3, r3
 800e32a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e32e:	d103      	bne.n	800e338 <xQueueGenericSend+0x15c>
 800e330:	6a3b      	ldr	r3, [r7, #32]
 800e332:	2200      	movs	r2, #0
 800e334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e338:	6a3b      	ldr	r3, [r7, #32]
 800e33a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e33e:	b25b      	sxtb	r3, r3
 800e340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e344:	d103      	bne.n	800e34e <xQueueGenericSend+0x172>
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e34e:	f002 fd9d 	bl	8010e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e352:	1d3a      	adds	r2, r7, #4
 800e354:	f107 0314 	add.w	r3, r7, #20
 800e358:	4611      	mov	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f001 fbb6 	bl	800facc <xTaskCheckForTimeOut>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d12a      	bne.n	800e3bc <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e366:	6a38      	ldr	r0, [r7, #32]
 800e368:	f000 fce0 	bl	800ed2c <prvIsQueueFull>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d01e      	beq.n	800e3b0 <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e376:	4a1e      	ldr	r2, [pc, #120]	; (800e3f0 <xQueueGenericSend+0x214>)
 800e378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e37c:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	3310      	adds	r3, #16
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	4611      	mov	r1, r2
 800e386:	4618      	mov	r0, r3
 800e388:	f001 fada 	bl	800f940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e38c:	6a38      	ldr	r0, [r7, #32]
 800e38e:	f000 fc65 	bl	800ec5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e392:	f001 f81b 	bl	800f3cc <xTaskResumeAll>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f47f af6a 	bne.w	800e272 <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 800e39e:	4b15      	ldr	r3, [pc, #84]	; (800e3f4 <xQueueGenericSend+0x218>)
 800e3a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a4:	601a      	str	r2, [r3, #0]
 800e3a6:	f3bf 8f4f 	dsb	sy
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	e760      	b.n	800e272 <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3b0:	6a38      	ldr	r0, [r7, #32]
 800e3b2:	f000 fc53 	bl	800ec5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3b6:	f001 f809 	bl	800f3cc <xTaskResumeAll>
 800e3ba:	e75a      	b.n	800e272 <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e3bc:	6a38      	ldr	r0, [r7, #32]
 800e3be:	f000 fc4d 	bl	800ec5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3c2:	f001 f803 	bl	800f3cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 800e3c6:	6a3b      	ldr	r3, [r7, #32]
 800e3c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3ca:	4a09      	ldr	r2, [pc, #36]	; (800e3f0 <xQueueGenericSend+0x214>)
 800e3cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e3d0:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 800e3d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3728      	adds	r7, #40	; 0x28
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	080157b4 	.word	0x080157b4
 800e3e0:	080157e8 	.word	0x080157e8
 800e3e4:	080158b8 	.word	0x080158b8
 800e3e8:	08015908 	.word	0x08015908
 800e3ec:	08015950 	.word	0x08015950
 800e3f0:	e000000c 	.word	0xe000000c
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b08c      	sub	sp, #48	; 0x30
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
 800e404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d105      	bne.n	800e41c <xQueueGenericSendFromISR+0x24>
 800e410:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800e414:	493e      	ldr	r1, [pc, #248]	; (800e510 <xQueueGenericSendFromISR+0x118>)
 800e416:	483f      	ldr	r0, [pc, #252]	; (800e514 <xQueueGenericSendFromISR+0x11c>)
 800e418:	f7f4 fbf6 	bl	8002c08 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d103      	bne.n	800e42a <xQueueGenericSendFromISR+0x32>
 800e422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e426:	2b00      	cmp	r3, #0
 800e428:	d101      	bne.n	800e42e <xQueueGenericSendFromISR+0x36>
 800e42a:	2301      	movs	r3, #1
 800e42c:	e000      	b.n	800e430 <xQueueGenericSendFromISR+0x38>
 800e42e:	2300      	movs	r3, #0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d105      	bne.n	800e440 <xQueueGenericSendFromISR+0x48>
 800e434:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e438:	4935      	ldr	r1, [pc, #212]	; (800e510 <xQueueGenericSendFromISR+0x118>)
 800e43a:	4837      	ldr	r0, [pc, #220]	; (800e518 <xQueueGenericSendFromISR+0x120>)
 800e43c:	f7f4 fbe4 	bl	8002c08 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b02      	cmp	r3, #2
 800e444:	d103      	bne.n	800e44e <xQueueGenericSendFromISR+0x56>
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d101      	bne.n	800e452 <xQueueGenericSendFromISR+0x5a>
 800e44e:	2301      	movs	r3, #1
 800e450:	e000      	b.n	800e454 <xQueueGenericSendFromISR+0x5c>
 800e452:	2300      	movs	r3, #0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d105      	bne.n	800e464 <xQueueGenericSendFromISR+0x6c>
 800e458:	f240 32be 	movw	r2, #958	; 0x3be
 800e45c:	492c      	ldr	r1, [pc, #176]	; (800e510 <xQueueGenericSendFromISR+0x118>)
 800e45e:	482f      	ldr	r0, [pc, #188]	; (800e51c <xQueueGenericSendFromISR+0x124>)
 800e460:	f7f4 fbd2 	bl	8002c08 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e464:	f002 fdba 	bl	8010fdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e468:	f3ef 8211 	mrs	r2, BASEPRI
 800e46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e470:	f383 8811 	msr	BASEPRI, r3
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	61ba      	str	r2, [r7, #24]
 800e47e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e480:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e482:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d302      	bcc.n	800e496 <xQueueGenericSendFromISR+0x9e>
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	2b02      	cmp	r3, #2
 800e494:	d12f      	bne.n	800e4f6 <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e49c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a4:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	68b9      	ldr	r1, [r7, #8]
 800e4aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ac:	f000 fb46 	bl	800eb3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4b8:	d112      	bne.n	800e4e0 <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d016      	beq.n	800e4f0 <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	3324      	adds	r3, #36	; 0x24
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f001 fa88 	bl	800f9dc <xTaskRemoveFromEventList>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00e      	beq.n	800e4f0 <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00b      	beq.n	800e4f0 <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2201      	movs	r2, #1
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	e007      	b.n	800e4f0 <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e4e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	b25a      	sxtb	r2, r3
 800e4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 800e4f4:	e001      	b.n	800e4fa <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e504:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3730      	adds	r7, #48	; 0x30
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	080157b4 	.word	0x080157b4
 800e514:	080157e8 	.word	0x080157e8
 800e518:	080158b8 	.word	0x080158b8
 800e51c:	08015908 	.word	0x08015908

0800e520 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b08a      	sub	sp, #40	; 0x28
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e52e:	6a3b      	ldr	r3, [r7, #32]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d105      	bne.n	800e540 <xQueueGiveFromISR+0x20>
 800e534:	f240 4264 	movw	r2, #1124	; 0x464
 800e538:	4937      	ldr	r1, [pc, #220]	; (800e618 <xQueueGiveFromISR+0xf8>)
 800e53a:	4838      	ldr	r0, [pc, #224]	; (800e61c <xQueueGiveFromISR+0xfc>)
 800e53c:	f7f4 fb64 	bl	8002c08 <assertFail>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e544:	2b00      	cmp	r3, #0
 800e546:	d005      	beq.n	800e554 <xQueueGiveFromISR+0x34>
 800e548:	f44f 628d 	mov.w	r2, #1128	; 0x468
 800e54c:	4932      	ldr	r1, [pc, #200]	; (800e618 <xQueueGiveFromISR+0xf8>)
 800e54e:	4834      	ldr	r0, [pc, #208]	; (800e620 <xQueueGiveFromISR+0x100>)
 800e550:	f7f4 fb5a 	bl	8002c08 <assertFail>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d103      	bne.n	800e564 <xQueueGiveFromISR+0x44>
 800e55c:	6a3b      	ldr	r3, [r7, #32]
 800e55e:	689b      	ldr	r3, [r3, #8]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <xQueueGiveFromISR+0x48>
 800e564:	2301      	movs	r3, #1
 800e566:	e000      	b.n	800e56a <xQueueGiveFromISR+0x4a>
 800e568:	2300      	movs	r3, #0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d105      	bne.n	800e57a <xQueueGiveFromISR+0x5a>
 800e56e:	f240 426d 	movw	r2, #1133	; 0x46d
 800e572:	4929      	ldr	r1, [pc, #164]	; (800e618 <xQueueGiveFromISR+0xf8>)
 800e574:	482b      	ldr	r0, [pc, #172]	; (800e624 <xQueueGiveFromISR+0x104>)
 800e576:	f7f4 fb47 	bl	8002c08 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e57a:	f002 fd2f 	bl	8010fdc <vPortValidateInterruptPriority>
	__asm volatile
 800e57e:	f3ef 8211 	mrs	r2, BASEPRI
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	613a      	str	r2, [r7, #16]
 800e594:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 800e596:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e598:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e59a:	6a3b      	ldr	r3, [r7, #32]
 800e59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59e:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e5a0:	6a3b      	ldr	r3, [r7, #32]
 800e5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a4:	69ba      	ldr	r2, [r7, #24]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d229      	bcs.n	800e5fe <xQueueGiveFromISR+0xde>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5b0:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	1c5a      	adds	r2, r3, #1
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e5ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e5be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5c2:	d112      	bne.n	800e5ea <xQueueGiveFromISR+0xca>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d015      	beq.n	800e5f8 <xQueueGiveFromISR+0xd8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	3324      	adds	r3, #36	; 0x24
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f001 fa03 	bl	800f9dc <xTaskRemoveFromEventList>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00d      	beq.n	800e5f8 <xQueueGiveFromISR+0xd8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00a      	beq.n	800e5f8 <xQueueGiveFromISR+0xd8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]
 800e5e8:	e006      	b.n	800e5f8 <xQueueGiveFromISR+0xd8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5ea:	7dfb      	ldrb	r3, [r7, #23]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	b25a      	sxtb	r2, r3
 800e5f2:	6a3b      	ldr	r3, [r7, #32]
 800e5f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e5fc:	e001      	b.n	800e602 <xQueueGiveFromISR+0xe2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5fe:	2300      	movs	r3, #0
 800e600:	627b      	str	r3, [r7, #36]	; 0x24
 800e602:	69fb      	ldr	r3, [r7, #28]
 800e604:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	f383 8811 	msr	BASEPRI, r3
}
 800e60c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e610:	4618      	mov	r0, r3
 800e612:	3728      	adds	r7, #40	; 0x28
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	080157b4 	.word	0x080157b4
 800e61c:	080157e8 	.word	0x080157e8
 800e620:	080159a8 	.word	0x080159a8
 800e624:	080159c4 	.word	0x080159c4

0800e628 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b08a      	sub	sp, #40	; 0x28
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	60b9      	str	r1, [r7, #8]
 800e632:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e634:	2300      	movs	r3, #0
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d105      	bne.n	800e64e <xQueueReceive+0x26>
 800e642:	f240 5204 	movw	r2, #1284	; 0x504
 800e646:	4962      	ldr	r1, [pc, #392]	; (800e7d0 <xQueueReceive+0x1a8>)
 800e648:	4862      	ldr	r0, [pc, #392]	; (800e7d4 <xQueueReceive+0x1ac>)
 800e64a:	f7f4 fadd 	bl	8002c08 <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d103      	bne.n	800e65c <xQueueReceive+0x34>
 800e654:	6a3b      	ldr	r3, [r7, #32]
 800e656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d101      	bne.n	800e660 <xQueueReceive+0x38>
 800e65c:	2301      	movs	r3, #1
 800e65e:	e000      	b.n	800e662 <xQueueReceive+0x3a>
 800e660:	2300      	movs	r3, #0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d105      	bne.n	800e672 <xQueueReceive+0x4a>
 800e666:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 800e66a:	4959      	ldr	r1, [pc, #356]	; (800e7d0 <xQueueReceive+0x1a8>)
 800e66c:	485a      	ldr	r0, [pc, #360]	; (800e7d8 <xQueueReceive+0x1b0>)
 800e66e:	f7f4 facb 	bl	8002c08 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e672:	f001 fc45 	bl	800ff00 <xTaskGetSchedulerState>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d102      	bne.n	800e682 <xQueueReceive+0x5a>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d101      	bne.n	800e686 <xQueueReceive+0x5e>
 800e682:	2301      	movs	r3, #1
 800e684:	e000      	b.n	800e688 <xQueueReceive+0x60>
 800e686:	2300      	movs	r3, #0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d105      	bne.n	800e698 <xQueueReceive+0x70>
 800e68c:	f240 520d 	movw	r2, #1293	; 0x50d
 800e690:	494f      	ldr	r1, [pc, #316]	; (800e7d0 <xQueueReceive+0x1a8>)
 800e692:	4852      	ldr	r0, [pc, #328]	; (800e7dc <xQueueReceive+0x1b4>)
 800e694:	f7f4 fab8 	bl	8002c08 <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e698:	f002 fbca 	bl	8010e30 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e69c:	6a3b      	ldr	r3, [r7, #32]
 800e69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a0:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d01f      	beq.n	800e6e8 <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	6a38      	ldr	r0, [r7, #32]
 800e6ac:	f000 fab0 	bl	800ec10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	1e5a      	subs	r2, r3, #1
 800e6b4:	6a3b      	ldr	r3, [r7, #32]
 800e6b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6b8:	6a3b      	ldr	r3, [r7, #32]
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d00f      	beq.n	800e6e0 <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6c0:	6a3b      	ldr	r3, [r7, #32]
 800e6c2:	3310      	adds	r3, #16
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f001 f989 	bl	800f9dc <xTaskRemoveFromEventList>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d007      	beq.n	800e6e0 <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6d0:	4b43      	ldr	r3, [pc, #268]	; (800e7e0 <xQueueReceive+0x1b8>)
 800e6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d6:	601a      	str	r2, [r3, #0]
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6e0:	f002 fbd4 	bl	8010e8c <vPortExitCritical>
				return pdPASS;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e06f      	b.n	800e7c8 <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d103      	bne.n	800e6f6 <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6ee:	f002 fbcd 	bl	8010e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	e068      	b.n	800e7c8 <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d106      	bne.n	800e70a <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6fc:	f107 0314 	add.w	r3, r7, #20
 800e700:	4618      	mov	r0, r3
 800e702:	f001 f9cd 	bl	800faa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e706:	2301      	movs	r3, #1
 800e708:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e70a:	f002 fbbf 	bl	8010e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e70e:	f000 fe4f 	bl	800f3b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e712:	f002 fb8d 	bl	8010e30 <vPortEnterCritical>
 800e716:	6a3b      	ldr	r3, [r7, #32]
 800e718:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e71c:	b25b      	sxtb	r3, r3
 800e71e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e722:	d103      	bne.n	800e72c <xQueueReceive+0x104>
 800e724:	6a3b      	ldr	r3, [r7, #32]
 800e726:	2200      	movs	r2, #0
 800e728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e72c:	6a3b      	ldr	r3, [r7, #32]
 800e72e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e732:	b25b      	sxtb	r3, r3
 800e734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e738:	d103      	bne.n	800e742 <xQueueReceive+0x11a>
 800e73a:	6a3b      	ldr	r3, [r7, #32]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e742:	f002 fba3 	bl	8010e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e746:	1d3a      	adds	r2, r7, #4
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	4611      	mov	r1, r2
 800e74e:	4618      	mov	r0, r3
 800e750:	f001 f9bc 	bl	800facc <xTaskCheckForTimeOut>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d129      	bne.n	800e7ae <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e75a:	6a38      	ldr	r0, [r7, #32]
 800e75c:	f000 fad0 	bl	800ed00 <prvIsQueueEmpty>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d01d      	beq.n	800e7a2 <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e76a:	4a1e      	ldr	r2, [pc, #120]	; (800e7e4 <xQueueReceive+0x1bc>)
 800e76c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e770:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	3324      	adds	r3, #36	; 0x24
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	4611      	mov	r1, r2
 800e77a:	4618      	mov	r0, r3
 800e77c:	f001 f8e0 	bl	800f940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e780:	6a38      	ldr	r0, [r7, #32]
 800e782:	f000 fa6b 	bl	800ec5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e786:	f000 fe21 	bl	800f3cc <xTaskResumeAll>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d183      	bne.n	800e698 <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 800e790:	4b13      	ldr	r3, [pc, #76]	; (800e7e0 <xQueueReceive+0x1b8>)
 800e792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e796:	601a      	str	r2, [r3, #0]
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	f3bf 8f6f 	isb	sy
 800e7a0:	e77a      	b.n	800e698 <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e7a2:	6a38      	ldr	r0, [r7, #32]
 800e7a4:	f000 fa5a 	bl	800ec5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7a8:	f000 fe10 	bl	800f3cc <xTaskResumeAll>
 800e7ac:	e774      	b.n	800e698 <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e7ae:	6a38      	ldr	r0, [r7, #32]
 800e7b0:	f000 fa54 	bl	800ec5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7b4:	f000 fe0a 	bl	800f3cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7b8:	6a38      	ldr	r0, [r7, #32]
 800e7ba:	f000 faa1 	bl	800ed00 <prvIsQueueEmpty>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f43f af69 	beq.w	800e698 <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e7c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3728      	adds	r7, #40	; 0x28
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	080157b4 	.word	0x080157b4
 800e7d4:	08015a2c 	.word	0x08015a2c
 800e7d8:	08015a38 	.word	0x08015a38
 800e7dc:	08015950 	.word	0x08015950
 800e7e0:	e000ed04 	.word	0xe000ed04
 800e7e4:	e000000c 	.word	0xe000000c

0800e7e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b08a      	sub	sp, #40	; 0x28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e7fe:	69fb      	ldr	r3, [r7, #28]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d105      	bne.n	800e810 <xQueueSemaphoreTake+0x28>
 800e804:	f240 5295 	movw	r2, #1429	; 0x595
 800e808:	4975      	ldr	r1, [pc, #468]	; (800e9e0 <xQueueSemaphoreTake+0x1f8>)
 800e80a:	4876      	ldr	r0, [pc, #472]	; (800e9e4 <xQueueSemaphoreTake+0x1fc>)
 800e80c:	f7f4 f9fc 	bl	8002c08 <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e814:	2b00      	cmp	r3, #0
 800e816:	d005      	beq.n	800e824 <xQueueSemaphoreTake+0x3c>
 800e818:	f240 5299 	movw	r2, #1433	; 0x599
 800e81c:	4970      	ldr	r1, [pc, #448]	; (800e9e0 <xQueueSemaphoreTake+0x1f8>)
 800e81e:	4872      	ldr	r0, [pc, #456]	; (800e9e8 <xQueueSemaphoreTake+0x200>)
 800e820:	f7f4 f9f2 	bl	8002c08 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e824:	f001 fb6c 	bl	800ff00 <xTaskGetSchedulerState>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d102      	bne.n	800e834 <xQueueSemaphoreTake+0x4c>
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <xQueueSemaphoreTake+0x50>
 800e834:	2301      	movs	r3, #1
 800e836:	e000      	b.n	800e83a <xQueueSemaphoreTake+0x52>
 800e838:	2300      	movs	r3, #0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d105      	bne.n	800e84a <xQueueSemaphoreTake+0x62>
 800e83e:	f240 529e 	movw	r2, #1438	; 0x59e
 800e842:	4967      	ldr	r1, [pc, #412]	; (800e9e0 <xQueueSemaphoreTake+0x1f8>)
 800e844:	4869      	ldr	r0, [pc, #420]	; (800e9ec <xQueueSemaphoreTake+0x204>)
 800e846:	f7f4 f9df 	bl	8002c08 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e84a:	f002 faf1 	bl	8010e30 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e852:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d024      	beq.n	800e8a4 <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	1e5a      	subs	r2, r3, #1
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d104      	bne.n	800e874 <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e86a:	f001 fce9 	bl	8010240 <pvTaskIncrementMutexHeldCount>
 800e86e:	4602      	mov	r2, r0
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	691b      	ldr	r3, [r3, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00f      	beq.n	800e89c <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	3310      	adds	r3, #16
 800e880:	4618      	mov	r0, r3
 800e882:	f001 f8ab 	bl	800f9dc <xTaskRemoveFromEventList>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d007      	beq.n	800e89c <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e88c:	4b58      	ldr	r3, [pc, #352]	; (800e9f0 <xQueueSemaphoreTake+0x208>)
 800e88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e89c:	f002 faf6 	bl	8010e8c <vPortExitCritical>
				return pdPASS;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e098      	b.n	800e9d6 <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10c      	bne.n	800e8c4 <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <xQueueSemaphoreTake+0xd4>
 800e8b0:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800e8b4:	494a      	ldr	r1, [pc, #296]	; (800e9e0 <xQueueSemaphoreTake+0x1f8>)
 800e8b6:	484f      	ldr	r0, [pc, #316]	; (800e9f4 <xQueueSemaphoreTake+0x20c>)
 800e8b8:	f7f4 f9a6 	bl	8002c08 <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e8bc:	f002 fae6 	bl	8010e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	e088      	b.n	800e9d6 <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d106      	bne.n	800e8d8 <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8ca:	f107 030c 	add.w	r3, r7, #12
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f001 f8e6 	bl	800faa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e8d8:	f002 fad8 	bl	8010e8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e8dc:	f000 fd68 	bl	800f3b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e8e0:	f002 faa6 	bl	8010e30 <vPortEnterCritical>
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8ea:	b25b      	sxtb	r3, r3
 800e8ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8f0:	d103      	bne.n	800e8fa <xQueueSemaphoreTake+0x112>
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e900:	b25b      	sxtb	r3, r3
 800e902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e906:	d103      	bne.n	800e910 <xQueueSemaphoreTake+0x128>
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e910:	f002 fabc 	bl	8010e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e914:	463a      	mov	r2, r7
 800e916:	f107 030c 	add.w	r3, r7, #12
 800e91a:	4611      	mov	r1, r2
 800e91c:	4618      	mov	r0, r3
 800e91e:	f001 f8d5 	bl	800facc <xTaskCheckForTimeOut>
 800e922:	4603      	mov	r3, r0
 800e924:	2b00      	cmp	r3, #0
 800e926:	d138      	bne.n	800e99a <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e928:	69f8      	ldr	r0, [r7, #28]
 800e92a:	f000 f9e9 	bl	800ed00 <prvIsQueueEmpty>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d02c      	beq.n	800e98e <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e938:	4a2f      	ldr	r2, [pc, #188]	; (800e9f8 <xQueueSemaphoreTake+0x210>)
 800e93a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e93e:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d109      	bne.n	800e95c <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 800e948:	f002 fa72 	bl	8010e30 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	4618      	mov	r0, r3
 800e952:	f001 faf3 	bl	800ff3c <xTaskPriorityInherit>
 800e956:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800e958:	f002 fa98 	bl	8010e8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	3324      	adds	r3, #36	; 0x24
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	4611      	mov	r1, r2
 800e964:	4618      	mov	r0, r3
 800e966:	f000 ffeb 	bl	800f940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e96a:	69f8      	ldr	r0, [r7, #28]
 800e96c:	f000 f976 	bl	800ec5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e970:	f000 fd2c 	bl	800f3cc <xTaskResumeAll>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	f47f af67 	bne.w	800e84a <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 800e97c:	4b1c      	ldr	r3, [pc, #112]	; (800e9f0 <xQueueSemaphoreTake+0x208>)
 800e97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e982:	601a      	str	r2, [r3, #0]
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	e75d      	b.n	800e84a <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e98e:	69f8      	ldr	r0, [r7, #28]
 800e990:	f000 f964 	bl	800ec5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e994:	f000 fd1a 	bl	800f3cc <xTaskResumeAll>
 800e998:	e757      	b.n	800e84a <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e99a:	69f8      	ldr	r0, [r7, #28]
 800e99c:	f000 f95e 	bl	800ec5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9a0:	f000 fd14 	bl	800f3cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9a4:	69f8      	ldr	r0, [r7, #28]
 800e9a6:	f000 f9ab 	bl	800ed00 <prvIsQueueEmpty>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	f43f af4c 	beq.w	800e84a <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e9b2:	6a3b      	ldr	r3, [r7, #32]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00d      	beq.n	800e9d4 <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 800e9b8:	f002 fa3a 	bl	8010e30 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e9bc:	69f8      	ldr	r0, [r7, #28]
 800e9be:	f000 f8a5 	bl	800eb0c <prvGetDisinheritPriorityAfterTimeout>
 800e9c2:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	689b      	ldr	r3, [r3, #8]
 800e9c8:	6979      	ldr	r1, [r7, #20]
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f001 fbae 	bl	801012c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e9d0:	f002 fa5c 	bl	8010e8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3728      	adds	r7, #40	; 0x28
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	080157b4 	.word	0x080157b4
 800e9e4:	08015a2c 	.word	0x08015a2c
 800e9e8:	080159a8 	.word	0x080159a8
 800e9ec:	08015950 	.word	0x08015950
 800e9f0:	e000ed04 	.word	0xe000ed04
 800e9f4:	08015a8c 	.word	0x08015a8c
 800e9f8:	e000000c 	.word	0xe000000c

0800e9fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b08c      	sub	sp, #48	; 0x30
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	60f8      	str	r0, [r7, #12]
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d105      	bne.n	800ea1e <xQueueReceiveFromISR+0x22>
 800ea12:	f240 62ff 	movw	r2, #1791	; 0x6ff
 800ea16:	4933      	ldr	r1, [pc, #204]	; (800eae4 <xQueueReceiveFromISR+0xe8>)
 800ea18:	4833      	ldr	r0, [pc, #204]	; (800eae8 <xQueueReceiveFromISR+0xec>)
 800ea1a:	f7f4 f8f5 	bl	8002c08 <assertFail>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d103      	bne.n	800ea2c <xQueueReceiveFromISR+0x30>
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d101      	bne.n	800ea30 <xQueueReceiveFromISR+0x34>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e000      	b.n	800ea32 <xQueueReceiveFromISR+0x36>
 800ea30:	2300      	movs	r3, #0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d105      	bne.n	800ea42 <xQueueReceiveFromISR+0x46>
 800ea36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800ea3a:	492a      	ldr	r1, [pc, #168]	; (800eae4 <xQueueReceiveFromISR+0xe8>)
 800ea3c:	482b      	ldr	r0, [pc, #172]	; (800eaec <xQueueReceiveFromISR+0xf0>)
 800ea3e:	f7f4 f8e3 	bl	8002c08 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ea42:	f002 facb 	bl	8010fdc <vPortValidateInterruptPriority>
	__asm volatile
 800ea46:	f3ef 8211 	mrs	r2, BASEPRI
 800ea4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4e:	f383 8811 	msr	BASEPRI, r3
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	f3bf 8f4f 	dsb	sy
 800ea5a:	61ba      	str	r2, [r7, #24]
 800ea5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ea5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea60:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea66:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea68:	6a3b      	ldr	r3, [r7, #32]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d02d      	beq.n	800eaca <xQueueReceiveFromISR+0xce>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ea6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea74:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea76:	68b9      	ldr	r1, [r7, #8]
 800ea78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea7a:	f000 f8c9 	bl	800ec10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea7e:	6a3b      	ldr	r3, [r7, #32]
 800ea80:	1e5a      	subs	r2, r3, #1
 800ea82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea84:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ea86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ea8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea8e:	d112      	bne.n	800eab6 <xQueueReceiveFromISR+0xba>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d015      	beq.n	800eac4 <xQueueReceiveFromISR+0xc8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	3310      	adds	r3, #16
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 ff9d 	bl	800f9dc <xTaskRemoveFromEventList>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00d      	beq.n	800eac4 <xQueueReceiveFromISR+0xc8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <xQueueReceiveFromISR+0xc8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2201      	movs	r2, #1
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	e006      	b.n	800eac4 <xQueueReceiveFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eab6:	7ffb      	ldrb	r3, [r7, #31]
 800eab8:	3301      	adds	r3, #1
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	b25a      	sxtb	r2, r3
 800eabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eac4:	2301      	movs	r3, #1
 800eac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eac8:	e001      	b.n	800eace <xQueueReceiveFromISR+0xd2>
		}
		else
		{
			xReturn = pdFAIL;
 800eaca:	2300      	movs	r3, #0
 800eacc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	f383 8811 	msr	BASEPRI, r3
}
 800ead8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3730      	adds	r7, #48	; 0x30
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	080157b4 	.word	0x080157b4
 800eae8:	080157e8 	.word	0x080157e8
 800eaec:	08015aac 	.word	0x08015aac

0800eaf0 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800eb00:	bf00      	nop
 800eb02:	370c      	adds	r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d006      	beq.n	800eb2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f1c3 0314 	rsb	r3, r3, #20
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	e001      	b.n	800eb2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
	}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3714      	adds	r7, #20
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10d      	bne.n	800eb76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d14d      	bne.n	800ebfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f001 fa5e 	bl	8010028 <xTaskPriorityDisinherit>
 800eb6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	609a      	str	r2, [r3, #8]
 800eb74:	e043      	b.n	800ebfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d119      	bne.n	800ebb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	6858      	ldr	r0, [r3, #4]
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb84:	461a      	mov	r2, r3
 800eb86:	68b9      	ldr	r1, [r7, #8]
 800eb88:	f004 f8f7 	bl	8012d7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb94:	441a      	add	r2, r3
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	689b      	ldr	r3, [r3, #8]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d32b      	bcc.n	800ebfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	605a      	str	r2, [r3, #4]
 800ebae:	e026      	b.n	800ebfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	68d8      	ldr	r0, [r3, #12]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb8:	461a      	mov	r2, r3
 800ebba:	68b9      	ldr	r1, [r7, #8]
 800ebbc:	f004 f8dd 	bl	8012d7a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	68da      	ldr	r2, [r3, #12]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebc8:	425b      	negs	r3, r3
 800ebca:	441a      	add	r2, r3
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	68da      	ldr	r2, [r3, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d207      	bcs.n	800ebec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	689a      	ldr	r2, [r3, #8]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe4:	425b      	negs	r3, r3
 800ebe6:	441a      	add	r2, r3
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	d105      	bne.n	800ebfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d002      	beq.n	800ebfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ec06:	697b      	ldr	r3, [r7, #20]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d018      	beq.n	800ec54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	68da      	ldr	r2, [r3, #12]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec2a:	441a      	add	r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	68da      	ldr	r2, [r3, #12]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d303      	bcc.n	800ec44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	68d9      	ldr	r1, [r3, #12]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	6838      	ldr	r0, [r7, #0]
 800ec50:	f004 f893 	bl	8012d7a <memcpy>
	}
}
 800ec54:	bf00      	nop
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ec64:	f002 f8e4 	bl	8010e30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ec6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec70:	e011      	b.n	800ec96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d012      	beq.n	800eca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	3324      	adds	r3, #36	; 0x24
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f000 feac 	bl	800f9dc <xTaskRemoveFromEventList>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ec8a:	f000 ff7d 	bl	800fb88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ec8e:	7bfb      	ldrb	r3, [r7, #15]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ec96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	dce9      	bgt.n	800ec72 <prvUnlockQueue+0x16>
 800ec9e:	e000      	b.n	800eca2 <prvUnlockQueue+0x46>
					break;
 800eca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	22ff      	movs	r2, #255	; 0xff
 800eca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ecaa:	f002 f8ef 	bl	8010e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ecae:	f002 f8bf 	bl	8010e30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ecba:	e011      	b.n	800ece0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	691b      	ldr	r3, [r3, #16]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d012      	beq.n	800ecea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	3310      	adds	r3, #16
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 fe87 	bl	800f9dc <xTaskRemoveFromEventList>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ecd4:	f000 ff58 	bl	800fb88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ecd8:	7bbb      	ldrb	r3, [r7, #14]
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ece0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	dce9      	bgt.n	800ecbc <prvUnlockQueue+0x60>
 800ece8:	e000      	b.n	800ecec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ecea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	22ff      	movs	r2, #255	; 0xff
 800ecf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ecf4:	f002 f8ca 	bl	8010e8c <vPortExitCritical>
}
 800ecf8:	bf00      	nop
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed08:	f002 f892 	bl	8010e30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d102      	bne.n	800ed1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ed14:	2301      	movs	r3, #1
 800ed16:	60fb      	str	r3, [r7, #12]
 800ed18:	e001      	b.n	800ed1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed1e:	f002 f8b5 	bl	8010e8c <vPortExitCritical>

	return xReturn;
 800ed22:	68fb      	ldr	r3, [r7, #12]
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ed34:	f002 f87c 	bl	8010e30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d102      	bne.n	800ed4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ed44:	2301      	movs	r3, #1
 800ed46:	60fb      	str	r3, [r7, #12]
 800ed48:	e001      	b.n	800ed4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ed4e:	f002 f89d 	bl	8010e8c <vPortExitCritical>

	return xReturn;
 800ed52:	68fb      	ldr	r3, [r7, #12]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b085      	sub	sp, #20
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed66:	2300      	movs	r3, #0
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	e014      	b.n	800ed96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed6c:	4a0f      	ldr	r2, [pc, #60]	; (800edac <vQueueAddToRegistry+0x50>)
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d10b      	bne.n	800ed90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ed78:	490c      	ldr	r1, [pc, #48]	; (800edac <vQueueAddToRegistry+0x50>)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ed82:	4a0a      	ldr	r2, [pc, #40]	; (800edac <vQueueAddToRegistry+0x50>)
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	00db      	lsls	r3, r3, #3
 800ed88:	4413      	add	r3, r2
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ed8e:	e006      	b.n	800ed9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3301      	adds	r3, #1
 800ed94:	60fb      	str	r3, [r7, #12]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2b09      	cmp	r3, #9
 800ed9a:	d9e7      	bls.n	800ed6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed9c:	bf00      	nop
 800ed9e:	bf00      	nop
 800eda0:	3714      	adds	r7, #20
 800eda2:	46bd      	mov	sp, r7
 800eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop
 800edac:	20003bb8 	.word	0x20003bb8

0800edb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800edc0:	f002 f836 	bl	8010e30 <vPortEnterCritical>
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800edca:	b25b      	sxtb	r3, r3
 800edcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800edd0:	d103      	bne.n	800edda <vQueueWaitForMessageRestricted+0x2a>
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ede0:	b25b      	sxtb	r3, r3
 800ede2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ede6:	d103      	bne.n	800edf0 <vQueueWaitForMessageRestricted+0x40>
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	2200      	movs	r2, #0
 800edec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800edf0:	f002 f84c 	bl	8010e8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d106      	bne.n	800ee0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	3324      	adds	r3, #36	; 0x24
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	68b9      	ldr	r1, [r7, #8]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f000 fdbf 	bl	800f988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ee0a:	6978      	ldr	r0, [r7, #20]
 800ee0c:	f7ff ff26 	bl	800ec5c <prvUnlockQueue>
	}
 800ee10:	bf00      	nop
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08c      	sub	sp, #48	; 0x30
 800ee1c:	af04      	add	r7, sp, #16
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d105      	bne.n	800ee38 <xTaskCreateStatic+0x20>
 800ee2c:	f44f 7214 	mov.w	r2, #592	; 0x250
 800ee30:	4920      	ldr	r1, [pc, #128]	; (800eeb4 <xTaskCreateStatic+0x9c>)
 800ee32:	4821      	ldr	r0, [pc, #132]	; (800eeb8 <xTaskCreateStatic+0xa0>)
 800ee34:	f7f3 fee8 	bl	8002c08 <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d105      	bne.n	800ee4a <xTaskCreateStatic+0x32>
 800ee3e:	f240 2251 	movw	r2, #593	; 0x251
 800ee42:	491c      	ldr	r1, [pc, #112]	; (800eeb4 <xTaskCreateStatic+0x9c>)
 800ee44:	481d      	ldr	r0, [pc, #116]	; (800eebc <xTaskCreateStatic+0xa4>)
 800ee46:	f7f3 fedf 	bl	8002c08 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ee4a:	23b8      	movs	r3, #184	; 0xb8
 800ee4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	2bb8      	cmp	r3, #184	; 0xb8
 800ee52:	d005      	beq.n	800ee60 <xTaskCreateStatic+0x48>
 800ee54:	f240 2259 	movw	r2, #601	; 0x259
 800ee58:	4916      	ldr	r1, [pc, #88]	; (800eeb4 <xTaskCreateStatic+0x9c>)
 800ee5a:	4819      	ldr	r0, [pc, #100]	; (800eec0 <xTaskCreateStatic+0xa8>)
 800ee5c:	f7f3 fed4 	bl	8002c08 <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ee60:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ee62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d01e      	beq.n	800eea6 <xTaskCreateStatic+0x8e>
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d01b      	beq.n	800eea6 <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee70:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ee72:	69fb      	ldr	r3, [r7, #28]
 800ee74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ee80:	2300      	movs	r3, #0
 800ee82:	9303      	str	r3, [sp, #12]
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	9302      	str	r3, [sp, #8]
 800ee88:	f107 0318 	add.w	r3, r7, #24
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	68b9      	ldr	r1, [r7, #8]
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f000 f859 	bl	800ef50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee9e:	69f8      	ldr	r0, [r7, #28]
 800eea0:	f000 f904 	bl	800f0ac <prvAddNewTaskToReadyList>
 800eea4:	e001      	b.n	800eeaa <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eeaa:	69bb      	ldr	r3, [r7, #24]
	}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3720      	adds	r7, #32
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	08015b1c 	.word	0x08015b1c
 800eeb8:	08015b50 	.word	0x08015b50
 800eebc:	08015b68 	.word	0x08015b68
 800eec0:	08015b80 	.word	0x08015b80

0800eec4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08c      	sub	sp, #48	; 0x30
 800eec8:	af04      	add	r7, sp, #16
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	603b      	str	r3, [r7, #0]
 800eed0:	4613      	mov	r3, r2
 800eed2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eed4:	88fb      	ldrh	r3, [r7, #6]
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4618      	mov	r0, r3
 800eeda:	f002 f8b9 	bl	8011050 <pvPortMalloc>
 800eede:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00e      	beq.n	800ef04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eee6:	20b8      	movs	r0, #184	; 0xb8
 800eee8:	f002 f8b2 	bl	8011050 <pvPortMalloc>
 800eeec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d003      	beq.n	800eefc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	631a      	str	r2, [r3, #48]	; 0x30
 800eefa:	e005      	b.n	800ef08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eefc:	6978      	ldr	r0, [r7, #20]
 800eefe:	f002 f969 	bl	80111d4 <vPortFree>
 800ef02:	e001      	b.n	800ef08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ef04:	2300      	movs	r3, #0
 800ef06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d017      	beq.n	800ef3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ef0e:	69fb      	ldr	r3, [r7, #28]
 800ef10:	2200      	movs	r2, #0
 800ef12:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ef16:	88fa      	ldrh	r2, [r7, #6]
 800ef18:	2300      	movs	r3, #0
 800ef1a:	9303      	str	r3, [sp, #12]
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	9302      	str	r3, [sp, #8]
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	68b9      	ldr	r1, [r7, #8]
 800ef2c:	68f8      	ldr	r0, [r7, #12]
 800ef2e:	f000 f80f 	bl	800ef50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ef32:	69f8      	ldr	r0, [r7, #28]
 800ef34:	f000 f8ba 	bl	800f0ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ef38:	2301      	movs	r3, #1
 800ef3a:	61bb      	str	r3, [r7, #24]
 800ef3c:	e002      	b.n	800ef44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ef44:	69bb      	ldr	r3, [r7, #24]
	}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3720      	adds	r7, #32
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
	...

0800ef50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b086      	sub	sp, #24
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
 800ef5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	461a      	mov	r2, r3
 800ef68:	21a5      	movs	r1, #165	; 0xa5
 800ef6a:	f003 fe1d 	bl	8012ba8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ef78:	3b01      	subs	r3, #1
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	f023 0307 	bic.w	r3, r3, #7
 800ef86:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	f003 0307 	and.w	r3, r3, #7
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d005      	beq.n	800ef9e <prvInitialiseNewTask+0x4e>
 800ef92:	f44f 7259 	mov.w	r2, #868	; 0x364
 800ef96:	4940      	ldr	r1, [pc, #256]	; (800f098 <prvInitialiseNewTask+0x148>)
 800ef98:	4840      	ldr	r0, [pc, #256]	; (800f09c <prvInitialiseNewTask+0x14c>)
 800ef9a:	f7f3 fe35 	bl	8002c08 <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d01f      	beq.n	800efea <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efaa:	2300      	movs	r3, #0
 800efac:	617b      	str	r3, [r7, #20]
 800efae:	e012      	b.n	800efd6 <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	4413      	add	r3, r2
 800efb6:	7819      	ldrb	r1, [r3, #0]
 800efb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	4413      	add	r3, r2
 800efbe:	3334      	adds	r3, #52	; 0x34
 800efc0:	460a      	mov	r2, r1
 800efc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	4413      	add	r3, r2
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d006      	beq.n	800efde <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	3301      	adds	r3, #1
 800efd4:	617b      	str	r3, [r7, #20]
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	2b0f      	cmp	r3, #15
 800efda:	d9e9      	bls.n	800efb0 <prvInitialiseNewTask+0x60>
 800efdc:	e000      	b.n	800efe0 <prvInitialiseNewTask+0x90>
			{
				break;
 800efde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800efe8:	e003      	b.n	800eff2 <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efec:	2200      	movs	r2, #0
 800efee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	2b13      	cmp	r3, #19
 800eff6:	d901      	bls.n	800effc <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eff8:	2313      	movs	r3, #19
 800effa:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800effc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800effe:	6a3a      	ldr	r2, [r7, #32]
 800f000:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f004:	6a3a      	ldr	r2, [r7, #32]
 800f006:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	2200      	movs	r2, #0
 800f00c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f010:	3304      	adds	r3, #4
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe fed0 	bl	800ddb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01a:	3318      	adds	r3, #24
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fe fecb 	bl	800ddb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f026:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	f1c3 0214 	rsb	r2, r3, #20
 800f02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f030:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f036:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800f038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03a:	2200      	movs	r2, #0
 800f03c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f040:	2200      	movs	r2, #0
 800f042:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f046:	2200      	movs	r2, #0
 800f048:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04e:	2200      	movs	r2, #0
 800f050:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f056:	3360      	adds	r3, #96	; 0x60
 800f058:	224c      	movs	r2, #76	; 0x4c
 800f05a:	2100      	movs	r1, #0
 800f05c:	4618      	mov	r0, r3
 800f05e:	f003 fda3 	bl	8012ba8 <memset>
 800f062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f064:	4a0e      	ldr	r2, [pc, #56]	; (800f0a0 <prvInitialiseNewTask+0x150>)
 800f066:	665a      	str	r2, [r3, #100]	; 0x64
 800f068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f06a:	4a0e      	ldr	r2, [pc, #56]	; (800f0a4 <prvInitialiseNewTask+0x154>)
 800f06c:	669a      	str	r2, [r3, #104]	; 0x68
 800f06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f070:	4a0d      	ldr	r2, [pc, #52]	; (800f0a8 <prvInitialiseNewTask+0x158>)
 800f072:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f074:	683a      	ldr	r2, [r7, #0]
 800f076:	68f9      	ldr	r1, [r7, #12]
 800f078:	6938      	ldr	r0, [r7, #16]
 800f07a:	f001 fda7 	bl	8010bcc <pxPortInitialiseStack>
 800f07e:	4602      	mov	r2, r0
 800f080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f082:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	2b00      	cmp	r3, #0
 800f088:	d002      	beq.n	800f090 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f08e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f090:	bf00      	nop
 800f092:	3718      	adds	r7, #24
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	08015b1c 	.word	0x08015b1c
 800f09c:	08015b9c 	.word	0x08015b9c
 800f0a0:	20009818 	.word	0x20009818
 800f0a4:	20009880 	.word	0x20009880
 800f0a8:	200098e8 	.word	0x200098e8

0800f0ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f0b4:	f001 febc 	bl	8010e30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f0b8:	4b2c      	ldr	r3, [pc, #176]	; (800f16c <prvAddNewTaskToReadyList+0xc0>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	4a2b      	ldr	r2, [pc, #172]	; (800f16c <prvAddNewTaskToReadyList+0xc0>)
 800f0c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f0c2:	4b2b      	ldr	r3, [pc, #172]	; (800f170 <prvAddNewTaskToReadyList+0xc4>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d109      	bne.n	800f0de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f0ca:	4a29      	ldr	r2, [pc, #164]	; (800f170 <prvAddNewTaskToReadyList+0xc4>)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f0d0:	4b26      	ldr	r3, [pc, #152]	; (800f16c <prvAddNewTaskToReadyList+0xc0>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d110      	bne.n	800f0fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f0d8:	f000 fd7c 	bl	800fbd4 <prvInitialiseTaskLists>
 800f0dc:	e00d      	b.n	800f0fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f0de:	4b25      	ldr	r3, [pc, #148]	; (800f174 <prvAddNewTaskToReadyList+0xc8>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d109      	bne.n	800f0fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f0e6:	4b22      	ldr	r3, [pc, #136]	; (800f170 <prvAddNewTaskToReadyList+0xc4>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d802      	bhi.n	800f0fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f0f4:	4a1e      	ldr	r2, [pc, #120]	; (800f170 <prvAddNewTaskToReadyList+0xc4>)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f0fa:	4b1f      	ldr	r3, [pc, #124]	; (800f178 <prvAddNewTaskToReadyList+0xcc>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	3301      	adds	r3, #1
 800f100:	4a1d      	ldr	r2, [pc, #116]	; (800f178 <prvAddNewTaskToReadyList+0xcc>)
 800f102:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f104:	4b1c      	ldr	r3, [pc, #112]	; (800f178 <prvAddNewTaskToReadyList+0xcc>)
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f110:	2201      	movs	r2, #1
 800f112:	409a      	lsls	r2, r3
 800f114:	4b19      	ldr	r3, [pc, #100]	; (800f17c <prvAddNewTaskToReadyList+0xd0>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4313      	orrs	r3, r2
 800f11a:	4a18      	ldr	r2, [pc, #96]	; (800f17c <prvAddNewTaskToReadyList+0xd0>)
 800f11c:	6013      	str	r3, [r2, #0]
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f122:	4613      	mov	r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	4413      	add	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	4a15      	ldr	r2, [pc, #84]	; (800f180 <prvAddNewTaskToReadyList+0xd4>)
 800f12c:	441a      	add	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	3304      	adds	r3, #4
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f7fe fe4c 	bl	800ddd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f13a:	f001 fea7 	bl	8010e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f13e:	4b0d      	ldr	r3, [pc, #52]	; (800f174 <prvAddNewTaskToReadyList+0xc8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00e      	beq.n	800f164 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f146:	4b0a      	ldr	r3, [pc, #40]	; (800f170 <prvAddNewTaskToReadyList+0xc4>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f150:	429a      	cmp	r2, r3
 800f152:	d207      	bcs.n	800f164 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f154:	4b0b      	ldr	r3, [pc, #44]	; (800f184 <prvAddNewTaskToReadyList+0xd8>)
 800f156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f15a:	601a      	str	r2, [r3, #0]
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f164:	bf00      	nop
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	20003e10 	.word	0x20003e10
 800f170:	20003c08 	.word	0x20003c08
 800f174:	20003e1c 	.word	0x20003e1c
 800f178:	20003e2c 	.word	0x20003e2c
 800f17c:	20003e18 	.word	0x20003e18
 800f180:	20003c0c 	.word	0x20003c0c
 800f184:	e000ed04 	.word	0xe000ed04

0800f188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f190:	2300      	movs	r3, #0
 800f192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d012      	beq.n	800f1c0 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f19a:	4b11      	ldr	r3, [pc, #68]	; (800f1e0 <vTaskDelay+0x58>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d005      	beq.n	800f1ae <vTaskDelay+0x26>
 800f1a2:	f240 5244 	movw	r2, #1348	; 0x544
 800f1a6:	490f      	ldr	r1, [pc, #60]	; (800f1e4 <vTaskDelay+0x5c>)
 800f1a8:	480f      	ldr	r0, [pc, #60]	; (800f1e8 <vTaskDelay+0x60>)
 800f1aa:	f7f3 fd2d 	bl	8002c08 <assertFail>
			vTaskSuspendAll();
 800f1ae:	f000 f8ff 	bl	800f3b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f001 f8c9 	bl	801034c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f1ba:	f000 f907 	bl	800f3cc <xTaskResumeAll>
 800f1be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d107      	bne.n	800f1d6 <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 800f1c6:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <vTaskDelay+0x64>)
 800f1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1cc:	601a      	str	r2, [r3, #0]
 800f1ce:	f3bf 8f4f 	dsb	sy
 800f1d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f1d6:	bf00      	nop
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	20003e38 	.word	0x20003e38
 800f1e4:	08015b1c 	.word	0x08015b1c
 800f1e8:	08015c08 	.word	0x08015c08
 800f1ec:	e000ed04 	.word	0xe000ed04

0800f1f0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b088      	sub	sp, #32
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d105      	bne.n	800f20e <eTaskGetState+0x1e>
 800f202:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800f206:	4926      	ldr	r1, [pc, #152]	; (800f2a0 <eTaskGetState+0xb0>)
 800f208:	4826      	ldr	r0, [pc, #152]	; (800f2a4 <eTaskGetState+0xb4>)
 800f20a:	f7f3 fcfd 	bl	8002c08 <assertFail>

		if( pxTCB == pxCurrentTCB )
 800f20e:	4b26      	ldr	r3, [pc, #152]	; (800f2a8 <eTaskGetState+0xb8>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	69ba      	ldr	r2, [r7, #24]
 800f214:	429a      	cmp	r2, r3
 800f216:	d102      	bne.n	800f21e <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800f218:	2300      	movs	r3, #0
 800f21a:	77fb      	strb	r3, [r7, #31]
 800f21c:	e03a      	b.n	800f294 <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 800f21e:	f001 fe07 	bl	8010e30 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	695b      	ldr	r3, [r3, #20]
 800f226:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800f228:	4b20      	ldr	r3, [pc, #128]	; (800f2ac <eTaskGetState+0xbc>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800f22e:	4b20      	ldr	r3, [pc, #128]	; (800f2b0 <eTaskGetState+0xc0>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800f234:	f001 fe2a 	bl	8010e8c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800f238:	697a      	ldr	r2, [r7, #20]
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d003      	beq.n	800f248 <eTaskGetState+0x58>
 800f240:	697a      	ldr	r2, [r7, #20]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	429a      	cmp	r2, r3
 800f246:	d102      	bne.n	800f24e <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800f248:	2302      	movs	r3, #2
 800f24a:	77fb      	strb	r3, [r7, #31]
 800f24c:	e022      	b.n	800f294 <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	4a18      	ldr	r2, [pc, #96]	; (800f2b4 <eTaskGetState+0xc4>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d112      	bne.n	800f27c <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d10b      	bne.n	800f276 <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b01      	cmp	r3, #1
 800f268:	d102      	bne.n	800f270 <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 800f26a:	2302      	movs	r3, #2
 800f26c:	77fb      	strb	r3, [r7, #31]
 800f26e:	e011      	b.n	800f294 <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 800f270:	2303      	movs	r3, #3
 800f272:	77fb      	strb	r3, [r7, #31]
 800f274:	e00e      	b.n	800f294 <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800f276:	2302      	movs	r3, #2
 800f278:	77fb      	strb	r3, [r7, #31]
 800f27a:	e00b      	b.n	800f294 <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	4a0e      	ldr	r2, [pc, #56]	; (800f2b8 <eTaskGetState+0xc8>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d002      	beq.n	800f28a <eTaskGetState+0x9a>
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800f28a:	2304      	movs	r3, #4
 800f28c:	77fb      	strb	r3, [r7, #31]
 800f28e:	e001      	b.n	800f294 <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800f290:	2301      	movs	r3, #1
 800f292:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800f294:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800f296:	4618      	mov	r0, r3
 800f298:	3720      	adds	r7, #32
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	08015b1c 	.word	0x08015b1c
 800f2a4:	08015c50 	.word	0x08015c50
 800f2a8:	20003c08 	.word	0x20003c08
 800f2ac:	20003dc4 	.word	0x20003dc4
 800f2b0:	20003dc8 	.word	0x20003dc8
 800f2b4:	20003df8 	.word	0x20003df8
 800f2b8:	20003de0 	.word	0x20003de0

0800f2bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08a      	sub	sp, #40	; 0x28
 800f2c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f2ca:	1d3a      	adds	r2, r7, #4
 800f2cc:	f107 0108 	add.w	r1, r7, #8
 800f2d0:	f107 030c 	add.w	r3, r7, #12
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7f4 fca1 	bl	8003c1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	68fa      	ldr	r2, [r7, #12]
 800f2e0:	9202      	str	r2, [sp, #8]
 800f2e2:	9301      	str	r3, [sp, #4]
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	460a      	mov	r2, r1
 800f2ec:	4925      	ldr	r1, [pc, #148]	; (800f384 <vTaskStartScheduler+0xc8>)
 800f2ee:	4826      	ldr	r0, [pc, #152]	; (800f388 <vTaskStartScheduler+0xcc>)
 800f2f0:	f7ff fd92 	bl	800ee18 <xTaskCreateStatic>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	4a25      	ldr	r2, [pc, #148]	; (800f38c <vTaskStartScheduler+0xd0>)
 800f2f8:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f2fa:	4b24      	ldr	r3, [pc, #144]	; (800f38c <vTaskStartScheduler+0xd0>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d002      	beq.n	800f308 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800f302:	2301      	movs	r3, #1
 800f304:	617b      	str	r3, [r7, #20]
 800f306:	e001      	b.n	800f30c <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 800f308:	2300      	movs	r3, #0
 800f30a:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d102      	bne.n	800f318 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800f312:	f001 f881 	bl	8010418 <xTimerCreateTimerTask>
 800f316:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	2b01      	cmp	r3, #1
 800f31c:	d123      	bne.n	800f366 <vTaskStartScheduler+0xaa>
	__asm volatile
 800f31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f322:	f383 8811 	msr	BASEPRI, r3
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	f3bf 8f4f 	dsb	sy
 800f32e:	613b      	str	r3, [r7, #16]
}
 800f330:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f332:	4b17      	ldr	r3, [pc, #92]	; (800f390 <vTaskStartScheduler+0xd4>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3360      	adds	r3, #96	; 0x60
 800f338:	4a16      	ldr	r2, [pc, #88]	; (800f394 <vTaskStartScheduler+0xd8>)
 800f33a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f33c:	4b16      	ldr	r3, [pc, #88]	; (800f398 <vTaskStartScheduler+0xdc>)
 800f33e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f342:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f344:	4b15      	ldr	r3, [pc, #84]	; (800f39c <vTaskStartScheduler+0xe0>)
 800f346:	2201      	movs	r2, #1
 800f348:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f34a:	4b15      	ldr	r3, [pc, #84]	; (800f3a0 <vTaskStartScheduler+0xe4>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f350:	f7f4 fc4a 	bl	8003be8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 800f354:	4b0e      	ldr	r3, [pc, #56]	; (800f390 <vTaskStartScheduler+0xd4>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3334      	adds	r3, #52	; 0x34
 800f35a:	4a12      	ldr	r2, [pc, #72]	; (800f3a4 <vTaskStartScheduler+0xe8>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f360:	f001 fcbe 	bl	8010ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f364:	e009      	b.n	800f37a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f36c:	d105      	bne.n	800f37a <vTaskStartScheduler+0xbe>
 800f36e:	f640 022a 	movw	r2, #2090	; 0x82a
 800f372:	490d      	ldr	r1, [pc, #52]	; (800f3a8 <vTaskStartScheduler+0xec>)
 800f374:	480d      	ldr	r0, [pc, #52]	; (800f3ac <vTaskStartScheduler+0xf0>)
 800f376:	f7f3 fc47 	bl	8002c08 <assertFail>
}
 800f37a:	bf00      	nop
 800f37c:	3718      	adds	r7, #24
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	08015c9c 	.word	0x08015c9c
 800f388:	0800fba1 	.word	0x0800fba1
 800f38c:	20003e34 	.word	0x20003e34
 800f390:	20003c08 	.word	0x20003c08
 800f394:	2000043c 	.word	0x2000043c
 800f398:	20003e30 	.word	0x20003e30
 800f39c:	20003e1c 	.word	0x20003e1c
 800f3a0:	20003e14 	.word	0x20003e14
 800f3a4:	e0000004 	.word	0xe0000004
 800f3a8:	08015b1c 	.word	0x08015b1c
 800f3ac:	08015ca4 	.word	0x08015ca4

0800f3b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f3b4:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <vTaskSuspendAll+0x18>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	4a03      	ldr	r2, [pc, #12]	; (800f3c8 <vTaskSuspendAll+0x18>)
 800f3bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f3be:	bf00      	nop
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr
 800f3c8:	20003e38 	.word	0x20003e38

0800f3cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f3da:	4b3f      	ldr	r3, [pc, #252]	; (800f4d8 <xTaskResumeAll+0x10c>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d105      	bne.n	800f3ee <xTaskResumeAll+0x22>
 800f3e2:	f640 0299 	movw	r2, #2201	; 0x899
 800f3e6:	493d      	ldr	r1, [pc, #244]	; (800f4dc <xTaskResumeAll+0x110>)
 800f3e8:	483d      	ldr	r0, [pc, #244]	; (800f4e0 <xTaskResumeAll+0x114>)
 800f3ea:	f7f3 fc0d 	bl	8002c08 <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f3ee:	f001 fd1f 	bl	8010e30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f3f2:	4b39      	ldr	r3, [pc, #228]	; (800f4d8 <xTaskResumeAll+0x10c>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	3b01      	subs	r3, #1
 800f3f8:	4a37      	ldr	r2, [pc, #220]	; (800f4d8 <xTaskResumeAll+0x10c>)
 800f3fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3fc:	4b36      	ldr	r3, [pc, #216]	; (800f4d8 <xTaskResumeAll+0x10c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d161      	bne.n	800f4c8 <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f404:	4b37      	ldr	r3, [pc, #220]	; (800f4e4 <xTaskResumeAll+0x118>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d05d      	beq.n	800f4c8 <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f40c:	e02e      	b.n	800f46c <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f40e:	4b36      	ldr	r3, [pc, #216]	; (800f4e8 <xTaskResumeAll+0x11c>)
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	3318      	adds	r3, #24
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fe fd36 	bl	800de8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	3304      	adds	r3, #4
 800f424:	4618      	mov	r0, r3
 800f426:	f7fe fd31 	bl	800de8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f42e:	2201      	movs	r2, #1
 800f430:	409a      	lsls	r2, r3
 800f432:	4b2e      	ldr	r3, [pc, #184]	; (800f4ec <xTaskResumeAll+0x120>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	4313      	orrs	r3, r2
 800f438:	4a2c      	ldr	r2, [pc, #176]	; (800f4ec <xTaskResumeAll+0x120>)
 800f43a:	6013      	str	r3, [r2, #0]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f440:	4613      	mov	r3, r2
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	4a29      	ldr	r2, [pc, #164]	; (800f4f0 <xTaskResumeAll+0x124>)
 800f44a:	441a      	add	r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	3304      	adds	r3, #4
 800f450:	4619      	mov	r1, r3
 800f452:	4610      	mov	r0, r2
 800f454:	f7fe fcbd 	bl	800ddd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f45c:	4b25      	ldr	r3, [pc, #148]	; (800f4f4 <xTaskResumeAll+0x128>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f462:	429a      	cmp	r2, r3
 800f464:	d302      	bcc.n	800f46c <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 800f466:	4b24      	ldr	r3, [pc, #144]	; (800f4f8 <xTaskResumeAll+0x12c>)
 800f468:	2201      	movs	r2, #1
 800f46a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f46c:	4b1e      	ldr	r3, [pc, #120]	; (800f4e8 <xTaskResumeAll+0x11c>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d1cc      	bne.n	800f40e <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f47a:	f000 fd21 	bl	800fec0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f47e:	4b1f      	ldr	r3, [pc, #124]	; (800f4fc <xTaskResumeAll+0x130>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d010      	beq.n	800f4ac <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f48a:	f000 f8db 	bl	800f644 <xTaskIncrementTick>
 800f48e:	4603      	mov	r3, r0
 800f490:	2b00      	cmp	r3, #0
 800f492:	d002      	beq.n	800f49a <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 800f494:	4b18      	ldr	r3, [pc, #96]	; (800f4f8 <xTaskResumeAll+0x12c>)
 800f496:	2201      	movs	r2, #1
 800f498:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	3b01      	subs	r3, #1
 800f49e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1f1      	bne.n	800f48a <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 800f4a6:	4b15      	ldr	r3, [pc, #84]	; (800f4fc <xTaskResumeAll+0x130>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f4ac:	4b12      	ldr	r3, [pc, #72]	; (800f4f8 <xTaskResumeAll+0x12c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d009      	beq.n	800f4c8 <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f4b8:	4b11      	ldr	r3, [pc, #68]	; (800f500 <xTaskResumeAll+0x134>)
 800f4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4be:	601a      	str	r2, [r3, #0]
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4c8:	f001 fce0 	bl	8010e8c <vPortExitCritical>

	return xAlreadyYielded;
 800f4cc:	68bb      	ldr	r3, [r7, #8]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	20003e38 	.word	0x20003e38
 800f4dc:	08015b1c 	.word	0x08015b1c
 800f4e0:	08015cd8 	.word	0x08015cd8
 800f4e4:	20003e10 	.word	0x20003e10
 800f4e8:	20003dcc 	.word	0x20003dcc
 800f4ec:	20003e18 	.word	0x20003e18
 800f4f0:	20003c0c 	.word	0x20003c0c
 800f4f4:	20003c08 	.word	0x20003c08
 800f4f8:	20003e24 	.word	0x20003e24
 800f4fc:	20003e20 	.word	0x20003e20
 800f500:	e000ed04 	.word	0xe000ed04

0800f504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f50a:	4b05      	ldr	r3, [pc, #20]	; (800f520 <xTaskGetTickCount+0x1c>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f510:	687b      	ldr	r3, [r7, #4]
}
 800f512:	4618      	mov	r0, r3
 800f514:	370c      	adds	r7, #12
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	20003e14 	.word	0x20003e14

0800f524 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800f524:	b580      	push	{r7, lr}
 800f526:	b086      	sub	sp, #24
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f530:	2300      	movs	r3, #0
 800f532:	617b      	str	r3, [r7, #20]
 800f534:	2314      	movs	r3, #20
 800f536:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800f538:	f7ff ff3a 	bl	800f3b0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f53c:	4b3b      	ldr	r3, [pc, #236]	; (800f62c <uxTaskGetSystemState+0x108>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	429a      	cmp	r2, r3
 800f544:	d36a      	bcc.n	800f61c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	3b01      	subs	r3, #1
 800f54a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f54c:	697a      	ldr	r2, [r7, #20]
 800f54e:	4613      	mov	r3, r2
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	4413      	add	r3, r2
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	461a      	mov	r2, r3
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	1898      	adds	r0, r3, r2
 800f55c:	693a      	ldr	r2, [r7, #16]
 800f55e:	4613      	mov	r3, r2
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	4413      	add	r3, r2
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	4a32      	ldr	r2, [pc, #200]	; (800f630 <uxTaskGetSystemState+0x10c>)
 800f568:	4413      	add	r3, r2
 800f56a:	2201      	movs	r2, #1
 800f56c:	4619      	mov	r1, r3
 800f56e:	f000 fc05 	bl	800fd7c <prvListTasksWithinSingleList>
 800f572:	4602      	mov	r2, r0
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	4413      	add	r3, r2
 800f578:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1e2      	bne.n	800f546 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f580:	697a      	ldr	r2, [r7, #20]
 800f582:	4613      	mov	r3, r2
 800f584:	00db      	lsls	r3, r3, #3
 800f586:	4413      	add	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	461a      	mov	r2, r3
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	4413      	add	r3, r2
 800f590:	4a28      	ldr	r2, [pc, #160]	; (800f634 <uxTaskGetSystemState+0x110>)
 800f592:	6811      	ldr	r1, [r2, #0]
 800f594:	2202      	movs	r2, #2
 800f596:	4618      	mov	r0, r3
 800f598:	f000 fbf0 	bl	800fd7c <prvListTasksWithinSingleList>
 800f59c:	4602      	mov	r2, r0
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	4413      	add	r3, r2
 800f5a2:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f5a4:	697a      	ldr	r2, [r7, #20]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	00db      	lsls	r3, r3, #3
 800f5aa:	4413      	add	r3, r2
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	4a20      	ldr	r2, [pc, #128]	; (800f638 <uxTaskGetSystemState+0x114>)
 800f5b6:	6811      	ldr	r1, [r2, #0]
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f000 fbde 	bl	800fd7c <prvListTasksWithinSingleList>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	4413      	add	r3, r2
 800f5c6:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f5c8:	697a      	ldr	r2, [r7, #20]
 800f5ca:	4613      	mov	r3, r2
 800f5cc:	00db      	lsls	r3, r3, #3
 800f5ce:	4413      	add	r3, r2
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	2204      	movs	r2, #4
 800f5da:	4918      	ldr	r1, [pc, #96]	; (800f63c <uxTaskGetSystemState+0x118>)
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f000 fbcd 	bl	800fd7c <prvListTasksWithinSingleList>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f5ea:	697a      	ldr	r2, [r7, #20]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	00db      	lsls	r3, r3, #3
 800f5f0:	4413      	add	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	2203      	movs	r2, #3
 800f5fc:	4910      	ldr	r1, [pc, #64]	; (800f640 <uxTaskGetSystemState+0x11c>)
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 fbbc 	bl	800fd7c <prvListTasksWithinSingleList>
 800f604:	4602      	mov	r2, r0
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	4413      	add	r3, r2
 800f60a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d004      	beq.n	800f61c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f612:	f7f4 faf0 	bl	8003bf6 <getRunTimeCounterValue>
 800f616:	4602      	mov	r2, r0
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800f61c:	f7ff fed6 	bl	800f3cc <xTaskResumeAll>

		return uxTask;
 800f620:	697b      	ldr	r3, [r7, #20]
	}
 800f622:	4618      	mov	r0, r3
 800f624:	3718      	adds	r7, #24
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	20003e10 	.word	0x20003e10
 800f630:	20003c0c 	.word	0x20003c0c
 800f634:	20003dc4 	.word	0x20003dc4
 800f638:	20003dc8 	.word	0x20003dc8
 800f63c:	20003de0 	.word	0x20003de0
 800f640:	20003df8 	.word	0x20003df8

0800f644 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f64a:	2300      	movs	r3, #0
 800f64c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 800f64e:	4a4e      	ldr	r2, [pc, #312]	; (800f788 <xTaskIncrementTick+0x144>)
 800f650:	4b4e      	ldr	r3, [pc, #312]	; (800f78c <xTaskIncrementTick+0x148>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f656:	4b4e      	ldr	r3, [pc, #312]	; (800f790 <xTaskIncrementTick+0x14c>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f040 8089 	bne.w	800f772 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f660:	4b4a      	ldr	r3, [pc, #296]	; (800f78c <xTaskIncrementTick+0x148>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	3301      	adds	r3, #1
 800f666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f668:	4a48      	ldr	r2, [pc, #288]	; (800f78c <xTaskIncrementTick+0x148>)
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d11b      	bne.n	800f6ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f674:	4b47      	ldr	r3, [pc, #284]	; (800f794 <xTaskIncrementTick+0x150>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d005      	beq.n	800f68a <xTaskIncrementTick+0x46>
 800f67e:	f640 22a9 	movw	r2, #2729	; 0xaa9
 800f682:	4945      	ldr	r1, [pc, #276]	; (800f798 <xTaskIncrementTick+0x154>)
 800f684:	4845      	ldr	r0, [pc, #276]	; (800f79c <xTaskIncrementTick+0x158>)
 800f686:	f7f3 fabf 	bl	8002c08 <assertFail>
 800f68a:	4b42      	ldr	r3, [pc, #264]	; (800f794 <xTaskIncrementTick+0x150>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	4b43      	ldr	r3, [pc, #268]	; (800f7a0 <xTaskIncrementTick+0x15c>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a3f      	ldr	r2, [pc, #252]	; (800f794 <xTaskIncrementTick+0x150>)
 800f696:	6013      	str	r3, [r2, #0]
 800f698:	4a41      	ldr	r2, [pc, #260]	; (800f7a0 <xTaskIncrementTick+0x15c>)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6013      	str	r3, [r2, #0]
 800f69e:	4b41      	ldr	r3, [pc, #260]	; (800f7a4 <xTaskIncrementTick+0x160>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	4a3f      	ldr	r2, [pc, #252]	; (800f7a4 <xTaskIncrementTick+0x160>)
 800f6a6:	6013      	str	r3, [r2, #0]
 800f6a8:	f000 fc0a 	bl	800fec0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f6ac:	4b3e      	ldr	r3, [pc, #248]	; (800f7a8 <xTaskIncrementTick+0x164>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d348      	bcc.n	800f748 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6b6:	4b37      	ldr	r3, [pc, #220]	; (800f794 <xTaskIncrementTick+0x150>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d104      	bne.n	800f6ca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6c0:	4b39      	ldr	r3, [pc, #228]	; (800f7a8 <xTaskIncrementTick+0x164>)
 800f6c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6c6:	601a      	str	r2, [r3, #0]
					break;
 800f6c8:	e03e      	b.n	800f748 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6ca:	4b32      	ldr	r3, [pc, #200]	; (800f794 <xTaskIncrementTick+0x150>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	68db      	ldr	r3, [r3, #12]
 800f6d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f6da:	693a      	ldr	r2, [r7, #16]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d203      	bcs.n	800f6ea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f6e2:	4a31      	ldr	r2, [pc, #196]	; (800f7a8 <xTaskIncrementTick+0x164>)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f6e8:	e02e      	b.n	800f748 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	3304      	adds	r3, #4
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fe fbcc 	bl	800de8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d004      	beq.n	800f706 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	3318      	adds	r3, #24
 800f700:	4618      	mov	r0, r3
 800f702:	f7fe fbc3 	bl	800de8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f70a:	2201      	movs	r2, #1
 800f70c:	409a      	lsls	r2, r3
 800f70e:	4b27      	ldr	r3, [pc, #156]	; (800f7ac <xTaskIncrementTick+0x168>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	4313      	orrs	r3, r2
 800f714:	4a25      	ldr	r2, [pc, #148]	; (800f7ac <xTaskIncrementTick+0x168>)
 800f716:	6013      	str	r3, [r2, #0]
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71c:	4613      	mov	r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	4413      	add	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	4a22      	ldr	r2, [pc, #136]	; (800f7b0 <xTaskIncrementTick+0x16c>)
 800f726:	441a      	add	r2, r3
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	3304      	adds	r3, #4
 800f72c:	4619      	mov	r1, r3
 800f72e:	4610      	mov	r0, r2
 800f730:	f7fe fb4f 	bl	800ddd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f738:	4b1e      	ldr	r3, [pc, #120]	; (800f7b4 <xTaskIncrementTick+0x170>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f73e:	429a      	cmp	r2, r3
 800f740:	d3b9      	bcc.n	800f6b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f742:	2301      	movs	r3, #1
 800f744:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f746:	e7b6      	b.n	800f6b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f748:	4b1a      	ldr	r3, [pc, #104]	; (800f7b4 <xTaskIncrementTick+0x170>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f74e:	4918      	ldr	r1, [pc, #96]	; (800f7b0 <xTaskIncrementTick+0x16c>)
 800f750:	4613      	mov	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	440b      	add	r3, r1
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d901      	bls.n	800f764 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 800f760:	2301      	movs	r3, #1
 800f762:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f764:	4b14      	ldr	r3, [pc, #80]	; (800f7b8 <xTaskIncrementTick+0x174>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d007      	beq.n	800f77c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800f76c:	2301      	movs	r3, #1
 800f76e:	617b      	str	r3, [r7, #20]
 800f770:	e004      	b.n	800f77c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f772:	4b12      	ldr	r3, [pc, #72]	; (800f7bc <xTaskIncrementTick+0x178>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	3301      	adds	r3, #1
 800f778:	4a10      	ldr	r2, [pc, #64]	; (800f7bc <xTaskIncrementTick+0x178>)
 800f77a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f77c:	697b      	ldr	r3, [r7, #20]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3718      	adds	r7, #24
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	e0000008 	.word	0xe0000008
 800f78c:	20003e14 	.word	0x20003e14
 800f790:	20003e38 	.word	0x20003e38
 800f794:	20003dc4 	.word	0x20003dc4
 800f798:	08015b1c 	.word	0x08015b1c
 800f79c:	08015d24 	.word	0x08015d24
 800f7a0:	20003dc8 	.word	0x20003dc8
 800f7a4:	20003e28 	.word	0x20003e28
 800f7a8:	20003e30 	.word	0x20003e30
 800f7ac:	20003e18 	.word	0x20003e18
 800f7b0:	20003c0c 	.word	0x20003c0c
 800f7b4:	20003c08 	.word	0x20003c08
 800f7b8:	20003e24 	.word	0x20003e24
 800f7bc:	20003e20 	.word	0x20003e20

0800f7c0 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d103      	bne.n	800f7d8 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800f7d0:	4b08      	ldr	r3, [pc, #32]	; (800f7f4 <vTaskSetApplicationTaskTag+0x34>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	60fb      	str	r3, [r7, #12]
 800f7d6:	e001      	b.n	800f7dc <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 800f7dc:	f001 fb28 	bl	8010e30 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	683a      	ldr	r2, [r7, #0]
 800f7e4:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800f7e6:	f001 fb51 	bl	8010e8c <vPortExitCritical>
	}
 800f7ea:	bf00      	nop
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	20003c08 	.word	0x20003c08

0800f7f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f7fe:	4b44      	ldr	r3, [pc, #272]	; (800f910 <vTaskSwitchContext+0x118>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d003      	beq.n	800f80e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f806:	4b43      	ldr	r3, [pc, #268]	; (800f914 <vTaskSwitchContext+0x11c>)
 800f808:	2201      	movs	r2, #1
 800f80a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f80c:	e07b      	b.n	800f906 <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 800f80e:	4b41      	ldr	r3, [pc, #260]	; (800f914 <vTaskSwitchContext+0x11c>)
 800f810:	2200      	movs	r2, #0
 800f812:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f814:	f7f4 f9ef 	bl	8003bf6 <getRunTimeCounterValue>
 800f818:	4603      	mov	r3, r0
 800f81a:	4a3f      	ldr	r2, [pc, #252]	; (800f918 <vTaskSwitchContext+0x120>)
 800f81c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f81e:	4b3e      	ldr	r3, [pc, #248]	; (800f918 <vTaskSwitchContext+0x120>)
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	4b3e      	ldr	r3, [pc, #248]	; (800f91c <vTaskSwitchContext+0x124>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	429a      	cmp	r2, r3
 800f828:	d909      	bls.n	800f83e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f82a:	4b3d      	ldr	r3, [pc, #244]	; (800f920 <vTaskSwitchContext+0x128>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f830:	4a39      	ldr	r2, [pc, #228]	; (800f918 <vTaskSwitchContext+0x120>)
 800f832:	6810      	ldr	r0, [r2, #0]
 800f834:	4a39      	ldr	r2, [pc, #228]	; (800f91c <vTaskSwitchContext+0x124>)
 800f836:	6812      	ldr	r2, [r2, #0]
 800f838:	1a82      	subs	r2, r0, r2
 800f83a:	440a      	add	r2, r1
 800f83c:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f83e:	4b36      	ldr	r3, [pc, #216]	; (800f918 <vTaskSwitchContext+0x120>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a36      	ldr	r2, [pc, #216]	; (800f91c <vTaskSwitchContext+0x124>)
 800f844:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f846:	4b36      	ldr	r3, [pc, #216]	; (800f920 <vTaskSwitchContext+0x128>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	4b34      	ldr	r3, [pc, #208]	; (800f920 <vTaskSwitchContext+0x128>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f852:	429a      	cmp	r2, r3
 800f854:	d808      	bhi.n	800f868 <vTaskSwitchContext+0x70>
 800f856:	4b32      	ldr	r3, [pc, #200]	; (800f920 <vTaskSwitchContext+0x128>)
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	4b31      	ldr	r3, [pc, #196]	; (800f920 <vTaskSwitchContext+0x128>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	3334      	adds	r3, #52	; 0x34
 800f860:	4619      	mov	r1, r3
 800f862:	4610      	mov	r0, r2
 800f864:	f7f4 f9cf 	bl	8003c06 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800f868:	4b2d      	ldr	r3, [pc, #180]	; (800f920 <vTaskSwitchContext+0x128>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4a2d      	ldr	r2, [pc, #180]	; (800f924 <vTaskSwitchContext+0x12c>)
 800f86e:	6812      	ldr	r2, [r2, #0]
 800f870:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f874:	4b2c      	ldr	r3, [pc, #176]	; (800f928 <vTaskSwitchContext+0x130>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	fab3 f383 	clz	r3, r3
 800f880:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 800f882:	78fb      	ldrb	r3, [r7, #3]
 800f884:	f1c3 031f 	rsb	r3, r3, #31
 800f888:	60fb      	str	r3, [r7, #12]
 800f88a:	4928      	ldr	r1, [pc, #160]	; (800f92c <vTaskSwitchContext+0x134>)
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	4613      	mov	r3, r2
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	4413      	add	r3, r2
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	440b      	add	r3, r1
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d105      	bne.n	800f8aa <vTaskSwitchContext+0xb2>
 800f89e:	f640 32e1 	movw	r2, #3041	; 0xbe1
 800f8a2:	4923      	ldr	r1, [pc, #140]	; (800f930 <vTaskSwitchContext+0x138>)
 800f8a4:	4823      	ldr	r0, [pc, #140]	; (800f934 <vTaskSwitchContext+0x13c>)
 800f8a6:	f7f3 f9af 	bl	8002c08 <assertFail>
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	4413      	add	r3, r2
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	4a1d      	ldr	r2, [pc, #116]	; (800f92c <vTaskSwitchContext+0x134>)
 800f8b6:	4413      	add	r3, r2
 800f8b8:	60bb      	str	r3, [r7, #8]
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	685a      	ldr	r2, [r3, #4]
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	605a      	str	r2, [r3, #4]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	685a      	ldr	r2, [r3, #4]
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	3308      	adds	r3, #8
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d104      	bne.n	800f8da <vTaskSwitchContext+0xe2>
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	685b      	ldr	r3, [r3, #4]
 800f8d4:	685a      	ldr	r2, [r3, #4]
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	605a      	str	r2, [r3, #4]
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	4a0f      	ldr	r2, [pc, #60]	; (800f920 <vTaskSwitchContext+0x128>)
 800f8e2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800f8e4:	4b0e      	ldr	r3, [pc, #56]	; (800f920 <vTaskSwitchContext+0x128>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	3334      	adds	r3, #52	; 0x34
 800f8ea:	4a13      	ldr	r2, [pc, #76]	; (800f938 <vTaskSwitchContext+0x140>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800f8f0:	4b0b      	ldr	r3, [pc, #44]	; (800f920 <vTaskSwitchContext+0x128>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f8f8:	4a0a      	ldr	r2, [pc, #40]	; (800f924 <vTaskSwitchContext+0x12c>)
 800f8fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f8fc:	4b08      	ldr	r3, [pc, #32]	; (800f920 <vTaskSwitchContext+0x128>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3360      	adds	r3, #96	; 0x60
 800f902:	4a0e      	ldr	r2, [pc, #56]	; (800f93c <vTaskSwitchContext+0x144>)
 800f904:	6013      	str	r3, [r2, #0]
}
 800f906:	bf00      	nop
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	20003e38 	.word	0x20003e38
 800f914:	20003e24 	.word	0x20003e24
 800f918:	20003e40 	.word	0x20003e40
 800f91c:	20003e3c 	.word	0x20003e3c
 800f920:	20003c08 	.word	0x20003c08
 800f924:	20003e0c 	.word	0x20003e0c
 800f928:	20003e18 	.word	0x20003e18
 800f92c:	20003c0c 	.word	0x20003c0c
 800f930:	08015b1c 	.word	0x08015b1c
 800f934:	08015d50 	.word	0x08015d50
 800f938:	e0000004 	.word	0xe0000004
 800f93c:	2000043c 	.word	0x2000043c

0800f940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d105      	bne.n	800f95c <vTaskPlaceOnEventList+0x1c>
 800f950:	f640 32fa 	movw	r2, #3066	; 0xbfa
 800f954:	4909      	ldr	r1, [pc, #36]	; (800f97c <vTaskPlaceOnEventList+0x3c>)
 800f956:	480a      	ldr	r0, [pc, #40]	; (800f980 <vTaskPlaceOnEventList+0x40>)
 800f958:	f7f3 f956 	bl	8002c08 <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f95c:	4b09      	ldr	r3, [pc, #36]	; (800f984 <vTaskPlaceOnEventList+0x44>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	3318      	adds	r3, #24
 800f962:	4619      	mov	r1, r3
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f7fe fa58 	bl	800de1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f96a:	2101      	movs	r1, #1
 800f96c:	6838      	ldr	r0, [r7, #0]
 800f96e:	f000 fced 	bl	801034c <prvAddCurrentTaskToDelayedList>
}
 800f972:	bf00      	nop
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	08015b1c 	.word	0x08015b1c
 800f980:	08015d98 	.word	0x08015d98
 800f984:	20003c08 	.word	0x20003c08

0800f988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d105      	bne.n	800f9a6 <vTaskPlaceOnEventListRestricted+0x1e>
 800f99a:	f640 4225 	movw	r2, #3109	; 0xc25
 800f99e:	490c      	ldr	r1, [pc, #48]	; (800f9d0 <vTaskPlaceOnEventListRestricted+0x48>)
 800f9a0:	480c      	ldr	r0, [pc, #48]	; (800f9d4 <vTaskPlaceOnEventListRestricted+0x4c>)
 800f9a2:	f7f3 f931 	bl	8002c08 <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9a6:	4b0c      	ldr	r3, [pc, #48]	; (800f9d8 <vTaskPlaceOnEventListRestricted+0x50>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	3318      	adds	r3, #24
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f7fe fa0f 	bl	800ddd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d002      	beq.n	800f9c0 <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 800f9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	68b8      	ldr	r0, [r7, #8]
 800f9c4:	f000 fcc2 	bl	801034c <prvAddCurrentTaskToDelayedList>
	}
 800f9c8:	bf00      	nop
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	08015b1c 	.word	0x08015b1c
 800f9d4:	08015d98 	.word	0x08015d98
 800f9d8:	20003c08 	.word	0x20003c08

0800f9dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	68db      	ldr	r3, [r3, #12]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d105      	bne.n	800f9fe <xTaskRemoveFromEventList+0x22>
 800f9f2:	f640 4255 	movw	r2, #3157	; 0xc55
 800f9f6:	4922      	ldr	r1, [pc, #136]	; (800fa80 <xTaskRemoveFromEventList+0xa4>)
 800f9f8:	4822      	ldr	r0, [pc, #136]	; (800fa84 <xTaskRemoveFromEventList+0xa8>)
 800f9fa:	f7f3 f905 	bl	8002c08 <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	3318      	adds	r3, #24
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fe fa42 	bl	800de8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa08:	4b1f      	ldr	r3, [pc, #124]	; (800fa88 <xTaskRemoveFromEventList+0xac>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d11c      	bne.n	800fa4a <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	3304      	adds	r3, #4
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fe fa39 	bl	800de8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa1e:	2201      	movs	r2, #1
 800fa20:	409a      	lsls	r2, r3
 800fa22:	4b1a      	ldr	r3, [pc, #104]	; (800fa8c <xTaskRemoveFromEventList+0xb0>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	4313      	orrs	r3, r2
 800fa28:	4a18      	ldr	r2, [pc, #96]	; (800fa8c <xTaskRemoveFromEventList+0xb0>)
 800fa2a:	6013      	str	r3, [r2, #0]
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa30:	4613      	mov	r3, r2
 800fa32:	009b      	lsls	r3, r3, #2
 800fa34:	4413      	add	r3, r2
 800fa36:	009b      	lsls	r3, r3, #2
 800fa38:	4a15      	ldr	r2, [pc, #84]	; (800fa90 <xTaskRemoveFromEventList+0xb4>)
 800fa3a:	441a      	add	r2, r3
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	3304      	adds	r3, #4
 800fa40:	4619      	mov	r1, r3
 800fa42:	4610      	mov	r0, r2
 800fa44:	f7fe f9c5 	bl	800ddd2 <vListInsertEnd>
 800fa48:	e005      	b.n	800fa56 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	3318      	adds	r3, #24
 800fa4e:	4619      	mov	r1, r3
 800fa50:	4810      	ldr	r0, [pc, #64]	; (800fa94 <xTaskRemoveFromEventList+0xb8>)
 800fa52:	f7fe f9be 	bl	800ddd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa5a:	4b0f      	ldr	r3, [pc, #60]	; (800fa98 <xTaskRemoveFromEventList+0xbc>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d905      	bls.n	800fa70 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fa64:	2301      	movs	r3, #1
 800fa66:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fa68:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <xTaskRemoveFromEventList+0xc0>)
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	601a      	str	r2, [r3, #0]
 800fa6e:	e001      	b.n	800fa74 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 800fa70:	2300      	movs	r3, #0
 800fa72:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800fa74:	68fb      	ldr	r3, [r7, #12]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3710      	adds	r7, #16
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	08015b1c 	.word	0x08015b1c
 800fa84:	08015dc0 	.word	0x08015dc0
 800fa88:	20003e38 	.word	0x20003e38
 800fa8c:	20003e18 	.word	0x20003e18
 800fa90:	20003c0c 	.word	0x20003c0c
 800fa94:	20003dcc 	.word	0x20003dcc
 800fa98:	20003c08 	.word	0x20003c08
 800fa9c:	20003e24 	.word	0x20003e24

0800faa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800faa8:	4b06      	ldr	r3, [pc, #24]	; (800fac4 <vTaskInternalSetTimeOutState+0x24>)
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fab0:	4b05      	ldr	r3, [pc, #20]	; (800fac8 <vTaskInternalSetTimeOutState+0x28>)
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	605a      	str	r2, [r3, #4]
}
 800fab8:	bf00      	nop
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	20003e28 	.word	0x20003e28
 800fac8:	20003e14 	.word	0x20003e14

0800facc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b086      	sub	sp, #24
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d105      	bne.n	800fae8 <xTaskCheckForTimeOut+0x1c>
 800fadc:	f640 42ce 	movw	r2, #3278	; 0xcce
 800fae0:	4924      	ldr	r1, [pc, #144]	; (800fb74 <xTaskCheckForTimeOut+0xa8>)
 800fae2:	4825      	ldr	r0, [pc, #148]	; (800fb78 <xTaskCheckForTimeOut+0xac>)
 800fae4:	f7f3 f890 	bl	8002c08 <assertFail>
	configASSERT( pxTicksToWait );
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d105      	bne.n	800fafa <xTaskCheckForTimeOut+0x2e>
 800faee:	f640 42cf 	movw	r2, #3279	; 0xccf
 800faf2:	4920      	ldr	r1, [pc, #128]	; (800fb74 <xTaskCheckForTimeOut+0xa8>)
 800faf4:	4821      	ldr	r0, [pc, #132]	; (800fb7c <xTaskCheckForTimeOut+0xb0>)
 800faf6:	f7f3 f887 	bl	8002c08 <assertFail>

	taskENTER_CRITICAL();
 800fafa:	f001 f999 	bl	8010e30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fafe:	4b20      	ldr	r3, [pc, #128]	; (800fb80 <xTaskCheckForTimeOut+0xb4>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	693a      	ldr	r2, [r7, #16]
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb16:	d102      	bne.n	800fb1e <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	617b      	str	r3, [r7, #20]
 800fb1c:	e023      	b.n	800fb66 <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	4b18      	ldr	r3, [pc, #96]	; (800fb84 <xTaskCheckForTimeOut+0xb8>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d007      	beq.n	800fb3a <xTaskCheckForTimeOut+0x6e>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	693a      	ldr	r2, [r7, #16]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d302      	bcc.n	800fb3a <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fb34:	2301      	movs	r3, #1
 800fb36:	617b      	str	r3, [r7, #20]
 800fb38:	e015      	b.n	800fb66 <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d20b      	bcs.n	800fb5c <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	1ad2      	subs	r2, r2, r3
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f7ff ffa5 	bl	800faa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fb56:	2300      	movs	r3, #0
 800fb58:	617b      	str	r3, [r7, #20]
 800fb5a:	e004      	b.n	800fb66 <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fb62:	2301      	movs	r3, #1
 800fb64:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800fb66:	f001 f991 	bl	8010e8c <vPortExitCritical>

	return xReturn;
 800fb6a:	697b      	ldr	r3, [r7, #20]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	08015b1c 	.word	0x08015b1c
 800fb78:	08015df0 	.word	0x08015df0
 800fb7c:	08015dfc 	.word	0x08015dfc
 800fb80:	20003e14 	.word	0x20003e14
 800fb84:	20003e28 	.word	0x20003e28

0800fb88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fb88:	b480      	push	{r7}
 800fb8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fb8c:	4b03      	ldr	r3, [pc, #12]	; (800fb9c <vTaskMissedYield+0x14>)
 800fb8e:	2201      	movs	r2, #1
 800fb90:	601a      	str	r2, [r3, #0]
}
 800fb92:	bf00      	nop
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	20003e24 	.word	0x20003e24

0800fba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fba8:	f000 f854 	bl	800fc54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fbac:	4b07      	ldr	r3, [pc, #28]	; (800fbcc <prvIdleTask+0x2c>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d907      	bls.n	800fbc4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800fbb4:	4b06      	ldr	r3, [pc, #24]	; (800fbd0 <prvIdleTask+0x30>)
 800fbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbba:	601a      	str	r2, [r3, #0]
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fbc4:	f7f5 f8bc 	bl	8004d40 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fbc8:	e7ee      	b.n	800fba8 <prvIdleTask+0x8>
 800fbca:	bf00      	nop
 800fbcc:	20003c0c 	.word	0x20003c0c
 800fbd0:	e000ed04 	.word	0xe000ed04

0800fbd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbda:	2300      	movs	r3, #0
 800fbdc:	607b      	str	r3, [r7, #4]
 800fbde:	e00c      	b.n	800fbfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4a12      	ldr	r2, [pc, #72]	; (800fc34 <prvInitialiseTaskLists+0x60>)
 800fbec:	4413      	add	r3, r2
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe f8c2 	bl	800dd78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	607b      	str	r3, [r7, #4]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b13      	cmp	r3, #19
 800fbfe:	d9ef      	bls.n	800fbe0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc00:	480d      	ldr	r0, [pc, #52]	; (800fc38 <prvInitialiseTaskLists+0x64>)
 800fc02:	f7fe f8b9 	bl	800dd78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc06:	480d      	ldr	r0, [pc, #52]	; (800fc3c <prvInitialiseTaskLists+0x68>)
 800fc08:	f7fe f8b6 	bl	800dd78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc0c:	480c      	ldr	r0, [pc, #48]	; (800fc40 <prvInitialiseTaskLists+0x6c>)
 800fc0e:	f7fe f8b3 	bl	800dd78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc12:	480c      	ldr	r0, [pc, #48]	; (800fc44 <prvInitialiseTaskLists+0x70>)
 800fc14:	f7fe f8b0 	bl	800dd78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc18:	480b      	ldr	r0, [pc, #44]	; (800fc48 <prvInitialiseTaskLists+0x74>)
 800fc1a:	f7fe f8ad 	bl	800dd78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc1e:	4b0b      	ldr	r3, [pc, #44]	; (800fc4c <prvInitialiseTaskLists+0x78>)
 800fc20:	4a05      	ldr	r2, [pc, #20]	; (800fc38 <prvInitialiseTaskLists+0x64>)
 800fc22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc24:	4b0a      	ldr	r3, [pc, #40]	; (800fc50 <prvInitialiseTaskLists+0x7c>)
 800fc26:	4a05      	ldr	r2, [pc, #20]	; (800fc3c <prvInitialiseTaskLists+0x68>)
 800fc28:	601a      	str	r2, [r3, #0]
}
 800fc2a:	bf00      	nop
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	20003c0c 	.word	0x20003c0c
 800fc38:	20003d9c 	.word	0x20003d9c
 800fc3c:	20003db0 	.word	0x20003db0
 800fc40:	20003dcc 	.word	0x20003dcc
 800fc44:	20003de0 	.word	0x20003de0
 800fc48:	20003df8 	.word	0x20003df8
 800fc4c:	20003dc4 	.word	0x20003dc4
 800fc50:	20003dc8 	.word	0x20003dc8

0800fc54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc5a:	e019      	b.n	800fc90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fc5c:	f001 f8e8 	bl	8010e30 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc60:	4b10      	ldr	r3, [pc, #64]	; (800fca4 <prvCheckTasksWaitingTermination+0x50>)
 800fc62:	68db      	ldr	r3, [r3, #12]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fe f90d 	bl	800de8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fc72:	4b0d      	ldr	r3, [pc, #52]	; (800fca8 <prvCheckTasksWaitingTermination+0x54>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	3b01      	subs	r3, #1
 800fc78:	4a0b      	ldr	r2, [pc, #44]	; (800fca8 <prvCheckTasksWaitingTermination+0x54>)
 800fc7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fc7c:	4b0b      	ldr	r3, [pc, #44]	; (800fcac <prvCheckTasksWaitingTermination+0x58>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3b01      	subs	r3, #1
 800fc82:	4a0a      	ldr	r2, [pc, #40]	; (800fcac <prvCheckTasksWaitingTermination+0x58>)
 800fc84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fc86:	f001 f901 	bl	8010e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f8e4 	bl	800fe58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc90:	4b06      	ldr	r3, [pc, #24]	; (800fcac <prvCheckTasksWaitingTermination+0x58>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e1      	bne.n	800fc5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fc98:	bf00      	nop
 800fc9a:	bf00      	nop
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
 800fca2:	bf00      	nop
 800fca4:	20003de0 	.word	0x20003de0
 800fca8:	20003e10 	.word	0x20003e10
 800fcac:	20003df4 	.word	0x20003df4

0800fcb0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
 800fcbc:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d102      	bne.n	800fcca <vTaskGetInfo+0x1a>
 800fcc4:	4b2c      	ldr	r3, [pc, #176]	; (800fd78 <vTaskGetInfo+0xc8>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	e000      	b.n	800fccc <vTaskGetInfo+0x1c>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	697a      	ldr	r2, [r7, #20]
 800fcd2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800fd06:	78fb      	ldrb	r3, [r7, #3]
 800fd08:	2b05      	cmp	r3, #5
 800fd0a:	d01a      	beq.n	800fd42 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 800fd0c:	4b1a      	ldr	r3, [pc, #104]	; (800fd78 <vTaskGetInfo+0xc8>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d103      	bne.n	800fd1e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	731a      	strb	r2, [r3, #12]
 800fd1c:	e018      	b.n	800fd50 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	78fa      	ldrb	r2, [r7, #3]
 800fd22:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800fd24:	78fb      	ldrb	r3, [r7, #3]
 800fd26:	2b03      	cmp	r3, #3
 800fd28:	d112      	bne.n	800fd50 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 800fd2a:	f7ff fb41 	bl	800f3b0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d002      	beq.n	800fd3c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2202      	movs	r2, #2
 800fd3a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800fd3c:	f7ff fb46 	bl	800f3cc <xTaskResumeAll>
 800fd40:	e006      	b.n	800fd50 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800fd42:	6978      	ldr	r0, [r7, #20]
 800fd44:	f7ff fa54 	bl	800f1f0 <eTaskGetState>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d009      	beq.n	800fd6a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f000 f860 	bl	800fe20 <prvTaskCheckFreeStackSpace>
 800fd60:	4603      	mov	r3, r0
 800fd62:	461a      	mov	r2, r3
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800fd68:	e002      	b.n	800fd70 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	841a      	strh	r2, [r3, #32]
	}
 800fd70:	bf00      	nop
 800fd72:	3718      	adds	r7, #24
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	20003c08 	.word	0x20003c08

0800fd7c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b08a      	sub	sp, #40	; 0x28
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	4613      	mov	r3, r2
 800fd88:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d03f      	beq.n	800fe16 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	623b      	str	r3, [r7, #32]
 800fd9a:	6a3b      	ldr	r3, [r7, #32]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	6a3b      	ldr	r3, [r7, #32]
 800fda2:	605a      	str	r2, [r3, #4]
 800fda4:	6a3b      	ldr	r3, [r7, #32]
 800fda6:	685a      	ldr	r2, [r3, #4]
 800fda8:	6a3b      	ldr	r3, [r7, #32]
 800fdaa:	3308      	adds	r3, #8
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d104      	bne.n	800fdba <prvListTasksWithinSingleList+0x3e>
 800fdb0:	6a3b      	ldr	r3, [r7, #32]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	685a      	ldr	r2, [r3, #4]
 800fdb6:	6a3b      	ldr	r3, [r7, #32]
 800fdb8:	605a      	str	r2, [r3, #4]
 800fdba:	6a3b      	ldr	r3, [r7, #32]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	61bb      	str	r3, [r7, #24]
 800fdc6:	69bb      	ldr	r3, [r7, #24]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	605a      	str	r2, [r3, #4]
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	685a      	ldr	r2, [r3, #4]
 800fdd4:	69bb      	ldr	r3, [r7, #24]
 800fdd6:	3308      	adds	r3, #8
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d104      	bne.n	800fde6 <prvListTasksWithinSingleList+0x6a>
 800fddc:	69bb      	ldr	r3, [r7, #24]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	685a      	ldr	r2, [r3, #4]
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	605a      	str	r2, [r3, #4]
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800fdee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdf0:	4613      	mov	r3, r2
 800fdf2:	00db      	lsls	r3, r3, #3
 800fdf4:	4413      	add	r3, r2
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	1899      	adds	r1, r3, r2
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	2201      	movs	r2, #1
 800fe02:	6978      	ldr	r0, [r7, #20]
 800fe04:	f7ff ff54 	bl	800fcb0 <vTaskGetInfo>
				uxTask++;
 800fe08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d1d5      	bne.n	800fdc2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800fe16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3728      	adds	r7, #40	; 0x28
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800fe20:	b480      	push	{r7}
 800fe22:	b085      	sub	sp, #20
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fe2c:	e005      	b.n	800fe3a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	3301      	adds	r3, #1
 800fe32:	607b      	str	r3, [r7, #4]
			ulCount++;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	3301      	adds	r3, #1
 800fe38:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	2ba5      	cmp	r3, #165	; 0xa5
 800fe40:	d0f5      	beq.n	800fe2e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	089b      	lsrs	r3, r3, #2
 800fe46:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	b29b      	uxth	r3, r3
	}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3714      	adds	r7, #20
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	3360      	adds	r3, #96	; 0x60
 800fe64:	4618      	mov	r0, r3
 800fe66:	f002 fecf 	bl	8012c08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d108      	bne.n	800fe86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f001 f9ab 	bl	80111d4 <vPortFree>
				vPortFree( pxTCB );
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f001 f9a8 	bl	80111d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe84:	e013      	b.n	800feae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d103      	bne.n	800fe98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f001 f99f 	bl	80111d4 <vPortFree>
	}
 800fe96:	e00a      	b.n	800feae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800fe9e:	2b02      	cmp	r3, #2
 800fea0:	d005      	beq.n	800feae <prvDeleteTCB+0x56>
 800fea2:	f640 725d 	movw	r2, #3933	; 0xf5d
 800fea6:	4904      	ldr	r1, [pc, #16]	; (800feb8 <prvDeleteTCB+0x60>)
 800fea8:	4804      	ldr	r0, [pc, #16]	; (800febc <prvDeleteTCB+0x64>)
 800feaa:	f7f2 fead 	bl	8002c08 <assertFail>
	}
 800feae:	bf00      	nop
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	08015b1c 	.word	0x08015b1c
 800febc:	08015e0c 	.word	0x08015e0c

0800fec0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fec6:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <prvResetNextTaskUnblockTime+0x38>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d104      	bne.n	800feda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fed0:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <prvResetNextTaskUnblockTime+0x3c>)
 800fed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fed6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fed8:	e008      	b.n	800feec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feda:	4b07      	ldr	r3, [pc, #28]	; (800fef8 <prvResetNextTaskUnblockTime+0x38>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	685b      	ldr	r3, [r3, #4]
 800fee8:	4a04      	ldr	r2, [pc, #16]	; (800fefc <prvResetNextTaskUnblockTime+0x3c>)
 800feea:	6013      	str	r3, [r2, #0]
}
 800feec:	bf00      	nop
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	20003dc4 	.word	0x20003dc4
 800fefc:	20003e30 	.word	0x20003e30

0800ff00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff06:	4b0b      	ldr	r3, [pc, #44]	; (800ff34 <xTaskGetSchedulerState+0x34>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d102      	bne.n	800ff14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	607b      	str	r3, [r7, #4]
 800ff12:	e008      	b.n	800ff26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff14:	4b08      	ldr	r3, [pc, #32]	; (800ff38 <xTaskGetSchedulerState+0x38>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d102      	bne.n	800ff22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff1c:	2302      	movs	r3, #2
 800ff1e:	607b      	str	r3, [r7, #4]
 800ff20:	e001      	b.n	800ff26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff22:	2300      	movs	r3, #0
 800ff24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff26:	687b      	ldr	r3, [r7, #4]
	}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr
 800ff34:	20003e1c 	.word	0x20003e1c
 800ff38:	20003e38 	.word	0x20003e38

0800ff3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d05e      	beq.n	8010010 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff56:	4b31      	ldr	r3, [pc, #196]	; (801001c <xTaskPriorityInherit+0xe0>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d24e      	bcs.n	800fffe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	699b      	ldr	r3, [r3, #24]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	db06      	blt.n	800ff76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff68:	4b2c      	ldr	r3, [pc, #176]	; (801001c <xTaskPriorityInherit+0xe0>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff6e:	f1c3 0214 	rsb	r2, r3, #20
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	6959      	ldr	r1, [r3, #20]
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff7e:	4613      	mov	r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	4413      	add	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	4a26      	ldr	r2, [pc, #152]	; (8010020 <xTaskPriorityInherit+0xe4>)
 800ff88:	4413      	add	r3, r2
 800ff8a:	4299      	cmp	r1, r3
 800ff8c:	d12f      	bne.n	800ffee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	3304      	adds	r3, #4
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fd ff7a 	bl	800de8c <uxListRemove>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10a      	bne.n	800ffb4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	fa02 f303 	lsl.w	r3, r2, r3
 800ffa8:	43da      	mvns	r2, r3
 800ffaa:	4b1e      	ldr	r3, [pc, #120]	; (8010024 <xTaskPriorityInherit+0xe8>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4013      	ands	r3, r2
 800ffb0:	4a1c      	ldr	r2, [pc, #112]	; (8010024 <xTaskPriorityInherit+0xe8>)
 800ffb2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffb4:	4b19      	ldr	r3, [pc, #100]	; (801001c <xTaskPriorityInherit+0xe0>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	409a      	lsls	r2, r3
 800ffc6:	4b17      	ldr	r3, [pc, #92]	; (8010024 <xTaskPriorityInherit+0xe8>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	4313      	orrs	r3, r2
 800ffcc:	4a15      	ldr	r2, [pc, #84]	; (8010024 <xTaskPriorityInherit+0xe8>)
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	009b      	lsls	r3, r3, #2
 800ffd8:	4413      	add	r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	4a10      	ldr	r2, [pc, #64]	; (8010020 <xTaskPriorityInherit+0xe4>)
 800ffde:	441a      	add	r2, r3
 800ffe0:	68bb      	ldr	r3, [r7, #8]
 800ffe2:	3304      	adds	r3, #4
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4610      	mov	r0, r2
 800ffe8:	f7fd fef3 	bl	800ddd2 <vListInsertEnd>
 800ffec:	e004      	b.n	800fff8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffee:	4b0b      	ldr	r3, [pc, #44]	; (801001c <xTaskPriorityInherit+0xe0>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fff8:	2301      	movs	r3, #1
 800fffa:	60fb      	str	r3, [r7, #12]
 800fffc:	e008      	b.n	8010010 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010002:	4b06      	ldr	r3, [pc, #24]	; (801001c <xTaskPriorityInherit+0xe0>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010008:	429a      	cmp	r2, r3
 801000a:	d201      	bcs.n	8010010 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801000c:	2301      	movs	r3, #1
 801000e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010010:	68fb      	ldr	r3, [r7, #12]
	}
 8010012:	4618      	mov	r0, r3
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	20003c08 	.word	0x20003c08
 8010020:	20003c0c 	.word	0x20003c0c
 8010024:	20003e18 	.word	0x20003e18

08010028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010034:	2300      	movs	r3, #0
 8010036:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d064      	beq.n	8010108 <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801003e:	4b35      	ldr	r3, [pc, #212]	; (8010114 <xTaskPriorityDisinherit+0xec>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	429a      	cmp	r2, r3
 8010046:	d005      	beq.n	8010054 <xTaskPriorityDisinherit+0x2c>
 8010048:	f241 0213 	movw	r2, #4115	; 0x1013
 801004c:	4932      	ldr	r1, [pc, #200]	; (8010118 <xTaskPriorityDisinherit+0xf0>)
 801004e:	4833      	ldr	r0, [pc, #204]	; (801011c <xTaskPriorityDisinherit+0xf4>)
 8010050:	f7f2 fdda 	bl	8002c08 <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010058:	2b00      	cmp	r3, #0
 801005a:	d105      	bne.n	8010068 <xTaskPriorityDisinherit+0x40>
 801005c:	f241 0214 	movw	r2, #4116	; 0x1014
 8010060:	492d      	ldr	r1, [pc, #180]	; (8010118 <xTaskPriorityDisinherit+0xf0>)
 8010062:	482f      	ldr	r0, [pc, #188]	; (8010120 <xTaskPriorityDisinherit+0xf8>)
 8010064:	f7f2 fdd0 	bl	8002c08 <assertFail>
			( pxTCB->uxMutexesHeld )--;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801006c:	1e5a      	subs	r2, r3, #1
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801007a:	429a      	cmp	r2, r3
 801007c:	d044      	beq.n	8010108 <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010082:	2b00      	cmp	r3, #0
 8010084:	d140      	bne.n	8010108 <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	3304      	adds	r3, #4
 801008a:	4618      	mov	r0, r3
 801008c:	f7fd fefe 	bl	800de8c <uxListRemove>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d115      	bne.n	80100c2 <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801009a:	4922      	ldr	r1, [pc, #136]	; (8010124 <xTaskPriorityDisinherit+0xfc>)
 801009c:	4613      	mov	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4413      	add	r3, r2
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	440b      	add	r3, r1
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10a      	bne.n	80100c2 <xTaskPriorityDisinherit+0x9a>
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b0:	2201      	movs	r2, #1
 80100b2:	fa02 f303 	lsl.w	r3, r2, r3
 80100b6:	43da      	mvns	r2, r3
 80100b8:	4b1b      	ldr	r3, [pc, #108]	; (8010128 <xTaskPriorityDisinherit+0x100>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4013      	ands	r3, r2
 80100be:	4a1a      	ldr	r2, [pc, #104]	; (8010128 <xTaskPriorityDisinherit+0x100>)
 80100c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ce:	f1c3 0214 	rsb	r2, r3, #20
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100da:	2201      	movs	r2, #1
 80100dc:	409a      	lsls	r2, r3
 80100de:	4b12      	ldr	r3, [pc, #72]	; (8010128 <xTaskPriorityDisinherit+0x100>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4313      	orrs	r3, r2
 80100e4:	4a10      	ldr	r2, [pc, #64]	; (8010128 <xTaskPriorityDisinherit+0x100>)
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ec:	4613      	mov	r3, r2
 80100ee:	009b      	lsls	r3, r3, #2
 80100f0:	4413      	add	r3, r2
 80100f2:	009b      	lsls	r3, r3, #2
 80100f4:	4a0b      	ldr	r2, [pc, #44]	; (8010124 <xTaskPriorityDisinherit+0xfc>)
 80100f6:	441a      	add	r2, r3
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	3304      	adds	r3, #4
 80100fc:	4619      	mov	r1, r3
 80100fe:	4610      	mov	r0, r2
 8010100:	f7fd fe67 	bl	800ddd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010104:	2301      	movs	r3, #1
 8010106:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010108:	68fb      	ldr	r3, [r7, #12]
	}
 801010a:	4618      	mov	r0, r3
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	20003c08 	.word	0x20003c08
 8010118:	08015b1c 	.word	0x08015b1c
 801011c:	08015e54 	.word	0x08015e54
 8010120:	08015e6c 	.word	0x08015e6c
 8010124:	20003c0c 	.word	0x20003c0c
 8010128:	20003e18 	.word	0x20003e18

0801012c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801012c:	b580      	push	{r7, lr}
 801012e:	b086      	sub	sp, #24
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801013a:	2301      	movs	r3, #1
 801013c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d06d      	beq.n	8010220 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010148:	2b00      	cmp	r3, #0
 801014a:	d105      	bne.n	8010158 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 801014c:	f241 0262 	movw	r2, #4194	; 0x1062
 8010150:	4935      	ldr	r1, [pc, #212]	; (8010228 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010152:	4836      	ldr	r0, [pc, #216]	; (801022c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010154:	f7f2 fd58 	bl	8002c08 <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801015c:	683a      	ldr	r2, [r7, #0]
 801015e:	429a      	cmp	r2, r3
 8010160:	d902      	bls.n	8010168 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	617b      	str	r3, [r7, #20]
 8010166:	e002      	b.n	801016e <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801016c:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010172:	697a      	ldr	r2, [r7, #20]
 8010174:	429a      	cmp	r2, r3
 8010176:	d053      	beq.n	8010220 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	429a      	cmp	r2, r3
 8010180:	d14e      	bne.n	8010220 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010182:	4b2b      	ldr	r3, [pc, #172]	; (8010230 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	429a      	cmp	r2, r3
 801018a:	d105      	bne.n	8010198 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 801018c:	f241 027d 	movw	r2, #4221	; 0x107d
 8010190:	4925      	ldr	r1, [pc, #148]	; (8010228 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010192:	4828      	ldr	r0, [pc, #160]	; (8010234 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010194:	f7f2 fd38 	bl	8002c08 <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	697a      	ldr	r2, [r7, #20]
 80101a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	699b      	ldr	r3, [r3, #24]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	db04      	blt.n	80101b6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	f1c3 0214 	rsb	r2, r3, #20
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	6959      	ldr	r1, [r3, #20]
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	4613      	mov	r3, r2
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	4413      	add	r3, r2
 80101c2:	009b      	lsls	r3, r3, #2
 80101c4:	4a1c      	ldr	r2, [pc, #112]	; (8010238 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80101c6:	4413      	add	r3, r2
 80101c8:	4299      	cmp	r1, r3
 80101ca:	d129      	bne.n	8010220 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	3304      	adds	r3, #4
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fd fe5b 	bl	800de8c <uxListRemove>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d10a      	bne.n	80101f2 <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e0:	2201      	movs	r2, #1
 80101e2:	fa02 f303 	lsl.w	r3, r2, r3
 80101e6:	43da      	mvns	r2, r3
 80101e8:	4b14      	ldr	r3, [pc, #80]	; (801023c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4013      	ands	r3, r2
 80101ee:	4a13      	ldr	r2, [pc, #76]	; (801023c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80101f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f6:	2201      	movs	r2, #1
 80101f8:	409a      	lsls	r2, r3
 80101fa:	4b10      	ldr	r3, [pc, #64]	; (801023c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	4313      	orrs	r3, r2
 8010200:	4a0e      	ldr	r2, [pc, #56]	; (801023c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010202:	6013      	str	r3, [r2, #0]
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010208:	4613      	mov	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4413      	add	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4a09      	ldr	r2, [pc, #36]	; (8010238 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8010212:	441a      	add	r2, r3
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	3304      	adds	r3, #4
 8010218:	4619      	mov	r1, r3
 801021a:	4610      	mov	r0, r2
 801021c:	f7fd fdd9 	bl	800ddd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010220:	bf00      	nop
 8010222:	3718      	adds	r7, #24
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	08015b1c 	.word	0x08015b1c
 801022c:	08015e6c 	.word	0x08015e6c
 8010230:	20003c08 	.word	0x20003c08
 8010234:	08015e84 	.word	0x08015e84
 8010238:	20003c0c 	.word	0x20003c0c
 801023c:	20003e18 	.word	0x20003e18

08010240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010240:	b480      	push	{r7}
 8010242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010244:	4b07      	ldr	r3, [pc, #28]	; (8010264 <pvTaskIncrementMutexHeldCount+0x24>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801024c:	4b05      	ldr	r3, [pc, #20]	; (8010264 <pvTaskIncrementMutexHeldCount+0x24>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010252:	3201      	adds	r2, #1
 8010254:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8010256:	4b03      	ldr	r3, [pc, #12]	; (8010264 <pvTaskIncrementMutexHeldCount+0x24>)
 8010258:	681b      	ldr	r3, [r3, #0]
	}
 801025a:	4618      	mov	r0, r3
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr
 8010264:	20003c08 	.word	0x20003c08

08010268 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010268:	b580      	push	{r7, lr}
 801026a:	b084      	sub	sp, #16
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8010272:	f000 fddd 	bl	8010e30 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010276:	4b20      	ldr	r3, [pc, #128]	; (80102f8 <ulTaskNotifyTake+0x90>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801027e:	2b00      	cmp	r3, #0
 8010280:	d113      	bne.n	80102aa <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010282:	4b1d      	ldr	r3, [pc, #116]	; (80102f8 <ulTaskNotifyTake+0x90>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	2201      	movs	r2, #1
 8010288:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00b      	beq.n	80102aa <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010292:	2101      	movs	r1, #1
 8010294:	6838      	ldr	r0, [r7, #0]
 8010296:	f000 f859 	bl	801034c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801029a:	4b18      	ldr	r3, [pc, #96]	; (80102fc <ulTaskNotifyTake+0x94>)
 801029c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102a0:	601a      	str	r2, [r3, #0]
 80102a2:	f3bf 8f4f 	dsb	sy
 80102a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80102aa:	f000 fdef 	bl	8010e8c <vPortExitCritical>

		taskENTER_CRITICAL();
 80102ae:	f000 fdbf 	bl	8010e30 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80102b2:	4b11      	ldr	r3, [pc, #68]	; (80102f8 <ulTaskNotifyTake+0x90>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80102ba:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00e      	beq.n	80102e0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d005      	beq.n	80102d4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80102c8:	4b0b      	ldr	r3, [pc, #44]	; (80102f8 <ulTaskNotifyTake+0x90>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2200      	movs	r2, #0
 80102ce:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80102d2:	e005      	b.n	80102e0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80102d4:	4b08      	ldr	r3, [pc, #32]	; (80102f8 <ulTaskNotifyTake+0x90>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	3a01      	subs	r2, #1
 80102dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80102e0:	4b05      	ldr	r3, [pc, #20]	; (80102f8 <ulTaskNotifyTake+0x90>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 80102ea:	f000 fdcf 	bl	8010e8c <vPortExitCritical>

		return ulReturn;
 80102ee:	68fb      	ldr	r3, [r7, #12]
	}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3710      	adds	r7, #16
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	20003c08 	.word	0x20003c08
 80102fc:	e000ed04 	.word	0xe000ed04

08010300 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d102      	bne.n	8010316 <ulTaskNotifyValueClear+0x16>
 8010310:	4b0d      	ldr	r3, [pc, #52]	; (8010348 <ulTaskNotifyValueClear+0x48>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	e000      	b.n	8010318 <ulTaskNotifyValueClear+0x18>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 801031a:	f000 fd89 	bl	8010e30 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801031e:	4b0a      	ldr	r3, [pc, #40]	; (8010348 <ulTaskNotifyValueClear+0x48>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010326:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	43db      	mvns	r3, r3
 8010332:	401a      	ands	r2, r3
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 801033a:	f000 fda7 	bl	8010e8c <vPortExitCritical>

		return ulReturn;
 801033e:	68bb      	ldr	r3, [r7, #8]
	}
 8010340:	4618      	mov	r0, r3
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	20003c08 	.word	0x20003c08

0801034c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010356:	4b29      	ldr	r3, [pc, #164]	; (80103fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801035c:	4b28      	ldr	r3, [pc, #160]	; (8010400 <prvAddCurrentTaskToDelayedList+0xb4>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	3304      	adds	r3, #4
 8010362:	4618      	mov	r0, r3
 8010364:	f7fd fd92 	bl	800de8c <uxListRemove>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10b      	bne.n	8010386 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801036e:	4b24      	ldr	r3, [pc, #144]	; (8010400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010374:	2201      	movs	r2, #1
 8010376:	fa02 f303 	lsl.w	r3, r2, r3
 801037a:	43da      	mvns	r2, r3
 801037c:	4b21      	ldr	r3, [pc, #132]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb8>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4013      	ands	r3, r2
 8010382:	4a20      	ldr	r2, [pc, #128]	; (8010404 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010384:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801038c:	d10a      	bne.n	80103a4 <prvAddCurrentTaskToDelayedList+0x58>
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d007      	beq.n	80103a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010394:	4b1a      	ldr	r3, [pc, #104]	; (8010400 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	3304      	adds	r3, #4
 801039a:	4619      	mov	r1, r3
 801039c:	481a      	ldr	r0, [pc, #104]	; (8010408 <prvAddCurrentTaskToDelayedList+0xbc>)
 801039e:	f7fd fd18 	bl	800ddd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80103a2:	e026      	b.n	80103f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	4413      	add	r3, r2
 80103aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80103ac:	4b14      	ldr	r3, [pc, #80]	; (8010400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80103b4:	68ba      	ldr	r2, [r7, #8]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d209      	bcs.n	80103d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103bc:	4b13      	ldr	r3, [pc, #76]	; (801040c <prvAddCurrentTaskToDelayedList+0xc0>)
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	4b0f      	ldr	r3, [pc, #60]	; (8010400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	3304      	adds	r3, #4
 80103c6:	4619      	mov	r1, r3
 80103c8:	4610      	mov	r0, r2
 80103ca:	f7fd fd26 	bl	800de1a <vListInsert>
}
 80103ce:	e010      	b.n	80103f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103d0:	4b0f      	ldr	r3, [pc, #60]	; (8010410 <prvAddCurrentTaskToDelayedList+0xc4>)
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	4b0a      	ldr	r3, [pc, #40]	; (8010400 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	3304      	adds	r3, #4
 80103da:	4619      	mov	r1, r3
 80103dc:	4610      	mov	r0, r2
 80103de:	f7fd fd1c 	bl	800de1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80103e2:	4b0c      	ldr	r3, [pc, #48]	; (8010414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	68ba      	ldr	r2, [r7, #8]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d202      	bcs.n	80103f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80103ec:	4a09      	ldr	r2, [pc, #36]	; (8010414 <prvAddCurrentTaskToDelayedList+0xc8>)
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	6013      	str	r3, [r2, #0]
}
 80103f2:	bf00      	nop
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	20003e14 	.word	0x20003e14
 8010400:	20003c08 	.word	0x20003c08
 8010404:	20003e18 	.word	0x20003e18
 8010408:	20003df8 	.word	0x20003df8
 801040c:	20003dc8 	.word	0x20003dc8
 8010410:	20003dc4 	.word	0x20003dc4
 8010414:	20003e30 	.word	0x20003e30

08010418 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b088      	sub	sp, #32
 801041c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801041e:	2300      	movs	r3, #0
 8010420:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010422:	f000 fb73 	bl	8010b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010426:	4b19      	ldr	r3, [pc, #100]	; (801048c <xTimerCreateTimerTask+0x74>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d020      	beq.n	8010470 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801042e:	2300      	movs	r3, #0
 8010430:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010432:	2300      	movs	r3, #0
 8010434:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010436:	463a      	mov	r2, r7
 8010438:	1d39      	adds	r1, r7, #4
 801043a:	f107 0308 	add.w	r3, r7, #8
 801043e:	4618      	mov	r0, r3
 8010440:	f7f3 fc06 	bl	8003c50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010444:	6839      	ldr	r1, [r7, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	68ba      	ldr	r2, [r7, #8]
 801044a:	9202      	str	r2, [sp, #8]
 801044c:	9301      	str	r3, [sp, #4]
 801044e:	2301      	movs	r3, #1
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	2300      	movs	r3, #0
 8010454:	460a      	mov	r2, r1
 8010456:	490e      	ldr	r1, [pc, #56]	; (8010490 <xTimerCreateTimerTask+0x78>)
 8010458:	480e      	ldr	r0, [pc, #56]	; (8010494 <xTimerCreateTimerTask+0x7c>)
 801045a:	f7fe fcdd 	bl	800ee18 <xTaskCreateStatic>
 801045e:	4603      	mov	r3, r0
 8010460:	4a0d      	ldr	r2, [pc, #52]	; (8010498 <xTimerCreateTimerTask+0x80>)
 8010462:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010464:	4b0c      	ldr	r3, [pc, #48]	; (8010498 <xTimerCreateTimerTask+0x80>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d001      	beq.n	8010470 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801046c:	2301      	movs	r3, #1
 801046e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d105      	bne.n	8010482 <xTimerCreateTimerTask+0x6a>
 8010476:	f240 1213 	movw	r2, #275	; 0x113
 801047a:	4908      	ldr	r1, [pc, #32]	; (801049c <xTimerCreateTimerTask+0x84>)
 801047c:	4808      	ldr	r0, [pc, #32]	; (80104a0 <xTimerCreateTimerTask+0x88>)
 801047e:	f7f2 fbc3 	bl	8002c08 <assertFail>
	return xReturn;
 8010482:	68fb      	ldr	r3, [r7, #12]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	20003e74 	.word	0x20003e74
 8010490:	08015f34 	.word	0x08015f34
 8010494:	080106bd 	.word	0x080106bd
 8010498:	20003e78 	.word	0x20003e78
 801049c:	08015f3c 	.word	0x08015f3c
 80104a0:	08015f70 	.word	0x08015f70

080104a4 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80104b2:	232c      	movs	r3, #44	; 0x2c
 80104b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	2b2c      	cmp	r3, #44	; 0x2c
 80104ba:	d005      	beq.n	80104c8 <xTimerCreateStatic+0x24>
 80104bc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80104c0:	4912      	ldr	r1, [pc, #72]	; (801050c <xTimerCreateStatic+0x68>)
 80104c2:	4813      	ldr	r0, [pc, #76]	; (8010510 <xTimerCreateStatic+0x6c>)
 80104c4:	f7f2 fba0 	bl	8002c08 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80104c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d105      	bne.n	80104dc <xTimerCreateStatic+0x38>
 80104d0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80104d4:	490d      	ldr	r1, [pc, #52]	; (801050c <xTimerCreateStatic+0x68>)
 80104d6:	480f      	ldr	r0, [pc, #60]	; (8010514 <xTimerCreateStatic+0x70>)
 80104d8:	f7f2 fb96 	bl	8002c08 <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80104dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104de:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d00d      	beq.n	8010502 <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	2202      	movs	r2, #2
 80104ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	6a3b      	ldr	r3, [r7, #32]
 80104f4:	9300      	str	r3, [sp, #0]
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	68b9      	ldr	r1, [r7, #8]
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f000 f80b 	bl	8010518 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010502:	697b      	ldr	r3, [r7, #20]
	}
 8010504:	4618      	mov	r0, r3
 8010506:	3718      	adds	r7, #24
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	08015f3c 	.word	0x08015f3c
 8010510:	08015f78 	.word	0x08015f78
 8010514:	08015f94 	.word	0x08015f94

08010518 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	607a      	str	r2, [r7, #4]
 8010524:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d105      	bne.n	8010538 <prvInitialiseNewTimer+0x20>
 801052c:	f240 1265 	movw	r2, #357	; 0x165
 8010530:	4914      	ldr	r1, [pc, #80]	; (8010584 <prvInitialiseNewTimer+0x6c>)
 8010532:	4815      	ldr	r0, [pc, #84]	; (8010588 <prvInitialiseNewTimer+0x70>)
 8010534:	f7f2 fb68 	bl	8002c08 <assertFail>

	if( pxNewTimer != NULL )
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d01e      	beq.n	801057c <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801053e:	f000 fae5 	bl	8010b0c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	68ba      	ldr	r2, [r7, #8]
 801054c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	69ba      	ldr	r2, [r7, #24]
 8010558:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	3304      	adds	r3, #4
 801055e:	4618      	mov	r0, r3
 8010560:	f7fd fc2a 	bl	800ddb8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d008      	beq.n	801057c <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010570:	f043 0304 	orr.w	r3, r3, #4
 8010574:	b2da      	uxtb	r2, r3
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801057c:	bf00      	nop
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	08015f3c 	.word	0x08015f3c
 8010588:	08015fa4 	.word	0x08015fa4

0801058c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b08a      	sub	sp, #40	; 0x28
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
 8010598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801059a:	2300      	movs	r3, #0
 801059c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d105      	bne.n	80105b0 <xTimerGenericCommand+0x24>
 80105a4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80105a8:	491b      	ldr	r1, [pc, #108]	; (8010618 <xTimerGenericCommand+0x8c>)
 80105aa:	481c      	ldr	r0, [pc, #112]	; (801061c <xTimerGenericCommand+0x90>)
 80105ac:	f7f2 fb2c 	bl	8002c08 <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80105b0:	4b1b      	ldr	r3, [pc, #108]	; (8010620 <xTimerGenericCommand+0x94>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d02a      	beq.n	801060e <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b05      	cmp	r3, #5
 80105c8:	dc18      	bgt.n	80105fc <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80105ca:	f7ff fc99 	bl	800ff00 <xTaskGetSchedulerState>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b02      	cmp	r3, #2
 80105d2:	d109      	bne.n	80105e8 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80105d4:	4b12      	ldr	r3, [pc, #72]	; (8010620 <xTimerGenericCommand+0x94>)
 80105d6:	6818      	ldr	r0, [r3, #0]
 80105d8:	f107 0114 	add.w	r1, r7, #20
 80105dc:	2300      	movs	r3, #0
 80105de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e0:	f7fd fdfc 	bl	800e1dc <xQueueGenericSend>
 80105e4:	6278      	str	r0, [r7, #36]	; 0x24
 80105e6:	e012      	b.n	801060e <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80105e8:	4b0d      	ldr	r3, [pc, #52]	; (8010620 <xTimerGenericCommand+0x94>)
 80105ea:	6818      	ldr	r0, [r3, #0]
 80105ec:	f107 0114 	add.w	r1, r7, #20
 80105f0:	2300      	movs	r3, #0
 80105f2:	2200      	movs	r2, #0
 80105f4:	f7fd fdf2 	bl	800e1dc <xQueueGenericSend>
 80105f8:	6278      	str	r0, [r7, #36]	; 0x24
 80105fa:	e008      	b.n	801060e <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105fc:	4b08      	ldr	r3, [pc, #32]	; (8010620 <xTimerGenericCommand+0x94>)
 80105fe:	6818      	ldr	r0, [r3, #0]
 8010600:	f107 0114 	add.w	r1, r7, #20
 8010604:	2300      	movs	r3, #0
 8010606:	683a      	ldr	r2, [r7, #0]
 8010608:	f7fd fef6 	bl	800e3f8 <xQueueGenericSendFromISR>
 801060c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010610:	4618      	mov	r0, r3
 8010612:	3728      	adds	r7, #40	; 0x28
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	08015f3c 	.word	0x08015f3c
 801061c:	08015fc0 	.word	0x08015fc0
 8010620:	20003e74 	.word	0x20003e74

08010624 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af02      	add	r7, sp, #8
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801062e:	4b20      	ldr	r3, [pc, #128]	; (80106b0 <prvProcessExpiredTimer+0x8c>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	3304      	adds	r3, #4
 801063c:	4618      	mov	r0, r3
 801063e:	f7fd fc25 	bl	800de8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010648:	f003 0304 	and.w	r3, r3, #4
 801064c:	2b00      	cmp	r3, #0
 801064e:	d01e      	beq.n	801068e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	699a      	ldr	r2, [r3, #24]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	18d1      	adds	r1, r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f000 f8d1 	bl	8010804 <prvInsertTimerInActiveList>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01b      	beq.n	80106a0 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010668:	2300      	movs	r3, #0
 801066a:	9300      	str	r3, [sp, #0]
 801066c:	2300      	movs	r3, #0
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	2100      	movs	r1, #0
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f7ff ff8a 	bl	801058c <xTimerGenericCommand>
 8010678:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d10f      	bne.n	80106a0 <prvProcessExpiredTimer+0x7c>
 8010680:	f240 2211 	movw	r2, #529	; 0x211
 8010684:	490b      	ldr	r1, [pc, #44]	; (80106b4 <prvProcessExpiredTimer+0x90>)
 8010686:	480c      	ldr	r0, [pc, #48]	; (80106b8 <prvProcessExpiredTimer+0x94>)
 8010688:	f7f2 fabe 	bl	8002c08 <assertFail>
 801068c:	e008      	b.n	80106a0 <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010694:	f023 0301 	bic.w	r3, r3, #1
 8010698:	b2da      	uxtb	r2, r3
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6a1b      	ldr	r3, [r3, #32]
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	4798      	blx	r3
}
 80106a8:	bf00      	nop
 80106aa:	3710      	adds	r7, #16
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	20003e6c 	.word	0x20003e6c
 80106b4:	08015f3c 	.word	0x08015f3c
 80106b8:	08015fe8 	.word	0x08015fe8

080106bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106c4:	f107 0308 	add.w	r3, r7, #8
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 f857 	bl	801077c <prvGetNextExpireTime>
 80106ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	4619      	mov	r1, r3
 80106d4:	68f8      	ldr	r0, [r7, #12]
 80106d6:	f000 f803 	bl	80106e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80106da:	f000 f8d5 	bl	8010888 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80106de:	e7f1      	b.n	80106c4 <prvTimerTask+0x8>

080106e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80106ea:	f7fe fe61 	bl	800f3b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106ee:	f107 0308 	add.w	r3, r7, #8
 80106f2:	4618      	mov	r0, r3
 80106f4:	f000 f866 	bl	80107c4 <prvSampleTimeNow>
 80106f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d130      	bne.n	8010762 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d10a      	bne.n	801071c <prvProcessTimerOrBlockTask+0x3c>
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	429a      	cmp	r2, r3
 801070c:	d806      	bhi.n	801071c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801070e:	f7fe fe5d 	bl	800f3cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010712:	68f9      	ldr	r1, [r7, #12]
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f7ff ff85 	bl	8010624 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801071a:	e024      	b.n	8010766 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d008      	beq.n	8010734 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010722:	4b13      	ldr	r3, [pc, #76]	; (8010770 <prvProcessTimerOrBlockTask+0x90>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d101      	bne.n	8010730 <prvProcessTimerOrBlockTask+0x50>
 801072c:	2301      	movs	r3, #1
 801072e:	e000      	b.n	8010732 <prvProcessTimerOrBlockTask+0x52>
 8010730:	2300      	movs	r3, #0
 8010732:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010734:	4b0f      	ldr	r3, [pc, #60]	; (8010774 <prvProcessTimerOrBlockTask+0x94>)
 8010736:	6818      	ldr	r0, [r3, #0]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	683a      	ldr	r2, [r7, #0]
 8010740:	4619      	mov	r1, r3
 8010742:	f7fe fb35 	bl	800edb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010746:	f7fe fe41 	bl	800f3cc <xTaskResumeAll>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10a      	bne.n	8010766 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010750:	4b09      	ldr	r3, [pc, #36]	; (8010778 <prvProcessTimerOrBlockTask+0x98>)
 8010752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	f3bf 8f6f 	isb	sy
}
 8010760:	e001      	b.n	8010766 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010762:	f7fe fe33 	bl	800f3cc <xTaskResumeAll>
}
 8010766:	bf00      	nop
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20003e70 	.word	0x20003e70
 8010774:	20003e74 	.word	0x20003e74
 8010778:	e000ed04 	.word	0xe000ed04

0801077c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801077c:	b480      	push	{r7}
 801077e:	b085      	sub	sp, #20
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010784:	4b0e      	ldr	r3, [pc, #56]	; (80107c0 <prvGetNextExpireTime+0x44>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <prvGetNextExpireTime+0x16>
 801078e:	2201      	movs	r2, #1
 8010790:	e000      	b.n	8010794 <prvGetNextExpireTime+0x18>
 8010792:	2200      	movs	r2, #0
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d105      	bne.n	80107ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80107a0:	4b07      	ldr	r3, [pc, #28]	; (80107c0 <prvGetNextExpireTime+0x44>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	e001      	b.n	80107b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80107ac:	2300      	movs	r3, #0
 80107ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80107b0:	68fb      	ldr	r3, [r7, #12]
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	3714      	adds	r7, #20
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	20003e6c 	.word	0x20003e6c

080107c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80107cc:	f7fe fe9a 	bl	800f504 <xTaskGetTickCount>
 80107d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80107d2:	4b0b      	ldr	r3, [pc, #44]	; (8010800 <prvSampleTimeNow+0x3c>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	429a      	cmp	r2, r3
 80107da:	d205      	bcs.n	80107e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80107dc:	f000 f932 	bl	8010a44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2201      	movs	r2, #1
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	e002      	b.n	80107ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80107ee:	4a04      	ldr	r2, [pc, #16]	; (8010800 <prvSampleTimeNow+0x3c>)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80107f4:	68fb      	ldr	r3, [r7, #12]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3710      	adds	r7, #16
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	20003e7c 	.word	0x20003e7c

08010804 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b086      	sub	sp, #24
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
 8010810:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010812:	2300      	movs	r3, #0
 8010814:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010822:	68ba      	ldr	r2, [r7, #8]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	429a      	cmp	r2, r3
 8010828:	d812      	bhi.n	8010850 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801082a:	687a      	ldr	r2, [r7, #4]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	1ad2      	subs	r2, r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	699b      	ldr	r3, [r3, #24]
 8010834:	429a      	cmp	r2, r3
 8010836:	d302      	bcc.n	801083e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010838:	2301      	movs	r3, #1
 801083a:	617b      	str	r3, [r7, #20]
 801083c:	e01b      	b.n	8010876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801083e:	4b10      	ldr	r3, [pc, #64]	; (8010880 <prvInsertTimerInActiveList+0x7c>)
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	3304      	adds	r3, #4
 8010846:	4619      	mov	r1, r3
 8010848:	4610      	mov	r0, r2
 801084a:	f7fd fae6 	bl	800de1a <vListInsert>
 801084e:	e012      	b.n	8010876 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	429a      	cmp	r2, r3
 8010856:	d206      	bcs.n	8010866 <prvInsertTimerInActiveList+0x62>
 8010858:	68ba      	ldr	r2, [r7, #8]
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	429a      	cmp	r2, r3
 801085e:	d302      	bcc.n	8010866 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010860:	2301      	movs	r3, #1
 8010862:	617b      	str	r3, [r7, #20]
 8010864:	e007      	b.n	8010876 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010866:	4b07      	ldr	r3, [pc, #28]	; (8010884 <prvInsertTimerInActiveList+0x80>)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	3304      	adds	r3, #4
 801086e:	4619      	mov	r1, r3
 8010870:	4610      	mov	r0, r2
 8010872:	f7fd fad2 	bl	800de1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010876:	697b      	ldr	r3, [r7, #20]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3718      	adds	r7, #24
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	20003e70 	.word	0x20003e70
 8010884:	20003e6c 	.word	0x20003e6c

08010888 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b08c      	sub	sp, #48	; 0x30
 801088c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801088e:	e0bd      	b.n	8010a0c <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	da14      	bge.n	80108c0 <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010896:	f107 0308 	add.w	r3, r7, #8
 801089a:	3304      	adds	r3, #4
 801089c:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d105      	bne.n	80108b0 <prvProcessReceivedCommands+0x28>
 80108a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80108a8:	4961      	ldr	r1, [pc, #388]	; (8010a30 <prvProcessReceivedCommands+0x1a8>)
 80108aa:	4862      	ldr	r0, [pc, #392]	; (8010a34 <prvProcessReceivedCommands+0x1ac>)
 80108ac:	f7f2 f9ac 	bl	8002c08 <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108b6:	6850      	ldr	r0, [r2, #4]
 80108b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ba:	6892      	ldr	r2, [r2, #8]
 80108bc:	4611      	mov	r1, r2
 80108be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	f2c0 80a2 	blt.w	8010a0c <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80108cc:	6a3b      	ldr	r3, [r7, #32]
 80108ce:	695b      	ldr	r3, [r3, #20]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d004      	beq.n	80108de <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80108d4:	6a3b      	ldr	r3, [r7, #32]
 80108d6:	3304      	adds	r3, #4
 80108d8:	4618      	mov	r0, r3
 80108da:	f7fd fad7 	bl	800de8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80108de:	1d3b      	adds	r3, r7, #4
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff ff6f 	bl	80107c4 <prvSampleTimeNow>
 80108e6:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	2b09      	cmp	r3, #9
 80108ec:	f200 808d 	bhi.w	8010a0a <prvProcessReceivedCommands+0x182>
 80108f0:	a201      	add	r2, pc, #4	; (adr r2, 80108f8 <prvProcessReceivedCommands+0x70>)
 80108f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f6:	bf00      	nop
 80108f8:	08010921 	.word	0x08010921
 80108fc:	08010921 	.word	0x08010921
 8010900:	08010921 	.word	0x08010921
 8010904:	0801098d 	.word	0x0801098d
 8010908:	080109a1 	.word	0x080109a1
 801090c:	080109e1 	.word	0x080109e1
 8010910:	08010921 	.word	0x08010921
 8010914:	08010921 	.word	0x08010921
 8010918:	0801098d 	.word	0x0801098d
 801091c:	080109a1 	.word	0x080109a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010920:	6a3b      	ldr	r3, [r7, #32]
 8010922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010926:	f043 0301 	orr.w	r3, r3, #1
 801092a:	b2da      	uxtb	r2, r3
 801092c:	6a3b      	ldr	r3, [r7, #32]
 801092e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	6a3b      	ldr	r3, [r7, #32]
 8010936:	699b      	ldr	r3, [r3, #24]
 8010938:	18d1      	adds	r1, r2, r3
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	69fa      	ldr	r2, [r7, #28]
 801093e:	6a38      	ldr	r0, [r7, #32]
 8010940:	f7ff ff60 	bl	8010804 <prvInsertTimerInActiveList>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d060      	beq.n	8010a0c <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801094a:	6a3b      	ldr	r3, [r7, #32]
 801094c:	6a1b      	ldr	r3, [r3, #32]
 801094e:	6a38      	ldr	r0, [r7, #32]
 8010950:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010952:	6a3b      	ldr	r3, [r7, #32]
 8010954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010958:	f003 0304 	and.w	r3, r3, #4
 801095c:	2b00      	cmp	r3, #0
 801095e:	d055      	beq.n	8010a0c <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	699b      	ldr	r3, [r3, #24]
 8010966:	441a      	add	r2, r3
 8010968:	2300      	movs	r3, #0
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	2300      	movs	r3, #0
 801096e:	2100      	movs	r1, #0
 8010970:	6a38      	ldr	r0, [r7, #32]
 8010972:	f7ff fe0b 	bl	801058c <xTimerGenericCommand>
 8010976:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 8010978:	69bb      	ldr	r3, [r7, #24]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d146      	bne.n	8010a0c <prvProcessReceivedCommands+0x184>
 801097e:	f44f 724b 	mov.w	r2, #812	; 0x32c
 8010982:	492b      	ldr	r1, [pc, #172]	; (8010a30 <prvProcessReceivedCommands+0x1a8>)
 8010984:	482c      	ldr	r0, [pc, #176]	; (8010a38 <prvProcessReceivedCommands+0x1b0>)
 8010986:	f7f2 f93f 	bl	8002c08 <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 801098a:	e03f      	b.n	8010a0c <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801098c:	6a3b      	ldr	r3, [r7, #32]
 801098e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010992:	f023 0301 	bic.w	r3, r3, #1
 8010996:	b2da      	uxtb	r2, r3
 8010998:	6a3b      	ldr	r3, [r7, #32]
 801099a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801099e:	e035      	b.n	8010a0c <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109a6:	f043 0301 	orr.w	r3, r3, #1
 80109aa:	b2da      	uxtb	r2, r3
 80109ac:	6a3b      	ldr	r3, [r7, #32]
 80109ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80109b2:	68fa      	ldr	r2, [r7, #12]
 80109b4:	6a3b      	ldr	r3, [r7, #32]
 80109b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80109b8:	6a3b      	ldr	r3, [r7, #32]
 80109ba:	699b      	ldr	r3, [r3, #24]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d105      	bne.n	80109cc <prvProcessReceivedCommands+0x144>
 80109c0:	f44f 7251 	mov.w	r2, #836	; 0x344
 80109c4:	491a      	ldr	r1, [pc, #104]	; (8010a30 <prvProcessReceivedCommands+0x1a8>)
 80109c6:	481d      	ldr	r0, [pc, #116]	; (8010a3c <prvProcessReceivedCommands+0x1b4>)
 80109c8:	f7f2 f91e 	bl	8002c08 <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	699a      	ldr	r2, [r3, #24]
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	18d1      	adds	r1, r2, r3
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	6a38      	ldr	r0, [r7, #32]
 80109da:	f7ff ff13 	bl	8010804 <prvInsertTimerInActiveList>
					break;
 80109de:	e015      	b.n	8010a0c <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80109e0:	6a3b      	ldr	r3, [r7, #32]
 80109e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109e6:	f003 0302 	and.w	r3, r3, #2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d103      	bne.n	80109f6 <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 80109ee:	6a38      	ldr	r0, [r7, #32]
 80109f0:	f000 fbf0 	bl	80111d4 <vPortFree>
 80109f4:	e00a      	b.n	8010a0c <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80109f6:	6a3b      	ldr	r3, [r7, #32]
 80109f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109fc:	f023 0301 	bic.w	r3, r3, #1
 8010a00:	b2da      	uxtb	r2, r3
 8010a02:	6a3b      	ldr	r3, [r7, #32]
 8010a04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010a08:	e000      	b.n	8010a0c <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 8010a0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a0c:	4b0c      	ldr	r3, [pc, #48]	; (8010a40 <prvProcessReceivedCommands+0x1b8>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f107 0108 	add.w	r1, r7, #8
 8010a14:	2200      	movs	r2, #0
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fd fe06 	bl	800e628 <xQueueReceive>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f47f af36 	bne.w	8010890 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010a24:	bf00      	nop
 8010a26:	bf00      	nop
 8010a28:	3728      	adds	r7, #40	; 0x28
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	08015f3c 	.word	0x08015f3c
 8010a34:	08015ff0 	.word	0x08015ff0
 8010a38:	08015fe8 	.word	0x08015fe8
 8010a3c:	08015ffc 	.word	0x08015ffc
 8010a40:	20003e74 	.word	0x20003e74

08010a44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b088      	sub	sp, #32
 8010a48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a4a:	e043      	b.n	8010ad4 <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a4c:	4b2b      	ldr	r3, [pc, #172]	; (8010afc <prvSwitchTimerLists+0xb8>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a56:	4b29      	ldr	r3, [pc, #164]	; (8010afc <prvSwitchTimerLists+0xb8>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	3304      	adds	r3, #4
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7fd fa11 	bl	800de8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d029      	beq.n	8010ad4 <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	699b      	ldr	r3, [r3, #24]
 8010a84:	693a      	ldr	r2, [r7, #16]
 8010a86:	4413      	add	r3, r2
 8010a88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010a8a:	68ba      	ldr	r2, [r7, #8]
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d90e      	bls.n	8010ab0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	68ba      	ldr	r2, [r7, #8]
 8010a96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	68fa      	ldr	r2, [r7, #12]
 8010a9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010a9e:	4b17      	ldr	r3, [pc, #92]	; (8010afc <prvSwitchTimerLists+0xb8>)
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	4610      	mov	r0, r2
 8010aaa:	f7fd f9b6 	bl	800de1a <vListInsert>
 8010aae:	e011      	b.n	8010ad4 <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	9300      	str	r3, [sp, #0]
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	693a      	ldr	r2, [r7, #16]
 8010ab8:	2100      	movs	r1, #0
 8010aba:	68f8      	ldr	r0, [r7, #12]
 8010abc:	f7ff fd66 	bl	801058c <xTimerGenericCommand>
 8010ac0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d105      	bne.n	8010ad4 <prvSwitchTimerLists+0x90>
 8010ac8:	f240 329d 	movw	r2, #925	; 0x39d
 8010acc:	490c      	ldr	r1, [pc, #48]	; (8010b00 <prvSwitchTimerLists+0xbc>)
 8010ace:	480d      	ldr	r0, [pc, #52]	; (8010b04 <prvSwitchTimerLists+0xc0>)
 8010ad0:	f7f2 f89a 	bl	8002c08 <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ad4:	4b09      	ldr	r3, [pc, #36]	; (8010afc <prvSwitchTimerLists+0xb8>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d1b6      	bne.n	8010a4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010ade:	4b07      	ldr	r3, [pc, #28]	; (8010afc <prvSwitchTimerLists+0xb8>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010ae4:	4b08      	ldr	r3, [pc, #32]	; (8010b08 <prvSwitchTimerLists+0xc4>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4a04      	ldr	r2, [pc, #16]	; (8010afc <prvSwitchTimerLists+0xb8>)
 8010aea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010aec:	4a06      	ldr	r2, [pc, #24]	; (8010b08 <prvSwitchTimerLists+0xc4>)
 8010aee:	697b      	ldr	r3, [r7, #20]
 8010af0:	6013      	str	r3, [r2, #0]
}
 8010af2:	bf00      	nop
 8010af4:	3718      	adds	r7, #24
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
 8010afa:	bf00      	nop
 8010afc:	20003e6c 	.word	0x20003e6c
 8010b00:	08015f3c 	.word	0x08015f3c
 8010b04:	08015fe8 	.word	0x08015fe8
 8010b08:	20003e70 	.word	0x20003e70

08010b0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010b12:	f000 f98d 	bl	8010e30 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010b16:	4b15      	ldr	r3, [pc, #84]	; (8010b6c <prvCheckForValidListAndQueue+0x60>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d120      	bne.n	8010b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010b1e:	4814      	ldr	r0, [pc, #80]	; (8010b70 <prvCheckForValidListAndQueue+0x64>)
 8010b20:	f7fd f92a 	bl	800dd78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010b24:	4813      	ldr	r0, [pc, #76]	; (8010b74 <prvCheckForValidListAndQueue+0x68>)
 8010b26:	f7fd f927 	bl	800dd78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010b2a:	4b13      	ldr	r3, [pc, #76]	; (8010b78 <prvCheckForValidListAndQueue+0x6c>)
 8010b2c:	4a10      	ldr	r2, [pc, #64]	; (8010b70 <prvCheckForValidListAndQueue+0x64>)
 8010b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010b30:	4b12      	ldr	r3, [pc, #72]	; (8010b7c <prvCheckForValidListAndQueue+0x70>)
 8010b32:	4a10      	ldr	r2, [pc, #64]	; (8010b74 <prvCheckForValidListAndQueue+0x68>)
 8010b34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b36:	2300      	movs	r3, #0
 8010b38:	9300      	str	r3, [sp, #0]
 8010b3a:	4b11      	ldr	r3, [pc, #68]	; (8010b80 <prvCheckForValidListAndQueue+0x74>)
 8010b3c:	4a11      	ldr	r2, [pc, #68]	; (8010b84 <prvCheckForValidListAndQueue+0x78>)
 8010b3e:	2110      	movs	r1, #16
 8010b40:	2014      	movs	r0, #20
 8010b42:	f7fd fa35 	bl	800dfb0 <xQueueGenericCreateStatic>
 8010b46:	4603      	mov	r3, r0
 8010b48:	4a08      	ldr	r2, [pc, #32]	; (8010b6c <prvCheckForValidListAndQueue+0x60>)
 8010b4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b4c:	4b07      	ldr	r3, [pc, #28]	; (8010b6c <prvCheckForValidListAndQueue+0x60>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d005      	beq.n	8010b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b54:	4b05      	ldr	r3, [pc, #20]	; (8010b6c <prvCheckForValidListAndQueue+0x60>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	490b      	ldr	r1, [pc, #44]	; (8010b88 <prvCheckForValidListAndQueue+0x7c>)
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7fe f8fe 	bl	800ed5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b60:	f000 f994 	bl	8010e8c <vPortExitCritical>
}
 8010b64:	bf00      	nop
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	20003e74 	.word	0x20003e74
 8010b70:	20003e44 	.word	0x20003e44
 8010b74:	20003e58 	.word	0x20003e58
 8010b78:	20003e6c 	.word	0x20003e6c
 8010b7c:	20003e70 	.word	0x20003e70
 8010b80:	20003fc0 	.word	0x20003fc0
 8010b84:	20003e80 	.word	0x20003e80
 8010b88:	08016024 	.word	0x08016024

08010b8c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d105      	bne.n	8010baa <pvTimerGetTimerID+0x1e>
 8010b9e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010ba2:	4908      	ldr	r1, [pc, #32]	; (8010bc4 <pvTimerGetTimerID+0x38>)
 8010ba4:	4808      	ldr	r0, [pc, #32]	; (8010bc8 <pvTimerGetTimerID+0x3c>)
 8010ba6:	f7f2 f82f 	bl	8002c08 <assertFail>

	taskENTER_CRITICAL();
 8010baa:	f000 f941 	bl	8010e30 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	69db      	ldr	r3, [r3, #28]
 8010bb2:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 8010bb4:	f000 f96a 	bl	8010e8c <vPortExitCritical>

	return pvReturn;
 8010bb8:	68bb      	ldr	r3, [r7, #8]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	08015f3c 	.word	0x08015f3c
 8010bc8:	08015fc0 	.word	0x08015fc0

08010bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b085      	sub	sp, #20
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	3b04      	subs	r3, #4
 8010bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	3b04      	subs	r3, #4
 8010bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	f023 0201 	bic.w	r2, r3, #1
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	3b04      	subs	r3, #4
 8010bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010bfc:	4a0c      	ldr	r2, [pc, #48]	; (8010c30 <pxPortInitialiseStack+0x64>)
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	3b14      	subs	r3, #20
 8010c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	3b04      	subs	r3, #4
 8010c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f06f 0202 	mvn.w	r2, #2
 8010c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	3b20      	subs	r3, #32
 8010c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010c22:	68fb      	ldr	r3, [r7, #12]
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3714      	adds	r7, #20
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr
 8010c30:	08010c35 	.word	0x08010c35

08010c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b082      	sub	sp, #8
 8010c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010c3e:	4b0e      	ldr	r3, [pc, #56]	; (8010c78 <prvTaskExitError+0x44>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c46:	d004      	beq.n	8010c52 <prvTaskExitError+0x1e>
 8010c48:	22e3      	movs	r2, #227	; 0xe3
 8010c4a:	490c      	ldr	r1, [pc, #48]	; (8010c7c <prvTaskExitError+0x48>)
 8010c4c:	480c      	ldr	r0, [pc, #48]	; (8010c80 <prvTaskExitError+0x4c>)
 8010c4e:	f7f1 ffdb 	bl	8002c08 <assertFail>
	__asm volatile
 8010c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c56:	f383 8811 	msr	BASEPRI, r3
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	607b      	str	r3, [r7, #4]
}
 8010c64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010c66:	bf00      	nop
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d0fc      	beq.n	8010c68 <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010c6e:	bf00      	nop
 8010c70:	bf00      	nop
 8010c72:	3708      	adds	r7, #8
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	2000037c 	.word	0x2000037c
 8010c7c:	08016038 	.word	0x08016038
 8010c80:	08016080 	.word	0x08016080
	...

08010c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010c90:	4b07      	ldr	r3, [pc, #28]	; (8010cb0 <pxCurrentTCBConst2>)
 8010c92:	6819      	ldr	r1, [r3, #0]
 8010c94:	6808      	ldr	r0, [r1, #0]
 8010c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c9a:	f380 8809 	msr	PSP, r0
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f04f 0000 	mov.w	r0, #0
 8010ca6:	f380 8811 	msr	BASEPRI, r0
 8010caa:	4770      	bx	lr
 8010cac:	f3af 8000 	nop.w

08010cb0 <pxCurrentTCBConst2>:
 8010cb0:	20003c08 	.word	0x20003c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010cb4:	bf00      	nop
 8010cb6:	bf00      	nop

08010cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010cb8:	4808      	ldr	r0, [pc, #32]	; (8010cdc <prvPortStartFirstTask+0x24>)
 8010cba:	6800      	ldr	r0, [r0, #0]
 8010cbc:	6800      	ldr	r0, [r0, #0]
 8010cbe:	f380 8808 	msr	MSP, r0
 8010cc2:	f04f 0000 	mov.w	r0, #0
 8010cc6:	f380 8814 	msr	CONTROL, r0
 8010cca:	b662      	cpsie	i
 8010ccc:	b661      	cpsie	f
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	df00      	svc	0
 8010cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010cda:	bf00      	nop
 8010cdc:	e000ed08 	.word	0xe000ed08

08010ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010ce6:	4b44      	ldr	r3, [pc, #272]	; (8010df8 <xPortStartScheduler+0x118>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	4a44      	ldr	r2, [pc, #272]	; (8010dfc <xPortStartScheduler+0x11c>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d105      	bne.n	8010cfc <xPortStartScheduler+0x1c>
 8010cf0:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010cf4:	4942      	ldr	r1, [pc, #264]	; (8010e00 <xPortStartScheduler+0x120>)
 8010cf6:	4843      	ldr	r0, [pc, #268]	; (8010e04 <xPortStartScheduler+0x124>)
 8010cf8:	f7f1 ff86 	bl	8002c08 <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010cfc:	4b3e      	ldr	r3, [pc, #248]	; (8010df8 <xPortStartScheduler+0x118>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a41      	ldr	r2, [pc, #260]	; (8010e08 <xPortStartScheduler+0x128>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d105      	bne.n	8010d12 <xPortStartScheduler+0x32>
 8010d06:	f240 1229 	movw	r2, #297	; 0x129
 8010d0a:	493d      	ldr	r1, [pc, #244]	; (8010e00 <xPortStartScheduler+0x120>)
 8010d0c:	483f      	ldr	r0, [pc, #252]	; (8010e0c <xPortStartScheduler+0x12c>)
 8010d0e:	f7f1 ff7b 	bl	8002c08 <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010d12:	4b3f      	ldr	r3, [pc, #252]	; (8010e10 <xPortStartScheduler+0x130>)
 8010d14:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	22ff      	movs	r2, #255	; 0xff
 8010d22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010d2c:	79fb      	ldrb	r3, [r7, #7]
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010d34:	b2da      	uxtb	r2, r3
 8010d36:	4b37      	ldr	r3, [pc, #220]	; (8010e14 <xPortStartScheduler+0x134>)
 8010d38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010d3a:	4b37      	ldr	r3, [pc, #220]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d3c:	2207      	movs	r2, #7
 8010d3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d40:	e009      	b.n	8010d56 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 8010d42:	4b35      	ldr	r3, [pc, #212]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	3b01      	subs	r3, #1
 8010d48:	4a33      	ldr	r2, [pc, #204]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010d4c:	79fb      	ldrb	r3, [r7, #7]
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	005b      	lsls	r3, r3, #1
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010d56:	79fb      	ldrb	r3, [r7, #7]
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d5e:	2b80      	cmp	r3, #128	; 0x80
 8010d60:	d0ef      	beq.n	8010d42 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8010d62:	4b2d      	ldr	r3, [pc, #180]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f1c3 0307 	rsb	r3, r3, #7
 8010d6a:	2b04      	cmp	r3, #4
 8010d6c:	d005      	beq.n	8010d7a <xPortStartScheduler+0x9a>
 8010d6e:	f240 1251 	movw	r2, #337	; 0x151
 8010d72:	4923      	ldr	r1, [pc, #140]	; (8010e00 <xPortStartScheduler+0x120>)
 8010d74:	4829      	ldr	r0, [pc, #164]	; (8010e1c <xPortStartScheduler+0x13c>)
 8010d76:	f7f1 ff47 	bl	8002c08 <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010d7a:	4b27      	ldr	r3, [pc, #156]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f1c3 0307 	rsb	r3, r3, #7
 8010d82:	2b04      	cmp	r3, #4
 8010d84:	d005      	beq.n	8010d92 <xPortStartScheduler+0xb2>
 8010d86:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8010d8a:	491d      	ldr	r1, [pc, #116]	; (8010e00 <xPortStartScheduler+0x120>)
 8010d8c:	4824      	ldr	r0, [pc, #144]	; (8010e20 <xPortStartScheduler+0x140>)
 8010d8e:	f7f1 ff3b 	bl	8002c08 <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010d92:	4b21      	ldr	r3, [pc, #132]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	021b      	lsls	r3, r3, #8
 8010d98:	4a1f      	ldr	r2, [pc, #124]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010d9c:	4b1e      	ldr	r3, [pc, #120]	; (8010e18 <xPortStartScheduler+0x138>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010da4:	4a1c      	ldr	r2, [pc, #112]	; (8010e18 <xPortStartScheduler+0x138>)
 8010da6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010db0:	4b1c      	ldr	r3, [pc, #112]	; (8010e24 <xPortStartScheduler+0x144>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a1b      	ldr	r2, [pc, #108]	; (8010e24 <xPortStartScheduler+0x144>)
 8010db6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010dba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010dbc:	4b19      	ldr	r3, [pc, #100]	; (8010e24 <xPortStartScheduler+0x144>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a18      	ldr	r2, [pc, #96]	; (8010e24 <xPortStartScheduler+0x144>)
 8010dc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010dc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010dc8:	f000 f8e0 	bl	8010f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010dcc:	4b16      	ldr	r3, [pc, #88]	; (8010e28 <xPortStartScheduler+0x148>)
 8010dce:	2200      	movs	r2, #0
 8010dd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010dd2:	f000 f8f9 	bl	8010fc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010dd6:	4b15      	ldr	r3, [pc, #84]	; (8010e2c <xPortStartScheduler+0x14c>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	4a14      	ldr	r2, [pc, #80]	; (8010e2c <xPortStartScheduler+0x14c>)
 8010ddc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010de0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010de2:	f7ff ff69 	bl	8010cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010de6:	f7fe fd07 	bl	800f7f8 <vTaskSwitchContext>
	prvTaskExitError();
 8010dea:	f7ff ff23 	bl	8010c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	e000ed00 	.word	0xe000ed00
 8010dfc:	410fc271 	.word	0x410fc271
 8010e00:	08016038 	.word	0x08016038
 8010e04:	0801609c 	.word	0x0801609c
 8010e08:	410fc270 	.word	0x410fc270
 8010e0c:	080160c0 	.word	0x080160c0
 8010e10:	e000e400 	.word	0xe000e400
 8010e14:	20004010 	.word	0x20004010
 8010e18:	20004014 	.word	0x20004014
 8010e1c:	080160e4 	.word	0x080160e4
 8010e20:	08016128 	.word	0x08016128
 8010e24:	e000ed20 	.word	0xe000ed20
 8010e28:	2000037c 	.word	0x2000037c
 8010e2c:	e000ef34 	.word	0xe000ef34

08010e30 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b082      	sub	sp, #8
 8010e34:	af00      	add	r7, sp, #0
	__asm volatile
 8010e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e3a:	f383 8811 	msr	BASEPRI, r3
 8010e3e:	f3bf 8f6f 	isb	sy
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	607b      	str	r3, [r7, #4]
}
 8010e48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010e4a:	4b0c      	ldr	r3, [pc, #48]	; (8010e7c <vPortEnterCritical+0x4c>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	3301      	adds	r3, #1
 8010e50:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <vPortEnterCritical+0x4c>)
 8010e52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010e54:	4b09      	ldr	r3, [pc, #36]	; (8010e7c <vPortEnterCritical+0x4c>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b01      	cmp	r3, #1
 8010e5a:	d10a      	bne.n	8010e72 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010e5c:	4b08      	ldr	r3, [pc, #32]	; (8010e80 <vPortEnterCritical+0x50>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d005      	beq.n	8010e72 <vPortEnterCritical+0x42>
 8010e66:	f240 129f 	movw	r2, #415	; 0x19f
 8010e6a:	4906      	ldr	r1, [pc, #24]	; (8010e84 <vPortEnterCritical+0x54>)
 8010e6c:	4806      	ldr	r0, [pc, #24]	; (8010e88 <vPortEnterCritical+0x58>)
 8010e6e:	f7f1 fecb 	bl	8002c08 <assertFail>
	}
}
 8010e72:	bf00      	nop
 8010e74:	3708      	adds	r7, #8
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	2000037c 	.word	0x2000037c
 8010e80:	e000ed04 	.word	0xe000ed04
 8010e84:	08016038 	.word	0x08016038
 8010e88:	08016188 	.word	0x08016188

08010e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010e92:	4b0e      	ldr	r3, [pc, #56]	; (8010ecc <vPortExitCritical+0x40>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d105      	bne.n	8010ea6 <vPortExitCritical+0x1a>
 8010e9a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8010e9e:	490c      	ldr	r1, [pc, #48]	; (8010ed0 <vPortExitCritical+0x44>)
 8010ea0:	480c      	ldr	r0, [pc, #48]	; (8010ed4 <vPortExitCritical+0x48>)
 8010ea2:	f7f1 feb1 	bl	8002c08 <assertFail>
	uxCriticalNesting--;
 8010ea6:	4b09      	ldr	r3, [pc, #36]	; (8010ecc <vPortExitCritical+0x40>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	4a07      	ldr	r2, [pc, #28]	; (8010ecc <vPortExitCritical+0x40>)
 8010eae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010eb0:	4b06      	ldr	r3, [pc, #24]	; (8010ecc <vPortExitCritical+0x40>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d105      	bne.n	8010ec4 <vPortExitCritical+0x38>
 8010eb8:	2300      	movs	r3, #0
 8010eba:	607b      	str	r3, [r7, #4]
	__asm volatile
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f383 8811 	msr	BASEPRI, r3
}
 8010ec2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}
 8010ecc:	2000037c 	.word	0x2000037c
 8010ed0:	08016038 	.word	0x08016038
 8010ed4:	080161c0 	.word	0x080161c0
	...

08010ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ee0:	f3ef 8009 	mrs	r0, PSP
 8010ee4:	f3bf 8f6f 	isb	sy
 8010ee8:	4b15      	ldr	r3, [pc, #84]	; (8010f40 <pxCurrentTCBConst>)
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	f01e 0f10 	tst.w	lr, #16
 8010ef0:	bf08      	it	eq
 8010ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010efa:	6010      	str	r0, [r2, #0]
 8010efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010f04:	f380 8811 	msr	BASEPRI, r0
 8010f08:	f3bf 8f4f 	dsb	sy
 8010f0c:	f3bf 8f6f 	isb	sy
 8010f10:	f7fe fc72 	bl	800f7f8 <vTaskSwitchContext>
 8010f14:	f04f 0000 	mov.w	r0, #0
 8010f18:	f380 8811 	msr	BASEPRI, r0
 8010f1c:	bc09      	pop	{r0, r3}
 8010f1e:	6819      	ldr	r1, [r3, #0]
 8010f20:	6808      	ldr	r0, [r1, #0]
 8010f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f26:	f01e 0f10 	tst.w	lr, #16
 8010f2a:	bf08      	it	eq
 8010f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010f30:	f380 8809 	msr	PSP, r0
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop
 8010f3c:	f3af 8000 	nop.w

08010f40 <pxCurrentTCBConst>:
 8010f40:	20003c08 	.word	0x20003c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010f44:	bf00      	nop
 8010f46:	bf00      	nop

08010f48 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	607b      	str	r3, [r7, #4]
}
 8010f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010f62:	f7fe fb6f 	bl	800f644 <xTaskIncrementTick>
 8010f66:	4603      	mov	r3, r0
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d003      	beq.n	8010f74 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010f6c:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <tickFreeRTOS+0x40>)
 8010f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	2300      	movs	r3, #0
 8010f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	f383 8811 	msr	BASEPRI, r3
}
 8010f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010f80:	bf00      	nop
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	e000ed04 	.word	0xe000ed04

08010f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010f90:	4b09      	ldr	r3, [pc, #36]	; (8010fb8 <vPortSetupTimerInterrupt+0x2c>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010f96:	4b09      	ldr	r3, [pc, #36]	; (8010fbc <vPortSetupTimerInterrupt+0x30>)
 8010f98:	2200      	movs	r2, #0
 8010f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010f9c:	4b08      	ldr	r3, [pc, #32]	; (8010fc0 <vPortSetupTimerInterrupt+0x34>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a08      	ldr	r2, [pc, #32]	; (8010fc4 <vPortSetupTimerInterrupt+0x38>)
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010fa6:	4b04      	ldr	r3, [pc, #16]	; (8010fb8 <vPortSetupTimerInterrupt+0x2c>)
 8010fa8:	2207      	movs	r2, #7
 8010faa:	601a      	str	r2, [r3, #0]
}
 8010fac:	bf00      	nop
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb4:	4770      	bx	lr
 8010fb6:	bf00      	nop
 8010fb8:	e000e010 	.word	0xe000e010
 8010fbc:	e000e018 	.word	0xe000e018
 8010fc0:	200002e4 	.word	0x200002e4
 8010fc4:	e000e014 	.word	0xe000e014

08010fc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010fc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010fd8 <vPortEnableVFP+0x10>
 8010fcc:	6801      	ldr	r1, [r0, #0]
 8010fce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010fd2:	6001      	str	r1, [r0, #0]
 8010fd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010fd6:	bf00      	nop
 8010fd8:	e000ed88 	.word	0xe000ed88

08010fdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010fe2:	f3ef 8305 	mrs	r3, IPSR
 8010fe6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b0f      	cmp	r3, #15
 8010fec:	d90f      	bls.n	801100e <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010fee:	4a11      	ldr	r2, [pc, #68]	; (8011034 <vPortValidateInterruptPriority+0x58>)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ff8:	4b0f      	ldr	r3, [pc, #60]	; (8011038 <vPortValidateInterruptPriority+0x5c>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	78fa      	ldrb	r2, [r7, #3]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d205      	bcs.n	801100e <vPortValidateInterruptPriority+0x32>
 8011002:	f240 22f2 	movw	r2, #754	; 0x2f2
 8011006:	490d      	ldr	r1, [pc, #52]	; (801103c <vPortValidateInterruptPriority+0x60>)
 8011008:	480d      	ldr	r0, [pc, #52]	; (8011040 <vPortValidateInterruptPriority+0x64>)
 801100a:	f7f1 fdfd 	bl	8002c08 <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801100e:	4b0d      	ldr	r3, [pc, #52]	; (8011044 <vPortValidateInterruptPriority+0x68>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011016:	4b0c      	ldr	r3, [pc, #48]	; (8011048 <vPortValidateInterruptPriority+0x6c>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	429a      	cmp	r2, r3
 801101c:	d905      	bls.n	801102a <vPortValidateInterruptPriority+0x4e>
 801101e:	f240 3202 	movw	r2, #770	; 0x302
 8011022:	4906      	ldr	r1, [pc, #24]	; (801103c <vPortValidateInterruptPriority+0x60>)
 8011024:	4809      	ldr	r0, [pc, #36]	; (801104c <vPortValidateInterruptPriority+0x70>)
 8011026:	f7f1 fdef 	bl	8002c08 <assertFail>
	}
 801102a:	bf00      	nop
 801102c:	3708      	adds	r7, #8
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	e000e3f0 	.word	0xe000e3f0
 8011038:	20004010 	.word	0x20004010
 801103c:	08016038 	.word	0x08016038
 8011040:	080161d4 	.word	0x080161d4
 8011044:	e000ed0c 	.word	0xe000ed0c
 8011048:	20004014 	.word	0x20004014
 801104c:	08016200 	.word	0x08016200

08011050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011058:	2300      	movs	r3, #0
 801105a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801105c:	f7fe f9a8 	bl	800f3b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011060:	4b52      	ldr	r3, [pc, #328]	; (80111ac <pvPortMalloc+0x15c>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d101      	bne.n	801106c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011068:	f000 f912 	bl	8011290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801106c:	4b50      	ldr	r3, [pc, #320]	; (80111b0 <pvPortMalloc+0x160>)
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4013      	ands	r3, r2
 8011074:	2b00      	cmp	r3, #0
 8011076:	f040 8087 	bne.w	8011188 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d017      	beq.n	80110b0 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 8011080:	2208      	movs	r2, #8
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4413      	add	r3, r2
 8011086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f003 0307 	and.w	r3, r3, #7
 801108e:	2b00      	cmp	r3, #0
 8011090:	d00e      	beq.n	80110b0 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f023 0307 	bic.w	r3, r3, #7
 8011098:	3308      	adds	r3, #8
 801109a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f003 0307 	and.w	r3, r3, #7
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d004      	beq.n	80110b0 <pvPortMalloc+0x60>
 80110a6:	2297      	movs	r2, #151	; 0x97
 80110a8:	4942      	ldr	r1, [pc, #264]	; (80111b4 <pvPortMalloc+0x164>)
 80110aa:	4843      	ldr	r0, [pc, #268]	; (80111b8 <pvPortMalloc+0x168>)
 80110ac:	f7f1 fdac 	bl	8002c08 <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d068      	beq.n	8011188 <pvPortMalloc+0x138>
 80110b6:	4b41      	ldr	r3, [pc, #260]	; (80111bc <pvPortMalloc+0x16c>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d863      	bhi.n	8011188 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80110c0:	4b3f      	ldr	r3, [pc, #252]	; (80111c0 <pvPortMalloc+0x170>)
 80110c2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80110c4:	4b3e      	ldr	r3, [pc, #248]	; (80111c0 <pvPortMalloc+0x170>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110ca:	e004      	b.n	80110d6 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d903      	bls.n	80110e8 <pvPortMalloc+0x98>
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d1f1      	bne.n	80110cc <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80110e8:	4b30      	ldr	r3, [pc, #192]	; (80111ac <pvPortMalloc+0x15c>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	697a      	ldr	r2, [r7, #20]
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d04a      	beq.n	8011188 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	2208      	movs	r2, #8
 80110f8:	4413      	add	r3, r2
 80110fa:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	685a      	ldr	r2, [r3, #4]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	1ad2      	subs	r2, r2, r3
 801110c:	2308      	movs	r3, #8
 801110e:	005b      	lsls	r3, r3, #1
 8011110:	429a      	cmp	r2, r3
 8011112:	d919      	bls.n	8011148 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011114:	697a      	ldr	r2, [r7, #20]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4413      	add	r3, r2
 801111a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	f003 0307 	and.w	r3, r3, #7
 8011122:	2b00      	cmp	r3, #0
 8011124:	d004      	beq.n	8011130 <pvPortMalloc+0xe0>
 8011126:	22c4      	movs	r2, #196	; 0xc4
 8011128:	4922      	ldr	r1, [pc, #136]	; (80111b4 <pvPortMalloc+0x164>)
 801112a:	4826      	ldr	r0, [pc, #152]	; (80111c4 <pvPortMalloc+0x174>)
 801112c:	f7f1 fd6c 	bl	8002c08 <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	685a      	ldr	r2, [r3, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	1ad2      	subs	r2, r2, r3
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011142:	68b8      	ldr	r0, [r7, #8]
 8011144:	f000 f906 	bl	8011354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011148:	4b1c      	ldr	r3, [pc, #112]	; (80111bc <pvPortMalloc+0x16c>)
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	4a1a      	ldr	r2, [pc, #104]	; (80111bc <pvPortMalloc+0x16c>)
 8011154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011156:	4b19      	ldr	r3, [pc, #100]	; (80111bc <pvPortMalloc+0x16c>)
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	4b1b      	ldr	r3, [pc, #108]	; (80111c8 <pvPortMalloc+0x178>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	d203      	bcs.n	801116a <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011162:	4b16      	ldr	r3, [pc, #88]	; (80111bc <pvPortMalloc+0x16c>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	4a18      	ldr	r2, [pc, #96]	; (80111c8 <pvPortMalloc+0x178>)
 8011168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	685a      	ldr	r2, [r3, #4]
 801116e:	4b10      	ldr	r3, [pc, #64]	; (80111b0 <pvPortMalloc+0x160>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	431a      	orrs	r2, r3
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	2200      	movs	r2, #0
 801117c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801117e:	4b13      	ldr	r3, [pc, #76]	; (80111cc <pvPortMalloc+0x17c>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3301      	adds	r3, #1
 8011184:	4a11      	ldr	r2, [pc, #68]	; (80111cc <pvPortMalloc+0x17c>)
 8011186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011188:	f7fe f920 	bl	800f3cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f003 0307 	and.w	r3, r3, #7
 8011192:	2b00      	cmp	r3, #0
 8011194:	d005      	beq.n	80111a2 <pvPortMalloc+0x152>
 8011196:	f240 1205 	movw	r2, #261	; 0x105
 801119a:	4906      	ldr	r1, [pc, #24]	; (80111b4 <pvPortMalloc+0x164>)
 801119c:	480c      	ldr	r0, [pc, #48]	; (80111d0 <pvPortMalloc+0x180>)
 801119e:	f7f1 fd33 	bl	8002c08 <assertFail>
	return pvReturn;
 80111a2:	68fb      	ldr	r3, [r7, #12]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3718      	adds	r7, #24
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	20007c20 	.word	0x20007c20
 80111b0:	20007c34 	.word	0x20007c34
 80111b4:	08016244 	.word	0x08016244
 80111b8:	0801628c 	.word	0x0801628c
 80111bc:	20007c24 	.word	0x20007c24
 80111c0:	20007c18 	.word	0x20007c18
 80111c4:	080162bc 	.word	0x080162bc
 80111c8:	20007c28 	.word	0x20007c28
 80111cc:	20007c2c 	.word	0x20007c2c
 80111d0:	08016300 	.word	0x08016300

080111d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d043      	beq.n	801126e <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80111e6:	2308      	movs	r3, #8
 80111e8:	425b      	negs	r3, r3
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	4413      	add	r3, r2
 80111ee:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	685a      	ldr	r2, [r3, #4]
 80111f8:	4b1f      	ldr	r3, [pc, #124]	; (8011278 <vPortFree+0xa4>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	4013      	ands	r3, r2
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d105      	bne.n	801120e <vPortFree+0x3a>
 8011202:	f240 1219 	movw	r2, #281	; 0x119
 8011206:	491d      	ldr	r1, [pc, #116]	; (801127c <vPortFree+0xa8>)
 8011208:	481d      	ldr	r0, [pc, #116]	; (8011280 <vPortFree+0xac>)
 801120a:	f7f1 fcfd 	bl	8002c08 <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d005      	beq.n	8011222 <vPortFree+0x4e>
 8011216:	f44f 728d 	mov.w	r2, #282	; 0x11a
 801121a:	4918      	ldr	r1, [pc, #96]	; (801127c <vPortFree+0xa8>)
 801121c:	4819      	ldr	r0, [pc, #100]	; (8011284 <vPortFree+0xb0>)
 801121e:	f7f1 fcf3 	bl	8002c08 <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	685a      	ldr	r2, [r3, #4]
 8011226:	4b14      	ldr	r3, [pc, #80]	; (8011278 <vPortFree+0xa4>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	4013      	ands	r3, r2
 801122c:	2b00      	cmp	r3, #0
 801122e:	d01e      	beq.n	801126e <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d11a      	bne.n	801126e <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	685a      	ldr	r2, [r3, #4]
 801123c:	4b0e      	ldr	r3, [pc, #56]	; (8011278 <vPortFree+0xa4>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	43db      	mvns	r3, r3
 8011242:	401a      	ands	r2, r3
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011248:	f7fe f8b2 	bl	800f3b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	685a      	ldr	r2, [r3, #4]
 8011250:	4b0d      	ldr	r3, [pc, #52]	; (8011288 <vPortFree+0xb4>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4413      	add	r3, r2
 8011256:	4a0c      	ldr	r2, [pc, #48]	; (8011288 <vPortFree+0xb4>)
 8011258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801125a:	68b8      	ldr	r0, [r7, #8]
 801125c:	f000 f87a 	bl	8011354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011260:	4b0a      	ldr	r3, [pc, #40]	; (801128c <vPortFree+0xb8>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	3301      	adds	r3, #1
 8011266:	4a09      	ldr	r2, [pc, #36]	; (801128c <vPortFree+0xb8>)
 8011268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801126a:	f7fe f8af 	bl	800f3cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801126e:	bf00      	nop
 8011270:	3710      	adds	r7, #16
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	20007c34 	.word	0x20007c34
 801127c:	08016244 	.word	0x08016244
 8011280:	08016348 	.word	0x08016348
 8011284:	0801637c 	.word	0x0801637c
 8011288:	20007c24 	.word	0x20007c24
 801128c:	20007c30 	.word	0x20007c30

08011290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011296:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801129a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801129c:	4b27      	ldr	r3, [pc, #156]	; (801133c <prvHeapInit+0xac>)
 801129e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f003 0307 	and.w	r3, r3, #7
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00c      	beq.n	80112c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	3307      	adds	r3, #7
 80112ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f023 0307 	bic.w	r3, r3, #7
 80112b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80112b8:	68ba      	ldr	r2, [r7, #8]
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	4a1f      	ldr	r2, [pc, #124]	; (801133c <prvHeapInit+0xac>)
 80112c0:	4413      	add	r3, r2
 80112c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80112c8:	4a1d      	ldr	r2, [pc, #116]	; (8011340 <prvHeapInit+0xb0>)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80112ce:	4b1c      	ldr	r3, [pc, #112]	; (8011340 <prvHeapInit+0xb0>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	4413      	add	r3, r2
 80112da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80112dc:	2208      	movs	r2, #8
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	1a9b      	subs	r3, r3, r2
 80112e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	f023 0307 	bic.w	r3, r3, #7
 80112ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	4a15      	ldr	r2, [pc, #84]	; (8011344 <prvHeapInit+0xb4>)
 80112f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80112f2:	4b14      	ldr	r3, [pc, #80]	; (8011344 <prvHeapInit+0xb4>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2200      	movs	r2, #0
 80112f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80112fa:	4b12      	ldr	r3, [pc, #72]	; (8011344 <prvHeapInit+0xb4>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	2200      	movs	r2, #0
 8011300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	68fa      	ldr	r2, [r7, #12]
 801130a:	1ad2      	subs	r2, r2, r3
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011310:	4b0c      	ldr	r3, [pc, #48]	; (8011344 <prvHeapInit+0xb4>)
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	4a0a      	ldr	r2, [pc, #40]	; (8011348 <prvHeapInit+0xb8>)
 801131e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	4a09      	ldr	r2, [pc, #36]	; (801134c <prvHeapInit+0xbc>)
 8011326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011328:	4b09      	ldr	r3, [pc, #36]	; (8011350 <prvHeapInit+0xc0>)
 801132a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801132e:	601a      	str	r2, [r3, #0]
}
 8011330:	bf00      	nop
 8011332:	3714      	adds	r7, #20
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr
 801133c:	20004018 	.word	0x20004018
 8011340:	20007c18 	.word	0x20007c18
 8011344:	20007c20 	.word	0x20007c20
 8011348:	20007c28 	.word	0x20007c28
 801134c:	20007c24 	.word	0x20007c24
 8011350:	20007c34 	.word	0x20007c34

08011354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801135c:	4b28      	ldr	r3, [pc, #160]	; (8011400 <prvInsertBlockIntoFreeList+0xac>)
 801135e:	60fb      	str	r3, [r7, #12]
 8011360:	e002      	b.n	8011368 <prvInsertBlockIntoFreeList+0x14>
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	60fb      	str	r3, [r7, #12]
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	429a      	cmp	r2, r3
 8011370:	d8f7      	bhi.n	8011362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	4413      	add	r3, r2
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	429a      	cmp	r2, r3
 8011382:	d108      	bne.n	8011396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	685a      	ldr	r2, [r3, #4]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	441a      	add	r2, r3
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	68ba      	ldr	r2, [r7, #8]
 80113a0:	441a      	add	r2, r3
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	429a      	cmp	r2, r3
 80113a8:	d118      	bne.n	80113dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	4b15      	ldr	r3, [pc, #84]	; (8011404 <prvInsertBlockIntoFreeList+0xb0>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d00d      	beq.n	80113d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	685a      	ldr	r2, [r3, #4]
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	441a      	add	r2, r3
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	601a      	str	r2, [r3, #0]
 80113d0:	e008      	b.n	80113e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80113d2:	4b0c      	ldr	r3, [pc, #48]	; (8011404 <prvInsertBlockIntoFreeList+0xb0>)
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	601a      	str	r2, [r3, #0]
 80113da:	e003      	b.n	80113e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681a      	ldr	r2, [r3, #0]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80113e4:	68fa      	ldr	r2, [r7, #12]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d002      	beq.n	80113f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113f2:	bf00      	nop
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	20007c18 	.word	0x20007c18
 8011404:	20007c20 	.word	0x20007c20

08011408 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801140c:	2200      	movs	r2, #0
 801140e:	4912      	ldr	r1, [pc, #72]	; (8011458 <MX_USB_DEVICE_Init+0x50>)
 8011410:	4812      	ldr	r0, [pc, #72]	; (801145c <MX_USB_DEVICE_Init+0x54>)
 8011412:	f7fb f933 	bl	800c67c <USBD_Init>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d001      	beq.n	8011420 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801141c:	f7f3 f8a0 	bl	8004560 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011420:	490f      	ldr	r1, [pc, #60]	; (8011460 <MX_USB_DEVICE_Init+0x58>)
 8011422:	480e      	ldr	r0, [pc, #56]	; (801145c <MX_USB_DEVICE_Init+0x54>)
 8011424:	f7fb f95a 	bl	800c6dc <USBD_RegisterClass>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d001      	beq.n	8011432 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801142e:	f7f3 f897 	bl	8004560 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011432:	490c      	ldr	r1, [pc, #48]	; (8011464 <MX_USB_DEVICE_Init+0x5c>)
 8011434:	4809      	ldr	r0, [pc, #36]	; (801145c <MX_USB_DEVICE_Init+0x54>)
 8011436:	f7fb f891 	bl	800c55c <USBD_CDC_RegisterInterface>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011440:	f7f3 f88e 	bl	8004560 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011444:	4805      	ldr	r0, [pc, #20]	; (801145c <MX_USB_DEVICE_Init+0x54>)
 8011446:	f7fb f97f 	bl	800c748 <USBD_Start>
 801144a:	4603      	mov	r3, r0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011450:	f7f3 f886 	bl	8004560 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011454:	bf00      	nop
 8011456:	bd80      	pop	{r7, pc}
 8011458:	20000394 	.word	0x20000394
 801145c:	20007c38 	.word	0x20007c38
 8011460:	200002fc 	.word	0x200002fc
 8011464:	20000380 	.word	0x20000380

08011468 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801146c:	2200      	movs	r2, #0
 801146e:	4905      	ldr	r1, [pc, #20]	; (8011484 <CDC_Init_FS+0x1c>)
 8011470:	4805      	ldr	r0, [pc, #20]	; (8011488 <CDC_Init_FS+0x20>)
 8011472:	f7fb f88d 	bl	800c590 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011476:	4905      	ldr	r1, [pc, #20]	; (801148c <CDC_Init_FS+0x24>)
 8011478:	4803      	ldr	r0, [pc, #12]	; (8011488 <CDC_Init_FS+0x20>)
 801147a:	f7fb f8ab 	bl	800c5d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801147e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011480:	4618      	mov	r0, r3
 8011482:	bd80      	pop	{r7, pc}
 8011484:	20008714 	.word	0x20008714
 8011488:	20007c38 	.word	0x20007c38
 801148c:	20007f14 	.word	0x20007f14

08011490 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011490:	b480      	push	{r7}
 8011492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011494:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011496:	4618      	mov	r0, r3
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	6039      	str	r1, [r7, #0]
 80114aa:	71fb      	strb	r3, [r7, #7]
 80114ac:	4613      	mov	r3, r2
 80114ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80114b0:	79fb      	ldrb	r3, [r7, #7]
 80114b2:	2b23      	cmp	r3, #35	; 0x23
 80114b4:	d84a      	bhi.n	801154c <CDC_Control_FS+0xac>
 80114b6:	a201      	add	r2, pc, #4	; (adr r2, 80114bc <CDC_Control_FS+0x1c>)
 80114b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114bc:	0801154d 	.word	0x0801154d
 80114c0:	0801154d 	.word	0x0801154d
 80114c4:	0801154d 	.word	0x0801154d
 80114c8:	0801154d 	.word	0x0801154d
 80114cc:	0801154d 	.word	0x0801154d
 80114d0:	0801154d 	.word	0x0801154d
 80114d4:	0801154d 	.word	0x0801154d
 80114d8:	0801154d 	.word	0x0801154d
 80114dc:	0801154d 	.word	0x0801154d
 80114e0:	0801154d 	.word	0x0801154d
 80114e4:	0801154d 	.word	0x0801154d
 80114e8:	0801154d 	.word	0x0801154d
 80114ec:	0801154d 	.word	0x0801154d
 80114f0:	0801154d 	.word	0x0801154d
 80114f4:	0801154d 	.word	0x0801154d
 80114f8:	0801154d 	.word	0x0801154d
 80114fc:	0801154d 	.word	0x0801154d
 8011500:	0801154d 	.word	0x0801154d
 8011504:	0801154d 	.word	0x0801154d
 8011508:	0801154d 	.word	0x0801154d
 801150c:	0801154d 	.word	0x0801154d
 8011510:	0801154d 	.word	0x0801154d
 8011514:	0801154d 	.word	0x0801154d
 8011518:	0801154d 	.word	0x0801154d
 801151c:	0801154d 	.word	0x0801154d
 8011520:	0801154d 	.word	0x0801154d
 8011524:	0801154d 	.word	0x0801154d
 8011528:	0801154d 	.word	0x0801154d
 801152c:	0801154d 	.word	0x0801154d
 8011530:	0801154d 	.word	0x0801154d
 8011534:	0801154d 	.word	0x0801154d
 8011538:	0801154d 	.word	0x0801154d
 801153c:	0801154d 	.word	0x0801154d
 8011540:	0801154d 	.word	0x0801154d
 8011544:	0801154d 	.word	0x0801154d
 8011548:	0801154d 	.word	0x0801154d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801154c:	bf00      	nop
  }

  return (USBD_OK);
 801154e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011550:	4618      	mov	r0, r3
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
 8011564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011566:	6879      	ldr	r1, [r7, #4]
 8011568:	4805      	ldr	r0, [pc, #20]	; (8011580 <CDC_Receive_FS+0x24>)
 801156a:	f7fb f833 	bl	800c5d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801156e:	4804      	ldr	r0, [pc, #16]	; (8011580 <CDC_Receive_FS+0x24>)
 8011570:	f7fb f84e 	bl	800c610 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011574:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011576:	4618      	mov	r0, r3
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	20007c38 	.word	0x20007c38

08011584 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011584:	b480      	push	{r7}
 8011586:	b087      	sub	sp, #28
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	4613      	mov	r3, r2
 8011590:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011592:	2300      	movs	r3, #0
 8011594:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801159a:	4618      	mov	r0, r3
 801159c:	371c      	adds	r7, #28
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
	...

080115a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b083      	sub	sp, #12
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	4603      	mov	r3, r0
 80115b0:	6039      	str	r1, [r7, #0]
 80115b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	2212      	movs	r2, #18
 80115b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80115ba:	4b03      	ldr	r3, [pc, #12]	; (80115c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80115bc:	4618      	mov	r0, r3
 80115be:	370c      	adds	r7, #12
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr
 80115c8:	200003b0 	.word	0x200003b0

080115cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	6039      	str	r1, [r7, #0]
 80115d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	2204      	movs	r2, #4
 80115dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80115de:	4b03      	ldr	r3, [pc, #12]	; (80115ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	370c      	adds	r7, #12
 80115e4:	46bd      	mov	sp, r7
 80115e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ea:	4770      	bx	lr
 80115ec:	200003c4 	.word	0x200003c4

080115f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b082      	sub	sp, #8
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	4603      	mov	r3, r0
 80115f8:	6039      	str	r1, [r7, #0]
 80115fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80115fc:	79fb      	ldrb	r3, [r7, #7]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d105      	bne.n	801160e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011602:	683a      	ldr	r2, [r7, #0]
 8011604:	4907      	ldr	r1, [pc, #28]	; (8011624 <USBD_FS_ProductStrDescriptor+0x34>)
 8011606:	4808      	ldr	r0, [pc, #32]	; (8011628 <USBD_FS_ProductStrDescriptor+0x38>)
 8011608:	f7fc fa50 	bl	800daac <USBD_GetString>
 801160c:	e004      	b.n	8011618 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801160e:	683a      	ldr	r2, [r7, #0]
 8011610:	4904      	ldr	r1, [pc, #16]	; (8011624 <USBD_FS_ProductStrDescriptor+0x34>)
 8011612:	4805      	ldr	r0, [pc, #20]	; (8011628 <USBD_FS_ProductStrDescriptor+0x38>)
 8011614:	f7fc fa4a 	bl	800daac <USBD_GetString>
  }
  return USBD_StrDesc;
 8011618:	4b02      	ldr	r3, [pc, #8]	; (8011624 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801161a:	4618      	mov	r0, r3
 801161c:	3708      	adds	r7, #8
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
 8011622:	bf00      	nop
 8011624:	20008f14 	.word	0x20008f14
 8011628:	0801639c 	.word	0x0801639c

0801162c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	4603      	mov	r3, r0
 8011634:	6039      	str	r1, [r7, #0]
 8011636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011638:	683a      	ldr	r2, [r7, #0]
 801163a:	4904      	ldr	r1, [pc, #16]	; (801164c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801163c:	4804      	ldr	r0, [pc, #16]	; (8011650 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801163e:	f7fc fa35 	bl	800daac <USBD_GetString>
  return USBD_StrDesc;
 8011642:	4b02      	ldr	r3, [pc, #8]	; (801164c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011644:	4618      	mov	r0, r3
 8011646:	3708      	adds	r7, #8
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	20008f14 	.word	0x20008f14
 8011650:	080163b4 	.word	0x080163b4

08011654 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	4603      	mov	r3, r0
 801165c:	6039      	str	r1, [r7, #0]
 801165e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	221a      	movs	r2, #26
 8011664:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011666:	f000 f843 	bl	80116f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801166a:	4b02      	ldr	r3, [pc, #8]	; (8011674 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801166c:	4618      	mov	r0, r3
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}
 8011674:	200003c8 	.word	0x200003c8

08011678 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	4603      	mov	r3, r0
 8011680:	6039      	str	r1, [r7, #0]
 8011682:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011684:	79fb      	ldrb	r3, [r7, #7]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d105      	bne.n	8011696 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801168a:	683a      	ldr	r2, [r7, #0]
 801168c:	4907      	ldr	r1, [pc, #28]	; (80116ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801168e:	4808      	ldr	r0, [pc, #32]	; (80116b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011690:	f7fc fa0c 	bl	800daac <USBD_GetString>
 8011694:	e004      	b.n	80116a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011696:	683a      	ldr	r2, [r7, #0]
 8011698:	4904      	ldr	r1, [pc, #16]	; (80116ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801169a:	4805      	ldr	r0, [pc, #20]	; (80116b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801169c:	f7fc fa06 	bl	800daac <USBD_GetString>
  }
  return USBD_StrDesc;
 80116a0:	4b02      	ldr	r3, [pc, #8]	; (80116ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	20008f14 	.word	0x20008f14
 80116b0:	080163c8 	.word	0x080163c8

080116b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	4603      	mov	r3, r0
 80116bc:	6039      	str	r1, [r7, #0]
 80116be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116c0:	79fb      	ldrb	r3, [r7, #7]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d105      	bne.n	80116d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80116c6:	683a      	ldr	r2, [r7, #0]
 80116c8:	4907      	ldr	r1, [pc, #28]	; (80116e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80116ca:	4808      	ldr	r0, [pc, #32]	; (80116ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80116cc:	f7fc f9ee 	bl	800daac <USBD_GetString>
 80116d0:	e004      	b.n	80116dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	4904      	ldr	r1, [pc, #16]	; (80116e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80116d6:	4805      	ldr	r0, [pc, #20]	; (80116ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80116d8:	f7fc f9e8 	bl	800daac <USBD_GetString>
  }
  return USBD_StrDesc;
 80116dc:	4b02      	ldr	r3, [pc, #8]	; (80116e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	20008f14 	.word	0x20008f14
 80116ec:	080163d4 	.word	0x080163d4

080116f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80116f6:	4b0f      	ldr	r3, [pc, #60]	; (8011734 <Get_SerialNum+0x44>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80116fc:	4b0e      	ldr	r3, [pc, #56]	; (8011738 <Get_SerialNum+0x48>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011702:	4b0e      	ldr	r3, [pc, #56]	; (801173c <Get_SerialNum+0x4c>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4413      	add	r3, r2
 801170e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d009      	beq.n	801172a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011716:	2208      	movs	r2, #8
 8011718:	4909      	ldr	r1, [pc, #36]	; (8011740 <Get_SerialNum+0x50>)
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f000 f814 	bl	8011748 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011720:	2204      	movs	r2, #4
 8011722:	4908      	ldr	r1, [pc, #32]	; (8011744 <Get_SerialNum+0x54>)
 8011724:	68b8      	ldr	r0, [r7, #8]
 8011726:	f000 f80f 	bl	8011748 <IntToUnicode>
  }
}
 801172a:	bf00      	nop
 801172c:	3710      	adds	r7, #16
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	1fff7a10 	.word	0x1fff7a10
 8011738:	1fff7a14 	.word	0x1fff7a14
 801173c:	1fff7a18 	.word	0x1fff7a18
 8011740:	200003ca 	.word	0x200003ca
 8011744:	200003da 	.word	0x200003da

08011748 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011748:	b480      	push	{r7}
 801174a:	b087      	sub	sp, #28
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	4613      	mov	r3, r2
 8011754:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011756:	2300      	movs	r3, #0
 8011758:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801175a:	2300      	movs	r3, #0
 801175c:	75fb      	strb	r3, [r7, #23]
 801175e:	e027      	b.n	80117b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	0f1b      	lsrs	r3, r3, #28
 8011764:	2b09      	cmp	r3, #9
 8011766:	d80b      	bhi.n	8011780 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	0f1b      	lsrs	r3, r3, #28
 801176c:	b2da      	uxtb	r2, r3
 801176e:	7dfb      	ldrb	r3, [r7, #23]
 8011770:	005b      	lsls	r3, r3, #1
 8011772:	4619      	mov	r1, r3
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	440b      	add	r3, r1
 8011778:	3230      	adds	r2, #48	; 0x30
 801177a:	b2d2      	uxtb	r2, r2
 801177c:	701a      	strb	r2, [r3, #0]
 801177e:	e00a      	b.n	8011796 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	0f1b      	lsrs	r3, r3, #28
 8011784:	b2da      	uxtb	r2, r3
 8011786:	7dfb      	ldrb	r3, [r7, #23]
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4619      	mov	r1, r3
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	440b      	add	r3, r1
 8011790:	3237      	adds	r2, #55	; 0x37
 8011792:	b2d2      	uxtb	r2, r2
 8011794:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	011b      	lsls	r3, r3, #4
 801179a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801179c:	7dfb      	ldrb	r3, [r7, #23]
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	3301      	adds	r3, #1
 80117a2:	68ba      	ldr	r2, [r7, #8]
 80117a4:	4413      	add	r3, r2
 80117a6:	2200      	movs	r2, #0
 80117a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	3301      	adds	r3, #1
 80117ae:	75fb      	strb	r3, [r7, #23]
 80117b0:	7dfa      	ldrb	r2, [r7, #23]
 80117b2:	79fb      	ldrb	r3, [r7, #7]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d3d3      	bcc.n	8011760 <IntToUnicode+0x18>
  }
}
 80117b8:	bf00      	nop
 80117ba:	bf00      	nop
 80117bc:	371c      	adds	r7, #28
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
	...

080117c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b08a      	sub	sp, #40	; 0x28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117d0:	f107 0314 	add.w	r3, r7, #20
 80117d4:	2200      	movs	r2, #0
 80117d6:	601a      	str	r2, [r3, #0]
 80117d8:	605a      	str	r2, [r3, #4]
 80117da:	609a      	str	r2, [r3, #8]
 80117dc:	60da      	str	r2, [r3, #12]
 80117de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117e8:	d13a      	bne.n	8011860 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117ea:	2300      	movs	r3, #0
 80117ec:	613b      	str	r3, [r7, #16]
 80117ee:	4b1e      	ldr	r3, [pc, #120]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 80117f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117f2:	4a1d      	ldr	r2, [pc, #116]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 80117f4:	f043 0301 	orr.w	r3, r3, #1
 80117f8:	6313      	str	r3, [r2, #48]	; 0x30
 80117fa:	4b1b      	ldr	r3, [pc, #108]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 80117fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117fe:	f003 0301 	and.w	r3, r3, #1
 8011802:	613b      	str	r3, [r7, #16]
 8011804:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011806:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801180c:	2302      	movs	r3, #2
 801180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011810:	2300      	movs	r3, #0
 8011812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011814:	2303      	movs	r3, #3
 8011816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011818:	230a      	movs	r3, #10
 801181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801181c:	f107 0314 	add.w	r3, r7, #20
 8011820:	4619      	mov	r1, r3
 8011822:	4812      	ldr	r0, [pc, #72]	; (801186c <HAL_PCD_MspInit+0xa4>)
 8011824:	f7f4 fc82 	bl	800612c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011828:	4b0f      	ldr	r3, [pc, #60]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 801182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801182c:	4a0e      	ldr	r2, [pc, #56]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 801182e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011832:	6353      	str	r3, [r2, #52]	; 0x34
 8011834:	2300      	movs	r3, #0
 8011836:	60fb      	str	r3, [r7, #12]
 8011838:	4b0b      	ldr	r3, [pc, #44]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 801183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801183c:	4a0a      	ldr	r2, [pc, #40]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 801183e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011842:	6453      	str	r3, [r2, #68]	; 0x44
 8011844:	4b08      	ldr	r3, [pc, #32]	; (8011868 <HAL_PCD_MspInit+0xa0>)
 8011846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801184c:	60fb      	str	r3, [r7, #12]
 801184e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011850:	2200      	movs	r2, #0
 8011852:	2105      	movs	r1, #5
 8011854:	2043      	movs	r0, #67	; 0x43
 8011856:	f7f4 f830 	bl	80058ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801185a:	2043      	movs	r0, #67	; 0x43
 801185c:	f7f4 f849 	bl	80058f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011860:	bf00      	nop
 8011862:	3728      	adds	r7, #40	; 0x28
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	40023800 	.word	0x40023800
 801186c:	40020000 	.word	0x40020000

08011870 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f7fa ffab 	bl	800c7e2 <USBD_LL_SetupStage>
}
 801188c:	bf00      	nop
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b082      	sub	sp, #8
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	460b      	mov	r3, r1
 801189e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80118a6:	78fa      	ldrb	r2, [r7, #3]
 80118a8:	6879      	ldr	r1, [r7, #4]
 80118aa:	4613      	mov	r3, r2
 80118ac:	00db      	lsls	r3, r3, #3
 80118ae:	4413      	add	r3, r2
 80118b0:	009b      	lsls	r3, r3, #2
 80118b2:	440b      	add	r3, r1
 80118b4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	78fb      	ldrb	r3, [r7, #3]
 80118bc:	4619      	mov	r1, r3
 80118be:	f7fa ffe5 	bl	800c88c <USBD_LL_DataOutStage>
}
 80118c2:	bf00      	nop
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b082      	sub	sp, #8
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	460b      	mov	r3, r1
 80118d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80118dc:	78fa      	ldrb	r2, [r7, #3]
 80118de:	6879      	ldr	r1, [r7, #4]
 80118e0:	4613      	mov	r3, r2
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	4413      	add	r3, r2
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	440b      	add	r3, r1
 80118ea:	3320      	adds	r3, #32
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	78fb      	ldrb	r3, [r7, #3]
 80118f0:	4619      	mov	r1, r3
 80118f2:	f7fb f87e 	bl	800c9f2 <USBD_LL_DataInStage>
}
 80118f6:	bf00      	nop
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b082      	sub	sp, #8
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801190c:	4618      	mov	r0, r3
 801190e:	f7fb f9b8 	bl	800cc82 <USBD_LL_SOF>
}
 8011912:	bf00      	nop
 8011914:	3708      	adds	r7, #8
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801191a:	b580      	push	{r7, lr}
 801191c:	b084      	sub	sp, #16
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011922:	2301      	movs	r3, #1
 8011924:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	79db      	ldrb	r3, [r3, #7]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d102      	bne.n	8011934 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801192e:	2300      	movs	r3, #0
 8011930:	73fb      	strb	r3, [r7, #15]
 8011932:	e008      	b.n	8011946 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	79db      	ldrb	r3, [r3, #7]
 8011938:	2b02      	cmp	r3, #2
 801193a:	d102      	bne.n	8011942 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801193c:	2301      	movs	r3, #1
 801193e:	73fb      	strb	r3, [r7, #15]
 8011940:	e001      	b.n	8011946 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011942:	f7f2 fe0d 	bl	8004560 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801194c:	7bfa      	ldrb	r2, [r7, #15]
 801194e:	4611      	mov	r1, r2
 8011950:	4618      	mov	r0, r3
 8011952:	f7fb f952 	bl	800cbfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801195c:	4618      	mov	r0, r3
 801195e:	f7fb f8fa 	bl	800cb56 <USBD_LL_Reset>
}
 8011962:	bf00      	nop
 8011964:	3710      	adds	r7, #16
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
	...

0801196c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801197a:	4618      	mov	r0, r3
 801197c:	f7fb f94d 	bl	800cc1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	6812      	ldr	r2, [r2, #0]
 801198e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011992:	f043 0301 	orr.w	r3, r3, #1
 8011996:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	7adb      	ldrb	r3, [r3, #11]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d005      	beq.n	80119ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119a0:	4b04      	ldr	r3, [pc, #16]	; (80119b4 <HAL_PCD_SuspendCallback+0x48>)
 80119a2:	691b      	ldr	r3, [r3, #16]
 80119a4:	4a03      	ldr	r2, [pc, #12]	; (80119b4 <HAL_PCD_SuspendCallback+0x48>)
 80119a6:	f043 0306 	orr.w	r3, r3, #6
 80119aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80119ac:	bf00      	nop
 80119ae:	3708      	adds	r7, #8
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	e000ed00 	.word	0xe000ed00

080119b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b082      	sub	sp, #8
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fb f943 	bl	800cc52 <USBD_LL_Resume>
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	460b      	mov	r3, r1
 80119de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80119e6:	78fa      	ldrb	r2, [r7, #3]
 80119e8:	4611      	mov	r1, r2
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fb f99b 	bl	800cd26 <USBD_LL_IsoOUTIncomplete>
}
 80119f0:	bf00      	nop
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	460b      	mov	r3, r1
 8011a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011a0a:	78fa      	ldrb	r2, [r7, #3]
 8011a0c:	4611      	mov	r1, r2
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7fb f957 	bl	800ccc2 <USBD_LL_IsoINIncomplete>
}
 8011a14:	bf00      	nop
 8011a16:	3708      	adds	r7, #8
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fb f9ad 	bl	800cd8a <USBD_LL_DevConnected>
}
 8011a30:	bf00      	nop
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fb f9aa 	bl	800cda0 <USBD_LL_DevDisconnected>
}
 8011a4c:	bf00      	nop
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d13c      	bne.n	8011ade <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011a64:	4a20      	ldr	r2, [pc, #128]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4a1e      	ldr	r2, [pc, #120]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011a74:	4b1c      	ldr	r3, [pc, #112]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011a7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011a7c:	4b1a      	ldr	r3, [pc, #104]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a7e:	2204      	movs	r2, #4
 8011a80:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011a82:	4b19      	ldr	r3, [pc, #100]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a84:	2202      	movs	r2, #2
 8011a86:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a88:	4b17      	ldr	r3, [pc, #92]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a8e:	4b16      	ldr	r3, [pc, #88]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a90:	2202      	movs	r2, #2
 8011a92:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011a94:	4b14      	ldr	r3, [pc, #80]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a96:	2200      	movs	r2, #0
 8011a98:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011a9a:	4b13      	ldr	r3, [pc, #76]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011aa0:	4b11      	ldr	r3, [pc, #68]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011aa6:	4b10      	ldr	r3, [pc, #64]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011aac:	4b0e      	ldr	r3, [pc, #56]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011ab2:	480d      	ldr	r0, [pc, #52]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011ab4:	f7f4 fcef 	bl	8006496 <HAL_PCD_Init>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d001      	beq.n	8011ac2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011abe:	f7f2 fd4f 	bl	8004560 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011ac2:	2180      	movs	r1, #128	; 0x80
 8011ac4:	4808      	ldr	r0, [pc, #32]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011ac6:	f7f5 ff1a 	bl	80078fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011aca:	2240      	movs	r2, #64	; 0x40
 8011acc:	2100      	movs	r1, #0
 8011ace:	4806      	ldr	r0, [pc, #24]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011ad0:	f7f5 fece 	bl	8007870 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011ad4:	2280      	movs	r2, #128	; 0x80
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	4803      	ldr	r0, [pc, #12]	; (8011ae8 <USBD_LL_Init+0x94>)
 8011ada:	f7f5 fec9 	bl	8007870 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011ade:	2300      	movs	r3, #0
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3708      	adds	r7, #8
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	20009114 	.word	0x20009114

08011aec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011af4:	2300      	movs	r3, #0
 8011af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011af8:	2300      	movs	r3, #0
 8011afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7f4 fdd6 	bl	80066b4 <HAL_PCD_Start>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b0c:	7bfb      	ldrb	r3, [r7, #15]
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f000 f942 	bl	8011d98 <USBD_Get_USB_Status>
 8011b14:	4603      	mov	r3, r0
 8011b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3710      	adds	r7, #16
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}

08011b22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b22:	b580      	push	{r7, lr}
 8011b24:	b084      	sub	sp, #16
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	6078      	str	r0, [r7, #4]
 8011b2a:	4608      	mov	r0, r1
 8011b2c:	4611      	mov	r1, r2
 8011b2e:	461a      	mov	r2, r3
 8011b30:	4603      	mov	r3, r0
 8011b32:	70fb      	strb	r3, [r7, #3]
 8011b34:	460b      	mov	r3, r1
 8011b36:	70bb      	strb	r3, [r7, #2]
 8011b38:	4613      	mov	r3, r2
 8011b3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b40:	2300      	movs	r3, #0
 8011b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b4a:	78bb      	ldrb	r3, [r7, #2]
 8011b4c:	883a      	ldrh	r2, [r7, #0]
 8011b4e:	78f9      	ldrb	r1, [r7, #3]
 8011b50:	f7f5 faaa 	bl	80070a8 <HAL_PCD_EP_Open>
 8011b54:	4603      	mov	r3, r0
 8011b56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b58:	7bfb      	ldrb	r3, [r7, #15]
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f000 f91c 	bl	8011d98 <USBD_Get_USB_Status>
 8011b60:	4603      	mov	r3, r0
 8011b62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b64:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b084      	sub	sp, #16
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
 8011b76:	460b      	mov	r3, r1
 8011b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b88:	78fa      	ldrb	r2, [r7, #3]
 8011b8a:	4611      	mov	r1, r2
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7f5 faf3 	bl	8007178 <HAL_PCD_EP_Close>
 8011b92:	4603      	mov	r3, r0
 8011b94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b96:	7bfb      	ldrb	r3, [r7, #15]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f000 f8fd 	bl	8011d98 <USBD_Get_USB_Status>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ba2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	460b      	mov	r3, r1
 8011bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011bc6:	78fa      	ldrb	r2, [r7, #3]
 8011bc8:	4611      	mov	r1, r2
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7f5 fbab 	bl	8007326 <HAL_PCD_EP_SetStall>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bd4:	7bfb      	ldrb	r3, [r7, #15]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f000 f8de 	bl	8011d98 <USBD_Get_USB_Status>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b084      	sub	sp, #16
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c04:	78fa      	ldrb	r2, [r7, #3]
 8011c06:	4611      	mov	r1, r2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7f5 fbef 	bl	80073ec <HAL_PCD_EP_ClrStall>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c12:	7bfb      	ldrb	r3, [r7, #15]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 f8bf 	bl	8011d98 <USBD_Get_USB_Status>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3710      	adds	r7, #16
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b085      	sub	sp, #20
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	460b      	mov	r3, r1
 8011c32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	da0b      	bge.n	8011c5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c44:	78fb      	ldrb	r3, [r7, #3]
 8011c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c4a:	68f9      	ldr	r1, [r7, #12]
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	4413      	add	r3, r2
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	440b      	add	r3, r1
 8011c56:	3316      	adds	r3, #22
 8011c58:	781b      	ldrb	r3, [r3, #0]
 8011c5a:	e00b      	b.n	8011c74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c5c:	78fb      	ldrb	r3, [r7, #3]
 8011c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011c62:	68f9      	ldr	r1, [r7, #12]
 8011c64:	4613      	mov	r3, r2
 8011c66:	00db      	lsls	r3, r3, #3
 8011c68:	4413      	add	r3, r2
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	440b      	add	r3, r1
 8011c6e:	f203 2356 	addw	r3, r3, #598	; 0x256
 8011c72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3714      	adds	r7, #20
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	460b      	mov	r3, r1
 8011c8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011c9a:	78fa      	ldrb	r2, [r7, #3]
 8011c9c:	4611      	mov	r1, r2
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7f5 f9de 	bl	8007060 <HAL_PCD_SetAddress>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ca8:	7bfb      	ldrb	r3, [r7, #15]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f000 f874 	bl	8011d98 <USBD_Get_USB_Status>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b086      	sub	sp, #24
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	60f8      	str	r0, [r7, #12]
 8011cc6:	607a      	str	r2, [r7, #4]
 8011cc8:	603b      	str	r3, [r7, #0]
 8011cca:	460b      	mov	r3, r1
 8011ccc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011cdc:	7af9      	ldrb	r1, [r7, #11]
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	f7f5 fae6 	bl	80072b2 <HAL_PCD_EP_Transmit>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cea:	7dfb      	ldrb	r3, [r7, #23]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f000 f853 	bl	8011d98 <USBD_Get_USB_Status>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3718      	adds	r7, #24
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b086      	sub	sp, #24
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	607a      	str	r2, [r7, #4]
 8011d0a:	603b      	str	r3, [r7, #0]
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d10:	2300      	movs	r3, #0
 8011d12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d14:	2300      	movs	r3, #0
 8011d16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011d1e:	7af9      	ldrb	r1, [r7, #11]
 8011d20:	683b      	ldr	r3, [r7, #0]
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	f7f5 fa72 	bl	800720c <HAL_PCD_EP_Receive>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d2c:	7dfb      	ldrb	r3, [r7, #23]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f000 f832 	bl	8011d98 <USBD_Get_USB_Status>
 8011d34:	4603      	mov	r3, r0
 8011d36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d38:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3718      	adds	r7, #24
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b082      	sub	sp, #8
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011d54:	78fa      	ldrb	r2, [r7, #3]
 8011d56:	4611      	mov	r1, r2
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7f5 fa92 	bl	8007282 <HAL_PCD_EP_GetRxCount>
 8011d5e:	4603      	mov	r3, r0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011d70:	4b03      	ldr	r3, [pc, #12]	; (8011d80 <USBD_static_malloc+0x18>)
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	370c      	adds	r7, #12
 8011d76:	46bd      	mov	sp, r7
 8011d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7c:	4770      	bx	lr
 8011d7e:	bf00      	nop
 8011d80:	200095f8 	.word	0x200095f8

08011d84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011d84:	b480      	push	{r7}
 8011d86:	b083      	sub	sp, #12
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]

}
 8011d8c:	bf00      	nop
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	4603      	mov	r3, r0
 8011da0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011da6:	79fb      	ldrb	r3, [r7, #7]
 8011da8:	2b03      	cmp	r3, #3
 8011daa:	d817      	bhi.n	8011ddc <USBD_Get_USB_Status+0x44>
 8011dac:	a201      	add	r2, pc, #4	; (adr r2, 8011db4 <USBD_Get_USB_Status+0x1c>)
 8011dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011db2:	bf00      	nop
 8011db4:	08011dc5 	.word	0x08011dc5
 8011db8:	08011dcb 	.word	0x08011dcb
 8011dbc:	08011dd1 	.word	0x08011dd1
 8011dc0:	08011dd7 	.word	0x08011dd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8011dc8:	e00b      	b.n	8011de2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011dca:	2303      	movs	r3, #3
 8011dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8011dce:	e008      	b.n	8011de2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8011dd4:	e005      	b.n	8011de2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011dd6:	2303      	movs	r3, #3
 8011dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8011dda:	e002      	b.n	8011de2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011ddc:	2303      	movs	r3, #3
 8011dde:	73fb      	strb	r3, [r7, #15]
    break;
 8011de0:	bf00      	nop
  }
  return usb_status;
 8011de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <__cvt>:
 8011df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011df4:	ec55 4b10 	vmov	r4, r5, d0
 8011df8:	2d00      	cmp	r5, #0
 8011dfa:	460e      	mov	r6, r1
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	462b      	mov	r3, r5
 8011e00:	bfbb      	ittet	lt
 8011e02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011e06:	461d      	movlt	r5, r3
 8011e08:	2300      	movge	r3, #0
 8011e0a:	232d      	movlt	r3, #45	; 0x2d
 8011e0c:	700b      	strb	r3, [r1, #0]
 8011e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011e14:	4691      	mov	r9, r2
 8011e16:	f023 0820 	bic.w	r8, r3, #32
 8011e1a:	bfbc      	itt	lt
 8011e1c:	4622      	movlt	r2, r4
 8011e1e:	4614      	movlt	r4, r2
 8011e20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011e24:	d005      	beq.n	8011e32 <__cvt+0x42>
 8011e26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011e2a:	d100      	bne.n	8011e2e <__cvt+0x3e>
 8011e2c:	3601      	adds	r6, #1
 8011e2e:	2102      	movs	r1, #2
 8011e30:	e000      	b.n	8011e34 <__cvt+0x44>
 8011e32:	2103      	movs	r1, #3
 8011e34:	ab03      	add	r3, sp, #12
 8011e36:	9301      	str	r3, [sp, #4]
 8011e38:	ab02      	add	r3, sp, #8
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	ec45 4b10 	vmov	d0, r4, r5
 8011e40:	4653      	mov	r3, sl
 8011e42:	4632      	mov	r2, r6
 8011e44:	f001 f830 	bl	8012ea8 <_dtoa_r>
 8011e48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011e4c:	4607      	mov	r7, r0
 8011e4e:	d102      	bne.n	8011e56 <__cvt+0x66>
 8011e50:	f019 0f01 	tst.w	r9, #1
 8011e54:	d022      	beq.n	8011e9c <__cvt+0xac>
 8011e56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011e5a:	eb07 0906 	add.w	r9, r7, r6
 8011e5e:	d110      	bne.n	8011e82 <__cvt+0x92>
 8011e60:	783b      	ldrb	r3, [r7, #0]
 8011e62:	2b30      	cmp	r3, #48	; 0x30
 8011e64:	d10a      	bne.n	8011e7c <__cvt+0x8c>
 8011e66:	2200      	movs	r2, #0
 8011e68:	2300      	movs	r3, #0
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	4629      	mov	r1, r5
 8011e6e:	f7ee fe3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e72:	b918      	cbnz	r0, 8011e7c <__cvt+0x8c>
 8011e74:	f1c6 0601 	rsb	r6, r6, #1
 8011e78:	f8ca 6000 	str.w	r6, [sl]
 8011e7c:	f8da 3000 	ldr.w	r3, [sl]
 8011e80:	4499      	add	r9, r3
 8011e82:	2200      	movs	r2, #0
 8011e84:	2300      	movs	r3, #0
 8011e86:	4620      	mov	r0, r4
 8011e88:	4629      	mov	r1, r5
 8011e8a:	f7ee fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8011e8e:	b108      	cbz	r0, 8011e94 <__cvt+0xa4>
 8011e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e94:	2230      	movs	r2, #48	; 0x30
 8011e96:	9b03      	ldr	r3, [sp, #12]
 8011e98:	454b      	cmp	r3, r9
 8011e9a:	d307      	bcc.n	8011eac <__cvt+0xbc>
 8011e9c:	9b03      	ldr	r3, [sp, #12]
 8011e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ea0:	1bdb      	subs	r3, r3, r7
 8011ea2:	4638      	mov	r0, r7
 8011ea4:	6013      	str	r3, [r2, #0]
 8011ea6:	b004      	add	sp, #16
 8011ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eac:	1c59      	adds	r1, r3, #1
 8011eae:	9103      	str	r1, [sp, #12]
 8011eb0:	701a      	strb	r2, [r3, #0]
 8011eb2:	e7f0      	b.n	8011e96 <__cvt+0xa6>

08011eb4 <__exponent>:
 8011eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	2900      	cmp	r1, #0
 8011eba:	bfb8      	it	lt
 8011ebc:	4249      	neglt	r1, r1
 8011ebe:	f803 2b02 	strb.w	r2, [r3], #2
 8011ec2:	bfb4      	ite	lt
 8011ec4:	222d      	movlt	r2, #45	; 0x2d
 8011ec6:	222b      	movge	r2, #43	; 0x2b
 8011ec8:	2909      	cmp	r1, #9
 8011eca:	7042      	strb	r2, [r0, #1]
 8011ecc:	dd2a      	ble.n	8011f24 <__exponent+0x70>
 8011ece:	f10d 0207 	add.w	r2, sp, #7
 8011ed2:	4617      	mov	r7, r2
 8011ed4:	260a      	movs	r6, #10
 8011ed6:	4694      	mov	ip, r2
 8011ed8:	fb91 f5f6 	sdiv	r5, r1, r6
 8011edc:	fb06 1415 	mls	r4, r6, r5, r1
 8011ee0:	3430      	adds	r4, #48	; 0x30
 8011ee2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011ee6:	460c      	mov	r4, r1
 8011ee8:	2c63      	cmp	r4, #99	; 0x63
 8011eea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011eee:	4629      	mov	r1, r5
 8011ef0:	dcf1      	bgt.n	8011ed6 <__exponent+0x22>
 8011ef2:	3130      	adds	r1, #48	; 0x30
 8011ef4:	f1ac 0402 	sub.w	r4, ip, #2
 8011ef8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011efc:	1c41      	adds	r1, r0, #1
 8011efe:	4622      	mov	r2, r4
 8011f00:	42ba      	cmp	r2, r7
 8011f02:	d30a      	bcc.n	8011f1a <__exponent+0x66>
 8011f04:	f10d 0209 	add.w	r2, sp, #9
 8011f08:	eba2 020c 	sub.w	r2, r2, ip
 8011f0c:	42bc      	cmp	r4, r7
 8011f0e:	bf88      	it	hi
 8011f10:	2200      	movhi	r2, #0
 8011f12:	4413      	add	r3, r2
 8011f14:	1a18      	subs	r0, r3, r0
 8011f16:	b003      	add	sp, #12
 8011f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011f1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011f22:	e7ed      	b.n	8011f00 <__exponent+0x4c>
 8011f24:	2330      	movs	r3, #48	; 0x30
 8011f26:	3130      	adds	r1, #48	; 0x30
 8011f28:	7083      	strb	r3, [r0, #2]
 8011f2a:	70c1      	strb	r1, [r0, #3]
 8011f2c:	1d03      	adds	r3, r0, #4
 8011f2e:	e7f1      	b.n	8011f14 <__exponent+0x60>

08011f30 <_printf_float>:
 8011f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f34:	ed2d 8b02 	vpush	{d8}
 8011f38:	b08d      	sub	sp, #52	; 0x34
 8011f3a:	460c      	mov	r4, r1
 8011f3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011f40:	4616      	mov	r6, r2
 8011f42:	461f      	mov	r7, r3
 8011f44:	4605      	mov	r5, r0
 8011f46:	f000 fe4b 	bl	8012be0 <_localeconv_r>
 8011f4a:	f8d0 a000 	ldr.w	sl, [r0]
 8011f4e:	4650      	mov	r0, sl
 8011f50:	f7ee f99e 	bl	8000290 <strlen>
 8011f54:	2300      	movs	r3, #0
 8011f56:	930a      	str	r3, [sp, #40]	; 0x28
 8011f58:	6823      	ldr	r3, [r4, #0]
 8011f5a:	9305      	str	r3, [sp, #20]
 8011f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8011f60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011f64:	3307      	adds	r3, #7
 8011f66:	f023 0307 	bic.w	r3, r3, #7
 8011f6a:	f103 0208 	add.w	r2, r3, #8
 8011f6e:	f8c8 2000 	str.w	r2, [r8]
 8011f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011f76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011f7a:	9307      	str	r3, [sp, #28]
 8011f7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011f80:	ee08 0a10 	vmov	s16, r0
 8011f84:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f8c:	4b9e      	ldr	r3, [pc, #632]	; (8012208 <_printf_float+0x2d8>)
 8011f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f92:	f7ee fddb 	bl	8000b4c <__aeabi_dcmpun>
 8011f96:	bb88      	cbnz	r0, 8011ffc <_printf_float+0xcc>
 8011f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f9c:	4b9a      	ldr	r3, [pc, #616]	; (8012208 <_printf_float+0x2d8>)
 8011f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fa2:	f7ee fdb5 	bl	8000b10 <__aeabi_dcmple>
 8011fa6:	bb48      	cbnz	r0, 8011ffc <_printf_float+0xcc>
 8011fa8:	2200      	movs	r2, #0
 8011faa:	2300      	movs	r3, #0
 8011fac:	4640      	mov	r0, r8
 8011fae:	4649      	mov	r1, r9
 8011fb0:	f7ee fda4 	bl	8000afc <__aeabi_dcmplt>
 8011fb4:	b110      	cbz	r0, 8011fbc <_printf_float+0x8c>
 8011fb6:	232d      	movs	r3, #45	; 0x2d
 8011fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fbc:	4a93      	ldr	r2, [pc, #588]	; (801220c <_printf_float+0x2dc>)
 8011fbe:	4b94      	ldr	r3, [pc, #592]	; (8012210 <_printf_float+0x2e0>)
 8011fc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011fc4:	bf94      	ite	ls
 8011fc6:	4690      	movls	r8, r2
 8011fc8:	4698      	movhi	r8, r3
 8011fca:	2303      	movs	r3, #3
 8011fcc:	6123      	str	r3, [r4, #16]
 8011fce:	9b05      	ldr	r3, [sp, #20]
 8011fd0:	f023 0304 	bic.w	r3, r3, #4
 8011fd4:	6023      	str	r3, [r4, #0]
 8011fd6:	f04f 0900 	mov.w	r9, #0
 8011fda:	9700      	str	r7, [sp, #0]
 8011fdc:	4633      	mov	r3, r6
 8011fde:	aa0b      	add	r2, sp, #44	; 0x2c
 8011fe0:	4621      	mov	r1, r4
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	f000 f9da 	bl	801239c <_printf_common>
 8011fe8:	3001      	adds	r0, #1
 8011fea:	f040 8090 	bne.w	801210e <_printf_float+0x1de>
 8011fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ff2:	b00d      	add	sp, #52	; 0x34
 8011ff4:	ecbd 8b02 	vpop	{d8}
 8011ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ffc:	4642      	mov	r2, r8
 8011ffe:	464b      	mov	r3, r9
 8012000:	4640      	mov	r0, r8
 8012002:	4649      	mov	r1, r9
 8012004:	f7ee fda2 	bl	8000b4c <__aeabi_dcmpun>
 8012008:	b140      	cbz	r0, 801201c <_printf_float+0xec>
 801200a:	464b      	mov	r3, r9
 801200c:	2b00      	cmp	r3, #0
 801200e:	bfbc      	itt	lt
 8012010:	232d      	movlt	r3, #45	; 0x2d
 8012012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012016:	4a7f      	ldr	r2, [pc, #508]	; (8012214 <_printf_float+0x2e4>)
 8012018:	4b7f      	ldr	r3, [pc, #508]	; (8012218 <_printf_float+0x2e8>)
 801201a:	e7d1      	b.n	8011fc0 <_printf_float+0x90>
 801201c:	6863      	ldr	r3, [r4, #4]
 801201e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012022:	9206      	str	r2, [sp, #24]
 8012024:	1c5a      	adds	r2, r3, #1
 8012026:	d13f      	bne.n	80120a8 <_printf_float+0x178>
 8012028:	2306      	movs	r3, #6
 801202a:	6063      	str	r3, [r4, #4]
 801202c:	9b05      	ldr	r3, [sp, #20]
 801202e:	6861      	ldr	r1, [r4, #4]
 8012030:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012034:	2300      	movs	r3, #0
 8012036:	9303      	str	r3, [sp, #12]
 8012038:	ab0a      	add	r3, sp, #40	; 0x28
 801203a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801203e:	ab09      	add	r3, sp, #36	; 0x24
 8012040:	ec49 8b10 	vmov	d0, r8, r9
 8012044:	9300      	str	r3, [sp, #0]
 8012046:	6022      	str	r2, [r4, #0]
 8012048:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801204c:	4628      	mov	r0, r5
 801204e:	f7ff fecf 	bl	8011df0 <__cvt>
 8012052:	9b06      	ldr	r3, [sp, #24]
 8012054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012056:	2b47      	cmp	r3, #71	; 0x47
 8012058:	4680      	mov	r8, r0
 801205a:	d108      	bne.n	801206e <_printf_float+0x13e>
 801205c:	1cc8      	adds	r0, r1, #3
 801205e:	db02      	blt.n	8012066 <_printf_float+0x136>
 8012060:	6863      	ldr	r3, [r4, #4]
 8012062:	4299      	cmp	r1, r3
 8012064:	dd41      	ble.n	80120ea <_printf_float+0x1ba>
 8012066:	f1ab 0302 	sub.w	r3, fp, #2
 801206a:	fa5f fb83 	uxtb.w	fp, r3
 801206e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012072:	d820      	bhi.n	80120b6 <_printf_float+0x186>
 8012074:	3901      	subs	r1, #1
 8012076:	465a      	mov	r2, fp
 8012078:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801207c:	9109      	str	r1, [sp, #36]	; 0x24
 801207e:	f7ff ff19 	bl	8011eb4 <__exponent>
 8012082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012084:	1813      	adds	r3, r2, r0
 8012086:	2a01      	cmp	r2, #1
 8012088:	4681      	mov	r9, r0
 801208a:	6123      	str	r3, [r4, #16]
 801208c:	dc02      	bgt.n	8012094 <_printf_float+0x164>
 801208e:	6822      	ldr	r2, [r4, #0]
 8012090:	07d2      	lsls	r2, r2, #31
 8012092:	d501      	bpl.n	8012098 <_printf_float+0x168>
 8012094:	3301      	adds	r3, #1
 8012096:	6123      	str	r3, [r4, #16]
 8012098:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801209c:	2b00      	cmp	r3, #0
 801209e:	d09c      	beq.n	8011fda <_printf_float+0xaa>
 80120a0:	232d      	movs	r3, #45	; 0x2d
 80120a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120a6:	e798      	b.n	8011fda <_printf_float+0xaa>
 80120a8:	9a06      	ldr	r2, [sp, #24]
 80120aa:	2a47      	cmp	r2, #71	; 0x47
 80120ac:	d1be      	bne.n	801202c <_printf_float+0xfc>
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d1bc      	bne.n	801202c <_printf_float+0xfc>
 80120b2:	2301      	movs	r3, #1
 80120b4:	e7b9      	b.n	801202a <_printf_float+0xfa>
 80120b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80120ba:	d118      	bne.n	80120ee <_printf_float+0x1be>
 80120bc:	2900      	cmp	r1, #0
 80120be:	6863      	ldr	r3, [r4, #4]
 80120c0:	dd0b      	ble.n	80120da <_printf_float+0x1aa>
 80120c2:	6121      	str	r1, [r4, #16]
 80120c4:	b913      	cbnz	r3, 80120cc <_printf_float+0x19c>
 80120c6:	6822      	ldr	r2, [r4, #0]
 80120c8:	07d0      	lsls	r0, r2, #31
 80120ca:	d502      	bpl.n	80120d2 <_printf_float+0x1a2>
 80120cc:	3301      	adds	r3, #1
 80120ce:	440b      	add	r3, r1
 80120d0:	6123      	str	r3, [r4, #16]
 80120d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80120d4:	f04f 0900 	mov.w	r9, #0
 80120d8:	e7de      	b.n	8012098 <_printf_float+0x168>
 80120da:	b913      	cbnz	r3, 80120e2 <_printf_float+0x1b2>
 80120dc:	6822      	ldr	r2, [r4, #0]
 80120de:	07d2      	lsls	r2, r2, #31
 80120e0:	d501      	bpl.n	80120e6 <_printf_float+0x1b6>
 80120e2:	3302      	adds	r3, #2
 80120e4:	e7f4      	b.n	80120d0 <_printf_float+0x1a0>
 80120e6:	2301      	movs	r3, #1
 80120e8:	e7f2      	b.n	80120d0 <_printf_float+0x1a0>
 80120ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80120ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120f0:	4299      	cmp	r1, r3
 80120f2:	db05      	blt.n	8012100 <_printf_float+0x1d0>
 80120f4:	6823      	ldr	r3, [r4, #0]
 80120f6:	6121      	str	r1, [r4, #16]
 80120f8:	07d8      	lsls	r0, r3, #31
 80120fa:	d5ea      	bpl.n	80120d2 <_printf_float+0x1a2>
 80120fc:	1c4b      	adds	r3, r1, #1
 80120fe:	e7e7      	b.n	80120d0 <_printf_float+0x1a0>
 8012100:	2900      	cmp	r1, #0
 8012102:	bfd4      	ite	le
 8012104:	f1c1 0202 	rsble	r2, r1, #2
 8012108:	2201      	movgt	r2, #1
 801210a:	4413      	add	r3, r2
 801210c:	e7e0      	b.n	80120d0 <_printf_float+0x1a0>
 801210e:	6823      	ldr	r3, [r4, #0]
 8012110:	055a      	lsls	r2, r3, #21
 8012112:	d407      	bmi.n	8012124 <_printf_float+0x1f4>
 8012114:	6923      	ldr	r3, [r4, #16]
 8012116:	4642      	mov	r2, r8
 8012118:	4631      	mov	r1, r6
 801211a:	4628      	mov	r0, r5
 801211c:	47b8      	blx	r7
 801211e:	3001      	adds	r0, #1
 8012120:	d12c      	bne.n	801217c <_printf_float+0x24c>
 8012122:	e764      	b.n	8011fee <_printf_float+0xbe>
 8012124:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012128:	f240 80e0 	bls.w	80122ec <_printf_float+0x3bc>
 801212c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012130:	2200      	movs	r2, #0
 8012132:	2300      	movs	r3, #0
 8012134:	f7ee fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8012138:	2800      	cmp	r0, #0
 801213a:	d034      	beq.n	80121a6 <_printf_float+0x276>
 801213c:	4a37      	ldr	r2, [pc, #220]	; (801221c <_printf_float+0x2ec>)
 801213e:	2301      	movs	r3, #1
 8012140:	4631      	mov	r1, r6
 8012142:	4628      	mov	r0, r5
 8012144:	47b8      	blx	r7
 8012146:	3001      	adds	r0, #1
 8012148:	f43f af51 	beq.w	8011fee <_printf_float+0xbe>
 801214c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012150:	429a      	cmp	r2, r3
 8012152:	db02      	blt.n	801215a <_printf_float+0x22a>
 8012154:	6823      	ldr	r3, [r4, #0]
 8012156:	07d8      	lsls	r0, r3, #31
 8012158:	d510      	bpl.n	801217c <_printf_float+0x24c>
 801215a:	ee18 3a10 	vmov	r3, s16
 801215e:	4652      	mov	r2, sl
 8012160:	4631      	mov	r1, r6
 8012162:	4628      	mov	r0, r5
 8012164:	47b8      	blx	r7
 8012166:	3001      	adds	r0, #1
 8012168:	f43f af41 	beq.w	8011fee <_printf_float+0xbe>
 801216c:	f04f 0800 	mov.w	r8, #0
 8012170:	f104 091a 	add.w	r9, r4, #26
 8012174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012176:	3b01      	subs	r3, #1
 8012178:	4543      	cmp	r3, r8
 801217a:	dc09      	bgt.n	8012190 <_printf_float+0x260>
 801217c:	6823      	ldr	r3, [r4, #0]
 801217e:	079b      	lsls	r3, r3, #30
 8012180:	f100 8107 	bmi.w	8012392 <_printf_float+0x462>
 8012184:	68e0      	ldr	r0, [r4, #12]
 8012186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012188:	4298      	cmp	r0, r3
 801218a:	bfb8      	it	lt
 801218c:	4618      	movlt	r0, r3
 801218e:	e730      	b.n	8011ff2 <_printf_float+0xc2>
 8012190:	2301      	movs	r3, #1
 8012192:	464a      	mov	r2, r9
 8012194:	4631      	mov	r1, r6
 8012196:	4628      	mov	r0, r5
 8012198:	47b8      	blx	r7
 801219a:	3001      	adds	r0, #1
 801219c:	f43f af27 	beq.w	8011fee <_printf_float+0xbe>
 80121a0:	f108 0801 	add.w	r8, r8, #1
 80121a4:	e7e6      	b.n	8012174 <_printf_float+0x244>
 80121a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	dc39      	bgt.n	8012220 <_printf_float+0x2f0>
 80121ac:	4a1b      	ldr	r2, [pc, #108]	; (801221c <_printf_float+0x2ec>)
 80121ae:	2301      	movs	r3, #1
 80121b0:	4631      	mov	r1, r6
 80121b2:	4628      	mov	r0, r5
 80121b4:	47b8      	blx	r7
 80121b6:	3001      	adds	r0, #1
 80121b8:	f43f af19 	beq.w	8011fee <_printf_float+0xbe>
 80121bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80121c0:	4313      	orrs	r3, r2
 80121c2:	d102      	bne.n	80121ca <_printf_float+0x29a>
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	07d9      	lsls	r1, r3, #31
 80121c8:	d5d8      	bpl.n	801217c <_printf_float+0x24c>
 80121ca:	ee18 3a10 	vmov	r3, s16
 80121ce:	4652      	mov	r2, sl
 80121d0:	4631      	mov	r1, r6
 80121d2:	4628      	mov	r0, r5
 80121d4:	47b8      	blx	r7
 80121d6:	3001      	adds	r0, #1
 80121d8:	f43f af09 	beq.w	8011fee <_printf_float+0xbe>
 80121dc:	f04f 0900 	mov.w	r9, #0
 80121e0:	f104 0a1a 	add.w	sl, r4, #26
 80121e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121e6:	425b      	negs	r3, r3
 80121e8:	454b      	cmp	r3, r9
 80121ea:	dc01      	bgt.n	80121f0 <_printf_float+0x2c0>
 80121ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121ee:	e792      	b.n	8012116 <_printf_float+0x1e6>
 80121f0:	2301      	movs	r3, #1
 80121f2:	4652      	mov	r2, sl
 80121f4:	4631      	mov	r1, r6
 80121f6:	4628      	mov	r0, r5
 80121f8:	47b8      	blx	r7
 80121fa:	3001      	adds	r0, #1
 80121fc:	f43f aef7 	beq.w	8011fee <_printf_float+0xbe>
 8012200:	f109 0901 	add.w	r9, r9, #1
 8012204:	e7ee      	b.n	80121e4 <_printf_float+0x2b4>
 8012206:	bf00      	nop
 8012208:	7fefffff 	.word	0x7fefffff
 801220c:	08016541 	.word	0x08016541
 8012210:	08016545 	.word	0x08016545
 8012214:	08016549 	.word	0x08016549
 8012218:	0801654d 	.word	0x0801654d
 801221c:	08016551 	.word	0x08016551
 8012220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012224:	429a      	cmp	r2, r3
 8012226:	bfa8      	it	ge
 8012228:	461a      	movge	r2, r3
 801222a:	2a00      	cmp	r2, #0
 801222c:	4691      	mov	r9, r2
 801222e:	dc37      	bgt.n	80122a0 <_printf_float+0x370>
 8012230:	f04f 0b00 	mov.w	fp, #0
 8012234:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012238:	f104 021a 	add.w	r2, r4, #26
 801223c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801223e:	9305      	str	r3, [sp, #20]
 8012240:	eba3 0309 	sub.w	r3, r3, r9
 8012244:	455b      	cmp	r3, fp
 8012246:	dc33      	bgt.n	80122b0 <_printf_float+0x380>
 8012248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801224c:	429a      	cmp	r2, r3
 801224e:	db3b      	blt.n	80122c8 <_printf_float+0x398>
 8012250:	6823      	ldr	r3, [r4, #0]
 8012252:	07da      	lsls	r2, r3, #31
 8012254:	d438      	bmi.n	80122c8 <_printf_float+0x398>
 8012256:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801225a:	eba2 0903 	sub.w	r9, r2, r3
 801225e:	9b05      	ldr	r3, [sp, #20]
 8012260:	1ad2      	subs	r2, r2, r3
 8012262:	4591      	cmp	r9, r2
 8012264:	bfa8      	it	ge
 8012266:	4691      	movge	r9, r2
 8012268:	f1b9 0f00 	cmp.w	r9, #0
 801226c:	dc35      	bgt.n	80122da <_printf_float+0x3aa>
 801226e:	f04f 0800 	mov.w	r8, #0
 8012272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012276:	f104 0a1a 	add.w	sl, r4, #26
 801227a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801227e:	1a9b      	subs	r3, r3, r2
 8012280:	eba3 0309 	sub.w	r3, r3, r9
 8012284:	4543      	cmp	r3, r8
 8012286:	f77f af79 	ble.w	801217c <_printf_float+0x24c>
 801228a:	2301      	movs	r3, #1
 801228c:	4652      	mov	r2, sl
 801228e:	4631      	mov	r1, r6
 8012290:	4628      	mov	r0, r5
 8012292:	47b8      	blx	r7
 8012294:	3001      	adds	r0, #1
 8012296:	f43f aeaa 	beq.w	8011fee <_printf_float+0xbe>
 801229a:	f108 0801 	add.w	r8, r8, #1
 801229e:	e7ec      	b.n	801227a <_printf_float+0x34a>
 80122a0:	4613      	mov	r3, r2
 80122a2:	4631      	mov	r1, r6
 80122a4:	4642      	mov	r2, r8
 80122a6:	4628      	mov	r0, r5
 80122a8:	47b8      	blx	r7
 80122aa:	3001      	adds	r0, #1
 80122ac:	d1c0      	bne.n	8012230 <_printf_float+0x300>
 80122ae:	e69e      	b.n	8011fee <_printf_float+0xbe>
 80122b0:	2301      	movs	r3, #1
 80122b2:	4631      	mov	r1, r6
 80122b4:	4628      	mov	r0, r5
 80122b6:	9205      	str	r2, [sp, #20]
 80122b8:	47b8      	blx	r7
 80122ba:	3001      	adds	r0, #1
 80122bc:	f43f ae97 	beq.w	8011fee <_printf_float+0xbe>
 80122c0:	9a05      	ldr	r2, [sp, #20]
 80122c2:	f10b 0b01 	add.w	fp, fp, #1
 80122c6:	e7b9      	b.n	801223c <_printf_float+0x30c>
 80122c8:	ee18 3a10 	vmov	r3, s16
 80122cc:	4652      	mov	r2, sl
 80122ce:	4631      	mov	r1, r6
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b8      	blx	r7
 80122d4:	3001      	adds	r0, #1
 80122d6:	d1be      	bne.n	8012256 <_printf_float+0x326>
 80122d8:	e689      	b.n	8011fee <_printf_float+0xbe>
 80122da:	9a05      	ldr	r2, [sp, #20]
 80122dc:	464b      	mov	r3, r9
 80122de:	4442      	add	r2, r8
 80122e0:	4631      	mov	r1, r6
 80122e2:	4628      	mov	r0, r5
 80122e4:	47b8      	blx	r7
 80122e6:	3001      	adds	r0, #1
 80122e8:	d1c1      	bne.n	801226e <_printf_float+0x33e>
 80122ea:	e680      	b.n	8011fee <_printf_float+0xbe>
 80122ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122ee:	2a01      	cmp	r2, #1
 80122f0:	dc01      	bgt.n	80122f6 <_printf_float+0x3c6>
 80122f2:	07db      	lsls	r3, r3, #31
 80122f4:	d53a      	bpl.n	801236c <_printf_float+0x43c>
 80122f6:	2301      	movs	r3, #1
 80122f8:	4642      	mov	r2, r8
 80122fa:	4631      	mov	r1, r6
 80122fc:	4628      	mov	r0, r5
 80122fe:	47b8      	blx	r7
 8012300:	3001      	adds	r0, #1
 8012302:	f43f ae74 	beq.w	8011fee <_printf_float+0xbe>
 8012306:	ee18 3a10 	vmov	r3, s16
 801230a:	4652      	mov	r2, sl
 801230c:	4631      	mov	r1, r6
 801230e:	4628      	mov	r0, r5
 8012310:	47b8      	blx	r7
 8012312:	3001      	adds	r0, #1
 8012314:	f43f ae6b 	beq.w	8011fee <_printf_float+0xbe>
 8012318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801231c:	2200      	movs	r2, #0
 801231e:	2300      	movs	r3, #0
 8012320:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012324:	f7ee fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8012328:	b9d8      	cbnz	r0, 8012362 <_printf_float+0x432>
 801232a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801232e:	f108 0201 	add.w	r2, r8, #1
 8012332:	4631      	mov	r1, r6
 8012334:	4628      	mov	r0, r5
 8012336:	47b8      	blx	r7
 8012338:	3001      	adds	r0, #1
 801233a:	d10e      	bne.n	801235a <_printf_float+0x42a>
 801233c:	e657      	b.n	8011fee <_printf_float+0xbe>
 801233e:	2301      	movs	r3, #1
 8012340:	4652      	mov	r2, sl
 8012342:	4631      	mov	r1, r6
 8012344:	4628      	mov	r0, r5
 8012346:	47b8      	blx	r7
 8012348:	3001      	adds	r0, #1
 801234a:	f43f ae50 	beq.w	8011fee <_printf_float+0xbe>
 801234e:	f108 0801 	add.w	r8, r8, #1
 8012352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012354:	3b01      	subs	r3, #1
 8012356:	4543      	cmp	r3, r8
 8012358:	dcf1      	bgt.n	801233e <_printf_float+0x40e>
 801235a:	464b      	mov	r3, r9
 801235c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012360:	e6da      	b.n	8012118 <_printf_float+0x1e8>
 8012362:	f04f 0800 	mov.w	r8, #0
 8012366:	f104 0a1a 	add.w	sl, r4, #26
 801236a:	e7f2      	b.n	8012352 <_printf_float+0x422>
 801236c:	2301      	movs	r3, #1
 801236e:	4642      	mov	r2, r8
 8012370:	e7df      	b.n	8012332 <_printf_float+0x402>
 8012372:	2301      	movs	r3, #1
 8012374:	464a      	mov	r2, r9
 8012376:	4631      	mov	r1, r6
 8012378:	4628      	mov	r0, r5
 801237a:	47b8      	blx	r7
 801237c:	3001      	adds	r0, #1
 801237e:	f43f ae36 	beq.w	8011fee <_printf_float+0xbe>
 8012382:	f108 0801 	add.w	r8, r8, #1
 8012386:	68e3      	ldr	r3, [r4, #12]
 8012388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801238a:	1a5b      	subs	r3, r3, r1
 801238c:	4543      	cmp	r3, r8
 801238e:	dcf0      	bgt.n	8012372 <_printf_float+0x442>
 8012390:	e6f8      	b.n	8012184 <_printf_float+0x254>
 8012392:	f04f 0800 	mov.w	r8, #0
 8012396:	f104 0919 	add.w	r9, r4, #25
 801239a:	e7f4      	b.n	8012386 <_printf_float+0x456>

0801239c <_printf_common>:
 801239c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123a0:	4616      	mov	r6, r2
 80123a2:	4699      	mov	r9, r3
 80123a4:	688a      	ldr	r2, [r1, #8]
 80123a6:	690b      	ldr	r3, [r1, #16]
 80123a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80123ac:	4293      	cmp	r3, r2
 80123ae:	bfb8      	it	lt
 80123b0:	4613      	movlt	r3, r2
 80123b2:	6033      	str	r3, [r6, #0]
 80123b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80123b8:	4607      	mov	r7, r0
 80123ba:	460c      	mov	r4, r1
 80123bc:	b10a      	cbz	r2, 80123c2 <_printf_common+0x26>
 80123be:	3301      	adds	r3, #1
 80123c0:	6033      	str	r3, [r6, #0]
 80123c2:	6823      	ldr	r3, [r4, #0]
 80123c4:	0699      	lsls	r1, r3, #26
 80123c6:	bf42      	ittt	mi
 80123c8:	6833      	ldrmi	r3, [r6, #0]
 80123ca:	3302      	addmi	r3, #2
 80123cc:	6033      	strmi	r3, [r6, #0]
 80123ce:	6825      	ldr	r5, [r4, #0]
 80123d0:	f015 0506 	ands.w	r5, r5, #6
 80123d4:	d106      	bne.n	80123e4 <_printf_common+0x48>
 80123d6:	f104 0a19 	add.w	sl, r4, #25
 80123da:	68e3      	ldr	r3, [r4, #12]
 80123dc:	6832      	ldr	r2, [r6, #0]
 80123de:	1a9b      	subs	r3, r3, r2
 80123e0:	42ab      	cmp	r3, r5
 80123e2:	dc26      	bgt.n	8012432 <_printf_common+0x96>
 80123e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80123e8:	1e13      	subs	r3, r2, #0
 80123ea:	6822      	ldr	r2, [r4, #0]
 80123ec:	bf18      	it	ne
 80123ee:	2301      	movne	r3, #1
 80123f0:	0692      	lsls	r2, r2, #26
 80123f2:	d42b      	bmi.n	801244c <_printf_common+0xb0>
 80123f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80123f8:	4649      	mov	r1, r9
 80123fa:	4638      	mov	r0, r7
 80123fc:	47c0      	blx	r8
 80123fe:	3001      	adds	r0, #1
 8012400:	d01e      	beq.n	8012440 <_printf_common+0xa4>
 8012402:	6823      	ldr	r3, [r4, #0]
 8012404:	6922      	ldr	r2, [r4, #16]
 8012406:	f003 0306 	and.w	r3, r3, #6
 801240a:	2b04      	cmp	r3, #4
 801240c:	bf02      	ittt	eq
 801240e:	68e5      	ldreq	r5, [r4, #12]
 8012410:	6833      	ldreq	r3, [r6, #0]
 8012412:	1aed      	subeq	r5, r5, r3
 8012414:	68a3      	ldr	r3, [r4, #8]
 8012416:	bf0c      	ite	eq
 8012418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801241c:	2500      	movne	r5, #0
 801241e:	4293      	cmp	r3, r2
 8012420:	bfc4      	itt	gt
 8012422:	1a9b      	subgt	r3, r3, r2
 8012424:	18ed      	addgt	r5, r5, r3
 8012426:	2600      	movs	r6, #0
 8012428:	341a      	adds	r4, #26
 801242a:	42b5      	cmp	r5, r6
 801242c:	d11a      	bne.n	8012464 <_printf_common+0xc8>
 801242e:	2000      	movs	r0, #0
 8012430:	e008      	b.n	8012444 <_printf_common+0xa8>
 8012432:	2301      	movs	r3, #1
 8012434:	4652      	mov	r2, sl
 8012436:	4649      	mov	r1, r9
 8012438:	4638      	mov	r0, r7
 801243a:	47c0      	blx	r8
 801243c:	3001      	adds	r0, #1
 801243e:	d103      	bne.n	8012448 <_printf_common+0xac>
 8012440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012448:	3501      	adds	r5, #1
 801244a:	e7c6      	b.n	80123da <_printf_common+0x3e>
 801244c:	18e1      	adds	r1, r4, r3
 801244e:	1c5a      	adds	r2, r3, #1
 8012450:	2030      	movs	r0, #48	; 0x30
 8012452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012456:	4422      	add	r2, r4
 8012458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801245c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012460:	3302      	adds	r3, #2
 8012462:	e7c7      	b.n	80123f4 <_printf_common+0x58>
 8012464:	2301      	movs	r3, #1
 8012466:	4622      	mov	r2, r4
 8012468:	4649      	mov	r1, r9
 801246a:	4638      	mov	r0, r7
 801246c:	47c0      	blx	r8
 801246e:	3001      	adds	r0, #1
 8012470:	d0e6      	beq.n	8012440 <_printf_common+0xa4>
 8012472:	3601      	adds	r6, #1
 8012474:	e7d9      	b.n	801242a <_printf_common+0x8e>
	...

08012478 <_printf_i>:
 8012478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801247c:	7e0f      	ldrb	r7, [r1, #24]
 801247e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012480:	2f78      	cmp	r7, #120	; 0x78
 8012482:	4691      	mov	r9, r2
 8012484:	4680      	mov	r8, r0
 8012486:	460c      	mov	r4, r1
 8012488:	469a      	mov	sl, r3
 801248a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801248e:	d807      	bhi.n	80124a0 <_printf_i+0x28>
 8012490:	2f62      	cmp	r7, #98	; 0x62
 8012492:	d80a      	bhi.n	80124aa <_printf_i+0x32>
 8012494:	2f00      	cmp	r7, #0
 8012496:	f000 80d4 	beq.w	8012642 <_printf_i+0x1ca>
 801249a:	2f58      	cmp	r7, #88	; 0x58
 801249c:	f000 80c0 	beq.w	8012620 <_printf_i+0x1a8>
 80124a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80124a8:	e03a      	b.n	8012520 <_printf_i+0xa8>
 80124aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80124ae:	2b15      	cmp	r3, #21
 80124b0:	d8f6      	bhi.n	80124a0 <_printf_i+0x28>
 80124b2:	a101      	add	r1, pc, #4	; (adr r1, 80124b8 <_printf_i+0x40>)
 80124b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124b8:	08012511 	.word	0x08012511
 80124bc:	08012525 	.word	0x08012525
 80124c0:	080124a1 	.word	0x080124a1
 80124c4:	080124a1 	.word	0x080124a1
 80124c8:	080124a1 	.word	0x080124a1
 80124cc:	080124a1 	.word	0x080124a1
 80124d0:	08012525 	.word	0x08012525
 80124d4:	080124a1 	.word	0x080124a1
 80124d8:	080124a1 	.word	0x080124a1
 80124dc:	080124a1 	.word	0x080124a1
 80124e0:	080124a1 	.word	0x080124a1
 80124e4:	08012629 	.word	0x08012629
 80124e8:	08012551 	.word	0x08012551
 80124ec:	080125e3 	.word	0x080125e3
 80124f0:	080124a1 	.word	0x080124a1
 80124f4:	080124a1 	.word	0x080124a1
 80124f8:	0801264b 	.word	0x0801264b
 80124fc:	080124a1 	.word	0x080124a1
 8012500:	08012551 	.word	0x08012551
 8012504:	080124a1 	.word	0x080124a1
 8012508:	080124a1 	.word	0x080124a1
 801250c:	080125eb 	.word	0x080125eb
 8012510:	682b      	ldr	r3, [r5, #0]
 8012512:	1d1a      	adds	r2, r3, #4
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	602a      	str	r2, [r5, #0]
 8012518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801251c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012520:	2301      	movs	r3, #1
 8012522:	e09f      	b.n	8012664 <_printf_i+0x1ec>
 8012524:	6820      	ldr	r0, [r4, #0]
 8012526:	682b      	ldr	r3, [r5, #0]
 8012528:	0607      	lsls	r7, r0, #24
 801252a:	f103 0104 	add.w	r1, r3, #4
 801252e:	6029      	str	r1, [r5, #0]
 8012530:	d501      	bpl.n	8012536 <_printf_i+0xbe>
 8012532:	681e      	ldr	r6, [r3, #0]
 8012534:	e003      	b.n	801253e <_printf_i+0xc6>
 8012536:	0646      	lsls	r6, r0, #25
 8012538:	d5fb      	bpl.n	8012532 <_printf_i+0xba>
 801253a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801253e:	2e00      	cmp	r6, #0
 8012540:	da03      	bge.n	801254a <_printf_i+0xd2>
 8012542:	232d      	movs	r3, #45	; 0x2d
 8012544:	4276      	negs	r6, r6
 8012546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801254a:	485a      	ldr	r0, [pc, #360]	; (80126b4 <_printf_i+0x23c>)
 801254c:	230a      	movs	r3, #10
 801254e:	e012      	b.n	8012576 <_printf_i+0xfe>
 8012550:	682b      	ldr	r3, [r5, #0]
 8012552:	6820      	ldr	r0, [r4, #0]
 8012554:	1d19      	adds	r1, r3, #4
 8012556:	6029      	str	r1, [r5, #0]
 8012558:	0605      	lsls	r5, r0, #24
 801255a:	d501      	bpl.n	8012560 <_printf_i+0xe8>
 801255c:	681e      	ldr	r6, [r3, #0]
 801255e:	e002      	b.n	8012566 <_printf_i+0xee>
 8012560:	0641      	lsls	r1, r0, #25
 8012562:	d5fb      	bpl.n	801255c <_printf_i+0xe4>
 8012564:	881e      	ldrh	r6, [r3, #0]
 8012566:	4853      	ldr	r0, [pc, #332]	; (80126b4 <_printf_i+0x23c>)
 8012568:	2f6f      	cmp	r7, #111	; 0x6f
 801256a:	bf0c      	ite	eq
 801256c:	2308      	moveq	r3, #8
 801256e:	230a      	movne	r3, #10
 8012570:	2100      	movs	r1, #0
 8012572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012576:	6865      	ldr	r5, [r4, #4]
 8012578:	60a5      	str	r5, [r4, #8]
 801257a:	2d00      	cmp	r5, #0
 801257c:	bfa2      	ittt	ge
 801257e:	6821      	ldrge	r1, [r4, #0]
 8012580:	f021 0104 	bicge.w	r1, r1, #4
 8012584:	6021      	strge	r1, [r4, #0]
 8012586:	b90e      	cbnz	r6, 801258c <_printf_i+0x114>
 8012588:	2d00      	cmp	r5, #0
 801258a:	d04b      	beq.n	8012624 <_printf_i+0x1ac>
 801258c:	4615      	mov	r5, r2
 801258e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012592:	fb03 6711 	mls	r7, r3, r1, r6
 8012596:	5dc7      	ldrb	r7, [r0, r7]
 8012598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801259c:	4637      	mov	r7, r6
 801259e:	42bb      	cmp	r3, r7
 80125a0:	460e      	mov	r6, r1
 80125a2:	d9f4      	bls.n	801258e <_printf_i+0x116>
 80125a4:	2b08      	cmp	r3, #8
 80125a6:	d10b      	bne.n	80125c0 <_printf_i+0x148>
 80125a8:	6823      	ldr	r3, [r4, #0]
 80125aa:	07de      	lsls	r6, r3, #31
 80125ac:	d508      	bpl.n	80125c0 <_printf_i+0x148>
 80125ae:	6923      	ldr	r3, [r4, #16]
 80125b0:	6861      	ldr	r1, [r4, #4]
 80125b2:	4299      	cmp	r1, r3
 80125b4:	bfde      	ittt	le
 80125b6:	2330      	movle	r3, #48	; 0x30
 80125b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80125bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80125c0:	1b52      	subs	r2, r2, r5
 80125c2:	6122      	str	r2, [r4, #16]
 80125c4:	f8cd a000 	str.w	sl, [sp]
 80125c8:	464b      	mov	r3, r9
 80125ca:	aa03      	add	r2, sp, #12
 80125cc:	4621      	mov	r1, r4
 80125ce:	4640      	mov	r0, r8
 80125d0:	f7ff fee4 	bl	801239c <_printf_common>
 80125d4:	3001      	adds	r0, #1
 80125d6:	d14a      	bne.n	801266e <_printf_i+0x1f6>
 80125d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125dc:	b004      	add	sp, #16
 80125de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e2:	6823      	ldr	r3, [r4, #0]
 80125e4:	f043 0320 	orr.w	r3, r3, #32
 80125e8:	6023      	str	r3, [r4, #0]
 80125ea:	4833      	ldr	r0, [pc, #204]	; (80126b8 <_printf_i+0x240>)
 80125ec:	2778      	movs	r7, #120	; 0x78
 80125ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80125f2:	6823      	ldr	r3, [r4, #0]
 80125f4:	6829      	ldr	r1, [r5, #0]
 80125f6:	061f      	lsls	r7, r3, #24
 80125f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80125fc:	d402      	bmi.n	8012604 <_printf_i+0x18c>
 80125fe:	065f      	lsls	r7, r3, #25
 8012600:	bf48      	it	mi
 8012602:	b2b6      	uxthmi	r6, r6
 8012604:	07df      	lsls	r7, r3, #31
 8012606:	bf48      	it	mi
 8012608:	f043 0320 	orrmi.w	r3, r3, #32
 801260c:	6029      	str	r1, [r5, #0]
 801260e:	bf48      	it	mi
 8012610:	6023      	strmi	r3, [r4, #0]
 8012612:	b91e      	cbnz	r6, 801261c <_printf_i+0x1a4>
 8012614:	6823      	ldr	r3, [r4, #0]
 8012616:	f023 0320 	bic.w	r3, r3, #32
 801261a:	6023      	str	r3, [r4, #0]
 801261c:	2310      	movs	r3, #16
 801261e:	e7a7      	b.n	8012570 <_printf_i+0xf8>
 8012620:	4824      	ldr	r0, [pc, #144]	; (80126b4 <_printf_i+0x23c>)
 8012622:	e7e4      	b.n	80125ee <_printf_i+0x176>
 8012624:	4615      	mov	r5, r2
 8012626:	e7bd      	b.n	80125a4 <_printf_i+0x12c>
 8012628:	682b      	ldr	r3, [r5, #0]
 801262a:	6826      	ldr	r6, [r4, #0]
 801262c:	6961      	ldr	r1, [r4, #20]
 801262e:	1d18      	adds	r0, r3, #4
 8012630:	6028      	str	r0, [r5, #0]
 8012632:	0635      	lsls	r5, r6, #24
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	d501      	bpl.n	801263c <_printf_i+0x1c4>
 8012638:	6019      	str	r1, [r3, #0]
 801263a:	e002      	b.n	8012642 <_printf_i+0x1ca>
 801263c:	0670      	lsls	r0, r6, #25
 801263e:	d5fb      	bpl.n	8012638 <_printf_i+0x1c0>
 8012640:	8019      	strh	r1, [r3, #0]
 8012642:	2300      	movs	r3, #0
 8012644:	6123      	str	r3, [r4, #16]
 8012646:	4615      	mov	r5, r2
 8012648:	e7bc      	b.n	80125c4 <_printf_i+0x14c>
 801264a:	682b      	ldr	r3, [r5, #0]
 801264c:	1d1a      	adds	r2, r3, #4
 801264e:	602a      	str	r2, [r5, #0]
 8012650:	681d      	ldr	r5, [r3, #0]
 8012652:	6862      	ldr	r2, [r4, #4]
 8012654:	2100      	movs	r1, #0
 8012656:	4628      	mov	r0, r5
 8012658:	f7ed fdca 	bl	80001f0 <memchr>
 801265c:	b108      	cbz	r0, 8012662 <_printf_i+0x1ea>
 801265e:	1b40      	subs	r0, r0, r5
 8012660:	6060      	str	r0, [r4, #4]
 8012662:	6863      	ldr	r3, [r4, #4]
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	2300      	movs	r3, #0
 8012668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801266c:	e7aa      	b.n	80125c4 <_printf_i+0x14c>
 801266e:	6923      	ldr	r3, [r4, #16]
 8012670:	462a      	mov	r2, r5
 8012672:	4649      	mov	r1, r9
 8012674:	4640      	mov	r0, r8
 8012676:	47d0      	blx	sl
 8012678:	3001      	adds	r0, #1
 801267a:	d0ad      	beq.n	80125d8 <_printf_i+0x160>
 801267c:	6823      	ldr	r3, [r4, #0]
 801267e:	079b      	lsls	r3, r3, #30
 8012680:	d413      	bmi.n	80126aa <_printf_i+0x232>
 8012682:	68e0      	ldr	r0, [r4, #12]
 8012684:	9b03      	ldr	r3, [sp, #12]
 8012686:	4298      	cmp	r0, r3
 8012688:	bfb8      	it	lt
 801268a:	4618      	movlt	r0, r3
 801268c:	e7a6      	b.n	80125dc <_printf_i+0x164>
 801268e:	2301      	movs	r3, #1
 8012690:	4632      	mov	r2, r6
 8012692:	4649      	mov	r1, r9
 8012694:	4640      	mov	r0, r8
 8012696:	47d0      	blx	sl
 8012698:	3001      	adds	r0, #1
 801269a:	d09d      	beq.n	80125d8 <_printf_i+0x160>
 801269c:	3501      	adds	r5, #1
 801269e:	68e3      	ldr	r3, [r4, #12]
 80126a0:	9903      	ldr	r1, [sp, #12]
 80126a2:	1a5b      	subs	r3, r3, r1
 80126a4:	42ab      	cmp	r3, r5
 80126a6:	dcf2      	bgt.n	801268e <_printf_i+0x216>
 80126a8:	e7eb      	b.n	8012682 <_printf_i+0x20a>
 80126aa:	2500      	movs	r5, #0
 80126ac:	f104 0619 	add.w	r6, r4, #25
 80126b0:	e7f5      	b.n	801269e <_printf_i+0x226>
 80126b2:	bf00      	nop
 80126b4:	08016553 	.word	0x08016553
 80126b8:	08016564 	.word	0x08016564

080126bc <__sflush_r>:
 80126bc:	898a      	ldrh	r2, [r1, #12]
 80126be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c2:	4605      	mov	r5, r0
 80126c4:	0710      	lsls	r0, r2, #28
 80126c6:	460c      	mov	r4, r1
 80126c8:	d458      	bmi.n	801277c <__sflush_r+0xc0>
 80126ca:	684b      	ldr	r3, [r1, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dc05      	bgt.n	80126dc <__sflush_r+0x20>
 80126d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dc02      	bgt.n	80126dc <__sflush_r+0x20>
 80126d6:	2000      	movs	r0, #0
 80126d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126de:	2e00      	cmp	r6, #0
 80126e0:	d0f9      	beq.n	80126d6 <__sflush_r+0x1a>
 80126e2:	2300      	movs	r3, #0
 80126e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80126e8:	682f      	ldr	r7, [r5, #0]
 80126ea:	6a21      	ldr	r1, [r4, #32]
 80126ec:	602b      	str	r3, [r5, #0]
 80126ee:	d032      	beq.n	8012756 <__sflush_r+0x9a>
 80126f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80126f2:	89a3      	ldrh	r3, [r4, #12]
 80126f4:	075a      	lsls	r2, r3, #29
 80126f6:	d505      	bpl.n	8012704 <__sflush_r+0x48>
 80126f8:	6863      	ldr	r3, [r4, #4]
 80126fa:	1ac0      	subs	r0, r0, r3
 80126fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80126fe:	b10b      	cbz	r3, 8012704 <__sflush_r+0x48>
 8012700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012702:	1ac0      	subs	r0, r0, r3
 8012704:	2300      	movs	r3, #0
 8012706:	4602      	mov	r2, r0
 8012708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801270a:	6a21      	ldr	r1, [r4, #32]
 801270c:	4628      	mov	r0, r5
 801270e:	47b0      	blx	r6
 8012710:	1c43      	adds	r3, r0, #1
 8012712:	89a3      	ldrh	r3, [r4, #12]
 8012714:	d106      	bne.n	8012724 <__sflush_r+0x68>
 8012716:	6829      	ldr	r1, [r5, #0]
 8012718:	291d      	cmp	r1, #29
 801271a:	d82b      	bhi.n	8012774 <__sflush_r+0xb8>
 801271c:	4a29      	ldr	r2, [pc, #164]	; (80127c4 <__sflush_r+0x108>)
 801271e:	410a      	asrs	r2, r1
 8012720:	07d6      	lsls	r6, r2, #31
 8012722:	d427      	bmi.n	8012774 <__sflush_r+0xb8>
 8012724:	2200      	movs	r2, #0
 8012726:	6062      	str	r2, [r4, #4]
 8012728:	04d9      	lsls	r1, r3, #19
 801272a:	6922      	ldr	r2, [r4, #16]
 801272c:	6022      	str	r2, [r4, #0]
 801272e:	d504      	bpl.n	801273a <__sflush_r+0x7e>
 8012730:	1c42      	adds	r2, r0, #1
 8012732:	d101      	bne.n	8012738 <__sflush_r+0x7c>
 8012734:	682b      	ldr	r3, [r5, #0]
 8012736:	b903      	cbnz	r3, 801273a <__sflush_r+0x7e>
 8012738:	6560      	str	r0, [r4, #84]	; 0x54
 801273a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801273c:	602f      	str	r7, [r5, #0]
 801273e:	2900      	cmp	r1, #0
 8012740:	d0c9      	beq.n	80126d6 <__sflush_r+0x1a>
 8012742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012746:	4299      	cmp	r1, r3
 8012748:	d002      	beq.n	8012750 <__sflush_r+0x94>
 801274a:	4628      	mov	r0, r5
 801274c:	f001 f99e 	bl	8013a8c <_free_r>
 8012750:	2000      	movs	r0, #0
 8012752:	6360      	str	r0, [r4, #52]	; 0x34
 8012754:	e7c0      	b.n	80126d8 <__sflush_r+0x1c>
 8012756:	2301      	movs	r3, #1
 8012758:	4628      	mov	r0, r5
 801275a:	47b0      	blx	r6
 801275c:	1c41      	adds	r1, r0, #1
 801275e:	d1c8      	bne.n	80126f2 <__sflush_r+0x36>
 8012760:	682b      	ldr	r3, [r5, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d0c5      	beq.n	80126f2 <__sflush_r+0x36>
 8012766:	2b1d      	cmp	r3, #29
 8012768:	d001      	beq.n	801276e <__sflush_r+0xb2>
 801276a:	2b16      	cmp	r3, #22
 801276c:	d101      	bne.n	8012772 <__sflush_r+0xb6>
 801276e:	602f      	str	r7, [r5, #0]
 8012770:	e7b1      	b.n	80126d6 <__sflush_r+0x1a>
 8012772:	89a3      	ldrh	r3, [r4, #12]
 8012774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012778:	81a3      	strh	r3, [r4, #12]
 801277a:	e7ad      	b.n	80126d8 <__sflush_r+0x1c>
 801277c:	690f      	ldr	r7, [r1, #16]
 801277e:	2f00      	cmp	r7, #0
 8012780:	d0a9      	beq.n	80126d6 <__sflush_r+0x1a>
 8012782:	0793      	lsls	r3, r2, #30
 8012784:	680e      	ldr	r6, [r1, #0]
 8012786:	bf08      	it	eq
 8012788:	694b      	ldreq	r3, [r1, #20]
 801278a:	600f      	str	r7, [r1, #0]
 801278c:	bf18      	it	ne
 801278e:	2300      	movne	r3, #0
 8012790:	eba6 0807 	sub.w	r8, r6, r7
 8012794:	608b      	str	r3, [r1, #8]
 8012796:	f1b8 0f00 	cmp.w	r8, #0
 801279a:	dd9c      	ble.n	80126d6 <__sflush_r+0x1a>
 801279c:	6a21      	ldr	r1, [r4, #32]
 801279e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127a0:	4643      	mov	r3, r8
 80127a2:	463a      	mov	r2, r7
 80127a4:	4628      	mov	r0, r5
 80127a6:	47b0      	blx	r6
 80127a8:	2800      	cmp	r0, #0
 80127aa:	dc06      	bgt.n	80127ba <__sflush_r+0xfe>
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b2:	81a3      	strh	r3, [r4, #12]
 80127b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127b8:	e78e      	b.n	80126d8 <__sflush_r+0x1c>
 80127ba:	4407      	add	r7, r0
 80127bc:	eba8 0800 	sub.w	r8, r8, r0
 80127c0:	e7e9      	b.n	8012796 <__sflush_r+0xda>
 80127c2:	bf00      	nop
 80127c4:	dfbffffe 	.word	0xdfbffffe

080127c8 <_fflush_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	690b      	ldr	r3, [r1, #16]
 80127cc:	4605      	mov	r5, r0
 80127ce:	460c      	mov	r4, r1
 80127d0:	b913      	cbnz	r3, 80127d8 <_fflush_r+0x10>
 80127d2:	2500      	movs	r5, #0
 80127d4:	4628      	mov	r0, r5
 80127d6:	bd38      	pop	{r3, r4, r5, pc}
 80127d8:	b118      	cbz	r0, 80127e2 <_fflush_r+0x1a>
 80127da:	6a03      	ldr	r3, [r0, #32]
 80127dc:	b90b      	cbnz	r3, 80127e2 <_fflush_r+0x1a>
 80127de:	f000 f8bb 	bl	8012958 <__sinit>
 80127e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d0f3      	beq.n	80127d2 <_fflush_r+0xa>
 80127ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127ec:	07d0      	lsls	r0, r2, #31
 80127ee:	d404      	bmi.n	80127fa <_fflush_r+0x32>
 80127f0:	0599      	lsls	r1, r3, #22
 80127f2:	d402      	bmi.n	80127fa <_fflush_r+0x32>
 80127f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127f6:	f000 fabe 	bl	8012d76 <__retarget_lock_acquire_recursive>
 80127fa:	4628      	mov	r0, r5
 80127fc:	4621      	mov	r1, r4
 80127fe:	f7ff ff5d 	bl	80126bc <__sflush_r>
 8012802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012804:	07da      	lsls	r2, r3, #31
 8012806:	4605      	mov	r5, r0
 8012808:	d4e4      	bmi.n	80127d4 <_fflush_r+0xc>
 801280a:	89a3      	ldrh	r3, [r4, #12]
 801280c:	059b      	lsls	r3, r3, #22
 801280e:	d4e1      	bmi.n	80127d4 <_fflush_r+0xc>
 8012810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012812:	f000 fab1 	bl	8012d78 <__retarget_lock_release_recursive>
 8012816:	e7dd      	b.n	80127d4 <_fflush_r+0xc>

08012818 <fflush>:
 8012818:	4601      	mov	r1, r0
 801281a:	b920      	cbnz	r0, 8012826 <fflush+0xe>
 801281c:	4a04      	ldr	r2, [pc, #16]	; (8012830 <fflush+0x18>)
 801281e:	4905      	ldr	r1, [pc, #20]	; (8012834 <fflush+0x1c>)
 8012820:	4805      	ldr	r0, [pc, #20]	; (8012838 <fflush+0x20>)
 8012822:	f000 b8b1 	b.w	8012988 <_fwalk_sglue>
 8012826:	4b05      	ldr	r3, [pc, #20]	; (801283c <fflush+0x24>)
 8012828:	6818      	ldr	r0, [r3, #0]
 801282a:	f7ff bfcd 	b.w	80127c8 <_fflush_r>
 801282e:	bf00      	nop
 8012830:	200003e4 	.word	0x200003e4
 8012834:	080127c9 	.word	0x080127c9
 8012838:	200003f0 	.word	0x200003f0
 801283c:	2000043c 	.word	0x2000043c

08012840 <std>:
 8012840:	2300      	movs	r3, #0
 8012842:	b510      	push	{r4, lr}
 8012844:	4604      	mov	r4, r0
 8012846:	e9c0 3300 	strd	r3, r3, [r0]
 801284a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801284e:	6083      	str	r3, [r0, #8]
 8012850:	8181      	strh	r1, [r0, #12]
 8012852:	6643      	str	r3, [r0, #100]	; 0x64
 8012854:	81c2      	strh	r2, [r0, #14]
 8012856:	6183      	str	r3, [r0, #24]
 8012858:	4619      	mov	r1, r3
 801285a:	2208      	movs	r2, #8
 801285c:	305c      	adds	r0, #92	; 0x5c
 801285e:	f000 f9a3 	bl	8012ba8 <memset>
 8012862:	4b0d      	ldr	r3, [pc, #52]	; (8012898 <std+0x58>)
 8012864:	6263      	str	r3, [r4, #36]	; 0x24
 8012866:	4b0d      	ldr	r3, [pc, #52]	; (801289c <std+0x5c>)
 8012868:	62a3      	str	r3, [r4, #40]	; 0x28
 801286a:	4b0d      	ldr	r3, [pc, #52]	; (80128a0 <std+0x60>)
 801286c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801286e:	4b0d      	ldr	r3, [pc, #52]	; (80128a4 <std+0x64>)
 8012870:	6323      	str	r3, [r4, #48]	; 0x30
 8012872:	4b0d      	ldr	r3, [pc, #52]	; (80128a8 <std+0x68>)
 8012874:	6224      	str	r4, [r4, #32]
 8012876:	429c      	cmp	r4, r3
 8012878:	d006      	beq.n	8012888 <std+0x48>
 801287a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801287e:	4294      	cmp	r4, r2
 8012880:	d002      	beq.n	8012888 <std+0x48>
 8012882:	33d0      	adds	r3, #208	; 0xd0
 8012884:	429c      	cmp	r4, r3
 8012886:	d105      	bne.n	8012894 <std+0x54>
 8012888:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801288c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012890:	f000 ba70 	b.w	8012d74 <__retarget_lock_init_recursive>
 8012894:	bd10      	pop	{r4, pc}
 8012896:	bf00      	nop
 8012898:	080129f9 	.word	0x080129f9
 801289c:	08012a1b 	.word	0x08012a1b
 80128a0:	08012a53 	.word	0x08012a53
 80128a4:	08012a77 	.word	0x08012a77
 80128a8:	20009818 	.word	0x20009818

080128ac <stdio_exit_handler>:
 80128ac:	4a02      	ldr	r2, [pc, #8]	; (80128b8 <stdio_exit_handler+0xc>)
 80128ae:	4903      	ldr	r1, [pc, #12]	; (80128bc <stdio_exit_handler+0x10>)
 80128b0:	4803      	ldr	r0, [pc, #12]	; (80128c0 <stdio_exit_handler+0x14>)
 80128b2:	f000 b869 	b.w	8012988 <_fwalk_sglue>
 80128b6:	bf00      	nop
 80128b8:	200003e4 	.word	0x200003e4
 80128bc:	080127c9 	.word	0x080127c9
 80128c0:	200003f0 	.word	0x200003f0

080128c4 <cleanup_stdio>:
 80128c4:	6841      	ldr	r1, [r0, #4]
 80128c6:	4b0c      	ldr	r3, [pc, #48]	; (80128f8 <cleanup_stdio+0x34>)
 80128c8:	4299      	cmp	r1, r3
 80128ca:	b510      	push	{r4, lr}
 80128cc:	4604      	mov	r4, r0
 80128ce:	d001      	beq.n	80128d4 <cleanup_stdio+0x10>
 80128d0:	f7ff ff7a 	bl	80127c8 <_fflush_r>
 80128d4:	68a1      	ldr	r1, [r4, #8]
 80128d6:	4b09      	ldr	r3, [pc, #36]	; (80128fc <cleanup_stdio+0x38>)
 80128d8:	4299      	cmp	r1, r3
 80128da:	d002      	beq.n	80128e2 <cleanup_stdio+0x1e>
 80128dc:	4620      	mov	r0, r4
 80128de:	f7ff ff73 	bl	80127c8 <_fflush_r>
 80128e2:	68e1      	ldr	r1, [r4, #12]
 80128e4:	4b06      	ldr	r3, [pc, #24]	; (8012900 <cleanup_stdio+0x3c>)
 80128e6:	4299      	cmp	r1, r3
 80128e8:	d004      	beq.n	80128f4 <cleanup_stdio+0x30>
 80128ea:	4620      	mov	r0, r4
 80128ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128f0:	f7ff bf6a 	b.w	80127c8 <_fflush_r>
 80128f4:	bd10      	pop	{r4, pc}
 80128f6:	bf00      	nop
 80128f8:	20009818 	.word	0x20009818
 80128fc:	20009880 	.word	0x20009880
 8012900:	200098e8 	.word	0x200098e8

08012904 <global_stdio_init.part.0>:
 8012904:	b510      	push	{r4, lr}
 8012906:	4b0b      	ldr	r3, [pc, #44]	; (8012934 <global_stdio_init.part.0+0x30>)
 8012908:	4c0b      	ldr	r4, [pc, #44]	; (8012938 <global_stdio_init.part.0+0x34>)
 801290a:	4a0c      	ldr	r2, [pc, #48]	; (801293c <global_stdio_init.part.0+0x38>)
 801290c:	601a      	str	r2, [r3, #0]
 801290e:	4620      	mov	r0, r4
 8012910:	2200      	movs	r2, #0
 8012912:	2104      	movs	r1, #4
 8012914:	f7ff ff94 	bl	8012840 <std>
 8012918:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801291c:	2201      	movs	r2, #1
 801291e:	2109      	movs	r1, #9
 8012920:	f7ff ff8e 	bl	8012840 <std>
 8012924:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012928:	2202      	movs	r2, #2
 801292a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801292e:	2112      	movs	r1, #18
 8012930:	f7ff bf86 	b.w	8012840 <std>
 8012934:	20009950 	.word	0x20009950
 8012938:	20009818 	.word	0x20009818
 801293c:	080128ad 	.word	0x080128ad

08012940 <__sfp_lock_acquire>:
 8012940:	4801      	ldr	r0, [pc, #4]	; (8012948 <__sfp_lock_acquire+0x8>)
 8012942:	f000 ba18 	b.w	8012d76 <__retarget_lock_acquire_recursive>
 8012946:	bf00      	nop
 8012948:	20009959 	.word	0x20009959

0801294c <__sfp_lock_release>:
 801294c:	4801      	ldr	r0, [pc, #4]	; (8012954 <__sfp_lock_release+0x8>)
 801294e:	f000 ba13 	b.w	8012d78 <__retarget_lock_release_recursive>
 8012952:	bf00      	nop
 8012954:	20009959 	.word	0x20009959

08012958 <__sinit>:
 8012958:	b510      	push	{r4, lr}
 801295a:	4604      	mov	r4, r0
 801295c:	f7ff fff0 	bl	8012940 <__sfp_lock_acquire>
 8012960:	6a23      	ldr	r3, [r4, #32]
 8012962:	b11b      	cbz	r3, 801296c <__sinit+0x14>
 8012964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012968:	f7ff bff0 	b.w	801294c <__sfp_lock_release>
 801296c:	4b04      	ldr	r3, [pc, #16]	; (8012980 <__sinit+0x28>)
 801296e:	6223      	str	r3, [r4, #32]
 8012970:	4b04      	ldr	r3, [pc, #16]	; (8012984 <__sinit+0x2c>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d1f5      	bne.n	8012964 <__sinit+0xc>
 8012978:	f7ff ffc4 	bl	8012904 <global_stdio_init.part.0>
 801297c:	e7f2      	b.n	8012964 <__sinit+0xc>
 801297e:	bf00      	nop
 8012980:	080128c5 	.word	0x080128c5
 8012984:	20009950 	.word	0x20009950

08012988 <_fwalk_sglue>:
 8012988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801298c:	4607      	mov	r7, r0
 801298e:	4688      	mov	r8, r1
 8012990:	4614      	mov	r4, r2
 8012992:	2600      	movs	r6, #0
 8012994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012998:	f1b9 0901 	subs.w	r9, r9, #1
 801299c:	d505      	bpl.n	80129aa <_fwalk_sglue+0x22>
 801299e:	6824      	ldr	r4, [r4, #0]
 80129a0:	2c00      	cmp	r4, #0
 80129a2:	d1f7      	bne.n	8012994 <_fwalk_sglue+0xc>
 80129a4:	4630      	mov	r0, r6
 80129a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129aa:	89ab      	ldrh	r3, [r5, #12]
 80129ac:	2b01      	cmp	r3, #1
 80129ae:	d907      	bls.n	80129c0 <_fwalk_sglue+0x38>
 80129b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80129b4:	3301      	adds	r3, #1
 80129b6:	d003      	beq.n	80129c0 <_fwalk_sglue+0x38>
 80129b8:	4629      	mov	r1, r5
 80129ba:	4638      	mov	r0, r7
 80129bc:	47c0      	blx	r8
 80129be:	4306      	orrs	r6, r0
 80129c0:	3568      	adds	r5, #104	; 0x68
 80129c2:	e7e9      	b.n	8012998 <_fwalk_sglue+0x10>

080129c4 <iprintf>:
 80129c4:	b40f      	push	{r0, r1, r2, r3}
 80129c6:	b507      	push	{r0, r1, r2, lr}
 80129c8:	4906      	ldr	r1, [pc, #24]	; (80129e4 <iprintf+0x20>)
 80129ca:	ab04      	add	r3, sp, #16
 80129cc:	6808      	ldr	r0, [r1, #0]
 80129ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80129d2:	6881      	ldr	r1, [r0, #8]
 80129d4:	9301      	str	r3, [sp, #4]
 80129d6:	f001 fcff 	bl	80143d8 <_vfiprintf_r>
 80129da:	b003      	add	sp, #12
 80129dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80129e0:	b004      	add	sp, #16
 80129e2:	4770      	bx	lr
 80129e4:	2000043c 	.word	0x2000043c

080129e8 <putchar>:
 80129e8:	4b02      	ldr	r3, [pc, #8]	; (80129f4 <putchar+0xc>)
 80129ea:	4601      	mov	r1, r0
 80129ec:	6818      	ldr	r0, [r3, #0]
 80129ee:	6882      	ldr	r2, [r0, #8]
 80129f0:	f001 be6e 	b.w	80146d0 <_putc_r>
 80129f4:	2000043c 	.word	0x2000043c

080129f8 <__sread>:
 80129f8:	b510      	push	{r4, lr}
 80129fa:	460c      	mov	r4, r1
 80129fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a00:	f000 f96a 	bl	8012cd8 <_read_r>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	bfab      	itete	ge
 8012a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8012a0c:	181b      	addge	r3, r3, r0
 8012a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a12:	bfac      	ite	ge
 8012a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a16:	81a3      	strhlt	r3, [r4, #12]
 8012a18:	bd10      	pop	{r4, pc}

08012a1a <__swrite>:
 8012a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1e:	461f      	mov	r7, r3
 8012a20:	898b      	ldrh	r3, [r1, #12]
 8012a22:	05db      	lsls	r3, r3, #23
 8012a24:	4605      	mov	r5, r0
 8012a26:	460c      	mov	r4, r1
 8012a28:	4616      	mov	r6, r2
 8012a2a:	d505      	bpl.n	8012a38 <__swrite+0x1e>
 8012a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a30:	2302      	movs	r3, #2
 8012a32:	2200      	movs	r2, #0
 8012a34:	f000 f93e 	bl	8012cb4 <_lseek_r>
 8012a38:	89a3      	ldrh	r3, [r4, #12]
 8012a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a42:	81a3      	strh	r3, [r4, #12]
 8012a44:	4632      	mov	r2, r6
 8012a46:	463b      	mov	r3, r7
 8012a48:	4628      	mov	r0, r5
 8012a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a4e:	f000 b955 	b.w	8012cfc <_write_r>

08012a52 <__sseek>:
 8012a52:	b510      	push	{r4, lr}
 8012a54:	460c      	mov	r4, r1
 8012a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a5a:	f000 f92b 	bl	8012cb4 <_lseek_r>
 8012a5e:	1c43      	adds	r3, r0, #1
 8012a60:	89a3      	ldrh	r3, [r4, #12]
 8012a62:	bf15      	itete	ne
 8012a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a6e:	81a3      	strheq	r3, [r4, #12]
 8012a70:	bf18      	it	ne
 8012a72:	81a3      	strhne	r3, [r4, #12]
 8012a74:	bd10      	pop	{r4, pc}

08012a76 <__sclose>:
 8012a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a7a:	f000 b8b5 	b.w	8012be8 <_close_r>

08012a7e <__swbuf_r>:
 8012a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a80:	460e      	mov	r6, r1
 8012a82:	4614      	mov	r4, r2
 8012a84:	4605      	mov	r5, r0
 8012a86:	b118      	cbz	r0, 8012a90 <__swbuf_r+0x12>
 8012a88:	6a03      	ldr	r3, [r0, #32]
 8012a8a:	b90b      	cbnz	r3, 8012a90 <__swbuf_r+0x12>
 8012a8c:	f7ff ff64 	bl	8012958 <__sinit>
 8012a90:	69a3      	ldr	r3, [r4, #24]
 8012a92:	60a3      	str	r3, [r4, #8]
 8012a94:	89a3      	ldrh	r3, [r4, #12]
 8012a96:	071a      	lsls	r2, r3, #28
 8012a98:	d525      	bpl.n	8012ae6 <__swbuf_r+0x68>
 8012a9a:	6923      	ldr	r3, [r4, #16]
 8012a9c:	b31b      	cbz	r3, 8012ae6 <__swbuf_r+0x68>
 8012a9e:	6823      	ldr	r3, [r4, #0]
 8012aa0:	6922      	ldr	r2, [r4, #16]
 8012aa2:	1a98      	subs	r0, r3, r2
 8012aa4:	6963      	ldr	r3, [r4, #20]
 8012aa6:	b2f6      	uxtb	r6, r6
 8012aa8:	4283      	cmp	r3, r0
 8012aaa:	4637      	mov	r7, r6
 8012aac:	dc04      	bgt.n	8012ab8 <__swbuf_r+0x3a>
 8012aae:	4621      	mov	r1, r4
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	f7ff fe89 	bl	80127c8 <_fflush_r>
 8012ab6:	b9e0      	cbnz	r0, 8012af2 <__swbuf_r+0x74>
 8012ab8:	68a3      	ldr	r3, [r4, #8]
 8012aba:	3b01      	subs	r3, #1
 8012abc:	60a3      	str	r3, [r4, #8]
 8012abe:	6823      	ldr	r3, [r4, #0]
 8012ac0:	1c5a      	adds	r2, r3, #1
 8012ac2:	6022      	str	r2, [r4, #0]
 8012ac4:	701e      	strb	r6, [r3, #0]
 8012ac6:	6962      	ldr	r2, [r4, #20]
 8012ac8:	1c43      	adds	r3, r0, #1
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d004      	beq.n	8012ad8 <__swbuf_r+0x5a>
 8012ace:	89a3      	ldrh	r3, [r4, #12]
 8012ad0:	07db      	lsls	r3, r3, #31
 8012ad2:	d506      	bpl.n	8012ae2 <__swbuf_r+0x64>
 8012ad4:	2e0a      	cmp	r6, #10
 8012ad6:	d104      	bne.n	8012ae2 <__swbuf_r+0x64>
 8012ad8:	4621      	mov	r1, r4
 8012ada:	4628      	mov	r0, r5
 8012adc:	f7ff fe74 	bl	80127c8 <_fflush_r>
 8012ae0:	b938      	cbnz	r0, 8012af2 <__swbuf_r+0x74>
 8012ae2:	4638      	mov	r0, r7
 8012ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	4628      	mov	r0, r5
 8012aea:	f000 f805 	bl	8012af8 <__swsetup_r>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	d0d5      	beq.n	8012a9e <__swbuf_r+0x20>
 8012af2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012af6:	e7f4      	b.n	8012ae2 <__swbuf_r+0x64>

08012af8 <__swsetup_r>:
 8012af8:	b538      	push	{r3, r4, r5, lr}
 8012afa:	4b2a      	ldr	r3, [pc, #168]	; (8012ba4 <__swsetup_r+0xac>)
 8012afc:	4605      	mov	r5, r0
 8012afe:	6818      	ldr	r0, [r3, #0]
 8012b00:	460c      	mov	r4, r1
 8012b02:	b118      	cbz	r0, 8012b0c <__swsetup_r+0x14>
 8012b04:	6a03      	ldr	r3, [r0, #32]
 8012b06:	b90b      	cbnz	r3, 8012b0c <__swsetup_r+0x14>
 8012b08:	f7ff ff26 	bl	8012958 <__sinit>
 8012b0c:	89a3      	ldrh	r3, [r4, #12]
 8012b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b12:	0718      	lsls	r0, r3, #28
 8012b14:	d422      	bmi.n	8012b5c <__swsetup_r+0x64>
 8012b16:	06d9      	lsls	r1, r3, #27
 8012b18:	d407      	bmi.n	8012b2a <__swsetup_r+0x32>
 8012b1a:	2309      	movs	r3, #9
 8012b1c:	602b      	str	r3, [r5, #0]
 8012b1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012b22:	81a3      	strh	r3, [r4, #12]
 8012b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b28:	e034      	b.n	8012b94 <__swsetup_r+0x9c>
 8012b2a:	0758      	lsls	r0, r3, #29
 8012b2c:	d512      	bpl.n	8012b54 <__swsetup_r+0x5c>
 8012b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b30:	b141      	cbz	r1, 8012b44 <__swsetup_r+0x4c>
 8012b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b36:	4299      	cmp	r1, r3
 8012b38:	d002      	beq.n	8012b40 <__swsetup_r+0x48>
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	f000 ffa6 	bl	8013a8c <_free_r>
 8012b40:	2300      	movs	r3, #0
 8012b42:	6363      	str	r3, [r4, #52]	; 0x34
 8012b44:	89a3      	ldrh	r3, [r4, #12]
 8012b46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012b4a:	81a3      	strh	r3, [r4, #12]
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	6063      	str	r3, [r4, #4]
 8012b50:	6923      	ldr	r3, [r4, #16]
 8012b52:	6023      	str	r3, [r4, #0]
 8012b54:	89a3      	ldrh	r3, [r4, #12]
 8012b56:	f043 0308 	orr.w	r3, r3, #8
 8012b5a:	81a3      	strh	r3, [r4, #12]
 8012b5c:	6923      	ldr	r3, [r4, #16]
 8012b5e:	b94b      	cbnz	r3, 8012b74 <__swsetup_r+0x7c>
 8012b60:	89a3      	ldrh	r3, [r4, #12]
 8012b62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b6a:	d003      	beq.n	8012b74 <__swsetup_r+0x7c>
 8012b6c:	4621      	mov	r1, r4
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f001 fd72 	bl	8014658 <__smakebuf_r>
 8012b74:	89a0      	ldrh	r0, [r4, #12]
 8012b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b7a:	f010 0301 	ands.w	r3, r0, #1
 8012b7e:	d00a      	beq.n	8012b96 <__swsetup_r+0x9e>
 8012b80:	2300      	movs	r3, #0
 8012b82:	60a3      	str	r3, [r4, #8]
 8012b84:	6963      	ldr	r3, [r4, #20]
 8012b86:	425b      	negs	r3, r3
 8012b88:	61a3      	str	r3, [r4, #24]
 8012b8a:	6923      	ldr	r3, [r4, #16]
 8012b8c:	b943      	cbnz	r3, 8012ba0 <__swsetup_r+0xa8>
 8012b8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012b92:	d1c4      	bne.n	8012b1e <__swsetup_r+0x26>
 8012b94:	bd38      	pop	{r3, r4, r5, pc}
 8012b96:	0781      	lsls	r1, r0, #30
 8012b98:	bf58      	it	pl
 8012b9a:	6963      	ldrpl	r3, [r4, #20]
 8012b9c:	60a3      	str	r3, [r4, #8]
 8012b9e:	e7f4      	b.n	8012b8a <__swsetup_r+0x92>
 8012ba0:	2000      	movs	r0, #0
 8012ba2:	e7f7      	b.n	8012b94 <__swsetup_r+0x9c>
 8012ba4:	2000043c 	.word	0x2000043c

08012ba8 <memset>:
 8012ba8:	4402      	add	r2, r0
 8012baa:	4603      	mov	r3, r0
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d100      	bne.n	8012bb2 <memset+0xa>
 8012bb0:	4770      	bx	lr
 8012bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8012bb6:	e7f9      	b.n	8012bac <memset+0x4>

08012bb8 <strncpy>:
 8012bb8:	b510      	push	{r4, lr}
 8012bba:	3901      	subs	r1, #1
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	b132      	cbz	r2, 8012bce <strncpy+0x16>
 8012bc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012bc4:	f803 4b01 	strb.w	r4, [r3], #1
 8012bc8:	3a01      	subs	r2, #1
 8012bca:	2c00      	cmp	r4, #0
 8012bcc:	d1f7      	bne.n	8012bbe <strncpy+0x6>
 8012bce:	441a      	add	r2, r3
 8012bd0:	2100      	movs	r1, #0
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d100      	bne.n	8012bd8 <strncpy+0x20>
 8012bd6:	bd10      	pop	{r4, pc}
 8012bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8012bdc:	e7f9      	b.n	8012bd2 <strncpy+0x1a>
	...

08012be0 <_localeconv_r>:
 8012be0:	4800      	ldr	r0, [pc, #0]	; (8012be4 <_localeconv_r+0x4>)
 8012be2:	4770      	bx	lr
 8012be4:	20000530 	.word	0x20000530

08012be8 <_close_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4d06      	ldr	r5, [pc, #24]	; (8012c04 <_close_r+0x1c>)
 8012bec:	2300      	movs	r3, #0
 8012bee:	4604      	mov	r4, r0
 8012bf0:	4608      	mov	r0, r1
 8012bf2:	602b      	str	r3, [r5, #0]
 8012bf4:	f7f2 f827 	bl	8004c46 <_close>
 8012bf8:	1c43      	adds	r3, r0, #1
 8012bfa:	d102      	bne.n	8012c02 <_close_r+0x1a>
 8012bfc:	682b      	ldr	r3, [r5, #0]
 8012bfe:	b103      	cbz	r3, 8012c02 <_close_r+0x1a>
 8012c00:	6023      	str	r3, [r4, #0]
 8012c02:	bd38      	pop	{r3, r4, r5, pc}
 8012c04:	20009954 	.word	0x20009954

08012c08 <_reclaim_reent>:
 8012c08:	4b29      	ldr	r3, [pc, #164]	; (8012cb0 <_reclaim_reent+0xa8>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4283      	cmp	r3, r0
 8012c0e:	b570      	push	{r4, r5, r6, lr}
 8012c10:	4604      	mov	r4, r0
 8012c12:	d04b      	beq.n	8012cac <_reclaim_reent+0xa4>
 8012c14:	69c3      	ldr	r3, [r0, #28]
 8012c16:	b143      	cbz	r3, 8012c2a <_reclaim_reent+0x22>
 8012c18:	68db      	ldr	r3, [r3, #12]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d144      	bne.n	8012ca8 <_reclaim_reent+0xa0>
 8012c1e:	69e3      	ldr	r3, [r4, #28]
 8012c20:	6819      	ldr	r1, [r3, #0]
 8012c22:	b111      	cbz	r1, 8012c2a <_reclaim_reent+0x22>
 8012c24:	4620      	mov	r0, r4
 8012c26:	f000 ff31 	bl	8013a8c <_free_r>
 8012c2a:	6961      	ldr	r1, [r4, #20]
 8012c2c:	b111      	cbz	r1, 8012c34 <_reclaim_reent+0x2c>
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f000 ff2c 	bl	8013a8c <_free_r>
 8012c34:	69e1      	ldr	r1, [r4, #28]
 8012c36:	b111      	cbz	r1, 8012c3e <_reclaim_reent+0x36>
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f000 ff27 	bl	8013a8c <_free_r>
 8012c3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012c40:	b111      	cbz	r1, 8012c48 <_reclaim_reent+0x40>
 8012c42:	4620      	mov	r0, r4
 8012c44:	f000 ff22 	bl	8013a8c <_free_r>
 8012c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c4a:	b111      	cbz	r1, 8012c52 <_reclaim_reent+0x4a>
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	f000 ff1d 	bl	8013a8c <_free_r>
 8012c52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012c54:	b111      	cbz	r1, 8012c5c <_reclaim_reent+0x54>
 8012c56:	4620      	mov	r0, r4
 8012c58:	f000 ff18 	bl	8013a8c <_free_r>
 8012c5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012c5e:	b111      	cbz	r1, 8012c66 <_reclaim_reent+0x5e>
 8012c60:	4620      	mov	r0, r4
 8012c62:	f000 ff13 	bl	8013a8c <_free_r>
 8012c66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012c68:	b111      	cbz	r1, 8012c70 <_reclaim_reent+0x68>
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f000 ff0e 	bl	8013a8c <_free_r>
 8012c70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012c72:	b111      	cbz	r1, 8012c7a <_reclaim_reent+0x72>
 8012c74:	4620      	mov	r0, r4
 8012c76:	f000 ff09 	bl	8013a8c <_free_r>
 8012c7a:	6a23      	ldr	r3, [r4, #32]
 8012c7c:	b1b3      	cbz	r3, 8012cac <_reclaim_reent+0xa4>
 8012c7e:	4620      	mov	r0, r4
 8012c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c84:	4718      	bx	r3
 8012c86:	5949      	ldr	r1, [r1, r5]
 8012c88:	b941      	cbnz	r1, 8012c9c <_reclaim_reent+0x94>
 8012c8a:	3504      	adds	r5, #4
 8012c8c:	69e3      	ldr	r3, [r4, #28]
 8012c8e:	2d80      	cmp	r5, #128	; 0x80
 8012c90:	68d9      	ldr	r1, [r3, #12]
 8012c92:	d1f8      	bne.n	8012c86 <_reclaim_reent+0x7e>
 8012c94:	4620      	mov	r0, r4
 8012c96:	f000 fef9 	bl	8013a8c <_free_r>
 8012c9a:	e7c0      	b.n	8012c1e <_reclaim_reent+0x16>
 8012c9c:	680e      	ldr	r6, [r1, #0]
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	f000 fef4 	bl	8013a8c <_free_r>
 8012ca4:	4631      	mov	r1, r6
 8012ca6:	e7ef      	b.n	8012c88 <_reclaim_reent+0x80>
 8012ca8:	2500      	movs	r5, #0
 8012caa:	e7ef      	b.n	8012c8c <_reclaim_reent+0x84>
 8012cac:	bd70      	pop	{r4, r5, r6, pc}
 8012cae:	bf00      	nop
 8012cb0:	2000043c 	.word	0x2000043c

08012cb4 <_lseek_r>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	4d07      	ldr	r5, [pc, #28]	; (8012cd4 <_lseek_r+0x20>)
 8012cb8:	4604      	mov	r4, r0
 8012cba:	4608      	mov	r0, r1
 8012cbc:	4611      	mov	r1, r2
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	602a      	str	r2, [r5, #0]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	f7f1 ffe6 	bl	8004c94 <_lseek>
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	d102      	bne.n	8012cd2 <_lseek_r+0x1e>
 8012ccc:	682b      	ldr	r3, [r5, #0]
 8012cce:	b103      	cbz	r3, 8012cd2 <_lseek_r+0x1e>
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	20009954 	.word	0x20009954

08012cd8 <_read_r>:
 8012cd8:	b538      	push	{r3, r4, r5, lr}
 8012cda:	4d07      	ldr	r5, [pc, #28]	; (8012cf8 <_read_r+0x20>)
 8012cdc:	4604      	mov	r4, r0
 8012cde:	4608      	mov	r0, r1
 8012ce0:	4611      	mov	r1, r2
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	602a      	str	r2, [r5, #0]
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	f7f1 ff74 	bl	8004bd4 <_read>
 8012cec:	1c43      	adds	r3, r0, #1
 8012cee:	d102      	bne.n	8012cf6 <_read_r+0x1e>
 8012cf0:	682b      	ldr	r3, [r5, #0]
 8012cf2:	b103      	cbz	r3, 8012cf6 <_read_r+0x1e>
 8012cf4:	6023      	str	r3, [r4, #0]
 8012cf6:	bd38      	pop	{r3, r4, r5, pc}
 8012cf8:	20009954 	.word	0x20009954

08012cfc <_write_r>:
 8012cfc:	b538      	push	{r3, r4, r5, lr}
 8012cfe:	4d07      	ldr	r5, [pc, #28]	; (8012d1c <_write_r+0x20>)
 8012d00:	4604      	mov	r4, r0
 8012d02:	4608      	mov	r0, r1
 8012d04:	4611      	mov	r1, r2
 8012d06:	2200      	movs	r2, #0
 8012d08:	602a      	str	r2, [r5, #0]
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	f7f1 ff7f 	bl	8004c0e <_write>
 8012d10:	1c43      	adds	r3, r0, #1
 8012d12:	d102      	bne.n	8012d1a <_write_r+0x1e>
 8012d14:	682b      	ldr	r3, [r5, #0]
 8012d16:	b103      	cbz	r3, 8012d1a <_write_r+0x1e>
 8012d18:	6023      	str	r3, [r4, #0]
 8012d1a:	bd38      	pop	{r3, r4, r5, pc}
 8012d1c:	20009954 	.word	0x20009954

08012d20 <__errno>:
 8012d20:	4b01      	ldr	r3, [pc, #4]	; (8012d28 <__errno+0x8>)
 8012d22:	6818      	ldr	r0, [r3, #0]
 8012d24:	4770      	bx	lr
 8012d26:	bf00      	nop
 8012d28:	2000043c 	.word	0x2000043c

08012d2c <__libc_init_array>:
 8012d2c:	b570      	push	{r4, r5, r6, lr}
 8012d2e:	4d0d      	ldr	r5, [pc, #52]	; (8012d64 <__libc_init_array+0x38>)
 8012d30:	4c0d      	ldr	r4, [pc, #52]	; (8012d68 <__libc_init_array+0x3c>)
 8012d32:	1b64      	subs	r4, r4, r5
 8012d34:	10a4      	asrs	r4, r4, #2
 8012d36:	2600      	movs	r6, #0
 8012d38:	42a6      	cmp	r6, r4
 8012d3a:	d109      	bne.n	8012d50 <__libc_init_array+0x24>
 8012d3c:	4d0b      	ldr	r5, [pc, #44]	; (8012d6c <__libc_init_array+0x40>)
 8012d3e:	4c0c      	ldr	r4, [pc, #48]	; (8012d70 <__libc_init_array+0x44>)
 8012d40:	f001 fdde 	bl	8014900 <_init>
 8012d44:	1b64      	subs	r4, r4, r5
 8012d46:	10a4      	asrs	r4, r4, #2
 8012d48:	2600      	movs	r6, #0
 8012d4a:	42a6      	cmp	r6, r4
 8012d4c:	d105      	bne.n	8012d5a <__libc_init_array+0x2e>
 8012d4e:	bd70      	pop	{r4, r5, r6, pc}
 8012d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d54:	4798      	blx	r3
 8012d56:	3601      	adds	r6, #1
 8012d58:	e7ee      	b.n	8012d38 <__libc_init_array+0xc>
 8012d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d5e:	4798      	blx	r3
 8012d60:	3601      	adds	r6, #1
 8012d62:	e7f2      	b.n	8012d4a <__libc_init_array+0x1e>
 8012d64:	080167bc 	.word	0x080167bc
 8012d68:	080167bc 	.word	0x080167bc
 8012d6c:	080167bc 	.word	0x080167bc
 8012d70:	080167c0 	.word	0x080167c0

08012d74 <__retarget_lock_init_recursive>:
 8012d74:	4770      	bx	lr

08012d76 <__retarget_lock_acquire_recursive>:
 8012d76:	4770      	bx	lr

08012d78 <__retarget_lock_release_recursive>:
 8012d78:	4770      	bx	lr

08012d7a <memcpy>:
 8012d7a:	440a      	add	r2, r1
 8012d7c:	4291      	cmp	r1, r2
 8012d7e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012d82:	d100      	bne.n	8012d86 <memcpy+0xc>
 8012d84:	4770      	bx	lr
 8012d86:	b510      	push	{r4, lr}
 8012d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d90:	4291      	cmp	r1, r2
 8012d92:	d1f9      	bne.n	8012d88 <memcpy+0xe>
 8012d94:	bd10      	pop	{r4, pc}

08012d96 <quorem>:
 8012d96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d9a:	6903      	ldr	r3, [r0, #16]
 8012d9c:	690c      	ldr	r4, [r1, #16]
 8012d9e:	42a3      	cmp	r3, r4
 8012da0:	4607      	mov	r7, r0
 8012da2:	db7e      	blt.n	8012ea2 <quorem+0x10c>
 8012da4:	3c01      	subs	r4, #1
 8012da6:	f101 0814 	add.w	r8, r1, #20
 8012daa:	f100 0514 	add.w	r5, r0, #20
 8012dae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012db2:	9301      	str	r3, [sp, #4]
 8012db4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012db8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012dc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012dc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8012dcc:	d331      	bcc.n	8012e32 <quorem+0x9c>
 8012dce:	f04f 0e00 	mov.w	lr, #0
 8012dd2:	4640      	mov	r0, r8
 8012dd4:	46ac      	mov	ip, r5
 8012dd6:	46f2      	mov	sl, lr
 8012dd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ddc:	b293      	uxth	r3, r2
 8012dde:	fb06 e303 	mla	r3, r6, r3, lr
 8012de2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012de6:	0c1a      	lsrs	r2, r3, #16
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	ebaa 0303 	sub.w	r3, sl, r3
 8012dee:	f8dc a000 	ldr.w	sl, [ip]
 8012df2:	fa13 f38a 	uxtah	r3, r3, sl
 8012df6:	fb06 220e 	mla	r2, r6, lr, r2
 8012dfa:	9300      	str	r3, [sp, #0]
 8012dfc:	9b00      	ldr	r3, [sp, #0]
 8012dfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012e02:	b292      	uxth	r2, r2
 8012e04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8012e10:	4581      	cmp	r9, r0
 8012e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e16:	f84c 3b04 	str.w	r3, [ip], #4
 8012e1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012e1e:	d2db      	bcs.n	8012dd8 <quorem+0x42>
 8012e20:	f855 300b 	ldr.w	r3, [r5, fp]
 8012e24:	b92b      	cbnz	r3, 8012e32 <quorem+0x9c>
 8012e26:	9b01      	ldr	r3, [sp, #4]
 8012e28:	3b04      	subs	r3, #4
 8012e2a:	429d      	cmp	r5, r3
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	d32c      	bcc.n	8012e8a <quorem+0xf4>
 8012e30:	613c      	str	r4, [r7, #16]
 8012e32:	4638      	mov	r0, r7
 8012e34:	f001 f9a6 	bl	8014184 <__mcmp>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	db22      	blt.n	8012e82 <quorem+0xec>
 8012e3c:	3601      	adds	r6, #1
 8012e3e:	4629      	mov	r1, r5
 8012e40:	2000      	movs	r0, #0
 8012e42:	f858 2b04 	ldr.w	r2, [r8], #4
 8012e46:	f8d1 c000 	ldr.w	ip, [r1]
 8012e4a:	b293      	uxth	r3, r2
 8012e4c:	1ac3      	subs	r3, r0, r3
 8012e4e:	0c12      	lsrs	r2, r2, #16
 8012e50:	fa13 f38c 	uxtah	r3, r3, ip
 8012e54:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e62:	45c1      	cmp	r9, r8
 8012e64:	f841 3b04 	str.w	r3, [r1], #4
 8012e68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012e6c:	d2e9      	bcs.n	8012e42 <quorem+0xac>
 8012e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e76:	b922      	cbnz	r2, 8012e82 <quorem+0xec>
 8012e78:	3b04      	subs	r3, #4
 8012e7a:	429d      	cmp	r5, r3
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	d30a      	bcc.n	8012e96 <quorem+0x100>
 8012e80:	613c      	str	r4, [r7, #16]
 8012e82:	4630      	mov	r0, r6
 8012e84:	b003      	add	sp, #12
 8012e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e8a:	6812      	ldr	r2, [r2, #0]
 8012e8c:	3b04      	subs	r3, #4
 8012e8e:	2a00      	cmp	r2, #0
 8012e90:	d1ce      	bne.n	8012e30 <quorem+0x9a>
 8012e92:	3c01      	subs	r4, #1
 8012e94:	e7c9      	b.n	8012e2a <quorem+0x94>
 8012e96:	6812      	ldr	r2, [r2, #0]
 8012e98:	3b04      	subs	r3, #4
 8012e9a:	2a00      	cmp	r2, #0
 8012e9c:	d1f0      	bne.n	8012e80 <quorem+0xea>
 8012e9e:	3c01      	subs	r4, #1
 8012ea0:	e7eb      	b.n	8012e7a <quorem+0xe4>
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	e7ee      	b.n	8012e84 <quorem+0xee>
	...

08012ea8 <_dtoa_r>:
 8012ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eac:	ed2d 8b04 	vpush	{d8-d9}
 8012eb0:	69c5      	ldr	r5, [r0, #28]
 8012eb2:	b093      	sub	sp, #76	; 0x4c
 8012eb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012eb8:	ec57 6b10 	vmov	r6, r7, d0
 8012ebc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012ec0:	9107      	str	r1, [sp, #28]
 8012ec2:	4604      	mov	r4, r0
 8012ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8012ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8012ec8:	b975      	cbnz	r5, 8012ee8 <_dtoa_r+0x40>
 8012eca:	2010      	movs	r0, #16
 8012ecc:	f000 fe2a 	bl	8013b24 <malloc>
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	61e0      	str	r0, [r4, #28]
 8012ed4:	b920      	cbnz	r0, 8012ee0 <_dtoa_r+0x38>
 8012ed6:	4bae      	ldr	r3, [pc, #696]	; (8013190 <_dtoa_r+0x2e8>)
 8012ed8:	21ef      	movs	r1, #239	; 0xef
 8012eda:	48ae      	ldr	r0, [pc, #696]	; (8013194 <_dtoa_r+0x2ec>)
 8012edc:	f001 fc5e 	bl	801479c <__assert_func>
 8012ee0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012ee4:	6005      	str	r5, [r0, #0]
 8012ee6:	60c5      	str	r5, [r0, #12]
 8012ee8:	69e3      	ldr	r3, [r4, #28]
 8012eea:	6819      	ldr	r1, [r3, #0]
 8012eec:	b151      	cbz	r1, 8012f04 <_dtoa_r+0x5c>
 8012eee:	685a      	ldr	r2, [r3, #4]
 8012ef0:	604a      	str	r2, [r1, #4]
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	4093      	lsls	r3, r2
 8012ef6:	608b      	str	r3, [r1, #8]
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f000 ff07 	bl	8013d0c <_Bfree>
 8012efe:	69e3      	ldr	r3, [r4, #28]
 8012f00:	2200      	movs	r2, #0
 8012f02:	601a      	str	r2, [r3, #0]
 8012f04:	1e3b      	subs	r3, r7, #0
 8012f06:	bfbb      	ittet	lt
 8012f08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012f0c:	9303      	strlt	r3, [sp, #12]
 8012f0e:	2300      	movge	r3, #0
 8012f10:	2201      	movlt	r2, #1
 8012f12:	bfac      	ite	ge
 8012f14:	f8c8 3000 	strge.w	r3, [r8]
 8012f18:	f8c8 2000 	strlt.w	r2, [r8]
 8012f1c:	4b9e      	ldr	r3, [pc, #632]	; (8013198 <_dtoa_r+0x2f0>)
 8012f1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012f22:	ea33 0308 	bics.w	r3, r3, r8
 8012f26:	d11b      	bne.n	8012f60 <_dtoa_r+0xb8>
 8012f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012f2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8012f2e:	6013      	str	r3, [r2, #0]
 8012f30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012f34:	4333      	orrs	r3, r6
 8012f36:	f000 8593 	beq.w	8013a60 <_dtoa_r+0xbb8>
 8012f3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f3c:	b963      	cbnz	r3, 8012f58 <_dtoa_r+0xb0>
 8012f3e:	4b97      	ldr	r3, [pc, #604]	; (801319c <_dtoa_r+0x2f4>)
 8012f40:	e027      	b.n	8012f92 <_dtoa_r+0xea>
 8012f42:	4b97      	ldr	r3, [pc, #604]	; (80131a0 <_dtoa_r+0x2f8>)
 8012f44:	9300      	str	r3, [sp, #0]
 8012f46:	3308      	adds	r3, #8
 8012f48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012f4a:	6013      	str	r3, [r2, #0]
 8012f4c:	9800      	ldr	r0, [sp, #0]
 8012f4e:	b013      	add	sp, #76	; 0x4c
 8012f50:	ecbd 8b04 	vpop	{d8-d9}
 8012f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f58:	4b90      	ldr	r3, [pc, #576]	; (801319c <_dtoa_r+0x2f4>)
 8012f5a:	9300      	str	r3, [sp, #0]
 8012f5c:	3303      	adds	r3, #3
 8012f5e:	e7f3      	b.n	8012f48 <_dtoa_r+0xa0>
 8012f60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012f64:	2200      	movs	r2, #0
 8012f66:	ec51 0b17 	vmov	r0, r1, d7
 8012f6a:	eeb0 8a47 	vmov.f32	s16, s14
 8012f6e:	eef0 8a67 	vmov.f32	s17, s15
 8012f72:	2300      	movs	r3, #0
 8012f74:	f7ed fdb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8012f78:	4681      	mov	r9, r0
 8012f7a:	b160      	cbz	r0, 8012f96 <_dtoa_r+0xee>
 8012f7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012f7e:	2301      	movs	r3, #1
 8012f80:	6013      	str	r3, [r2, #0]
 8012f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f000 8568 	beq.w	8013a5a <_dtoa_r+0xbb2>
 8012f8a:	4b86      	ldr	r3, [pc, #536]	; (80131a4 <_dtoa_r+0x2fc>)
 8012f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012f8e:	6013      	str	r3, [r2, #0]
 8012f90:	3b01      	subs	r3, #1
 8012f92:	9300      	str	r3, [sp, #0]
 8012f94:	e7da      	b.n	8012f4c <_dtoa_r+0xa4>
 8012f96:	aa10      	add	r2, sp, #64	; 0x40
 8012f98:	a911      	add	r1, sp, #68	; 0x44
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8012fa0:	eef0 0a68 	vmov.f32	s1, s17
 8012fa4:	f001 f994 	bl	80142d0 <__d2b>
 8012fa8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012fac:	4682      	mov	sl, r0
 8012fae:	2d00      	cmp	r5, #0
 8012fb0:	d07f      	beq.n	80130b2 <_dtoa_r+0x20a>
 8012fb2:	ee18 3a90 	vmov	r3, s17
 8012fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012fba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012fbe:	ec51 0b18 	vmov	r0, r1, d8
 8012fc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012fca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012fce:	4619      	mov	r1, r3
 8012fd0:	2200      	movs	r2, #0
 8012fd2:	4b75      	ldr	r3, [pc, #468]	; (80131a8 <_dtoa_r+0x300>)
 8012fd4:	f7ed f968 	bl	80002a8 <__aeabi_dsub>
 8012fd8:	a367      	add	r3, pc, #412	; (adr r3, 8013178 <_dtoa_r+0x2d0>)
 8012fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fde:	f7ed fb1b 	bl	8000618 <__aeabi_dmul>
 8012fe2:	a367      	add	r3, pc, #412	; (adr r3, 8013180 <_dtoa_r+0x2d8>)
 8012fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe8:	f7ed f960 	bl	80002ac <__adddf3>
 8012fec:	4606      	mov	r6, r0
 8012fee:	4628      	mov	r0, r5
 8012ff0:	460f      	mov	r7, r1
 8012ff2:	f7ed faa7 	bl	8000544 <__aeabi_i2d>
 8012ff6:	a364      	add	r3, pc, #400	; (adr r3, 8013188 <_dtoa_r+0x2e0>)
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	f7ed fb0c 	bl	8000618 <__aeabi_dmul>
 8013000:	4602      	mov	r2, r0
 8013002:	460b      	mov	r3, r1
 8013004:	4630      	mov	r0, r6
 8013006:	4639      	mov	r1, r7
 8013008:	f7ed f950 	bl	80002ac <__adddf3>
 801300c:	4606      	mov	r6, r0
 801300e:	460f      	mov	r7, r1
 8013010:	f7ed fdb2 	bl	8000b78 <__aeabi_d2iz>
 8013014:	2200      	movs	r2, #0
 8013016:	4683      	mov	fp, r0
 8013018:	2300      	movs	r3, #0
 801301a:	4630      	mov	r0, r6
 801301c:	4639      	mov	r1, r7
 801301e:	f7ed fd6d 	bl	8000afc <__aeabi_dcmplt>
 8013022:	b148      	cbz	r0, 8013038 <_dtoa_r+0x190>
 8013024:	4658      	mov	r0, fp
 8013026:	f7ed fa8d 	bl	8000544 <__aeabi_i2d>
 801302a:	4632      	mov	r2, r6
 801302c:	463b      	mov	r3, r7
 801302e:	f7ed fd5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8013032:	b908      	cbnz	r0, 8013038 <_dtoa_r+0x190>
 8013034:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013038:	f1bb 0f16 	cmp.w	fp, #22
 801303c:	d857      	bhi.n	80130ee <_dtoa_r+0x246>
 801303e:	4b5b      	ldr	r3, [pc, #364]	; (80131ac <_dtoa_r+0x304>)
 8013040:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013048:	ec51 0b18 	vmov	r0, r1, d8
 801304c:	f7ed fd56 	bl	8000afc <__aeabi_dcmplt>
 8013050:	2800      	cmp	r0, #0
 8013052:	d04e      	beq.n	80130f2 <_dtoa_r+0x24a>
 8013054:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013058:	2300      	movs	r3, #0
 801305a:	930c      	str	r3, [sp, #48]	; 0x30
 801305c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801305e:	1b5b      	subs	r3, r3, r5
 8013060:	1e5a      	subs	r2, r3, #1
 8013062:	bf45      	ittet	mi
 8013064:	f1c3 0301 	rsbmi	r3, r3, #1
 8013068:	9305      	strmi	r3, [sp, #20]
 801306a:	2300      	movpl	r3, #0
 801306c:	2300      	movmi	r3, #0
 801306e:	9206      	str	r2, [sp, #24]
 8013070:	bf54      	ite	pl
 8013072:	9305      	strpl	r3, [sp, #20]
 8013074:	9306      	strmi	r3, [sp, #24]
 8013076:	f1bb 0f00 	cmp.w	fp, #0
 801307a:	db3c      	blt.n	80130f6 <_dtoa_r+0x24e>
 801307c:	9b06      	ldr	r3, [sp, #24]
 801307e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013082:	445b      	add	r3, fp
 8013084:	9306      	str	r3, [sp, #24]
 8013086:	2300      	movs	r3, #0
 8013088:	9308      	str	r3, [sp, #32]
 801308a:	9b07      	ldr	r3, [sp, #28]
 801308c:	2b09      	cmp	r3, #9
 801308e:	d868      	bhi.n	8013162 <_dtoa_r+0x2ba>
 8013090:	2b05      	cmp	r3, #5
 8013092:	bfc4      	itt	gt
 8013094:	3b04      	subgt	r3, #4
 8013096:	9307      	strgt	r3, [sp, #28]
 8013098:	9b07      	ldr	r3, [sp, #28]
 801309a:	f1a3 0302 	sub.w	r3, r3, #2
 801309e:	bfcc      	ite	gt
 80130a0:	2500      	movgt	r5, #0
 80130a2:	2501      	movle	r5, #1
 80130a4:	2b03      	cmp	r3, #3
 80130a6:	f200 8085 	bhi.w	80131b4 <_dtoa_r+0x30c>
 80130aa:	e8df f003 	tbb	[pc, r3]
 80130ae:	3b2e      	.short	0x3b2e
 80130b0:	5839      	.short	0x5839
 80130b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80130b6:	441d      	add	r5, r3
 80130b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80130bc:	2b20      	cmp	r3, #32
 80130be:	bfc1      	itttt	gt
 80130c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80130c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80130c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80130cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80130d0:	bfd6      	itet	le
 80130d2:	f1c3 0320 	rsble	r3, r3, #32
 80130d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80130da:	fa06 f003 	lslle.w	r0, r6, r3
 80130de:	f7ed fa21 	bl	8000524 <__aeabi_ui2d>
 80130e2:	2201      	movs	r2, #1
 80130e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80130e8:	3d01      	subs	r5, #1
 80130ea:	920e      	str	r2, [sp, #56]	; 0x38
 80130ec:	e76f      	b.n	8012fce <_dtoa_r+0x126>
 80130ee:	2301      	movs	r3, #1
 80130f0:	e7b3      	b.n	801305a <_dtoa_r+0x1b2>
 80130f2:	900c      	str	r0, [sp, #48]	; 0x30
 80130f4:	e7b2      	b.n	801305c <_dtoa_r+0x1b4>
 80130f6:	9b05      	ldr	r3, [sp, #20]
 80130f8:	eba3 030b 	sub.w	r3, r3, fp
 80130fc:	9305      	str	r3, [sp, #20]
 80130fe:	f1cb 0300 	rsb	r3, fp, #0
 8013102:	9308      	str	r3, [sp, #32]
 8013104:	2300      	movs	r3, #0
 8013106:	930b      	str	r3, [sp, #44]	; 0x2c
 8013108:	e7bf      	b.n	801308a <_dtoa_r+0x1e2>
 801310a:	2300      	movs	r3, #0
 801310c:	9309      	str	r3, [sp, #36]	; 0x24
 801310e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013110:	2b00      	cmp	r3, #0
 8013112:	dc52      	bgt.n	80131ba <_dtoa_r+0x312>
 8013114:	2301      	movs	r3, #1
 8013116:	9301      	str	r3, [sp, #4]
 8013118:	9304      	str	r3, [sp, #16]
 801311a:	461a      	mov	r2, r3
 801311c:	920a      	str	r2, [sp, #40]	; 0x28
 801311e:	e00b      	b.n	8013138 <_dtoa_r+0x290>
 8013120:	2301      	movs	r3, #1
 8013122:	e7f3      	b.n	801310c <_dtoa_r+0x264>
 8013124:	2300      	movs	r3, #0
 8013126:	9309      	str	r3, [sp, #36]	; 0x24
 8013128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801312a:	445b      	add	r3, fp
 801312c:	9301      	str	r3, [sp, #4]
 801312e:	3301      	adds	r3, #1
 8013130:	2b01      	cmp	r3, #1
 8013132:	9304      	str	r3, [sp, #16]
 8013134:	bfb8      	it	lt
 8013136:	2301      	movlt	r3, #1
 8013138:	69e0      	ldr	r0, [r4, #28]
 801313a:	2100      	movs	r1, #0
 801313c:	2204      	movs	r2, #4
 801313e:	f102 0614 	add.w	r6, r2, #20
 8013142:	429e      	cmp	r6, r3
 8013144:	d93d      	bls.n	80131c2 <_dtoa_r+0x31a>
 8013146:	6041      	str	r1, [r0, #4]
 8013148:	4620      	mov	r0, r4
 801314a:	f000 fd9f 	bl	8013c8c <_Balloc>
 801314e:	9000      	str	r0, [sp, #0]
 8013150:	2800      	cmp	r0, #0
 8013152:	d139      	bne.n	80131c8 <_dtoa_r+0x320>
 8013154:	4b16      	ldr	r3, [pc, #88]	; (80131b0 <_dtoa_r+0x308>)
 8013156:	4602      	mov	r2, r0
 8013158:	f240 11af 	movw	r1, #431	; 0x1af
 801315c:	e6bd      	b.n	8012eda <_dtoa_r+0x32>
 801315e:	2301      	movs	r3, #1
 8013160:	e7e1      	b.n	8013126 <_dtoa_r+0x27e>
 8013162:	2501      	movs	r5, #1
 8013164:	2300      	movs	r3, #0
 8013166:	9307      	str	r3, [sp, #28]
 8013168:	9509      	str	r5, [sp, #36]	; 0x24
 801316a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801316e:	9301      	str	r3, [sp, #4]
 8013170:	9304      	str	r3, [sp, #16]
 8013172:	2200      	movs	r2, #0
 8013174:	2312      	movs	r3, #18
 8013176:	e7d1      	b.n	801311c <_dtoa_r+0x274>
 8013178:	636f4361 	.word	0x636f4361
 801317c:	3fd287a7 	.word	0x3fd287a7
 8013180:	8b60c8b3 	.word	0x8b60c8b3
 8013184:	3fc68a28 	.word	0x3fc68a28
 8013188:	509f79fb 	.word	0x509f79fb
 801318c:	3fd34413 	.word	0x3fd34413
 8013190:	08016582 	.word	0x08016582
 8013194:	08016599 	.word	0x08016599
 8013198:	7ff00000 	.word	0x7ff00000
 801319c:	0801657e 	.word	0x0801657e
 80131a0:	08016575 	.word	0x08016575
 80131a4:	08016552 	.word	0x08016552
 80131a8:	3ff80000 	.word	0x3ff80000
 80131ac:	08016688 	.word	0x08016688
 80131b0:	080165f1 	.word	0x080165f1
 80131b4:	2301      	movs	r3, #1
 80131b6:	9309      	str	r3, [sp, #36]	; 0x24
 80131b8:	e7d7      	b.n	801316a <_dtoa_r+0x2c2>
 80131ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131bc:	9301      	str	r3, [sp, #4]
 80131be:	9304      	str	r3, [sp, #16]
 80131c0:	e7ba      	b.n	8013138 <_dtoa_r+0x290>
 80131c2:	3101      	adds	r1, #1
 80131c4:	0052      	lsls	r2, r2, #1
 80131c6:	e7ba      	b.n	801313e <_dtoa_r+0x296>
 80131c8:	69e3      	ldr	r3, [r4, #28]
 80131ca:	9a00      	ldr	r2, [sp, #0]
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	9b04      	ldr	r3, [sp, #16]
 80131d0:	2b0e      	cmp	r3, #14
 80131d2:	f200 80a8 	bhi.w	8013326 <_dtoa_r+0x47e>
 80131d6:	2d00      	cmp	r5, #0
 80131d8:	f000 80a5 	beq.w	8013326 <_dtoa_r+0x47e>
 80131dc:	f1bb 0f00 	cmp.w	fp, #0
 80131e0:	dd38      	ble.n	8013254 <_dtoa_r+0x3ac>
 80131e2:	4bc0      	ldr	r3, [pc, #768]	; (80134e4 <_dtoa_r+0x63c>)
 80131e4:	f00b 020f 	and.w	r2, fp, #15
 80131e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80131f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80131f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80131f8:	d019      	beq.n	801322e <_dtoa_r+0x386>
 80131fa:	4bbb      	ldr	r3, [pc, #748]	; (80134e8 <_dtoa_r+0x640>)
 80131fc:	ec51 0b18 	vmov	r0, r1, d8
 8013200:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013204:	f7ed fb32 	bl	800086c <__aeabi_ddiv>
 8013208:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801320c:	f008 080f 	and.w	r8, r8, #15
 8013210:	2503      	movs	r5, #3
 8013212:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80134e8 <_dtoa_r+0x640>
 8013216:	f1b8 0f00 	cmp.w	r8, #0
 801321a:	d10a      	bne.n	8013232 <_dtoa_r+0x38a>
 801321c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013220:	4632      	mov	r2, r6
 8013222:	463b      	mov	r3, r7
 8013224:	f7ed fb22 	bl	800086c <__aeabi_ddiv>
 8013228:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801322c:	e02b      	b.n	8013286 <_dtoa_r+0x3de>
 801322e:	2502      	movs	r5, #2
 8013230:	e7ef      	b.n	8013212 <_dtoa_r+0x36a>
 8013232:	f018 0f01 	tst.w	r8, #1
 8013236:	d008      	beq.n	801324a <_dtoa_r+0x3a2>
 8013238:	4630      	mov	r0, r6
 801323a:	4639      	mov	r1, r7
 801323c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013240:	f7ed f9ea 	bl	8000618 <__aeabi_dmul>
 8013244:	3501      	adds	r5, #1
 8013246:	4606      	mov	r6, r0
 8013248:	460f      	mov	r7, r1
 801324a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801324e:	f109 0908 	add.w	r9, r9, #8
 8013252:	e7e0      	b.n	8013216 <_dtoa_r+0x36e>
 8013254:	f000 809f 	beq.w	8013396 <_dtoa_r+0x4ee>
 8013258:	f1cb 0600 	rsb	r6, fp, #0
 801325c:	4ba1      	ldr	r3, [pc, #644]	; (80134e4 <_dtoa_r+0x63c>)
 801325e:	4fa2      	ldr	r7, [pc, #648]	; (80134e8 <_dtoa_r+0x640>)
 8013260:	f006 020f 	and.w	r2, r6, #15
 8013264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326c:	ec51 0b18 	vmov	r0, r1, d8
 8013270:	f7ed f9d2 	bl	8000618 <__aeabi_dmul>
 8013274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013278:	1136      	asrs	r6, r6, #4
 801327a:	2300      	movs	r3, #0
 801327c:	2502      	movs	r5, #2
 801327e:	2e00      	cmp	r6, #0
 8013280:	d17e      	bne.n	8013380 <_dtoa_r+0x4d8>
 8013282:	2b00      	cmp	r3, #0
 8013284:	d1d0      	bne.n	8013228 <_dtoa_r+0x380>
 8013286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013288:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801328c:	2b00      	cmp	r3, #0
 801328e:	f000 8084 	beq.w	801339a <_dtoa_r+0x4f2>
 8013292:	4b96      	ldr	r3, [pc, #600]	; (80134ec <_dtoa_r+0x644>)
 8013294:	2200      	movs	r2, #0
 8013296:	4640      	mov	r0, r8
 8013298:	4649      	mov	r1, r9
 801329a:	f7ed fc2f 	bl	8000afc <__aeabi_dcmplt>
 801329e:	2800      	cmp	r0, #0
 80132a0:	d07b      	beq.n	801339a <_dtoa_r+0x4f2>
 80132a2:	9b04      	ldr	r3, [sp, #16]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d078      	beq.n	801339a <_dtoa_r+0x4f2>
 80132a8:	9b01      	ldr	r3, [sp, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	dd39      	ble.n	8013322 <_dtoa_r+0x47a>
 80132ae:	4b90      	ldr	r3, [pc, #576]	; (80134f0 <_dtoa_r+0x648>)
 80132b0:	2200      	movs	r2, #0
 80132b2:	4640      	mov	r0, r8
 80132b4:	4649      	mov	r1, r9
 80132b6:	f7ed f9af 	bl	8000618 <__aeabi_dmul>
 80132ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132be:	9e01      	ldr	r6, [sp, #4]
 80132c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80132c4:	3501      	adds	r5, #1
 80132c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80132ca:	4628      	mov	r0, r5
 80132cc:	f7ed f93a 	bl	8000544 <__aeabi_i2d>
 80132d0:	4642      	mov	r2, r8
 80132d2:	464b      	mov	r3, r9
 80132d4:	f7ed f9a0 	bl	8000618 <__aeabi_dmul>
 80132d8:	4b86      	ldr	r3, [pc, #536]	; (80134f4 <_dtoa_r+0x64c>)
 80132da:	2200      	movs	r2, #0
 80132dc:	f7ec ffe6 	bl	80002ac <__adddf3>
 80132e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80132e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132e8:	9303      	str	r3, [sp, #12]
 80132ea:	2e00      	cmp	r6, #0
 80132ec:	d158      	bne.n	80133a0 <_dtoa_r+0x4f8>
 80132ee:	4b82      	ldr	r3, [pc, #520]	; (80134f8 <_dtoa_r+0x650>)
 80132f0:	2200      	movs	r2, #0
 80132f2:	4640      	mov	r0, r8
 80132f4:	4649      	mov	r1, r9
 80132f6:	f7ec ffd7 	bl	80002a8 <__aeabi_dsub>
 80132fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132fe:	4680      	mov	r8, r0
 8013300:	4689      	mov	r9, r1
 8013302:	f7ed fc19 	bl	8000b38 <__aeabi_dcmpgt>
 8013306:	2800      	cmp	r0, #0
 8013308:	f040 8296 	bne.w	8013838 <_dtoa_r+0x990>
 801330c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013310:	4640      	mov	r0, r8
 8013312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013316:	4649      	mov	r1, r9
 8013318:	f7ed fbf0 	bl	8000afc <__aeabi_dcmplt>
 801331c:	2800      	cmp	r0, #0
 801331e:	f040 8289 	bne.w	8013834 <_dtoa_r+0x98c>
 8013322:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013328:	2b00      	cmp	r3, #0
 801332a:	f2c0 814e 	blt.w	80135ca <_dtoa_r+0x722>
 801332e:	f1bb 0f0e 	cmp.w	fp, #14
 8013332:	f300 814a 	bgt.w	80135ca <_dtoa_r+0x722>
 8013336:	4b6b      	ldr	r3, [pc, #428]	; (80134e4 <_dtoa_r+0x63c>)
 8013338:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801333c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013342:	2b00      	cmp	r3, #0
 8013344:	f280 80dc 	bge.w	8013500 <_dtoa_r+0x658>
 8013348:	9b04      	ldr	r3, [sp, #16]
 801334a:	2b00      	cmp	r3, #0
 801334c:	f300 80d8 	bgt.w	8013500 <_dtoa_r+0x658>
 8013350:	f040 826f 	bne.w	8013832 <_dtoa_r+0x98a>
 8013354:	4b68      	ldr	r3, [pc, #416]	; (80134f8 <_dtoa_r+0x650>)
 8013356:	2200      	movs	r2, #0
 8013358:	4640      	mov	r0, r8
 801335a:	4649      	mov	r1, r9
 801335c:	f7ed f95c 	bl	8000618 <__aeabi_dmul>
 8013360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013364:	f7ed fbde 	bl	8000b24 <__aeabi_dcmpge>
 8013368:	9e04      	ldr	r6, [sp, #16]
 801336a:	4637      	mov	r7, r6
 801336c:	2800      	cmp	r0, #0
 801336e:	f040 8245 	bne.w	80137fc <_dtoa_r+0x954>
 8013372:	9d00      	ldr	r5, [sp, #0]
 8013374:	2331      	movs	r3, #49	; 0x31
 8013376:	f805 3b01 	strb.w	r3, [r5], #1
 801337a:	f10b 0b01 	add.w	fp, fp, #1
 801337e:	e241      	b.n	8013804 <_dtoa_r+0x95c>
 8013380:	07f2      	lsls	r2, r6, #31
 8013382:	d505      	bpl.n	8013390 <_dtoa_r+0x4e8>
 8013384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013388:	f7ed f946 	bl	8000618 <__aeabi_dmul>
 801338c:	3501      	adds	r5, #1
 801338e:	2301      	movs	r3, #1
 8013390:	1076      	asrs	r6, r6, #1
 8013392:	3708      	adds	r7, #8
 8013394:	e773      	b.n	801327e <_dtoa_r+0x3d6>
 8013396:	2502      	movs	r5, #2
 8013398:	e775      	b.n	8013286 <_dtoa_r+0x3de>
 801339a:	9e04      	ldr	r6, [sp, #16]
 801339c:	465f      	mov	r7, fp
 801339e:	e792      	b.n	80132c6 <_dtoa_r+0x41e>
 80133a0:	9900      	ldr	r1, [sp, #0]
 80133a2:	4b50      	ldr	r3, [pc, #320]	; (80134e4 <_dtoa_r+0x63c>)
 80133a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80133a8:	4431      	add	r1, r6
 80133aa:	9102      	str	r1, [sp, #8]
 80133ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133ae:	eeb0 9a47 	vmov.f32	s18, s14
 80133b2:	eef0 9a67 	vmov.f32	s19, s15
 80133b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80133ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80133be:	2900      	cmp	r1, #0
 80133c0:	d044      	beq.n	801344c <_dtoa_r+0x5a4>
 80133c2:	494e      	ldr	r1, [pc, #312]	; (80134fc <_dtoa_r+0x654>)
 80133c4:	2000      	movs	r0, #0
 80133c6:	f7ed fa51 	bl	800086c <__aeabi_ddiv>
 80133ca:	ec53 2b19 	vmov	r2, r3, d9
 80133ce:	f7ec ff6b 	bl	80002a8 <__aeabi_dsub>
 80133d2:	9d00      	ldr	r5, [sp, #0]
 80133d4:	ec41 0b19 	vmov	d9, r0, r1
 80133d8:	4649      	mov	r1, r9
 80133da:	4640      	mov	r0, r8
 80133dc:	f7ed fbcc 	bl	8000b78 <__aeabi_d2iz>
 80133e0:	4606      	mov	r6, r0
 80133e2:	f7ed f8af 	bl	8000544 <__aeabi_i2d>
 80133e6:	4602      	mov	r2, r0
 80133e8:	460b      	mov	r3, r1
 80133ea:	4640      	mov	r0, r8
 80133ec:	4649      	mov	r1, r9
 80133ee:	f7ec ff5b 	bl	80002a8 <__aeabi_dsub>
 80133f2:	3630      	adds	r6, #48	; 0x30
 80133f4:	f805 6b01 	strb.w	r6, [r5], #1
 80133f8:	ec53 2b19 	vmov	r2, r3, d9
 80133fc:	4680      	mov	r8, r0
 80133fe:	4689      	mov	r9, r1
 8013400:	f7ed fb7c 	bl	8000afc <__aeabi_dcmplt>
 8013404:	2800      	cmp	r0, #0
 8013406:	d164      	bne.n	80134d2 <_dtoa_r+0x62a>
 8013408:	4642      	mov	r2, r8
 801340a:	464b      	mov	r3, r9
 801340c:	4937      	ldr	r1, [pc, #220]	; (80134ec <_dtoa_r+0x644>)
 801340e:	2000      	movs	r0, #0
 8013410:	f7ec ff4a 	bl	80002a8 <__aeabi_dsub>
 8013414:	ec53 2b19 	vmov	r2, r3, d9
 8013418:	f7ed fb70 	bl	8000afc <__aeabi_dcmplt>
 801341c:	2800      	cmp	r0, #0
 801341e:	f040 80b6 	bne.w	801358e <_dtoa_r+0x6e6>
 8013422:	9b02      	ldr	r3, [sp, #8]
 8013424:	429d      	cmp	r5, r3
 8013426:	f43f af7c 	beq.w	8013322 <_dtoa_r+0x47a>
 801342a:	4b31      	ldr	r3, [pc, #196]	; (80134f0 <_dtoa_r+0x648>)
 801342c:	ec51 0b19 	vmov	r0, r1, d9
 8013430:	2200      	movs	r2, #0
 8013432:	f7ed f8f1 	bl	8000618 <__aeabi_dmul>
 8013436:	4b2e      	ldr	r3, [pc, #184]	; (80134f0 <_dtoa_r+0x648>)
 8013438:	ec41 0b19 	vmov	d9, r0, r1
 801343c:	2200      	movs	r2, #0
 801343e:	4640      	mov	r0, r8
 8013440:	4649      	mov	r1, r9
 8013442:	f7ed f8e9 	bl	8000618 <__aeabi_dmul>
 8013446:	4680      	mov	r8, r0
 8013448:	4689      	mov	r9, r1
 801344a:	e7c5      	b.n	80133d8 <_dtoa_r+0x530>
 801344c:	ec51 0b17 	vmov	r0, r1, d7
 8013450:	f7ed f8e2 	bl	8000618 <__aeabi_dmul>
 8013454:	9b02      	ldr	r3, [sp, #8]
 8013456:	9d00      	ldr	r5, [sp, #0]
 8013458:	930f      	str	r3, [sp, #60]	; 0x3c
 801345a:	ec41 0b19 	vmov	d9, r0, r1
 801345e:	4649      	mov	r1, r9
 8013460:	4640      	mov	r0, r8
 8013462:	f7ed fb89 	bl	8000b78 <__aeabi_d2iz>
 8013466:	4606      	mov	r6, r0
 8013468:	f7ed f86c 	bl	8000544 <__aeabi_i2d>
 801346c:	3630      	adds	r6, #48	; 0x30
 801346e:	4602      	mov	r2, r0
 8013470:	460b      	mov	r3, r1
 8013472:	4640      	mov	r0, r8
 8013474:	4649      	mov	r1, r9
 8013476:	f7ec ff17 	bl	80002a8 <__aeabi_dsub>
 801347a:	f805 6b01 	strb.w	r6, [r5], #1
 801347e:	9b02      	ldr	r3, [sp, #8]
 8013480:	429d      	cmp	r5, r3
 8013482:	4680      	mov	r8, r0
 8013484:	4689      	mov	r9, r1
 8013486:	f04f 0200 	mov.w	r2, #0
 801348a:	d124      	bne.n	80134d6 <_dtoa_r+0x62e>
 801348c:	4b1b      	ldr	r3, [pc, #108]	; (80134fc <_dtoa_r+0x654>)
 801348e:	ec51 0b19 	vmov	r0, r1, d9
 8013492:	f7ec ff0b 	bl	80002ac <__adddf3>
 8013496:	4602      	mov	r2, r0
 8013498:	460b      	mov	r3, r1
 801349a:	4640      	mov	r0, r8
 801349c:	4649      	mov	r1, r9
 801349e:	f7ed fb4b 	bl	8000b38 <__aeabi_dcmpgt>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	d173      	bne.n	801358e <_dtoa_r+0x6e6>
 80134a6:	ec53 2b19 	vmov	r2, r3, d9
 80134aa:	4914      	ldr	r1, [pc, #80]	; (80134fc <_dtoa_r+0x654>)
 80134ac:	2000      	movs	r0, #0
 80134ae:	f7ec fefb 	bl	80002a8 <__aeabi_dsub>
 80134b2:	4602      	mov	r2, r0
 80134b4:	460b      	mov	r3, r1
 80134b6:	4640      	mov	r0, r8
 80134b8:	4649      	mov	r1, r9
 80134ba:	f7ed fb1f 	bl	8000afc <__aeabi_dcmplt>
 80134be:	2800      	cmp	r0, #0
 80134c0:	f43f af2f 	beq.w	8013322 <_dtoa_r+0x47a>
 80134c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80134c6:	1e6b      	subs	r3, r5, #1
 80134c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80134ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80134ce:	2b30      	cmp	r3, #48	; 0x30
 80134d0:	d0f8      	beq.n	80134c4 <_dtoa_r+0x61c>
 80134d2:	46bb      	mov	fp, r7
 80134d4:	e04a      	b.n	801356c <_dtoa_r+0x6c4>
 80134d6:	4b06      	ldr	r3, [pc, #24]	; (80134f0 <_dtoa_r+0x648>)
 80134d8:	f7ed f89e 	bl	8000618 <__aeabi_dmul>
 80134dc:	4680      	mov	r8, r0
 80134de:	4689      	mov	r9, r1
 80134e0:	e7bd      	b.n	801345e <_dtoa_r+0x5b6>
 80134e2:	bf00      	nop
 80134e4:	08016688 	.word	0x08016688
 80134e8:	08016660 	.word	0x08016660
 80134ec:	3ff00000 	.word	0x3ff00000
 80134f0:	40240000 	.word	0x40240000
 80134f4:	401c0000 	.word	0x401c0000
 80134f8:	40140000 	.word	0x40140000
 80134fc:	3fe00000 	.word	0x3fe00000
 8013500:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013504:	9d00      	ldr	r5, [sp, #0]
 8013506:	4642      	mov	r2, r8
 8013508:	464b      	mov	r3, r9
 801350a:	4630      	mov	r0, r6
 801350c:	4639      	mov	r1, r7
 801350e:	f7ed f9ad 	bl	800086c <__aeabi_ddiv>
 8013512:	f7ed fb31 	bl	8000b78 <__aeabi_d2iz>
 8013516:	9001      	str	r0, [sp, #4]
 8013518:	f7ed f814 	bl	8000544 <__aeabi_i2d>
 801351c:	4642      	mov	r2, r8
 801351e:	464b      	mov	r3, r9
 8013520:	f7ed f87a 	bl	8000618 <__aeabi_dmul>
 8013524:	4602      	mov	r2, r0
 8013526:	460b      	mov	r3, r1
 8013528:	4630      	mov	r0, r6
 801352a:	4639      	mov	r1, r7
 801352c:	f7ec febc 	bl	80002a8 <__aeabi_dsub>
 8013530:	9e01      	ldr	r6, [sp, #4]
 8013532:	9f04      	ldr	r7, [sp, #16]
 8013534:	3630      	adds	r6, #48	; 0x30
 8013536:	f805 6b01 	strb.w	r6, [r5], #1
 801353a:	9e00      	ldr	r6, [sp, #0]
 801353c:	1bae      	subs	r6, r5, r6
 801353e:	42b7      	cmp	r7, r6
 8013540:	4602      	mov	r2, r0
 8013542:	460b      	mov	r3, r1
 8013544:	d134      	bne.n	80135b0 <_dtoa_r+0x708>
 8013546:	f7ec feb1 	bl	80002ac <__adddf3>
 801354a:	4642      	mov	r2, r8
 801354c:	464b      	mov	r3, r9
 801354e:	4606      	mov	r6, r0
 8013550:	460f      	mov	r7, r1
 8013552:	f7ed faf1 	bl	8000b38 <__aeabi_dcmpgt>
 8013556:	b9c8      	cbnz	r0, 801358c <_dtoa_r+0x6e4>
 8013558:	4642      	mov	r2, r8
 801355a:	464b      	mov	r3, r9
 801355c:	4630      	mov	r0, r6
 801355e:	4639      	mov	r1, r7
 8013560:	f7ed fac2 	bl	8000ae8 <__aeabi_dcmpeq>
 8013564:	b110      	cbz	r0, 801356c <_dtoa_r+0x6c4>
 8013566:	9b01      	ldr	r3, [sp, #4]
 8013568:	07db      	lsls	r3, r3, #31
 801356a:	d40f      	bmi.n	801358c <_dtoa_r+0x6e4>
 801356c:	4651      	mov	r1, sl
 801356e:	4620      	mov	r0, r4
 8013570:	f000 fbcc 	bl	8013d0c <_Bfree>
 8013574:	2300      	movs	r3, #0
 8013576:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013578:	702b      	strb	r3, [r5, #0]
 801357a:	f10b 0301 	add.w	r3, fp, #1
 801357e:	6013      	str	r3, [r2, #0]
 8013580:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013582:	2b00      	cmp	r3, #0
 8013584:	f43f ace2 	beq.w	8012f4c <_dtoa_r+0xa4>
 8013588:	601d      	str	r5, [r3, #0]
 801358a:	e4df      	b.n	8012f4c <_dtoa_r+0xa4>
 801358c:	465f      	mov	r7, fp
 801358e:	462b      	mov	r3, r5
 8013590:	461d      	mov	r5, r3
 8013592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013596:	2a39      	cmp	r2, #57	; 0x39
 8013598:	d106      	bne.n	80135a8 <_dtoa_r+0x700>
 801359a:	9a00      	ldr	r2, [sp, #0]
 801359c:	429a      	cmp	r2, r3
 801359e:	d1f7      	bne.n	8013590 <_dtoa_r+0x6e8>
 80135a0:	9900      	ldr	r1, [sp, #0]
 80135a2:	2230      	movs	r2, #48	; 0x30
 80135a4:	3701      	adds	r7, #1
 80135a6:	700a      	strb	r2, [r1, #0]
 80135a8:	781a      	ldrb	r2, [r3, #0]
 80135aa:	3201      	adds	r2, #1
 80135ac:	701a      	strb	r2, [r3, #0]
 80135ae:	e790      	b.n	80134d2 <_dtoa_r+0x62a>
 80135b0:	4ba3      	ldr	r3, [pc, #652]	; (8013840 <_dtoa_r+0x998>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	f7ed f830 	bl	8000618 <__aeabi_dmul>
 80135b8:	2200      	movs	r2, #0
 80135ba:	2300      	movs	r3, #0
 80135bc:	4606      	mov	r6, r0
 80135be:	460f      	mov	r7, r1
 80135c0:	f7ed fa92 	bl	8000ae8 <__aeabi_dcmpeq>
 80135c4:	2800      	cmp	r0, #0
 80135c6:	d09e      	beq.n	8013506 <_dtoa_r+0x65e>
 80135c8:	e7d0      	b.n	801356c <_dtoa_r+0x6c4>
 80135ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135cc:	2a00      	cmp	r2, #0
 80135ce:	f000 80ca 	beq.w	8013766 <_dtoa_r+0x8be>
 80135d2:	9a07      	ldr	r2, [sp, #28]
 80135d4:	2a01      	cmp	r2, #1
 80135d6:	f300 80ad 	bgt.w	8013734 <_dtoa_r+0x88c>
 80135da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135dc:	2a00      	cmp	r2, #0
 80135de:	f000 80a5 	beq.w	801372c <_dtoa_r+0x884>
 80135e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80135e6:	9e08      	ldr	r6, [sp, #32]
 80135e8:	9d05      	ldr	r5, [sp, #20]
 80135ea:	9a05      	ldr	r2, [sp, #20]
 80135ec:	441a      	add	r2, r3
 80135ee:	9205      	str	r2, [sp, #20]
 80135f0:	9a06      	ldr	r2, [sp, #24]
 80135f2:	2101      	movs	r1, #1
 80135f4:	441a      	add	r2, r3
 80135f6:	4620      	mov	r0, r4
 80135f8:	9206      	str	r2, [sp, #24]
 80135fa:	f000 fc3d 	bl	8013e78 <__i2b>
 80135fe:	4607      	mov	r7, r0
 8013600:	b165      	cbz	r5, 801361c <_dtoa_r+0x774>
 8013602:	9b06      	ldr	r3, [sp, #24]
 8013604:	2b00      	cmp	r3, #0
 8013606:	dd09      	ble.n	801361c <_dtoa_r+0x774>
 8013608:	42ab      	cmp	r3, r5
 801360a:	9a05      	ldr	r2, [sp, #20]
 801360c:	bfa8      	it	ge
 801360e:	462b      	movge	r3, r5
 8013610:	1ad2      	subs	r2, r2, r3
 8013612:	9205      	str	r2, [sp, #20]
 8013614:	9a06      	ldr	r2, [sp, #24]
 8013616:	1aed      	subs	r5, r5, r3
 8013618:	1ad3      	subs	r3, r2, r3
 801361a:	9306      	str	r3, [sp, #24]
 801361c:	9b08      	ldr	r3, [sp, #32]
 801361e:	b1f3      	cbz	r3, 801365e <_dtoa_r+0x7b6>
 8013620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013622:	2b00      	cmp	r3, #0
 8013624:	f000 80a3 	beq.w	801376e <_dtoa_r+0x8c6>
 8013628:	2e00      	cmp	r6, #0
 801362a:	dd10      	ble.n	801364e <_dtoa_r+0x7a6>
 801362c:	4639      	mov	r1, r7
 801362e:	4632      	mov	r2, r6
 8013630:	4620      	mov	r0, r4
 8013632:	f000 fce1 	bl	8013ff8 <__pow5mult>
 8013636:	4652      	mov	r2, sl
 8013638:	4601      	mov	r1, r0
 801363a:	4607      	mov	r7, r0
 801363c:	4620      	mov	r0, r4
 801363e:	f000 fc31 	bl	8013ea4 <__multiply>
 8013642:	4651      	mov	r1, sl
 8013644:	4680      	mov	r8, r0
 8013646:	4620      	mov	r0, r4
 8013648:	f000 fb60 	bl	8013d0c <_Bfree>
 801364c:	46c2      	mov	sl, r8
 801364e:	9b08      	ldr	r3, [sp, #32]
 8013650:	1b9a      	subs	r2, r3, r6
 8013652:	d004      	beq.n	801365e <_dtoa_r+0x7b6>
 8013654:	4651      	mov	r1, sl
 8013656:	4620      	mov	r0, r4
 8013658:	f000 fcce 	bl	8013ff8 <__pow5mult>
 801365c:	4682      	mov	sl, r0
 801365e:	2101      	movs	r1, #1
 8013660:	4620      	mov	r0, r4
 8013662:	f000 fc09 	bl	8013e78 <__i2b>
 8013666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013668:	2b00      	cmp	r3, #0
 801366a:	4606      	mov	r6, r0
 801366c:	f340 8081 	ble.w	8013772 <_dtoa_r+0x8ca>
 8013670:	461a      	mov	r2, r3
 8013672:	4601      	mov	r1, r0
 8013674:	4620      	mov	r0, r4
 8013676:	f000 fcbf 	bl	8013ff8 <__pow5mult>
 801367a:	9b07      	ldr	r3, [sp, #28]
 801367c:	2b01      	cmp	r3, #1
 801367e:	4606      	mov	r6, r0
 8013680:	dd7a      	ble.n	8013778 <_dtoa_r+0x8d0>
 8013682:	f04f 0800 	mov.w	r8, #0
 8013686:	6933      	ldr	r3, [r6, #16]
 8013688:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801368c:	6918      	ldr	r0, [r3, #16]
 801368e:	f000 fba5 	bl	8013ddc <__hi0bits>
 8013692:	f1c0 0020 	rsb	r0, r0, #32
 8013696:	9b06      	ldr	r3, [sp, #24]
 8013698:	4418      	add	r0, r3
 801369a:	f010 001f 	ands.w	r0, r0, #31
 801369e:	f000 8094 	beq.w	80137ca <_dtoa_r+0x922>
 80136a2:	f1c0 0320 	rsb	r3, r0, #32
 80136a6:	2b04      	cmp	r3, #4
 80136a8:	f340 8085 	ble.w	80137b6 <_dtoa_r+0x90e>
 80136ac:	9b05      	ldr	r3, [sp, #20]
 80136ae:	f1c0 001c 	rsb	r0, r0, #28
 80136b2:	4403      	add	r3, r0
 80136b4:	9305      	str	r3, [sp, #20]
 80136b6:	9b06      	ldr	r3, [sp, #24]
 80136b8:	4403      	add	r3, r0
 80136ba:	4405      	add	r5, r0
 80136bc:	9306      	str	r3, [sp, #24]
 80136be:	9b05      	ldr	r3, [sp, #20]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	dd05      	ble.n	80136d0 <_dtoa_r+0x828>
 80136c4:	4651      	mov	r1, sl
 80136c6:	461a      	mov	r2, r3
 80136c8:	4620      	mov	r0, r4
 80136ca:	f000 fcef 	bl	80140ac <__lshift>
 80136ce:	4682      	mov	sl, r0
 80136d0:	9b06      	ldr	r3, [sp, #24]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	dd05      	ble.n	80136e2 <_dtoa_r+0x83a>
 80136d6:	4631      	mov	r1, r6
 80136d8:	461a      	mov	r2, r3
 80136da:	4620      	mov	r0, r4
 80136dc:	f000 fce6 	bl	80140ac <__lshift>
 80136e0:	4606      	mov	r6, r0
 80136e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d072      	beq.n	80137ce <_dtoa_r+0x926>
 80136e8:	4631      	mov	r1, r6
 80136ea:	4650      	mov	r0, sl
 80136ec:	f000 fd4a 	bl	8014184 <__mcmp>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	da6c      	bge.n	80137ce <_dtoa_r+0x926>
 80136f4:	2300      	movs	r3, #0
 80136f6:	4651      	mov	r1, sl
 80136f8:	220a      	movs	r2, #10
 80136fa:	4620      	mov	r0, r4
 80136fc:	f000 fb28 	bl	8013d50 <__multadd>
 8013700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013702:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013706:	4682      	mov	sl, r0
 8013708:	2b00      	cmp	r3, #0
 801370a:	f000 81b0 	beq.w	8013a6e <_dtoa_r+0xbc6>
 801370e:	2300      	movs	r3, #0
 8013710:	4639      	mov	r1, r7
 8013712:	220a      	movs	r2, #10
 8013714:	4620      	mov	r0, r4
 8013716:	f000 fb1b 	bl	8013d50 <__multadd>
 801371a:	9b01      	ldr	r3, [sp, #4]
 801371c:	2b00      	cmp	r3, #0
 801371e:	4607      	mov	r7, r0
 8013720:	f300 8096 	bgt.w	8013850 <_dtoa_r+0x9a8>
 8013724:	9b07      	ldr	r3, [sp, #28]
 8013726:	2b02      	cmp	r3, #2
 8013728:	dc59      	bgt.n	80137de <_dtoa_r+0x936>
 801372a:	e091      	b.n	8013850 <_dtoa_r+0x9a8>
 801372c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801372e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013732:	e758      	b.n	80135e6 <_dtoa_r+0x73e>
 8013734:	9b04      	ldr	r3, [sp, #16]
 8013736:	1e5e      	subs	r6, r3, #1
 8013738:	9b08      	ldr	r3, [sp, #32]
 801373a:	42b3      	cmp	r3, r6
 801373c:	bfbf      	itttt	lt
 801373e:	9b08      	ldrlt	r3, [sp, #32]
 8013740:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013742:	9608      	strlt	r6, [sp, #32]
 8013744:	1af3      	sublt	r3, r6, r3
 8013746:	bfb4      	ite	lt
 8013748:	18d2      	addlt	r2, r2, r3
 801374a:	1b9e      	subge	r6, r3, r6
 801374c:	9b04      	ldr	r3, [sp, #16]
 801374e:	bfbc      	itt	lt
 8013750:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013752:	2600      	movlt	r6, #0
 8013754:	2b00      	cmp	r3, #0
 8013756:	bfb7      	itett	lt
 8013758:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801375c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013760:	1a9d      	sublt	r5, r3, r2
 8013762:	2300      	movlt	r3, #0
 8013764:	e741      	b.n	80135ea <_dtoa_r+0x742>
 8013766:	9e08      	ldr	r6, [sp, #32]
 8013768:	9d05      	ldr	r5, [sp, #20]
 801376a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801376c:	e748      	b.n	8013600 <_dtoa_r+0x758>
 801376e:	9a08      	ldr	r2, [sp, #32]
 8013770:	e770      	b.n	8013654 <_dtoa_r+0x7ac>
 8013772:	9b07      	ldr	r3, [sp, #28]
 8013774:	2b01      	cmp	r3, #1
 8013776:	dc19      	bgt.n	80137ac <_dtoa_r+0x904>
 8013778:	9b02      	ldr	r3, [sp, #8]
 801377a:	b9bb      	cbnz	r3, 80137ac <_dtoa_r+0x904>
 801377c:	9b03      	ldr	r3, [sp, #12]
 801377e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013782:	b99b      	cbnz	r3, 80137ac <_dtoa_r+0x904>
 8013784:	9b03      	ldr	r3, [sp, #12]
 8013786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801378a:	0d1b      	lsrs	r3, r3, #20
 801378c:	051b      	lsls	r3, r3, #20
 801378e:	b183      	cbz	r3, 80137b2 <_dtoa_r+0x90a>
 8013790:	9b05      	ldr	r3, [sp, #20]
 8013792:	3301      	adds	r3, #1
 8013794:	9305      	str	r3, [sp, #20]
 8013796:	9b06      	ldr	r3, [sp, #24]
 8013798:	3301      	adds	r3, #1
 801379a:	9306      	str	r3, [sp, #24]
 801379c:	f04f 0801 	mov.w	r8, #1
 80137a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	f47f af6f 	bne.w	8013686 <_dtoa_r+0x7de>
 80137a8:	2001      	movs	r0, #1
 80137aa:	e774      	b.n	8013696 <_dtoa_r+0x7ee>
 80137ac:	f04f 0800 	mov.w	r8, #0
 80137b0:	e7f6      	b.n	80137a0 <_dtoa_r+0x8f8>
 80137b2:	4698      	mov	r8, r3
 80137b4:	e7f4      	b.n	80137a0 <_dtoa_r+0x8f8>
 80137b6:	d082      	beq.n	80136be <_dtoa_r+0x816>
 80137b8:	9a05      	ldr	r2, [sp, #20]
 80137ba:	331c      	adds	r3, #28
 80137bc:	441a      	add	r2, r3
 80137be:	9205      	str	r2, [sp, #20]
 80137c0:	9a06      	ldr	r2, [sp, #24]
 80137c2:	441a      	add	r2, r3
 80137c4:	441d      	add	r5, r3
 80137c6:	9206      	str	r2, [sp, #24]
 80137c8:	e779      	b.n	80136be <_dtoa_r+0x816>
 80137ca:	4603      	mov	r3, r0
 80137cc:	e7f4      	b.n	80137b8 <_dtoa_r+0x910>
 80137ce:	9b04      	ldr	r3, [sp, #16]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	dc37      	bgt.n	8013844 <_dtoa_r+0x99c>
 80137d4:	9b07      	ldr	r3, [sp, #28]
 80137d6:	2b02      	cmp	r3, #2
 80137d8:	dd34      	ble.n	8013844 <_dtoa_r+0x99c>
 80137da:	9b04      	ldr	r3, [sp, #16]
 80137dc:	9301      	str	r3, [sp, #4]
 80137de:	9b01      	ldr	r3, [sp, #4]
 80137e0:	b963      	cbnz	r3, 80137fc <_dtoa_r+0x954>
 80137e2:	4631      	mov	r1, r6
 80137e4:	2205      	movs	r2, #5
 80137e6:	4620      	mov	r0, r4
 80137e8:	f000 fab2 	bl	8013d50 <__multadd>
 80137ec:	4601      	mov	r1, r0
 80137ee:	4606      	mov	r6, r0
 80137f0:	4650      	mov	r0, sl
 80137f2:	f000 fcc7 	bl	8014184 <__mcmp>
 80137f6:	2800      	cmp	r0, #0
 80137f8:	f73f adbb 	bgt.w	8013372 <_dtoa_r+0x4ca>
 80137fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137fe:	9d00      	ldr	r5, [sp, #0]
 8013800:	ea6f 0b03 	mvn.w	fp, r3
 8013804:	f04f 0800 	mov.w	r8, #0
 8013808:	4631      	mov	r1, r6
 801380a:	4620      	mov	r0, r4
 801380c:	f000 fa7e 	bl	8013d0c <_Bfree>
 8013810:	2f00      	cmp	r7, #0
 8013812:	f43f aeab 	beq.w	801356c <_dtoa_r+0x6c4>
 8013816:	f1b8 0f00 	cmp.w	r8, #0
 801381a:	d005      	beq.n	8013828 <_dtoa_r+0x980>
 801381c:	45b8      	cmp	r8, r7
 801381e:	d003      	beq.n	8013828 <_dtoa_r+0x980>
 8013820:	4641      	mov	r1, r8
 8013822:	4620      	mov	r0, r4
 8013824:	f000 fa72 	bl	8013d0c <_Bfree>
 8013828:	4639      	mov	r1, r7
 801382a:	4620      	mov	r0, r4
 801382c:	f000 fa6e 	bl	8013d0c <_Bfree>
 8013830:	e69c      	b.n	801356c <_dtoa_r+0x6c4>
 8013832:	2600      	movs	r6, #0
 8013834:	4637      	mov	r7, r6
 8013836:	e7e1      	b.n	80137fc <_dtoa_r+0x954>
 8013838:	46bb      	mov	fp, r7
 801383a:	4637      	mov	r7, r6
 801383c:	e599      	b.n	8013372 <_dtoa_r+0x4ca>
 801383e:	bf00      	nop
 8013840:	40240000 	.word	0x40240000
 8013844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013846:	2b00      	cmp	r3, #0
 8013848:	f000 80c8 	beq.w	80139dc <_dtoa_r+0xb34>
 801384c:	9b04      	ldr	r3, [sp, #16]
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	2d00      	cmp	r5, #0
 8013852:	dd05      	ble.n	8013860 <_dtoa_r+0x9b8>
 8013854:	4639      	mov	r1, r7
 8013856:	462a      	mov	r2, r5
 8013858:	4620      	mov	r0, r4
 801385a:	f000 fc27 	bl	80140ac <__lshift>
 801385e:	4607      	mov	r7, r0
 8013860:	f1b8 0f00 	cmp.w	r8, #0
 8013864:	d05b      	beq.n	801391e <_dtoa_r+0xa76>
 8013866:	6879      	ldr	r1, [r7, #4]
 8013868:	4620      	mov	r0, r4
 801386a:	f000 fa0f 	bl	8013c8c <_Balloc>
 801386e:	4605      	mov	r5, r0
 8013870:	b928      	cbnz	r0, 801387e <_dtoa_r+0x9d6>
 8013872:	4b83      	ldr	r3, [pc, #524]	; (8013a80 <_dtoa_r+0xbd8>)
 8013874:	4602      	mov	r2, r0
 8013876:	f240 21ef 	movw	r1, #751	; 0x2ef
 801387a:	f7ff bb2e 	b.w	8012eda <_dtoa_r+0x32>
 801387e:	693a      	ldr	r2, [r7, #16]
 8013880:	3202      	adds	r2, #2
 8013882:	0092      	lsls	r2, r2, #2
 8013884:	f107 010c 	add.w	r1, r7, #12
 8013888:	300c      	adds	r0, #12
 801388a:	f7ff fa76 	bl	8012d7a <memcpy>
 801388e:	2201      	movs	r2, #1
 8013890:	4629      	mov	r1, r5
 8013892:	4620      	mov	r0, r4
 8013894:	f000 fc0a 	bl	80140ac <__lshift>
 8013898:	9b00      	ldr	r3, [sp, #0]
 801389a:	3301      	adds	r3, #1
 801389c:	9304      	str	r3, [sp, #16]
 801389e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138a2:	4413      	add	r3, r2
 80138a4:	9308      	str	r3, [sp, #32]
 80138a6:	9b02      	ldr	r3, [sp, #8]
 80138a8:	f003 0301 	and.w	r3, r3, #1
 80138ac:	46b8      	mov	r8, r7
 80138ae:	9306      	str	r3, [sp, #24]
 80138b0:	4607      	mov	r7, r0
 80138b2:	9b04      	ldr	r3, [sp, #16]
 80138b4:	4631      	mov	r1, r6
 80138b6:	3b01      	subs	r3, #1
 80138b8:	4650      	mov	r0, sl
 80138ba:	9301      	str	r3, [sp, #4]
 80138bc:	f7ff fa6b 	bl	8012d96 <quorem>
 80138c0:	4641      	mov	r1, r8
 80138c2:	9002      	str	r0, [sp, #8]
 80138c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80138c8:	4650      	mov	r0, sl
 80138ca:	f000 fc5b 	bl	8014184 <__mcmp>
 80138ce:	463a      	mov	r2, r7
 80138d0:	9005      	str	r0, [sp, #20]
 80138d2:	4631      	mov	r1, r6
 80138d4:	4620      	mov	r0, r4
 80138d6:	f000 fc71 	bl	80141bc <__mdiff>
 80138da:	68c2      	ldr	r2, [r0, #12]
 80138dc:	4605      	mov	r5, r0
 80138de:	bb02      	cbnz	r2, 8013922 <_dtoa_r+0xa7a>
 80138e0:	4601      	mov	r1, r0
 80138e2:	4650      	mov	r0, sl
 80138e4:	f000 fc4e 	bl	8014184 <__mcmp>
 80138e8:	4602      	mov	r2, r0
 80138ea:	4629      	mov	r1, r5
 80138ec:	4620      	mov	r0, r4
 80138ee:	9209      	str	r2, [sp, #36]	; 0x24
 80138f0:	f000 fa0c 	bl	8013d0c <_Bfree>
 80138f4:	9b07      	ldr	r3, [sp, #28]
 80138f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80138f8:	9d04      	ldr	r5, [sp, #16]
 80138fa:	ea43 0102 	orr.w	r1, r3, r2
 80138fe:	9b06      	ldr	r3, [sp, #24]
 8013900:	4319      	orrs	r1, r3
 8013902:	d110      	bne.n	8013926 <_dtoa_r+0xa7e>
 8013904:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013908:	d029      	beq.n	801395e <_dtoa_r+0xab6>
 801390a:	9b05      	ldr	r3, [sp, #20]
 801390c:	2b00      	cmp	r3, #0
 801390e:	dd02      	ble.n	8013916 <_dtoa_r+0xa6e>
 8013910:	9b02      	ldr	r3, [sp, #8]
 8013912:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013916:	9b01      	ldr	r3, [sp, #4]
 8013918:	f883 9000 	strb.w	r9, [r3]
 801391c:	e774      	b.n	8013808 <_dtoa_r+0x960>
 801391e:	4638      	mov	r0, r7
 8013920:	e7ba      	b.n	8013898 <_dtoa_r+0x9f0>
 8013922:	2201      	movs	r2, #1
 8013924:	e7e1      	b.n	80138ea <_dtoa_r+0xa42>
 8013926:	9b05      	ldr	r3, [sp, #20]
 8013928:	2b00      	cmp	r3, #0
 801392a:	db04      	blt.n	8013936 <_dtoa_r+0xa8e>
 801392c:	9907      	ldr	r1, [sp, #28]
 801392e:	430b      	orrs	r3, r1
 8013930:	9906      	ldr	r1, [sp, #24]
 8013932:	430b      	orrs	r3, r1
 8013934:	d120      	bne.n	8013978 <_dtoa_r+0xad0>
 8013936:	2a00      	cmp	r2, #0
 8013938:	dded      	ble.n	8013916 <_dtoa_r+0xa6e>
 801393a:	4651      	mov	r1, sl
 801393c:	2201      	movs	r2, #1
 801393e:	4620      	mov	r0, r4
 8013940:	f000 fbb4 	bl	80140ac <__lshift>
 8013944:	4631      	mov	r1, r6
 8013946:	4682      	mov	sl, r0
 8013948:	f000 fc1c 	bl	8014184 <__mcmp>
 801394c:	2800      	cmp	r0, #0
 801394e:	dc03      	bgt.n	8013958 <_dtoa_r+0xab0>
 8013950:	d1e1      	bne.n	8013916 <_dtoa_r+0xa6e>
 8013952:	f019 0f01 	tst.w	r9, #1
 8013956:	d0de      	beq.n	8013916 <_dtoa_r+0xa6e>
 8013958:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801395c:	d1d8      	bne.n	8013910 <_dtoa_r+0xa68>
 801395e:	9a01      	ldr	r2, [sp, #4]
 8013960:	2339      	movs	r3, #57	; 0x39
 8013962:	7013      	strb	r3, [r2, #0]
 8013964:	462b      	mov	r3, r5
 8013966:	461d      	mov	r5, r3
 8013968:	3b01      	subs	r3, #1
 801396a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801396e:	2a39      	cmp	r2, #57	; 0x39
 8013970:	d06c      	beq.n	8013a4c <_dtoa_r+0xba4>
 8013972:	3201      	adds	r2, #1
 8013974:	701a      	strb	r2, [r3, #0]
 8013976:	e747      	b.n	8013808 <_dtoa_r+0x960>
 8013978:	2a00      	cmp	r2, #0
 801397a:	dd07      	ble.n	801398c <_dtoa_r+0xae4>
 801397c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013980:	d0ed      	beq.n	801395e <_dtoa_r+0xab6>
 8013982:	9a01      	ldr	r2, [sp, #4]
 8013984:	f109 0301 	add.w	r3, r9, #1
 8013988:	7013      	strb	r3, [r2, #0]
 801398a:	e73d      	b.n	8013808 <_dtoa_r+0x960>
 801398c:	9b04      	ldr	r3, [sp, #16]
 801398e:	9a08      	ldr	r2, [sp, #32]
 8013990:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013994:	4293      	cmp	r3, r2
 8013996:	d043      	beq.n	8013a20 <_dtoa_r+0xb78>
 8013998:	4651      	mov	r1, sl
 801399a:	2300      	movs	r3, #0
 801399c:	220a      	movs	r2, #10
 801399e:	4620      	mov	r0, r4
 80139a0:	f000 f9d6 	bl	8013d50 <__multadd>
 80139a4:	45b8      	cmp	r8, r7
 80139a6:	4682      	mov	sl, r0
 80139a8:	f04f 0300 	mov.w	r3, #0
 80139ac:	f04f 020a 	mov.w	r2, #10
 80139b0:	4641      	mov	r1, r8
 80139b2:	4620      	mov	r0, r4
 80139b4:	d107      	bne.n	80139c6 <_dtoa_r+0xb1e>
 80139b6:	f000 f9cb 	bl	8013d50 <__multadd>
 80139ba:	4680      	mov	r8, r0
 80139bc:	4607      	mov	r7, r0
 80139be:	9b04      	ldr	r3, [sp, #16]
 80139c0:	3301      	adds	r3, #1
 80139c2:	9304      	str	r3, [sp, #16]
 80139c4:	e775      	b.n	80138b2 <_dtoa_r+0xa0a>
 80139c6:	f000 f9c3 	bl	8013d50 <__multadd>
 80139ca:	4639      	mov	r1, r7
 80139cc:	4680      	mov	r8, r0
 80139ce:	2300      	movs	r3, #0
 80139d0:	220a      	movs	r2, #10
 80139d2:	4620      	mov	r0, r4
 80139d4:	f000 f9bc 	bl	8013d50 <__multadd>
 80139d8:	4607      	mov	r7, r0
 80139da:	e7f0      	b.n	80139be <_dtoa_r+0xb16>
 80139dc:	9b04      	ldr	r3, [sp, #16]
 80139de:	9301      	str	r3, [sp, #4]
 80139e0:	9d00      	ldr	r5, [sp, #0]
 80139e2:	4631      	mov	r1, r6
 80139e4:	4650      	mov	r0, sl
 80139e6:	f7ff f9d6 	bl	8012d96 <quorem>
 80139ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80139ee:	9b00      	ldr	r3, [sp, #0]
 80139f0:	f805 9b01 	strb.w	r9, [r5], #1
 80139f4:	1aea      	subs	r2, r5, r3
 80139f6:	9b01      	ldr	r3, [sp, #4]
 80139f8:	4293      	cmp	r3, r2
 80139fa:	dd07      	ble.n	8013a0c <_dtoa_r+0xb64>
 80139fc:	4651      	mov	r1, sl
 80139fe:	2300      	movs	r3, #0
 8013a00:	220a      	movs	r2, #10
 8013a02:	4620      	mov	r0, r4
 8013a04:	f000 f9a4 	bl	8013d50 <__multadd>
 8013a08:	4682      	mov	sl, r0
 8013a0a:	e7ea      	b.n	80139e2 <_dtoa_r+0xb3a>
 8013a0c:	9b01      	ldr	r3, [sp, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	bfc8      	it	gt
 8013a12:	461d      	movgt	r5, r3
 8013a14:	9b00      	ldr	r3, [sp, #0]
 8013a16:	bfd8      	it	le
 8013a18:	2501      	movle	r5, #1
 8013a1a:	441d      	add	r5, r3
 8013a1c:	f04f 0800 	mov.w	r8, #0
 8013a20:	4651      	mov	r1, sl
 8013a22:	2201      	movs	r2, #1
 8013a24:	4620      	mov	r0, r4
 8013a26:	f000 fb41 	bl	80140ac <__lshift>
 8013a2a:	4631      	mov	r1, r6
 8013a2c:	4682      	mov	sl, r0
 8013a2e:	f000 fba9 	bl	8014184 <__mcmp>
 8013a32:	2800      	cmp	r0, #0
 8013a34:	dc96      	bgt.n	8013964 <_dtoa_r+0xabc>
 8013a36:	d102      	bne.n	8013a3e <_dtoa_r+0xb96>
 8013a38:	f019 0f01 	tst.w	r9, #1
 8013a3c:	d192      	bne.n	8013964 <_dtoa_r+0xabc>
 8013a3e:	462b      	mov	r3, r5
 8013a40:	461d      	mov	r5, r3
 8013a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013a46:	2a30      	cmp	r2, #48	; 0x30
 8013a48:	d0fa      	beq.n	8013a40 <_dtoa_r+0xb98>
 8013a4a:	e6dd      	b.n	8013808 <_dtoa_r+0x960>
 8013a4c:	9a00      	ldr	r2, [sp, #0]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d189      	bne.n	8013966 <_dtoa_r+0xabe>
 8013a52:	f10b 0b01 	add.w	fp, fp, #1
 8013a56:	2331      	movs	r3, #49	; 0x31
 8013a58:	e796      	b.n	8013988 <_dtoa_r+0xae0>
 8013a5a:	4b0a      	ldr	r3, [pc, #40]	; (8013a84 <_dtoa_r+0xbdc>)
 8013a5c:	f7ff ba99 	b.w	8012f92 <_dtoa_r+0xea>
 8013a60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	f47f aa6d 	bne.w	8012f42 <_dtoa_r+0x9a>
 8013a68:	4b07      	ldr	r3, [pc, #28]	; (8013a88 <_dtoa_r+0xbe0>)
 8013a6a:	f7ff ba92 	b.w	8012f92 <_dtoa_r+0xea>
 8013a6e:	9b01      	ldr	r3, [sp, #4]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	dcb5      	bgt.n	80139e0 <_dtoa_r+0xb38>
 8013a74:	9b07      	ldr	r3, [sp, #28]
 8013a76:	2b02      	cmp	r3, #2
 8013a78:	f73f aeb1 	bgt.w	80137de <_dtoa_r+0x936>
 8013a7c:	e7b0      	b.n	80139e0 <_dtoa_r+0xb38>
 8013a7e:	bf00      	nop
 8013a80:	080165f1 	.word	0x080165f1
 8013a84:	08016551 	.word	0x08016551
 8013a88:	08016575 	.word	0x08016575

08013a8c <_free_r>:
 8013a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013a8e:	2900      	cmp	r1, #0
 8013a90:	d044      	beq.n	8013b1c <_free_r+0x90>
 8013a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a96:	9001      	str	r0, [sp, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8013a9e:	bfb8      	it	lt
 8013aa0:	18e4      	addlt	r4, r4, r3
 8013aa2:	f000 f8e7 	bl	8013c74 <__malloc_lock>
 8013aa6:	4a1e      	ldr	r2, [pc, #120]	; (8013b20 <_free_r+0x94>)
 8013aa8:	9801      	ldr	r0, [sp, #4]
 8013aaa:	6813      	ldr	r3, [r2, #0]
 8013aac:	b933      	cbnz	r3, 8013abc <_free_r+0x30>
 8013aae:	6063      	str	r3, [r4, #4]
 8013ab0:	6014      	str	r4, [r2, #0]
 8013ab2:	b003      	add	sp, #12
 8013ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ab8:	f000 b8e2 	b.w	8013c80 <__malloc_unlock>
 8013abc:	42a3      	cmp	r3, r4
 8013abe:	d908      	bls.n	8013ad2 <_free_r+0x46>
 8013ac0:	6825      	ldr	r5, [r4, #0]
 8013ac2:	1961      	adds	r1, r4, r5
 8013ac4:	428b      	cmp	r3, r1
 8013ac6:	bf01      	itttt	eq
 8013ac8:	6819      	ldreq	r1, [r3, #0]
 8013aca:	685b      	ldreq	r3, [r3, #4]
 8013acc:	1949      	addeq	r1, r1, r5
 8013ace:	6021      	streq	r1, [r4, #0]
 8013ad0:	e7ed      	b.n	8013aae <_free_r+0x22>
 8013ad2:	461a      	mov	r2, r3
 8013ad4:	685b      	ldr	r3, [r3, #4]
 8013ad6:	b10b      	cbz	r3, 8013adc <_free_r+0x50>
 8013ad8:	42a3      	cmp	r3, r4
 8013ada:	d9fa      	bls.n	8013ad2 <_free_r+0x46>
 8013adc:	6811      	ldr	r1, [r2, #0]
 8013ade:	1855      	adds	r5, r2, r1
 8013ae0:	42a5      	cmp	r5, r4
 8013ae2:	d10b      	bne.n	8013afc <_free_r+0x70>
 8013ae4:	6824      	ldr	r4, [r4, #0]
 8013ae6:	4421      	add	r1, r4
 8013ae8:	1854      	adds	r4, r2, r1
 8013aea:	42a3      	cmp	r3, r4
 8013aec:	6011      	str	r1, [r2, #0]
 8013aee:	d1e0      	bne.n	8013ab2 <_free_r+0x26>
 8013af0:	681c      	ldr	r4, [r3, #0]
 8013af2:	685b      	ldr	r3, [r3, #4]
 8013af4:	6053      	str	r3, [r2, #4]
 8013af6:	440c      	add	r4, r1
 8013af8:	6014      	str	r4, [r2, #0]
 8013afa:	e7da      	b.n	8013ab2 <_free_r+0x26>
 8013afc:	d902      	bls.n	8013b04 <_free_r+0x78>
 8013afe:	230c      	movs	r3, #12
 8013b00:	6003      	str	r3, [r0, #0]
 8013b02:	e7d6      	b.n	8013ab2 <_free_r+0x26>
 8013b04:	6825      	ldr	r5, [r4, #0]
 8013b06:	1961      	adds	r1, r4, r5
 8013b08:	428b      	cmp	r3, r1
 8013b0a:	bf04      	itt	eq
 8013b0c:	6819      	ldreq	r1, [r3, #0]
 8013b0e:	685b      	ldreq	r3, [r3, #4]
 8013b10:	6063      	str	r3, [r4, #4]
 8013b12:	bf04      	itt	eq
 8013b14:	1949      	addeq	r1, r1, r5
 8013b16:	6021      	streq	r1, [r4, #0]
 8013b18:	6054      	str	r4, [r2, #4]
 8013b1a:	e7ca      	b.n	8013ab2 <_free_r+0x26>
 8013b1c:	b003      	add	sp, #12
 8013b1e:	bd30      	pop	{r4, r5, pc}
 8013b20:	2000995c 	.word	0x2000995c

08013b24 <malloc>:
 8013b24:	4b02      	ldr	r3, [pc, #8]	; (8013b30 <malloc+0xc>)
 8013b26:	4601      	mov	r1, r0
 8013b28:	6818      	ldr	r0, [r3, #0]
 8013b2a:	f000 b823 	b.w	8013b74 <_malloc_r>
 8013b2e:	bf00      	nop
 8013b30:	2000043c 	.word	0x2000043c

08013b34 <sbrk_aligned>:
 8013b34:	b570      	push	{r4, r5, r6, lr}
 8013b36:	4e0e      	ldr	r6, [pc, #56]	; (8013b70 <sbrk_aligned+0x3c>)
 8013b38:	460c      	mov	r4, r1
 8013b3a:	6831      	ldr	r1, [r6, #0]
 8013b3c:	4605      	mov	r5, r0
 8013b3e:	b911      	cbnz	r1, 8013b46 <sbrk_aligned+0x12>
 8013b40:	f000 fe1c 	bl	801477c <_sbrk_r>
 8013b44:	6030      	str	r0, [r6, #0]
 8013b46:	4621      	mov	r1, r4
 8013b48:	4628      	mov	r0, r5
 8013b4a:	f000 fe17 	bl	801477c <_sbrk_r>
 8013b4e:	1c43      	adds	r3, r0, #1
 8013b50:	d00a      	beq.n	8013b68 <sbrk_aligned+0x34>
 8013b52:	1cc4      	adds	r4, r0, #3
 8013b54:	f024 0403 	bic.w	r4, r4, #3
 8013b58:	42a0      	cmp	r0, r4
 8013b5a:	d007      	beq.n	8013b6c <sbrk_aligned+0x38>
 8013b5c:	1a21      	subs	r1, r4, r0
 8013b5e:	4628      	mov	r0, r5
 8013b60:	f000 fe0c 	bl	801477c <_sbrk_r>
 8013b64:	3001      	adds	r0, #1
 8013b66:	d101      	bne.n	8013b6c <sbrk_aligned+0x38>
 8013b68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	bd70      	pop	{r4, r5, r6, pc}
 8013b70:	20009960 	.word	0x20009960

08013b74 <_malloc_r>:
 8013b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b78:	1ccd      	adds	r5, r1, #3
 8013b7a:	f025 0503 	bic.w	r5, r5, #3
 8013b7e:	3508      	adds	r5, #8
 8013b80:	2d0c      	cmp	r5, #12
 8013b82:	bf38      	it	cc
 8013b84:	250c      	movcc	r5, #12
 8013b86:	2d00      	cmp	r5, #0
 8013b88:	4607      	mov	r7, r0
 8013b8a:	db01      	blt.n	8013b90 <_malloc_r+0x1c>
 8013b8c:	42a9      	cmp	r1, r5
 8013b8e:	d905      	bls.n	8013b9c <_malloc_r+0x28>
 8013b90:	230c      	movs	r3, #12
 8013b92:	603b      	str	r3, [r7, #0]
 8013b94:	2600      	movs	r6, #0
 8013b96:	4630      	mov	r0, r6
 8013b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013c70 <_malloc_r+0xfc>
 8013ba0:	f000 f868 	bl	8013c74 <__malloc_lock>
 8013ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8013ba8:	461c      	mov	r4, r3
 8013baa:	bb5c      	cbnz	r4, 8013c04 <_malloc_r+0x90>
 8013bac:	4629      	mov	r1, r5
 8013bae:	4638      	mov	r0, r7
 8013bb0:	f7ff ffc0 	bl	8013b34 <sbrk_aligned>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	4604      	mov	r4, r0
 8013bb8:	d155      	bne.n	8013c66 <_malloc_r+0xf2>
 8013bba:	f8d8 4000 	ldr.w	r4, [r8]
 8013bbe:	4626      	mov	r6, r4
 8013bc0:	2e00      	cmp	r6, #0
 8013bc2:	d145      	bne.n	8013c50 <_malloc_r+0xdc>
 8013bc4:	2c00      	cmp	r4, #0
 8013bc6:	d048      	beq.n	8013c5a <_malloc_r+0xe6>
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	4631      	mov	r1, r6
 8013bcc:	4638      	mov	r0, r7
 8013bce:	eb04 0903 	add.w	r9, r4, r3
 8013bd2:	f000 fdd3 	bl	801477c <_sbrk_r>
 8013bd6:	4581      	cmp	r9, r0
 8013bd8:	d13f      	bne.n	8013c5a <_malloc_r+0xe6>
 8013bda:	6821      	ldr	r1, [r4, #0]
 8013bdc:	1a6d      	subs	r5, r5, r1
 8013bde:	4629      	mov	r1, r5
 8013be0:	4638      	mov	r0, r7
 8013be2:	f7ff ffa7 	bl	8013b34 <sbrk_aligned>
 8013be6:	3001      	adds	r0, #1
 8013be8:	d037      	beq.n	8013c5a <_malloc_r+0xe6>
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	442b      	add	r3, r5
 8013bee:	6023      	str	r3, [r4, #0]
 8013bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d038      	beq.n	8013c6a <_malloc_r+0xf6>
 8013bf8:	685a      	ldr	r2, [r3, #4]
 8013bfa:	42a2      	cmp	r2, r4
 8013bfc:	d12b      	bne.n	8013c56 <_malloc_r+0xe2>
 8013bfe:	2200      	movs	r2, #0
 8013c00:	605a      	str	r2, [r3, #4]
 8013c02:	e00f      	b.n	8013c24 <_malloc_r+0xb0>
 8013c04:	6822      	ldr	r2, [r4, #0]
 8013c06:	1b52      	subs	r2, r2, r5
 8013c08:	d41f      	bmi.n	8013c4a <_malloc_r+0xd6>
 8013c0a:	2a0b      	cmp	r2, #11
 8013c0c:	d917      	bls.n	8013c3e <_malloc_r+0xca>
 8013c0e:	1961      	adds	r1, r4, r5
 8013c10:	42a3      	cmp	r3, r4
 8013c12:	6025      	str	r5, [r4, #0]
 8013c14:	bf18      	it	ne
 8013c16:	6059      	strne	r1, [r3, #4]
 8013c18:	6863      	ldr	r3, [r4, #4]
 8013c1a:	bf08      	it	eq
 8013c1c:	f8c8 1000 	streq.w	r1, [r8]
 8013c20:	5162      	str	r2, [r4, r5]
 8013c22:	604b      	str	r3, [r1, #4]
 8013c24:	4638      	mov	r0, r7
 8013c26:	f104 060b 	add.w	r6, r4, #11
 8013c2a:	f000 f829 	bl	8013c80 <__malloc_unlock>
 8013c2e:	f026 0607 	bic.w	r6, r6, #7
 8013c32:	1d23      	adds	r3, r4, #4
 8013c34:	1af2      	subs	r2, r6, r3
 8013c36:	d0ae      	beq.n	8013b96 <_malloc_r+0x22>
 8013c38:	1b9b      	subs	r3, r3, r6
 8013c3a:	50a3      	str	r3, [r4, r2]
 8013c3c:	e7ab      	b.n	8013b96 <_malloc_r+0x22>
 8013c3e:	42a3      	cmp	r3, r4
 8013c40:	6862      	ldr	r2, [r4, #4]
 8013c42:	d1dd      	bne.n	8013c00 <_malloc_r+0x8c>
 8013c44:	f8c8 2000 	str.w	r2, [r8]
 8013c48:	e7ec      	b.n	8013c24 <_malloc_r+0xb0>
 8013c4a:	4623      	mov	r3, r4
 8013c4c:	6864      	ldr	r4, [r4, #4]
 8013c4e:	e7ac      	b.n	8013baa <_malloc_r+0x36>
 8013c50:	4634      	mov	r4, r6
 8013c52:	6876      	ldr	r6, [r6, #4]
 8013c54:	e7b4      	b.n	8013bc0 <_malloc_r+0x4c>
 8013c56:	4613      	mov	r3, r2
 8013c58:	e7cc      	b.n	8013bf4 <_malloc_r+0x80>
 8013c5a:	230c      	movs	r3, #12
 8013c5c:	603b      	str	r3, [r7, #0]
 8013c5e:	4638      	mov	r0, r7
 8013c60:	f000 f80e 	bl	8013c80 <__malloc_unlock>
 8013c64:	e797      	b.n	8013b96 <_malloc_r+0x22>
 8013c66:	6025      	str	r5, [r4, #0]
 8013c68:	e7dc      	b.n	8013c24 <_malloc_r+0xb0>
 8013c6a:	605b      	str	r3, [r3, #4]
 8013c6c:	deff      	udf	#255	; 0xff
 8013c6e:	bf00      	nop
 8013c70:	2000995c 	.word	0x2000995c

08013c74 <__malloc_lock>:
 8013c74:	4801      	ldr	r0, [pc, #4]	; (8013c7c <__malloc_lock+0x8>)
 8013c76:	f7ff b87e 	b.w	8012d76 <__retarget_lock_acquire_recursive>
 8013c7a:	bf00      	nop
 8013c7c:	20009958 	.word	0x20009958

08013c80 <__malloc_unlock>:
 8013c80:	4801      	ldr	r0, [pc, #4]	; (8013c88 <__malloc_unlock+0x8>)
 8013c82:	f7ff b879 	b.w	8012d78 <__retarget_lock_release_recursive>
 8013c86:	bf00      	nop
 8013c88:	20009958 	.word	0x20009958

08013c8c <_Balloc>:
 8013c8c:	b570      	push	{r4, r5, r6, lr}
 8013c8e:	69c6      	ldr	r6, [r0, #28]
 8013c90:	4604      	mov	r4, r0
 8013c92:	460d      	mov	r5, r1
 8013c94:	b976      	cbnz	r6, 8013cb4 <_Balloc+0x28>
 8013c96:	2010      	movs	r0, #16
 8013c98:	f7ff ff44 	bl	8013b24 <malloc>
 8013c9c:	4602      	mov	r2, r0
 8013c9e:	61e0      	str	r0, [r4, #28]
 8013ca0:	b920      	cbnz	r0, 8013cac <_Balloc+0x20>
 8013ca2:	4b18      	ldr	r3, [pc, #96]	; (8013d04 <_Balloc+0x78>)
 8013ca4:	4818      	ldr	r0, [pc, #96]	; (8013d08 <_Balloc+0x7c>)
 8013ca6:	216b      	movs	r1, #107	; 0x6b
 8013ca8:	f000 fd78 	bl	801479c <__assert_func>
 8013cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013cb0:	6006      	str	r6, [r0, #0]
 8013cb2:	60c6      	str	r6, [r0, #12]
 8013cb4:	69e6      	ldr	r6, [r4, #28]
 8013cb6:	68f3      	ldr	r3, [r6, #12]
 8013cb8:	b183      	cbz	r3, 8013cdc <_Balloc+0x50>
 8013cba:	69e3      	ldr	r3, [r4, #28]
 8013cbc:	68db      	ldr	r3, [r3, #12]
 8013cbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013cc2:	b9b8      	cbnz	r0, 8013cf4 <_Balloc+0x68>
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	fa01 f605 	lsl.w	r6, r1, r5
 8013cca:	1d72      	adds	r2, r6, #5
 8013ccc:	0092      	lsls	r2, r2, #2
 8013cce:	4620      	mov	r0, r4
 8013cd0:	f000 fd82 	bl	80147d8 <_calloc_r>
 8013cd4:	b160      	cbz	r0, 8013cf0 <_Balloc+0x64>
 8013cd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013cda:	e00e      	b.n	8013cfa <_Balloc+0x6e>
 8013cdc:	2221      	movs	r2, #33	; 0x21
 8013cde:	2104      	movs	r1, #4
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	f000 fd79 	bl	80147d8 <_calloc_r>
 8013ce6:	69e3      	ldr	r3, [r4, #28]
 8013ce8:	60f0      	str	r0, [r6, #12]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d1e4      	bne.n	8013cba <_Balloc+0x2e>
 8013cf0:	2000      	movs	r0, #0
 8013cf2:	bd70      	pop	{r4, r5, r6, pc}
 8013cf4:	6802      	ldr	r2, [r0, #0]
 8013cf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d00:	e7f7      	b.n	8013cf2 <_Balloc+0x66>
 8013d02:	bf00      	nop
 8013d04:	08016582 	.word	0x08016582
 8013d08:	08016602 	.word	0x08016602

08013d0c <_Bfree>:
 8013d0c:	b570      	push	{r4, r5, r6, lr}
 8013d0e:	69c6      	ldr	r6, [r0, #28]
 8013d10:	4605      	mov	r5, r0
 8013d12:	460c      	mov	r4, r1
 8013d14:	b976      	cbnz	r6, 8013d34 <_Bfree+0x28>
 8013d16:	2010      	movs	r0, #16
 8013d18:	f7ff ff04 	bl	8013b24 <malloc>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	61e8      	str	r0, [r5, #28]
 8013d20:	b920      	cbnz	r0, 8013d2c <_Bfree+0x20>
 8013d22:	4b09      	ldr	r3, [pc, #36]	; (8013d48 <_Bfree+0x3c>)
 8013d24:	4809      	ldr	r0, [pc, #36]	; (8013d4c <_Bfree+0x40>)
 8013d26:	218f      	movs	r1, #143	; 0x8f
 8013d28:	f000 fd38 	bl	801479c <__assert_func>
 8013d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d30:	6006      	str	r6, [r0, #0]
 8013d32:	60c6      	str	r6, [r0, #12]
 8013d34:	b13c      	cbz	r4, 8013d46 <_Bfree+0x3a>
 8013d36:	69eb      	ldr	r3, [r5, #28]
 8013d38:	6862      	ldr	r2, [r4, #4]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013d40:	6021      	str	r1, [r4, #0]
 8013d42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013d46:	bd70      	pop	{r4, r5, r6, pc}
 8013d48:	08016582 	.word	0x08016582
 8013d4c:	08016602 	.word	0x08016602

08013d50 <__multadd>:
 8013d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d54:	690d      	ldr	r5, [r1, #16]
 8013d56:	4607      	mov	r7, r0
 8013d58:	460c      	mov	r4, r1
 8013d5a:	461e      	mov	r6, r3
 8013d5c:	f101 0c14 	add.w	ip, r1, #20
 8013d60:	2000      	movs	r0, #0
 8013d62:	f8dc 3000 	ldr.w	r3, [ip]
 8013d66:	b299      	uxth	r1, r3
 8013d68:	fb02 6101 	mla	r1, r2, r1, r6
 8013d6c:	0c1e      	lsrs	r6, r3, #16
 8013d6e:	0c0b      	lsrs	r3, r1, #16
 8013d70:	fb02 3306 	mla	r3, r2, r6, r3
 8013d74:	b289      	uxth	r1, r1
 8013d76:	3001      	adds	r0, #1
 8013d78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013d7c:	4285      	cmp	r5, r0
 8013d7e:	f84c 1b04 	str.w	r1, [ip], #4
 8013d82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013d86:	dcec      	bgt.n	8013d62 <__multadd+0x12>
 8013d88:	b30e      	cbz	r6, 8013dce <__multadd+0x7e>
 8013d8a:	68a3      	ldr	r3, [r4, #8]
 8013d8c:	42ab      	cmp	r3, r5
 8013d8e:	dc19      	bgt.n	8013dc4 <__multadd+0x74>
 8013d90:	6861      	ldr	r1, [r4, #4]
 8013d92:	4638      	mov	r0, r7
 8013d94:	3101      	adds	r1, #1
 8013d96:	f7ff ff79 	bl	8013c8c <_Balloc>
 8013d9a:	4680      	mov	r8, r0
 8013d9c:	b928      	cbnz	r0, 8013daa <__multadd+0x5a>
 8013d9e:	4602      	mov	r2, r0
 8013da0:	4b0c      	ldr	r3, [pc, #48]	; (8013dd4 <__multadd+0x84>)
 8013da2:	480d      	ldr	r0, [pc, #52]	; (8013dd8 <__multadd+0x88>)
 8013da4:	21ba      	movs	r1, #186	; 0xba
 8013da6:	f000 fcf9 	bl	801479c <__assert_func>
 8013daa:	6922      	ldr	r2, [r4, #16]
 8013dac:	3202      	adds	r2, #2
 8013dae:	f104 010c 	add.w	r1, r4, #12
 8013db2:	0092      	lsls	r2, r2, #2
 8013db4:	300c      	adds	r0, #12
 8013db6:	f7fe ffe0 	bl	8012d7a <memcpy>
 8013dba:	4621      	mov	r1, r4
 8013dbc:	4638      	mov	r0, r7
 8013dbe:	f7ff ffa5 	bl	8013d0c <_Bfree>
 8013dc2:	4644      	mov	r4, r8
 8013dc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013dc8:	3501      	adds	r5, #1
 8013dca:	615e      	str	r6, [r3, #20]
 8013dcc:	6125      	str	r5, [r4, #16]
 8013dce:	4620      	mov	r0, r4
 8013dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dd4:	080165f1 	.word	0x080165f1
 8013dd8:	08016602 	.word	0x08016602

08013ddc <__hi0bits>:
 8013ddc:	0c03      	lsrs	r3, r0, #16
 8013dde:	041b      	lsls	r3, r3, #16
 8013de0:	b9d3      	cbnz	r3, 8013e18 <__hi0bits+0x3c>
 8013de2:	0400      	lsls	r0, r0, #16
 8013de4:	2310      	movs	r3, #16
 8013de6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013dea:	bf04      	itt	eq
 8013dec:	0200      	lsleq	r0, r0, #8
 8013dee:	3308      	addeq	r3, #8
 8013df0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013df4:	bf04      	itt	eq
 8013df6:	0100      	lsleq	r0, r0, #4
 8013df8:	3304      	addeq	r3, #4
 8013dfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013dfe:	bf04      	itt	eq
 8013e00:	0080      	lsleq	r0, r0, #2
 8013e02:	3302      	addeq	r3, #2
 8013e04:	2800      	cmp	r0, #0
 8013e06:	db05      	blt.n	8013e14 <__hi0bits+0x38>
 8013e08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013e0c:	f103 0301 	add.w	r3, r3, #1
 8013e10:	bf08      	it	eq
 8013e12:	2320      	moveq	r3, #32
 8013e14:	4618      	mov	r0, r3
 8013e16:	4770      	bx	lr
 8013e18:	2300      	movs	r3, #0
 8013e1a:	e7e4      	b.n	8013de6 <__hi0bits+0xa>

08013e1c <__lo0bits>:
 8013e1c:	6803      	ldr	r3, [r0, #0]
 8013e1e:	f013 0207 	ands.w	r2, r3, #7
 8013e22:	d00c      	beq.n	8013e3e <__lo0bits+0x22>
 8013e24:	07d9      	lsls	r1, r3, #31
 8013e26:	d422      	bmi.n	8013e6e <__lo0bits+0x52>
 8013e28:	079a      	lsls	r2, r3, #30
 8013e2a:	bf49      	itett	mi
 8013e2c:	085b      	lsrmi	r3, r3, #1
 8013e2e:	089b      	lsrpl	r3, r3, #2
 8013e30:	6003      	strmi	r3, [r0, #0]
 8013e32:	2201      	movmi	r2, #1
 8013e34:	bf5c      	itt	pl
 8013e36:	6003      	strpl	r3, [r0, #0]
 8013e38:	2202      	movpl	r2, #2
 8013e3a:	4610      	mov	r0, r2
 8013e3c:	4770      	bx	lr
 8013e3e:	b299      	uxth	r1, r3
 8013e40:	b909      	cbnz	r1, 8013e46 <__lo0bits+0x2a>
 8013e42:	0c1b      	lsrs	r3, r3, #16
 8013e44:	2210      	movs	r2, #16
 8013e46:	b2d9      	uxtb	r1, r3
 8013e48:	b909      	cbnz	r1, 8013e4e <__lo0bits+0x32>
 8013e4a:	3208      	adds	r2, #8
 8013e4c:	0a1b      	lsrs	r3, r3, #8
 8013e4e:	0719      	lsls	r1, r3, #28
 8013e50:	bf04      	itt	eq
 8013e52:	091b      	lsreq	r3, r3, #4
 8013e54:	3204      	addeq	r2, #4
 8013e56:	0799      	lsls	r1, r3, #30
 8013e58:	bf04      	itt	eq
 8013e5a:	089b      	lsreq	r3, r3, #2
 8013e5c:	3202      	addeq	r2, #2
 8013e5e:	07d9      	lsls	r1, r3, #31
 8013e60:	d403      	bmi.n	8013e6a <__lo0bits+0x4e>
 8013e62:	085b      	lsrs	r3, r3, #1
 8013e64:	f102 0201 	add.w	r2, r2, #1
 8013e68:	d003      	beq.n	8013e72 <__lo0bits+0x56>
 8013e6a:	6003      	str	r3, [r0, #0]
 8013e6c:	e7e5      	b.n	8013e3a <__lo0bits+0x1e>
 8013e6e:	2200      	movs	r2, #0
 8013e70:	e7e3      	b.n	8013e3a <__lo0bits+0x1e>
 8013e72:	2220      	movs	r2, #32
 8013e74:	e7e1      	b.n	8013e3a <__lo0bits+0x1e>
	...

08013e78 <__i2b>:
 8013e78:	b510      	push	{r4, lr}
 8013e7a:	460c      	mov	r4, r1
 8013e7c:	2101      	movs	r1, #1
 8013e7e:	f7ff ff05 	bl	8013c8c <_Balloc>
 8013e82:	4602      	mov	r2, r0
 8013e84:	b928      	cbnz	r0, 8013e92 <__i2b+0x1a>
 8013e86:	4b05      	ldr	r3, [pc, #20]	; (8013e9c <__i2b+0x24>)
 8013e88:	4805      	ldr	r0, [pc, #20]	; (8013ea0 <__i2b+0x28>)
 8013e8a:	f240 1145 	movw	r1, #325	; 0x145
 8013e8e:	f000 fc85 	bl	801479c <__assert_func>
 8013e92:	2301      	movs	r3, #1
 8013e94:	6144      	str	r4, [r0, #20]
 8013e96:	6103      	str	r3, [r0, #16]
 8013e98:	bd10      	pop	{r4, pc}
 8013e9a:	bf00      	nop
 8013e9c:	080165f1 	.word	0x080165f1
 8013ea0:	08016602 	.word	0x08016602

08013ea4 <__multiply>:
 8013ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ea8:	4691      	mov	r9, r2
 8013eaa:	690a      	ldr	r2, [r1, #16]
 8013eac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	bfb8      	it	lt
 8013eb4:	460b      	movlt	r3, r1
 8013eb6:	460c      	mov	r4, r1
 8013eb8:	bfbc      	itt	lt
 8013eba:	464c      	movlt	r4, r9
 8013ebc:	4699      	movlt	r9, r3
 8013ebe:	6927      	ldr	r7, [r4, #16]
 8013ec0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013ec4:	68a3      	ldr	r3, [r4, #8]
 8013ec6:	6861      	ldr	r1, [r4, #4]
 8013ec8:	eb07 060a 	add.w	r6, r7, sl
 8013ecc:	42b3      	cmp	r3, r6
 8013ece:	b085      	sub	sp, #20
 8013ed0:	bfb8      	it	lt
 8013ed2:	3101      	addlt	r1, #1
 8013ed4:	f7ff feda 	bl	8013c8c <_Balloc>
 8013ed8:	b930      	cbnz	r0, 8013ee8 <__multiply+0x44>
 8013eda:	4602      	mov	r2, r0
 8013edc:	4b44      	ldr	r3, [pc, #272]	; (8013ff0 <__multiply+0x14c>)
 8013ede:	4845      	ldr	r0, [pc, #276]	; (8013ff4 <__multiply+0x150>)
 8013ee0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013ee4:	f000 fc5a 	bl	801479c <__assert_func>
 8013ee8:	f100 0514 	add.w	r5, r0, #20
 8013eec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013ef0:	462b      	mov	r3, r5
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	4543      	cmp	r3, r8
 8013ef6:	d321      	bcc.n	8013f3c <__multiply+0x98>
 8013ef8:	f104 0314 	add.w	r3, r4, #20
 8013efc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013f00:	f109 0314 	add.w	r3, r9, #20
 8013f04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013f08:	9202      	str	r2, [sp, #8]
 8013f0a:	1b3a      	subs	r2, r7, r4
 8013f0c:	3a15      	subs	r2, #21
 8013f0e:	f022 0203 	bic.w	r2, r2, #3
 8013f12:	3204      	adds	r2, #4
 8013f14:	f104 0115 	add.w	r1, r4, #21
 8013f18:	428f      	cmp	r7, r1
 8013f1a:	bf38      	it	cc
 8013f1c:	2204      	movcc	r2, #4
 8013f1e:	9201      	str	r2, [sp, #4]
 8013f20:	9a02      	ldr	r2, [sp, #8]
 8013f22:	9303      	str	r3, [sp, #12]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	d80c      	bhi.n	8013f42 <__multiply+0x9e>
 8013f28:	2e00      	cmp	r6, #0
 8013f2a:	dd03      	ble.n	8013f34 <__multiply+0x90>
 8013f2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d05b      	beq.n	8013fec <__multiply+0x148>
 8013f34:	6106      	str	r6, [r0, #16]
 8013f36:	b005      	add	sp, #20
 8013f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f3c:	f843 2b04 	str.w	r2, [r3], #4
 8013f40:	e7d8      	b.n	8013ef4 <__multiply+0x50>
 8013f42:	f8b3 a000 	ldrh.w	sl, [r3]
 8013f46:	f1ba 0f00 	cmp.w	sl, #0
 8013f4a:	d024      	beq.n	8013f96 <__multiply+0xf2>
 8013f4c:	f104 0e14 	add.w	lr, r4, #20
 8013f50:	46a9      	mov	r9, r5
 8013f52:	f04f 0c00 	mov.w	ip, #0
 8013f56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013f5a:	f8d9 1000 	ldr.w	r1, [r9]
 8013f5e:	fa1f fb82 	uxth.w	fp, r2
 8013f62:	b289      	uxth	r1, r1
 8013f64:	fb0a 110b 	mla	r1, sl, fp, r1
 8013f68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013f6c:	f8d9 2000 	ldr.w	r2, [r9]
 8013f70:	4461      	add	r1, ip
 8013f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013f76:	fb0a c20b 	mla	r2, sl, fp, ip
 8013f7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013f7e:	b289      	uxth	r1, r1
 8013f80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013f84:	4577      	cmp	r7, lr
 8013f86:	f849 1b04 	str.w	r1, [r9], #4
 8013f8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013f8e:	d8e2      	bhi.n	8013f56 <__multiply+0xb2>
 8013f90:	9a01      	ldr	r2, [sp, #4]
 8013f92:	f845 c002 	str.w	ip, [r5, r2]
 8013f96:	9a03      	ldr	r2, [sp, #12]
 8013f98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013f9c:	3304      	adds	r3, #4
 8013f9e:	f1b9 0f00 	cmp.w	r9, #0
 8013fa2:	d021      	beq.n	8013fe8 <__multiply+0x144>
 8013fa4:	6829      	ldr	r1, [r5, #0]
 8013fa6:	f104 0c14 	add.w	ip, r4, #20
 8013faa:	46ae      	mov	lr, r5
 8013fac:	f04f 0a00 	mov.w	sl, #0
 8013fb0:	f8bc b000 	ldrh.w	fp, [ip]
 8013fb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013fb8:	fb09 220b 	mla	r2, r9, fp, r2
 8013fbc:	4452      	add	r2, sl
 8013fbe:	b289      	uxth	r1, r1
 8013fc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013fc4:	f84e 1b04 	str.w	r1, [lr], #4
 8013fc8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013fcc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013fd0:	f8be 1000 	ldrh.w	r1, [lr]
 8013fd4:	fb09 110a 	mla	r1, r9, sl, r1
 8013fd8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013fdc:	4567      	cmp	r7, ip
 8013fde:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013fe2:	d8e5      	bhi.n	8013fb0 <__multiply+0x10c>
 8013fe4:	9a01      	ldr	r2, [sp, #4]
 8013fe6:	50a9      	str	r1, [r5, r2]
 8013fe8:	3504      	adds	r5, #4
 8013fea:	e799      	b.n	8013f20 <__multiply+0x7c>
 8013fec:	3e01      	subs	r6, #1
 8013fee:	e79b      	b.n	8013f28 <__multiply+0x84>
 8013ff0:	080165f1 	.word	0x080165f1
 8013ff4:	08016602 	.word	0x08016602

08013ff8 <__pow5mult>:
 8013ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ffc:	4615      	mov	r5, r2
 8013ffe:	f012 0203 	ands.w	r2, r2, #3
 8014002:	4606      	mov	r6, r0
 8014004:	460f      	mov	r7, r1
 8014006:	d007      	beq.n	8014018 <__pow5mult+0x20>
 8014008:	4c25      	ldr	r4, [pc, #148]	; (80140a0 <__pow5mult+0xa8>)
 801400a:	3a01      	subs	r2, #1
 801400c:	2300      	movs	r3, #0
 801400e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014012:	f7ff fe9d 	bl	8013d50 <__multadd>
 8014016:	4607      	mov	r7, r0
 8014018:	10ad      	asrs	r5, r5, #2
 801401a:	d03d      	beq.n	8014098 <__pow5mult+0xa0>
 801401c:	69f4      	ldr	r4, [r6, #28]
 801401e:	b97c      	cbnz	r4, 8014040 <__pow5mult+0x48>
 8014020:	2010      	movs	r0, #16
 8014022:	f7ff fd7f 	bl	8013b24 <malloc>
 8014026:	4602      	mov	r2, r0
 8014028:	61f0      	str	r0, [r6, #28]
 801402a:	b928      	cbnz	r0, 8014038 <__pow5mult+0x40>
 801402c:	4b1d      	ldr	r3, [pc, #116]	; (80140a4 <__pow5mult+0xac>)
 801402e:	481e      	ldr	r0, [pc, #120]	; (80140a8 <__pow5mult+0xb0>)
 8014030:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014034:	f000 fbb2 	bl	801479c <__assert_func>
 8014038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801403c:	6004      	str	r4, [r0, #0]
 801403e:	60c4      	str	r4, [r0, #12]
 8014040:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014048:	b94c      	cbnz	r4, 801405e <__pow5mult+0x66>
 801404a:	f240 2171 	movw	r1, #625	; 0x271
 801404e:	4630      	mov	r0, r6
 8014050:	f7ff ff12 	bl	8013e78 <__i2b>
 8014054:	2300      	movs	r3, #0
 8014056:	f8c8 0008 	str.w	r0, [r8, #8]
 801405a:	4604      	mov	r4, r0
 801405c:	6003      	str	r3, [r0, #0]
 801405e:	f04f 0900 	mov.w	r9, #0
 8014062:	07eb      	lsls	r3, r5, #31
 8014064:	d50a      	bpl.n	801407c <__pow5mult+0x84>
 8014066:	4639      	mov	r1, r7
 8014068:	4622      	mov	r2, r4
 801406a:	4630      	mov	r0, r6
 801406c:	f7ff ff1a 	bl	8013ea4 <__multiply>
 8014070:	4639      	mov	r1, r7
 8014072:	4680      	mov	r8, r0
 8014074:	4630      	mov	r0, r6
 8014076:	f7ff fe49 	bl	8013d0c <_Bfree>
 801407a:	4647      	mov	r7, r8
 801407c:	106d      	asrs	r5, r5, #1
 801407e:	d00b      	beq.n	8014098 <__pow5mult+0xa0>
 8014080:	6820      	ldr	r0, [r4, #0]
 8014082:	b938      	cbnz	r0, 8014094 <__pow5mult+0x9c>
 8014084:	4622      	mov	r2, r4
 8014086:	4621      	mov	r1, r4
 8014088:	4630      	mov	r0, r6
 801408a:	f7ff ff0b 	bl	8013ea4 <__multiply>
 801408e:	6020      	str	r0, [r4, #0]
 8014090:	f8c0 9000 	str.w	r9, [r0]
 8014094:	4604      	mov	r4, r0
 8014096:	e7e4      	b.n	8014062 <__pow5mult+0x6a>
 8014098:	4638      	mov	r0, r7
 801409a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801409e:	bf00      	nop
 80140a0:	08016750 	.word	0x08016750
 80140a4:	08016582 	.word	0x08016582
 80140a8:	08016602 	.word	0x08016602

080140ac <__lshift>:
 80140ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140b0:	460c      	mov	r4, r1
 80140b2:	6849      	ldr	r1, [r1, #4]
 80140b4:	6923      	ldr	r3, [r4, #16]
 80140b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80140ba:	68a3      	ldr	r3, [r4, #8]
 80140bc:	4607      	mov	r7, r0
 80140be:	4691      	mov	r9, r2
 80140c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80140c4:	f108 0601 	add.w	r6, r8, #1
 80140c8:	42b3      	cmp	r3, r6
 80140ca:	db0b      	blt.n	80140e4 <__lshift+0x38>
 80140cc:	4638      	mov	r0, r7
 80140ce:	f7ff fddd 	bl	8013c8c <_Balloc>
 80140d2:	4605      	mov	r5, r0
 80140d4:	b948      	cbnz	r0, 80140ea <__lshift+0x3e>
 80140d6:	4602      	mov	r2, r0
 80140d8:	4b28      	ldr	r3, [pc, #160]	; (801417c <__lshift+0xd0>)
 80140da:	4829      	ldr	r0, [pc, #164]	; (8014180 <__lshift+0xd4>)
 80140dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80140e0:	f000 fb5c 	bl	801479c <__assert_func>
 80140e4:	3101      	adds	r1, #1
 80140e6:	005b      	lsls	r3, r3, #1
 80140e8:	e7ee      	b.n	80140c8 <__lshift+0x1c>
 80140ea:	2300      	movs	r3, #0
 80140ec:	f100 0114 	add.w	r1, r0, #20
 80140f0:	f100 0210 	add.w	r2, r0, #16
 80140f4:	4618      	mov	r0, r3
 80140f6:	4553      	cmp	r3, sl
 80140f8:	db33      	blt.n	8014162 <__lshift+0xb6>
 80140fa:	6920      	ldr	r0, [r4, #16]
 80140fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014100:	f104 0314 	add.w	r3, r4, #20
 8014104:	f019 091f 	ands.w	r9, r9, #31
 8014108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801410c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014110:	d02b      	beq.n	801416a <__lshift+0xbe>
 8014112:	f1c9 0e20 	rsb	lr, r9, #32
 8014116:	468a      	mov	sl, r1
 8014118:	2200      	movs	r2, #0
 801411a:	6818      	ldr	r0, [r3, #0]
 801411c:	fa00 f009 	lsl.w	r0, r0, r9
 8014120:	4310      	orrs	r0, r2
 8014122:	f84a 0b04 	str.w	r0, [sl], #4
 8014126:	f853 2b04 	ldr.w	r2, [r3], #4
 801412a:	459c      	cmp	ip, r3
 801412c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014130:	d8f3      	bhi.n	801411a <__lshift+0x6e>
 8014132:	ebac 0304 	sub.w	r3, ip, r4
 8014136:	3b15      	subs	r3, #21
 8014138:	f023 0303 	bic.w	r3, r3, #3
 801413c:	3304      	adds	r3, #4
 801413e:	f104 0015 	add.w	r0, r4, #21
 8014142:	4584      	cmp	ip, r0
 8014144:	bf38      	it	cc
 8014146:	2304      	movcc	r3, #4
 8014148:	50ca      	str	r2, [r1, r3]
 801414a:	b10a      	cbz	r2, 8014150 <__lshift+0xa4>
 801414c:	f108 0602 	add.w	r6, r8, #2
 8014150:	3e01      	subs	r6, #1
 8014152:	4638      	mov	r0, r7
 8014154:	612e      	str	r6, [r5, #16]
 8014156:	4621      	mov	r1, r4
 8014158:	f7ff fdd8 	bl	8013d0c <_Bfree>
 801415c:	4628      	mov	r0, r5
 801415e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014162:	f842 0f04 	str.w	r0, [r2, #4]!
 8014166:	3301      	adds	r3, #1
 8014168:	e7c5      	b.n	80140f6 <__lshift+0x4a>
 801416a:	3904      	subs	r1, #4
 801416c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014170:	f841 2f04 	str.w	r2, [r1, #4]!
 8014174:	459c      	cmp	ip, r3
 8014176:	d8f9      	bhi.n	801416c <__lshift+0xc0>
 8014178:	e7ea      	b.n	8014150 <__lshift+0xa4>
 801417a:	bf00      	nop
 801417c:	080165f1 	.word	0x080165f1
 8014180:	08016602 	.word	0x08016602

08014184 <__mcmp>:
 8014184:	b530      	push	{r4, r5, lr}
 8014186:	6902      	ldr	r2, [r0, #16]
 8014188:	690c      	ldr	r4, [r1, #16]
 801418a:	1b12      	subs	r2, r2, r4
 801418c:	d10e      	bne.n	80141ac <__mcmp+0x28>
 801418e:	f100 0314 	add.w	r3, r0, #20
 8014192:	3114      	adds	r1, #20
 8014194:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014198:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801419c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80141a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80141a4:	42a5      	cmp	r5, r4
 80141a6:	d003      	beq.n	80141b0 <__mcmp+0x2c>
 80141a8:	d305      	bcc.n	80141b6 <__mcmp+0x32>
 80141aa:	2201      	movs	r2, #1
 80141ac:	4610      	mov	r0, r2
 80141ae:	bd30      	pop	{r4, r5, pc}
 80141b0:	4283      	cmp	r3, r0
 80141b2:	d3f3      	bcc.n	801419c <__mcmp+0x18>
 80141b4:	e7fa      	b.n	80141ac <__mcmp+0x28>
 80141b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80141ba:	e7f7      	b.n	80141ac <__mcmp+0x28>

080141bc <__mdiff>:
 80141bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c0:	460c      	mov	r4, r1
 80141c2:	4606      	mov	r6, r0
 80141c4:	4611      	mov	r1, r2
 80141c6:	4620      	mov	r0, r4
 80141c8:	4690      	mov	r8, r2
 80141ca:	f7ff ffdb 	bl	8014184 <__mcmp>
 80141ce:	1e05      	subs	r5, r0, #0
 80141d0:	d110      	bne.n	80141f4 <__mdiff+0x38>
 80141d2:	4629      	mov	r1, r5
 80141d4:	4630      	mov	r0, r6
 80141d6:	f7ff fd59 	bl	8013c8c <_Balloc>
 80141da:	b930      	cbnz	r0, 80141ea <__mdiff+0x2e>
 80141dc:	4b3a      	ldr	r3, [pc, #232]	; (80142c8 <__mdiff+0x10c>)
 80141de:	4602      	mov	r2, r0
 80141e0:	f240 2137 	movw	r1, #567	; 0x237
 80141e4:	4839      	ldr	r0, [pc, #228]	; (80142cc <__mdiff+0x110>)
 80141e6:	f000 fad9 	bl	801479c <__assert_func>
 80141ea:	2301      	movs	r3, #1
 80141ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80141f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f4:	bfa4      	itt	ge
 80141f6:	4643      	movge	r3, r8
 80141f8:	46a0      	movge	r8, r4
 80141fa:	4630      	mov	r0, r6
 80141fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014200:	bfa6      	itte	ge
 8014202:	461c      	movge	r4, r3
 8014204:	2500      	movge	r5, #0
 8014206:	2501      	movlt	r5, #1
 8014208:	f7ff fd40 	bl	8013c8c <_Balloc>
 801420c:	b920      	cbnz	r0, 8014218 <__mdiff+0x5c>
 801420e:	4b2e      	ldr	r3, [pc, #184]	; (80142c8 <__mdiff+0x10c>)
 8014210:	4602      	mov	r2, r0
 8014212:	f240 2145 	movw	r1, #581	; 0x245
 8014216:	e7e5      	b.n	80141e4 <__mdiff+0x28>
 8014218:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801421c:	6926      	ldr	r6, [r4, #16]
 801421e:	60c5      	str	r5, [r0, #12]
 8014220:	f104 0914 	add.w	r9, r4, #20
 8014224:	f108 0514 	add.w	r5, r8, #20
 8014228:	f100 0e14 	add.w	lr, r0, #20
 801422c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014230:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014234:	f108 0210 	add.w	r2, r8, #16
 8014238:	46f2      	mov	sl, lr
 801423a:	2100      	movs	r1, #0
 801423c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014240:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014244:	fa11 f88b 	uxtah	r8, r1, fp
 8014248:	b299      	uxth	r1, r3
 801424a:	0c1b      	lsrs	r3, r3, #16
 801424c:	eba8 0801 	sub.w	r8, r8, r1
 8014250:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014254:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014258:	fa1f f888 	uxth.w	r8, r8
 801425c:	1419      	asrs	r1, r3, #16
 801425e:	454e      	cmp	r6, r9
 8014260:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014264:	f84a 3b04 	str.w	r3, [sl], #4
 8014268:	d8e8      	bhi.n	801423c <__mdiff+0x80>
 801426a:	1b33      	subs	r3, r6, r4
 801426c:	3b15      	subs	r3, #21
 801426e:	f023 0303 	bic.w	r3, r3, #3
 8014272:	3304      	adds	r3, #4
 8014274:	3415      	adds	r4, #21
 8014276:	42a6      	cmp	r6, r4
 8014278:	bf38      	it	cc
 801427a:	2304      	movcc	r3, #4
 801427c:	441d      	add	r5, r3
 801427e:	4473      	add	r3, lr
 8014280:	469e      	mov	lr, r3
 8014282:	462e      	mov	r6, r5
 8014284:	4566      	cmp	r6, ip
 8014286:	d30e      	bcc.n	80142a6 <__mdiff+0xea>
 8014288:	f10c 0203 	add.w	r2, ip, #3
 801428c:	1b52      	subs	r2, r2, r5
 801428e:	f022 0203 	bic.w	r2, r2, #3
 8014292:	3d03      	subs	r5, #3
 8014294:	45ac      	cmp	ip, r5
 8014296:	bf38      	it	cc
 8014298:	2200      	movcc	r2, #0
 801429a:	4413      	add	r3, r2
 801429c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80142a0:	b17a      	cbz	r2, 80142c2 <__mdiff+0x106>
 80142a2:	6107      	str	r7, [r0, #16]
 80142a4:	e7a4      	b.n	80141f0 <__mdiff+0x34>
 80142a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80142aa:	fa11 f288 	uxtah	r2, r1, r8
 80142ae:	1414      	asrs	r4, r2, #16
 80142b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80142b4:	b292      	uxth	r2, r2
 80142b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80142ba:	f84e 2b04 	str.w	r2, [lr], #4
 80142be:	1421      	asrs	r1, r4, #16
 80142c0:	e7e0      	b.n	8014284 <__mdiff+0xc8>
 80142c2:	3f01      	subs	r7, #1
 80142c4:	e7ea      	b.n	801429c <__mdiff+0xe0>
 80142c6:	bf00      	nop
 80142c8:	080165f1 	.word	0x080165f1
 80142cc:	08016602 	.word	0x08016602

080142d0 <__d2b>:
 80142d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80142d4:	460f      	mov	r7, r1
 80142d6:	2101      	movs	r1, #1
 80142d8:	ec59 8b10 	vmov	r8, r9, d0
 80142dc:	4616      	mov	r6, r2
 80142de:	f7ff fcd5 	bl	8013c8c <_Balloc>
 80142e2:	4604      	mov	r4, r0
 80142e4:	b930      	cbnz	r0, 80142f4 <__d2b+0x24>
 80142e6:	4602      	mov	r2, r0
 80142e8:	4b24      	ldr	r3, [pc, #144]	; (801437c <__d2b+0xac>)
 80142ea:	4825      	ldr	r0, [pc, #148]	; (8014380 <__d2b+0xb0>)
 80142ec:	f240 310f 	movw	r1, #783	; 0x30f
 80142f0:	f000 fa54 	bl	801479c <__assert_func>
 80142f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80142f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142fc:	bb2d      	cbnz	r5, 801434a <__d2b+0x7a>
 80142fe:	9301      	str	r3, [sp, #4]
 8014300:	f1b8 0300 	subs.w	r3, r8, #0
 8014304:	d026      	beq.n	8014354 <__d2b+0x84>
 8014306:	4668      	mov	r0, sp
 8014308:	9300      	str	r3, [sp, #0]
 801430a:	f7ff fd87 	bl	8013e1c <__lo0bits>
 801430e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014312:	b1e8      	cbz	r0, 8014350 <__d2b+0x80>
 8014314:	f1c0 0320 	rsb	r3, r0, #32
 8014318:	fa02 f303 	lsl.w	r3, r2, r3
 801431c:	430b      	orrs	r3, r1
 801431e:	40c2      	lsrs	r2, r0
 8014320:	6163      	str	r3, [r4, #20]
 8014322:	9201      	str	r2, [sp, #4]
 8014324:	9b01      	ldr	r3, [sp, #4]
 8014326:	61a3      	str	r3, [r4, #24]
 8014328:	2b00      	cmp	r3, #0
 801432a:	bf14      	ite	ne
 801432c:	2202      	movne	r2, #2
 801432e:	2201      	moveq	r2, #1
 8014330:	6122      	str	r2, [r4, #16]
 8014332:	b1bd      	cbz	r5, 8014364 <__d2b+0x94>
 8014334:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014338:	4405      	add	r5, r0
 801433a:	603d      	str	r5, [r7, #0]
 801433c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014340:	6030      	str	r0, [r6, #0]
 8014342:	4620      	mov	r0, r4
 8014344:	b003      	add	sp, #12
 8014346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801434a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801434e:	e7d6      	b.n	80142fe <__d2b+0x2e>
 8014350:	6161      	str	r1, [r4, #20]
 8014352:	e7e7      	b.n	8014324 <__d2b+0x54>
 8014354:	a801      	add	r0, sp, #4
 8014356:	f7ff fd61 	bl	8013e1c <__lo0bits>
 801435a:	9b01      	ldr	r3, [sp, #4]
 801435c:	6163      	str	r3, [r4, #20]
 801435e:	3020      	adds	r0, #32
 8014360:	2201      	movs	r2, #1
 8014362:	e7e5      	b.n	8014330 <__d2b+0x60>
 8014364:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014368:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801436c:	6038      	str	r0, [r7, #0]
 801436e:	6918      	ldr	r0, [r3, #16]
 8014370:	f7ff fd34 	bl	8013ddc <__hi0bits>
 8014374:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014378:	e7e2      	b.n	8014340 <__d2b+0x70>
 801437a:	bf00      	nop
 801437c:	080165f1 	.word	0x080165f1
 8014380:	08016602 	.word	0x08016602

08014384 <__sfputc_r>:
 8014384:	6893      	ldr	r3, [r2, #8]
 8014386:	3b01      	subs	r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	b410      	push	{r4}
 801438c:	6093      	str	r3, [r2, #8]
 801438e:	da08      	bge.n	80143a2 <__sfputc_r+0x1e>
 8014390:	6994      	ldr	r4, [r2, #24]
 8014392:	42a3      	cmp	r3, r4
 8014394:	db01      	blt.n	801439a <__sfputc_r+0x16>
 8014396:	290a      	cmp	r1, #10
 8014398:	d103      	bne.n	80143a2 <__sfputc_r+0x1e>
 801439a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801439e:	f7fe bb6e 	b.w	8012a7e <__swbuf_r>
 80143a2:	6813      	ldr	r3, [r2, #0]
 80143a4:	1c58      	adds	r0, r3, #1
 80143a6:	6010      	str	r0, [r2, #0]
 80143a8:	7019      	strb	r1, [r3, #0]
 80143aa:	4608      	mov	r0, r1
 80143ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143b0:	4770      	bx	lr

080143b2 <__sfputs_r>:
 80143b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143b4:	4606      	mov	r6, r0
 80143b6:	460f      	mov	r7, r1
 80143b8:	4614      	mov	r4, r2
 80143ba:	18d5      	adds	r5, r2, r3
 80143bc:	42ac      	cmp	r4, r5
 80143be:	d101      	bne.n	80143c4 <__sfputs_r+0x12>
 80143c0:	2000      	movs	r0, #0
 80143c2:	e007      	b.n	80143d4 <__sfputs_r+0x22>
 80143c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143c8:	463a      	mov	r2, r7
 80143ca:	4630      	mov	r0, r6
 80143cc:	f7ff ffda 	bl	8014384 <__sfputc_r>
 80143d0:	1c43      	adds	r3, r0, #1
 80143d2:	d1f3      	bne.n	80143bc <__sfputs_r+0xa>
 80143d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080143d8 <_vfiprintf_r>:
 80143d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143dc:	460d      	mov	r5, r1
 80143de:	b09d      	sub	sp, #116	; 0x74
 80143e0:	4614      	mov	r4, r2
 80143e2:	4698      	mov	r8, r3
 80143e4:	4606      	mov	r6, r0
 80143e6:	b118      	cbz	r0, 80143f0 <_vfiprintf_r+0x18>
 80143e8:	6a03      	ldr	r3, [r0, #32]
 80143ea:	b90b      	cbnz	r3, 80143f0 <_vfiprintf_r+0x18>
 80143ec:	f7fe fab4 	bl	8012958 <__sinit>
 80143f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80143f2:	07d9      	lsls	r1, r3, #31
 80143f4:	d405      	bmi.n	8014402 <_vfiprintf_r+0x2a>
 80143f6:	89ab      	ldrh	r3, [r5, #12]
 80143f8:	059a      	lsls	r2, r3, #22
 80143fa:	d402      	bmi.n	8014402 <_vfiprintf_r+0x2a>
 80143fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143fe:	f7fe fcba 	bl	8012d76 <__retarget_lock_acquire_recursive>
 8014402:	89ab      	ldrh	r3, [r5, #12]
 8014404:	071b      	lsls	r3, r3, #28
 8014406:	d501      	bpl.n	801440c <_vfiprintf_r+0x34>
 8014408:	692b      	ldr	r3, [r5, #16]
 801440a:	b99b      	cbnz	r3, 8014434 <_vfiprintf_r+0x5c>
 801440c:	4629      	mov	r1, r5
 801440e:	4630      	mov	r0, r6
 8014410:	f7fe fb72 	bl	8012af8 <__swsetup_r>
 8014414:	b170      	cbz	r0, 8014434 <_vfiprintf_r+0x5c>
 8014416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014418:	07dc      	lsls	r4, r3, #31
 801441a:	d504      	bpl.n	8014426 <_vfiprintf_r+0x4e>
 801441c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014420:	b01d      	add	sp, #116	; 0x74
 8014422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014426:	89ab      	ldrh	r3, [r5, #12]
 8014428:	0598      	lsls	r0, r3, #22
 801442a:	d4f7      	bmi.n	801441c <_vfiprintf_r+0x44>
 801442c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801442e:	f7fe fca3 	bl	8012d78 <__retarget_lock_release_recursive>
 8014432:	e7f3      	b.n	801441c <_vfiprintf_r+0x44>
 8014434:	2300      	movs	r3, #0
 8014436:	9309      	str	r3, [sp, #36]	; 0x24
 8014438:	2320      	movs	r3, #32
 801443a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801443e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014442:	2330      	movs	r3, #48	; 0x30
 8014444:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80145f8 <_vfiprintf_r+0x220>
 8014448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801444c:	f04f 0901 	mov.w	r9, #1
 8014450:	4623      	mov	r3, r4
 8014452:	469a      	mov	sl, r3
 8014454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014458:	b10a      	cbz	r2, 801445e <_vfiprintf_r+0x86>
 801445a:	2a25      	cmp	r2, #37	; 0x25
 801445c:	d1f9      	bne.n	8014452 <_vfiprintf_r+0x7a>
 801445e:	ebba 0b04 	subs.w	fp, sl, r4
 8014462:	d00b      	beq.n	801447c <_vfiprintf_r+0xa4>
 8014464:	465b      	mov	r3, fp
 8014466:	4622      	mov	r2, r4
 8014468:	4629      	mov	r1, r5
 801446a:	4630      	mov	r0, r6
 801446c:	f7ff ffa1 	bl	80143b2 <__sfputs_r>
 8014470:	3001      	adds	r0, #1
 8014472:	f000 80a9 	beq.w	80145c8 <_vfiprintf_r+0x1f0>
 8014476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014478:	445a      	add	r2, fp
 801447a:	9209      	str	r2, [sp, #36]	; 0x24
 801447c:	f89a 3000 	ldrb.w	r3, [sl]
 8014480:	2b00      	cmp	r3, #0
 8014482:	f000 80a1 	beq.w	80145c8 <_vfiprintf_r+0x1f0>
 8014486:	2300      	movs	r3, #0
 8014488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801448c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014490:	f10a 0a01 	add.w	sl, sl, #1
 8014494:	9304      	str	r3, [sp, #16]
 8014496:	9307      	str	r3, [sp, #28]
 8014498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801449c:	931a      	str	r3, [sp, #104]	; 0x68
 801449e:	4654      	mov	r4, sl
 80144a0:	2205      	movs	r2, #5
 80144a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a6:	4854      	ldr	r0, [pc, #336]	; (80145f8 <_vfiprintf_r+0x220>)
 80144a8:	f7eb fea2 	bl	80001f0 <memchr>
 80144ac:	9a04      	ldr	r2, [sp, #16]
 80144ae:	b9d8      	cbnz	r0, 80144e8 <_vfiprintf_r+0x110>
 80144b0:	06d1      	lsls	r1, r2, #27
 80144b2:	bf44      	itt	mi
 80144b4:	2320      	movmi	r3, #32
 80144b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144ba:	0713      	lsls	r3, r2, #28
 80144bc:	bf44      	itt	mi
 80144be:	232b      	movmi	r3, #43	; 0x2b
 80144c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80144c4:	f89a 3000 	ldrb.w	r3, [sl]
 80144c8:	2b2a      	cmp	r3, #42	; 0x2a
 80144ca:	d015      	beq.n	80144f8 <_vfiprintf_r+0x120>
 80144cc:	9a07      	ldr	r2, [sp, #28]
 80144ce:	4654      	mov	r4, sl
 80144d0:	2000      	movs	r0, #0
 80144d2:	f04f 0c0a 	mov.w	ip, #10
 80144d6:	4621      	mov	r1, r4
 80144d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144dc:	3b30      	subs	r3, #48	; 0x30
 80144de:	2b09      	cmp	r3, #9
 80144e0:	d94d      	bls.n	801457e <_vfiprintf_r+0x1a6>
 80144e2:	b1b0      	cbz	r0, 8014512 <_vfiprintf_r+0x13a>
 80144e4:	9207      	str	r2, [sp, #28]
 80144e6:	e014      	b.n	8014512 <_vfiprintf_r+0x13a>
 80144e8:	eba0 0308 	sub.w	r3, r0, r8
 80144ec:	fa09 f303 	lsl.w	r3, r9, r3
 80144f0:	4313      	orrs	r3, r2
 80144f2:	9304      	str	r3, [sp, #16]
 80144f4:	46a2      	mov	sl, r4
 80144f6:	e7d2      	b.n	801449e <_vfiprintf_r+0xc6>
 80144f8:	9b03      	ldr	r3, [sp, #12]
 80144fa:	1d19      	adds	r1, r3, #4
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	9103      	str	r1, [sp, #12]
 8014500:	2b00      	cmp	r3, #0
 8014502:	bfbb      	ittet	lt
 8014504:	425b      	neglt	r3, r3
 8014506:	f042 0202 	orrlt.w	r2, r2, #2
 801450a:	9307      	strge	r3, [sp, #28]
 801450c:	9307      	strlt	r3, [sp, #28]
 801450e:	bfb8      	it	lt
 8014510:	9204      	strlt	r2, [sp, #16]
 8014512:	7823      	ldrb	r3, [r4, #0]
 8014514:	2b2e      	cmp	r3, #46	; 0x2e
 8014516:	d10c      	bne.n	8014532 <_vfiprintf_r+0x15a>
 8014518:	7863      	ldrb	r3, [r4, #1]
 801451a:	2b2a      	cmp	r3, #42	; 0x2a
 801451c:	d134      	bne.n	8014588 <_vfiprintf_r+0x1b0>
 801451e:	9b03      	ldr	r3, [sp, #12]
 8014520:	1d1a      	adds	r2, r3, #4
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	9203      	str	r2, [sp, #12]
 8014526:	2b00      	cmp	r3, #0
 8014528:	bfb8      	it	lt
 801452a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801452e:	3402      	adds	r4, #2
 8014530:	9305      	str	r3, [sp, #20]
 8014532:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014608 <_vfiprintf_r+0x230>
 8014536:	7821      	ldrb	r1, [r4, #0]
 8014538:	2203      	movs	r2, #3
 801453a:	4650      	mov	r0, sl
 801453c:	f7eb fe58 	bl	80001f0 <memchr>
 8014540:	b138      	cbz	r0, 8014552 <_vfiprintf_r+0x17a>
 8014542:	9b04      	ldr	r3, [sp, #16]
 8014544:	eba0 000a 	sub.w	r0, r0, sl
 8014548:	2240      	movs	r2, #64	; 0x40
 801454a:	4082      	lsls	r2, r0
 801454c:	4313      	orrs	r3, r2
 801454e:	3401      	adds	r4, #1
 8014550:	9304      	str	r3, [sp, #16]
 8014552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014556:	4829      	ldr	r0, [pc, #164]	; (80145fc <_vfiprintf_r+0x224>)
 8014558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801455c:	2206      	movs	r2, #6
 801455e:	f7eb fe47 	bl	80001f0 <memchr>
 8014562:	2800      	cmp	r0, #0
 8014564:	d03f      	beq.n	80145e6 <_vfiprintf_r+0x20e>
 8014566:	4b26      	ldr	r3, [pc, #152]	; (8014600 <_vfiprintf_r+0x228>)
 8014568:	bb1b      	cbnz	r3, 80145b2 <_vfiprintf_r+0x1da>
 801456a:	9b03      	ldr	r3, [sp, #12]
 801456c:	3307      	adds	r3, #7
 801456e:	f023 0307 	bic.w	r3, r3, #7
 8014572:	3308      	adds	r3, #8
 8014574:	9303      	str	r3, [sp, #12]
 8014576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014578:	443b      	add	r3, r7
 801457a:	9309      	str	r3, [sp, #36]	; 0x24
 801457c:	e768      	b.n	8014450 <_vfiprintf_r+0x78>
 801457e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014582:	460c      	mov	r4, r1
 8014584:	2001      	movs	r0, #1
 8014586:	e7a6      	b.n	80144d6 <_vfiprintf_r+0xfe>
 8014588:	2300      	movs	r3, #0
 801458a:	3401      	adds	r4, #1
 801458c:	9305      	str	r3, [sp, #20]
 801458e:	4619      	mov	r1, r3
 8014590:	f04f 0c0a 	mov.w	ip, #10
 8014594:	4620      	mov	r0, r4
 8014596:	f810 2b01 	ldrb.w	r2, [r0], #1
 801459a:	3a30      	subs	r2, #48	; 0x30
 801459c:	2a09      	cmp	r2, #9
 801459e:	d903      	bls.n	80145a8 <_vfiprintf_r+0x1d0>
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d0c6      	beq.n	8014532 <_vfiprintf_r+0x15a>
 80145a4:	9105      	str	r1, [sp, #20]
 80145a6:	e7c4      	b.n	8014532 <_vfiprintf_r+0x15a>
 80145a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80145ac:	4604      	mov	r4, r0
 80145ae:	2301      	movs	r3, #1
 80145b0:	e7f0      	b.n	8014594 <_vfiprintf_r+0x1bc>
 80145b2:	ab03      	add	r3, sp, #12
 80145b4:	9300      	str	r3, [sp, #0]
 80145b6:	462a      	mov	r2, r5
 80145b8:	4b12      	ldr	r3, [pc, #72]	; (8014604 <_vfiprintf_r+0x22c>)
 80145ba:	a904      	add	r1, sp, #16
 80145bc:	4630      	mov	r0, r6
 80145be:	f7fd fcb7 	bl	8011f30 <_printf_float>
 80145c2:	4607      	mov	r7, r0
 80145c4:	1c78      	adds	r0, r7, #1
 80145c6:	d1d6      	bne.n	8014576 <_vfiprintf_r+0x19e>
 80145c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80145ca:	07d9      	lsls	r1, r3, #31
 80145cc:	d405      	bmi.n	80145da <_vfiprintf_r+0x202>
 80145ce:	89ab      	ldrh	r3, [r5, #12]
 80145d0:	059a      	lsls	r2, r3, #22
 80145d2:	d402      	bmi.n	80145da <_vfiprintf_r+0x202>
 80145d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80145d6:	f7fe fbcf 	bl	8012d78 <__retarget_lock_release_recursive>
 80145da:	89ab      	ldrh	r3, [r5, #12]
 80145dc:	065b      	lsls	r3, r3, #25
 80145de:	f53f af1d 	bmi.w	801441c <_vfiprintf_r+0x44>
 80145e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145e4:	e71c      	b.n	8014420 <_vfiprintf_r+0x48>
 80145e6:	ab03      	add	r3, sp, #12
 80145e8:	9300      	str	r3, [sp, #0]
 80145ea:	462a      	mov	r2, r5
 80145ec:	4b05      	ldr	r3, [pc, #20]	; (8014604 <_vfiprintf_r+0x22c>)
 80145ee:	a904      	add	r1, sp, #16
 80145f0:	4630      	mov	r0, r6
 80145f2:	f7fd ff41 	bl	8012478 <_printf_i>
 80145f6:	e7e4      	b.n	80145c2 <_vfiprintf_r+0x1ea>
 80145f8:	0801675c 	.word	0x0801675c
 80145fc:	08016766 	.word	0x08016766
 8014600:	08011f31 	.word	0x08011f31
 8014604:	080143b3 	.word	0x080143b3
 8014608:	08016762 	.word	0x08016762

0801460c <__swhatbuf_r>:
 801460c:	b570      	push	{r4, r5, r6, lr}
 801460e:	460c      	mov	r4, r1
 8014610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014614:	2900      	cmp	r1, #0
 8014616:	b096      	sub	sp, #88	; 0x58
 8014618:	4615      	mov	r5, r2
 801461a:	461e      	mov	r6, r3
 801461c:	da0d      	bge.n	801463a <__swhatbuf_r+0x2e>
 801461e:	89a3      	ldrh	r3, [r4, #12]
 8014620:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014624:	f04f 0100 	mov.w	r1, #0
 8014628:	bf0c      	ite	eq
 801462a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801462e:	2340      	movne	r3, #64	; 0x40
 8014630:	2000      	movs	r0, #0
 8014632:	6031      	str	r1, [r6, #0]
 8014634:	602b      	str	r3, [r5, #0]
 8014636:	b016      	add	sp, #88	; 0x58
 8014638:	bd70      	pop	{r4, r5, r6, pc}
 801463a:	466a      	mov	r2, sp
 801463c:	f000 f87c 	bl	8014738 <_fstat_r>
 8014640:	2800      	cmp	r0, #0
 8014642:	dbec      	blt.n	801461e <__swhatbuf_r+0x12>
 8014644:	9901      	ldr	r1, [sp, #4]
 8014646:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801464a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801464e:	4259      	negs	r1, r3
 8014650:	4159      	adcs	r1, r3
 8014652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014656:	e7eb      	b.n	8014630 <__swhatbuf_r+0x24>

08014658 <__smakebuf_r>:
 8014658:	898b      	ldrh	r3, [r1, #12]
 801465a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801465c:	079d      	lsls	r5, r3, #30
 801465e:	4606      	mov	r6, r0
 8014660:	460c      	mov	r4, r1
 8014662:	d507      	bpl.n	8014674 <__smakebuf_r+0x1c>
 8014664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014668:	6023      	str	r3, [r4, #0]
 801466a:	6123      	str	r3, [r4, #16]
 801466c:	2301      	movs	r3, #1
 801466e:	6163      	str	r3, [r4, #20]
 8014670:	b002      	add	sp, #8
 8014672:	bd70      	pop	{r4, r5, r6, pc}
 8014674:	ab01      	add	r3, sp, #4
 8014676:	466a      	mov	r2, sp
 8014678:	f7ff ffc8 	bl	801460c <__swhatbuf_r>
 801467c:	9900      	ldr	r1, [sp, #0]
 801467e:	4605      	mov	r5, r0
 8014680:	4630      	mov	r0, r6
 8014682:	f7ff fa77 	bl	8013b74 <_malloc_r>
 8014686:	b948      	cbnz	r0, 801469c <__smakebuf_r+0x44>
 8014688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801468c:	059a      	lsls	r2, r3, #22
 801468e:	d4ef      	bmi.n	8014670 <__smakebuf_r+0x18>
 8014690:	f023 0303 	bic.w	r3, r3, #3
 8014694:	f043 0302 	orr.w	r3, r3, #2
 8014698:	81a3      	strh	r3, [r4, #12]
 801469a:	e7e3      	b.n	8014664 <__smakebuf_r+0xc>
 801469c:	89a3      	ldrh	r3, [r4, #12]
 801469e:	6020      	str	r0, [r4, #0]
 80146a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146a4:	81a3      	strh	r3, [r4, #12]
 80146a6:	9b00      	ldr	r3, [sp, #0]
 80146a8:	6163      	str	r3, [r4, #20]
 80146aa:	9b01      	ldr	r3, [sp, #4]
 80146ac:	6120      	str	r0, [r4, #16]
 80146ae:	b15b      	cbz	r3, 80146c8 <__smakebuf_r+0x70>
 80146b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146b4:	4630      	mov	r0, r6
 80146b6:	f000 f851 	bl	801475c <_isatty_r>
 80146ba:	b128      	cbz	r0, 80146c8 <__smakebuf_r+0x70>
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	f023 0303 	bic.w	r3, r3, #3
 80146c2:	f043 0301 	orr.w	r3, r3, #1
 80146c6:	81a3      	strh	r3, [r4, #12]
 80146c8:	89a3      	ldrh	r3, [r4, #12]
 80146ca:	431d      	orrs	r5, r3
 80146cc:	81a5      	strh	r5, [r4, #12]
 80146ce:	e7cf      	b.n	8014670 <__smakebuf_r+0x18>

080146d0 <_putc_r>:
 80146d0:	b570      	push	{r4, r5, r6, lr}
 80146d2:	460d      	mov	r5, r1
 80146d4:	4614      	mov	r4, r2
 80146d6:	4606      	mov	r6, r0
 80146d8:	b118      	cbz	r0, 80146e2 <_putc_r+0x12>
 80146da:	6a03      	ldr	r3, [r0, #32]
 80146dc:	b90b      	cbnz	r3, 80146e2 <_putc_r+0x12>
 80146de:	f7fe f93b 	bl	8012958 <__sinit>
 80146e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146e4:	07d8      	lsls	r0, r3, #31
 80146e6:	d405      	bmi.n	80146f4 <_putc_r+0x24>
 80146e8:	89a3      	ldrh	r3, [r4, #12]
 80146ea:	0599      	lsls	r1, r3, #22
 80146ec:	d402      	bmi.n	80146f4 <_putc_r+0x24>
 80146ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146f0:	f7fe fb41 	bl	8012d76 <__retarget_lock_acquire_recursive>
 80146f4:	68a3      	ldr	r3, [r4, #8]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	60a3      	str	r3, [r4, #8]
 80146fc:	da05      	bge.n	801470a <_putc_r+0x3a>
 80146fe:	69a2      	ldr	r2, [r4, #24]
 8014700:	4293      	cmp	r3, r2
 8014702:	db12      	blt.n	801472a <_putc_r+0x5a>
 8014704:	b2eb      	uxtb	r3, r5
 8014706:	2b0a      	cmp	r3, #10
 8014708:	d00f      	beq.n	801472a <_putc_r+0x5a>
 801470a:	6823      	ldr	r3, [r4, #0]
 801470c:	1c5a      	adds	r2, r3, #1
 801470e:	6022      	str	r2, [r4, #0]
 8014710:	701d      	strb	r5, [r3, #0]
 8014712:	b2ed      	uxtb	r5, r5
 8014714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014716:	07da      	lsls	r2, r3, #31
 8014718:	d405      	bmi.n	8014726 <_putc_r+0x56>
 801471a:	89a3      	ldrh	r3, [r4, #12]
 801471c:	059b      	lsls	r3, r3, #22
 801471e:	d402      	bmi.n	8014726 <_putc_r+0x56>
 8014720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014722:	f7fe fb29 	bl	8012d78 <__retarget_lock_release_recursive>
 8014726:	4628      	mov	r0, r5
 8014728:	bd70      	pop	{r4, r5, r6, pc}
 801472a:	4629      	mov	r1, r5
 801472c:	4622      	mov	r2, r4
 801472e:	4630      	mov	r0, r6
 8014730:	f7fe f9a5 	bl	8012a7e <__swbuf_r>
 8014734:	4605      	mov	r5, r0
 8014736:	e7ed      	b.n	8014714 <_putc_r+0x44>

08014738 <_fstat_r>:
 8014738:	b538      	push	{r3, r4, r5, lr}
 801473a:	4d07      	ldr	r5, [pc, #28]	; (8014758 <_fstat_r+0x20>)
 801473c:	2300      	movs	r3, #0
 801473e:	4604      	mov	r4, r0
 8014740:	4608      	mov	r0, r1
 8014742:	4611      	mov	r1, r2
 8014744:	602b      	str	r3, [r5, #0]
 8014746:	f7f0 fa8a 	bl	8004c5e <_fstat>
 801474a:	1c43      	adds	r3, r0, #1
 801474c:	d102      	bne.n	8014754 <_fstat_r+0x1c>
 801474e:	682b      	ldr	r3, [r5, #0]
 8014750:	b103      	cbz	r3, 8014754 <_fstat_r+0x1c>
 8014752:	6023      	str	r3, [r4, #0]
 8014754:	bd38      	pop	{r3, r4, r5, pc}
 8014756:	bf00      	nop
 8014758:	20009954 	.word	0x20009954

0801475c <_isatty_r>:
 801475c:	b538      	push	{r3, r4, r5, lr}
 801475e:	4d06      	ldr	r5, [pc, #24]	; (8014778 <_isatty_r+0x1c>)
 8014760:	2300      	movs	r3, #0
 8014762:	4604      	mov	r4, r0
 8014764:	4608      	mov	r0, r1
 8014766:	602b      	str	r3, [r5, #0]
 8014768:	f7f0 fa89 	bl	8004c7e <_isatty>
 801476c:	1c43      	adds	r3, r0, #1
 801476e:	d102      	bne.n	8014776 <_isatty_r+0x1a>
 8014770:	682b      	ldr	r3, [r5, #0]
 8014772:	b103      	cbz	r3, 8014776 <_isatty_r+0x1a>
 8014774:	6023      	str	r3, [r4, #0]
 8014776:	bd38      	pop	{r3, r4, r5, pc}
 8014778:	20009954 	.word	0x20009954

0801477c <_sbrk_r>:
 801477c:	b538      	push	{r3, r4, r5, lr}
 801477e:	4d06      	ldr	r5, [pc, #24]	; (8014798 <_sbrk_r+0x1c>)
 8014780:	2300      	movs	r3, #0
 8014782:	4604      	mov	r4, r0
 8014784:	4608      	mov	r0, r1
 8014786:	602b      	str	r3, [r5, #0]
 8014788:	f7f0 fa92 	bl	8004cb0 <_sbrk>
 801478c:	1c43      	adds	r3, r0, #1
 801478e:	d102      	bne.n	8014796 <_sbrk_r+0x1a>
 8014790:	682b      	ldr	r3, [r5, #0]
 8014792:	b103      	cbz	r3, 8014796 <_sbrk_r+0x1a>
 8014794:	6023      	str	r3, [r4, #0]
 8014796:	bd38      	pop	{r3, r4, r5, pc}
 8014798:	20009954 	.word	0x20009954

0801479c <__assert_func>:
 801479c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801479e:	4614      	mov	r4, r2
 80147a0:	461a      	mov	r2, r3
 80147a2:	4b09      	ldr	r3, [pc, #36]	; (80147c8 <__assert_func+0x2c>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	4605      	mov	r5, r0
 80147a8:	68d8      	ldr	r0, [r3, #12]
 80147aa:	b14c      	cbz	r4, 80147c0 <__assert_func+0x24>
 80147ac:	4b07      	ldr	r3, [pc, #28]	; (80147cc <__assert_func+0x30>)
 80147ae:	9100      	str	r1, [sp, #0]
 80147b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147b4:	4906      	ldr	r1, [pc, #24]	; (80147d0 <__assert_func+0x34>)
 80147b6:	462b      	mov	r3, r5
 80147b8:	f000 f844 	bl	8014844 <fiprintf>
 80147bc:	f000 f854 	bl	8014868 <abort>
 80147c0:	4b04      	ldr	r3, [pc, #16]	; (80147d4 <__assert_func+0x38>)
 80147c2:	461c      	mov	r4, r3
 80147c4:	e7f3      	b.n	80147ae <__assert_func+0x12>
 80147c6:	bf00      	nop
 80147c8:	2000043c 	.word	0x2000043c
 80147cc:	08016777 	.word	0x08016777
 80147d0:	08016784 	.word	0x08016784
 80147d4:	080167b2 	.word	0x080167b2

080147d8 <_calloc_r>:
 80147d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147da:	fba1 2402 	umull	r2, r4, r1, r2
 80147de:	b94c      	cbnz	r4, 80147f4 <_calloc_r+0x1c>
 80147e0:	4611      	mov	r1, r2
 80147e2:	9201      	str	r2, [sp, #4]
 80147e4:	f7ff f9c6 	bl	8013b74 <_malloc_r>
 80147e8:	9a01      	ldr	r2, [sp, #4]
 80147ea:	4605      	mov	r5, r0
 80147ec:	b930      	cbnz	r0, 80147fc <_calloc_r+0x24>
 80147ee:	4628      	mov	r0, r5
 80147f0:	b003      	add	sp, #12
 80147f2:	bd30      	pop	{r4, r5, pc}
 80147f4:	220c      	movs	r2, #12
 80147f6:	6002      	str	r2, [r0, #0]
 80147f8:	2500      	movs	r5, #0
 80147fa:	e7f8      	b.n	80147ee <_calloc_r+0x16>
 80147fc:	4621      	mov	r1, r4
 80147fe:	f7fe f9d3 	bl	8012ba8 <memset>
 8014802:	e7f4      	b.n	80147ee <_calloc_r+0x16>

08014804 <__ascii_mbtowc>:
 8014804:	b082      	sub	sp, #8
 8014806:	b901      	cbnz	r1, 801480a <__ascii_mbtowc+0x6>
 8014808:	a901      	add	r1, sp, #4
 801480a:	b142      	cbz	r2, 801481e <__ascii_mbtowc+0x1a>
 801480c:	b14b      	cbz	r3, 8014822 <__ascii_mbtowc+0x1e>
 801480e:	7813      	ldrb	r3, [r2, #0]
 8014810:	600b      	str	r3, [r1, #0]
 8014812:	7812      	ldrb	r2, [r2, #0]
 8014814:	1e10      	subs	r0, r2, #0
 8014816:	bf18      	it	ne
 8014818:	2001      	movne	r0, #1
 801481a:	b002      	add	sp, #8
 801481c:	4770      	bx	lr
 801481e:	4610      	mov	r0, r2
 8014820:	e7fb      	b.n	801481a <__ascii_mbtowc+0x16>
 8014822:	f06f 0001 	mvn.w	r0, #1
 8014826:	e7f8      	b.n	801481a <__ascii_mbtowc+0x16>

08014828 <__ascii_wctomb>:
 8014828:	b149      	cbz	r1, 801483e <__ascii_wctomb+0x16>
 801482a:	2aff      	cmp	r2, #255	; 0xff
 801482c:	bf85      	ittet	hi
 801482e:	238a      	movhi	r3, #138	; 0x8a
 8014830:	6003      	strhi	r3, [r0, #0]
 8014832:	700a      	strbls	r2, [r1, #0]
 8014834:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014838:	bf98      	it	ls
 801483a:	2001      	movls	r0, #1
 801483c:	4770      	bx	lr
 801483e:	4608      	mov	r0, r1
 8014840:	4770      	bx	lr
	...

08014844 <fiprintf>:
 8014844:	b40e      	push	{r1, r2, r3}
 8014846:	b503      	push	{r0, r1, lr}
 8014848:	4601      	mov	r1, r0
 801484a:	ab03      	add	r3, sp, #12
 801484c:	4805      	ldr	r0, [pc, #20]	; (8014864 <fiprintf+0x20>)
 801484e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014852:	6800      	ldr	r0, [r0, #0]
 8014854:	9301      	str	r3, [sp, #4]
 8014856:	f7ff fdbf 	bl	80143d8 <_vfiprintf_r>
 801485a:	b002      	add	sp, #8
 801485c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014860:	b003      	add	sp, #12
 8014862:	4770      	bx	lr
 8014864:	2000043c 	.word	0x2000043c

08014868 <abort>:
 8014868:	b508      	push	{r3, lr}
 801486a:	2006      	movs	r0, #6
 801486c:	f000 f82c 	bl	80148c8 <raise>
 8014870:	2001      	movs	r0, #1
 8014872:	f7f0 f9a5 	bl	8004bc0 <_exit>

08014876 <_raise_r>:
 8014876:	291f      	cmp	r1, #31
 8014878:	b538      	push	{r3, r4, r5, lr}
 801487a:	4604      	mov	r4, r0
 801487c:	460d      	mov	r5, r1
 801487e:	d904      	bls.n	801488a <_raise_r+0x14>
 8014880:	2316      	movs	r3, #22
 8014882:	6003      	str	r3, [r0, #0]
 8014884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014888:	bd38      	pop	{r3, r4, r5, pc}
 801488a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801488c:	b112      	cbz	r2, 8014894 <_raise_r+0x1e>
 801488e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014892:	b94b      	cbnz	r3, 80148a8 <_raise_r+0x32>
 8014894:	4620      	mov	r0, r4
 8014896:	f000 f831 	bl	80148fc <_getpid_r>
 801489a:	462a      	mov	r2, r5
 801489c:	4601      	mov	r1, r0
 801489e:	4620      	mov	r0, r4
 80148a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148a4:	f000 b818 	b.w	80148d8 <_kill_r>
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d00a      	beq.n	80148c2 <_raise_r+0x4c>
 80148ac:	1c59      	adds	r1, r3, #1
 80148ae:	d103      	bne.n	80148b8 <_raise_r+0x42>
 80148b0:	2316      	movs	r3, #22
 80148b2:	6003      	str	r3, [r0, #0]
 80148b4:	2001      	movs	r0, #1
 80148b6:	e7e7      	b.n	8014888 <_raise_r+0x12>
 80148b8:	2400      	movs	r4, #0
 80148ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80148be:	4628      	mov	r0, r5
 80148c0:	4798      	blx	r3
 80148c2:	2000      	movs	r0, #0
 80148c4:	e7e0      	b.n	8014888 <_raise_r+0x12>
	...

080148c8 <raise>:
 80148c8:	4b02      	ldr	r3, [pc, #8]	; (80148d4 <raise+0xc>)
 80148ca:	4601      	mov	r1, r0
 80148cc:	6818      	ldr	r0, [r3, #0]
 80148ce:	f7ff bfd2 	b.w	8014876 <_raise_r>
 80148d2:	bf00      	nop
 80148d4:	2000043c 	.word	0x2000043c

080148d8 <_kill_r>:
 80148d8:	b538      	push	{r3, r4, r5, lr}
 80148da:	4d07      	ldr	r5, [pc, #28]	; (80148f8 <_kill_r+0x20>)
 80148dc:	2300      	movs	r3, #0
 80148de:	4604      	mov	r4, r0
 80148e0:	4608      	mov	r0, r1
 80148e2:	4611      	mov	r1, r2
 80148e4:	602b      	str	r3, [r5, #0]
 80148e6:	f7f0 f95b 	bl	8004ba0 <_kill>
 80148ea:	1c43      	adds	r3, r0, #1
 80148ec:	d102      	bne.n	80148f4 <_kill_r+0x1c>
 80148ee:	682b      	ldr	r3, [r5, #0]
 80148f0:	b103      	cbz	r3, 80148f4 <_kill_r+0x1c>
 80148f2:	6023      	str	r3, [r4, #0]
 80148f4:	bd38      	pop	{r3, r4, r5, pc}
 80148f6:	bf00      	nop
 80148f8:	20009954 	.word	0x20009954

080148fc <_getpid_r>:
 80148fc:	f7f0 b948 	b.w	8004b90 <_getpid>

08014900 <_init>:
 8014900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014902:	bf00      	nop
 8014904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014906:	bc08      	pop	{r3}
 8014908:	469e      	mov	lr, r3
 801490a:	4770      	bx	lr

0801490c <_fini>:
 801490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801490e:	bf00      	nop
 8014910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014912:	bc08      	pop	{r3}
 8014914:	469e      	mov	lr, r3
 8014916:	4770      	bx	lr
