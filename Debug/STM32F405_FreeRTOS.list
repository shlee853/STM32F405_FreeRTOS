
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000214bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dcc  08021650  08021650  00031650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802541c  0802541c  00044ba0  2**0
                  CONTENTS
  4 .ARM          00000008  0802541c  0802541c  0003541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025424  08025424  00044ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025424  08025424  00035424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025428  08025428  00035428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f0c  20000000  0802542c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00003c6c  20000f0c  08026338  00040f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20004b78  08029fa4  00044b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00044ba0  2**0
                  CONTENTS
 12 .bss          0000b518  20004ba0  20004ba0  00044ba0  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  200100b8  200100b8  00044ba0  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00044ba0  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00044bd0  2**0
                  CONTENTS, READONLY
 16 .debug_info   0004fc37  00000000  00000000  00044c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000f4ec  00000000  00000000  0009484a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003b70  00000000  00000000  000a3d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002cc9  00000000  00000000  000a78a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001d44a  00000000  00000000  000aa571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0005b8bc  00000000  00000000  000c79bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fef0d  00000000  00000000  00123277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000100d8  00000000  00000000  00222184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  0023225c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20004ba0 	.word	0x20004ba0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fc6c 	.word	0x0801fc6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20004ba4 	.word	0x20004ba4
 80001cc:	0801fc6c 	.word	0x0801fc6c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b970 	b.w	8000f60 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9e08      	ldr	r6, [sp, #32]
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	460f      	mov	r7, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4694      	mov	ip, r2
 8000cac:	d965      	bls.n	8000d7a <__udivmoddi4+0xe2>
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	b143      	cbz	r3, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb8:	f1c3 0220 	rsb	r2, r3, #32
 8000cbc:	409f      	lsls	r7, r3
 8000cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc2:	4317      	orrs	r7, r2
 8000cc4:	409c      	lsls	r4, r3
 8000cc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cca:	fa1f f58c 	uxth.w	r5, ip
 8000cce:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cd2:	0c22      	lsrs	r2, r4, #16
 8000cd4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cd8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cdc:	fb01 f005 	mul.w	r0, r1, r5
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cec:	f080 811c 	bcs.w	8000f28 <__udivmoddi4+0x290>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f240 8119 	bls.w	8000f28 <__udivmoddi4+0x290>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4462      	add	r2, ip
 8000cfa:	1a12      	subs	r2, r2, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0a:	fb00 f505 	mul.w	r5, r0, r5
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x90>
 8000d12:	eb1c 0404 	adds.w	r4, ip, r4
 8000d16:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 8107 	bcs.w	8000f2c <__udivmoddi4+0x294>
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	f240 8104 	bls.w	8000f2c <__udivmoddi4+0x294>
 8000d24:	4464      	add	r4, ip
 8000d26:	3802      	subs	r0, #2
 8000d28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11e      	cbz	r6, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40dc      	lsrs	r4, r3
 8000d34:	2300      	movs	r3, #0
 8000d36:	e9c6 4300 	strd	r4, r3, [r6]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0xbc>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	f000 80ed 	beq.w	8000f22 <__udivmoddi4+0x28a>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	d149      	bne.n	8000df0 <__udivmoddi4+0x158>
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d302      	bcc.n	8000d66 <__udivmoddi4+0xce>
 8000d60:	4282      	cmp	r2, r0
 8000d62:	f200 80f8 	bhi.w	8000f56 <__udivmoddi4+0x2be>
 8000d66:	1a84      	subs	r4, r0, r2
 8000d68:	eb65 0203 	sbc.w	r2, r5, r3
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4617      	mov	r7, r2
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d0e2      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	e9c6 4700 	strd	r4, r7, [r6]
 8000d78:	e7df      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xe6>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f382 	clz	r3, r2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x210>
 8000d88:	1a8a      	subs	r2, r1, r2
 8000d8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d8e:	fa1f fe8c 	uxth.w	lr, ip
 8000d92:	2101      	movs	r1, #1
 8000d94:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d98:	fb07 2015 	mls	r0, r7, r5, r2
 8000d9c:	0c22      	lsrs	r2, r4, #16
 8000d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000da2:	fb0e f005 	mul.w	r0, lr, r5
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x124>
 8000daa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x122>
 8000db4:	4290      	cmp	r0, r2
 8000db6:	f200 80cb 	bhi.w	8000f50 <__udivmoddi4+0x2b8>
 8000dba:	4645      	mov	r5, r8
 8000dbc:	1a12      	subs	r2, r2, r0
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dc4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dc8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dcc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd0:	45a6      	cmp	lr, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x14e>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ddc:	d202      	bcs.n	8000de4 <__udivmoddi4+0x14c>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f200 80bb 	bhi.w	8000f5a <__udivmoddi4+0x2c2>
 8000de4:	4610      	mov	r0, r2
 8000de6:	eba4 040e 	sub.w	r4, r4, lr
 8000dea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dee:	e79f      	b.n	8000d30 <__udivmoddi4+0x98>
 8000df0:	f1c1 0720 	rsb	r7, r1, #32
 8000df4:	408b      	lsls	r3, r1
 8000df6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dfa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dfe:	fa05 f401 	lsl.w	r4, r5, r1
 8000e02:	fa20 f307 	lsr.w	r3, r0, r7
 8000e06:	40fd      	lsrs	r5, r7
 8000e08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e0c:	4323      	orrs	r3, r4
 8000e0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	fb09 5518 	mls	r5, r9, r8, r5
 8000e1a:	0c1c      	lsrs	r4, r3, #16
 8000e1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e20:	fb08 f50e 	mul.w	r5, r8, lr
 8000e24:	42a5      	cmp	r5, r4
 8000e26:	fa02 f201 	lsl.w	r2, r2, r1
 8000e2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e2e:	d90b      	bls.n	8000e48 <__udivmoddi4+0x1b0>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e38:	f080 8088 	bcs.w	8000f4c <__udivmoddi4+0x2b4>
 8000e3c:	42a5      	cmp	r5, r4
 8000e3e:	f240 8085 	bls.w	8000f4c <__udivmoddi4+0x2b4>
 8000e42:	f1a8 0802 	sub.w	r8, r8, #2
 8000e46:	4464      	add	r4, ip
 8000e48:	1b64      	subs	r4, r4, r5
 8000e4a:	b29d      	uxth	r5, r3
 8000e4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e50:	fb09 4413 	mls	r4, r9, r3, r4
 8000e54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x1da>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e68:	d26c      	bcs.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	d96a      	bls.n	8000f44 <__udivmoddi4+0x2ac>
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e76:	fba3 9502 	umull	r9, r5, r3, r2
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	42ac      	cmp	r4, r5
 8000e80:	46c8      	mov	r8, r9
 8000e82:	46ae      	mov	lr, r5
 8000e84:	d356      	bcc.n	8000f34 <__udivmoddi4+0x29c>
 8000e86:	d053      	beq.n	8000f30 <__udivmoddi4+0x298>
 8000e88:	b156      	cbz	r6, 8000ea0 <__udivmoddi4+0x208>
 8000e8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e92:	fa04 f707 	lsl.w	r7, r4, r7
 8000e96:	40ca      	lsrs	r2, r1
 8000e98:	40cc      	lsrs	r4, r1
 8000e9a:	4317      	orrs	r7, r2
 8000e9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	f1c3 0120 	rsb	r1, r3, #32
 8000eac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb0:	fa20 f201 	lsr.w	r2, r0, r1
 8000eb4:	fa25 f101 	lsr.w	r1, r5, r1
 8000eb8:	409d      	lsls	r5, r3
 8000eba:	432a      	orrs	r2, r5
 8000ebc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec0:	fa1f fe8c 	uxth.w	lr, ip
 8000ec4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ec8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ed2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ed6:	428d      	cmp	r5, r1
 8000ed8:	fa04 f403 	lsl.w	r4, r4, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x258>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ee6:	d22f      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000ee8:	428d      	cmp	r5, r1
 8000eea:	d92d      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	1b49      	subs	r1, r1, r5
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ef8:	fb07 1115 	mls	r1, r7, r5, r1
 8000efc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f00:	fb05 f10e 	mul.w	r1, r5, lr
 8000f04:	4291      	cmp	r1, r2
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x282>
 8000f08:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f10:	d216      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000f12:	4291      	cmp	r1, r2
 8000f14:	d914      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000f16:	3d02      	subs	r5, #2
 8000f18:	4462      	add	r2, ip
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f20:	e738      	b.n	8000d94 <__udivmoddi4+0xfc>
 8000f22:	4631      	mov	r1, r6
 8000f24:	4630      	mov	r0, r6
 8000f26:	e708      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000f28:	4639      	mov	r1, r7
 8000f2a:	e6e6      	b.n	8000cfa <__udivmoddi4+0x62>
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	e6fb      	b.n	8000d28 <__udivmoddi4+0x90>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d2a9      	bcs.n	8000e88 <__udivmoddi4+0x1f0>
 8000f34:	ebb9 0802 	subs.w	r8, r9, r2
 8000f38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	e7a3      	b.n	8000e88 <__udivmoddi4+0x1f0>
 8000f40:	4645      	mov	r5, r8
 8000f42:	e7ea      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f44:	462b      	mov	r3, r5
 8000f46:	e794      	b.n	8000e72 <__udivmoddi4+0x1da>
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x258>
 8000f4c:	46d0      	mov	r8, sl
 8000f4e:	e77b      	b.n	8000e48 <__udivmoddi4+0x1b0>
 8000f50:	3d02      	subs	r5, #2
 8000f52:	4462      	add	r2, ip
 8000f54:	e732      	b.n	8000dbc <__udivmoddi4+0x124>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e70a      	b.n	8000d70 <__udivmoddi4+0xd8>
 8000f5a:	4464      	add	r4, ip
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	e742      	b.n	8000de6 <__udivmoddi4+0x14e>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 8000f6c:	4b64      	ldr	r3, [pc, #400]	; (8001100 <estimatorEnqueue+0x19c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80bf 	beq.w	80010f4 <estimatorEnqueue+0x190>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8000f76:	4b63      	ldr	r3, [pc, #396]	; (8001104 <estimatorEnqueue+0x1a0>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	74fb      	strb	r3, [r7, #19]
  if (isInInterrupt) {
 8000f88:	7cfb      	ldrb	r3, [r7, #19]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d016      	beq.n	8000fbc <estimatorEnqueue+0x58>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 8000f92:	4b5b      	ldr	r3, [pc, #364]	; (8001100 <estimatorEnqueue+0x19c>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	f017 fc39 	bl	8018814 <xQueueGenericSendFromISR>
 8000fa2:	6178      	str	r0, [r7, #20]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d110      	bne.n	8000fcc <estimatorEnqueue+0x68>
      portYIELD();
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <estimatorEnqueue+0x1a4>)
 8000fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	f3bf 8f4f 	dsb	sy
 8000fb6:	f3bf 8f6f 	isb	sy
 8000fba:	e007      	b.n	8000fcc <estimatorEnqueue+0x68>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 8000fbc:	4b50      	ldr	r3, [pc, #320]	; (8001100 <estimatorEnqueue+0x19c>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	f017 fb17 	bl	80185f8 <xQueueGenericSend>
 8000fca:	6178      	str	r0, [r7, #20]
  }

  if (result == pdTRUE) {
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d105      	bne.n	8000fde <estimatorEnqueue+0x7a>
    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <estimatorEnqueue+0x1a8>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <estimatorEnqueue+0x1a8>)
 8000fda:	6093      	str	r3, [r2, #8]
 8000fdc:	e004      	b.n	8000fe8 <estimatorEnqueue+0x84>
  } else {
    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <estimatorEnqueue+0x1ac>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a4a      	ldr	r2, [pc, #296]	; (8001110 <estimatorEnqueue+0x1ac>)
 8000fe6:	6093      	str	r3, [r2, #8]
  }

  // events
  switch (measurement->type) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b0b      	cmp	r3, #11
 8000fee:	f200 8083 	bhi.w	80010f8 <estimatorEnqueue+0x194>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <estimatorEnqueue+0x94>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001029 	.word	0x08001029
 8000ffc:	0800104f 	.word	0x0800104f
 8001000:	0800105f 	.word	0x0800105f
 8001004:	08001067 	.word	0x08001067
 8001008:	08001081 	.word	0x08001081
 800100c:	08001089 	.word	0x08001089
 8001010:	08001091 	.word	0x08001091
 8001014:	08001099 	.word	0x08001099
 8001018:	080010a9 	.word	0x080010a9
 800101c:	080010dd 	.word	0x080010dd
 8001020:	080010e5 	.word	0x080010e5
 8001024:	080010ed 	.word	0x080010ed
    case MeasurementTypeTDOA:
      eventTrigger_estTDOA_payload.idA = measurement->data.tdoa.anchorIds[0];
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800102e:	4b39      	ldr	r3, [pc, #228]	; (8001114 <estimatorEnqueue+0x1b0>)
 8001030:	701a      	strb	r2, [r3, #0]
      eventTrigger_estTDOA_payload.idB = measurement->data.tdoa.anchorIds[1];
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001038:	4b36      	ldr	r3, [pc, #216]	; (8001114 <estimatorEnqueue+0x1b0>)
 800103a:	705a      	strb	r2, [r3, #1]
      eventTrigger_estTDOA_payload.distanceDiff = measurement->data.tdoa.distanceDiff;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <estimatorEnqueue+0x1b0>)
 8001042:	f8c3 2002 	str.w	r2, [r3, #2]
      eventTrigger(&eventTrigger_estTDOA);
 8001046:	4834      	ldr	r0, [pc, #208]	; (8001118 <estimatorEnqueue+0x1b4>)
 8001048:	f009 fdfa 	bl	800ac40 <eventTrigger>
      break;
 800104c:	e055      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypePosition:
      // for additional data, see locSrv.{x,y,z} and lighthouse.{x,y,z}
      eventTrigger_estPosition_payload.source = measurement->data.position.source;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7d1a      	ldrb	r2, [r3, #20]
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <estimatorEnqueue+0x1b8>)
 8001054:	701a      	strb	r2, [r3, #0]
      eventTrigger(&eventTrigger_estPosition);
 8001056:	4832      	ldr	r0, [pc, #200]	; (8001120 <estimatorEnqueue+0x1bc>)
 8001058:	f009 fdf2 	bl	800ac40 <eventTrigger>
      break;
 800105c:	e04d      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypePose:
      // no payload needed, see locSrv.{x,y,z,qx,qy,qz,qw}
      eventTrigger(&eventTrigger_estPose);
 800105e:	4831      	ldr	r0, [pc, #196]	; (8001124 <estimatorEnqueue+0x1c0>)
 8001060:	f009 fdee 	bl	800ac40 <eventTrigger>
      break;
 8001064:	e049      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeDistance:
      eventTrigger_estDistance_payload.id = measurement->data.distance.anchorId;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7c1a      	ldrb	r2, [r3, #16]
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <estimatorEnqueue+0x1c4>)
 800106c:	701a      	strb	r2, [r3, #0]
      eventTrigger_estDistance_payload.distance = measurement->data.distance.distance;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	4b2d      	ldr	r3, [pc, #180]	; (8001128 <estimatorEnqueue+0x1c4>)
 8001074:	f8c3 2001 	str.w	r2, [r3, #1]
      eventTrigger(&eventTrigger_estDistance);
 8001078:	482c      	ldr	r0, [pc, #176]	; (800112c <estimatorEnqueue+0x1c8>)
 800107a:	f009 fde1 	bl	800ac40 <eventTrigger>
      break;
 800107e:	e03c      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeTOF:
      // no payload needed, see range.zrange
      eventTrigger(&eventTrigger_estTOF);
 8001080:	482b      	ldr	r0, [pc, #172]	; (8001130 <estimatorEnqueue+0x1cc>)
 8001082:	f009 fddd 	bl	800ac40 <eventTrigger>
      break;
 8001086:	e038      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeAbsoluteHeight:
      // no payload needed, see CONFIG_DECK_LOCO_2D_POSITION
      eventTrigger(&eventTrigger_estAbsoluteHeight);
 8001088:	482a      	ldr	r0, [pc, #168]	; (8001134 <estimatorEnqueue+0x1d0>)
 800108a:	f009 fdd9 	bl	800ac40 <eventTrigger>
      break;
 800108e:	e034      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeFlow:
      // no payload needed, see motion.{deltaX,deltaY}
      eventTrigger(&eventTrigger_estFlow);
 8001090:	4829      	ldr	r0, [pc, #164]	; (8001138 <estimatorEnqueue+0x1d4>)
 8001092:	f009 fdd5 	bl	800ac40 <eventTrigger>
      break;
 8001096:	e030      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeYawError:
      eventTrigger_estYawError_payload.yawError = measurement->data.yawError.yawError;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <estimatorEnqueue+0x1d8>)
 800109e:	6013      	str	r3, [r2, #0]
      eventTrigger(&eventTrigger_estYawError);
 80010a0:	4827      	ldr	r0, [pc, #156]	; (8001140 <estimatorEnqueue+0x1dc>)
 80010a2:	f009 fdcd 	bl	800ac40 <eventTrigger>
      break;
 80010a6:	e028      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeSweepAngle:
      eventTrigger_estSweepAngle_payload.sensorId = measurement->data.sweepAngle.sensorId;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1a      	ldrb	r2, [r3, #24]
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010ae:	701a      	strb	r2, [r3, #0]
      eventTrigger_estSweepAngle_payload.baseStationId = measurement->data.sweepAngle.baseStationId;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7e5a      	ldrb	r2, [r3, #25]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010b6:	705a      	strb	r2, [r3, #1]
      eventTrigger_estSweepAngle_payload.sweepId = measurement->data.sweepAngle.sweepId;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e9a      	ldrb	r2, [r3, #26]
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010be:	709a      	strb	r2, [r3, #2]
      eventTrigger_estSweepAngle_payload.t = measurement->data.sweepAngle.t;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69da      	ldr	r2, [r3, #28]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010c6:	f8c3 2003 	str.w	r2, [r3, #3]
      eventTrigger_estSweepAngle_payload.sweepAngle = measurement->data.sweepAngle.measuredSweepAngle;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1a      	ldr	r2, [r3, #32]
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <estimatorEnqueue+0x1e0>)
 80010d0:	f8c3 2007 	str.w	r2, [r3, #7]
      eventTrigger(&eventTrigger_estSweepAngle);
 80010d4:	481c      	ldr	r0, [pc, #112]	; (8001148 <estimatorEnqueue+0x1e4>)
 80010d6:	f009 fdb3 	bl	800ac40 <eventTrigger>
      break;
 80010da:	e00e      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeGyroscope:
      // no payload needed, see gyro.{x,y,z}
      eventTrigger(&eventTrigger_estGyroscope);
 80010dc:	481b      	ldr	r0, [pc, #108]	; (800114c <estimatorEnqueue+0x1e8>)
 80010de:	f009 fdaf 	bl	800ac40 <eventTrigger>
      break;
 80010e2:	e00a      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeAcceleration:
      // no payload needed, see acc.{x,y,z}
      eventTrigger(&eventTrigger_estAcceleration);
 80010e4:	481a      	ldr	r0, [pc, #104]	; (8001150 <estimatorEnqueue+0x1ec>)
 80010e6:	f009 fdab 	bl	800ac40 <eventTrigger>
      break;
 80010ea:	e006      	b.n	80010fa <estimatorEnqueue+0x196>
    case MeasurementTypeBarometer:
      // no payload needed, see baro.asl
      eventTrigger(&eventTrigger_estBarometer);
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <estimatorEnqueue+0x1f0>)
 80010ee:	f009 fda7 	bl	800ac40 <eventTrigger>
      break;
 80010f2:	e002      	b.n	80010fa <estimatorEnqueue+0x196>
    return;
 80010f4:	bf00      	nop
 80010f6:	e000      	b.n	80010fa <estimatorEnqueue+0x196>
    default:
      break;
 80010f8:	bf00      	nop
  }
}
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20004bbc 	.word	0x20004bbc
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	e000ed04 	.word	0xe000ed04
 800110c:	20000000 	.word	0x20000000
 8001110:	2000001c 	.word	0x2000001c
 8001114:	20004bc0 	.word	0x20004bc0
 8001118:	0802155c 	.word	0x0802155c
 800111c:	20004bc8 	.word	0x20004bc8
 8001120:	08021570 	.word	0x08021570
 8001124:	08021584 	.word	0x08021584
 8001128:	20004bcc 	.word	0x20004bcc
 800112c:	08021598 	.word	0x08021598
 8001130:	080215ac 	.word	0x080215ac
 8001134:	080215c0 	.word	0x080215c0
 8001138:	080215d4 	.word	0x080215d4
 800113c:	20004bd4 	.word	0x20004bd4
 8001140:	080215e8 	.word	0x080215e8
 8001144:	20004bd8 	.word	0x20004bd8
 8001148:	080215fc 	.word	0x080215fc
 800114c:	08021610 	.word	0x08021610
 8001150:	08021624 	.word	0x08021624
 8001154:	08021638 	.word	0x08021638

08001158 <peerLocalizationInit>:
#include "task.h"
#include "peer_localization.h"


void peerLocalizationInit()
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  // All other_positions[in].id will be set to zero due to static initialization.
  // If we ever switch to dynamic allocation, we need to set them to zero explicitly.
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <peerLocalizationTellPosition>:

// array of other's position
static peerLocalizationOtherPosition_t other_positions[PEER_LOCALIZATION_MAX_NEIGHBORS];

bool peerLocalizationTellPosition(int cfid, positionMeasurement_t const *pos)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e052      	b.n	800121e <peerLocalizationTellPosition+0xb6>
    if (other_positions[i].id == 0 || other_positions[i].id == cfid) {
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	492d      	ldr	r1, [pc, #180]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <peerLocalizationTellPosition+0x3c>
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	4928      	ldr	r1, [pc, #160]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d139      	bne.n	8001218 <peerLocalizationTellPosition+0xb0>
      other_positions[i].id = cfid;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	b2d8      	uxtb	r0, r3
 80011aa:	4921      	ldr	r1, [pc, #132]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	4602      	mov	r2, r0
 80011b8:	701a      	strb	r2, [r3, #0]
      other_positions[i].pos.x = pos->x;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	481b      	ldr	r0, [pc, #108]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4403      	add	r3, r0
 80011cc:	3308      	adds	r3, #8
 80011ce:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.y = pos->y;
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	4816      	ldr	r0, [pc, #88]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4403      	add	r3, r0
 80011e2:	330c      	adds	r3, #12
 80011e4:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.z = pos->z;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6899      	ldr	r1, [r3, #8]
 80011ec:	4810      	ldr	r0, [pc, #64]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4403      	add	r3, r0
 80011f8:	3310      	adds	r3, #16
 80011fa:	6019      	str	r1, [r3, #0]
      other_positions[i].pos.timestamp = xTaskGetTickCount();
 80011fc:	7bfc      	ldrb	r4, [r7, #15]
 80011fe:	f018 fb6b 	bl	80198d8 <xTaskGetTickCount>
 8001202:	4602      	mov	r2, r0
 8001204:	490a      	ldr	r1, [pc, #40]	; (8001230 <peerLocalizationTellPosition+0xc8>)
 8001206:	4623      	mov	r3, r4
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4423      	add	r3, r4
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3304      	adds	r3, #4
 8001212:	601a      	str	r2, [r3, #0]
      return true;
 8001214:	2301      	movs	r3, #1
 8001216:	e006      	b.n	8001226 <peerLocalizationTellPosition+0xbe>
  for (uint8_t i = 0; i < PEER_LOCALIZATION_MAX_NEIGHBORS; ++i) {
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	3301      	adds	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b09      	cmp	r3, #9
 8001222:	d9a9      	bls.n	8001178 <peerLocalizationTellPosition+0x10>
    }
  }
  return false;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	20004be4 	.word	0x20004be4

08001234 <appchannelInit>:
bool appchannelHasOverflowOccured() {
    return appchannelHasOverflowOccurred();
}

void appchannelInit()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  sendMutex = xSemaphoreCreateMutex();
 8001238:	2001      	movs	r0, #1
 800123a:	f017 f9aa 	bl	8018592 <xQueueCreateMutex>
 800123e:	4603      	mov	r3, r0
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <appchannelInit+0x2c>)
 8001242:	6013      	str	r3, [r2, #0]

  rxQueue = xQueueCreate(10, sizeof(CRTPPacket));
 8001244:	2200      	movs	r2, #0
 8001246:	2120      	movs	r1, #32
 8001248:	200a      	movs	r0, #10
 800124a:	f017 f92b 	bl	80184a4 <xQueueGenericCreate>
 800124e:	4603      	mov	r3, r0
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <appchannelInit+0x30>)
 8001252:	6013      	str	r3, [r2, #0]

  overflow = false;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <appchannelInit+0x34>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20004cac 	.word	0x20004cac
 8001264:	20004cb0 	.word	0x20004cb0
 8001268:	20004cb4 	.word	0x20004cb4

0800126c <appchannelIncomingPacket>:

void appchannelIncomingPacket(CRTPPacket *p)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  int res = xQueueSend(rxQueue, p, 0);
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <appchannelIncomingPacket+0x2c>)
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	f017 f9bb 	bl	80185f8 <xQueueGenericSend>
 8001282:	60f8      	str	r0, [r7, #12]

  if (res != pdTRUE) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d002      	beq.n	8001290 <appchannelIncomingPacket+0x24>
    overflow = true;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <appchannelIncomingPacket+0x30>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
  }
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20004cb0 	.word	0x20004cb0
 800129c:	20004cb4 	.word	0x20004cb4

080012a0 <appInit>:

static void appTask(void *param);


void __attribute__((weak)) appInit()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af04      	add	r7, sp, #16
  if (isInit) {
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <appInit+0x38>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d111      	bne.n	80012d2 <appInit+0x32>
    return;
  }

  STATIC_MEM_TASK_CREATE(appTask, appTask, APP_TASK_NAME, NULL, CONFIG_APP_PRIORITY);
 80012ae:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <appInit+0x3c>)
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <appInit+0x40>)
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <appInit+0x44>)
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <appInit+0x48>)
 80012c6:	f017 ff91 	bl	80191ec <xTaskCreateStatic>
  isInit = true;
 80012ca:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <appInit+0x38>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e000      	b.n	80012d4 <appInit+0x34>
    return;
 80012d2:	bf00      	nop
}
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20004cb5 	.word	0x20004cb5
 80012dc:	20000f0c 	.word	0x20000f0c
 80012e0:	20004cb8 	.word	0x20004cb8
 80012e4:	080217d8 	.word	0x080217d8
 80012e8:	080012ed 	.word	0x080012ed

080012ec <appTask>:

static void appTask(void *param)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 80012f4:	f004 fc92 	bl	8005c1c <systemWaitStart>

  appMain();
 80012f8:	f000 f806 	bl	8001308 <appMain>

  while(1) {
    vTaskDelay(portMAX_DELAY);
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001300:	f018 f92c 	bl	801955c <vTaskDelay>
 8001304:	e7fa      	b.n	80012fc <appTask+0x10>
	...

08001308 <appMain>:
    int myNum;
    std::string myString;
};
*/
void appMain()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Waiting for activation ...\n");
 800130c:	4906      	ldr	r1, [pc, #24]	; (8001328 <appMain+0x20>)
 800130e:	2000      	movs	r0, #0
 8001310:	f009 fa92 	bl	800a838 <SEGGER_RTT_printf>
  /* make sure that the assertion is not simple enough to be optimized away
   * by the compiler */
//  assert(cl->myNum + cl->myString.size() == 0);

  while(1) {
    vTaskDelay(M2T(2000));
 8001314:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001318:	f018 f920 	bl	801955c <vTaskDelay>
    DEBUG_PRINT("Hello World!\n");
 800131c:	4903      	ldr	r1, [pc, #12]	; (800132c <appMain+0x24>)
 800131e:	2000      	movs	r0, #0
 8001320:	f009 fa8a 	bl	800a838 <SEGGER_RTT_printf>
    vTaskDelay(M2T(2000));
 8001324:	e7f6      	b.n	8001314 <appMain+0xc>
 8001326:	bf00      	nop
 8001328:	080217dc 	.word	0x080217dc
 800132c:	080217f8 	.word	0x080217f8

08001330 <commInit>:
#include "crtp_localization_service.h"

static bool isInit;

void commInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  if (isInit)
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <commInit+0x64>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d128      	bne.n	800138e <commInit+0x5e>
    return;

  uartslkInit();
 800133c:	f004 fd8a 	bl	8005e54 <uartslkInit>
  radiolinkInit();
 8001340:	f002 fe2c 	bl	8003f9c <radiolinkInit>

  if (usbTest())
 8001344:	f004 ffb8 	bl	80062b8 <usbTest>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <commInit+0x2c>
    crtpSetLink(usblinkGetLink());
 800134e:	f005 f88f 	bl	8006470 <usblinkGetLink>
 8001352:	4603      	mov	r3, r0
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f9f3 	bl	8001740 <crtpSetLink>
 800135a:	e00a      	b.n	8001372 <commInit+0x42>
  else if(radiolinkTest())
 800135c:	f002 fe74 	bl	8004048 <radiolinkTest>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <commInit+0x42>
    crtpSetLink(radiolinkGetLink());
 8001366:	f002 ff71 	bl	800424c <radiolinkGetLink>
 800136a:	4603      	mov	r3, r0
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f9e7 	bl	8001740 <crtpSetLink>

  crtpserviceInit();
 8001372:	f002 fca5 	bl	8003cc0 <crtpserviceInit>
  platformserviceInit();
 8001376:	f002 fd17 	bl	8003da8 <platformserviceInit>
  logInit();
 800137a:	f009 fc81 	bl	800ac80 <logInit>
  paramInit();
 800137e:	f00c f8b3 	bl	800d4e8 <paramInit>
  locSrvInit();
 8001382:	f002 f9b9 	bl	80036f8 <locSrvInit>


  isInit = true;
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <commInit+0x64>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e000      	b.n	8001390 <commInit+0x60>
    return;
 800138e:	bf00      	nop
}
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20005168 	.word	0x20005168

08001398 <crtpInit>:

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpTxTask, CRTP_TX_TASK_STACKSIZE);
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpRxTask, CRTP_RX_TASK_STACKSIZE);

void crtpInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af04      	add	r7, sp, #16
  if(isInit)
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <crtpInit+0x70>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d12d      	bne.n	8001402 <crtpInit+0x6a>
    return;

  txQueue = xQueueCreate(CRTP_TX_QUEUE_SIZE, sizeof(CRTPPacket));
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	2078      	movs	r0, #120	; 0x78
 80013ac:	f017 f87a 	bl	80184a4 <xQueueGenericCreate>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <crtpInit+0x74>)
 80013b4:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <crtpInit+0x74>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a15      	ldr	r2, [pc, #84]	; (8001410 <crtpInit+0x78>)
 80013bc:	4915      	ldr	r1, [pc, #84]	; (8001414 <crtpInit+0x7c>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f00c f9a6 	bl	800d710 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(crtpTxTask, crtpTxTask, CRTP_TX_TASK_NAME, NULL, CRTP_TX_TASK_PRI);
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <crtpInit+0x80>)
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <crtpInit+0x84>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	2302      	movs	r3, #2
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2300      	movs	r3, #0
 80013d6:	4912      	ldr	r1, [pc, #72]	; (8001420 <crtpInit+0x88>)
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <crtpInit+0x8c>)
 80013da:	f017 ff07 	bl	80191ec <xTaskCreateStatic>
  STATIC_MEM_TASK_CREATE(crtpRxTask, crtpRxTask, CRTP_RX_TASK_NAME, NULL, CRTP_RX_TASK_PRI);
 80013de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <crtpInit+0x90>)
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <crtpInit+0x94>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	2302      	movs	r3, #2
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2300      	movs	r3, #0
 80013f2:	490f      	ldr	r1, [pc, #60]	; (8001430 <crtpInit+0x98>)
 80013f4:	480f      	ldr	r0, [pc, #60]	; (8001434 <crtpInit+0x9c>)
 80013f6:	f017 fef9 	bl	80191ec <xTaskCreateStatic>

  isInit = true;
 80013fa:	4b03      	ldr	r3, [pc, #12]	; (8001408 <crtpInit+0x70>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e000      	b.n	8001404 <crtpInit+0x6c>
    return;
 8001402:	bf00      	nop
}
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20005169 	.word	0x20005169
 800140c:	20005180 	.word	0x20005180
 8001410:	08021808 	.word	0x08021808
 8001414:	08021810 	.word	0x08021810
 8001418:	200011c4 	.word	0x200011c4
 800141c:	20000fc4 	.word	0x20000fc4
 8001420:	0802182c 	.word	0x0802182c
 8001424:	080014f9 	.word	0x080014f9
 8001428:	2000167c 	.word	0x2000167c
 800142c:	2000127c 	.word	0x2000127c
 8001430:	08021834 	.word	0x08021834
 8001434:	08001569 	.word	0x08001569

08001438 <crtpInitTaskQueue>:
{
  return isInit;
}

void crtpInitTaskQueue(CRTPPort portId)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId] == NULL);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a10      	ldr	r2, [pc, #64]	; (8001488 <crtpInitTaskQueue+0x50>)
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <crtpInitTaskQueue+0x20>
 800144e:	226b      	movs	r2, #107	; 0x6b
 8001450:	490e      	ldr	r1, [pc, #56]	; (800148c <crtpInitTaskQueue+0x54>)
 8001452:	480f      	ldr	r0, [pc, #60]	; (8001490 <crtpInitTaskQueue+0x58>)
 8001454:	f009 fa1e 	bl	800a894 <assertFail>

  queues[portId] = xQueueCreate(CRTP_RX_QUEUE_SIZE, sizeof(CRTPPacket));
 8001458:	79fc      	ldrb	r4, [r7, #7]
 800145a:	2200      	movs	r2, #0
 800145c:	2120      	movs	r1, #32
 800145e:	2010      	movs	r0, #16
 8001460:	f017 f820 	bl	80184a4 <xQueueGenericCreate>
 8001464:	4603      	mov	r3, r0
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <crtpInitTaskQueue+0x50>)
 8001468:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  DEBUG_QUEUE_MONITOR_REGISTER(queues[portId]);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4a06      	ldr	r2, [pc, #24]	; (8001488 <crtpInitTaskQueue+0x50>)
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <crtpInitTaskQueue+0x5c>)
 8001476:	4905      	ldr	r1, [pc, #20]	; (800148c <crtpInitTaskQueue+0x54>)
 8001478:	4618      	mov	r0, r3
 800147a:	f00c f949 	bl	800d710 <qmRegisterQueue>
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bd90      	pop	{r4, r7, pc}
 8001486:	bf00      	nop
 8001488:	20005184 	.word	0x20005184
 800148c:	08021810 	.word	0x08021810
 8001490:	0802183c 	.word	0x0802183c
 8001494:	08021854 	.word	0x08021854

08001498 <crtpReceivePacketBlock>:

  return xQueueReceive(queues[portId], p, 0);
}

int crtpReceivePacketBlock(CRTPPort portId, CRTPPacket *p)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  ASSERT(queues[portId]);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <crtpReceivePacketBlock+0x50>)
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d104      	bne.n	80014ba <crtpReceivePacketBlock+0x22>
 80014b0:	227b      	movs	r2, #123	; 0x7b
 80014b2:	490e      	ldr	r1, [pc, #56]	; (80014ec <crtpReceivePacketBlock+0x54>)
 80014b4:	480e      	ldr	r0, [pc, #56]	; (80014f0 <crtpReceivePacketBlock+0x58>)
 80014b6:	f009 f9ed 	bl	800a894 <assertFail>
  ASSERT(p);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <crtpReceivePacketBlock+0x32>
 80014c0:	227c      	movs	r2, #124	; 0x7c
 80014c2:	490a      	ldr	r1, [pc, #40]	; (80014ec <crtpReceivePacketBlock+0x54>)
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <crtpReceivePacketBlock+0x5c>)
 80014c6:	f009 f9e5 	bl	800a894 <assertFail>

  return xQueueReceive(queues[portId], p, portMAX_DELAY);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <crtpReceivePacketBlock+0x50>)
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f017 fa2f 	bl	801893c <xQueueReceive>
 80014de:	4603      	mov	r3, r0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20005184 	.word	0x20005184
 80014ec:	08021810 	.word	0x08021810
 80014f0:	08021854 	.word	0x08021854
 80014f4:	08021864 	.word	0x08021864

080014f8 <crtpTxTask>:
{
  return (CRTP_TX_QUEUE_SIZE - uxQueueMessagesWaiting(txQueue));
}

void crtpTxTask(void *param)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <crtpTxTask+0x60>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a15      	ldr	r2, [pc, #84]	; (800155c <crtpTxTask+0x64>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d021      	beq.n	800154e <crtpTxTask+0x56>
    {
      if (xQueueReceive(txQueue, &p, portMAX_DELAY) == pdTRUE)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <crtpTxTask+0x68>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f107 0108 	add.w	r1, r7, #8
 8001512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001516:	4618      	mov	r0, r3
 8001518:	f017 fa10 	bl	801893c <xQueueReceive>
 800151c:	4603      	mov	r3, r0
 800151e:	2b01      	cmp	r3, #1
 8001520:	d1ee      	bne.n	8001500 <crtpTxTask+0x8>
      {
        // Keep testing, if the link changes to USB it will go though
        while (link->sendPacket(&p) == false)
 8001522:	e002      	b.n	800152a <crtpTxTask+0x32>
        {
          // Relaxation time
          vTaskDelay((10));
 8001524:	200a      	movs	r0, #10
 8001526:	f018 f819 	bl	801955c <vTaskDelay>
        while (link->sendPacket(&p) == false)
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <crtpTxTask+0x60>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	4610      	mov	r0, r2
 8001536:	4798      	blx	r3
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f2      	beq.n	8001524 <crtpTxTask+0x2c>
        }
        stats.txCount++;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <crtpTxTask+0x6c>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	3301      	adds	r3, #1
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <crtpTxTask+0x6c>)
 8001546:	6053      	str	r3, [r2, #4]
        updateStats();
 8001548:	f000 f936 	bl	80017b8 <updateStats>
 800154c:	e7d8      	b.n	8001500 <crtpTxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 800154e:	200a      	movs	r0, #10
 8001550:	f018 f804 	bl	801955c <vTaskDelay>
    if (link != &nopLink)
 8001554:	e7d4      	b.n	8001500 <crtpTxTask+0x8>
 8001556:	bf00      	nop
 8001558:	2000004c 	.word	0x2000004c
 800155c:	20000038 	.word	0x20000038
 8001560:	20005180 	.word	0x20005180
 8001564:	2000516c 	.word	0x2000516c

08001568 <crtpRxTask>:
    }
  }
}

void crtpRxTask(void *param)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  CRTPPacket p;

  while (true)
  {
    if (link != &nopLink)
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <crtpRxTask+0x9c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a24      	ldr	r2, [pc, #144]	; (8001608 <crtpRxTask+0xa0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d040      	beq.n	80015fc <crtpRxTask+0x94>
    {
      if (!link->receivePacket(&p))
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <crtpRxTask+0x9c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f107 0208 	add.w	r2, r7, #8
 8001584:	4610      	mov	r0, r2
 8001586:	4798      	blx	r3
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <crtpRxTask+0x8>
      {
        if (queues[p.port])
 800158e:	7a7b      	ldrb	r3, [r7, #9]
 8001590:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	4b1c      	ldr	r3, [pc, #112]	; (800160c <crtpRxTask+0xa4>)
 800159a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00e      	beq.n	80015c0 <crtpRxTask+0x58>
        {
          // Block, since we should never drop a packet
          xQueueSend(queues[p.port], &p, portMAX_DELAY);
 80015a2:	7a7b      	ldrb	r3, [r7, #9]
 80015a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <crtpRxTask+0xa4>)
 80015ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80015b2:	f107 0108 	add.w	r1, r7, #8
 80015b6:	2300      	movs	r3, #0
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015bc:	f017 f81c 	bl	80185f8 <xQueueGenericSend>
        }

        if (callbacks[p.port])
 80015c0:	7a7b      	ldrb	r3, [r7, #9]
 80015c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <crtpRxTask+0xa8>)
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <crtpRxTask+0x84>
        {
          callbacks[p.port](&p);
 80015d4:	7a7b      	ldrb	r3, [r7, #9]
 80015d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <crtpRxTask+0xa8>)
 80015e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	4610      	mov	r0, r2
 80015ea:	4798      	blx	r3
        }

        stats.rxCount++;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <crtpRxTask+0xac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <crtpRxTask+0xac>)
 80015f4:	6013      	str	r3, [r2, #0]
        updateStats();
 80015f6:	f000 f8df 	bl	80017b8 <updateStats>
 80015fa:	e7b9      	b.n	8001570 <crtpRxTask+0x8>
      }
    }
    else
    {
      vTaskDelay((10));
 80015fc:	200a      	movs	r0, #10
 80015fe:	f017 ffad 	bl	801955c <vTaskDelay>
    if (link != &nopLink)
 8001602:	e7b5      	b.n	8001570 <crtpRxTask+0x8>
 8001604:	2000004c 	.word	0x2000004c
 8001608:	20000038 	.word	0x20000038
 800160c:	20005184 	.word	0x20005184
 8001610:	200051c4 	.word	0x200051c4
 8001614:	2000516c 	.word	0x2000516c

08001618 <crtpRegisterPortCB>:
    }
  }
}

void crtpRegisterPortCB(int port, CrtpCallback cb)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  if (port>CRTP_NBR_OF_PORTS)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b10      	cmp	r3, #16
 8001626:	dc05      	bgt.n	8001634 <crtpRegisterPortCB+0x1c>
    return;

  callbacks[port] = cb;
 8001628:	4905      	ldr	r1, [pc, #20]	; (8001640 <crtpRegisterPortCB+0x28>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001632:	e000      	b.n	8001636 <crtpRegisterPortCB+0x1e>
    return;
 8001634:	bf00      	nop
}
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	200051c4 	.word	0x200051c4

08001644 <crtpSendPacket>:

int crtpSendPacket(CRTPPacket *p)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d104      	bne.n	800165c <crtpSendPacket+0x18>
 8001652:	22d4      	movs	r2, #212	; 0xd4
 8001654:	490c      	ldr	r1, [pc, #48]	; (8001688 <crtpSendPacket+0x44>)
 8001656:	480d      	ldr	r0, [pc, #52]	; (800168c <crtpSendPacket+0x48>)
 8001658:	f009 f91c 	bl	800a894 <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b1e      	cmp	r3, #30
 8001662:	d904      	bls.n	800166e <crtpSendPacket+0x2a>
 8001664:	22d5      	movs	r2, #213	; 0xd5
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <crtpSendPacket+0x44>)
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <crtpSendPacket+0x4c>)
 800166a:	f009 f913 	bl	800a894 <assertFail>

  return xQueueSend(txQueue, p, 0);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <crtpSendPacket+0x50>)
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	2300      	movs	r3, #0
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f016 ffbe 	bl	80185f8 <xQueueGenericSend>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	08021810 	.word	0x08021810
 800168c:	08021864 	.word	0x08021864
 8001690:	08021868 	.word	0x08021868
 8001694:	20005180 	.word	0x20005180

08001698 <crtpSendPacketBlock>:

int crtpSendPacketBlock(CRTPPacket *p)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  ASSERT(p);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d104      	bne.n	80016b0 <crtpSendPacketBlock+0x18>
 80016a6:	22dc      	movs	r2, #220	; 0xdc
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <crtpSendPacketBlock+0x44>)
 80016aa:	480d      	ldr	r0, [pc, #52]	; (80016e0 <crtpSendPacketBlock+0x48>)
 80016ac:	f009 f8f2 	bl	800a894 <assertFail>
  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b1e      	cmp	r3, #30
 80016b6:	d904      	bls.n	80016c2 <crtpSendPacketBlock+0x2a>
 80016b8:	22dd      	movs	r2, #221	; 0xdd
 80016ba:	4908      	ldr	r1, [pc, #32]	; (80016dc <crtpSendPacketBlock+0x44>)
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <crtpSendPacketBlock+0x4c>)
 80016be:	f009 f8e9 	bl	800a894 <assertFail>

  return xQueueSend(txQueue, p, portMAX_DELAY);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <crtpSendPacketBlock+0x50>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	f016 ff93 	bl	80185f8 <xQueueGenericSend>
 80016d2:	4603      	mov	r3, r0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	08021810 	.word	0x08021810
 80016e0:	08021864 	.word	0x08021864
 80016e4:	08021868 	.word	0x08021868
 80016e8:	20005180 	.word	0x20005180

080016ec <crtpReset>:

int crtpReset(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  xQueueReset(txQueue);
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <crtpReset+0x28>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f016 fe00 	bl	80182fc <xQueueGenericReset>
  if (link->reset) {
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <crtpReset+0x2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <crtpReset+0x22>
    link->reset();
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <crtpReset+0x2c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4798      	blx	r3
  }

  return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20005180 	.word	0x20005180
 8001718:	2000004c 	.word	0x2000004c

0800171c <crtpIsConnected>:

bool crtpIsConnected(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  if (link->isConnected)
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <crtpIsConnected+0x20>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <crtpIsConnected+0x1a>
    return link->isConnected();
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <crtpIsConnected+0x20>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4798      	blx	r3
 8001732:	4603      	mov	r3, r0
 8001734:	e000      	b.n	8001738 <crtpIsConnected+0x1c>
  return true;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000004c 	.word	0x2000004c

08001740 <crtpSetLink>:

void crtpSetLink(struct crtpLinkOperations * lk)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(link)
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <crtpSetLink+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <crtpSetLink+0x1a>
    link->setEnable(false);
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <crtpSetLink+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2000      	movs	r0, #0
 8001758:	4798      	blx	r3

  if (lk)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <crtpSetLink+0x28>
    link = lk;
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <crtpSetLink+0x40>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e002      	b.n	800176e <crtpSetLink+0x2e>
  else
    link = &nopLink;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <crtpSetLink+0x40>)
 800176a:	4a06      	ldr	r2, [pc, #24]	; (8001784 <crtpSetLink+0x44>)
 800176c:	601a      	str	r2, [r3, #0]

  link->setEnable(true);
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <crtpSetLink+0x40>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2001      	movs	r0, #1
 8001776:	4798      	blx	r3
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000004c 	.word	0x2000004c
 8001784:	20000038 	.word	0x20000038

08001788 <nopFunc>:

static int nopFunc(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ENETDOWN;
 800178c:	2373      	movs	r3, #115	; 0x73
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <clearStats>:

static void clearStats()
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  stats.rxCount = 0;
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <clearStats+0x1c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
  stats.txCount = 0;
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <clearStats+0x1c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	2000516c 	.word	0x2000516c

080017b8 <updateStats>:

static void updateStats()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  uint32_t now = xTaskGetTickCount();
 80017be:	f018 f88b 	bl	80198d8 <xTaskGetTickCount>
 80017c2:	6078      	str	r0, [r7, #4]
  if (now > stats.nextStatisticsTime) {
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <updateStats+0x9c>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d93d      	bls.n	800184a <updateStats+0x92>
    float interval = now - stats.previousStatisticsTime;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <updateStats+0x9c>)
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017de:	edc7 7a00 	vstr	s15, [r7]
    stats.rxRate = (uint16_t)(1000.0f * stats.rxCount / interval);
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <updateStats+0x9c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001858 <updateStats+0xa0>
 80017f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017f6:	ed97 7a00 	vldr	s14, [r7]
 80017fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001802:	ee17 3a90 	vmov	r3, s15
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <updateStats+0x9c>)
 800180a:	811a      	strh	r2, [r3, #8]
    stats.txRate = (uint16_t)(1000.0f * stats.txCount / interval);
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <updateStats+0x9c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001818:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001858 <updateStats+0xa0>
 800181c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001820:	ed97 7a00 	vldr	s14, [r7]
 8001824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182c:	ee17 3a90 	vmov	r3, s15
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <updateStats+0x9c>)
 8001834:	815a      	strh	r2, [r3, #10]

    clearStats();
 8001836:	f7ff ffaf 	bl	8001798 <clearStats>
    stats.previousStatisticsTime = now;
 800183a:	4a06      	ldr	r2, [pc, #24]	; (8001854 <updateStats+0x9c>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6113      	str	r3, [r2, #16]
    stats.nextStatisticsTime = now + STATS_INTERVAL;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001846:	4a03      	ldr	r2, [pc, #12]	; (8001854 <updateStats+0x9c>)
 8001848:	60d3      	str	r3, [r2, #12]
  }
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000516c 	.word	0x2000516c
 8001858:	447a0000 	.word	0x447a0000

0800185c <crtpCommanderInit>:
static bool isInit;

static void commanderCrtpCB(CRTPPacket* pk);

void crtpCommanderInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  if(isInit) {
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <crtpCommanderInit+0x2c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <crtpCommanderInit+0x28>
    return;
  }

  crtpInit();
 8001868:	f7ff fd96 	bl	8001398 <crtpInit>
  crtpRegisterPortCB(CRTP_PORT_SETPOINT, commanderCrtpCB);
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <crtpCommanderInit+0x30>)
 800186e:	2003      	movs	r0, #3
 8001870:	f7ff fed2 	bl	8001618 <crtpRegisterPortCB>
  crtpRegisterPortCB(CRTP_PORT_SETPOINT_GENERIC, commanderCrtpCB);
 8001874:	4905      	ldr	r1, [pc, #20]	; (800188c <crtpCommanderInit+0x30>)
 8001876:	2007      	movs	r0, #7
 8001878:	f7ff fece 	bl	8001618 <crtpRegisterPortCB>
  isInit = true;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <crtpCommanderInit+0x2c>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e000      	b.n	8001886 <crtpCommanderInit+0x2a>
    return;
 8001884:	bf00      	nop
}
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20005204 	.word	0x20005204
 800188c:	080018c1 	.word	0x080018c1

08001890 <notifySetpointsStopDecoder>:
 */
struct notifySetpointsStopPacket {
  uint32_t remainValidMillisecs;
} __attribute__((packed));
void notifySetpointsStopDecoder(const void *data, size_t datalen)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  ASSERT(datalen == sizeof(struct notifySetpointsStopPacket));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2b04      	cmp	r3, #4
 800189e:	d004      	beq.n	80018aa <notifySetpointsStopDecoder+0x1a>
 80018a0:	2263      	movs	r2, #99	; 0x63
 80018a2:	4905      	ldr	r1, [pc, #20]	; (80018b8 <notifySetpointsStopDecoder+0x28>)
 80018a4:	4805      	ldr	r0, [pc, #20]	; (80018bc <notifySetpointsStopDecoder+0x2c>)
 80018a6:	f008 fff5 	bl	800a894 <assertFail>
  // Note: The remainValidMillisecs argument is an artifact of the old
  // pull-based high-level commander architecture, and is no longer needed.
  commanderRelaxPriority();
 80018aa:	f004 ff03 	bl	80066b4 <commanderRelaxPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08021888 	.word	0x08021888
 80018bc:	080218ac 	.word	0x080218ac

080018c0 <commanderCrtpCB>:
  [metaNotifySetpointsStop] = notifySetpointsStopDecoder,
};

/* Decoder switch */
static void commanderCrtpCB(CRTPPacket* pk)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  static setpoint_t setpoint;

  if(pk->port == CRTP_PORT_SETPOINT && pk->channel == 0) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	f023 030f 	bic.w	r3, r3, #15
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b30      	cmp	r3, #48	; 0x30
 80018d4:	d10f      	bne.n	80018f6 <commanderCrtpCB+0x36>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d108      	bne.n	80018f6 <commanderCrtpCB+0x36>
    crtpCommanderRpytDecodeSetpoint(&setpoint, pk);
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	481d      	ldr	r0, [pc, #116]	; (800195c <commanderCrtpCB+0x9c>)
 80018e8:	f001 fce2 	bl	80032b0 <crtpCommanderRpytDecodeSetpoint>
    commanderSetSetpoint(&setpoint, COMMANDER_PRIORITY_CRTP);
 80018ec:	2102      	movs	r1, #2
 80018ee:	481b      	ldr	r0, [pc, #108]	; (800195c <commanderCrtpCB+0x9c>)
 80018f0:	f004 fea2 	bl	8006638 <commanderSetSetpoint>
 80018f4:	e02d      	b.n	8001952 <commanderCrtpCB+0x92>
  } else if (pk->port == CRTP_PORT_SETPOINT_GENERIC) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	f023 030f 	bic.w	r3, r3, #15
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b70      	cmp	r3, #112	; 0x70
 8001902:	d126      	bne.n	8001952 <commanderCrtpCB+0x92>
    switch (pk->channel) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <commanderCrtpCB+0x58>
 8001912:	2b01      	cmp	r3, #1
 8001914:	d009      	beq.n	800192a <commanderCrtpCB+0x6a>
        }
      }
      break;
    default:
      /* Do nothing */
      break;
 8001916:	e01c      	b.n	8001952 <commanderCrtpCB+0x92>
      crtpCommanderGenericDecodeSetpoint(&setpoint, pk);
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4810      	ldr	r0, [pc, #64]	; (800195c <commanderCrtpCB+0x9c>)
 800191c:	f000 fc0c 	bl	8002138 <crtpCommanderGenericDecodeSetpoint>
      commanderSetSetpoint(&setpoint, COMMANDER_PRIORITY_CRTP);
 8001920:	2102      	movs	r1, #2
 8001922:	480e      	ldr	r0, [pc, #56]	; (800195c <commanderCrtpCB+0x9c>)
 8001924:	f004 fe88 	bl	8006638 <commanderSetSetpoint>
      break;
 8001928:	e013      	b.n	8001952 <commanderCrtpCB+0x92>
        uint8_t metaCmd = pk->data[0];
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	789b      	ldrb	r3, [r3, #2]
 800192e:	73fb      	strb	r3, [r7, #15]
        if (metaCmd < nMetaCommands && (metaCommandDecoders[metaCmd] != NULL)) {
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <commanderCrtpCB+0x90>
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <commanderCrtpCB+0xa0>)
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <commanderCrtpCB+0x90>
          metaCommandDecoders[metaCmd](pk->data + 1, pk->size - 1);
 800193c:	4c08      	ldr	r4, [pc, #32]	; (8001960 <commanderCrtpCB+0xa0>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3302      	adds	r3, #2
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	47a0      	blx	r4
      break;
 8001950:	bf00      	nop
    }
  }
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	20005208 	.word	0x20005208
 8001960:	08001891 	.word	0x08001891

08001964 <quatdecompress>:

	return comp;
}

static inline void quatdecompress(uint32_t comp, float q[4])
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 800196e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001972:	617b      	str	r3, [r7, #20]

	int const i_largest = comp >> 30;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	0f9b      	lsrs	r3, r3, #30
 8001978:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8001980:	2303      	movs	r3, #3
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	e04d      	b.n	8001a22 <quatdecompress+0xbe>
		if (i != i_largest) {
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	429a      	cmp	r2, r3
 800198c:	d046      	beq.n	8001a1c <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	4013      	ands	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0a5b      	lsrs	r3, r3, #9
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	0a9b      	lsrs	r3, r3, #10
 80019a4:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	ee07 3a90 	vmov	s15, r3
 80019ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a54 <quatdecompress+0xf0>
 80019b4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ce:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10d      	bne.n	80019f4 <quatdecompress+0x90>
				q[i] = -q[i];
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	eef1 7a67 	vneg.f32	s15, s15
 80019f0:	edc3 7a00 	vstr	s15, [r3]
			}
			sum_squares += q[i] * q[i];
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	ed93 7a00 	vldr	s14, [r3]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	daae      	bge.n	8001986 <quatdecompress+0x22>
		}
	}
	q[i_largest] = sqrtf(1.0f - sum_squares);
 8001a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	18d4      	adds	r4, r2, r3
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	f01d f9ae 	bl	801eda0 <sqrtf>
 8001a44:	eef0 7a40 	vmov.f32	s15, s0
 8001a48:	edc4 7a00 	vstr	s15, [r4]
}
 8001a4c:	bf00      	nop
 8001a4e:	3724      	adds	r7, #36	; 0x24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	3f3504f3 	.word	0x3f3504f3

08001a58 <stopDecoder>:

/* stopDecoder
 * Keeps setpoint to 0: stops the motors and fall
 */
static void stopDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	460b      	mov	r3, r1
 8001a66:	72fb      	strb	r3, [r7, #11]
  return;
 8001a68:	bf00      	nop
}
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <velocityDecoder>:
  float vy;        // ...
  float vz;        // ...
  float yawrate;  // deg/s
} __attribute__((packed));
static void velocityDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	460b      	mov	r3, r1
 8001a82:	72fb      	strb	r3, [r7, #11]
  const struct velocityPacket_s *values = data;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct velocityPacket_s));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d004      	beq.n	8001a98 <velocityDecoder+0x24>
 8001a8e:	2266      	movs	r2, #102	; 0x66
 8001a90:	4916      	ldr	r1, [pc, #88]	; (8001aec <velocityDecoder+0x78>)
 8001a92:	4817      	ldr	r0, [pc, #92]	; (8001af0 <velocityDecoder+0x7c>)
 8001a94:	f008 fefe 	bl	800a894 <assertFail>

  setpoint->mode.x = modeVelocity;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeVelocity;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeVelocity;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->velocity.x = values->vx;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
  setpoint->velocity.y = values->vy;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	6513      	str	r3, [r2, #80]	; 0x50
  setpoint->velocity.z = values->vz;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6553      	str	r3, [r2, #84]	; 0x54

  setpoint->mode.yaw = modeVelocity;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eef1 7a67 	vneg.f32	s15, s15
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	080218e0 	.word	0x080218e0
 8001af0:	0802190c 	.word	0x0802190c

08001af4 <zDistanceDecoder>:
  float pitch;           // ...
  float yawrate;         // deg/s
  float zDistance;        // m in the world frame of reference
} __attribute__((packed));
static void zDistanceDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	460b      	mov	r3, r1
 8001b02:	72fb      	strb	r3, [r7, #11]
  const struct zDistancePacket_s *values = data;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	617b      	str	r3, [r7, #20]


  ASSERT(datalen == sizeof(struct zDistancePacket_s));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d004      	beq.n	8001b18 <zDistanceDecoder+0x24>
 8001b0e:	2283      	movs	r2, #131	; 0x83
 8001b10:	4916      	ldr	r1, [pc, #88]	; (8001b6c <zDistanceDecoder+0x78>)
 8001b12:	4817      	ldr	r0, [pc, #92]	; (8001b70 <zDistanceDecoder+0x7c>)
 8001b14:	f008 febe 	bl	800a894 <assertFail>

  setpoint->mode.z = modeAbs;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->position.z = values->zDistance;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeVelocity;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef1 7a67 	vneg.f32	s15, s15
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.roll = modeAbs;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeAbs;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  setpoint->attitude.roll = values->roll;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	6093      	str	r3, [r2, #8]
  setpoint->attitude.pitch = values->pitch;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	60d3      	str	r3, [r2, #12]
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	080218e0 	.word	0x080218e0
 8001b70:	08021938 	.word	0x08021938

08001b74 <getChannelUnitMultiplier>:
  uint16_t channelThrust;
  uint16_t channelAux[MAX_AUX_RC_CHANNELS];
} __attribute__((packed));

static inline float getChannelUnitMultiplier(uint16_t channelValue, uint16_t channelMidpoint, uint16_t channelRange)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	80bb      	strh	r3, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	807b      	strh	r3, [r7, #2]
  // Compute a float from -1 to 1 based on the RC channel value, midpoint, and total range magnitude
  return ((float)channelValue - (float)channelMidpoint) / (float)channelRange;
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ba8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bac:	eef0 7a66 	vmov.f32	s15, s13
}
 8001bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <cppmEmuDecoder>:
{
  return s_CppmEmuYawMaxRateDps;
}

static void cppmEmuDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	72fb      	strb	r3, [r7, #11]
  bool isSelfLevelEnabled = true;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	75fb      	strb	r3, [r7, #23]

  ASSERT(datalen >= 9); // minimum 9 bytes expected - 1byte header + four 2byte channels
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d804      	bhi.n	8001be4 <cppmEmuDecoder+0x24>
 8001bda:	22dd      	movs	r2, #221	; 0xdd
 8001bdc:	4975      	ldr	r1, [pc, #468]	; (8001db4 <cppmEmuDecoder+0x1f4>)
 8001bde:	4876      	ldr	r0, [pc, #472]	; (8001db8 <cppmEmuDecoder+0x1f8>)
 8001be0:	f008 fe58 	bl	800a894 <assertFail>
  const struct cppmEmuPacket_s *values = data;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	613b      	str	r3, [r7, #16]
  ASSERT(datalen == 9 + (2*values->hdr.numAuxChannels)); // Total size is 9 + number of active aux channels
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	3309      	adds	r3, #9
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d004      	beq.n	8001c08 <cppmEmuDecoder+0x48>
 8001bfe:	22df      	movs	r2, #223	; 0xdf
 8001c00:	496c      	ldr	r1, [pc, #432]	; (8001db4 <cppmEmuDecoder+0x1f4>)
 8001c02:	486e      	ldr	r0, [pc, #440]	; (8001dbc <cppmEmuDecoder+0x1fc>)
 8001c04:	f008 fe46 	bl	800a894 <assertFail>

  // Aux channel 0 is reserved for enabling/disabling self-leveling
  // If it's in use, check and see if it's set and enable self-leveling.
  // If aux channel 0 is not in use, default to self-leveling enabled.
  isSelfLevelEnabled = !(values->hdr.numAuxChannels >= 1 && values->channelAux[0] < 1500);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <cppmEmuDecoder+0x66>
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d901      	bls.n	8001c2a <cppmEmuDecoder+0x6a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <cppmEmuDecoder+0x6c>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]

  // Set the modes

  // Position is disabled
  setpoint->mode.x = modeDisable;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeDisable;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeDisable;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  // Yaw is always velocity
  setpoint->mode.yaw = modeVelocity;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2202      	movs	r2, #2
 8001c52:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  // Roll/Pitch mode is either velocity or abs based on isSelfLevelEnabled
  setpoint->mode.roll = isSelfLevelEnabled ? modeAbs : modeVelocity;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <cppmEmuDecoder+0xa0>
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	e000      	b.n	8001c62 <cppmEmuDecoder+0xa2>
 8001c60:	2202      	movs	r2, #2
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = isSelfLevelEnabled ? modeAbs : modeVelocity;
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <cppmEmuDecoder+0xb2>
 8001c6e:	2201      	movs	r2, #1
 8001c70:	e000      	b.n	8001c74 <cppmEmuDecoder+0xb4>
 8001c72:	2202      	movs	r2, #2
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  // Rescale the CPPM values into angles to build the setpoint packet
  if(isSelfLevelEnabled)
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d02e      	beq.n	8001cde <cppmEmuDecoder+0x11e>
  {
    setpoint->attitude.roll = -1 * getChannelUnitMultiplier(values->channelRoll, 1500, 500) * s_CppmEmuRollMaxAngleDeg; // roll inverted
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c8c:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff6f 	bl	8001b74 <getChannelUnitMultiplier>
 8001c96:	eef0 7a40 	vmov.f32	s15, s0
 8001c9a:	eeb1 7a67 	vneg.f32	s14, s15
 8001c9e:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <cppmEmuDecoder+0x200>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	edc3 7a02 	vstr	s15, [r3, #8]
    setpoint->attitude.pitch = -1 * getChannelUnitMultiplier(values->channelPitch, 1500, 500) * s_CppmEmuPitchMaxAngleDeg; // pitch inverted
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cba:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ff58 	bl	8001b74 <getChannelUnitMultiplier>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	eeb1 7a67 	vneg.f32	s14, s15
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <cppmEmuDecoder+0x204>)
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001cdc:	e02d      	b.n	8001d3a <cppmEmuDecoder+0x17a>
  }
  else
  {
    setpoint->attitudeRate.roll = -1 * getChannelUnitMultiplier(values->channelRoll, 1500, 500) * s_CppmEmuRollMaxRateDps; // roll inverted
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cea:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff ff40 	bl	8001b74 <getChannelUnitMultiplier>
 8001cf4:	eef0 7a40 	vmov.f32	s15, s0
 8001cf8:	eeb1 7a67 	vneg.f32	s14, s15
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <cppmEmuDecoder+0x208>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	edc3 7a06 	vstr	s15, [r3, #24]
    setpoint->attitudeRate.pitch = -1 * getChannelUnitMultiplier(values->channelPitch, 1500, 500) * s_CppmEmuPitchMaxRateDps; // pitch inverted
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d18:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff29 	bl	8001b74 <getChannelUnitMultiplier>
 8001d22:	eef0 7a40 	vmov.f32	s15, s0
 8001d26:	eeb1 7a67 	vneg.f32	s14, s15
 8001d2a:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <cppmEmuDecoder+0x20c>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edc3 7a07 	vstr	s15, [r3, #28]
  }

  setpoint->attitudeRate.yaw = -1 * getChannelUnitMultiplier(values->channelYaw, 1500, 500) * s_CppmEmuYawMaxRateDps; // yaw inverted
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d46:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff12 	bl	8001b74 <getChannelUnitMultiplier>
 8001d50:	eef0 7a40 	vmov.f32	s15, s0
 8001d54:	eeb1 7a67 	vneg.f32	s14, s15
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <cppmEmuDecoder+0x210>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edc3 7a08 	vstr	s15, [r3, #32]
  setpoint->thrust = getChannelUnitMultiplier(values->channelThrust, 1000, 1000) * (float)UINT16_MAX; // Thrust is positive only - uses the full 1000-2000 range
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fefb 	bl	8001b74 <getChannelUnitMultiplier>
 8001d7e:	eef0 7a40 	vmov.f32	s15, s0
 8001d82:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001dd4 <cppmEmuDecoder+0x214>
 8001d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Make sure thrust isn't negative
  if(setpoint->thrust < 0)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d400      	bmi.n	8001da2 <cppmEmuDecoder+0x1e2>
  {
    setpoint->thrust = 0;
  }
}
 8001da0:	e003      	b.n	8001daa <cppmEmuDecoder+0x1ea>
    setpoint->thrust = 0;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	080218e0 	.word	0x080218e0
 8001db8:	08021964 	.word	0x08021964
 8001dbc:	08021974 	.word	0x08021974
 8001dc0:	20000058 	.word	0x20000058
 8001dc4:	2000005c 	.word	0x2000005c
 8001dc8:	20000050 	.word	0x20000050
 8001dcc:	20000054 	.word	0x20000054
 8001dd0:	20000060 	.word	0x20000060
 8001dd4:	477fff00 	.word	0x477fff00

08001dd8 <altHoldDecoder>:
  float pitch;           // ...
  float yawrate;         // deg/s
  float zVelocity;       // m/s in the world frame of reference
} __attribute__((packed));
static void altHoldDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	460b      	mov	r3, r1
 8001de6:	72fb      	strb	r3, [r7, #11]
  const struct altHoldPacket_s *values = data;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct altHoldPacket_s));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d005      	beq.n	8001dfe <altHoldDecoder+0x26>
 8001df2:	f240 1217 	movw	r2, #279	; 0x117
 8001df6:	4916      	ldr	r1, [pc, #88]	; (8001e50 <altHoldDecoder+0x78>)
 8001df8:	4816      	ldr	r0, [pc, #88]	; (8001e54 <altHoldDecoder+0x7c>)
 8001dfa:	f008 fd4b 	bl	800a894 <assertFail>


  setpoint->mode.z = modeVelocity;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->velocity.z = values->zVelocity;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6553      	str	r3, [r2, #84]	; 0x54


  setpoint->mode.yaw = modeVelocity;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitudeRate.yaw = -values->yawrate;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef1 7a67 	vneg.f32	s15, s15
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.roll = modeAbs;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeAbs;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

  setpoint->attitude.roll = values->roll;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	6093      	str	r3, [r2, #8]
  setpoint->attitude.pitch = values->pitch;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	60d3      	str	r3, [r2, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	080218e0 	.word	0x080218e0
 8001e54:	080219a4 	.word	0x080219a4

08001e58 <hoverDecoder>:
  float vy;           // ...
  float yawrate;      // deg/s
  float zDistance;    // m in the world frame of reference
} __attribute__((packed));
static void hoverDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	460b      	mov	r3, r1
 8001e66:	72fb      	strb	r3, [r7, #11]
  const struct hoverPacket_s *values = data;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct hoverPacket_s));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b10      	cmp	r3, #16
 8001e70:	d005      	beq.n	8001e7e <hoverDecoder+0x26>
 8001e72:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001e76:	4918      	ldr	r1, [pc, #96]	; (8001ed8 <hoverDecoder+0x80>)
 8001e78:	4818      	ldr	r0, [pc, #96]	; (8001edc <hoverDecoder+0x84>)
 8001e7a:	f008 fd0b 	bl	800a894 <assertFail>

  setpoint->mode.z = modeAbs;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
  setpoint->position.z = values->zDistance;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeVelocity;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  setpoint->attitudeRate.yaw = -values->yawrate;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef1 7a67 	vneg.f32	s15, s15
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	edc3 7a08 	vstr	s15, [r3, #32]


  setpoint->mode.x = modeVelocity;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeVelocity;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->velocity.x = values->vx;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
  setpoint->velocity.y = values->vy;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6513      	str	r3, [r2, #80]	; 0x50

  setpoint->velocity_body = true;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8001ed0:	bf00      	nop
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	080218e0 	.word	0x080218e0
 8001edc:	080219d0 	.word	0x080219d0

08001ee0 <fullStateDecoder>:
  int16_t rateRoll;  // angular velocity - milliradians / sec
  int16_t ratePitch; //  (NOTE: limits to about 5 full circles per sec.
  int16_t rateYaw;   //   may not be enough for extremely aggressive flight.)
} __attribute__((packed));
static void fullStateDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	460b      	mov	r3, r1
 8001eee:	72fb      	strb	r3, [r7, #11]
  const struct fullStatePacket_s *values = data;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	617b      	str	r3, [r7, #20]

  ASSERT(datalen == sizeof(struct fullStatePacket_s));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b1c      	cmp	r3, #28
 8001ef8:	d005      	beq.n	8001f06 <fullStateDecoder+0x26>
 8001efa:	f240 125d 	movw	r2, #349	; 0x15d
 8001efe:	4972      	ldr	r1, [pc, #456]	; (80020c8 <fullStateDecoder+0x1e8>)
 8001f00:	4872      	ldr	r0, [pc, #456]	; (80020cc <fullStateDecoder+0x1ec>)
 8001f02:	f008 fcc7 	bl	800a894 <assertFail>
  setpoint->mode.x = modeAbs; \
  setpoint->position.x = values->x / 1000.0f; \
  setpoint->velocity.x = (values->v ## x) / 1000.0f; \
  setpoint->acceleration.x = (values->a ## x) / 1000.0f; \

  UNPACK(x)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80020d0 <fullStateDecoder+0x1f0>
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3c:	eddf 6a64 	vldr	s13, [pc, #400]	; 80020d0 <fullStateDecoder+0x1f0>
 8001f40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5a:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80020d0 <fullStateDecoder+0x1f0>
 8001f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
  UNPACK(y)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	ee07 3a90 	vmov	s15, r3
 8001f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f80:	eddf 6a53 	vldr	s13, [pc, #332]	; 80020d0 <fullStateDecoder+0x1f0>
 8001f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80020d0 <fullStateDecoder+0x1f0>
 8001fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fbc:	eddf 6a44 	vldr	s13, [pc, #272]	; 80020d0 <fullStateDecoder+0x1f0>
 8001fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
  UNPACK(z)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80020d0 <fullStateDecoder+0x1f0>
 8001fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002000:	eddf 6a33 	vldr	s13, [pc, #204]	; 80020d0 <fullStateDecoder+0x1f0>
 8002004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002014:	b21b      	sxth	r3, r3
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80020d0 <fullStateDecoder+0x1f0>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
  #undef UNPACK

  float const millirad2deg = 180.0f / ((float)M_PI * 1000.0f);
 800202c:	4b29      	ldr	r3, [pc, #164]	; (80020d4 <fullStateDecoder+0x1f4>)
 800202e:	613b      	str	r3, [r7, #16]
  setpoint->attitudeRate.roll = millirad2deg * values->rateRoll;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002036:	b21b      	sxth	r3, r3
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002040:	edd7 7a04 	vldr	s15, [r7, #16]
 8002044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edc3 7a06 	vstr	s15, [r3, #24]
  setpoint->attitudeRate.pitch = millirad2deg * values->ratePitch;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002054:	b21b      	sxth	r3, r3
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800205e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	edc3 7a07 	vstr	s15, [r3, #28]
  setpoint->attitudeRate.yaw = millirad2deg * values->rateYaw;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002072:	b21b      	sxth	r3, r3
 8002074:	ee07 3a90 	vmov	s15, r3
 8002078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	edc3 7a08 	vstr	s15, [r3, #32]

  quatdecompress(values->quat, (float *)&setpoint->attitudeQuaternion.q0);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002090:	461a      	mov	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3324      	adds	r3, #36	; 0x24
 8002096:	4619      	mov	r1, r3
 8002098:	4610      	mov	r0, r2
 800209a:	f7ff fc63 	bl	8001964 <quatdecompress>
  setpoint->mode.quat = modeAbs;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  setpoint->mode.roll = modeDisable;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  setpoint->mode.pitch = modeDisable;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  setpoint->mode.yaw = modeDisable;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	080218e0 	.word	0x080218e0
 80020cc:	080219f8 	.word	0x080219f8
 80020d0:	447a0000 	.word	0x447a0000
 80020d4:	3d6aaefa 	.word	0x3d6aaefa

080020d8 <positionDecoder>:
   float y;
   float z;
   float yaw;   // Orientation in degree
 } __attribute__((packed));
static void positionDecoder(setpoint_t *setpoint, uint8_t type, const void *data, size_t datalen)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	460b      	mov	r3, r1
 80020e6:	72fb      	strb	r3, [r7, #11]
  const struct positionPacket_s *values = data;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	617b      	str	r3, [r7, #20]

  setpoint->mode.x = modeAbs;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  setpoint->mode.y = modeAbs;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  setpoint->mode.z = modeAbs;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

  setpoint->position.x = values->x;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	63d3      	str	r3, [r2, #60]	; 0x3c
  setpoint->position.y = values->y;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
  setpoint->position.z = values->z;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6453      	str	r3, [r2, #68]	; 0x44


  setpoint->mode.yaw = modeAbs;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  setpoint->attitude.yaw = values->yaw;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	6113      	str	r3, [r2, #16]
}
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <crtpCommanderGenericDecodeSetpoint>:
  [positionType]      = positionDecoder,
};

/* Decoder switch */
void crtpCommanderGenericDecodeSetpoint(setpoint_t *setpoint, CRTPPacket *pk)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  static int nTypes = -1;

  ASSERT(pk->size > 0);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <crtpCommanderGenericDecodeSetpoint+0x1e>
 800214a:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 800214e:	4917      	ldr	r1, [pc, #92]	; (80021ac <crtpCommanderGenericDecodeSetpoint+0x74>)
 8002150:	4817      	ldr	r0, [pc, #92]	; (80021b0 <crtpCommanderGenericDecodeSetpoint+0x78>)
 8002152:	f008 fb9f 	bl	800a894 <assertFail>

  if (nTypes<0) {
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	da02      	bge.n	8002164 <crtpCommanderGenericDecodeSetpoint+0x2c>
    nTypes = sizeof(packetDecoders)/sizeof(packetDecoders[0]);
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8002160:	2208      	movs	r2, #8
 8002162:	601a      	str	r2, [r3, #0]
  }

  uint8_t type = pk->data[0];
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	789b      	ldrb	r3, [r3, #2]
 8002168:	73fb      	strb	r3, [r7, #15]

  memset(setpoint, 0, sizeof(setpoint_t));
 800216a:	2270      	movs	r2, #112	; 0x70
 800216c:	2100      	movs	r1, #0
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f01a ff22 	bl	801cfb8 <memset>

  if (type<nTypes && (packetDecoders[type] != NULL)) {
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <crtpCommanderGenericDecodeSetpoint+0x7c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	da12      	bge.n	80021a4 <crtpCommanderGenericDecodeSetpoint+0x6c>
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <crtpCommanderGenericDecodeSetpoint+0x80>)
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00c      	beq.n	80021a4 <crtpCommanderGenericDecodeSetpoint+0x6c>
    packetDecoders[type](setpoint, type, ((char*)pk->data)+1, pk->size-1);
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <crtpCommanderGenericDecodeSetpoint+0x80>)
 800218e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	3302      	adds	r3, #2
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	3b01      	subs	r3, #1
 800219e:	7bf9      	ldrb	r1, [r7, #15]
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	47a0      	blx	r4
  }
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	080218e0 	.word	0x080218e0
 80021b0:	08021a24 	.word	0x08021a24
 80021b4:	20000064 	.word	0x20000064
 80021b8:	08024b90 	.word	0x08024b90

080021bc <radians>:


// ----------------------------- scalars --------------------------------

static inline float fsqr(float x) { return x * x; }
static inline float radians(float degrees) { return (M_PI_F / 180.0f) * degrees; }
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80021c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80021e0 <radians+0x24>
 80021ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	3c8efa35 	.word	0x3c8efa35

080021e4 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 80021e4:	b480      	push	{r7}
 80021e6:	b08f      	sub	sp, #60	; 0x3c
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	ed87 0a07 	vstr	s0, [r7, #28]
 80021ee:	edc7 0a06 	vstr	s1, [r7, #24]
 80021f2:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 8002202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002206:	f107 0220 	add.w	r2, r7, #32
 800220a:	ca07      	ldmia	r2, {r0, r1, r2}
 800220c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	ee06 1a90 	vmov	s13, r1
 800221a:	ee07 2a10 	vmov	s14, r2
 800221e:	ee07 3a90 	vmov	s15, r3
}
 8002222:	eeb0 0a66 	vmov.f32	s0, s13
 8002226:	eef0 0a47 	vmov.f32	s1, s14
 800222a:	eeb0 1a67 	vmov.f32	s2, s15
 800222e:	373c      	adds	r7, #60	; 0x3c
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <vrepeat>:
// construct a vector with the same value repeated for x, y, and z.
static inline struct vec vrepeat(float x) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 8002242:	ed97 1a05 	vldr	s2, [r7, #20]
 8002246:	edd7 0a05 	vldr	s1, [r7, #20]
 800224a:	ed97 0a05 	vldr	s0, [r7, #20]
 800224e:	f7ff ffc9 	bl	80021e4 <mkvec>
 8002252:	eef0 6a40 	vmov.f32	s13, s0
 8002256:	eeb0 7a60 	vmov.f32	s14, s1
 800225a:	eef0 7a41 	vmov.f32	s15, s2
 800225e:	edc7 6a07 	vstr	s13, [r7, #28]
 8002262:	ed87 7a08 	vstr	s14, [r7, #32]
 8002266:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800226a:	69f9      	ldr	r1, [r7, #28]
 800226c:	6a3a      	ldr	r2, [r7, #32]
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	ee06 1a90 	vmov	s13, r1
 8002274:	ee07 2a10 	vmov	s14, r2
 8002278:	ee07 3a90 	vmov	s15, r3
}
 800227c:	eeb0 0a66 	vmov.f32	s0, s13
 8002280:	eef0 0a47 	vmov.f32	s1, s14
 8002284:	eeb0 1a67 	vmov.f32	s2, s15
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <vzero>:
// construct a zero-vector.
static inline struct vec vzero(void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 8002296:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80022dc <vzero+0x4c>
 800229a:	f7ff ffcd 	bl	8002238 <vrepeat>
 800229e:	eef0 6a40 	vmov.f32	s13, s0
 80022a2:	eeb0 7a60 	vmov.f32	s14, s1
 80022a6:	eef0 7a41 	vmov.f32	s15, s2
 80022aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80022ae:	ed87 7a06 	vstr	s14, [r7, #24]
 80022b2:	edc7 7a07 	vstr	s15, [r7, #28]
 80022b6:	6979      	ldr	r1, [r7, #20]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	ee06 1a90 	vmov	s13, r1
 80022c0:	ee07 2a10 	vmov	s14, r2
 80022c4:	ee07 3a90 	vmov	s15, r3
}
 80022c8:	eeb0 0a66 	vmov.f32	s0, s13
 80022cc:	eef0 0a47 	vmov.f32	s1, s14
 80022d0:	eeb0 1a67 	vmov.f32	s2, s15
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	00000000 	.word	0x00000000

080022e0 <handleMemGetSize>:
// safe default settings for takeoff and landing velocity
static float defaultTakeoffVelocity = 0.5f;
static float defaultLandingVelocity = 0.5f;

// Trajectory memory handling from the memory module
static uint32_t handleMemGetSize(void) { return crtpCommanderHighLevelTrajectoryMemSize(); }
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	f000 ff37 	bl	8003156 <crtpCommanderHighLevelTrajectoryMemSize>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}

080022ee <state2vec>:
static int start_trajectory(const struct data_start_trajectory* data);
static int define_trajectory(const struct data_define_trajectory* data);

// Helper functions
static struct vec state2vec(struct vec3_s v)
{
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b08d      	sub	sp, #52	; 0x34
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	f107 0410 	add.w	r4, r7, #16
 80022f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  return mkvec(v.x, v.y, v.z);
 80022fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002300:	ed97 7a06 	vldr	s14, [r7, #24]
 8002304:	edd7 6a07 	vldr	s13, [r7, #28]
 8002308:	eeb0 1a66 	vmov.f32	s2, s13
 800230c:	eef0 0a47 	vmov.f32	s1, s14
 8002310:	eeb0 0a67 	vmov.f32	s0, s15
 8002314:	f7ff ff66 	bl	80021e4 <mkvec>
 8002318:	eef0 6a40 	vmov.f32	s13, s0
 800231c:	eeb0 7a60 	vmov.f32	s14, s1
 8002320:	eef0 7a41 	vmov.f32	s15, s2
 8002324:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8002328:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800232c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8002330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	ee06 1a90 	vmov	s13, r1
 800233a:	ee07 2a10 	vmov	s14, r2
 800233e:	ee07 3a90 	vmov	s15, r3
}
 8002342:	eeb0 0a66 	vmov.f32	s0, s13
 8002346:	eef0 0a47 	vmov.f32	s1, s14
 800234a:	eeb0 1a67 	vmov.f32	s2, s15
 800234e:	3734      	adds	r7, #52	; 0x34
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}

08002354 <isInGroup>:

bool isInGroup(uint8_t g) {
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  return g == ALL_GROUPS || (g & group_mask) != 0;
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <isInGroup+0x1e>
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <isInGroup+0x38>)
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4013      	ands	r3, r2
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <isInGroup+0x22>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <isInGroup+0x24>
 8002376:	2300      	movs	r3, #0
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	b2db      	uxtb	r3, r3
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20006368 	.word	0x20006368

08002390 <crtpCommanderHighLevelInit>:

void crtpCommanderHighLevelInit(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af04      	add	r7, sp, #16
  if (isInit) {
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <crtpCommanderHighLevelInit+0x9c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d143      	bne.n	8002426 <crtpCommanderHighLevelInit+0x96>
    return;
  }

  memoryRegisterHandler(&memDef);
 800239e:	4824      	ldr	r0, [pc, #144]	; (8002430 <crtpCommanderHighLevelInit+0xa0>)
 80023a0:	f002 ff6c 	bl	800527c <memoryRegisterHandler>
  plan_init(&planner);
 80023a4:	4823      	ldr	r0, [pc, #140]	; (8002434 <crtpCommanderHighLevelInit+0xa4>)
 80023a6:	f004 fd89 	bl	8006ebc <plan_init>

  //Start the trajectory task
  STATIC_MEM_TASK_CREATE(crtpCommanderHighLevelTask, crtpCommanderHighLevelTask, CMD_HIGH_LEVEL_TASK_NAME, NULL, CMD_HIGH_LEVEL_TASK_PRI);
 80023aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <crtpCommanderHighLevelInit+0xa8>)
 80023b2:	9302      	str	r3, [sp, #8]
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <crtpCommanderHighLevelInit+0xac>)
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2302      	movs	r3, #2
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	4920      	ldr	r1, [pc, #128]	; (8002440 <crtpCommanderHighLevelInit+0xb0>)
 80023c0:	4820      	ldr	r0, [pc, #128]	; (8002444 <crtpCommanderHighLevelInit+0xb4>)
 80023c2:	f016 ff13 	bl	80191ec <xTaskCreateStatic>

  lockTraj = xSemaphoreCreateMutexStatic(&lockTrajBuffer);
 80023c6:	4920      	ldr	r1, [pc, #128]	; (8002448 <crtpCommanderHighLevelInit+0xb8>)
 80023c8:	2001      	movs	r0, #1
 80023ca:	f016 f8fa 	bl	80185c2 <xQueueCreateMutexStatic>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4a1e      	ldr	r2, [pc, #120]	; (800244c <crtpCommanderHighLevelInit+0xbc>)
 80023d2:	6013      	str	r3, [r2, #0]

  pos = vzero();
 80023d4:	f7ff ff5c 	bl	8002290 <vzero>
 80023d8:	eef0 6a40 	vmov.f32	s13, s0
 80023dc:	eeb0 7a60 	vmov.f32	s14, s1
 80023e0:	eef0 7a41 	vmov.f32	s15, s2
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <crtpCommanderHighLevelInit+0xc0>)
 80023e6:	edc3 6a00 	vstr	s13, [r3]
 80023ea:	ed83 7a01 	vstr	s14, [r3, #4]
 80023ee:	edc3 7a02 	vstr	s15, [r3, #8]
  vel = vzero();
 80023f2:	f7ff ff4d 	bl	8002290 <vzero>
 80023f6:	eef0 6a40 	vmov.f32	s13, s0
 80023fa:	eeb0 7a60 	vmov.f32	s14, s1
 80023fe:	eef0 7a41 	vmov.f32	s15, s2
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <crtpCommanderHighLevelInit+0xc4>)
 8002404:	edc3 6a00 	vstr	s13, [r3]
 8002408:	ed83 7a01 	vstr	s14, [r3, #4]
 800240c:	edc3 7a02 	vstr	s15, [r3, #8]
  yaw = 0;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <crtpCommanderHighLevelInit+0xc8>)
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

  isBlocked = false;
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <crtpCommanderHighLevelInit+0xcc>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]

  isInit = true;
 800241e:	4b03      	ldr	r3, [pc, #12]	; (800242c <crtpCommanderHighLevelInit+0x9c>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e000      	b.n	8002428 <crtpCommanderHighLevelInit+0x98>
    return;
 8002426:	bf00      	nop
}
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	200062be 	.word	0x200062be
 8002430:	08024bb0 	.word	0x08024bb0
 8002434:	200062c0 	.word	0x200062c0
 8002438:	20001734 	.word	0x20001734
 800243c:	200064a0 	.word	0x200064a0
 8002440:	08021a7c 	.word	0x08021a7c
 8002444:	080025c5 	.word	0x080025c5
 8002448:	20006450 	.word	0x20006450
 800244c:	2000644c 	.word	0x2000644c
 8002450:	2000636c 	.word	0x2000636c
 8002454:	20006378 	.word	0x20006378
 8002458:	20006384 	.word	0x20006384
 800245c:	20006369 	.word	0x20006369

08002460 <crtpCommanderHighLevelTellState>:
{
  return plan_is_stopped(&planner);
}

void crtpCommanderHighLevelTellState(const state_t *state)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002468:	4b20      	ldr	r3, [pc, #128]	; (80024ec <crtpCommanderHighLevelTellState+0x8c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002470:	4618      	mov	r0, r3
 8002472:	f016 fb43 	bl	8018afc <xQueueSemaphoreTake>
  pos = state2vec(state->position);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3320      	adds	r3, #32
 800247a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800247c:	f7ff ff37 	bl	80022ee <state2vec>
 8002480:	eef0 6a40 	vmov.f32	s13, s0
 8002484:	eeb0 7a60 	vmov.f32	s14, s1
 8002488:	eef0 7a41 	vmov.f32	s15, s2
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <crtpCommanderHighLevelTellState+0x90>)
 800248e:	edc3 6a00 	vstr	s13, [r3]
 8002492:	ed83 7a01 	vstr	s14, [r3, #4]
 8002496:	edc3 7a02 	vstr	s15, [r3, #8]
  vel = state2vec(state->velocity);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3330      	adds	r3, #48	; 0x30
 800249e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024a0:	f7ff ff25 	bl	80022ee <state2vec>
 80024a4:	eef0 6a40 	vmov.f32	s13, s0
 80024a8:	eeb0 7a60 	vmov.f32	s14, s1
 80024ac:	eef0 7a41 	vmov.f32	s15, s2
 80024b0:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <crtpCommanderHighLevelTellState+0x94>)
 80024b2:	edc3 6a00 	vstr	s13, [r3]
 80024b6:	ed83 7a01 	vstr	s14, [r3, #4]
 80024ba:	edc3 7a02 	vstr	s15, [r3, #8]
  yaw = radians(state->attitude.yaw);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80024c4:	eeb0 0a67 	vmov.f32	s0, s15
 80024c8:	f7ff fe78 	bl	80021bc <radians>
 80024cc:	eef0 7a40 	vmov.f32	s15, s0
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <crtpCommanderHighLevelTellState+0x98>)
 80024d2:	edc3 7a00 	vstr	s15, [r3]
  xSemaphoreGive(lockTraj);
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <crtpCommanderHighLevelTellState+0x8c>)
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	2300      	movs	r3, #0
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	f016 f88a 	bl	80185f8 <xQueueGenericSend>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000644c 	.word	0x2000644c
 80024f0:	2000636c 	.word	0x2000636c
 80024f4:	20006378 	.word	0x20006378
 80024f8:	20006384 	.word	0x20006384

080024fc <handleCommand>:
    return false;
  }
}

static int handleCommand(const enum TrajectoryCommand_e command, const uint8_t* data)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]

  switch(command)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b0a      	cmp	r3, #10
 8002510:	d84f      	bhi.n	80025b2 <handleCommand+0xb6>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <handleCommand+0x1c>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002545 	.word	0x08002545
 800251c:	0800254f 	.word	0x0800254f
 8002520:	08002559 	.word	0x08002559
 8002524:	0800258b 	.word	0x0800258b
 8002528:	08002595 	.word	0x08002595
 800252c:	0800259f 	.word	0x0800259f
 8002530:	080025a9 	.word	0x080025a9
 8002534:	08002563 	.word	0x08002563
 8002538:	0800256d 	.word	0x0800256d
 800253c:	08002577 	.word	0x08002577
 8002540:	08002581 	.word	0x08002581
  {
    case COMMAND_SET_GROUP_MASK:
      ret = set_group_mask((const struct data_set_group_mask*)data);
 8002544:	6838      	ldr	r0, [r7, #0]
 8002546:	f000 f85f 	bl	8002608 <set_group_mask>
 800254a:	60f8      	str	r0, [r7, #12]
      break;
 800254c:	e034      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_TAKEOFF:
      ret = takeoff((const struct data_takeoff*)data);
 800254e:	6838      	ldr	r0, [r7, #0]
 8002550:	f000 f86e 	bl	8002630 <takeoff>
 8002554:	60f8      	str	r0, [r7, #12]
      break;
 8002556:	e02f      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_LAND:
      ret = land((const struct data_land*)data);
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f000 fa05 	bl	8002968 <land>
 800255e:	60f8      	str	r0, [r7, #12]
      break;
 8002560:	e02a      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_TAKEOFF_2:
      ret = takeoff2((const struct data_takeoff_2*)data);
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	f000 f8d8 	bl	8002718 <takeoff2>
 8002568:	60f8      	str	r0, [r7, #12]
      break;
 800256a:	e025      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_LAND_2:
      ret = land2((const struct data_land_2*)data);
 800256c:	6838      	ldr	r0, [r7, #0]
 800256e:	f000 fa6f 	bl	8002a50 <land2>
 8002572:	60f8      	str	r0, [r7, #12]
      break;
 8002574:	e020      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_TAKEOFF_WITH_VELOCITY:
      ret = takeoff_with_velocity((const struct data_takeoff_with_velocity*)data);
 8002576:	6838      	ldr	r0, [r7, #0]
 8002578:	f000 f94e 	bl	8002818 <takeoff_with_velocity>
 800257c:	60f8      	str	r0, [r7, #12]
      break;
 800257e:	e01b      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_LAND_WITH_VELOCITY:
      ret = land_with_velocity((const struct data_land_with_velocity*)data);
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f000 fae5 	bl	8002b50 <land_with_velocity>
 8002586:	60f8      	str	r0, [r7, #12]
      break;
 8002588:	e016      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_STOP:
      ret = stop((const struct data_stop*)data);
 800258a:	6838      	ldr	r0, [r7, #0]
 800258c:	f000 fb88 	bl	8002ca0 <stop>
 8002590:	60f8      	str	r0, [r7, #12]
      break;
 8002592:	e011      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_GO_TO:
      ret = go_to((const struct data_go_to*)data);
 8002594:	6838      	ldr	r0, [r7, #0]
 8002596:	f000 fbab 	bl	8002cf0 <go_to>
 800259a:	60f8      	str	r0, [r7, #12]
      break;
 800259c:	e00c      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_START_TRAJECTORY:
      ret = start_trajectory((const struct data_start_trajectory*)data);
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	f000 fc82 	bl	8002ea8 <start_trajectory>
 80025a4:	60f8      	str	r0, [r7, #12]
      break;
 80025a6:	e007      	b.n	80025b8 <handleCommand+0xbc>
    case COMMAND_DEFINE_TRAJECTORY:
      ret = define_trajectory((const struct data_define_trajectory*)data);
 80025a8:	6838      	ldr	r0, [r7, #0]
 80025aa:	f000 fd7d 	bl	80030a8 <define_trajectory>
 80025ae:	60f8      	str	r0, [r7, #12]
      break;
 80025b0:	e002      	b.n	80025b8 <handleCommand+0xbc>
    default:
      ret = ENOEXEC;
 80025b2:	2308      	movs	r3, #8
 80025b4:	60fb      	str	r3, [r7, #12]
      break;
 80025b6:	bf00      	nop
  }

  return ret;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop

080025c4 <crtpCommanderHighLevelTask>:

void crtpCommanderHighLevelTask(void * prm)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  CRTPPacket p;
  crtpInitTaskQueue(CRTP_PORT_SETPOINT_HL);
 80025cc:	2008      	movs	r0, #8
 80025ce:	f7fe ff33 	bl	8001438 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_SETPOINT_HL, &p);
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4619      	mov	r1, r3
 80025d8:	2008      	movs	r0, #8
 80025da:	f7fe ff5d 	bl	8001498 <crtpReceivePacketBlock>

    int ret = handleCommand(p.data[0], &p.data[1]);
 80025de:	7bba      	ldrb	r2, [r7, #14]
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	3303      	adds	r3, #3
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7ff ff87 	bl	80024fc <handleCommand>
 80025ee:	62f8      	str	r0, [r7, #44]	; 0x2c

    //answer
    p.data[3] = ret;
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	747b      	strb	r3, [r7, #17]
    p.size = 4;
 80025f6:	2304      	movs	r3, #4
 80025f8:	733b      	strb	r3, [r7, #12]
    crtpSendPacketBlock(&p);
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f84a 	bl	8001698 <crtpSendPacketBlock>
  while(1) {
 8002604:	e7e5      	b.n	80025d2 <crtpCommanderHighLevelTask+0xe>
	...

08002608 <set_group_mask>:
  }
}

int set_group_mask(const struct data_set_group_mask* data)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  group_mask = data->groupMask;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	781a      	ldrb	r2, [r3, #0]
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <set_group_mask+0x20>)
 8002616:	701a      	strb	r2, [r3, #0]

  return 0;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20006368 	.word	0x20006368
 800262c:	00000000 	.word	0x00000000

08002630 <takeoff>:

// Deprecated (removed after August 2023)
int takeoff(const struct data_takeoff* data)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002638:	4b31      	ldr	r3, [pc, #196]	; (8002700 <takeoff+0xd0>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <takeoff+0x14>
    return EBUSY;
 8002640:	2310      	movs	r3, #16
 8002642:	e055      	b.n	80026f0 <takeoff+0xc0>
  }

  int result = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fe81 	bl	8002354 <isInGroup>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d04a      	beq.n	80026ee <takeoff+0xbe>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <takeoff+0xd4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002660:	4618      	mov	r0, r3
 8002662:	f016 fa4b 	bl	8018afc <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002666:	f00b fad5 	bl	800dc14 <usecTimestamp>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f7fd ff9b 	bl	80005ac <__aeabi_ul2d>
 8002676:	a320      	add	r3, pc, #128	; (adr r3, 80026f8 <takeoff+0xc8>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fe f8f6 	bl	800086c <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7fe fa9e 	bl	8000bc8 <__aeabi_d2f>
 800268c:	4603      	mov	r3, r0
 800268e:	60bb      	str	r3, [r7, #8]
    result = plan_takeoff(&planner, pos, yaw, data->height, 0.0f, data->duration, t);
 8002690:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <takeoff+0xd8>)
 8002692:	ed93 6a00 	vldr	s12, [r3]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800269c:	4613      	mov	r3, r2
 800269e:	461a      	mov	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 1005 	ldr.w	r1, [r3, #5]
 80026a6:	460b      	mov	r3, r1
 80026a8:	4619      	mov	r1, r3
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <takeoff+0xdc>)
 80026ac:	edd3 6a00 	vldr	s13, [r3]
 80026b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80026b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026b8:	edd7 3a02 	vldr	s7, [r7, #8]
 80026bc:	ee03 1a10 	vmov	s6, r1
 80026c0:	eddf 2a13 	vldr	s5, [pc, #76]	; 8002710 <takeoff+0xe0>
 80026c4:	ee02 2a10 	vmov	s4, r2
 80026c8:	eef0 1a46 	vmov.f32	s3, s12
 80026cc:	eeb0 0a66 	vmov.f32	s0, s13
 80026d0:	eef0 0a47 	vmov.f32	s1, s14
 80026d4:	eeb0 1a67 	vmov.f32	s2, s15
 80026d8:	480e      	ldr	r0, [pc, #56]	; (8002714 <takeoff+0xe4>)
 80026da:	f004 fcc9 	bl	8007070 <plan_takeoff>
 80026de:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(lockTraj);
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <takeoff+0xd4>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	2300      	movs	r3, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	f015 ff85 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	00000000 	.word	0x00000000
 80026fc:	412e8480 	.word	0x412e8480
 8002700:	20006369 	.word	0x20006369
 8002704:	2000644c 	.word	0x2000644c
 8002708:	20006384 	.word	0x20006384
 800270c:	2000636c 	.word	0x2000636c
 8002710:	00000000 	.word	0x00000000
 8002714:	200062c0 	.word	0x200062c0

08002718 <takeoff2>:

int takeoff2(const struct data_takeoff_2* data)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002720:	4b37      	ldr	r3, [pc, #220]	; (8002800 <takeoff2+0xe8>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <takeoff2+0x14>
    return EBUSY;
 8002728:	2310      	movs	r3, #16
 800272a:	e060      	b.n	80027ee <takeoff2+0xd6>
  }

  int result = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fe0d 	bl	8002354 <isInGroup>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d055      	beq.n	80027ec <takeoff2+0xd4>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <takeoff2+0xec>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002748:	4618      	mov	r0, r3
 800274a:	f016 f9d7 	bl	8018afc <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800274e:	f00b fa61 	bl	800dc14 <usecTimestamp>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f7fd ff27 	bl	80005ac <__aeabi_ul2d>
 800275e:	a326      	add	r3, pc, #152	; (adr r3, 80027f8 <takeoff2+0xe0>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f7fe f882 	bl	800086c <__aeabi_ddiv>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe fa2a 	bl	8000bc8 <__aeabi_d2f>
 8002774:	4603      	mov	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]

    float hover_yaw = data->yaw;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800277e:	613b      	str	r3, [r7, #16]
    if (data->useCurrentYaw) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7a5b      	ldrb	r3, [r3, #9]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <takeoff2+0x76>
      hover_yaw = yaw;
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <takeoff2+0xf0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	613b      	str	r3, [r7, #16]
    }

    result = plan_takeoff(&planner, pos, yaw, data->height, hover_yaw, data->duration, t);
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <takeoff2+0xf0>)
 8002790:	ed93 6a00 	vldr	s12, [r3]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800279a:	4613      	mov	r3, r2
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 100a 	ldr.w	r1, [r3, #10]
 80027a4:	460b      	mov	r3, r1
 80027a6:	4619      	mov	r1, r3
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <takeoff2+0xf4>)
 80027aa:	edd3 6a00 	vldr	s13, [r3]
 80027ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80027b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80027b6:	edd7 3a03 	vldr	s7, [r7, #12]
 80027ba:	ee03 1a10 	vmov	s6, r1
 80027be:	edd7 2a04 	vldr	s5, [r7, #16]
 80027c2:	ee02 2a10 	vmov	s4, r2
 80027c6:	eef0 1a46 	vmov.f32	s3, s12
 80027ca:	eeb0 0a66 	vmov.f32	s0, s13
 80027ce:	eef0 0a47 	vmov.f32	s1, s14
 80027d2:	eeb0 1a67 	vmov.f32	s2, s15
 80027d6:	480e      	ldr	r0, [pc, #56]	; (8002810 <takeoff2+0xf8>)
 80027d8:	f004 fc4a 	bl	8007070 <plan_takeoff>
 80027dc:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(lockTraj);
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <takeoff2+0xec>)
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	f015 ff06 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 80027ec:	697b      	ldr	r3, [r7, #20]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00000000 	.word	0x00000000
 80027fc:	412e8480 	.word	0x412e8480
 8002800:	20006369 	.word	0x20006369
 8002804:	2000644c 	.word	0x2000644c
 8002808:	20006384 	.word	0x20006384
 800280c:	2000636c 	.word	0x2000636c
 8002810:	200062c0 	.word	0x200062c0
 8002814:	00000000 	.word	0x00000000

08002818 <takeoff_with_velocity>:

int takeoff_with_velocity(const struct data_takeoff_with_velocity* data)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002820:	4b4b      	ldr	r3, [pc, #300]	; (8002950 <takeoff_with_velocity+0x138>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <takeoff_with_velocity+0x14>
    return EBUSY;
 8002828:	2310      	movs	r3, #16
 800282a:	e087      	b.n	800293c <takeoff_with_velocity+0x124>
  }

  int result = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fd8d 	bl	8002354 <isInGroup>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d07c      	beq.n	800293a <takeoff_with_velocity+0x122>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002840:	4b44      	ldr	r3, [pc, #272]	; (8002954 <takeoff_with_velocity+0x13c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002848:	4618      	mov	r0, r3
 800284a:	f016 f957 	bl	8018afc <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800284e:	f00b f9e1 	bl	800dc14 <usecTimestamp>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f7fd fea7 	bl	80005ac <__aeabi_ul2d>
 800285e:	a33a      	add	r3, pc, #232	; (adr r3, 8002948 <takeoff_with_velocity+0x130>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fe f802 	bl	800086c <__aeabi_ddiv>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f9aa 	bl	8000bc8 <__aeabi_d2f>
 8002874:	4603      	mov	r3, r0
 8002876:	613b      	str	r3, [r7, #16]

    float hover_yaw = data->yaw;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800287e:	61bb      	str	r3, [r7, #24]
    if (data->useCurrentYaw) {
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7a9b      	ldrb	r3, [r3, #10]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <takeoff_with_velocity+0x76>
      hover_yaw = yaw;
 8002888:	4b33      	ldr	r3, [pc, #204]	; (8002958 <takeoff_with_velocity+0x140>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
    }

    float height = data->height;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002894:	617b      	str	r3, [r7, #20]
    if (data->heightIsRelative) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	795b      	ldrb	r3, [r3, #5]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <takeoff_with_velocity+0x98>
      height += pos.z;
 800289e:	4b2f      	ldr	r3, [pc, #188]	; (800295c <takeoff_with_velocity+0x144>)
 80028a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80028a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80028a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ac:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    float velocity = data->velocity > 0 ? data->velocity : defaultTakeoffVelocity;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c2:	dd03      	ble.n	80028cc <takeoff_with_velocity+0xb4>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80028ca:	e001      	b.n	80028d0 <takeoff_with_velocity+0xb8>
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <takeoff_with_velocity+0x148>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
    float duration = fabsf(height - pos.z) / velocity;
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <takeoff_with_velocity+0x144>)
 80028d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80028d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80028dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e0:	eef0 6ae7 	vabs.f32	s13, s15
 80028e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80028e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ec:	edc7 7a02 	vstr	s15, [r7, #8]
    result = plan_takeoff(&planner, pos, yaw, height, hover_yaw, duration, t);
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <takeoff_with_velocity+0x140>)
 80028f2:	ed93 6a00 	vldr	s12, [r3]
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <takeoff_with_velocity+0x144>)
 80028f8:	edd3 6a00 	vldr	s13, [r3]
 80028fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002900:	edd3 7a02 	vldr	s15, [r3, #8]
 8002904:	edd7 3a04 	vldr	s7, [r7, #16]
 8002908:	ed97 3a02 	vldr	s6, [r7, #8]
 800290c:	edd7 2a06 	vldr	s5, [r7, #24]
 8002910:	ed97 2a05 	vldr	s4, [r7, #20]
 8002914:	eef0 1a46 	vmov.f32	s3, s12
 8002918:	eeb0 0a66 	vmov.f32	s0, s13
 800291c:	eef0 0a47 	vmov.f32	s1, s14
 8002920:	eeb0 1a67 	vmov.f32	s2, s15
 8002924:	480f      	ldr	r0, [pc, #60]	; (8002964 <takeoff_with_velocity+0x14c>)
 8002926:	f004 fba3 	bl	8007070 <plan_takeoff>
 800292a:	61f8      	str	r0, [r7, #28]
    xSemaphoreGive(lockTraj);
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <takeoff_with_velocity+0x13c>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	2300      	movs	r3, #0
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	f015 fe5f 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 800293a:	69fb      	ldr	r3, [r7, #28]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	f3af 8000 	nop.w
 8002948:	00000000 	.word	0x00000000
 800294c:	412e8480 	.word	0x412e8480
 8002950:	20006369 	.word	0x20006369
 8002954:	2000644c 	.word	0x2000644c
 8002958:	20006384 	.word	0x20006384
 800295c:	2000636c 	.word	0x2000636c
 8002960:	20000068 	.word	0x20000068
 8002964:	200062c0 	.word	0x200062c0

08002968 <land>:

// Deprecated (removed after August 2023)
int land(const struct data_land* data)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <land+0xd0>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <land+0x14>
    return EBUSY;
 8002978:	2310      	movs	r3, #16
 800297a:	e055      	b.n	8002a28 <land+0xc0>
  }

  int result = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fce5 	bl	8002354 <isInGroup>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d04a      	beq.n	8002a26 <land+0xbe>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <land+0xd4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002998:	4618      	mov	r0, r3
 800299a:	f016 f8af 	bl	8018afc <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 800299e:	f00b f939 	bl	800dc14 <usecTimestamp>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7fd fdff 	bl	80005ac <__aeabi_ul2d>
 80029ae:	a320      	add	r3, pc, #128	; (adr r3, 8002a30 <land+0xc8>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd ff5a 	bl	800086c <__aeabi_ddiv>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f902 	bl	8000bc8 <__aeabi_d2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60bb      	str	r3, [r7, #8]
    result = plan_land(&planner, pos, yaw, data->height, 0.0f, data->duration, t);
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <land+0xd8>)
 80029ca:	ed93 6a00 	vldr	s12, [r3]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80029d4:	4613      	mov	r3, r2
 80029d6:	461a      	mov	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 1005 	ldr.w	r1, [r3, #5]
 80029de:	460b      	mov	r3, r1
 80029e0:	4619      	mov	r1, r3
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <land+0xdc>)
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80029ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80029f0:	edd7 3a02 	vldr	s7, [r7, #8]
 80029f4:	ee03 1a10 	vmov	s6, r1
 80029f8:	eddf 2a13 	vldr	s5, [pc, #76]	; 8002a48 <land+0xe0>
 80029fc:	ee02 2a10 	vmov	s4, r2
 8002a00:	eef0 1a46 	vmov.f32	s3, s12
 8002a04:	eeb0 0a66 	vmov.f32	s0, s13
 8002a08:	eef0 0a47 	vmov.f32	s1, s14
 8002a0c:	eeb0 1a67 	vmov.f32	s2, s15
 8002a10:	480e      	ldr	r0, [pc, #56]	; (8002a4c <land+0xe4>)
 8002a12:	f004 fb7a 	bl	800710a <plan_land>
 8002a16:	60f8      	str	r0, [r7, #12]
    xSemaphoreGive(lockTraj);
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <land+0xd4>)
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	f015 fde9 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	00000000 	.word	0x00000000
 8002a34:	412e8480 	.word	0x412e8480
 8002a38:	20006369 	.word	0x20006369
 8002a3c:	2000644c 	.word	0x2000644c
 8002a40:	20006384 	.word	0x20006384
 8002a44:	2000636c 	.word	0x2000636c
 8002a48:	00000000 	.word	0x00000000
 8002a4c:	200062c0 	.word	0x200062c0

08002a50 <land2>:

int land2(const struct data_land_2* data)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002a58:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <land2+0xe8>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <land2+0x14>
    return EBUSY;
 8002a60:	2310      	movs	r3, #16
 8002a62:	e060      	b.n	8002b26 <land2+0xd6>
  }

  int result = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fc71 	bl	8002354 <isInGroup>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d055      	beq.n	8002b24 <land2+0xd4>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <land2+0xec>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a80:	4618      	mov	r0, r3
 8002a82:	f016 f83b 	bl	8018afc <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002a86:	f00b f8c5 	bl	800dc14 <usecTimestamp>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fd fd8b 	bl	80005ac <__aeabi_ul2d>
 8002a96:	a326      	add	r3, pc, #152	; (adr r3, 8002b30 <land2+0xe0>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd fee6 	bl	800086c <__aeabi_ddiv>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f7fe f88e 	bl	8000bc8 <__aeabi_d2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]

    float hover_yaw = data->yaw;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8002ab6:	613b      	str	r3, [r7, #16]
    if (data->useCurrentYaw) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7a5b      	ldrb	r3, [r3, #9]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <land2+0x76>
      hover_yaw = yaw;
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <land2+0xf0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	613b      	str	r3, [r7, #16]
    }

    result = plan_land(&planner, pos, yaw, data->height, hover_yaw, data->duration, t);
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <land2+0xf0>)
 8002ac8:	ed93 6a00 	vldr	s12, [r3]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 100a 	ldr.w	r1, [r3, #10]
 8002adc:	460b      	mov	r3, r1
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <land2+0xf4>)
 8002ae2:	edd3 6a00 	vldr	s13, [r3]
 8002ae6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002aea:	edd3 7a02 	vldr	s15, [r3, #8]
 8002aee:	edd7 3a03 	vldr	s7, [r7, #12]
 8002af2:	ee03 1a10 	vmov	s6, r1
 8002af6:	edd7 2a04 	vldr	s5, [r7, #16]
 8002afa:	ee02 2a10 	vmov	s4, r2
 8002afe:	eef0 1a46 	vmov.f32	s3, s12
 8002b02:	eeb0 0a66 	vmov.f32	s0, s13
 8002b06:	eef0 0a47 	vmov.f32	s1, s14
 8002b0a:	eeb0 1a67 	vmov.f32	s2, s15
 8002b0e:	480e      	ldr	r0, [pc, #56]	; (8002b48 <land2+0xf8>)
 8002b10:	f004 fafb 	bl	800710a <plan_land>
 8002b14:	6178      	str	r0, [r7, #20]
    xSemaphoreGive(lockTraj);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <land2+0xec>)
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f015 fd6a 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 8002b24:	697b      	ldr	r3, [r7, #20]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	00000000 	.word	0x00000000
 8002b34:	412e8480 	.word	0x412e8480
 8002b38:	20006369 	.word	0x20006369
 8002b3c:	2000644c 	.word	0x2000644c
 8002b40:	20006384 	.word	0x20006384
 8002b44:	2000636c 	.word	0x2000636c
 8002b48:	200062c0 	.word	0x200062c0
 8002b4c:	00000000 	.word	0x00000000

08002b50 <land_with_velocity>:

int land_with_velocity(const struct data_land_with_velocity* data)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002b58:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <land_with_velocity+0x138>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <land_with_velocity+0x14>
    return EBUSY;
 8002b60:	2310      	movs	r3, #16
 8002b62:	e087      	b.n	8002c74 <land_with_velocity+0x124>
  }

  int result = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fbf1 	bl	8002354 <isInGroup>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d07c      	beq.n	8002c72 <land_with_velocity+0x122>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002b78:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <land_with_velocity+0x13c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b80:	4618      	mov	r0, r3
 8002b82:	f015 ffbb 	bl	8018afc <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002b86:	f00b f845 	bl	800dc14 <usecTimestamp>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fd fd0b 	bl	80005ac <__aeabi_ul2d>
 8002b96:	a33a      	add	r3, pc, #232	; (adr r3, 8002c80 <land_with_velocity+0x130>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fe66 	bl	800086c <__aeabi_ddiv>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7fe f80e 	bl	8000bc8 <__aeabi_d2f>
 8002bac:	4603      	mov	r3, r0
 8002bae:	613b      	str	r3, [r7, #16]

    float hover_yaw = data->yaw;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8002bb6:	61bb      	str	r3, [r7, #24]
    if (data->useCurrentYaw) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7a9b      	ldrb	r3, [r3, #10]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <land_with_velocity+0x76>
      hover_yaw = yaw;
 8002bc0:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <land_with_velocity+0x140>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	61bb      	str	r3, [r7, #24]
    }

    float height = data->height;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8002bcc:	617b      	str	r3, [r7, #20]
    if (data->heightIsRelative) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	795b      	ldrb	r3, [r3, #5]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <land_with_velocity+0x98>
      height = pos.z - height;
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <land_with_velocity+0x144>)
 8002bd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    float velocity = data->velocity > 0 ? data->velocity : defaultLandingVelocity;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfa:	dd03      	ble.n	8002c04 <land_with_velocity+0xb4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002c02:	e001      	b.n	8002c08 <land_with_velocity+0xb8>
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <land_with_velocity+0x148>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
    float duration = fabsf(height - pos.z) / velocity;
 8002c0a:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <land_with_velocity+0x144>)
 8002c0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c10:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c18:	eef0 6ae7 	vabs.f32	s13, s15
 8002c1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c24:	edc7 7a02 	vstr	s15, [r7, #8]
    result = plan_land(&planner, pos, yaw, height, hover_yaw, duration, t);
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <land_with_velocity+0x140>)
 8002c2a:	ed93 6a00 	vldr	s12, [r3]
 8002c2e:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <land_with_velocity+0x144>)
 8002c30:	edd3 6a00 	vldr	s13, [r3]
 8002c34:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c38:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c3c:	edd7 3a04 	vldr	s7, [r7, #16]
 8002c40:	ed97 3a02 	vldr	s6, [r7, #8]
 8002c44:	edd7 2a06 	vldr	s5, [r7, #24]
 8002c48:	ed97 2a05 	vldr	s4, [r7, #20]
 8002c4c:	eef0 1a46 	vmov.f32	s3, s12
 8002c50:	eeb0 0a66 	vmov.f32	s0, s13
 8002c54:	eef0 0a47 	vmov.f32	s1, s14
 8002c58:	eeb0 1a67 	vmov.f32	s2, s15
 8002c5c:	480f      	ldr	r0, [pc, #60]	; (8002c9c <land_with_velocity+0x14c>)
 8002c5e:	f004 fa54 	bl	800710a <plan_land>
 8002c62:	61f8      	str	r0, [r7, #28]
    xSemaphoreGive(lockTraj);
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <land_with_velocity+0x13c>)
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	f015 fcc3 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 8002c72:	69fb      	ldr	r3, [r7, #28]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	f3af 8000 	nop.w
 8002c80:	00000000 	.word	0x00000000
 8002c84:	412e8480 	.word	0x412e8480
 8002c88:	20006369 	.word	0x20006369
 8002c8c:	2000644c 	.word	0x2000644c
 8002c90:	20006384 	.word	0x20006384
 8002c94:	2000636c 	.word	0x2000636c
 8002c98:	2000006c 	.word	0x2000006c
 8002c9c:	200062c0 	.word	0x200062c0

08002ca0 <stop>:

int stop(const struct data_stop* data)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  int result = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  if (isInGroup(data->groupMask)) {
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fb4f 	bl	8002354 <isInGroup>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <stop+0x3e>
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <stop+0x48>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f015 ff19 	bl	8018afc <xQueueSemaphoreTake>
    plan_stop(&planner);
 8002cca:	4808      	ldr	r0, [pc, #32]	; (8002cec <stop+0x4c>)
 8002ccc:	f004 f914 	bl	8006ef8 <plan_stop>
    xSemaphoreGive(lockTraj);
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <stop+0x48>)
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f015 fc8d 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 8002cde:	68fb      	ldr	r3, [r7, #12]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	2000644c 	.word	0x2000644c
 8002cec:	200062c0 	.word	0x200062c0

08002cf0 <go_to>:

int go_to(const struct data_go_to* data)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
    // pos, vel, yaw will be filled before using
    .acc = {0.0f, 0.0f, 0.0f},
    .omega = {0.0f, 0.0f, 0.0f},
  };

  if (isBlocked) {
 8002cf8:	4b63      	ldr	r3, [pc, #396]	; (8002e88 <go_to+0x198>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <go_to+0x14>
    return EBUSY;
 8002d00:	2310      	movs	r3, #16
 8002d02:	e0b7      	b.n	8002e74 <go_to+0x184>
  }

  int result = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
  if (isInGroup(data->groupMask)) {
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fb21 	bl	8002354 <isInGroup>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80ac 	beq.w	8002e72 <go_to+0x182>
    struct vec hover_pos = mkvec(data->x, data->y, data->z);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 2002 	ldr.w	r2, [r3, #2]
 8002d20:	4613      	mov	r3, r2
 8002d22:	461a      	mov	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002d34:	ee01 3a10 	vmov	s2, r3
 8002d38:	ee00 1a90 	vmov	s1, r1
 8002d3c:	ee00 2a10 	vmov	s0, r2
 8002d40:	f7ff fa50 	bl	80021e4 <mkvec>
 8002d44:	eef0 6a40 	vmov.f32	s13, s0
 8002d48:	eeb0 7a60 	vmov.f32	s14, s1
 8002d4c:	eef0 7a41 	vmov.f32	s15, s2
 8002d50:	edc7 6a03 	vstr	s13, [r7, #12]
 8002d54:	ed87 7a04 	vstr	s14, [r7, #16]
 8002d58:	edc7 7a05 	vstr	s15, [r7, #20]
    xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002d5c:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <go_to+0x19c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d64:	4618      	mov	r0, r3
 8002d66:	f015 fec9 	bl	8018afc <xQueueSemaphoreTake>
    float t = usecTimestamp() / 1e6;
 8002d6a:	f00a ff53 	bl	800dc14 <usecTimestamp>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd fc19 	bl	80005ac <__aeabi_ul2d>
 8002d7a:	a341      	add	r3, pc, #260	; (adr r3, 8002e80 <go_to+0x190>)
 8002d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d80:	f7fd fd74 	bl	800086c <__aeabi_ddiv>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f7fd ff1c 	bl	8000bc8 <__aeabi_d2f>
 8002d90:	4603      	mov	r3, r0
 8002d92:	61bb      	str	r3, [r7, #24]
    if (plan_is_disabled(&planner) || plan_is_stopped(&planner)) {
 8002d94:	483e      	ldr	r0, [pc, #248]	; (8002e90 <go_to+0x1a0>)
 8002d96:	f004 f8f1 	bl	8006f7c <plan_is_disabled>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <go_to+0xbc>
 8002da0:	483b      	ldr	r0, [pc, #236]	; (8002e90 <go_to+0x1a0>)
 8002da2:	f004 f8da 	bl	8006f5a <plan_is_stopped>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d035      	beq.n	8002e18 <go_to+0x128>
      ev.pos = pos;
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <go_to+0x1a4>)
 8002dae:	4a3a      	ldr	r2, [pc, #232]	; (8002e98 <go_to+0x1a8>)
 8002db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ev.vel = vel;
 8002db6:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <go_to+0x1a4>)
 8002db8:	4a38      	ldr	r2, [pc, #224]	; (8002e9c <go_to+0x1ac>)
 8002dba:	330c      	adds	r3, #12
 8002dbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ev.yaw = yaw;
 8002dc2:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <go_to+0x1b0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a33      	ldr	r2, [pc, #204]	; (8002e94 <go_to+0x1a4>)
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
      result = plan_go_to_from(&planner, &ev, data->relative, hover_pos, data->yaw, data->duration, t);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8002dde:	460b      	mov	r3, r1
 8002de0:	4619      	mov	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002de8:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002df0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002df4:	edd7 2a06 	vldr	s5, [r7, #24]
 8002df8:	ee02 3a10 	vmov	s4, r3
 8002dfc:	ee01 1a90 	vmov	s3, r1
 8002e00:	eeb0 0a66 	vmov.f32	s0, s13
 8002e04:	eef0 0a47 	vmov.f32	s1, s14
 8002e08:	eeb0 1a67 	vmov.f32	s2, s15
 8002e0c:	4921      	ldr	r1, [pc, #132]	; (8002e94 <go_to+0x1a4>)
 8002e0e:	4820      	ldr	r0, [pc, #128]	; (8002e90 <go_to+0x1a0>)
 8002e10:	f004 f9c8 	bl	80071a4 <plan_go_to_from>
 8002e14:	61f8      	str	r0, [r7, #28]
 8002e16:	e025      	b.n	8002e64 <go_to+0x174>
    }
    else {
      result = plan_go_to(&planner, data->relative, hover_pos, data->yaw, data->duration, t);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	785b      	ldrb	r3, [r3, #1]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 100e 	ldr.w	r1, [r3, #14]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4619      	mov	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8002e36:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e42:	edd7 2a06 	vldr	s5, [r7, #24]
 8002e46:	ee02 3a10 	vmov	s4, r3
 8002e4a:	ee01 1a90 	vmov	s3, r1
 8002e4e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e52:	eef0 0a47 	vmov.f32	s1, s14
 8002e56:	eeb0 1a67 	vmov.f32	s2, s15
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <go_to+0x1a0>)
 8002e5e:	f004 fa7d 	bl	800735c <plan_go_to>
 8002e62:	61f8      	str	r0, [r7, #28]
    }
    xSemaphoreGive(lockTraj);
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <go_to+0x19c>)
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f015 fbc3 	bl	80185f8 <xQueueGenericSend>
  }
  return result;
 8002e72:	69fb      	ldr	r3, [r7, #28]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3720      	adds	r7, #32
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	f3af 8000 	nop.w
 8002e80:	00000000 	.word	0x00000000
 8002e84:	412e8480 	.word	0x412e8480
 8002e88:	20006369 	.word	0x20006369
 8002e8c:	2000644c 	.word	0x2000644c
 8002e90:	200062c0 	.word	0x200062c0
 8002e94:	200068a0 	.word	0x200068a0
 8002e98:	2000636c 	.word	0x2000636c
 8002e9c:	20006378 	.word	0x20006378
 8002ea0:	20006384 	.word	0x20006384
 8002ea4:	00000000 	.word	0x00000000

08002ea8 <start_trajectory>:

int start_trajectory(const struct data_start_trajectory* data)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if (isBlocked) {
 8002eb0:	4b75      	ldr	r3, [pc, #468]	; (8003088 <start_trajectory+0x1e0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <start_trajectory+0x14>
    return EBUSY;
 8002eb8:	2310      	movs	r3, #16
 8002eba:	e0da      	b.n	8003072 <start_trajectory+0x1ca>
  }

  int result = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  if (isInGroup(data->groupMask)) {
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fa45 	bl	8002354 <isInGroup>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80cf 	beq.w	8003070 <start_trajectory+0x1c8>
    if (data->trajectoryId < NUM_TRAJECTORY_DEFINITIONS) {
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	78db      	ldrb	r3, [r3, #3]
 8002ed6:	2b09      	cmp	r3, #9
 8002ed8:	f200 80ca 	bhi.w	8003070 <start_trajectory+0x1c8>
      struct trajectoryDescription* trajDesc = &trajectory_descriptions[data->trajectoryId];
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	78db      	ldrb	r3, [r3, #3]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	4a68      	ldr	r2, [pc, #416]	; (800308c <start_trajectory+0x1e4>)
 8002eea:	4413      	add	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
      if (   trajDesc->trajectoryLocation == TRAJECTORY_LOCATION_MEM
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d15a      	bne.n	8002fac <start_trajectory+0x104>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D) {
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d156      	bne.n	8002fac <start_trajectory+0x104>
        xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002efe:	4b64      	ldr	r3, [pc, #400]	; (8003090 <start_trajectory+0x1e8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f06:	4618      	mov	r0, r3
 8002f08:	f015 fdf8 	bl	8018afc <xQueueSemaphoreTake>
        float t = usecTimestamp() / 1e6;
 8002f0c:	f00a fe82 	bl	800dc14 <usecTimestamp>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fd fb48 	bl	80005ac <__aeabi_ul2d>
 8002f1c:	a358      	add	r3, pc, #352	; (adr r3, 8003080 <start_trajectory+0x1d8>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fca3 	bl	800086c <__aeabi_ddiv>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7fd fe4b 	bl	8000bc8 <__aeabi_d2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	60fb      	str	r3, [r7, #12]
        trajectory.t_begin = t;
 8002f36:	4a57      	ldr	r2, [pc, #348]	; (8003094 <start_trajectory+0x1ec>)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6013      	str	r3, [r2, #0]
        trajectory.timescale = data->timescale;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a54      	ldr	r2, [pc, #336]	; (8003094 <start_trajectory+0x1ec>)
 8002f42:	6053      	str	r3, [r2, #4]
        trajectory.n_pieces = trajDesc->trajectoryIdentifier.mem.n_pieces;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	799a      	ldrb	r2, [r3, #6]
 8002f48:	4b52      	ldr	r3, [pc, #328]	; (8003094 <start_trajectory+0x1ec>)
 8002f4a:	751a      	strb	r2, [r3, #20]
        trajectory.pieces = (struct poly4d*)&trajectories_memory[trajDesc->trajectoryIdentifier.mem.offset];
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002f52:	4a51      	ldr	r2, [pc, #324]	; (8003098 <start_trajectory+0x1f0>)
 8002f54:	4413      	add	r3, r2
 8002f56:	4a4f      	ldr	r2, [pc, #316]	; (8003094 <start_trajectory+0x1ec>)
 8002f58:	6193      	str	r3, [r2, #24]
        result = plan_start_trajectory(&planner, &trajectory, data->reversed, data->relative, pos);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	789b      	ldrb	r3, [r3, #2]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	bf14      	ite	ne
 8002f70:	2301      	movne	r3, #1
 8002f72:	2300      	moveq	r3, #0
 8002f74:	b2d9      	uxtb	r1, r3
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <start_trajectory+0x1f4>)
 8002f78:	edd3 6a00 	vldr	s13, [r3]
 8002f7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f80:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f84:	eeb0 0a66 	vmov.f32	s0, s13
 8002f88:	eef0 0a47 	vmov.f32	s1, s14
 8002f8c:	eeb0 1a67 	vmov.f32	s2, s15
 8002f90:	460b      	mov	r3, r1
 8002f92:	4940      	ldr	r1, [pc, #256]	; (8003094 <start_trajectory+0x1ec>)
 8002f94:	4842      	ldr	r0, [pc, #264]	; (80030a0 <start_trajectory+0x1f8>)
 8002f96:	f004 fa1f 	bl	80073d8 <plan_start_trajectory>
 8002f9a:	6178      	str	r0, [r7, #20]
        xSemaphoreGive(lockTraj);
 8002f9c:	4b3c      	ldr	r3, [pc, #240]	; (8003090 <start_trajectory+0x1e8>)
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	f015 fb27 	bl	80185f8 <xQueueGenericSend>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D) {
 8002faa:	e061      	b.n	8003070 <start_trajectory+0x1c8>
      } else if (trajDesc->trajectoryLocation == TRAJECTORY_LOCATION_MEM
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d15d      	bne.n	8003070 <start_trajectory+0x1c8>
          && trajDesc->trajectoryType == CRTP_CHL_TRAJECTORY_TYPE_POLY4D_COMPRESSED) {
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d159      	bne.n	8003070 <start_trajectory+0x1c8>

        if (data->timescale != 1 || data->reversed) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002fc4:	ee07 3a10 	vmov	s14, r3
 8002fc8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd0:	d103      	bne.n	8002fda <start_trajectory+0x132>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	789b      	ldrb	r3, [r3, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <start_trajectory+0x138>
          result = ENOEXEC;
 8002fda:	2308      	movs	r3, #8
 8002fdc:	617b      	str	r3, [r7, #20]
 8002fde:	e047      	b.n	8003070 <start_trajectory+0x1c8>
        } else {
          xSemaphoreTake(lockTraj, portMAX_DELAY);
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <start_trajectory+0x1e8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f015 fd87 	bl	8018afc <xQueueSemaphoreTake>
          float t = usecTimestamp() / 1e6;
 8002fee:	f00a fe11 	bl	800dc14 <usecTimestamp>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fad7 	bl	80005ac <__aeabi_ul2d>
 8002ffe:	a320      	add	r3, pc, #128	; (adr r3, 8003080 <start_trajectory+0x1d8>)
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f7fd fc32 	bl	800086c <__aeabi_ddiv>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f7fd fdda 	bl	8000bc8 <__aeabi_d2f>
 8003014:	4603      	mov	r3, r0
 8003016:	60bb      	str	r3, [r7, #8]
          piecewise_compressed_load(
            &compressed_trajectory,
            &trajectories_memory[trajDesc->trajectoryIdentifier.mem.offset]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800301e:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <start_trajectory+0x1f0>)
 8003020:	4413      	add	r3, r2
          piecewise_compressed_load(
 8003022:	4619      	mov	r1, r3
 8003024:	481f      	ldr	r0, [pc, #124]	; (80030a4 <start_trajectory+0x1fc>)
 8003026:	f006 fb5b 	bl	80096e0 <piecewise_compressed_load>
          );
          compressed_trajectory.t_begin = t;
 800302a:	4a1e      	ldr	r2, [pc, #120]	; (80030a4 <start_trajectory+0x1fc>)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	6013      	str	r3, [r2, #0]
          result = plan_start_compressed_trajectory(&planner, &compressed_trajectory, data->relative, pos);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <start_trajectory+0x1f4>)
 8003040:	edd3 6a00 	vldr	s13, [r3]
 8003044:	ed93 7a01 	vldr	s14, [r3, #4]
 8003048:	edd3 7a02 	vldr	s15, [r3, #8]
 800304c:	eeb0 0a66 	vmov.f32	s0, s13
 8003050:	eef0 0a47 	vmov.f32	s1, s14
 8003054:	eeb0 1a67 	vmov.f32	s2, s15
 8003058:	4912      	ldr	r1, [pc, #72]	; (80030a4 <start_trajectory+0x1fc>)
 800305a:	4811      	ldr	r0, [pc, #68]	; (80030a0 <start_trajectory+0x1f8>)
 800305c:	f004 fa5c 	bl	8007518 <plan_start_compressed_trajectory>
 8003060:	6178      	str	r0, [r7, #20]
          xSemaphoreGive(lockTraj);
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <start_trajectory+0x1e8>)
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	2300      	movs	r3, #0
 8003068:	2200      	movs	r2, #0
 800306a:	2100      	movs	r1, #0
 800306c:	f015 fac4 	bl	80185f8 <xQueueGenericSend>
        }
      }
    }
  }
  return result;
 8003070:	697b      	ldr	r3, [r7, #20]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	00000000 	.word	0x00000000
 8003084:	412e8480 	.word	0x412e8480
 8003088:	20006369 	.word	0x20006369
 800308c:	20006278 	.word	0x20006278
 8003090:	2000644c 	.word	0x2000644c
 8003094:	20006388 	.word	0x20006388
 8003098:	20005278 	.word	0x20005278
 800309c:	2000636c 	.word	0x2000636c
 80030a0:	200062c0 	.word	0x200062c0
 80030a4:	200063a4 	.word	0x200063a4

080030a8 <define_trajectory>:

int define_trajectory(const struct data_define_trajectory* data)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if (data->trajectoryId >= NUM_TRAJECTORY_DEFINITIONS) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d901      	bls.n	80030bc <define_trajectory+0x14>
    return ENOEXEC;
 80030b8:	2308      	movs	r3, #8
 80030ba:	e010      	b.n	80030de <define_trajectory+0x36>
  }
  trajectory_descriptions[data->trajectoryId] = data->description;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <define_trajectory+0x44>)
 80030c4:	460b      	mov	r3, r1
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1a5b      	subs	r3, r3, r1
 80030ca:	441a      	add	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3301      	adds	r3, #1
 80030d0:	6819      	ldr	r1, [r3, #0]
 80030d2:	6011      	str	r1, [r2, #0]
 80030d4:	8899      	ldrh	r1, [r3, #4]
 80030d6:	799b      	ldrb	r3, [r3, #6]
 80030d8:	8091      	strh	r1, [r2, #4]
 80030da:	7193      	strb	r3, [r2, #6]
  return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	20006278 	.word	0x20006278

080030f0 <handleMemRead>:

static bool handleMemRead(const uint32_t memAddr, const uint8_t readLen, uint8_t* buffer) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	460b      	mov	r3, r1
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	72fb      	strb	r3, [r7, #11]
  return crtpCommanderHighLevelReadTrajectory(memAddr, readLen, buffer);
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4619      	mov	r1, r3
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f84f 	bl	80031a8 <crtpCommanderHighLevelReadTrajectory>
 800310a:	4603      	mov	r3, r0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <handleMemWrite>:

static bool handleMemWrite(const uint32_t memAddr, const uint8_t writeLen, const uint8_t* buffer) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	460b      	mov	r3, r1
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	72fb      	strb	r3, [r7, #11]
  return crtpCommanderHighLevelWriteTrajectory(memAddr, writeLen, buffer);
 8003122:	7afb      	ldrb	r3, [r7, #11]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4619      	mov	r1, r3
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 f81d 	bl	8003168 <crtpCommanderHighLevelWriteTrajectory>
 800312e:	4603      	mov	r3, r0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <crtpCommanderHighLevelStop>:

  return handleCommand(COMMAND_LAND_2, (const uint8_t*)&data);
}

int crtpCommanderHighLevelStop()
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
  struct data_stop data =
 800313e:	2300      	movs	r3, #0
 8003140:	713b      	strb	r3, [r7, #4]
  {
    .groupMask = ALL_GROUPS,
  };

  return handleCommand(COMMAND_STOP, (const uint8_t*)&data);
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	4619      	mov	r1, r3
 8003146:	2003      	movs	r0, #3
 8003148:	f7ff f9d8 	bl	80024fc <handleCommand>
 800314c:	4603      	mov	r3, r0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <crtpCommanderHighLevelTrajectoryMemSize>:

  return handleCommand(COMMAND_DEFINE_TRAJECTORY, (const uint8_t*)&data);
}

uint32_t crtpCommanderHighLevelTrajectoryMemSize()
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  return sizeof(trajectories_memory);
 800315a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <crtpCommanderHighLevelWriteTrajectory>:

bool crtpCommanderHighLevelWriteTrajectory(const uint32_t offset, const uint32_t length, const uint8_t* data)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  bool result = false;
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]

  if ((offset + length) <= sizeof(trajectories_memory)) {
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4413      	add	r3, r2
 800317e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003182:	d809      	bhi.n	8003198 <crtpCommanderHighLevelWriteTrajectory+0x30>
    memcpy(&(trajectories_memory[offset]), data, length);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <crtpCommanderHighLevelWriteTrajectory+0x3c>)
 8003188:	4413      	add	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	f01a f817 	bl	801d1c2 <memcpy>
    result = true;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20005278 	.word	0x20005278

080031a8 <crtpCommanderHighLevelReadTrajectory>:

bool crtpCommanderHighLevelReadTrajectory(const uint32_t offset, const uint32_t length, uint8_t* destination)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  bool result = false;
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]

  if (offset + length <= sizeof(trajectories_memory) && memcpy(destination, &(trajectories_memory[offset]), length)) {
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4413      	add	r3, r2
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	d80c      	bhi.n	80031de <crtpCommanderHighLevelReadTrajectory+0x36>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <crtpCommanderHighLevelReadTrajectory+0x40>)
 80031c8:	4413      	add	r3, r2
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4619      	mov	r1, r3
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f019 fff7 	bl	801d1c2 <memcpy>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <crtpCommanderHighLevelReadTrajectory+0x36>
    result = true;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20005278 	.word	0x20005278

080031ec <rotateYaw>:
 * Rotate Yaw so that the Crazyflie will change what is considered front.
 *
 * @param yawRad Amount of radians to rotate yaw.
 */
static void rotateYaw(setpoint_t *setpoint, float yawRad)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	ed87 0a00 	vstr	s0, [r7]
  float cosy = cosf(yawRad);
 80031f8:	ed97 0a00 	vldr	s0, [r7]
 80031fc:	f01b fdee 	bl	801eddc <cosf>
 8003200:	ed87 0a05 	vstr	s0, [r7, #20]
  float siny = sinf(yawRad);
 8003204:	ed97 0a00 	vldr	s0, [r7]
 8003208:	f01b fe34 	bl	801ee74 <sinf>
 800320c:	ed87 0a04 	vstr	s0, [r7, #16]
  float originalRoll = setpoint->attitude.roll;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60fb      	str	r3, [r7, #12]
  float originalPitch = setpoint->attitude.pitch;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	60bb      	str	r3, [r7, #8]

  setpoint->attitude.roll = originalRoll * cosy - originalPitch * siny;
 800321c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003220:	edd7 7a05 	vldr	s15, [r7, #20]
 8003224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003228:	edd7 6a02 	vldr	s13, [r7, #8]
 800322c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	edc3 7a02 	vstr	s15, [r3, #8]
  setpoint->attitude.pitch = originalPitch * cosy + originalRoll * siny;
 800323e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003242:	edd7 7a05 	vldr	s15, [r7, #20]
 8003246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800324a:	edd7 6a03 	vldr	s13, [r7, #12]
 800324e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003260:	bf00      	nop
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <yawModeUpdate>:

/**
 * Update Yaw according to current setting
 */
static void yawModeUpdate(setpoint_t *setpoint)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  switch (yawMode)
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <yawModeUpdate+0x38>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <yawModeUpdate+0x16>
 8003278:	2b01      	cmp	r3, #1
 800327a:	d006      	beq.n	800328a <yawModeUpdate+0x22>
      rotateYaw(setpoint, 45 * M_PI / 180);
      break;
    case XMODE: // Fall through
    default:
      // Default in x-mode. Do nothing
      break;
 800327c:	e00b      	b.n	8003296 <yawModeUpdate+0x2e>
      ASSERT(false);
 800327e:	226c      	movs	r2, #108	; 0x6c
 8003280:	4908      	ldr	r1, [pc, #32]	; (80032a4 <yawModeUpdate+0x3c>)
 8003282:	4809      	ldr	r0, [pc, #36]	; (80032a8 <yawModeUpdate+0x40>)
 8003284:	f007 fb06 	bl	800a894 <assertFail>
      break;
 8003288:	e005      	b.n	8003296 <yawModeUpdate+0x2e>
      rotateYaw(setpoint, 45 * M_PI / 180);
 800328a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80032ac <yawModeUpdate+0x44>
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffac 	bl	80031ec <rotateYaw>
      break;
 8003294:	bf00      	nop
  }
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000072 	.word	0x20000072
 80032a4:	08021ac0 	.word	0x08021ac0
 80032a8:	08021ae8 	.word	0x08021ae8
 80032ac:	3f490fdb 	.word	0x3f490fdb

080032b0 <crtpCommanderRpytDecodeSetpoint>:

void crtpCommanderRpytDecodeSetpoint(setpoint_t *setpoint, CRTPPacket *pk)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  struct CommanderCrtpLegacyValues *values = (struct CommanderCrtpLegacyValues*)pk->data;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	3302      	adds	r3, #2
 80032be:	60fb      	str	r3, [r7, #12]

  if (commanderGetActivePriority() == COMMANDER_PRIORITY_DISABLE) {
 80032c0:	f003 fa10 	bl	80066e4 <commanderGetActivePriority>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <crtpCommanderRpytDecodeSetpoint+0x20>
    thrustLocked = true;
 80032ca:	4bab      	ldr	r3, [pc, #684]	; (8003578 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
  }
  if (values->thrust == 0) {
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	899b      	ldrh	r3, [r3, #12]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <crtpCommanderRpytDecodeSetpoint+0x30>
    thrustLocked = false;
 80032da:	4ba7      	ldr	r3, [pc, #668]	; (8003578 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
  }

  // Thrust
  uint16_t rawThrust = values->thrust;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	7b1a      	ldrb	r2, [r3, #12]
 80032e4:	7b5b      	ldrb	r3, [r3, #13]
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	4313      	orrs	r3, r2
 80032ea:	817b      	strh	r3, [r7, #10]

  if (thrustLocked || (rawThrust < MIN_THRUST)) {
 80032ec:	4ba2      	ldr	r3, [pc, #648]	; (8003578 <crtpCommanderRpytDecodeSetpoint+0x2c8>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <crtpCommanderRpytDecodeSetpoint+0x4c>
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032fa:	d204      	bcs.n	8003306 <crtpCommanderRpytDecodeSetpoint+0x56>
    setpoint->thrust = 0;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	635a      	str	r2, [r3, #52]	; 0x34
 8003304:	e00f      	b.n	8003326 <crtpCommanderRpytDecodeSetpoint+0x76>
  } else {
    setpoint->thrust = fminf(rawThrust, MAX_THRUST);
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003310:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800357c <crtpCommanderRpytDecodeSetpoint+0x2cc>
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	f01b fe1e 	bl	801ef58 <fminf>
 800331c:	eef0 7a40 	vmov.f32	s15, s0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  if (altHoldMode) {
 8003326:	4b96      	ldr	r3, [pc, #600]	; (8003580 <crtpCommanderRpytDecodeSetpoint+0x2d0>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d026      	beq.n	800337c <crtpCommanderRpytDecodeSetpoint+0xcc>
    if (!modeSet) {             //Reset filter and PID values on first initiation of assist mode to prevent sudden reactions.
 800332e:	4b95      	ldr	r3, [pc, #596]	; (8003584 <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <crtpCommanderRpytDecodeSetpoint+0x9a>
      modeSet = true;
 800333c:	4b91      	ldr	r3, [pc, #580]	; (8003584 <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
      positionControllerResetAllPID();
 8003342:	f004 f967 	bl	8007614 <positionControllerResetAllPID>
      positionControllerResetAllfilters();
 8003346:	f004 f987 	bl	8007658 <positionControllerResetAllfilters>
    }
    setpoint->thrust = 0;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	635a      	str	r2, [r3, #52]	; 0x34
    setpoint->mode.z = modeVelocity;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

    setpoint->velocity.z = ((float) rawThrust - 32767.f) / 32767.f;
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003364:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8003588 <crtpCommanderRpytDecodeSetpoint+0x2d8>
 8003368:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800336c:	eddf 6a86 	vldr	s13, [pc, #536]	; 8003588 <crtpCommanderRpytDecodeSetpoint+0x2d8>
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 800337a:	e006      	b.n	800338a <crtpCommanderRpytDecodeSetpoint+0xda>
  } else {
    setpoint->mode.z = modeDisable;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    modeSet = false;
 8003384:	4b7f      	ldr	r3, [pc, #508]	; (8003584 <crtpCommanderRpytDecodeSetpoint+0x2d4>)
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
  }

  // roll/pitch
  if (posHoldMode) {
 800338a:	4b80      	ldr	r3, [pc, #512]	; (800358c <crtpCommanderRpytDecodeSetpoint+0x2dc>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d02e      	beq.n	80033f0 <crtpCommanderRpytDecodeSetpoint+0x140>
    setpoint->mode.x = modeVelocity;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeVelocity;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    setpoint->mode.roll = modeDisable;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    setpoint->mode.pitch = modeDisable;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

    setpoint->velocity.x = values->pitch/30.0f;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    setpoint->velocity.y = values->roll/30.0f;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    setpoint->attitude.roll  = 0;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
    setpoint->attitude.pitch = 0;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	e096      	b.n	800351e <crtpCommanderRpytDecodeSetpoint+0x26e>
  } else if (posSetMode && values->thrust != 0) {
 80033f0:	4b67      	ldr	r3, [pc, #412]	; (8003590 <crtpCommanderRpytDecodeSetpoint+0x2e0>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d048      	beq.n	800348a <crtpCommanderRpytDecodeSetpoint+0x1da>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	899b      	ldrh	r3, [r3, #12]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d043      	beq.n	800348a <crtpCommanderRpytDecodeSetpoint+0x1da>
    setpoint->mode.x = modeAbs;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeAbs;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    setpoint->mode.z = modeAbs;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    setpoint->mode.roll = modeDisable;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    setpoint->mode.pitch = modeDisable;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    setpoint->mode.yaw = modeAbs;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

    setpoint->position.x = -values->pitch;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef1 7a67 	vneg.f32	s15, s15
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    setpoint->position.y = values->roll;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6413      	str	r3, [r2, #64]	; 0x40
    setpoint->position.z = values->thrust/1000.0f;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	899b      	ldrh	r3, [r3, #12]
 8003450:	b29b      	uxth	r3, r3
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800345a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003594 <crtpCommanderRpytDecodeSetpoint+0x2e4>
 800345e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    setpoint->attitude.roll  = 0;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
    setpoint->attitude.pitch = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	60da      	str	r2, [r3, #12]
    setpoint->attitude.yaw = values->yaw;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6113      	str	r3, [r2, #16]
    setpoint->thrust = 0;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
 8003488:	e049      	b.n	800351e <crtpCommanderRpytDecodeSetpoint+0x26e>
  } else {
    setpoint->mode.x = modeDisable;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    setpoint->mode.y = modeDisable;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    if (stabilizationModeRoll == RATE) {
 800349a:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <crtpCommanderRpytDecodeSetpoint+0x2e8>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <crtpCommanderRpytDecodeSetpoint+0x20c>
      setpoint->mode.roll = modeVelocity;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      setpoint->attitudeRate.roll = values->roll;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6193      	str	r3, [r2, #24]
      setpoint->attitude.roll = 0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	e00b      	b.n	80034d4 <crtpCommanderRpytDecodeSetpoint+0x224>
    } else {
      setpoint->mode.roll = modeAbs;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      setpoint->attitudeRate.roll = 0;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
      setpoint->attitude.roll = values->roll;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if (stabilizationModePitch == RATE) {
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <crtpCommanderRpytDecodeSetpoint+0x2ec>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10c      	bne.n	80034f6 <crtpCommanderRpytDecodeSetpoint+0x246>
      setpoint->mode.pitch = modeVelocity;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      setpoint->attitudeRate.pitch = values->pitch;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	61d3      	str	r3, [r2, #28]
      setpoint->attitude.pitch = 0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	e00b      	b.n	800350e <crtpCommanderRpytDecodeSetpoint+0x25e>
    } else {
      setpoint->mode.pitch = modeAbs;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
      setpoint->attitudeRate.pitch = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
      setpoint->attitude.pitch = values->pitch;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	60d3      	str	r3, [r2, #12]
    }

    setpoint->velocity.x = 0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	64da      	str	r2, [r3, #76]	; 0x4c
    setpoint->velocity.y = 0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  // Yaw
  if (!posSetMode) {
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <crtpCommanderRpytDecodeSetpoint+0x2e0>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	f083 0301 	eor.w	r3, r3, #1
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <crtpCommanderRpytDecodeSetpoint+0x2be>
    if (stabilizationModeYaw == RATE) {
 800352c:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <crtpCommanderRpytDecodeSetpoint+0x2f0>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d110      	bne.n	8003556 <crtpCommanderRpytDecodeSetpoint+0x2a6>
      // legacy rate input is inverted
      setpoint->attitudeRate.yaw = -values->yaw;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	ee07 3a90 	vmov	s15, r3
 800353c:	eef1 7a67 	vneg.f32	s15, s15
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	edc3 7a08 	vstr	s15, [r3, #32]
      yawModeUpdate(setpoint);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe8e 	bl	8003268 <yawModeUpdate>

      setpoint->mode.yaw = modeVelocity;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
      setpoint->mode.yaw = modeAbs;
      setpoint->attitudeRate.yaw = 0;
      setpoint->attitude.yaw = values->yaw;
    }
  }
}
 8003554:	e00b      	b.n	800356e <crtpCommanderRpytDecodeSetpoint+0x2be>
      setpoint->mode.yaw = modeAbs;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
      setpoint->attitudeRate.yaw = 0;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	621a      	str	r2, [r3, #32]
      setpoint->attitude.yaw = values->yaw;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6113      	str	r3, [r2, #16]
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000073 	.word	0x20000073
 800357c:	476a6000 	.word	0x476a6000
 8003580:	200068d5 	.word	0x200068d5
 8003584:	200068d8 	.word	0x200068d8
 8003588:	46fffe00 	.word	0x46fffe00
 800358c:	200068d6 	.word	0x200068d6
 8003590:	200068d7 	.word	0x200068d7
 8003594:	447a0000 	.word	0x447a0000
 8003598:	20000070 	.word	0x20000070
 800359c:	20000071 	.word	0x20000071
 80035a0:	200068d4 	.word	0x200068d4

080035a4 <estimatorEnqueuePosition>:
  m.data.tdoa = *tdoa;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueuePosition(const positionMeasurement_t *position)
{
 80035a4:	b5b0      	push	{r4, r5, r7, lr}
 80035a6:	b08e      	sub	sp, #56	; 0x38
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePosition;
 80035ac:	2301      	movs	r3, #1
 80035ae:	723b      	strb	r3, [r7, #8]
  m.data.position = *position;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f107 040c 	add.w	r4, r7, #12
 80035b6:	461d      	mov	r5, r3
 80035b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 80035c0:	f107 0308 	add.w	r3, r7, #8
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fccd 	bl	8000f64 <estimatorEnqueue>
}
 80035ca:	bf00      	nop
 80035cc:	3738      	adds	r7, #56	; 0x38
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}

080035d2 <estimatorEnqueuePose>:

static inline void estimatorEnqueuePose(const poseMeasurement_t *pose)
{
 80035d2:	b5b0      	push	{r4, r5, r7, lr}
 80035d4:	b08e      	sub	sp, #56	; 0x38
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypePose;
 80035da:	2302      	movs	r3, #2
 80035dc:	723b      	strb	r3, [r7, #8]
  m.data.pose = *pose;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f107 040c 	add.w	r4, r7, #12
 80035e4:	461d      	mov	r5, r3
 80035e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	6023      	str	r3, [r4, #0]
  estimatorEnqueue(&m);
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fcb4 	bl	8000f64 <estimatorEnqueue>
}
 80035fc:	bf00      	nop
 80035fe:	3738      	adds	r7, #56	; 0x38
 8003600:	46bd      	mov	sp, r7
 8003602:	bdb0      	pop	{r4, r5, r7, pc}

08003604 <quatdecompress>:
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b089      	sub	sp, #36	; 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
	unsigned const mask = (1 << 9) - 1;
 800360e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003612:	617b      	str	r3, [r7, #20]
	int const i_largest = comp >> 30;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0f9b      	lsrs	r3, r3, #30
 8003618:	613b      	str	r3, [r7, #16]
	float sum_squares = 0;
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 8003620:	2303      	movs	r3, #3
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e04d      	b.n	80036c2 <quatdecompress+0xbe>
		if (i != i_largest) {
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	429a      	cmp	r2, r3
 800362c:	d046      	beq.n	80036bc <quatdecompress+0xb8>
			unsigned mag = comp & mask;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
			unsigned negbit = (comp >> 9) & 0x1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0a5b      	lsrs	r3, r3, #9
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	60bb      	str	r3, [r7, #8]
			comp = comp >> 10;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	607b      	str	r3, [r7, #4]
			q[i] = ((float)M_SQRT1_2) * ((float)mag) / mask;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003650:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80036f4 <quatdecompress+0xf0>
 8003654:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4413      	add	r3, r2
 800366a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800366e:	edc3 7a00 	vstr	s15, [r3]
			if (negbit == 1) {
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d10d      	bne.n	8003694 <quatdecompress+0x90>
				q[i] = -q[i];
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	4413      	add	r3, r2
 8003680:	edd3 7a00 	vldr	s15, [r3]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	4413      	add	r3, r2
 800368c:	eef1 7a67 	vneg.f32	s15, s15
 8003690:	edc3 7a00 	vstr	s15, [r3]
			sum_squares += q[i] * q[i];
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	4413      	add	r3, r2
 800369c:	ed93 7a00 	vldr	s14, [r3]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 3; i >= 0; --i) {
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	3b01      	subs	r3, #1
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	daae      	bge.n	8003626 <quatdecompress+0x22>
	q[i_largest] = sqrtf(1.0f - sum_squares);
 80036c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80036d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	18d4      	adds	r4, r2, r3
 80036dc:	eeb0 0a67 	vmov.f32	s0, s15
 80036e0:	f01b fb5e 	bl	801eda0 <sqrtf>
 80036e4:	eef0 7a40 	vmov.f32	s15, s0
 80036e8:	edc4 7a00 	vstr	s15, [r4]
}
 80036ec:	bf00      	nop
 80036ee:	3724      	adds	r7, #36	; 0x24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd90      	pop	{r4, r7, pc}
 80036f4:	3f3504f3 	.word	0x3f3504f3

080036f8 <locSrvInit>:

static bool isEmergencyStopRequested = false;
static uint32_t emergencyStopWatchdogNotificationTick = 0;

void locSrvInit()
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
  if (isInit) {
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <locSrvInit+0x38>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d110      	bne.n	8003728 <locSrvInit+0x30>
    return;
  }

  //  uint64_t address = configblockGetRadioAddress();
  uint64_t address = RADIO_CHANNEL_ADDRESS;
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	e9c7 2300 	strd	r2, r3, [r7]
  my_id = address & 0xFF;
 8003712:	783a      	ldrb	r2, [r7, #0]
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <locSrvInit+0x3c>)
 8003716:	701a      	strb	r2, [r3, #0]

  crtpRegisterPortCB(CRTP_PORT_LOCALIZATION, locSrvCrtpCB);
 8003718:	4907      	ldr	r1, [pc, #28]	; (8003738 <locSrvInit+0x40>)
 800371a:	2006      	movs	r0, #6
 800371c:	f7fd ff7c 	bl	8001618 <crtpRegisterPortCB>
  isInit = true;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <locSrvInit+0x38>)
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e000      	b.n	800372a <locSrvInit+0x32>
    return;
 8003728:	bf00      	nop
}
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20006916 	.word	0x20006916
 8003734:	20006917 	.word	0x20006917
 8003738:	0800373d 	.word	0x0800373d

0800373c <locSrvCrtpCB>:

static void locSrvCrtpCB(CRTPPacket* pk)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  switch (pk->channel)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d00e      	beq.n	8003770 <locSrvCrtpCB+0x34>
 8003752:	2b02      	cmp	r3, #2
 8003754:	dc10      	bgt.n	8003778 <locSrvCrtpCB+0x3c>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <locSrvCrtpCB+0x24>
 800375a:	2b01      	cmp	r3, #1
 800375c:	d004      	beq.n	8003768 <locSrvCrtpCB+0x2c>
      break;
    case EXT_POSITION_PACKED:
      extPositionPackedHandler(pk);
      break;
    default:
      break;
 800375e:	e00b      	b.n	8003778 <locSrvCrtpCB+0x3c>
      extPositionHandler(pk);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f827 	bl	80037b4 <extPositionHandler>
      break;
 8003766:	e008      	b.n	800377a <locSrvCrtpCB+0x3e>
      genericLocHandle(pk);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f9e1 	bl	8003b30 <genericLocHandle>
      break;
 800376e:	e004      	b.n	800377a <locSrvCrtpCB+0x3e>
      extPositionPackedHandler(pk);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fa27 	bl	8003bc4 <extPositionPackedHandler>
      break;
 8003776:	e000      	b.n	800377a <locSrvCrtpCB+0x3e>
      break;
 8003778:	bf00      	nop
  }
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <updateLogFromExtPos>:

static void updateLogFromExtPos()
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  ext_pose.x = ext_pos.x;
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <updateLogFromExtPos+0x28>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a08      	ldr	r2, [pc, #32]	; (80037b0 <updateLogFromExtPos+0x2c>)
 800378e:	6013      	str	r3, [r2, #0]
  ext_pose.y = ext_pos.y;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <updateLogFromExtPos+0x28>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <updateLogFromExtPos+0x2c>)
 8003796:	6053      	str	r3, [r2, #4]
  ext_pose.z = ext_pos.z;
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <updateLogFromExtPos+0x28>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <updateLogFromExtPos+0x2c>)
 800379e:	6093      	str	r3, [r2, #8]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	200068dc 	.word	0x200068dc
 80037b0:	200068f0 	.word	0x200068f0

080037b4 <extPositionHandler>:

static void extPositionHandler(CRTPPacket* pk) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPosition* data = (const struct CrtpExtPosition*)pk->data;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3302      	adds	r3, #2
 80037c0:	60fb      	str	r3, [r7, #12]

  ext_pos.x = data->x;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a10      	ldr	r2, [pc, #64]	; (8003808 <extPositionHandler+0x54>)
 80037c8:	6013      	str	r3, [r2, #0]
  ext_pos.y = data->y;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <extPositionHandler+0x54>)
 80037d0:	6053      	str	r3, [r2, #4]
  ext_pos.z = data->z;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <extPositionHandler+0x54>)
 80037d8:	6093      	str	r3, [r2, #8]
  ext_pos.stdDev = extPosStdDev;
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <extPositionHandler+0x58>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <extPositionHandler+0x54>)
 80037e0:	60d3      	str	r3, [r2, #12]
  ext_pos.source = MeasurementSourceLocationService;
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <extPositionHandler+0x54>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	741a      	strb	r2, [r3, #16]
  updateLogFromExtPos();
 80037e8:	f7ff ffcc 	bl	8003784 <updateLogFromExtPos>

  estimatorEnqueuePosition(&ext_pos);
 80037ec:	4806      	ldr	r0, [pc, #24]	; (8003808 <extPositionHandler+0x54>)
 80037ee:	f7ff fed9 	bl	80035a4 <estimatorEnqueuePosition>
  tickOfLastPacket = xTaskGetTickCount();
 80037f2:	f016 f871 	bl	80198d8 <xTaskGetTickCount>
 80037f6:	4603      	mov	r3, r0
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <extPositionHandler+0x5c>)
 80037fc:	801a      	strh	r2, [r3, #0]
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200068dc 	.word	0x200068dc
 800380c:	20000074 	.word	0x20000074
 8003810:	20006918 	.word	0x20006918

08003814 <extPoseHandler>:

static void extPoseHandler(const CRTPPacket* pk) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  const struct CrtpExtPose* data = (const struct CrtpExtPose*)&pk->data[1];
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3303      	adds	r3, #3
 8003820:	60fb      	str	r3, [r7, #12]

  ext_pose.x = data->x;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a17      	ldr	r2, [pc, #92]	; (8003884 <extPoseHandler+0x70>)
 8003828:	6013      	str	r3, [r2, #0]
  ext_pose.y = data->y;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a15      	ldr	r2, [pc, #84]	; (8003884 <extPoseHandler+0x70>)
 8003830:	6053      	str	r3, [r2, #4]
  ext_pose.z = data->z;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <extPoseHandler+0x70>)
 8003838:	6093      	str	r3, [r2, #8]
  ext_pose.quat.x = data->qx;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4a11      	ldr	r2, [pc, #68]	; (8003884 <extPoseHandler+0x70>)
 8003840:	60d3      	str	r3, [r2, #12]
  ext_pose.quat.y = data->qy;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	4a0f      	ldr	r2, [pc, #60]	; (8003884 <extPoseHandler+0x70>)
 8003848:	6113      	str	r3, [r2, #16]
  ext_pose.quat.z = data->qz;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <extPoseHandler+0x70>)
 8003850:	6153      	str	r3, [r2, #20]
  ext_pose.quat.w = data->qw;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <extPoseHandler+0x70>)
 8003858:	6193      	str	r3, [r2, #24]
  ext_pose.stdDevPos = extPosStdDev;
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <extPoseHandler+0x74>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <extPoseHandler+0x70>)
 8003860:	61d3      	str	r3, [r2, #28]
  ext_pose.stdDevQuat = extQuatStdDev;
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <extPoseHandler+0x78>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <extPoseHandler+0x70>)
 8003868:	6213      	str	r3, [r2, #32]

  estimatorEnqueuePose(&ext_pose);
 800386a:	4806      	ldr	r0, [pc, #24]	; (8003884 <extPoseHandler+0x70>)
 800386c:	f7ff feb1 	bl	80035d2 <estimatorEnqueuePose>
  tickOfLastPacket = xTaskGetTickCount();
 8003870:	f016 f832 	bl	80198d8 <xTaskGetTickCount>
 8003874:	4603      	mov	r3, r0
 8003876:	b29a      	uxth	r2, r3
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <extPoseHandler+0x7c>)
 800387a:	801a      	strh	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200068f0 	.word	0x200068f0
 8003888:	20000074 	.word	0x20000074
 800388c:	20000078 	.word	0x20000078
 8003890:	20006918 	.word	0x20006918

08003894 <extPosePackedHandler>:

static void extPosePackedHandler(const CRTPPacket* pk) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint8_t numItems = (pk->size - 1) / sizeof(extPosePackedItem);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	461a      	mov	r2, r3
 80038a4:	4b51      	ldr	r3, [pc, #324]	; (80039ec <extPosePackedHandler+0x158>)
 80038a6:	fba3 2302 	umull	r2, r3, r3, r2
 80038aa:	08db      	lsrs	r3, r3, #3
 80038ac:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
 80038b2:	e090      	b.n	80039d6 <extPosePackedHandler+0x142>
    const extPosePackedItem* item = (const extPosePackedItem*)&pk->data[1 + i * sizeof(extPosePackedItem)];
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	4413      	add	r3, r2
 80038c0:	3301      	adds	r3, #1
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	3302      	adds	r3, #2
 80038c8:	60bb      	str	r3, [r7, #8]
    if (item->id == my_id) {
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <extPosePackedHandler+0x15c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d145      	bne.n	8003962 <extPosePackedHandler+0xce>
      ext_pose.x = item->x / 1000.0f;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 80038dc:	b21b      	sxth	r3, r3
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038e6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80039f4 <extPosePackedHandler+0x160>
 80038ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038ee:	4b42      	ldr	r3, [pc, #264]	; (80039f8 <extPosePackedHandler+0x164>)
 80038f0:	edc3 7a00 	vstr	s15, [r3]
      ext_pose.y = item->y / 1000.0f;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 80038fa:	b21b      	sxth	r3, r3
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003904:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80039f4 <extPosePackedHandler+0x160>
 8003908:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <extPosePackedHandler+0x164>)
 800390e:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pose.z = item->z / 1000.0f;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003918:	b21b      	sxth	r3, r3
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003922:	eddf 6a34 	vldr	s13, [pc, #208]	; 80039f4 <extPosePackedHandler+0x160>
 8003926:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800392a:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <extPosePackedHandler+0x164>)
 800392c:	edc3 7a02 	vstr	s15, [r3, #8]
      quatdecompress(item->quat, (float *)&ext_pose.quat.q0);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8003936:	4931      	ldr	r1, [pc, #196]	; (80039fc <extPosePackedHandler+0x168>)
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fe63 	bl	8003604 <quatdecompress>
      ext_pose.stdDevPos = extPosStdDev;
 800393e:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <extPosePackedHandler+0x16c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2d      	ldr	r2, [pc, #180]	; (80039f8 <extPosePackedHandler+0x164>)
 8003944:	61d3      	str	r3, [r2, #28]
      ext_pose.stdDevQuat = extQuatStdDev;
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <extPosePackedHandler+0x170>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <extPosePackedHandler+0x164>)
 800394c:	6213      	str	r3, [r2, #32]
      estimatorEnqueuePose(&ext_pose);
 800394e:	482a      	ldr	r0, [pc, #168]	; (80039f8 <extPosePackedHandler+0x164>)
 8003950:	f7ff fe3f 	bl	80035d2 <estimatorEnqueuePose>
      tickOfLastPacket = xTaskGetTickCount();
 8003954:	f015 ffc0 	bl	80198d8 <xTaskGetTickCount>
 8003958:	4603      	mov	r3, r0
 800395a:	b29a      	uxth	r2, r3
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <extPosePackedHandler+0x174>)
 800395e:	801a      	strh	r2, [r3, #0]
 8003960:	e036      	b.n	80039d0 <extPosePackedHandler+0x13c>
    } else {
      ext_pos.x = item->x / 1000.0f;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003968:	b21b      	sxth	r3, r3
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003972:	eddf 6a20 	vldr	s13, [pc, #128]	; 80039f4 <extPosePackedHandler+0x160>
 8003976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <extPosePackedHandler+0x178>)
 800397c:	edc3 7a00 	vstr	s15, [r3]
      ext_pos.y = item->y / 1000.0f;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003986:	b21b      	sxth	r3, r3
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003990:	eddf 6a18 	vldr	s13, [pc, #96]	; 80039f4 <extPosePackedHandler+0x160>
 8003994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003998:	4b1c      	ldr	r3, [pc, #112]	; (8003a0c <extPosePackedHandler+0x178>)
 800399a:	edc3 7a01 	vstr	s15, [r3, #4]
      ext_pos.z = item->z / 1000.0f;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80039a4:	b21b      	sxth	r3, r3
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ae:	eddf 6a11 	vldr	s13, [pc, #68]	; 80039f4 <extPosePackedHandler+0x160>
 80039b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <extPosePackedHandler+0x178>)
 80039b8:	edc3 7a02 	vstr	s15, [r3, #8]
      ext_pos.stdDev = extPosStdDev;
 80039bc:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <extPosePackedHandler+0x16c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <extPosePackedHandler+0x178>)
 80039c2:	60d3      	str	r3, [r2, #12]
      peerLocalizationTellPosition(item->id, &ext_pos);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4910      	ldr	r1, [pc, #64]	; (8003a0c <extPosePackedHandler+0x178>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd fbcc 	bl	8001168 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
 80039d2:	3301      	adds	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	7bbb      	ldrb	r3, [r7, #14]
 80039da:	429a      	cmp	r2, r3
 80039dc:	f4ff af6a 	bcc.w	80038b4 <extPosePackedHandler+0x20>
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	ba2e8ba3 	.word	0xba2e8ba3
 80039f0:	20006917 	.word	0x20006917
 80039f4:	447a0000 	.word	0x447a0000
 80039f8:	200068f0 	.word	0x200068f0
 80039fc:	200068fc 	.word	0x200068fc
 8003a00:	20000074 	.word	0x20000074
 8003a04:	20000078 	.word	0x20000078
 8003a08:	20006918 	.word	0x20006918
 8003a0c:	200068dc 	.word	0x200068dc

08003a10 <lpsShortLppPacketHandler>:

static void lpsShortLppPacketHandler(CRTPPacket* pk) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  bool success = false;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]
  if (pk->size >= 2) {
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d918      	bls.n	8003a56 <lpsShortLppPacketHandler+0x46>
#ifdef CONFIG_DECK_LOCO
//    bool success = lpsSendLppShort(pk->data[1], &pk->data[2], pk->size-2);
#else
    bool success = false;
#endif
    pk->port = CRTP_PORT_LOCALIZATION;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	7853      	ldrb	r3, [r2, #1]
 8003a28:	2106      	movs	r1, #6
 8003a2a:	f361 1307 	bfi	r3, r1, #4, #4
 8003a2e:	7053      	strb	r3, [r2, #1]
    pk->channel = GENERIC_TYPE;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	7853      	ldrb	r3, [r2, #1]
 8003a34:	2101      	movs	r1, #1
 8003a36:	f361 0301 	bfi	r3, r1, #0, #2
 8003a3a:	7053      	strb	r3, [r2, #1]
    pk->size = 3;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	701a      	strb	r2, [r3, #0]
    pk->data[0] = LPS_SHORT_LPP_PACKET;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	709a      	strb	r2, [r3, #2]
    pk->data[2] = success?1:0;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	711a      	strb	r2, [r3, #4]
    // This is best effort, i.e. the blocking version is not needed
    crtpSendPacket(pk);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7fd fdf7 	bl	8001644 <crtpSendPacket>
  }
}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <lhPersistDataWorker>:
    uint16_t calibrationDataBsField;
  } __attribute__((packed));
  uint32_t combinedField;
} __attribute__((packed)) LhPersistArgs_t;

static void lhPersistDataWorker(void* arg) {
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08e      	sub	sp, #56	; 0x38
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_DECK_LIGHTHOUSE
  LhPersistArgs_t* args = (LhPersistArgs_t*) &arg;
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30

  bool result = true;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	e01f      	b.n	8003ab6 <lhPersistDataWorker+0x58>
    uint16_t mask = 1 << baseStation;
 8003a76:	2201      	movs	r2, #1
 8003a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    bool storeGeo = (args->geoDataBsField & mask) != 0;
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    bool storeCalibration = (args->calibrationDataBsField & mask) != 0;
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	885b      	ldrh	r3, [r3, #2]
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  for (int baseStation = 0; baseStation < CONFIG_DECK_LIGHTHOUSE_MAX_N_BS; baseStation++) {
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	dddc      	ble.n	8003a76 <lhPersistDataWorker+0x18>

  }
#else
  bool result = false;
#endif
  CRTPPacket response = {
 8003abc:	f107 0308 	add.w	r3, r7, #8
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f019 fa77 	bl	801cfb8 <memset>
 8003aca:	2302      	movs	r3, #2
 8003acc:	723b      	strb	r3, [r7, #8]
 8003ace:	7a7b      	ldrb	r3, [r7, #9]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f362 0301 	bfi	r3, r2, #0, #2
 8003ad6:	727b      	strb	r3, [r7, #9]
 8003ad8:	7a7b      	ldrb	r3, [r7, #9]
 8003ada:	2206      	movs	r2, #6
 8003adc:	f362 1307 	bfi	r3, r2, #4, #4
 8003ae0:	727b      	strb	r3, [r7, #9]
 8003ae2:	230b      	movs	r3, #11
 8003ae4:	72bb      	strb	r3, [r7, #10]
 8003ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aea:	72fb      	strb	r3, [r7, #11]
    .channel = GENERIC_TYPE,
    .size = 2,
    .data = {LH_PERSIST_DATA, result}
  };

  crtpSendPacketBlock(&response);
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd fdd1 	bl	8001698 <crtpSendPacketBlock>
}
 8003af6:	bf00      	nop
 8003af8:	3738      	adds	r7, #56	; 0x38
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <lhPersistDataHandler>:

static void lhPersistDataHandler(CRTPPacket* pk) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if (pk->size >= (1 + sizeof(LhPersistArgs_t))) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d908      	bls.n	8003b22 <lhPersistDataHandler+0x22>
    LhPersistArgs_t* args = (LhPersistArgs_t*) &pk->data[1];
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3303      	adds	r3, #3
 8003b14:	60fb      	str	r3, [r7, #12]
    workerSchedule(lhPersistDataWorker, (void*)args->combinedField);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4803      	ldr	r0, [pc, #12]	; (8003b2c <lhPersistDataHandler+0x2c>)
 8003b1e:	f00a f919 	bl	800dd54 <workerSchedule>
  }
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	08003a5f 	.word	0x08003a5f

08003b30 <genericLocHandle>:

static void genericLocHandle(CRTPPacket* pk)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  const uint8_t type = pk->data[0];
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	789b      	ldrb	r3, [r3, #2]
 8003b3c:	73fb      	strb	r3, [r7, #15]
  if (pk->size < 1) return;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d034      	beq.n	8003bb0 <genericLocHandle+0x80>

  switch (type) {
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	3b02      	subs	r3, #2
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	d832      	bhi.n	8003bb4 <genericLocHandle+0x84>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <genericLocHandle+0x24>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b8d 	.word	0x08003b8d
 8003b60:	08003bb5 	.word	0x08003bb5
 8003b64:	08003bb5 	.word	0x08003bb5
 8003b68:	08003bb5 	.word	0x08003bb5
 8003b6c:	08003b99 	.word	0x08003b99
 8003b70:	08003ba1 	.word	0x08003ba1
 8003b74:	08003bb5 	.word	0x08003bb5
 8003b78:	08003ba9 	.word	0x08003ba9
    case LPS_SHORT_LPP_PACKET:
      lpsShortLppPacketHandler(pk);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff47 	bl	8003a10 <lpsShortLppPacketHandler>
      break;
 8003b82:	e018      	b.n	8003bb6 <genericLocHandle+0x86>
    case EMERGENCY_STOP:
      isEmergencyStopRequested = true;
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <genericLocHandle+0x8c>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
      break;
 8003b8a:	e014      	b.n	8003bb6 <genericLocHandle+0x86>
    case EMERGENCY_STOP_WATCHDOG:
      emergencyStopWatchdogNotificationTick = xTaskGetTickCount();
 8003b8c:	f015 fea4 	bl	80198d8 <xTaskGetTickCount>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <genericLocHandle+0x90>)
 8003b94:	6013      	str	r3, [r2, #0]
      break;
 8003b96:	e00e      	b.n	8003bb6 <genericLocHandle+0x86>
    case EXT_POSE:
      extPoseHandler(pk);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fe3b 	bl	8003814 <extPoseHandler>
      break;
 8003b9e:	e00a      	b.n	8003bb6 <genericLocHandle+0x86>
    case EXT_POSE_PACKED:
      extPosePackedHandler(pk);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fe77 	bl	8003894 <extPosePackedHandler>
      break;
 8003ba6:	e006      	b.n	8003bb6 <genericLocHandle+0x86>
    case LH_PERSIST_DATA:
      lhPersistDataHandler(pk);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ffa9 	bl	8003b00 <lhPersistDataHandler>
      break;
 8003bae:	e002      	b.n	8003bb6 <genericLocHandle+0x86>
  if (pk->size < 1) return;
 8003bb0:	bf00      	nop
 8003bb2:	e000      	b.n	8003bb6 <genericLocHandle+0x86>
    default:
      // Nothing here
      break;
 8003bb4:	bf00      	nop
  }
}
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	2000691a 	.word	0x2000691a
 8003bc0:	2000691c 	.word	0x2000691c

08003bc4 <extPositionPackedHandler>:

static void extPositionPackedHandler(CRTPPacket* pk)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint8_t numItems = pk->size / sizeof(extPositionPackedItem);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <extPositionPackedHandler+0xe4>)
 8003bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd6:	1ad2      	subs	r2, r2, r3
 8003bd8:	0852      	lsrs	r2, r2, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	73bb      	strb	r3, [r7, #14]
  for (uint8_t i = 0; i < numItems; ++i) {
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]
 8003be4:	e056      	b.n	8003c94 <extPositionPackedHandler+0xd0>
    const extPositionPackedItem* item = (const extPositionPackedItem*)&pk->data[i * sizeof(extPositionPackedItem)];
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	60bb      	str	r3, [r7, #8]
    ext_pos.x = item->x / 1000.0f;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c06:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003cac <extPositionPackedHandler+0xe8>
 8003c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <extPositionPackedHandler+0xec>)
 8003c10:	edc3 7a00 	vstr	s15, [r3]
    ext_pos.y = item->y / 1000.0f;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8003c1a:	b21b      	sxth	r3, r3
 8003c1c:	ee07 3a90 	vmov	s15, r3
 8003c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c24:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003cac <extPositionPackedHandler+0xe8>
 8003c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <extPositionPackedHandler+0xec>)
 8003c2e:	edc3 7a01 	vstr	s15, [r3, #4]
    ext_pos.z = item->z / 1000.0f;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c42:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003cac <extPositionPackedHandler+0xe8>
 8003c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c4a:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <extPositionPackedHandler+0xec>)
 8003c4c:	edc3 7a02 	vstr	s15, [r3, #8]
    ext_pos.stdDev = extPosStdDev;
 8003c50:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <extPositionPackedHandler+0xf0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <extPositionPackedHandler+0xec>)
 8003c56:	60d3      	str	r3, [r2, #12]
    ext_pos.source = MeasurementSourceLocationService;
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <extPositionPackedHandler+0xec>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	741a      	strb	r2, [r3, #16]
    if (item->id == my_id) {
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <extPositionPackedHandler+0xf4>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d10b      	bne.n	8003c82 <extPositionPackedHandler+0xbe>
      updateLogFromExtPos();
 8003c6a:	f7ff fd8b 	bl	8003784 <updateLogFromExtPos>
      estimatorEnqueuePosition(&ext_pos);
 8003c6e:	4810      	ldr	r0, [pc, #64]	; (8003cb0 <extPositionPackedHandler+0xec>)
 8003c70:	f7ff fc98 	bl	80035a4 <estimatorEnqueuePosition>
      tickOfLastPacket = xTaskGetTickCount();
 8003c74:	f015 fe30 	bl	80198d8 <xTaskGetTickCount>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <extPositionPackedHandler+0xf8>)
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	e005      	b.n	8003c8e <extPositionPackedHandler+0xca>
    }
    else {
      peerLocalizationTellPosition(item->id, &ext_pos);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	490a      	ldr	r1, [pc, #40]	; (8003cb0 <extPositionPackedHandler+0xec>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fd fa6d 	bl	8001168 <peerLocalizationTellPosition>
  for (uint8_t i = 0; i < numItems; ++i) {
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3301      	adds	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	7bbb      	ldrb	r3, [r7, #14]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d3a4      	bcc.n	8003be6 <extPositionPackedHandler+0x22>
    }
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24924925 	.word	0x24924925
 8003cac:	447a0000 	.word	0x447a0000
 8003cb0:	200068dc 	.word	0x200068dc
 8003cb4:	20000074 	.word	0x20000074
 8003cb8:	20006917 	.word	0x20006917
 8003cbc:	20006918 	.word	0x20006918

08003cc0 <crtpserviceInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(crtpSrvTask, CRTP_SRV_TASK_STACKSIZE);

static void crtpSrvTask(void*);

void crtpserviceInit(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af04      	add	r7, sp, #16
  if (isInit)
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <crtpserviceInit+0x38>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d110      	bne.n	8003cf0 <crtpserviceInit+0x30>
    return;

  //Start the task
  STATIC_MEM_TASK_CREATE(crtpSrvTask, crtpSrvTask, CRTP_SRV_TASK_NAME, NULL, CRTP_SRV_TASK_PRI);
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <crtpserviceInit+0x3c>)
 8003cd4:	9302      	str	r3, [sp, #8]
 8003cd6:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <crtpserviceInit+0x40>)
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4908      	ldr	r1, [pc, #32]	; (8003d04 <crtpserviceInit+0x44>)
 8003ce2:	4809      	ldr	r0, [pc, #36]	; (8003d08 <crtpserviceInit+0x48>)
 8003ce4:	f015 fa82 	bl	80191ec <xTaskCreateStatic>

  isInit = true;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <crtpserviceInit+0x38>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e000      	b.n	8003cf2 <crtpserviceInit+0x32>
    return;
 8003cf0:	bf00      	nop
}
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20006920 	.word	0x20006920
 8003cfc:	200019ec 	.word	0x200019ec
 8003d00:	200017ec 	.word	0x200017ec
 8003d04:	08021c68 	.word	0x08021c68
 8003d08:	08003d0d 	.word	0x08003d0d

08003d0c <crtpSrvTask>:
{
  return isInit;
}

static void crtpSrvTask(void* prm)
{
 8003d0c:	b5b0      	push	{r4, r5, r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_LINK);
 8003d14:	200f      	movs	r0, #15
 8003d16:	f7fd fb8f 	bl	8001438 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8003d1a:	491f      	ldr	r1, [pc, #124]	; (8003d98 <crtpSrvTask+0x8c>)
 8003d1c:	200f      	movs	r0, #15
 8003d1e:	f7fd fbbb 	bl	8001498 <crtpReceivePacketBlock>

    switch (p.channel)
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <crtpSrvTask+0x8c>)
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d02f      	beq.n	8003d90 <crtpSrvTask+0x84>
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	dc2f      	bgt.n	8003d94 <crtpSrvTask+0x88>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <crtpSrvTask+0x32>
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d00d      	beq.n	8003d58 <crtpSrvTask+0x4c>
        break;
      case linkSink:
        /* Ignore packet */
        break;
      default:
        break;
 8003d3c:	e02a      	b.n	8003d94 <crtpSrvTask+0x88>
        if (echoDelay > 0) {
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <crtpSrvTask+0x90>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <crtpSrvTask+0x44>
          vTaskDelay(M2T(echoDelay));
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <crtpSrvTask+0x90>)
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f015 fc06 	bl	801955c <vTaskDelay>
        crtpSendPacketBlock(&p);
 8003d50:	4811      	ldr	r0, [pc, #68]	; (8003d98 <crtpSrvTask+0x8c>)
 8003d52:	f7fd fca1 	bl	8001698 <crtpSendPacketBlock>
        break;
 8003d56:	e01e      	b.n	8003d96 <crtpSrvTask+0x8a>
        p.size = CRTP_MAX_DATA_SIZE;
 8003d58:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <crtpSrvTask+0x8c>)
 8003d5a:	221e      	movs	r2, #30
 8003d5c:	701a      	strb	r2, [r3, #0]
        bzero(p.data, CRTP_MAX_DATA_SIZE);
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <crtpSrvTask+0x94>)
 8003d60:	4618      	mov	r0, r3
 8003d62:	231e      	movs	r3, #30
 8003d64:	461a      	mov	r2, r3
 8003d66:	2100      	movs	r1, #0
 8003d68:	f019 f926 	bl	801cfb8 <memset>
        strcpy((char*)p.data, "Bitcraze Crazyflie");
 8003d6c:	4a0c      	ldr	r2, [pc, #48]	; (8003da0 <crtpSrvTask+0x94>)
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <crtpSrvTask+0x98>)
 8003d70:	4615      	mov	r5, r2
 8003d72:	461c      	mov	r4, r3
 8003d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d76:	6028      	str	r0, [r5, #0]
 8003d78:	6069      	str	r1, [r5, #4]
 8003d7a:	60aa      	str	r2, [r5, #8]
 8003d7c:	60eb      	str	r3, [r5, #12]
 8003d7e:	8823      	ldrh	r3, [r4, #0]
 8003d80:	78a2      	ldrb	r2, [r4, #2]
 8003d82:	822b      	strh	r3, [r5, #16]
 8003d84:	4613      	mov	r3, r2
 8003d86:	74ab      	strb	r3, [r5, #18]
        crtpSendPacketBlock(&p);
 8003d88:	4803      	ldr	r0, [pc, #12]	; (8003d98 <crtpSrvTask+0x8c>)
 8003d8a:	f7fd fc85 	bl	8001698 <crtpSendPacketBlock>
        break;
 8003d8e:	e002      	b.n	8003d96 <crtpSrvTask+0x8a>
        break;
 8003d90:	bf00      	nop
 8003d92:	e7c2      	b.n	8003d1a <crtpSrvTask+0xe>
        break;
 8003d94:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_LINK, &p);
 8003d96:	e7c0      	b.n	8003d1a <crtpSrvTask+0xe>
 8003d98:	20006924 	.word	0x20006924
 8003d9c:	20006922 	.word	0x20006922
 8003da0:	20006926 	.word	0x20006926
 8003da4:	08021c74 	.word	0x08021c74

08003da8 <platformserviceInit>:
static void platformSrvTask(void*);
static void platformCommandProcess(CRTPPacket *p);
static void versionCommandProcess(CRTPPacket *p);

void platformserviceInit(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af04      	add	r7, sp, #16
  if (isInit)
 8003dae:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <platformserviceInit+0x3c>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d112      	bne.n	8003ddc <platformserviceInit+0x34>
    return;

  appchannelInit();
 8003db6:	f7fd fa3d 	bl	8001234 <appchannelInit>

  //Start the task
  STATIC_MEM_TASK_CREATE(platformSrvTask, platformSrvTask, PLATFORM_SRV_TASK_NAME, NULL, PLATFORM_SRV_TASK_PRI);
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <platformserviceInit+0x40>)
 8003dc0:	9302      	str	r3, [sp, #8]
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <platformserviceInit+0x44>)
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	4908      	ldr	r1, [pc, #32]	; (8003df0 <platformserviceInit+0x48>)
 8003dce:	4809      	ldr	r0, [pc, #36]	; (8003df4 <platformserviceInit+0x4c>)
 8003dd0:	f015 fa0c 	bl	80191ec <xTaskCreateStatic>

  isInit = true;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <platformserviceInit+0x3c>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e000      	b.n	8003dde <platformserviceInit+0x36>
    return;
 8003ddc:	bf00      	nop
}
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20006944 	.word	0x20006944
 8003de8:	20001ca4 	.word	0x20001ca4
 8003dec:	20001aa4 	.word	0x20001aa4
 8003df0:	08021cac 	.word	0x08021cac
 8003df4:	08003df9 	.word	0x08003df9

08003df8 <platformSrvTask>:
{
  return isInit;
}

static void platformSrvTask(void* prm)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  static CRTPPacket p;

  crtpInitTaskQueue(CRTP_PORT_PLATFORM);
 8003e00:	200d      	movs	r0, #13
 8003e02:	f7fd fb19 	bl	8001438 <crtpInitTaskQueue>

  while(1) {
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 8003e06:	4911      	ldr	r1, [pc, #68]	; (8003e4c <platformSrvTask+0x54>)
 8003e08:	200d      	movs	r0, #13
 8003e0a:	f7fd fb45 	bl	8001498 <crtpReceivePacketBlock>

    switch (p.channel)
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <platformSrvTask+0x54>)
 8003e10:	785b      	ldrb	r3, [r3, #1]
 8003e12:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d011      	beq.n	8003e40 <platformSrvTask+0x48>
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	dc13      	bgt.n	8003e48 <platformSrvTask+0x50>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <platformSrvTask+0x32>
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d007      	beq.n	8003e38 <platformSrvTask+0x40>
        break;
      case appChannel:
        appchannelIncomingPacket(&p);
        break;
      default:
        break;
 8003e28:	e00e      	b.n	8003e48 <platformSrvTask+0x50>
        platformCommandProcess(&p);
 8003e2a:	4808      	ldr	r0, [pc, #32]	; (8003e4c <platformSrvTask+0x54>)
 8003e2c:	f000 f810 	bl	8003e50 <platformCommandProcess>
        crtpSendPacketBlock(&p);
 8003e30:	4806      	ldr	r0, [pc, #24]	; (8003e4c <platformSrvTask+0x54>)
 8003e32:	f7fd fc31 	bl	8001698 <crtpSendPacketBlock>
        break;
 8003e36:	e008      	b.n	8003e4a <platformSrvTask+0x52>
        versionCommandProcess(&p);
 8003e38:	4804      	ldr	r0, [pc, #16]	; (8003e4c <platformSrvTask+0x54>)
 8003e3a:	f000 f839 	bl	8003eb0 <versionCommandProcess>
        break;
 8003e3e:	e004      	b.n	8003e4a <platformSrvTask+0x52>
        appchannelIncomingPacket(&p);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <platformSrvTask+0x54>)
 8003e42:	f7fd fa13 	bl	800126c <appchannelIncomingPacket>
        break;
 8003e46:	e000      	b.n	8003e4a <platformSrvTask+0x52>
        break;
 8003e48:	bf00      	nop
    crtpReceivePacketBlock(CRTP_PORT_PLATFORM, &p);
 8003e4a:	e7dc      	b.n	8003e06 <platformSrvTask+0xe>
 8003e4c:	20006948 	.word	0x20006948

08003e50 <platformCommandProcess>:
    }
  }
}

static void platformCommandProcess(CRTPPacket *p)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint8_t command = p->data[0];
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	789b      	ldrb	r3, [r3, #2]
 8003e5c:	75fb      	strb	r3, [r7, #23]
  uint8_t *data = &p->data[1];
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3303      	adds	r3, #3
 8003e62:	613b      	str	r3, [r7, #16]

  switch (command) {
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <platformCommandProcess+0x20>
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d00e      	beq.n	8003e8c <platformCommandProcess+0x3c>
//      data[1] = supervisorIsArmed();
      p->size = 2;
      break;
    }
    default:
      break;
 8003e6e:	e018      	b.n	8003ea2 <platformCommandProcess+0x52>
      slp.type = SYSLINK_RADIO_CONTWAVE;
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <platformCommandProcess+0x5c>)
 8003e72:	2203      	movs	r2, #3
 8003e74:	701a      	strb	r2, [r3, #0]
      slp.length = 1;
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <platformCommandProcess+0x5c>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	705a      	strb	r2, [r3, #1]
      slp.data[0] = data[0];
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <platformCommandProcess+0x5c>)
 8003e82:	709a      	strb	r2, [r3, #2]
      syslinkSendPacket(&slp);
 8003e84:	4809      	ldr	r0, [pc, #36]	; (8003eac <platformCommandProcess+0x5c>)
 8003e86:	f000 faad 	bl	80043e4 <syslinkSendPacket>
      break;
 8003e8a:	e00a      	b.n	8003ea2 <platformCommandProcess+0x52>
      const bool doArm = data[0];
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]
      p->size = 2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	701a      	strb	r2, [r3, #0]
      break;
 8003ea0:	bf00      	nop
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20006968 	.word	0x20006968

08003eb0 <versionCommandProcess>:
  p->channel = appChannel;
  return crtpSendPacketBlock(p);
}

static void versionCommandProcess(CRTPPacket *p)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  switch (p->data[0]) {
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	789b      	ldrb	r3, [r3, #2]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d032      	beq.n	8003f26 <versionCommandProcess+0x76>
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	dc4f      	bgt.n	8003f64 <versionCommandProcess+0xb4>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <versionCommandProcess+0x1e>
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d00b      	beq.n	8003ee4 <versionCommandProcess+0x34>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
      crtpSendPacketBlock(p);
      }
      break;
    default:
      break;
 8003ecc:	e04a      	b.n	8003f64 <versionCommandProcess+0xb4>
      *(int*)&p->data[1] = CRTP_PROTOCOL_VERSION;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3303      	adds	r3, #3
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	601a      	str	r2, [r3, #0]
      p->size = 5;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2205      	movs	r2, #5
 8003eda:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7fd fbdb 	bl	8001698 <crtpSendPacketBlock>
      break;
 8003ee2:	e040      	b.n	8003f66 <versionCommandProcess+0xb6>
      strncpy((char*)&p->data[1], V_STAG, CRTP_MAX_DATA_SIZE-1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3303      	adds	r3, #3
 8003ee8:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <versionCommandProcess+0xc0>)
 8003eea:	6811      	ldr	r1, [r2, #0]
 8003eec:	221d      	movs	r2, #29
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f019 f886 	bl	801d000 <strncpy>
      p->size = (strlen(V_STAG)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(V_STAG)+1;
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <versionCommandProcess+0xc0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc f9c9 	bl	8000290 <strlen>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b1d      	cmp	r3, #29
 8003f02:	d809      	bhi.n	8003f18 <versionCommandProcess+0x68>
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <versionCommandProcess+0xc0>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc f9c1 	bl	8000290 <strlen>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	e000      	b.n	8003f1a <versionCommandProcess+0x6a>
 8003f18:	221e      	movs	r2, #30
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd fbba 	bl	8001698 <crtpSendPacketBlock>
      break;
 8003f24:	e01f      	b.n	8003f66 <versionCommandProcess+0xb6>
      const char* name = platformConfigGetDeviceTypeName();
 8003f26:	f005 fde7 	bl	8009af8 <platformConfigGetDeviceTypeName>
 8003f2a:	60f8      	str	r0, [r7, #12]
      strncpy((char*)&p->data[1], name, CRTP_MAX_DATA_SIZE-1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3303      	adds	r3, #3
 8003f30:	221d      	movs	r2, #29
 8003f32:	68f9      	ldr	r1, [r7, #12]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f019 f863 	bl	801d000 <strncpy>
      p->size = (strlen(name)>CRTP_MAX_DATA_SIZE-1)?CRTP_MAX_DATA_SIZE:strlen(name)+1;
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7fc f9a8 	bl	8000290 <strlen>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b1d      	cmp	r3, #29
 8003f44:	d807      	bhi.n	8003f56 <versionCommandProcess+0xa6>
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7fc f9a2 	bl	8000290 <strlen>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	e000      	b.n	8003f58 <versionCommandProcess+0xa8>
 8003f56:	221e      	movs	r2, #30
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd fb9b 	bl	8001698 <crtpSendPacketBlock>
      break;
 8003f62:	e000      	b.n	8003f66 <versionCommandProcess+0xb6>
      break;
 8003f64:	bf00      	nop
  }
}
 8003f66:	bf00      	nop
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000c40 	.word	0x20000c40

08003f74 <radiolinkIsConnected>:
static bool isConnected;
static uint32_t lastPacketTick;

static volatile P2PCallback p2p_callback;

static bool radiolinkIsConnected(void) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  return (xTaskGetTickCount() - lastPacketTick) < M2T(RADIO_ACTIVITY_TIMEOUT_MS);
 8003f78:	f015 fcae 	bl	80198d8 <xTaskGetTickCount>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <radiolinkIsConnected+0x24>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	bf94      	ite	ls
 8003f8c:	2301      	movls	r3, #1
 8003f8e:	2300      	movhi	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200069b8 	.word	0x200069b8

08003f9c <radiolinkInit>:
  .receivePacket     = radiolinkReceiveCRTPPacket,
  .isConnected       = radiolinkIsConnected
};

void radiolinkInit(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af02      	add	r7, sp, #8
  if (isInit)
 8003fa2:	4b1f      	ldr	r3, [pc, #124]	; (8004020 <radiolinkInit+0x84>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d136      	bne.n	8004018 <radiolinkInit+0x7c>
    return;

  txQueue = STATIC_MEM_QUEUE_CREATE(txQueue);
 8003faa:	2301      	movs	r3, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	2342      	movs	r3, #66	; 0x42
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <radiolinkInit+0x88>)
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <radiolinkInit+0x8c>)
 8003fba:	f014 fa07 	bl	80183cc <xQueueGenericCreateStatic>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	; (800402c <radiolinkInit+0x90>)
 8003fc2:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(txQueue);
 8003fc4:	4b19      	ldr	r3, [pc, #100]	; (800402c <radiolinkInit+0x90>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <radiolinkInit+0x94>)
 8003fca:	491a      	ldr	r1, [pc, #104]	; (8004034 <radiolinkInit+0x98>)
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f009 fb9f 	bl	800d710 <qmRegisterQueue>
  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 8003fd2:	2305      	movs	r3, #5
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	2320      	movs	r3, #32
 8003fd8:	4619      	mov	r1, r3
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4b16      	ldr	r3, [pc, #88]	; (8004038 <radiolinkInit+0x9c>)
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <radiolinkInit+0xa0>)
 8003fe2:	f014 f9f3 	bl	80183cc <xQueueGenericCreateStatic>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <radiolinkInit+0xa4>)
 8003fea:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <radiolinkInit+0xa4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a14      	ldr	r2, [pc, #80]	; (8004044 <radiolinkInit+0xa8>)
 8003ff2:	4910      	ldr	r1, [pc, #64]	; (8004034 <radiolinkInit+0x98>)
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f009 fb8b 	bl	800d710 <qmRegisterQueue>

  ASSERT(crtpPacketDelivery);
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <radiolinkInit+0xa4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <radiolinkInit+0x70>
 8004002:	225f      	movs	r2, #95	; 0x5f
 8004004:	490b      	ldr	r1, [pc, #44]	; (8004034 <radiolinkInit+0x98>)
 8004006:	480f      	ldr	r0, [pc, #60]	; (8004044 <radiolinkInit+0xa8>)
 8004008:	f006 fc44 	bl	800a894 <assertFail>

  syslinkInit();
 800400c:	f000 f982 	bl	8004314 <syslinkInit>

//  radiolinkSetChannel(configblockGetRadioChannel());
//  radiolinkSetDatarate(configblockGetRadioSpeed());
//  radiolinkSetAddress(configblockGetRadioAddress());

  isInit = true;
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <radiolinkInit+0x84>)
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e000      	b.n	800401a <radiolinkInit+0x7e>
    return;
 8004018:	bf00      	nop
}
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	200069b4 	.word	0x200069b4
 8004024:	20001da0 	.word	0x20001da0
 8004028:	20001d5c 	.word	0x20001d5c
 800402c:	200069ac 	.word	0x200069ac
 8004030:	08021cbc 	.word	0x08021cbc
 8004034:	08021cc4 	.word	0x08021cc4
 8004038:	20001e90 	.word	0x20001e90
 800403c:	20001df0 	.word	0x20001df0
 8004040:	200069b0 	.word	0x200069b0
 8004044:	08021ce4 	.word	0x08021ce4

08004048 <radiolinkTest>:

bool radiolinkTest(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  return syslinkTest();
 800404c:	f000 f9be 	bl	80043cc <syslinkTest>
 8004050:	4603      	mov	r3, r0
}
 8004052:	4618      	mov	r0, r3
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <radiolinkSyslinkDispatch>:
  syslinkSendPacket(&slp);
}


void radiolinkSyslinkDispatch(SyslinkPacket *slp)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b092      	sub	sp, #72	; 0x48
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (slp->type == SYSLINK_RADIO_RAW || slp->type == SYSLINK_RADIO_RAW_BROADCAST) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <radiolinkSyslinkDispatch+0x18>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d104      	bne.n	800407a <radiolinkSyslinkDispatch+0x22>
    lastPacketTick = xTaskGetTickCount();
 8004070:	f015 fc32 	bl	80198d8 <xTaskGetTickCount>
 8004074:	4603      	mov	r3, r0
 8004076:	4a41      	ldr	r2, [pc, #260]	; (800417c <radiolinkSyslinkDispatch+0x124>)
 8004078:	6013      	str	r3, [r2, #0]
  }

  if (slp->type == SYSLINK_RADIO_RAW)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d129      	bne.n	80040d6 <radiolinkSyslinkDispatch+0x7e>
  {
    slp->length--; // Decrease to get CRTP size.
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	3b01      	subs	r3, #1
 8004088:	b2da      	uxtb	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	705a      	strb	r2, [r3, #1]
    // Assert that we are not dropping any packets
    ASSERT(xQueueSend(crtpPacketDelivery, &slp->length, 0) == pdPASS);
 800408e:	4b3c      	ldr	r3, [pc, #240]	; (8004180 <radiolinkSyslinkDispatch+0x128>)
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	1c59      	adds	r1, r3, #1
 8004096:	2300      	movs	r3, #0
 8004098:	2200      	movs	r2, #0
 800409a:	f014 faad 	bl	80185f8 <xQueueGenericSend>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d004      	beq.n	80040ae <radiolinkSyslinkDispatch+0x56>
 80040a4:	22a4      	movs	r2, #164	; 0xa4
 80040a6:	4937      	ldr	r1, [pc, #220]	; (8004184 <radiolinkSyslinkDispatch+0x12c>)
 80040a8:	4837      	ldr	r0, [pc, #220]	; (8004188 <radiolinkSyslinkDispatch+0x130>)
 80040aa:	f006 fbf3 	bl	800a894 <assertFail>
    ledseqRun(&seq_linkUp);
 80040ae:	4837      	ldr	r0, [pc, #220]	; (800418c <radiolinkSyslinkDispatch+0x134>)
 80040b0:	f000 ff32 	bl	8004f18 <ledseqRun>
    // If a radio packet is received, one can be sent
    if (xQueueReceive(txQueue, &txPacket, 0) == pdTRUE)
 80040b4:	4b36      	ldr	r3, [pc, #216]	; (8004190 <radiolinkSyslinkDispatch+0x138>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2200      	movs	r2, #0
 80040ba:	4936      	ldr	r1, [pc, #216]	; (8004194 <radiolinkSyslinkDispatch+0x13c>)
 80040bc:	4618      	mov	r0, r3
 80040be:	f014 fc3d 	bl	801893c <xQueueReceive>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d14f      	bne.n	8004168 <radiolinkSyslinkDispatch+0x110>
    {
      ledseqRun(&seq_linkDown);
 80040c8:	4833      	ldr	r0, [pc, #204]	; (8004198 <radiolinkSyslinkDispatch+0x140>)
 80040ca:	f000 ff25 	bl	8004f18 <ledseqRun>
      syslinkSendPacket(&txPacket);
 80040ce:	4831      	ldr	r0, [pc, #196]	; (8004194 <radiolinkSyslinkDispatch+0x13c>)
 80040d0:	f000 f988 	bl	80043e4 <syslinkSendPacket>
 80040d4:	e048      	b.n	8004168 <radiolinkSyslinkDispatch+0x110>
    }
  } else if (slp->type == SYSLINK_RADIO_RAW_BROADCAST)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d111      	bne.n	8004102 <radiolinkSyslinkDispatch+0xaa>
  {
    slp->length--; // Decrease to get CRTP size.
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	705a      	strb	r2, [r3, #1]
    // broadcasts are best effort, so no need to handle the case where the queue is full
    xQueueSend(crtpPacketDelivery, &slp->length, 0);
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <radiolinkSyslinkDispatch+0x128>)
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	2300      	movs	r3, #0
 80040f4:	2200      	movs	r2, #0
 80040f6:	f014 fa7f 	bl	80185f8 <xQueueGenericSend>
    ledseqRun(&seq_linkUp);
 80040fa:	4824      	ldr	r0, [pc, #144]	; (800418c <radiolinkSyslinkDispatch+0x134>)
 80040fc:	f000 ff0c 	bl	8004f18 <ledseqRun>
 8004100:	e032      	b.n	8004168 <radiolinkSyslinkDispatch+0x110>
    // no ack for broadcasts
  } else if (slp->type == SYSLINK_RADIO_RSSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b04      	cmp	r3, #4
 8004108:	d105      	bne.n	8004116 <radiolinkSyslinkDispatch+0xbe>
  {
    //Extract RSSI sample sent from radio
    memcpy(&rssi, slp->data, sizeof(uint8_t)); //rssi will not change on disconnect
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3302      	adds	r3, #2
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	4b22      	ldr	r3, [pc, #136]	; (800419c <radiolinkSyslinkDispatch+0x144>)
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e028      	b.n	8004168 <radiolinkSyslinkDispatch+0x110>
  } else if (slp->type == SYSLINK_RADIO_P2P_BROADCAST)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b0a      	cmp	r3, #10
 800411c:	d124      	bne.n	8004168 <radiolinkSyslinkDispatch+0x110>
  {
    ledseqRun(&seq_linkUp);
 800411e:	481b      	ldr	r0, [pc, #108]	; (800418c <radiolinkSyslinkDispatch+0x134>)
 8004120:	f000 fefa 	bl	8004f18 <ledseqRun>
    P2PPacket p2pp;
    p2pp.port=slp->data[0];
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	789b      	ldrb	r3, [r3, #2]
 8004128:	72bb      	strb	r3, [r7, #10]
    p2pp.rssi = slp->data[1];
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	78db      	ldrb	r3, [r3, #3]
 800412e:	727b      	strb	r3, [r7, #9]

    const uint8_t p2pDataLength = slp->length - 2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	3b02      	subs	r3, #2
 8004136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    memcpy(&p2pp.data[0], &slp->data[2], p2pDataLength);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	1d19      	adds	r1, r3, #4
 800413e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8004142:	f107 0308 	add.w	r3, r7, #8
 8004146:	3303      	adds	r3, #3
 8004148:	4618      	mov	r0, r3
 800414a:	f019 f83a 	bl	801d1c2 <memcpy>
    p2pp.size = p2pDataLength;
 800414e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004152:	723b      	strb	r3, [r7, #8]

    if (p2p_callback) {
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <radiolinkSyslinkDispatch+0x148>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <radiolinkSyslinkDispatch+0x110>
        p2p_callback(&p2pp);
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <radiolinkSyslinkDispatch+0x148>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f107 0208 	add.w	r2, r7, #8
 8004164:	4610      	mov	r0, r2
 8004166:	4798      	blx	r3
    }
  }

  isConnected = radiolinkIsConnected();
 8004168:	f7ff ff04 	bl	8003f74 <radiolinkIsConnected>
 800416c:	4603      	mov	r3, r0
 800416e:	461a      	mov	r2, r3
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <radiolinkSyslinkDispatch+0x14c>)
 8004172:	701a      	strb	r2, [r3, #0]
}
 8004174:	bf00      	nop
 8004176:	3748      	adds	r7, #72	; 0x48
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	200069b8 	.word	0x200069b8
 8004180:	200069b0 	.word	0x200069b0
 8004184:	08021cc4 	.word	0x08021cc4
 8004188:	08021cf8 	.word	0x08021cf8
 800418c:	200001d0 	.word	0x200001d0
 8004190:	200069ac 	.word	0x200069ac
 8004194:	200069c0 	.word	0x200069c0
 8004198:	200001e0 	.word	0x200001e0
 800419c:	200069b5 	.word	0x200069b5
 80041a0:	200069bc 	.word	0x200069bc
 80041a4:	200069b6 	.word	0x200069b6

080041a8 <radiolinkReceiveCRTPPacket>:

static int radiolinkReceiveCRTPPacket(CRTPPacket *p)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <radiolinkReceiveCRTPPacket+0x2c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2264      	movs	r2, #100	; 0x64
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f014 fbbf 	bl	801893c <xQueueReceive>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <radiolinkReceiveCRTPPacket+0x20>
  {
    return 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e001      	b.n	80041cc <radiolinkReceiveCRTPPacket+0x24>
  }

  return -1;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200069b0 	.word	0x200069b0

080041d8 <radiolinkSendCRTPPacket>:
{
    p2p_callback = cb;
}

static int radiolinkSendCRTPPacket(CRTPPacket *p)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  static SyslinkPacket slp;

  ASSERT(p->size <= CRTP_MAX_DATA_SIZE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b1e      	cmp	r3, #30
 80041e6:	d904      	bls.n	80041f2 <radiolinkSendCRTPPacket+0x1a>
 80041e8:	22dd      	movs	r2, #221	; 0xdd
 80041ea:	4913      	ldr	r1, [pc, #76]	; (8004238 <radiolinkSendCRTPPacket+0x60>)
 80041ec:	4813      	ldr	r0, [pc, #76]	; (800423c <radiolinkSendCRTPPacket+0x64>)
 80041ee:	f006 fb51 	bl	800a894 <assertFail>

  slp.type = SYSLINK_RADIO_RAW;
 80041f2:	4b13      	ldr	r3, [pc, #76]	; (8004240 <radiolinkSendCRTPPacket+0x68>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
  slp.length = p->size + 1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <radiolinkSendCRTPPacket+0x68>)
 8004202:	705a      	strb	r2, [r3, #1]
  memcpy(slp.data, &p->header, p->size + 1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	1c59      	adds	r1, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	461a      	mov	r2, r3
 8004210:	480c      	ldr	r0, [pc, #48]	; (8004244 <radiolinkSendCRTPPacket+0x6c>)
 8004212:	f018 ffd6 	bl	801d1c2 <memcpy>

  if (xQueueSend(txQueue, &slp, M2T(100)) == pdTRUE)
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <radiolinkSendCRTPPacket+0x70>)
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	2264      	movs	r2, #100	; 0x64
 800421e:	4908      	ldr	r1, [pc, #32]	; (8004240 <radiolinkSendCRTPPacket+0x68>)
 8004220:	f014 f9ea 	bl	80185f8 <xQueueGenericSend>
 8004224:	4603      	mov	r3, r0
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <radiolinkSendCRTPPacket+0x56>
  {
    return true;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <radiolinkSendCRTPPacket+0x58>
  }

  return false;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	08021cc4 	.word	0x08021cc4
 800423c:	08021d34 	.word	0x08021d34
 8004240:	20006a04 	.word	0x20006a04
 8004244:	20006a06 	.word	0x20006a06
 8004248:	200069ac 	.word	0x200069ac

0800424c <radiolinkGetLink>:
  return true;
}


struct crtpLinkOperations * radiolinkGetLink()
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return &radiolinkOp;
 8004250:	4b02      	ldr	r3, [pc, #8]	; (800425c <radiolinkGetLink+0x10>)
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	2000007c 	.word	0x2000007c

08004260 <radiolinkSetEnable>:

static int radiolinkSetEnable(bool enable)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  return 0;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <syslinkTask>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(syslinkTask, SYSLINK_TASK_STACKSIZE);

/* Syslink task, handles communication between nrf and stm and dispatch messages
 */
static void syslinkTask(void *param)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b094      	sub	sp, #80	; 0x50
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  SyslinkPacket slp;
  while(1)
  {
    uartslkGetPacketBlocking(&slp);
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4618      	mov	r0, r3
 8004286:	f001 fe8d 	bl	8005fa4 <uartslkGetPacketBlocking>
    syslinkRouteIncommingPacket(&slp);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f802 	bl	8004298 <syslinkRouteIncommingPacket>
    uartslkGetPacketBlocking(&slp);
 8004294:	e7f4      	b.n	8004280 <syslinkTask+0x8>
	...

08004298 <syslinkRouteIncommingPacket>:
  }
}

static void syslinkRouteIncommingPacket(SyslinkPacket *slp)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint8_t groupType;

  groupType = slp->type & SYSLINK_GROUP_MASK;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f023 030f 	bic.w	r3, r3, #15
 80042a8:	73fb      	strb	r3, [r7, #15]

  switch (groupType)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2bf0      	cmp	r3, #240	; 0xf0
 80042ae:	d01e      	beq.n	80042ee <syslinkRouteIncommingPacket+0x56>
 80042b0:	2bf0      	cmp	r3, #240	; 0xf0
 80042b2:	dc20      	bgt.n	80042f6 <syslinkRouteIncommingPacket+0x5e>
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d016      	beq.n	80042e6 <syslinkRouteIncommingPacket+0x4e>
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	dc1c      	bgt.n	80042f6 <syslinkRouteIncommingPacket+0x5e>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d00e      	beq.n	80042de <syslinkRouteIncommingPacket+0x46>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	dc18      	bgt.n	80042f6 <syslinkRouteIncommingPacket+0x5e>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <syslinkRouteIncommingPacket+0x36>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d004      	beq.n	80042d6 <syslinkRouteIncommingPacket+0x3e>
 80042cc:	e013      	b.n	80042f6 <syslinkRouteIncommingPacket+0x5e>
  {
    case SYSLINK_RADIO_GROUP:
      radiolinkSyslinkDispatch(slp);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fec2 	bl	8004058 <radiolinkSyslinkDispatch>
      break;
 80042d4:	e017      	b.n	8004306 <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_PM_GROUP:
      pmSyslinkUpdate(slp);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f001 f92a 	bl	8005530 <pmSyslinkUpdate>
      break;
 80042dc:	e013      	b.n	8004306 <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_OW_GROUP:
      owSyslinkReceive(slp);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f001 f81c 	bl	800531c <owSyslinkReceive>
      break;
 80042e4:	e00f      	b.n	8004306 <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_SYS_GROUP:
      systemSyslinkReceive(slp);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f001 fd80 	bl	8005dec <systemSyslinkReceive>
      break;
 80042ec:	e00b      	b.n	8004306 <syslinkRouteIncommingPacket+0x6e>
    case SYSLINK_DEBUG_GROUP:
      debugSyslinkReceive(slp);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f90c 	bl	800450c <debugSyslinkReceive>
      break;
 80042f4:	e007      	b.n	8004306 <syslinkRouteIncommingPacket+0x6e>
    default:
      DEBUG_PRINT("Unknown packet:%X.\n", slp->type);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	4904      	ldr	r1, [pc, #16]	; (8004310 <syslinkRouteIncommingPacket+0x78>)
 80042fe:	2000      	movs	r0, #0
 8004300:	f006 fa9a 	bl	800a838 <SEGGER_RTT_printf>
      break;
 8004304:	bf00      	nop
  }
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	08021d9c 	.word	0x08021d9c

08004314 <syslinkInit>:
/*
 * Public functions
 */

void syslinkInit()
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b085      	sub	sp, #20
 8004318:	af04      	add	r7, sp, #16
  if(isInit) {
 800431a:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <syslinkInit+0x94>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d13d      	bne.n	800439e <syslinkInit+0x8a>
    return;
  }

  vSemaphoreCreateBinary(syslinkAccess);
 8004322:	2203      	movs	r2, #3
 8004324:	2100      	movs	r1, #0
 8004326:	2001      	movs	r0, #1
 8004328:	f014 f8bc 	bl	80184a4 <xQueueGenericCreate>
 800432c:	4603      	mov	r3, r0
 800432e:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <syslinkInit+0x98>)
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <syslinkInit+0x98>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <syslinkInit+0x34>
 800433a:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <syslinkInit+0x98>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	2200      	movs	r2, #0
 8004342:	2100      	movs	r1, #0
 8004344:	f014 f958 	bl	80185f8 <xQueueGenericSend>

  STATIC_MEM_TASK_CREATE(syslinkTask, syslinkTask, SYSLINK_TASK_NAME, NULL, SYSLINK_TASK_PRI);
 8004348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800434c:	461a      	mov	r2, r3
 800434e:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <syslinkInit+0x9c>)
 8004350:	9302      	str	r3, [sp, #8]
 8004352:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <syslinkInit+0xa0>)
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	2303      	movs	r3, #3
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	4916      	ldr	r1, [pc, #88]	; (80043b8 <syslinkInit+0xa4>)
 800435e:	4817      	ldr	r0, [pc, #92]	; (80043bc <syslinkInit+0xa8>)
 8004360:	f014 ff44 	bl	80191ec <xTaskCreateStatic>

  debugTimer = xTimerCreate( "syslinkTimer", M2T(1000), pdTRUE, NULL, debugHandler );
 8004364:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <syslinkInit+0xac>)
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	2201      	movs	r2, #1
 800436c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004370:	4814      	ldr	r0, [pc, #80]	; (80043c4 <syslinkInit+0xb0>)
 8004372:	f016 fa81 	bl	801a878 <xTimerCreate>
 8004376:	4603      	mov	r3, r0
 8004378:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <syslinkInit+0xb4>)
 800437a:	6013      	str	r3, [r2, #0]
  xTimerStart(debugTimer, M2T(1000));
 800437c:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <syslinkInit+0xb4>)
 800437e:	681c      	ldr	r4, [r3, #0]
 8004380:	f015 faaa 	bl	80198d8 <xTaskGetTickCount>
 8004384:	4602      	mov	r2, r0
 8004386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	2101      	movs	r1, #1
 8004390:	4620      	mov	r0, r4
 8004392:	f016 fb07 	bl	801a9a4 <xTimerGenericCommand>

  isInit = true;
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <syslinkInit+0x94>)
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e000      	b.n	80043a0 <syslinkInit+0x8c>
    return;
 800439e:	bf00      	nop
}
 80043a0:	3704      	adds	r7, #4
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd90      	pop	{r4, r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20006a46 	.word	0x20006a46
 80043ac:	20006a98 	.word	0x20006a98
 80043b0:	200022e0 	.word	0x200022e0
 80043b4:	20001ee0 	.word	0x20001ee0
 80043b8:	08021db0 	.word	0x08021db0
 80043bc:	08004279 	.word	0x08004279
 80043c0:	080044c5 	.word	0x080044c5
 80043c4:	08021db8 	.word	0x08021db8
 80043c8:	20006a90 	.word	0x20006a90

080043cc <syslinkTest>:

bool syslinkTest()
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return isInit;
 80043d0:	4b03      	ldr	r3, [pc, #12]	; (80043e0 <syslinkTest+0x14>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	20006a46 	.word	0x20006a46

080043e4 <syslinkSendPacket>:
  return isInit;
}


int syslinkSendPacket(SyslinkPacket *slp)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  int i = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  int dataSize;
  uint8_t cksum[2] = {0};
 80043f0:	2300      	movs	r3, #0
 80043f2:	81bb      	strh	r3, [r7, #12]

  xSemaphoreTake(syslinkAccess, portMAX_DELAY);
 80043f4:	4b2e      	ldr	r3, [pc, #184]	; (80044b0 <syslinkSendPacket+0xcc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043fc:	4618      	mov	r0, r3
 80043fe:	f014 fb7d 	bl	8018afc <xQueueSemaphoreTake>

  ASSERT(slp->length <= SYSLINK_MTU);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d904      	bls.n	8004414 <syslinkSendPacket+0x30>
 800440a:	2291      	movs	r2, #145	; 0x91
 800440c:	4929      	ldr	r1, [pc, #164]	; (80044b4 <syslinkSendPacket+0xd0>)
 800440e:	482a      	ldr	r0, [pc, #168]	; (80044b8 <syslinkSendPacket+0xd4>)
 8004410:	f006 fa40 	bl	800a894 <assertFail>

  sendBuffer[0] = SYSLINK_START_BYTE1;
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <syslinkSendPacket+0xd8>)
 8004416:	22bc      	movs	r2, #188	; 0xbc
 8004418:	701a      	strb	r2, [r3, #0]
  sendBuffer[1] = SYSLINK_START_BYTE2;
 800441a:	4b28      	ldr	r3, [pc, #160]	; (80044bc <syslinkSendPacket+0xd8>)
 800441c:	22cf      	movs	r2, #207	; 0xcf
 800441e:	705a      	strb	r2, [r3, #1]
  sendBuffer[2] = slp->type;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <syslinkSendPacket+0xd8>)
 8004426:	709a      	strb	r2, [r3, #2]
  sendBuffer[3] = slp->length;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	785a      	ldrb	r2, [r3, #1]
 800442c:	4b23      	ldr	r3, [pc, #140]	; (80044bc <syslinkSendPacket+0xd8>)
 800442e:	70da      	strb	r2, [r3, #3]

  memcpy(&sendBuffer[4], slp->data, slp->length);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1c99      	adds	r1, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	461a      	mov	r2, r3
 800443a:	4821      	ldr	r0, [pc, #132]	; (80044c0 <syslinkSendPacket+0xdc>)
 800443c:	f018 fec1 	bl	801d1c2 <memcpy>
  dataSize = slp->length + 6;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	3306      	adds	r3, #6
 8004446:	613b      	str	r3, [r7, #16]
  // Calculate checksum delux
  for (i = 2; i < dataSize - 2; i++)
 8004448:	2302      	movs	r3, #2
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e00f      	b.n	800446e <syslinkSendPacket+0x8a>
  {
    cksum[0] += sendBuffer[i];
 800444e:	7b3a      	ldrb	r2, [r7, #12]
 8004450:	491a      	ldr	r1, [pc, #104]	; (80044bc <syslinkSendPacket+0xd8>)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	440b      	add	r3, r1
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4413      	add	r3, r2
 800445a:	b2db      	uxtb	r3, r3
 800445c:	733b      	strb	r3, [r7, #12]
    cksum[1] += cksum[0];
 800445e:	7b7a      	ldrb	r2, [r7, #13]
 8004460:	7b3b      	ldrb	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	b2db      	uxtb	r3, r3
 8004466:	737b      	strb	r3, [r7, #13]
  for (i = 2; i < dataSize - 2; i++)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3301      	adds	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3b02      	subs	r3, #2
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	429a      	cmp	r2, r3
 8004476:	dbea      	blt.n	800444e <syslinkSendPacket+0x6a>
  }
  sendBuffer[dataSize-2] = cksum[0];
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	3b02      	subs	r3, #2
 800447c:	7b39      	ldrb	r1, [r7, #12]
 800447e:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <syslinkSendPacket+0xd8>)
 8004480:	54d1      	strb	r1, [r2, r3]
  sendBuffer[dataSize-1] = cksum[1];
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	3b01      	subs	r3, #1
 8004486:	7b79      	ldrb	r1, [r7, #13]
 8004488:	4a0c      	ldr	r2, [pc, #48]	; (80044bc <syslinkSendPacket+0xd8>)
 800448a:	54d1      	strb	r1, [r2, r3]

  uartslkSendDataDmaBlocking(dataSize, sendBuffer);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	490b      	ldr	r1, [pc, #44]	; (80044bc <syslinkSendPacket+0xd8>)
 8004490:	4618      	mov	r0, r3
 8004492:	f001 fd99 	bl	8005fc8 <uartslkSendDataDmaBlocking>

  xSemaphoreGive(syslinkAccess);
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <syslinkSendPacket+0xcc>)
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	2300      	movs	r3, #0
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	f014 f8aa 	bl	80185f8 <xQueueGenericSend>

  return 0;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20006a98 	.word	0x20006a98
 80044b4:	08021dc8 	.word	0x08021dc8
 80044b8:	08021de4 	.word	0x08021de4
 80044bc:	20006a48 	.word	0x20006a48
 80044c0:	20006a4c 	.word	0x20006a4c

080044c4 <debugHandler>:

static void debugHandler(xTimerHandle timer) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  static SyslinkPacket txPacket;

  if (triggerDebugProbe) {
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <debugHandler+0x3c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d011      	beq.n	80044f8 <debugHandler+0x34>
    triggerDebugProbe = 0;
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <debugHandler+0x3c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]

    uartSyslinkDumpDebugProbe();
 80044da:	f001 fdd3 	bl	8006084 <uartSyslinkDumpDebugProbe>
    DEBUG_PRINT("Syslink NRF debug probe initialized\n");
 80044de:	4909      	ldr	r1, [pc, #36]	; (8004504 <debugHandler+0x40>)
 80044e0:	2000      	movs	r0, #0
 80044e2:	f006 f9a9 	bl	800a838 <SEGGER_RTT_printf>

    txPacket.type = SYSLINK_DEBUG_PROBE;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <debugHandler+0x44>)
 80044e8:	22f0      	movs	r2, #240	; 0xf0
 80044ea:	701a      	strb	r2, [r3, #0]
    txPacket.length = 0;
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <debugHandler+0x44>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	705a      	strb	r2, [r3, #1]
    syslinkSendPacket(&txPacket);
 80044f2:	4805      	ldr	r0, [pc, #20]	; (8004508 <debugHandler+0x44>)
 80044f4:	f7ff ff76 	bl	80043e4 <syslinkSendPacket>
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20006a94 	.word	0x20006a94
 8004504:	08021e00 	.word	0x08021e00
 8004508:	20006a9c 	.word	0x20006a9c

0800450c <debugSyslinkReceive>:

static void debugSyslinkReceive(SyslinkPacket *slp) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_DEBUG_PROBE) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2bf0      	cmp	r3, #240	; 0xf0
 800451a:	d137      	bne.n	800458c <debugSyslinkReceive+0x80>
    DEBUG_PRINT("NRF Address received: %d\n", slp->data[0]);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	789b      	ldrb	r3, [r3, #2]
 8004520:	461a      	mov	r2, r3
 8004522:	491c      	ldr	r1, [pc, #112]	; (8004594 <debugSyslinkReceive+0x88>)
 8004524:	2000      	movs	r0, #0
 8004526:	f006 f987 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Chan received: %d\n", slp->data[1]);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	78db      	ldrb	r3, [r3, #3]
 800452e:	461a      	mov	r2, r3
 8004530:	4919      	ldr	r1, [pc, #100]	; (8004598 <debugSyslinkReceive+0x8c>)
 8004532:	2000      	movs	r0, #0
 8004534:	f006 f980 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Rate received: %d\n", slp->data[2]);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	791b      	ldrb	r3, [r3, #4]
 800453c:	461a      	mov	r2, r3
 800453e:	4917      	ldr	r1, [pc, #92]	; (800459c <debugSyslinkReceive+0x90>)
 8004540:	2000      	movs	r0, #0
 8004542:	f006 f979 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF Dropped: %d\n", slp->data[3]);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	795b      	ldrb	r3, [r3, #5]
 800454a:	461a      	mov	r2, r3
 800454c:	4914      	ldr	r1, [pc, #80]	; (80045a0 <debugSyslinkReceive+0x94>)
 800454e:	2000      	movs	r0, #0
 8004550:	f006 f972 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error code: %d\n", slp->data[4]);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	799b      	ldrb	r3, [r3, #6]
 8004558:	461a      	mov	r2, r3
 800455a:	4912      	ldr	r1, [pc, #72]	; (80045a4 <debugSyslinkReceive+0x98>)
 800455c:	2000      	movs	r0, #0
 800455e:	f006 f96b 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart error count: %d\n", slp->data[5]);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	79db      	ldrb	r3, [r3, #7]
 8004566:	461a      	mov	r2, r3
 8004568:	490f      	ldr	r1, [pc, #60]	; (80045a8 <debugSyslinkReceive+0x9c>)
 800456a:	2000      	movs	r0, #0
 800456c:	f006 f964 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 1 fail count: %d\n", slp->data[6]);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7a1b      	ldrb	r3, [r3, #8]
 8004574:	461a      	mov	r2, r3
 8004576:	490d      	ldr	r1, [pc, #52]	; (80045ac <debugSyslinkReceive+0xa0>)
 8004578:	2000      	movs	r0, #0
 800457a:	f006 f95d 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("NRF uart checksum 2 fail count: %d\n", slp->data[7]);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7a5b      	ldrb	r3, [r3, #9]
 8004582:	461a      	mov	r2, r3
 8004584:	490a      	ldr	r1, [pc, #40]	; (80045b0 <debugSyslinkReceive+0xa4>)
 8004586:	2000      	movs	r0, #0
 8004588:	f006 f956 	bl	800a838 <SEGGER_RTT_printf>
  }
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	08021e28 	.word	0x08021e28
 8004598:	08021e44 	.word	0x08021e44
 800459c:	08021e5c 	.word	0x08021e5c
 80045a0:	08021e74 	.word	0x08021e74
 80045a4:	08021e88 	.word	0x08021e88
 80045a8:	08021ea4 	.word	0x08021ea4
 80045ac:	08021ec0 	.word	0x08021ec0
 80045b0:	08021ee4 	.word	0x08021ee4

080045b4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f023 0210 	bic.w	r2, r3, #16
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	605a      	str	r2, [r3, #4]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d101      	bne.n	8004638 <LL_SPI_IsActiveFlag_TXE+0x18>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	330c      	adds	r3, #12
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	460b      	mov	r3, r1
 800466c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	330c      	adds	r3, #12
 8004672:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004690:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004694:	4907      	ldr	r1, [pc, #28]	; (80046b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4313      	orrs	r3, r2
 800469a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800469e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4013      	ands	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	bf00      	nop
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	40023800 	.word	0x40023800

080046b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80046c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046c4:	4907      	ldr	r1, [pc, #28]	; (80046e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80046ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4013      	ands	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40023800 	.word	0x40023800

080046e8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	619a      	str	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	041a      	lsls	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	619a      	str	r2, [r3, #24]
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b090      	sub	sp, #64	; 0x40
 8004728:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800472a:	f107 0318 	add.w	r3, r7, #24
 800472e:	2228      	movs	r2, #40	; 0x28
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f018 fc40 	bl	801cfb8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	463b      	mov	r3, r7
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	60da      	str	r2, [r3, #12]
 8004744:	611a      	str	r2, [r3, #16]
 8004746:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004748:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800474c:	f7ff ffb4 	bl	80046b8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004750:	2001      	movs	r0, #1
 8004752:	f7ff ff99 	bl	8004688 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004756:	2004      	movs	r0, #4
 8004758:	f7ff ff96 	bl	8004688 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800475c:	23e0      	movs	r3, #224	; 0xe0
 800475e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004760:	2302      	movs	r3, #2
 8004762:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004764:	2303      	movs	r3, #3
 8004766:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004770:	2305      	movs	r3, #5
 8004772:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004774:	463b      	mov	r3, r7
 8004776:	4619      	mov	r1, r3
 8004778:	4825      	ldr	r0, [pc, #148]	; (8004810 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800477a:	f010 f8c4 	bl	8014906 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004782:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004786:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004788:	2300      	movs	r3, #0
 800478a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800478c:	2302      	movs	r3, #2
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004790:	2301      	movs	r3, #1
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800479a:	2310      	movs	r3, #16
 800479c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80047a6:	230a      	movs	r3, #10
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80047aa:	f107 0318 	add.w	r3, r7, #24
 80047ae:	4619      	mov	r1, r3
 80047b0:	4818      	ldr	r0, [pc, #96]	; (8004814 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80047b2:	f010 f94c 	bl	8014a4e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80047b6:	2100      	movs	r1, #0
 80047b8:	4816      	ldr	r0, [pc, #88]	; (8004814 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80047ba:	f7ff ff0b 	bl	80045d4 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80047be:	2110      	movs	r1, #16
 80047c0:	4813      	ldr	r0, [pc, #76]	; (8004810 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80047c2:	f7ff ff9f 	bl	8004704 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80047c6:	2310      	movs	r3, #16
 80047c8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80047ca:	2301      	movs	r3, #1
 80047cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80047ce:	2303      	movs	r3, #3
 80047d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80047da:	463b      	mov	r3, r7
 80047dc:	4619      	mov	r1, r3
 80047de:	480c      	ldr	r0, [pc, #48]	; (8004810 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80047e0:	f010 f891 	bl	8014906 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80047e4:	2310      	movs	r3, #16
 80047e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80047e8:	2300      	movs	r3, #0
 80047ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80047ec:	2301      	movs	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80047f0:	463b      	mov	r3, r7
 80047f2:	4619      	mov	r1, r3
 80047f4:	4808      	ldr	r0, [pc, #32]	; (8004818 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80047f6:	f010 f886 	bl	8014906 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80047fa:	4806      	ldr	r0, [pc, #24]	; (8004814 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80047fc:	f7ff feda 	bl	80045b4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8004800:	2110      	movs	r1, #16
 8004802:	4803      	ldr	r0, [pc, #12]	; (8004810 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8004804:	f7ff ff70 	bl	80046e8 <LL_GPIO_SetOutputPin>
}
 8004808:	bf00      	nop
 800480a:	3740      	adds	r7, #64	; 0x40
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40020000 	.word	0x40020000
 8004814:	40013000 	.word	0x40013000
 8004818:	40020800 	.word	0x40020800

0800481c <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8004826:	bf00      	nop
 8004828:	480c      	ldr	r0, [pc, #48]	; (800485c <SPI1_SendByte+0x40>)
 800482a:	f7ff fef9 	bl	8004620 <LL_SPI_IsActiveFlag_TXE>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f9      	beq.n	8004828 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	4619      	mov	r1, r3
 8004838:	4808      	ldr	r0, [pc, #32]	; (800485c <SPI1_SendByte+0x40>)
 800483a:	f7ff ff12 	bl	8004662 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800483e:	bf00      	nop
 8004840:	4806      	ldr	r0, [pc, #24]	; (800485c <SPI1_SendByte+0x40>)
 8004842:	f7ff feda 	bl	80045fa <LL_SPI_IsActiveFlag_RXNE>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f9      	beq.n	8004840 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800484c:	4803      	ldr	r0, [pc, #12]	; (800485c <SPI1_SendByte+0x40>)
 800484e:	f7ff fefa 	bl	8004646 <LL_SPI_ReceiveData8>
 8004852:	4603      	mov	r3, r0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40013000 	.word	0x40013000

08004860 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800486a:	2110      	movs	r1, #16
 800486c:	480b      	ldr	r0, [pc, #44]	; (800489c <ICM20602_Readbyte+0x3c>)
 800486e:	f7ff ff49 	bl	8004704 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004878:	b2db      	uxtb	r3, r3
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ffce 	bl	800481c <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8004880:	2000      	movs	r0, #0
 8004882:	f7ff ffcb 	bl	800481c <SPI1_SendByte>
 8004886:	4603      	mov	r3, r0
 8004888:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800488a:	2110      	movs	r1, #16
 800488c:	4803      	ldr	r0, [pc, #12]	; (800489c <ICM20602_Readbyte+0x3c>)
 800488e:	f7ff ff2b 	bl	80046e8 <LL_GPIO_SetOutputPin>
	
	return val;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40020000 	.word	0x40020000

080048a0 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	460a      	mov	r2, r1
 80048aa:	71fb      	strb	r3, [r7, #7]
 80048ac:	4613      	mov	r3, r2
 80048ae:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80048b0:	2110      	movs	r1, #16
 80048b2:	480b      	ldr	r0, [pc, #44]	; (80048e0 <ICM20602_Writebyte+0x40>)
 80048b4:	f7ff ff26 	bl	8004704 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff ffab 	bl	800481c <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80048c6:	79bb      	ldrb	r3, [r7, #6]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ffa7 	bl	800481c <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80048ce:	2110      	movs	r1, #16
 80048d0:	4803      	ldr	r0, [pc, #12]	; (80048e0 <ICM20602_Writebyte+0x40>)
 80048d2:	f7ff ff09 	bl	80046e8 <LL_GPIO_SetOutputPin>
}
 80048d6:	bf00      	nop
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40020000 	.word	0x40020000

080048e4 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 80048ee:	f107 0308 	add.w	r3, r7, #8
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 80048f8:	463b      	mov	r3, r7
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8004900:	f7ff ff10 	bl	8004724 <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 8004904:	4934      	ldr	r1, [pc, #208]	; (80049d8 <ICM20602_Initialization+0xf4>)
 8004906:	2000      	movs	r0, #0
 8004908:	f005 ff96 	bl	800a838 <SEGGER_RTT_printf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800490c:	2075      	movs	r0, #117	; 0x75
 800490e:	f7ff ffa7 	bl	8004860 <ICM20602_Readbyte>
 8004912:	4603      	mov	r3, r0
 8004914:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b12      	cmp	r3, #18
 800491a:	d106      	bne.n	800492a <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x.................Pass\n", who_am_i);
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	461a      	mov	r2, r3
 8004920:	492e      	ldr	r1, [pc, #184]	; (80049dc <ICM20602_Initialization+0xf8>)
 8004922:	2000      	movs	r0, #0
 8004924:	f005 ff88 	bl	800a838 <SEGGER_RTT_printf>
 8004928:	e012      	b.n	8004950 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	2b12      	cmp	r3, #18
 800492e:	d00f      	beq.n	8004950 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8004930:	2075      	movs	r0, #117	; 0x75
 8004932:	f7ff ff95 	bl	8004860 <ICM20602_Readbyte>
 8004936:	4603      	mov	r3, r0
 8004938:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	2b12      	cmp	r3, #18
 800493e:	d007      	beq.n	8004950 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 is not found: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	2312      	movs	r3, #18
 8004944:	4926      	ldr	r1, [pc, #152]	; (80049e0 <ICM20602_Initialization+0xfc>)
 8004946:	2000      	movs	r0, #0
 8004948:	f005 ff76 	bl	800a838 <SEGGER_RTT_printf>
			return 1; //ERROR
 800494c:	2301      	movs	r3, #1
 800494e:	e03f      	b.n	80049d0 <ICM20602_Initialization+0xec>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	206b      	movs	r0, #107	; 0x6b
 8004954:	f7ff ffa4 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 8004958:	4822      	ldr	r0, [pc, #136]	; (80049e4 <ICM20602_Initialization+0x100>)
 800495a:	f009 feab 	bl	800e6b4 <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800495e:	2101      	movs	r1, #1
 8004960:	206b      	movs	r0, #107	; 0x6b
 8004962:	f7ff ff9d 	bl	80048a0 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(5000000);
 8004966:	481f      	ldr	r0, [pc, #124]	; (80049e4 <ICM20602_Initialization+0x100>)
 8004968:	f009 fea4 	bl	800e6b4 <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 800496c:	2100      	movs	r1, #0
 800496e:	206c      	movs	r0, #108	; 0x6c
 8004970:	f7ff ff96 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 8004974:	481b      	ldr	r0, [pc, #108]	; (80049e4 <ICM20602_Initialization+0x100>)
 8004976:	f009 fe9d 	bl	800e6b4 <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 800497a:	2100      	movs	r1, #0
 800497c:	2019      	movs	r0, #25
 800497e:	f7ff ff8f 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 8004982:	4818      	ldr	r0, [pc, #96]	; (80049e4 <ICM20602_Initialization+0x100>)
 8004984:	f009 fe96 	bl	800e6b4 <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8004988:	2105      	movs	r1, #5
 800498a:	201a      	movs	r0, #26
 800498c:	f7ff ff88 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 8004990:	4814      	ldr	r0, [pc, #80]	; (80049e4 <ICM20602_Initialization+0x100>)
 8004992:	f009 fe8f 	bl	800e6b4 <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8004996:	2118      	movs	r1, #24
 8004998:	201b      	movs	r0, #27
 800499a:	f7ff ff81 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 800499e:	4811      	ldr	r0, [pc, #68]	; (80049e4 <ICM20602_Initialization+0x100>)
 80049a0:	f009 fe88 	bl	800e6b4 <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80049a4:	2118      	movs	r1, #24
 80049a6:	201c      	movs	r0, #28
 80049a8:	f7ff ff7a 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 80049ac:	480d      	ldr	r0, [pc, #52]	; (80049e4 <ICM20602_Initialization+0x100>)
 80049ae:	f009 fe81 	bl	800e6b4 <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80049b2:	2103      	movs	r1, #3
 80049b4:	201d      	movs	r0, #29
 80049b6:	f7ff ff73 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 80049ba:	480a      	ldr	r0, [pc, #40]	; (80049e4 <ICM20602_Initialization+0x100>)
 80049bc:	f009 fe7a 	bl	800e6b4 <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80049c0:	2101      	movs	r1, #1
 80049c2:	2038      	movs	r0, #56	; 0x38
 80049c4:	f7ff ff6c 	bl	80048a0 <ICM20602_Writebyte>
	delay_us(5000000);
 80049c8:	4806      	ldr	r0, [pc, #24]	; (80049e4 <ICM20602_Initialization+0x100>)
 80049ca:	f009 fe73 	bl	800e6b4 <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	08021f28 	.word	0x08021f28
 80049dc:	08021f40 	.word	0x08021f40
 80049e0:	08021f74 	.word	0x08021f74
 80049e4:	004c4b40 	.word	0x004c4b40

080049e8 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
    __asm volatile (
 80049f2:	680a      	ldr	r2, [r1, #0]
 80049f4:	f382 8808 	msr	MSP, r2
 80049f8:	684a      	ldr	r2, [r1, #4]
 80049fa:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 80049fc:	e7fe      	b.n	80049fc <branch_to_bootloader+0x14>
	...

08004a00 <check_enter_bootloader>:
}

void check_enter_bootloader(){
 8004a00:	b5b0      	push	{r4, r5, r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 8004a06:	491d      	ldr	r1, [pc, #116]	; (8004a7c <check_enter_bootloader+0x7c>)
 8004a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a0c:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 8004a10:	4c1a      	ldr	r4, [pc, #104]	; (8004a7c <check_enter_bootloader+0x7c>)
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 8004a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	0028      	movs	r0, r5
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8004a32:	2300      	movs	r3, #0
 8004a34:	4912      	ldr	r1, [pc, #72]	; (8004a80 <check_enter_bootloader+0x80>)
 8004a36:	4411      	add	r1, r2
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	d11a      	bne.n	8004a72 <check_enter_bootloader+0x72>
 8004a3c:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <check_enter_bootloader+0x84>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d014      	beq.n	8004a72 <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <check_enter_bootloader+0x88>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 8004a4e:	683c      	ldr	r4, [r7, #0]
 8004a50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4613      	mov	r3, r2
 8004a62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004a66:	f023 030f 	bic.w	r3, r3, #15
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff ffbb 	bl	80049e8 <branch_to_bootloader>
    }
}
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	2001c000 	.word	0x2001c000
 8004a80:	fffffa5b 	.word	0xfffffa5b
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40013800 	.word	0x40013800

08004a8c <buzzerInit>:




void buzzerInit()
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
	 HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004a90:	2100      	movs	r1, #0
 8004a92:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <buzzerInit+0x18>)
 8004a94:	f00d fdf8 	bl	8012688 <HAL_TIM_PWM_Start>
	 TIM3->PSC= 0;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <buzzerInit+0x1c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000a154 	.word	0x2000a154
 8004aa8:	40000400 	.word	0x40000400

08004aac <buzzerOff>:
{
  return true;
}

void buzzerOff()
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  TIM3->PSC= 0;
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <buzzerOff+0x18>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4803      	ldr	r0, [pc, #12]	; (8004ac8 <buzzerOff+0x1c>)
 8004aba:	f00d fead 	bl	8012818 <HAL_TIM_PWM_Stop>
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	2000a154 	.word	0x2000a154

08004acc <ledRestoreSavedState>:
static uint8_t ledControlBitmask;
static uint8_t ledLastState[LED_NUM];
ledSwitch_t ledSwitchState;

static void ledRestoreSavedState(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
  for (int i = 0; i < LED_NUM; i++)
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	e011      	b.n	8004afc <ledRestoreSavedState+0x30>
  {
    ledSet(i, ledLastState[i]);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	490b      	ldr	r1, [pc, #44]	; (8004b0c <ledRestoreSavedState+0x40>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	440b      	add	r3, r1
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f000 f917 	bl	8004d24 <ledSet>
  for (int i = 0; i < LED_NUM; i++)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3301      	adds	r3, #1
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	ddea      	ble.n	8004ad8 <ledRestoreSavedState+0xc>
  }
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20006ae0 	.word	0x20006ae0

08004b10 <ledSetForce>:

static void ledSetForce(led_t led, bool value)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	460a      	mov	r2, r1
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d832      	bhi.n	8004b8c <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <ledSetForce+0x84>)
 8004b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d10d      	bne.n	8004b4e <ledSetForce+0x3e>
  {
    value = !value;
 8004b32:	79bb      	ldrb	r3, [r7, #6]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f083 0301 	eor.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	71bb      	strb	r3, [r7, #6]
 8004b46:	79bb      	ldrb	r3, [r7, #6]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8004b4e:	79bb      	ldrb	r3, [r7, #6]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <ledSetForce+0x88>)
 8004b58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	4a0f      	ldr	r2, [pc, #60]	; (8004b9c <ledSetForce+0x8c>)
 8004b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2201      	movs	r2, #1
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f00b fd43 	bl	80105f4 <HAL_GPIO_WritePin>
 8004b6e:	e00e      	b.n	8004b8e <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	4a09      	ldr	r2, [pc, #36]	; (8004b98 <ledSetForce+0x88>)
 8004b74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <ledSetForce+0x8c>)
 8004b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2200      	movs	r2, #0
 8004b84:	4619      	mov	r1, r3
 8004b86:	f00b fd35 	bl	80105f4 <HAL_GPIO_WritePin>
 8004b8a:	e000      	b.n	8004b8e <ledSetForce+0x7e>
    return;
 8004b8c:	bf00      	nop
    }

//  }

}
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	200000c0 	.word	0x200000c0
 8004b98:	20000090 	.word	0x20000090
 8004b9c:	200000a8 	.word	0x200000a8

08004ba0 <ledSetSwitch>:

static void ledSetSwitch(ledSwitch_t ledSwitch)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  if (ledSwitchState != ledSwitch)
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <ledSetSwitch+0x38>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	79fa      	ldrb	r2, [r7, #7]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d00c      	beq.n	8004bce <ledSetSwitch+0x2e>
  {
    ledSwitchState = ledSwitch;
 8004bb4:	4a08      	ldr	r2, [pc, #32]	; (8004bd8 <ledSetSwitch+0x38>)
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	7013      	strb	r3, [r2, #0]
    switch (ledSwitch)
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <ledSetSwitch+0x26>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d003      	beq.n	8004bcc <ledSetSwitch+0x2c>
        ledRestoreSavedState();
        break;
      case LED_PARAM_BITMASK:
        break;
      default:
        break;
 8004bc4:	e003      	b.n	8004bce <ledSetSwitch+0x2e>
        ledRestoreSavedState();
 8004bc6:	f7ff ff81 	bl	8004acc <ledRestoreSavedState>
        break;
 8004bca:	e000      	b.n	8004bce <ledSetSwitch+0x2e>
        break;
 8004bcc:	bf00      	nop
    }
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20006ae6 	.word	0x20006ae6

08004bdc <ledBitmaskParamCallback>:

static void ledBitmaskParamCallback(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0

  if (ledControlBitmask & (1 << LED_ENABLE_BITMASK_BIT))
 8004be2:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <ledBitmaskParamCallback+0x60>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	b25b      	sxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da1f      	bge.n	8004c2c <ledBitmaskParamCallback+0x50>
  {
    ledSetSwitch(LED_PARAM_BITMASK);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7ff ffd7 	bl	8004ba0 <ledSetSwitch>
    for (int i = 0; i < LED_NUM; i++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	e015      	b.n	8004c24 <ledBitmaskParamCallback+0x48>
    {
      ledSetForce(i, ledControlBitmask & (1<<i));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <ledBitmaskParamCallback+0x60>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	2101      	movs	r1, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	4003      	ands	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7ff ff79 	bl	8004b10 <ledSetForce>
    for (int i = 0; i < LED_NUM; i++)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3301      	adds	r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	dde6      	ble.n	8004bf8 <ledBitmaskParamCallback+0x1c>
  }
  else
  {
    ledSetSwitch(LED_LEDSEQ);
  }
}
 8004c2a:	e002      	b.n	8004c32 <ledBitmaskParamCallback+0x56>
    ledSetSwitch(LED_LEDSEQ);
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7ff ffb7 	bl	8004ba0 <ledSetSwitch>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20006adf 	.word	0x20006adf

08004c40 <ledInit>:

void ledInit(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 8004c46:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <ledInit+0xd0>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d15b      	bne.n	8004d06 <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4e:	f107 0308 	add.w	r3, r7, #8
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	605a      	str	r2, [r3, #4]
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	4b2c      	ldr	r3, [pc, #176]	; (8004d14 <ledInit+0xd4>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <ledInit+0xd4>)
 8004c68:	f043 0304 	orr.w	r3, r3, #4
 8004c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <ledInit+0xd4>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <ledInit+0xd4>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	4a24      	ldr	r2, [pc, #144]	; (8004d14 <ledInit+0xd4>)
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	6313      	str	r3, [r2, #48]	; 0x30
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <ledInit+0xd4>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	e02a      	b.n	8004cf2 <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <ledInit+0xd8>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <ledInit+0xdc>)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2200      	movs	r2, #0
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f00b fc9f 	bl	80105f4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 8004cb6:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <ledInit+0xdc>)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cbe:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8004ccc:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <ledInit+0xd8>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd4:	f107 0208 	add.w	r2, r7, #8
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f00b faee 	bl	80102bc <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f81c 	bl	8004d24 <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	2b05      	cmp	r3, #5
 8004cf6:	ddd1      	ble.n	8004c9c <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <ledInit+0xe0>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <ledInit+0xd0>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e000      	b.n	8004d08 <ledInit+0xc8>
    return;
 8004d06:	bf00      	nop
}
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20006ade 	.word	0x20006ade
 8004d14:	40023800 	.word	0x40023800
 8004d18:	20000090 	.word	0x20000090
 8004d1c:	200000a8 	.word	0x200000a8
 8004d20:	20006ae6 	.word	0x20006ae6

08004d24 <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	71fb      	strb	r3, [r7, #7]
 8004d30:	4613      	mov	r3, r2
 8004d32:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d904      	bls.n	8004d44 <ledSet+0x20>
 8004d3a:	22e4      	movs	r2, #228	; 0xe4
 8004d3c:	490a      	ldr	r1, [pc, #40]	; (8004d68 <ledSet+0x44>)
 8004d3e:	480b      	ldr	r0, [pc, #44]	; (8004d6c <ledSet+0x48>)
 8004d40:	f005 fda8 	bl	800a894 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <ledSet+0x4c>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8004d4c:	79ba      	ldrb	r2, [r7, #6]
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fedc 	bl	8004b10 <ledSetForce>
  }

  ledLastState[led] = value;
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	79b9      	ldrb	r1, [r7, #6]
 8004d5c:	4a05      	ldr	r2, [pc, #20]	; (8004d74 <ledSet+0x50>)
 8004d5e:	54d1      	strb	r1, [r2, r3]
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	08021fa4 	.word	0x08021fa4
 8004d6c:	08021fc0 	.word	0x08021fc0
 8004d70:	20006ae6 	.word	0x20006ae6
 8004d74:	20006ae0 	.word	0x20006ae0

08004d78 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7ff ffd0 	bl	8004d24 <ledSet>
  ledSet(LED_GREEN_R, 0);
 8004d84:	2100      	movs	r1, #0
 8004d86:	2003      	movs	r0, #3
 8004d88:	f7ff ffcc 	bl	8004d24 <ledSet>
  ledSet(LED_RED_L, 1);
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	2002      	movs	r0, #2
 8004d90:	f7ff ffc8 	bl	8004d24 <ledSet>
  ledSet(LED_RED_R, 1);
 8004d94:	2101      	movs	r1, #1
 8004d96:	2004      	movs	r0, #4
 8004d98:	f7ff ffc4 	bl	8004d24 <ledSet>
  ledSet(LED_BLUE_L, 0);
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7ff ffc0 	bl	8004d24 <ledSet>
}
 8004da4:	bf00      	nop
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <ledseqInit>:
static bool isInit = false;
static bool ledseqEnabled = false;

static void lesdeqCmdTask(void* param);

void ledseqInit() {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af02      	add	r7, sp, #8
  if(isInit) {
 8004dae:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <ledseqInit+0xe4>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d165      	bne.n	8004e82 <ledseqInit+0xda>
    return;
  }

  ledInit();
 8004db6:	f7ff ff43 	bl	8004c40 <ledInit>

  /* Led sequence priority */
  ledseqRegisterSequence(&seq_testPassed);
 8004dba:	4835      	ldr	r0, [pc, #212]	; (8004e90 <ledseqInit+0xe8>)
 8004dbc:	f000 f9f8 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_testFailed);
 8004dc0:	4834      	ldr	r0, [pc, #208]	; (8004e94 <ledseqInit+0xec>)
 8004dc2:	f000 f9f5 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_lowbat);
 8004dc6:	4834      	ldr	r0, [pc, #208]	; (8004e98 <ledseqInit+0xf0>)
 8004dc8:	f000 f9f2 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charged);
 8004dcc:	4833      	ldr	r0, [pc, #204]	; (8004e9c <ledseqInit+0xf4>)
 8004dce:	f000 f9ef 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_charging);
 8004dd2:	4833      	ldr	r0, [pc, #204]	; (8004ea0 <ledseqInit+0xf8>)
 8004dd4:	f000 f9ec 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_calibrated);
 8004dd8:	4832      	ldr	r0, [pc, #200]	; (8004ea4 <ledseqInit+0xfc>)
 8004dda:	f000 f9e9 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_alive);
 8004dde:	4832      	ldr	r0, [pc, #200]	; (8004ea8 <ledseqInit+0x100>)
 8004de0:	f000 f9e6 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkUp);
 8004de4:	4831      	ldr	r0, [pc, #196]	; (8004eac <ledseqInit+0x104>)
 8004de6:	f000 f9e3 	bl	80051b0 <ledseqRegisterSequence>
  ledseqRegisterSequence(&seq_linkDown);
 8004dea:	4831      	ldr	r0, [pc, #196]	; (8004eb0 <ledseqInit+0x108>)
 8004dec:	f000 f9e0 	bl	80051b0 <ledseqRegisterSequence>

  //Initialise the sequences state
  for(int i=0; i<LED_NUM; i++) {
 8004df0:	2300      	movs	r3, #0
 8004df2:	607b      	str	r3, [r7, #4]
 8004df4:	e007      	b.n	8004e06 <ledseqInit+0x5e>
    activeSeq[i] = 0;
 8004df6:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <ledseqInit+0x10c>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3301      	adds	r3, #1
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	ddf4      	ble.n	8004df6 <ledseqInit+0x4e>
  }

  //Init the soft timers that runs the led sequences for each leds
  for(int i=0; i<LED_NUM; i++) {
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	e018      	b.n	8004e44 <ledseqInit+0x9c>
    timer[i] = xTimerCreateStatic("ledseqTimer", (1000), pdFALSE, (void*)i, runLedseq, &timerBuffer[i]);
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	212c      	movs	r1, #44	; 0x2c
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	4926      	ldr	r1, [pc, #152]	; (8004eb8 <ledseqInit+0x110>)
 8004e1e:	440b      	add	r3, r1
 8004e20:	9301      	str	r3, [sp, #4]
 8004e22:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <ledseqInit+0x114>)
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	4613      	mov	r3, r2
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e2e:	4824      	ldr	r0, [pc, #144]	; (8004ec0 <ledseqInit+0x118>)
 8004e30:	f015 fd44 	bl	801a8bc <xTimerCreateStatic>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4923      	ldr	r1, [pc, #140]	; (8004ec4 <ledseqInit+0x11c>)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<LED_NUM; i++) {
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	dde3      	ble.n	8004e12 <ledseqInit+0x6a>
  }

  ledseqMutex = xSemaphoreCreateMutex();
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f013 fba1 	bl	8018592 <xQueueCreateMutex>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <ledseqInit+0x120>)
 8004e54:	6013      	str	r3, [r2, #0]

  ledseqCmdQueue = xQueueCreate(10, sizeof(struct ledseqCmd_s));
 8004e56:	2200      	movs	r2, #0
 8004e58:	2108      	movs	r1, #8
 8004e5a:	200a      	movs	r0, #10
 8004e5c:	f013 fb22 	bl	80184a4 <xQueueGenericCreate>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <ledseqInit+0x124>)
 8004e64:	6013      	str	r3, [r2, #0]
  xTaskCreate(lesdeqCmdTask, LEDSEQCMD_TASK_NAME, LEDSEQCMD_TASK_STACKSIZE, NULL, LEDSEQCMD_TASK_PRI, NULL);
 8004e66:	2300      	movs	r3, #0
 8004e68:	9301      	str	r3, [sp, #4]
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2280      	movs	r2, #128	; 0x80
 8004e72:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <ledseqInit+0x128>)
 8004e74:	4817      	ldr	r0, [pc, #92]	; (8004ed4 <ledseqInit+0x12c>)
 8004e76:	f014 fa0f 	bl	8019298 <xTaskCreate>

  isInit = true;
 8004e7a:	4b04      	ldr	r3, [pc, #16]	; (8004e8c <ledseqInit+0xe4>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	e000      	b.n	8004e84 <ledseqInit+0xdc>
    return;
 8004e82:	bf00      	nop
}
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20006af4 	.word	0x20006af4
 8004e90:	200002b0 	.word	0x200002b0
 8004e94:	200002c0 	.word	0x200002c0
 8004e98:	200000e8 	.word	0x200000e8
 8004e9c:	20000200 	.word	0x20000200
 8004ea0:	20000228 	.word	0x20000228
 8004ea4:	20000180 	.word	0x20000180
 8004ea8:	200001a8 	.word	0x200001a8
 8004eac:	200001d0 	.word	0x200001d0
 8004eb0:	200001e0 	.word	0x200001e0
 8004eb4:	20002398 	.word	0x20002398
 8004eb8:	200023c8 	.word	0x200023c8
 8004ebc:	08005099 	.word	0x08005099
 8004ec0:	08021fe8 	.word	0x08021fe8
 8004ec4:	200023b0 	.word	0x200023b0
 8004ec8:	20006aec 	.word	0x20006aec
 8004ecc:	20006af0 	.word	0x20006af0
 8004ed0:	08021ff4 	.word	0x08021ff4
 8004ed4:	08004ed9 	.word	0x08004ed9

08004ed8 <lesdeqCmdTask>:

static void lesdeqCmdTask(void* param) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  while(1) {
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <lesdeqCmdTask+0x3c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f107 0108 	add.w	r1, r7, #8
 8004ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eec:	4618      	mov	r0, r3
 8004eee:	f013 fd25 	bl	801893c <xQueueReceive>

    switch(command.command) {
 8004ef2:	7a3b      	ldrb	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <lesdeqCmdTask+0x26>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d005      	beq.n	8004f08 <lesdeqCmdTask+0x30>
 8004efc:	e009      	b.n	8004f12 <lesdeqCmdTask+0x3a>
      case run:
        ledseqRunBlocking(command.sequence);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f825 	bl	8004f50 <ledseqRunBlocking>
        break;
 8004f06:	e004      	b.n	8004f12 <lesdeqCmdTask+0x3a>
      case stop:
        ledseqStopBlocking(command.sequence);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f898 	bl	8005040 <ledseqStopBlocking>
        break;
 8004f10:	bf00      	nop
    xQueueReceive(ledseqCmdQueue, &command, portMAX_DELAY);
 8004f12:	e7e5      	b.n	8004ee0 <lesdeqCmdTask+0x8>
 8004f14:	20006af0 	.word	0x20006af0

08004f18 <ledseqRun>:

void ledseqEnable(bool enable) {
  ledseqEnabled = enable;
}

bool ledseqRun(ledseqContext_t *context) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = run;
 8004f20:	2300      	movs	r3, #0
 8004f22:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <ledseqRun+0x34>)
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	f107 0108 	add.w	r1, r7, #8
 8004f30:	2300      	movs	r3, #0
 8004f32:	2200      	movs	r2, #0
 8004f34:	f013 fb60 	bl	80185f8 <xQueueGenericSend>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <ledseqRun+0x2a>
    return true;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <ledseqRun+0x2c>
  }
  return false;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20006af0 	.word	0x20006af0

08004f50 <ledseqRunBlocking>:

void ledseqRunBlocking(ledseqContext_t *context) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	7b1b      	ldrb	r3, [r3, #12]
 8004f5c:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <ledseqRunBlocking+0x5c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f66:	4618      	mov	r0, r3
 8004f68:	f013 fdc8 	bl	8018afc <xQueueSemaphoreTake>
  context->state = 0;  //Reset the seq. to its first step
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 f94f 	bl	8005218 <updateActive>
  xSemaphoreGive(ledseqMutex);
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <ledseqRunBlocking+0x5c>)
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2200      	movs	r2, #0
 8004f82:	2100      	movs	r1, #0
 8004f84:	f013 fb38 	bl	80185f8 <xQueueGenericSend>

  // Run the first step if the new seq is the active sequence
  if(activeSeq[led] == context) {
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <ledseqRunBlocking+0x60>)
 8004f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d106      	bne.n	8004fa4 <ledseqRunBlocking+0x54>
    runLedseq(timer[led]);
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
 8004f98:	4a06      	ldr	r2, [pc, #24]	; (8004fb4 <ledseqRunBlocking+0x64>)
 8004f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f87a 	bl	8005098 <runLedseq>
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20006aec 	.word	0x20006aec
 8004fb0:	20002398 	.word	0x20002398
 8004fb4:	200023b0 	.word	0x200023b0

08004fb8 <ledseqSetChargeLevel>:

void ledseqSetChargeLevel(const float chargeLevel) {
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	ed87 0a01 	vstr	s0, [r7, #4]
  int onTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA * chargeLevel;
 8004fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fc6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005000 <ledseqSetChargeLevel+0x48>
 8004fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd2:	ee17 3a90 	vmov	r3, s15
 8004fd6:	60fb      	str	r3, [r7, #12]
  int offTime = LEDSEQ_CHARGE_CYCLE_TIME_500MA - onTime;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8004fde:	60bb      	str	r3, [r7, #8]

  seq_charging.sequence[0].action = onTime;
 8004fe0:	4b08      	ldr	r3, [pc, #32]	; (8005004 <ledseqSetChargeLevel+0x4c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	605a      	str	r2, [r3, #4]
  seq_charging.sequence[1].action = offTime;
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <ledseqSetChargeLevel+0x4c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	605a      	str	r2, [r3, #4]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	447a0000 	.word	0x447a0000
 8005004:	20000228 	.word	0x20000228

08005008 <ledseqStop>:

bool ledseqStop(ledseqContext_t *context) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  struct ledseqCmd_s command;
  command.command = stop;
 8005010:	2301      	movs	r3, #1
 8005012:	723b      	strb	r3, [r7, #8]
  command.sequence = context;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(ledseqCmdQueue, &command, 0) == pdPASS) {
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <ledseqStop+0x34>)
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	f107 0108 	add.w	r1, r7, #8
 8005020:	2300      	movs	r3, #0
 8005022:	2200      	movs	r2, #0
 8005024:	f013 fae8 	bl	80185f8 <xQueueGenericSend>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <ledseqStop+0x2a>
    return true;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <ledseqStop+0x2c>
  }
  return false;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20006af0 	.word	0x20006af0

08005040 <ledseqStopBlocking>:

void ledseqStopBlocking(ledseqContext_t *context) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  const led_t led = context->led;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7b1b      	ldrb	r3, [r3, #12]
 800504c:	73fb      	strb	r3, [r7, #15]

  xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 800504e:	4b10      	ldr	r3, [pc, #64]	; (8005090 <ledseqStopBlocking+0x50>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005056:	4618      	mov	r0, r3
 8005058:	f013 fd50 	bl	8018afc <xQueueSemaphoreTake>
  context->state = LEDSEQ_STOP;  //Stop the seq.
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005062:	609a      	str	r2, [r3, #8]
  updateActive(led);
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f8d6 	bl	8005218 <updateActive>
  xSemaphoreGive(ledseqMutex);
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <ledseqStopBlocking+0x50>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	2200      	movs	r2, #0
 8005074:	2100      	movs	r1, #0
 8005076:	f013 fabf 	bl	80185f8 <xQueueGenericSend>

  //Run the next active sequence (if any...)
  runLedseq(timer[led]);
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	4a05      	ldr	r2, [pc, #20]	; (8005094 <ledseqStopBlocking+0x54>)
 800507e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005082:	4618      	mov	r0, r3
 8005084:	f000 f808 	bl	8005098 <runLedseq>
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20006aec 	.word	0x20006aec
 8005094:	200023b0 	.word	0x200023b0

08005098 <runLedseq>:

/* Center of the led sequence machine. This function is executed by the FreeRTOS
 * timers and runs the sequences
 */
static void runLedseq( xTimerHandle xTimer ) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8
 800509e:	6078      	str	r0, [r7, #4]
  if (!ledseqEnabled) {
 80050a0:	4b40      	ldr	r3, [pc, #256]	; (80051a4 <runLedseq+0x10c>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	f083 0301 	eor.w	r3, r3, #1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d171      	bne.n	8005192 <runLedseq+0xfa>
    return;
  }

  led_t led = (led_t)pvTimerGetTimerID(xTimer);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f015 ff78 	bl	801afa4 <pvTimerGetTimerID>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75bb      	strb	r3, [r7, #22]
  ledseqContext_t* context = activeSeq[led];
 80050b8:	7dbb      	ldrb	r3, [r7, #22]
 80050ba:	4a3b      	ldr	r2, [pc, #236]	; (80051a8 <runLedseq+0x110>)
 80050bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c0:	613b      	str	r3, [r7, #16]
  if (NO_CONTEXT == context) {
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d066      	beq.n	8005196 <runLedseq+0xfe>
    return;
  }

  bool leave = false;
 80050c8:	2300      	movs	r3, #0
 80050ca:	75fb      	strb	r3, [r7, #23]
  while(!leave) {
 80050cc:	e05a      	b.n	8005184 <runLedseq+0xec>
    if (context->state == LEDSEQ_STOP) {
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d6:	d060      	beq.n	800519a <runLedseq+0x102>
      return;
    }

    const ledseqStep_t* step = &context->sequence[context->state];
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	4413      	add	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

    xSemaphoreTake(ledseqMutex, portMAX_DELAY);
 80050e6:	4b31      	ldr	r3, [pc, #196]	; (80051ac <runLedseq+0x114>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050ee:	4618      	mov	r0, r3
 80050f0:	f013 fd04 	bl	8018afc <xQueueSemaphoreTake>
    context->state++;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	609a      	str	r2, [r3, #8]
    led_t led = context->led;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	7b1b      	ldrb	r3, [r3, #12]
 8005102:	72fb      	strb	r3, [r7, #11]

    switch(step->action) {
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f113 0f02 	cmn.w	r3, #2
 800510c:	d003      	beq.n	8005116 <runLedseq+0x7e>
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005112:	d004      	beq.n	800511e <runLedseq+0x86>
 8005114:	e00c      	b.n	8005130 <runLedseq+0x98>
      case LEDSEQ_LOOP:
        context->state = 0;
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2200      	movs	r2, #0
 800511a:	609a      	str	r2, [r3, #8]
        break;
 800511c:	e02b      	b.n	8005176 <runLedseq+0xde>
      case LEDSEQ_STOP:
        context->state = LEDSEQ_STOP;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005124:	609a      	str	r2, [r3, #8]
        updateActive(led);
 8005126:	7afb      	ldrb	r3, [r7, #11]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f875 	bl	8005218 <updateActive>
        break;
 800512e:	e022      	b.n	8005176 <runLedseq+0xde>
      default:  //The step is a LED action and a time
        ledSet(led, step->value);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	7afb      	ldrb	r3, [r7, #11]
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fdf3 	bl	8004d24 <ledSet>
        if (step->action == 0) {
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <runLedseq+0xdc>
          break;
        }
        xTimerChangePeriod(xTimer, (step->action), 0);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	2300      	movs	r3, #0
 8005152:	2104      	movs	r1, #4
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f015 fc25 	bl	801a9a4 <xTimerGenericCommand>
        xTimerStart(xTimer, 0);
 800515a:	f014 fbbd 	bl	80198d8 <xTaskGetTickCount>
 800515e:	4602      	mov	r2, r0
 8005160:	2300      	movs	r3, #0
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2300      	movs	r3, #0
 8005166:	2101      	movs	r1, #1
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f015 fc1b 	bl	801a9a4 <xTimerGenericCommand>
        leave = true;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
        break;
 8005172:	e000      	b.n	8005176 <runLedseq+0xde>
          break;
 8005174:	bf00      	nop
    }
    xSemaphoreGive(ledseqMutex);
 8005176:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <runLedseq+0x114>)
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	2200      	movs	r2, #0
 800517e:	2100      	movs	r1, #0
 8005180:	f013 fa3a 	bl	80185f8 <xQueueGenericSend>
  while(!leave) {
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	f083 0301 	eor.w	r3, r3, #1
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d19e      	bne.n	80050ce <runLedseq+0x36>
 8005190:	e004      	b.n	800519c <runLedseq+0x104>
    return;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <runLedseq+0x104>
    return;
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <runLedseq+0x104>
      return;
 800519a:	bf00      	nop
  }
}
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20006af5 	.word	0x20006af5
 80051a8:	20002398 	.word	0x20002398
 80051ac:	20006aec 	.word	0x20006aec

080051b0 <ledseqRegisterSequence>:

void ledseqRegisterSequence(ledseqContext_t* context) {
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  context->state = LEDSEQ_STOP;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051be:	609a      	str	r2, [r3, #8]
  context->nextContext = NO_CONTEXT;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	605a      	str	r2, [r3, #4]

  if (sequences == NO_CONTEXT) {
 80051c6:	4b13      	ldr	r3, [pc, #76]	; (8005214 <ledseqRegisterSequence+0x64>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <ledseqRegisterSequence+0x26>
    sequences = context;
 80051ce:	4a11      	ldr	r2, [pc, #68]	; (8005214 <ledseqRegisterSequence+0x64>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e019      	b.n	800520a <ledseqRegisterSequence+0x5a>
  } else {
    ledseqContext_t* last = sequences;
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <ledseqRegisterSequence+0x64>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60fb      	str	r3, [r7, #12]
    if (last == context) {
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d00f      	beq.n	8005204 <ledseqRegisterSequence+0x54>
      // Skip if already registered
      return;
    }

    while (last->nextContext != NO_CONTEXT) {
 80051e4:	e006      	b.n	80051f4 <ledseqRegisterSequence+0x44>
      last = last->nextContext;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]
      if (last == context) {
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d009      	beq.n	8005208 <ledseqRegisterSequence+0x58>
    while (last->nextContext != NO_CONTEXT) {
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f4      	bne.n	80051e6 <ledseqRegisterSequence+0x36>
        // Skip if already registered
        return;
      }
    }

    last->nextContext = context;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	e002      	b.n	800520a <ledseqRegisterSequence+0x5a>
      return;
 8005204:	bf00      	nop
 8005206:	e000      	b.n	800520a <ledseqRegisterSequence+0x5a>
        return;
 8005208:	bf00      	nop
  }
}
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	20006ae8 	.word	0x20006ae8

08005218 <updateActive>:

// Utility functions

static void updateActive(led_t led) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  activeSeq[led] = NO_CONTEXT;
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <updateActive+0x5c>)
 8005226:	2100      	movs	r1, #0
 8005228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  ledSet(led, false);
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	2100      	movs	r1, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fd77 	bl	8004d24 <ledSet>

  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <updateActive+0x60>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e012      	b.n	8005264 <updateActive+0x4c>
    if (sequence->led == led && sequence->state != LEDSEQ_STOP) {
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	7b1b      	ldrb	r3, [r3, #12]
 8005242:	79fa      	ldrb	r2, [r7, #7]
 8005244:	429a      	cmp	r2, r3
 8005246:	d10a      	bne.n	800525e <updateActive+0x46>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005250:	d005      	beq.n	800525e <updateActive+0x46>
      activeSeq[led] = sequence;
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	4907      	ldr	r1, [pc, #28]	; (8005274 <updateActive+0x5c>)
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      break;
 800525c:	e006      	b.n	800526c <updateActive+0x54>
  for (ledseqContext_t* sequence = sequences; sequence != 0; sequence = sequence->nextContext) {
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e9      	bne.n	800523e <updateActive+0x26>
    }
  }
}
 800526a:	bf00      	nop
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20002398 	.word	0x20002398
 8005278:	20006ae8 	.word	0x20006ae8

0800527c <memoryRegisterHandler>:
  nrOfHandlers = 0;
  owMemHandler = 0;
}
#endif

void memoryRegisterHandler(const MemoryHandlerDef_t* handlerDef){
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < nrOfHandlers; i++) {
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e010      	b.n	80052ac <memoryRegisterHandler+0x30>
    ASSERT(handlerDef->type != handlers[i]->type);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	491c      	ldr	r1, [pc, #112]	; (8005300 <memoryRegisterHandler+0x84>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d104      	bne.n	80052a6 <memoryRegisterHandler+0x2a>
 800529c:	225f      	movs	r2, #95	; 0x5f
 800529e:	4919      	ldr	r1, [pc, #100]	; (8005304 <memoryRegisterHandler+0x88>)
 80052a0:	4819      	ldr	r0, [pc, #100]	; (8005308 <memoryRegisterHandler+0x8c>)
 80052a2:	f005 faf7 	bl	800a894 <assertFail>
  for (int i = 0; i < nrOfHandlers; i++) {
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3301      	adds	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <memoryRegisterHandler+0x90>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4293      	cmp	r3, r2
 80052b6:	dbe8      	blt.n	800528a <memoryRegisterHandler+0xe>
  }
  ASSERT(nrOfHandlers < MAX_NR_HANDLERS);
 80052b8:	4b14      	ldr	r3, [pc, #80]	; (800530c <memoryRegisterHandler+0x90>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b13      	cmp	r3, #19
 80052be:	d904      	bls.n	80052ca <memoryRegisterHandler+0x4e>
 80052c0:	2261      	movs	r2, #97	; 0x61
 80052c2:	4910      	ldr	r1, [pc, #64]	; (8005304 <memoryRegisterHandler+0x88>)
 80052c4:	4812      	ldr	r0, [pc, #72]	; (8005310 <memoryRegisterHandler+0x94>)
 80052c6:	f005 fae5 	bl	800a894 <assertFail>
  ASSERT(registrationEnabled);
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <memoryRegisterHandler+0x98>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <memoryRegisterHandler+0x60>
 80052d2:	2262      	movs	r2, #98	; 0x62
 80052d4:	490b      	ldr	r1, [pc, #44]	; (8005304 <memoryRegisterHandler+0x88>)
 80052d6:	4810      	ldr	r0, [pc, #64]	; (8005318 <memoryRegisterHandler+0x9c>)
 80052d8:	f005 fadc 	bl	800a894 <assertFail>
  handlers[nrOfHandlers] = handlerDef;
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <memoryRegisterHandler+0x90>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	4a07      	ldr	r2, [pc, #28]	; (8005300 <memoryRegisterHandler+0x84>)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  nrOfHandlers++;
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <memoryRegisterHandler+0x90>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	3301      	adds	r3, #1
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <memoryRegisterHandler+0x90>)
 80052f4:	701a      	strb	r2, [r3, #0]
}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20006b00 	.word	0x20006b00
 8005304:	08022000 	.word	0x08022000
 8005308:	0802201c 	.word	0x0802201c
 800530c:	20006b50 	.word	0x20006b50
 8005310:	08022044 	.word	0x08022044
 8005314:	200002d0 	.word	0x200002d0
 8005318:	08022064 	.word	0x08022064

0800531c <owSyslinkReceive>:
{
  return owCommonTest();
}

void owSyslinkReceive(SyslinkPacket *slp)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <pmInit>:
};

STATIC_MEM_TASK_ALLOC(pmTask, PM_TASK_STACKSIZE);

void pmInit(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af04      	add	r7, sp, #16
  if(isInit) {
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <pmInit+0x60>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d125      	bne.n	800538a <pmInit+0x5a>
    return;
  }

  HAL_ADC_Start_DMA(&hadc1, &adc1Val, 1);	// Current measurement
 800533e:	2201      	movs	r2, #1
 8005340:	4914      	ldr	r1, [pc, #80]	; (8005394 <pmInit+0x64>)
 8005342:	4815      	ldr	r0, [pc, #84]	; (8005398 <pmInit+0x68>)
 8005344:	f009 feca 	bl	800f0dc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, &adc2Val, 1);	// Voltage measurement
 8005348:	2201      	movs	r2, #1
 800534a:	4914      	ldr	r1, [pc, #80]	; (800539c <pmInit+0x6c>)
 800534c:	4814      	ldr	r0, [pc, #80]	; (80053a0 <pmInit+0x70>)
 800534e:	f009 fec5 	bl	800f0dc <HAL_ADC_Start_DMA>

  STATIC_MEM_TASK_CREATE(pmTask, pmTask, PM_TASK_NAME, NULL, PM_TASK_PRI);
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	461a      	mov	r2, r3
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <pmInit+0x74>)
 8005358:	9302      	str	r3, [sp, #8]
 800535a:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <pmInit+0x78>)
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	2300      	movs	r3, #0
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	2300      	movs	r3, #0
 8005364:	4911      	ldr	r1, [pc, #68]	; (80053ac <pmInit+0x7c>)
 8005366:	4812      	ldr	r0, [pc, #72]	; (80053b0 <pmInit+0x80>)
 8005368:	f013 ff40 	bl	80191ec <xTaskCreateStatic>

  isInit = true;
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <pmInit+0x60>)
 800536e:	2201      	movs	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]

  pmSyslinkInfo.vBat = 3.7f;
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <pmInit+0x84>)
 8005374:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <pmInit+0x88>)
 8005376:	f8c3 2001 	str.w	r2, [r3, #1]
  pmSetBatteryVoltage(pmSyslinkInfo.vBat); //TODO remove
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <pmInit+0x84>)
 800537c:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8005380:	ee00 3a10 	vmov	s0, r3
 8005384:	f000 f81a 	bl	80053bc <pmSetBatteryVoltage>
 8005388:	e000      	b.n	800538c <pmInit+0x5c>
    return;
 800538a:	bf00      	nop
}
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20006b80 	.word	0x20006b80
 8005394:	20006b90 	.word	0x20006b90
 8005398:	2000a004 	.word	0x2000a004
 800539c:	20006b92 	.word	0x20006b92
 80053a0:	2000a04c 	.word	0x2000a04c
 80053a4:	200024d0 	.word	0x200024d0
 80053a8:	20006b94 	.word	0x20006b94
 80053ac:	08022114 	.word	0x08022114
 80053b0:	080056fd 	.word	0x080056fd
 80053b4:	20006b84 	.word	0x20006b84
 80053b8:	406ccccd 	.word	0x406ccccd

080053bc <pmSetBatteryVoltage>:

/**
 * Sets the battery voltage and its min and max values
 */
static void pmSetBatteryVoltage(float voltage)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	ed87 0a01 	vstr	s0, [r7, #4]
  batteryVoltage = voltage;
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <pmSetBatteryVoltage+0x6c>)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6013      	str	r3, [r2, #0]
  batteryVoltageMV = (uint16_t)(voltage * 1000);
 80053cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80053d0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800542c <pmSetBatteryVoltage+0x70>
 80053d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053dc:	ee17 3a90 	vmov	r3, s15
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <pmSetBatteryVoltage+0x74>)
 80053e4:	801a      	strh	r2, [r3, #0]
  if (batteryVoltageMax < voltage)
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <pmSetBatteryVoltage+0x78>)
 80053e8:	edd3 7a00 	vldr	s15, [r3]
 80053ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80053f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f8:	dd02      	ble.n	8005400 <pmSetBatteryVoltage+0x44>
  {
    batteryVoltageMax = voltage;
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <pmSetBatteryVoltage+0x78>)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6013      	str	r3, [r2, #0]
  }
  if (batteryVoltageMin > voltage)
 8005400:	4b0d      	ldr	r3, [pc, #52]	; (8005438 <pmSetBatteryVoltage+0x7c>)
 8005402:	edd3 7a00 	vldr	s15, [r3]
 8005406:	ed97 7a01 	vldr	s14, [r7, #4]
 800540a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800540e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005412:	d400      	bmi.n	8005416 <pmSetBatteryVoltage+0x5a>
  {
    batteryVoltageMin = voltage;
  }
}
 8005414:	e002      	b.n	800541c <pmSetBatteryVoltage+0x60>
    batteryVoltageMin = voltage;
 8005416:	4a08      	ldr	r2, [pc, #32]	; (8005438 <pmSetBatteryVoltage+0x7c>)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6013      	str	r3, [r2, #0]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	20006b54 	.word	0x20006b54
 800542c:	447a0000 	.word	0x447a0000
 8005430:	20006b58 	.word	0x20006b58
 8005434:	20006b5c 	.word	0x20006b5c
 8005438:	200002d4 	.word	0x200002d4

0800543c <pmSystemShutdown>:

/**
 * Shutdown system
 */
static void pmSystemShutdown(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM_AUTO_SHUTDOWN
  systemRequestShutdown();
#endif
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <pmBatteryChargeFromVoltage>:
/**
 * Returns a number from 0 to 9 where 0 is completely discharged
 * and 9 is 90% charged.
 */
static int32_t pmBatteryChargeFromVoltage(float voltage)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	ed87 0a01 	vstr	s0, [r7, #4]
  int charge = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]

  if (voltage < LiPoTypicalChargeCurve[0])
 800545a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800545e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546a:	d501      	bpl.n	8005470 <pmBatteryChargeFromVoltage+0x24>
  {
    return 0;
 800546c:	2300      	movs	r3, #0
 800546e:	e01c      	b.n	80054aa <pmBatteryChargeFromVoltage+0x5e>
  }
  if (voltage > LiPoTypicalChargeCurve[9])
 8005470:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80054b8 <pmBatteryChargeFromVoltage+0x6c>
 8005474:	edd7 7a01 	vldr	s15, [r7, #4]
 8005478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800547c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005480:	dd01      	ble.n	8005486 <pmBatteryChargeFromVoltage+0x3a>
  {
    return 9;
 8005482:	2309      	movs	r3, #9
 8005484:	e011      	b.n	80054aa <pmBatteryChargeFromVoltage+0x5e>
  }
  while (voltage >  LiPoTypicalChargeCurve[charge])
 8005486:	e002      	b.n	800548e <pmBatteryChargeFromVoltage+0x42>
  {
    charge++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]
  while (voltage >  LiPoTypicalChargeCurve[charge])
 800548e:	4a0b      	ldr	r2, [pc, #44]	; (80054bc <pmBatteryChargeFromVoltage+0x70>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	ed97 7a01 	vldr	s14, [r7, #4]
 800549e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	dcef      	bgt.n	8005488 <pmBatteryChargeFromVoltage+0x3c>
  }

  return charge;
 80054a8:	68fb      	ldr	r3, [r7, #12]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40833333 	.word	0x40833333
 80054bc:	08024bc0 	.word	0x08024bc0

080054c0 <pmGetBatteryVoltage>:


float pmGetBatteryVoltage(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return batteryVoltage;
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <pmGetBatteryVoltage+0x18>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	ee07 3a90 	vmov	s15, r3
}
 80054cc:	eeb0 0a67 	vmov.f32	s0, s15
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	20006b54 	.word	0x20006b54

080054dc <pmGracefulShutdown>:
/*
 * Iterate through all registered shutdown callbacks and call them one after
 * the other, when all is done, send the ACK back to nrf to allow power off.
 */
static void pmGracefulShutdown()
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b094      	sub	sp, #80	; 0x50
 80054e0:	af00      	add	r7, sp, #0
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80054e2:	2300      	movs	r3, #0
 80054e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e6:	e009      	b.n	80054fc <pmGracefulShutdown+0x20>
    graceful_shutdown_callback_t callback = graceful_shutdown_callbacks[i];
 80054e8:	4a0f      	ldr	r2, [pc, #60]	; (8005528 <pmGracefulShutdown+0x4c>)
 80054ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f0:	64bb      	str	r3, [r7, #72]	; 0x48

    callback();
 80054f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054f4:	4798      	blx	r3
  for (int i = 0; i < graceful_shutdown_callbacks_index; i++) {
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	3301      	adds	r3, #1
 80054fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <pmGracefulShutdown+0x50>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005502:	429a      	cmp	r2, r3
 8005504:	dbf0      	blt.n	80054e8 <pmGracefulShutdown+0xc>
  }

  SyslinkPacket slp = {
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	2242      	movs	r2, #66	; 0x42
 800550a:	2100      	movs	r1, #0
 800550c:	4618      	mov	r0, r3
 800550e:	f017 fd53 	bl	801cfb8 <memset>
 8005512:	2316      	movs	r3, #22
 8005514:	713b      	strb	r3, [r7, #4]
    .type = SYSLINK_PM_SHUTDOWN_ACK,
  };

  syslinkSendPacket(&slp);
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe ff63 	bl	80043e4 <syslinkSendPacket>
}
 800551e:	bf00      	nop
 8005520:	3750      	adds	r7, #80	; 0x50
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20006d98 	.word	0x20006d98
 800552c:	20006d94 	.word	0x20006d94

08005530 <pmSyslinkUpdate>:

  syslinkSendPacket(&slp);
}
*/
void pmSyslinkUpdate(SyslinkPacket *slp)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_PM_BATTERY_STATE) {
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b13      	cmp	r3, #19
 800553e:	d11b      	bne.n	8005578 <pmSyslinkUpdate+0x48>
    // First byte of the packet contains some PM flags such as USB power, charging etc.
    memcpy(&pmSyslinkInfo, &slp->data[0], sizeof(pmSyslinkInfo));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <pmSyslinkUpdate+0x60>)
 8005546:	6810      	ldr	r0, [r2, #0]
 8005548:	6851      	ldr	r1, [r2, #4]
 800554a:	c303      	stmia	r3!, {r0, r1}
 800554c:	7a12      	ldrb	r2, [r2, #8]
 800554e:	701a      	strb	r2, [r3, #0]

    // If using voltage measurements from external battery, we'll set the
    // voltage to this instead of the one sent from syslink.
    if (isExtBatVoltDeckPinSet) {
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <pmSyslinkUpdate+0x64>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <pmSyslinkUpdate+0x38>
      pmSetBatteryVoltage(extBatteryVoltage);
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <pmSyslinkUpdate+0x68>)
 800555a:	edd3 7a00 	vldr	s15, [r3]
 800555e:	eeb0 0a67 	vmov.f32	s0, s15
 8005562:	f7ff ff2b 	bl	80053bc <pmSetBatteryVoltage>
    temp = pmSyslinkInfo.temp;
#endif
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
    workerSchedule(pmGracefulShutdown, NULL);
  }
}
 8005566:	e00f      	b.n	8005588 <pmSyslinkUpdate+0x58>
      pmSetBatteryVoltage(pmSyslinkInfo.vBat);
 8005568:	4b09      	ldr	r3, [pc, #36]	; (8005590 <pmSyslinkUpdate+0x60>)
 800556a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800556e:	ee00 3a10 	vmov	s0, r3
 8005572:	f7ff ff23 	bl	80053bc <pmSetBatteryVoltage>
}
 8005576:	e007      	b.n	8005588 <pmSyslinkUpdate+0x58>
  } else if (slp->type == SYSLINK_PM_SHUTDOWN_REQUEST) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b15      	cmp	r3, #21
 800557e:	d103      	bne.n	8005588 <pmSyslinkUpdate+0x58>
    workerSchedule(pmGracefulShutdown, NULL);
 8005580:	2100      	movs	r1, #0
 8005582:	4806      	ldr	r0, [pc, #24]	; (800559c <pmSyslinkUpdate+0x6c>)
 8005584:	f008 fbe6 	bl	800dd54 <workerSchedule>
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20006b84 	.word	0x20006b84
 8005594:	20006b66 	.word	0x20006b66
 8005598:	20006b60 	.word	0x20006b60
 800559c:	080054dd 	.word	0x080054dd

080055a0 <pmSetChargeState>:

void pmSetChargeState(PMChargeStates chgState)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	71fb      	strb	r3, [r7, #7]
  // TODO: Send syslink package with charge state
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <pmUpdateState>:

PMStates pmUpdateState()
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
  bool usbPluggedIn = pmSyslinkInfo.usbPluggedIn;
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <pmUpdateState+0x98>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	71bb      	strb	r3, [r7, #6]
  bool isCharging = pmSyslinkInfo.isCharging;
 80055d2:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <pmUpdateState+0x98>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	717b      	strb	r3, [r7, #5]
  PMStates nextState;

  uint32_t batteryLowTime = xTaskGetTickCount() - batteryLowTimeStamp;
 80055e6:	f014 f977 	bl	80198d8 <xTaskGetTickCount>
 80055ea:	4602      	mov	r2, r0
 80055ec:	4b19      	ldr	r3, [pc, #100]	; (8005654 <pmUpdateState+0x9c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	603b      	str	r3, [r7, #0]

  if (ignoreChargedState)
 80055f4:	4b18      	ldr	r3, [pc, #96]	; (8005658 <pmUpdateState+0xa0>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <pmUpdateState+0x4a>
  {
    // For some scenarios we might not care about the charging/charged state.
    nextState = battery;
 80055fc:	2300      	movs	r3, #0
 80055fe:	71fb      	strb	r3, [r7, #7]
 8005600:	e016      	b.n	8005630 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && !isCharging)
 8005602:	79bb      	ldrb	r3, [r7, #6]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <pmUpdateState+0x62>
 8005608:	797b      	ldrb	r3, [r7, #5]
 800560a:	f083 0301 	eor.w	r3, r3, #1
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <pmUpdateState+0x62>
  {
    nextState = charged;
 8005614:	2302      	movs	r3, #2
 8005616:	71fb      	strb	r3, [r7, #7]
 8005618:	e00a      	b.n	8005630 <pmUpdateState+0x78>
  }
  else if (usbPluggedIn && isCharging)
 800561a:	79bb      	ldrb	r3, [r7, #6]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <pmUpdateState+0x74>
 8005620:	797b      	ldrb	r3, [r7, #5]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <pmUpdateState+0x74>
  {
    nextState = charging;
 8005626:	2301      	movs	r3, #1
 8005628:	71fb      	strb	r3, [r7, #7]
 800562a:	e001      	b.n	8005630 <pmUpdateState+0x78>
  }
  else
  {
    nextState = battery;
 800562c:	2300      	movs	r3, #0
 800562e:	71fb      	strb	r3, [r7, #7]
  }

  if (nextState == battery && batteryLowTime > PM_BAT_LOW_TIMEOUT)
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <pmUpdateState+0x8c>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f241 3288 	movw	r2, #5000	; 0x1388
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <pmUpdateState+0x8c>
  {
    // This is to avoid setting state to lowPower when we're plugged in to USB.
    nextState = lowPower;
 8005640:	2303      	movs	r3, #3
 8005642:	71fb      	strb	r3, [r7, #7]
  }

  return nextState;
 8005644:	79fb      	ldrb	r3, [r7, #7]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20006b84 	.word	0x20006b84
 8005654:	20006b78 	.word	0x20006b78
 8005658:	20006b8e 	.word	0x20006b8e

0800565c <pmMeasureExtBatteryCurrent>:
  extBatCurrAmpPerVolt = ampPerVolt;
}
*/

float pmMeasureExtBatteryCurrent(void)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
  float current;

  if (isExtBatCurrDeckPinSet)
 8005662:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <pmMeasureExtBatteryCurrent+0x44>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <pmMeasureExtBatteryCurrent+0x2a>
  {
    current = adc1Val * extBatCurrAmpPerVolt;
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <pmMeasureExtBatteryCurrent+0x48>)
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <pmMeasureExtBatteryCurrent+0x4c>)
 8005678:	edd3 7a00 	vldr	s15, [r3]
 800567c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005680:	edc7 7a01 	vstr	s15, [r7, #4]
 8005684:	e002      	b.n	800568c <pmMeasureExtBatteryCurrent+0x30>
  }
  else
  {
    current = 0.0;
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	607b      	str	r3, [r7, #4]
  }

  return current;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	ee07 3a90 	vmov	s15, r3
}
 8005692:	eeb0 0a67 	vmov.f32	s0, s15
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	20006b70 	.word	0x20006b70
 80056a4:	20006b90 	.word	0x20006b90
 80056a8:	20006b74 	.word	0x20006b74

080056ac <pmMeasureExtBatteryVoltage>:
  extBatVoltMultiplier = multiplier;
}
*/

float pmMeasureExtBatteryVoltage(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
  float voltage;

  if (isExtBatVoltDeckPinSet)
 80056b2:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <pmMeasureExtBatteryVoltage+0x44>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <pmMeasureExtBatteryVoltage+0x2a>
  {
    voltage =  adc2Val * extBatVoltMultiplier;
 80056ba:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <pmMeasureExtBatteryVoltage+0x48>)
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <pmMeasureExtBatteryVoltage+0x4c>)
 80056c8:	edd3 7a00 	vldr	s15, [r3]
 80056cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80056d4:	e002      	b.n	80056dc <pmMeasureExtBatteryVoltage+0x30>
  }
  else
  {
    voltage = 0.0;
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	607b      	str	r3, [r7, #4]
  }

  return voltage;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	ee07 3a90 	vmov	s15, r3
}
 80056e2:	eeb0 0a67 	vmov.f32	s0, s15
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20006b66 	.word	0x20006b66
 80056f4:	20006b92 	.word	0x20006b92
 80056f8:	20006b68 	.word	0x20006b68

080056fc <pmTask>:
bool pmIsDischarging(void) {
  return (pmState == lowPower) || (pmState == battery);
}
*/
void pmTask(void *param)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  PMStates pmStateOld = battery;
 8005704:	2300      	movs	r3, #0
 8005706:	75fb      	strb	r3, [r7, #23]
  uint32_t tickCount;

  vTaskSetApplicationTaskTag(0, (void*)TASK_PM_ID_NBR);
 8005708:	2105      	movs	r1, #5
 800570a:	2000      	movs	r0, #0
 800570c:	f014 fa42 	bl	8019b94 <vTaskSetApplicationTaskTag>

  tickCount = xTaskGetTickCount();
 8005710:	f014 f8e2 	bl	80198d8 <xTaskGetTickCount>
 8005714:	6138      	str	r0, [r7, #16]
  batteryLowTimeStamp = tickCount;
 8005716:	4a6f      	ldr	r2, [pc, #444]	; (80058d4 <pmTask+0x1d8>)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	6013      	str	r3, [r2, #0]
  batteryCriticalLowTimeStamp = tickCount;
 800571c:	4a6e      	ldr	r2, [pc, #440]	; (80058d8 <pmTask+0x1dc>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6013      	str	r3, [r2, #0]

  pmSetChargeState(charge500mA);
 8005722:	2001      	movs	r0, #1
 8005724:	f7ff ff3c 	bl	80055a0 <pmSetChargeState>
  systemWaitStart();
 8005728:	f000 fa78 	bl	8005c1c <systemWaitStart>
  // after system startup to avoid syslink queue overflow.
//  pmEnableBatteryStatusAutoupdate();

  while(1)
  {
    vTaskDelay(100);
 800572c:	2064      	movs	r0, #100	; 0x64
 800572e:	f013 ff15 	bl	801955c <vTaskDelay>
    tickCount = xTaskGetTickCount();
 8005732:	f014 f8d1 	bl	80198d8 <xTaskGetTickCount>
 8005736:	6138      	str	r0, [r7, #16]

    extBatteryVoltage = pmMeasureExtBatteryVoltage();
 8005738:	f7ff ffb8 	bl	80056ac <pmMeasureExtBatteryVoltage>
 800573c:	eef0 7a40 	vmov.f32	s15, s0
 8005740:	4b66      	ldr	r3, [pc, #408]	; (80058dc <pmTask+0x1e0>)
 8005742:	edc3 7a00 	vstr	s15, [r3]
    extBatteryVoltageMV = (uint16_t)(extBatteryVoltage * 1000);
 8005746:	4b65      	ldr	r3, [pc, #404]	; (80058dc <pmTask+0x1e0>)
 8005748:	edd3 7a00 	vldr	s15, [r3]
 800574c:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80058e0 <pmTask+0x1e4>
 8005750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005758:	ee17 3a90 	vmov	r3, s15
 800575c:	b29a      	uxth	r2, r3
 800575e:	4b61      	ldr	r3, [pc, #388]	; (80058e4 <pmTask+0x1e8>)
 8005760:	801a      	strh	r2, [r3, #0]
    extBatteryCurrent = pmMeasureExtBatteryCurrent();
 8005762:	f7ff ff7b 	bl	800565c <pmMeasureExtBatteryCurrent>
 8005766:	eef0 7a40 	vmov.f32	s15, s0
 800576a:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <pmTask+0x1ec>)
 800576c:	edc3 7a00 	vstr	s15, [r3]
    batteryLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) * 10;
 8005770:	f7ff fea6 	bl	80054c0 <pmGetBatteryVoltage>
 8005774:	eef0 7a40 	vmov.f32	s15, s0
 8005778:	eeb0 0a67 	vmov.f32	s0, s15
 800577c:	f7ff fe66 	bl	800544c <pmBatteryChargeFromVoltage>
 8005780:	4603      	mov	r3, r0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	0092      	lsls	r2, r2, #2
 8005788:	4413      	add	r3, r2
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	b2da      	uxtb	r2, r3
 800578e:	4b57      	ldr	r3, [pc, #348]	; (80058ec <pmTask+0x1f0>)
 8005790:	701a      	strb	r2, [r3, #0]

    if (pmGetBatteryVoltage() > batteryLowVoltage)
 8005792:	f7ff fe95 	bl	80054c0 <pmGetBatteryVoltage>
 8005796:	eeb0 7a40 	vmov.f32	s14, s0
 800579a:	4b55      	ldr	r3, [pc, #340]	; (80058f0 <pmTask+0x1f4>)
 800579c:	edd3 7a00 	vldr	s15, [r3]
 80057a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a8:	dd02      	ble.n	80057b0 <pmTask+0xb4>
    {
      batteryLowTimeStamp = tickCount;
 80057aa:	4a4a      	ldr	r2, [pc, #296]	; (80058d4 <pmTask+0x1d8>)
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	6013      	str	r3, [r2, #0]
    }
    if (pmGetBatteryVoltage() > batteryCriticalLowVoltage)
 80057b0:	f7ff fe86 	bl	80054c0 <pmGetBatteryVoltage>
 80057b4:	eeb0 7a40 	vmov.f32	s14, s0
 80057b8:	4b4e      	ldr	r3, [pc, #312]	; (80058f4 <pmTask+0x1f8>)
 80057ba:	edd3 7a00 	vldr	s15, [r3]
 80057be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c6:	dd02      	ble.n	80057ce <pmTask+0xd2>
    {
      batteryCriticalLowTimeStamp = tickCount;
 80057c8:	4a43      	ldr	r2, [pc, #268]	; (80058d8 <pmTask+0x1dc>)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6013      	str	r3, [r2, #0]
    }

    pmState = pmUpdateState();
 80057ce:	f7ff fef3 	bl	80055b8 <pmUpdateState>
 80057d2:	4603      	mov	r3, r0
 80057d4:	461a      	mov	r2, r3
 80057d6:	4b48      	ldr	r3, [pc, #288]	; (80058f8 <pmTask+0x1fc>)
 80057d8:	701a      	strb	r2, [r3, #0]

    if (pmState != pmStateOld)
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <pmTask+0x1fc>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	7dfa      	ldrb	r2, [r7, #23]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d03b      	beq.n	800585c <pmTask+0x160>
    {
      // Actions on state change
      switch (pmState)
 80057e4:	4b44      	ldr	r3, [pc, #272]	; (80058f8 <pmTask+0x1fc>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d833      	bhi.n	8005854 <pmTask+0x158>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <pmTask+0xf8>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005841 	.word	0x08005841
 80057f8:	08005819 	.word	0x08005819
 80057fc:	08005805 	.word	0x08005805
 8005800:	08005833 	.word	0x08005833
      {
        case charged:
          ledseqStop(&seq_charging);
 8005804:	483d      	ldr	r0, [pc, #244]	; (80058fc <pmTask+0x200>)
 8005806:	f7ff fbff 	bl	8005008 <ledseqStop>
          ledseqRunBlocking(&seq_charged);
 800580a:	483d      	ldr	r0, [pc, #244]	; (8005900 <pmTask+0x204>)
 800580c:	f7ff fba0 	bl	8004f50 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_FULL);
 8005810:	2004      	movs	r0, #4
 8005812:	f000 f879 	bl	8005908 <soundSetEffect>
          break;
 8005816:	e01e      	b.n	8005856 <pmTask+0x15a>
        case charging:
          ledseqStop(&seq_lowbat);
 8005818:	483a      	ldr	r0, [pc, #232]	; (8005904 <pmTask+0x208>)
 800581a:	f7ff fbf5 	bl	8005008 <ledseqStop>
          ledseqStop(&seq_charged);
 800581e:	4838      	ldr	r0, [pc, #224]	; (8005900 <pmTask+0x204>)
 8005820:	f7ff fbf2 	bl	8005008 <ledseqStop>
          ledseqRunBlocking(&seq_charging);
 8005824:	4835      	ldr	r0, [pc, #212]	; (80058fc <pmTask+0x200>)
 8005826:	f7ff fb93 	bl	8004f50 <ledseqRunBlocking>
          soundSetEffect(SND_USB_CONN);
 800582a:	2003      	movs	r0, #3
 800582c:	f000 f86c 	bl	8005908 <soundSetEffect>
          break;
 8005830:	e011      	b.n	8005856 <pmTask+0x15a>
        case lowPower:
          ledseqRunBlocking(&seq_lowbat);
 8005832:	4834      	ldr	r0, [pc, #208]	; (8005904 <pmTask+0x208>)
 8005834:	f7ff fb8c 	bl	8004f50 <ledseqRunBlocking>
          soundSetEffect(SND_BAT_LOW);
 8005838:	2005      	movs	r0, #5
 800583a:	f000 f865 	bl	8005908 <soundSetEffect>
          break;
 800583e:	e00a      	b.n	8005856 <pmTask+0x15a>
        case battery:
          ledseqRunBlocking(&seq_charging);
 8005840:	482e      	ldr	r0, [pc, #184]	; (80058fc <pmTask+0x200>)
 8005842:	f7ff fb85 	bl	8004f50 <ledseqRunBlocking>
          ledseqRun(&seq_charged);
 8005846:	482e      	ldr	r0, [pc, #184]	; (8005900 <pmTask+0x204>)
 8005848:	f7ff fb66 	bl	8004f18 <ledseqRun>
          soundSetEffect(SND_USB_DISC);
 800584c:	2002      	movs	r0, #2
 800584e:	f000 f85b 	bl	8005908 <soundSetEffect>
          break;
 8005852:	e000      	b.n	8005856 <pmTask+0x15a>
        default:
          break;
 8005854:	bf00      	nop
      }
      pmStateOld = pmState;
 8005856:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <pmTask+0x1fc>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	75fb      	strb	r3, [r7, #23]
    }
    // Actions during state
    switch (pmState)
 800585c:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <pmTask+0x1fc>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d832      	bhi.n	80058ca <pmTask+0x1ce>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <pmTask+0x170>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	080058c5 	.word	0x080058c5
 8005870:	0800587d 	.word	0x0800587d
 8005874:	080058cb 	.word	0x080058cb
 8005878:	080058ab 	.word	0x080058ab
      case charged:
        break;
      case charging:
        {
          // Charge level between 0.0 and 1.0
          float chargeLevel = pmBatteryChargeFromVoltage(pmGetBatteryVoltage()) / 10.0f;
 800587c:	f7ff fe20 	bl	80054c0 <pmGetBatteryVoltage>
 8005880:	eef0 7a40 	vmov.f32	s15, s0
 8005884:	eeb0 0a67 	vmov.f32	s0, s15
 8005888:	f7ff fde0 	bl	800544c <pmBatteryChargeFromVoltage>
 800588c:	ee07 0a90 	vmov	s15, r0
 8005890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005894:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800589c:	edc7 7a02 	vstr	s15, [r7, #8]
          ledseqSetChargeLevel(chargeLevel);
 80058a0:	ed97 0a02 	vldr	s0, [r7, #8]
 80058a4:	f7ff fb88 	bl	8004fb8 <ledseqSetChargeLevel>
        }
        break;
 80058a8:	e012      	b.n	80058d0 <pmTask+0x1d4>
      case lowPower:
        {
          uint32_t batteryCriticalLowTime;

          batteryCriticalLowTime = tickCount - batteryCriticalLowTimeStamp;
 80058aa:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <pmTask+0x1dc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	60fb      	str	r3, [r7, #12]
          if (batteryCriticalLowTime > PM_BAT_CRITICAL_LOW_TIMEOUT)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d907      	bls.n	80058ce <pmTask+0x1d2>
          {
            pmSystemShutdown();
 80058be:	f7ff fdbd 	bl	800543c <pmSystemShutdown>
          }
        }
        break;
 80058c2:	e004      	b.n	80058ce <pmTask+0x1d2>
      case battery:
        {
//          if ((commanderGetInactivityTime() > PM_SYSTEM_SHUTDOWN_TIMEOUT))
          {
            pmSystemShutdown();
 80058c4:	f7ff fdba 	bl	800543c <pmSystemShutdown>
          }
        }
        break;
 80058c8:	e002      	b.n	80058d0 <pmTask+0x1d4>
      default:
        break;
 80058ca:	bf00      	nop
 80058cc:	e72e      	b.n	800572c <pmTask+0x30>
        break;
 80058ce:	bf00      	nop
    vTaskDelay(100);
 80058d0:	e72c      	b.n	800572c <pmTask+0x30>
 80058d2:	bf00      	nop
 80058d4:	20006b78 	.word	0x20006b78
 80058d8:	20006b7c 	.word	0x20006b7c
 80058dc:	20006b60 	.word	0x20006b60
 80058e0:	447a0000 	.word	0x447a0000
 80058e4:	20006b64 	.word	0x20006b64
 80058e8:	20006b6c 	.word	0x20006b6c
 80058ec:	20006b8d 	.word	0x20006b8d
 80058f0:	200002dc 	.word	0x200002dc
 80058f4:	200002d8 	.word	0x200002d8
 80058f8:	20006b81 	.word	0x20006b81
 80058fc:	20000228 	.word	0x20000228
 8005900:	20000200 	.word	0x20000200
 8005904:	200000e8 	.word	0x200000e8

08005908 <soundSetEffect>:
{
  return isInit;
}

void soundSetEffect(uint32_t effect)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  sys_effect = effect;
 8005910:	4a04      	ldr	r2, [pc, #16]	; (8005924 <soundSetEffect+0x1c>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20006db0 	.word	0x20006db0

08005928 <storageStore>:

  return pass;
}

bool storageStore(const char* key, const void* buffer, size_t length)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <storageStore+0x48>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f083 0301 	eor.w	r3, r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <storageStore+0x1e>
    return false;
 8005942:	2300      	movs	r3, #0
 8005944:	e010      	b.n	8005968 <storageStore+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005946:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <storageStore+0x4c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800594e:	4618      	mov	r0, r3
 8005950:	f013 f8d4 	bl	8018afc <xQueueSemaphoreTake>

//  bool result = kveStore(&kve, key, buffer, length);

  bool result = true;
 8005954:	2301      	movs	r3, #1
 8005956:	75fb      	strb	r3, [r7, #23]

  xSemaphoreGive(storageMutex);
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <storageStore+0x4c>)
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	2200      	movs	r2, #0
 8005960:	2100      	movs	r1, #0
 8005962:	f012 fe49 	bl	80185f8 <xQueueGenericSend>

  return result;
 8005966:	7dfb      	ldrb	r3, [r7, #23]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	20006dbc 	.word	0x20006dbc
 8005974:	20006db8 	.word	0x20006db8

08005978 <storageForeach>:


bool storageForeach(const char *prefix, storageFunc_t func)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
   if (!isInit) {
 8005982:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <storageForeach+0x48>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	f083 0301 	eor.w	r3, r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <storageForeach+0x1c>
    return 0;
 8005990:	2300      	movs	r3, #0
 8005992:	e010      	b.n	80059b6 <storageForeach+0x3e>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005994:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <storageForeach+0x4c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800599c:	4618      	mov	r0, r3
 800599e:	f013 f8ad 	bl	8018afc <xQueueSemaphoreTake>

//  bool success = kveForeach(&kve, prefix, func);

  bool success = true;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <storageForeach+0x4c>)
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	2200      	movs	r2, #0
 80059ae:	2100      	movs	r1, #0
 80059b0:	f012 fe22 	bl	80185f8 <xQueueGenericSend>

  return success;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20006dbc 	.word	0x20006dbc
 80059c4:	20006db8 	.word	0x20006db8

080059c8 <storageFetch>:

size_t storageFetch(const char *key, void* buffer, size_t length)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  if (!isInit) {
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <storageFetch+0x48>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	f083 0301 	eor.w	r3, r3, #1
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <storageFetch+0x1e>
    return 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e010      	b.n	8005a08 <storageFetch+0x40>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <storageFetch+0x4c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059ee:	4618      	mov	r0, r3
 80059f0:	f013 f884 	bl	8018afc <xQueueSemaphoreTake>

//  size_t result = kveFetch(&kve, key, buffer, length);


  size_t result = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]

  xSemaphoreGive(storageMutex);
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <storageFetch+0x4c>)
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	2300      	movs	r3, #0
 80059fe:	2200      	movs	r2, #0
 8005a00:	2100      	movs	r1, #0
 8005a02:	f012 fdf9 	bl	80185f8 <xQueueGenericSend>

  return result;
 8005a06:	697b      	ldr	r3, [r7, #20]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20006dbc 	.word	0x20006dbc
 8005a14:	20006db8 	.word	0x20006db8

08005a18 <storageDelete>:

bool storageDelete(const char* key)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  if (!isInit) {
 8005a20:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <storageDelete+0x44>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f083 0301 	eor.w	r3, r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <storageDelete+0x1a>
    return false;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	e010      	b.n	8005a54 <storageDelete+0x3c>
  }

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <storageDelete+0x48>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f013 f85e 	bl	8018afc <xQueueSemaphoreTake>

//  bool result = kveDelete(&kve, key);

  bool result = true;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]

  xSemaphoreGive(storageMutex);
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <storageDelete+0x48>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	f012 fdd3 	bl	80185f8 <xQueueGenericSend>

  return result;
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20006dbc 	.word	0x20006dbc
 8005a60:	20006db8 	.word	0x20006db8

08005a64 <storageReformat>:

bool storageReformat() {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Reformatting storage ...\n");
 8005a6a:	4917      	ldr	r1, [pc, #92]	; (8005ac8 <storageReformat+0x64>)
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f004 fee3 	bl	800a838 <SEGGER_RTT_printf>

  xSemaphoreTake(storageMutex, portMAX_DELAY);
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <storageReformat+0x68>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f013 f83e 	bl	8018afc <xQueueSemaphoreTake>

//  kveFormat(&kve);
//  bool pass = kveCheck(&kve);

  bool pass = true;
 8005a80:	2301      	movs	r3, #1
 8005a82:	71fb      	strb	r3, [r7, #7]

  xSemaphoreGive(storageMutex);
 8005a84:	4b11      	ldr	r3, [pc, #68]	; (8005acc <storageReformat+0x68>)
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	f012 fdb3 	bl	80185f8 <xQueueGenericSend>

  DEBUG_PRINT("Storage check %s.\n", pass?"[OK]":"[FAIL]");
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <storageReformat+0x38>
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <storageReformat+0x6c>)
 8005a9a:	e000      	b.n	8005a9e <storageReformat+0x3a>
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <storageReformat+0x70>)
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	490d      	ldr	r1, [pc, #52]	; (8005ad8 <storageReformat+0x74>)
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f004 fec8 	bl	800a838 <SEGGER_RTT_printf>

  if (pass == false) {
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	f083 0301 	eor.w	r3, r3, #1
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <storageReformat+0x58>
    DEBUG_PRINT("Error: Cannot format storage!\n");
 8005ab4:	4909      	ldr	r1, [pc, #36]	; (8005adc <storageReformat+0x78>)
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f004 febe 	bl	800a838 <SEGGER_RTT_printf>
  }

  return pass;
 8005abc:	79fb      	ldrb	r3, [r7, #7]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	08022238 	.word	0x08022238
 8005acc:	20006db8 	.word	0x20006db8
 8005ad0:	08022214 	.word	0x08022214
 8005ad4:	0802221c 	.word	0x0802221c
 8005ad8:	08022224 	.word	0x08022224
 8005adc:	08022254 	.word	0x08022254

08005ae0 <storagePrintStats>:

void storagePrintStats()
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  DEBUG_PRINT("Efficiency: Data: %d Bytes (%d%%), Keys: %d Bytes (%d%%), Metadata: %d Bytes (%d%%)\n",
    stats.dataSize, (stats.dataSize*100)/stats.totalSize,
    stats.keySize, (stats.keySize*100)/stats.totalSize,
    stats.metadataSize, (stats.metadataSize*100)/stats.totalSize);
    */
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <printStats>:

static bool storageStats;

static void printStats(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  if (storageStats) {
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <printStats+0x1c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <printStats+0x16>
    storagePrintStats();
 8005afc:	f7ff fff0 	bl	8005ae0 <storagePrintStats>

    storageStats = false;
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <printStats+0x1c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
  }
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20006dbd 	.word	0x20006dbd

08005b10 <doReformat>:

static bool reformatValue;

static void doReformat(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  if (reformatValue) {
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <doReformat+0x14>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <doReformat+0x10>
    storageReformat();
 8005b1c:	f7ff ffa2 	bl	8005a64 <storageReformat>
  }
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20006dbe 	.word	0x20006dbe

08005b28 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 8005b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b32:	461a      	mov	r2, r3
 8005b34:	4b08      	ldr	r3, [pc, #32]	; (8005b58 <systemLaunch+0x30>)
 8005b36:	9302      	str	r3, [sp, #8]
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <systemLaunch+0x34>)
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	2300      	movs	r3, #0
 8005b42:	4907      	ldr	r1, [pc, #28]	; (8005b60 <systemLaunch+0x38>)
 8005b44:	4807      	ldr	r0, [pc, #28]	; (8005b64 <systemLaunch+0x3c>)
 8005b46:	f013 fb51 	bl	80191ec <xTaskCreateStatic>
  DEBUG_PRINT("[TASK] systemTask is running!\n");
 8005b4a:	4907      	ldr	r1, [pc, #28]	; (8005b68 <systemLaunch+0x40>)
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f004 fe73 	bl	800a838 <SEGGER_RTT_printf>

}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20002588 	.word	0x20002588
 8005b5c:	20006dd8 	.word	0x20006dd8
 8005b60:	080222a8 	.word	0x080222a8
 8005b64:	08005b6d 	.word	0x08005b6d
 8005b68:	080222b0 	.word	0x080222b0

08005b6c <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  bool pass = true;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]


  uint32_t ld = SysTick->LOAD;
 8005b78:	4b1f      	ldr	r3, [pc, #124]	; (8005bf8 <systemTask+0x8c>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 8005b7e:	4b1f      	ldr	r3, [pc, #124]	; (8005bfc <systemTask+0x90>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <systemTask+0x94>)
 8005b84:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 8005b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b8a:	f008 fd93 	bl	800e6b4 <delay_us>
  time2 = DWT->CYCCNT;
 8005b8e:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <systemTask+0x90>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4a1c      	ldr	r2, [pc, #112]	; (8005c04 <systemTask+0x98>)
 8005b94:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(time2-time1)/CLOCK_PER_USEC);
 8005b96:	4b1b      	ldr	r3, [pc, #108]	; (8005c04 <systemTask+0x98>)
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <systemTask+0x94>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	4a19      	ldr	r2, [pc, #100]	; (8005c08 <systemTask+0x9c>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4918      	ldr	r1, [pc, #96]	; (8005c0c <systemTask+0xa0>)
 8005bac:	2000      	movs	r0, #0
 8005bae:	f004 fe43 	bl	800a838 <SEGGER_RTT_printf>


  ledInit();
 8005bb2:	f7ff f845 	bl	8004c40 <ledInit>
  ledSet(CHG_LED, SET);
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	2000      	movs	r0, #0
 8005bba:	f7ff f8b3 	bl	8004d24 <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 8005bbe:	f007 fd5f 	bl	800d680 <queueMonitorInit>

  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8005bc2:	f7fe fe8f 	bl	80048e4 <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 8005bc6:	f000 fc5d 	bl	8006484 <passthroughInit>

  systemInit();
 8005bca:	f000 f849 	bl	8005c60 <systemInit>
  DEBUG_PRINT("System drivers are Initialized!\n");
 8005bce:	4910      	ldr	r1, [pc, #64]	; (8005c10 <systemTask+0xa4>)
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	f004 fe31 	bl	800a838 <SEGGER_RTT_printf>



  commInit();
 8005bd6:	f7fb fbab 	bl	8001330 <commInit>
  DEBUG_PRINT("System communications are Initialized!\n");
 8005bda:	490e      	ldr	r1, [pc, #56]	; (8005c14 <systemTask+0xa8>)
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f004 fe2b 	bl	800a838 <SEGGER_RTT_printf>

  commanderInit();
 8005be2:	f000 fcc3 	bl	800656c <commanderInit>
  DEBUG_PRINT("System commander are Initialized!\n");
 8005be6:	490c      	ldr	r1, [pc, #48]	; (8005c18 <systemTask+0xac>)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f004 fe25 	bl	800a838 <SEGGER_RTT_printf>
    vTaskDelay(portMAX_DELAY);


    */

}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	e000e010 	.word	0xe000e010
 8005bfc:	e0001000 	.word	0xe0001000
 8005c00:	20006dd0 	.word	0x20006dd0
 8005c04:	20006dd4 	.word	0x20006dd4
 8005c08:	38e38e39 	.word	0x38e38e39
 8005c0c:	080222d0 	.word	0x080222d0
 8005c10:	080222e0 	.word	0x080222e0
 8005c14:	08022304 	.word	0x08022304
 8005c18:	0802232c 	.word	0x0802232c

08005c1c <systemWaitStart>:



void systemWaitStart(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 8005c20:	e002      	b.n	8005c28 <systemWaitStart+0xc>
    vTaskDelay(2);
 8005c22:	2002      	movs	r0, #2
 8005c24:	f013 fc9a 	bl	801955c <vTaskDelay>
  while(!isInit)
 8005c28:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <systemWaitStart+0x3c>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f083 0301 	eor.w	r3, r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f5      	bne.n	8005c22 <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <systemWaitStart+0x40>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f012 ff5c 	bl	8018afc <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <systemWaitStart+0x40>)
 8005c46:	6818      	ldr	r0, [r3, #0]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	f012 fcd3 	bl	80185f8 <xQueueGenericSend>
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20006dbf 	.word	0x20006dbf
 8005c5c:	200071d8 	.word	0x200071d8

08005c60 <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af02      	add	r7, sp, #8
  if(isInit)
 8005c66:	4b46      	ldr	r3, [pc, #280]	; (8005d80 <systemInit+0x120>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f040 8085 	bne.w	8005d7a <systemInit+0x11a>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8005c70:	4944      	ldr	r1, [pc, #272]	; (8005d84 <systemInit+0x124>)
 8005c72:	2001      	movs	r0, #1
 8005c74:	f012 fca5 	bl	80185c2 <xQueueCreateMutexStatic>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4a43      	ldr	r2, [pc, #268]	; (8005d88 <systemInit+0x128>)
 8005c7c:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8005c7e:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <systemInit+0x128>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c86:	4618      	mov	r0, r3
 8005c88:	f012 ff38 	bl	8018afc <xQueueSemaphoreTake>

  usblinkInit();
 8005c8c:	f000 fbaa 	bl	80063e4 <usblinkInit>
  DEBUG_PRINT("[TASK] usblinkTask is running!\n");
 8005c90:	493e      	ldr	r1, [pc, #248]	; (8005d8c <systemInit+0x12c>)
 8005c92:	2000      	movs	r0, #0
 8005c94:	f004 fdd0 	bl	800a838 <SEGGER_RTT_printf>

  sysLoadInit();
 8005c98:	f007 fe68 	bl	800d96c <sysLoadInit>
  DEBUG_PRINT("sysLoadMonitorTimer is Initialized\n");
 8005c9c:	493c      	ldr	r1, [pc, #240]	; (8005d90 <systemInit+0x130>)
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	f004 fdca 	bl	800a838 <SEGGER_RTT_printf>
//  cpxlinkInit();
#endif

  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
  crtpInit();
 8005ca4:	f7fb fb78 	bl	8001398 <crtpInit>
  DEBUG_PRINT("[TASK] crtpTxTask is running!\n");
 8005ca8:	493a      	ldr	r1, [pc, #232]	; (8005d94 <systemInit+0x134>)
 8005caa:	2000      	movs	r0, #0
 8005cac:	f004 fdc4 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("[TASK] crtpRxTask is running!\n");
 8005cb0:	4939      	ldr	r1, [pc, #228]	; (8005d98 <systemInit+0x138>)
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	f004 fdc0 	bl	800a838 <SEGGER_RTT_printf>

  consoleInit();
 8005cb8:	f004 fe32 	bl	800a920 <consoleInit>

  DEBUG_PRINT("%s is up and running!\n", platformConfigGetDeviceTypeName());
 8005cbc:	f003 ff1c 	bl	8009af8 <platformConfigGetDeviceTypeName>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	4935      	ldr	r1, [pc, #212]	; (8005d9c <systemInit+0x13c>)
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f004 fdb6 	bl	800a838 <SEGGER_RTT_printf>

  if (V_PRODUCTION_RELEASE) {
 8005ccc:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <systemInit+0x140>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d007      	beq.n	8005ce4 <systemInit+0x84>
    DEBUG_PRINT("Production release %s\n", V_STAG);
 8005cd4:	4b33      	ldr	r3, [pc, #204]	; (8005da4 <systemInit+0x144>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4933      	ldr	r1, [pc, #204]	; (8005da8 <systemInit+0x148>)
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f004 fdab 	bl	800a838 <SEGGER_RTT_printf>
 8005ce2:	e014      	b.n	8005d0e <systemInit+0xae>
  } else {
    DEBUG_PRINT("Build %s:%s (%s) %s\n", V_SLOCAL_REVISION,
 8005ce4:	4b31      	ldr	r3, [pc, #196]	; (8005dac <systemInit+0x14c>)
 8005ce6:	6819      	ldr	r1, [r3, #0]
 8005ce8:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <systemInit+0x150>)
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	4b2d      	ldr	r3, [pc, #180]	; (8005da4 <systemInit+0x144>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a30      	ldr	r2, [pc, #192]	; (8005db4 <systemInit+0x154>)
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	d001      	beq.n	8005cfc <systemInit+0x9c>
 8005cf8:	4a2f      	ldr	r2, [pc, #188]	; (8005db8 <systemInit+0x158>)
 8005cfa:	e000      	b.n	8005cfe <systemInit+0x9e>
 8005cfc:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <systemInit+0x15c>)
 8005cfe:	9201      	str	r2, [sp, #4]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	4603      	mov	r3, r0
 8005d04:	460a      	mov	r2, r1
 8005d06:	492e      	ldr	r1, [pc, #184]	; (8005dc0 <systemInit+0x160>)
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f004 fd95 	bl	800a838 <SEGGER_RTT_printf>
                V_SREVISION, V_STAG, (V_MODIFIED)?"MODIFIED":"CLEAN");
  }
  DEBUG_PRINT("I am 0x%08X%08X%08X and I have %dKB of flash!\n",
 8005d0e:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <systemInit+0x164>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b2d      	ldr	r3, [pc, #180]	; (8005dc8 <systemInit+0x168>)
 8005d14:	6819      	ldr	r1, [r3, #0]
 8005d16:	4b2d      	ldr	r3, [pc, #180]	; (8005dcc <systemInit+0x16c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	482d      	ldr	r0, [pc, #180]	; (8005dd0 <systemInit+0x170>)
 8005d1c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8005d20:	9001      	str	r0, [sp, #4]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	460b      	mov	r3, r1
 8005d26:	492b      	ldr	r1, [pc, #172]	; (8005dd4 <systemInit+0x174>)
 8005d28:	2000      	movs	r0, #0
 8005d2a:	f004 fd85 	bl	800a838 <SEGGER_RTT_printf>
              *((int*)(MCU_ID_ADDRESS+8)), *((int*)(MCU_ID_ADDRESS+4)),
              *((int*)(MCU_ID_ADDRESS+0)), *((short*)(MCU_FLASH_SIZE_ADDRESS)));

//  configblockInit();			// 현재 디바이스에 EEPROM이 존재하지 않음
//  storageInit();
  workerInit();
 8005d2e:	f007 ffe7 	bl	800dd00 <workerInit>
  ledseqInit();
 8005d32:	f7ff f839 	bl	8004da8 <ledseqInit>
  DEBUG_PRINT("[TASK] lesdeqCmdTask is running!\n");
 8005d36:	4928      	ldr	r1, [pc, #160]	; (8005dd8 <systemInit+0x178>)
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f004 fd7d 	bl	800a838 <SEGGER_RTT_printf>


  pmInit();
 8005d3e:	f7ff faf7 	bl	8005330 <pmInit>
  DEBUG_PRINT("[TASK] pmTask is running!\n");
 8005d42:	4926      	ldr	r1, [pc, #152]	; (8005ddc <systemInit+0x17c>)
 8005d44:	2000      	movs	r0, #0
 8005d46:	f004 fd77 	bl	800a838 <SEGGER_RTT_printf>

  buzzerInit();
 8005d4a:	f7fe fe9f 	bl	8004a8c <buzzerInit>
  buzzerOn(3000);
  HAL_Delay(2);
  buzzerOn(2000);
  HAL_Delay(2);
  */
  buzzerOff();
 8005d4e:	f7fe fead 	bl	8004aac <buzzerOff>

  peerLocalizationInit();
 8005d52:	f7fb fa01 	bl	8001158 <peerLocalizationInit>
  DEBUG_PRINT("peerLocalization is Initialized!\n");
 8005d56:	4922      	ldr	r1, [pc, #136]	; (8005de0 <systemInit+0x180>)
 8005d58:	2000      	movs	r0, #0
 8005d5a:	f004 fd6d 	bl	800a838 <SEGGER_RTT_printf>


#ifdef CONFIG_APP_ENABLE
  DEBUG_PRINT("-------------- Start User application -----------------\n");
 8005d5e:	4921      	ldr	r1, [pc, #132]	; (8005de4 <systemInit+0x184>)
 8005d60:	2000      	movs	r0, #0
 8005d62:	f004 fd69 	bl	800a838 <SEGGER_RTT_printf>
  appInit();
 8005d66:	f7fb fa9b 	bl	80012a0 <appInit>
  DEBUG_PRINT("[TASK] appTask is running!\n");
 8005d6a:	491f      	ldr	r1, [pc, #124]	; (8005de8 <systemInit+0x188>)
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f004 fd63 	bl	800a838 <SEGGER_RTT_printf>
#endif

  isInit = true;
 8005d72:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <systemInit+0x120>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e000      	b.n	8005d7c <systemInit+0x11c>
    return;
 8005d7a:	bf00      	nop
}
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20006dbf 	.word	0x20006dbf
 8005d84:	200071dc 	.word	0x200071dc
 8005d88:	200071d8 	.word	0x200071d8
 8005d8c:	08022350 	.word	0x08022350
 8005d90:	08022370 	.word	0x08022370
 8005d94:	08022394 	.word	0x08022394
 8005d98:	080223b4 	.word	0x080223b4
 8005d9c:	080223d4 	.word	0x080223d4
 8005da0:	08024ca9 	.word	0x08024ca9
 8005da4:	20000c40 	.word	0x20000c40
 8005da8:	080223ec 	.word	0x080223ec
 8005dac:	20000c38 	.word	0x20000c38
 8005db0:	20000c3c 	.word	0x20000c3c
 8005db4:	08024ca8 	.word	0x08024ca8
 8005db8:	08022404 	.word	0x08022404
 8005dbc:	08022410 	.word	0x08022410
 8005dc0:	08022418 	.word	0x08022418
 8005dc4:	1fff7a18 	.word	0x1fff7a18
 8005dc8:	1fff7a14 	.word	0x1fff7a14
 8005dcc:	1fff7a10 	.word	0x1fff7a10
 8005dd0:	1fff7a22 	.word	0x1fff7a22
 8005dd4:	08022430 	.word	0x08022430
 8005dd8:	08022460 	.word	0x08022460
 8005ddc:	08022484 	.word	0x08022484
 8005de0:	080224a0 	.word	0x080224a0
 8005de4:	080224c4 	.word	0x080224c4
 8005de8:	08022500 	.word	0x08022500

08005dec <systemSyslinkReceive>:

void systemSyslinkReceive(SyslinkPacket *slp)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  if (slp->type == SYSLINK_SYS_NRF_VERSION)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b30      	cmp	r3, #48	; 0x30
 8005dfa:	d114      	bne.n	8005e26 <systemSyslinkReceive+0x3a>
  {
    size_t len = slp->length - 1;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]

    if (sizeof(nrf_version) - 1 <=  len) {
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b0e      	cmp	r3, #14
 8005e08:	d901      	bls.n	8005e0e <systemSyslinkReceive+0x22>
      len = sizeof(nrf_version) - 1;
 8005e0a:	230f      	movs	r3, #15
 8005e0c:	60fb      	str	r3, [r7, #12]
    }
    memcpy(&nrf_version, &slp->data[0], len );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3302      	adds	r3, #2
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4619      	mov	r1, r3
 8005e16:	4806      	ldr	r0, [pc, #24]	; (8005e30 <systemSyslinkReceive+0x44>)
 8005e18:	f017 f9d3 	bl	801d1c2 <memcpy>
    DEBUG_PRINT("NRF51 version: %s\n", nrf_version);
 8005e1c:	4a04      	ldr	r2, [pc, #16]	; (8005e30 <systemSyslinkReceive+0x44>)
 8005e1e:	4905      	ldr	r1, [pc, #20]	; (8005e34 <systemSyslinkReceive+0x48>)
 8005e20:	2000      	movs	r0, #0
 8005e22:	f004 fd09 	bl	800a838 <SEGGER_RTT_printf>
  }
}
 8005e26:	bf00      	nop
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20006dc0 	.word	0x20006dc0
 8005e34:	0802251c 	.word	0x0802251c

08005e38 <uartslkDmaInit>:
/**
  * Configures the UART DMA. Mainly used for FreeRTOS trace
  * data transfer.
  */
void uartslkDmaInit(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0

#ifdef CONFIG_SYSLINK_DMA

	HAL_UART_MspInit(&huart6);
 8005e3c:	4803      	ldr	r0, [pc, #12]	; (8005e4c <uartslkDmaInit+0x14>)
 8005e3e:	f008 fdf3 	bl	800ea28 <HAL_UART_MspInit>

#endif

isUartDmaInitialized = true;
 8005e42:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <uartslkDmaInit+0x18>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]

}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	2000a1e4 	.word	0x2000a1e4
 8005e50:	2000731c 	.word	0x2000731c

08005e54 <uartslkInit>:

void uartslkInit(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	4b42      	ldr	r3, [pc, #264]	; (8005f68 <uartslkInit+0x114>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	2001      	movs	r0, #1
 8005e66:	f012 fab1 	bl	80183cc <xQueueGenericCreateStatic>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4a3f      	ldr	r2, [pc, #252]	; (8005f6c <uartslkInit+0x118>)
 8005e6e:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8005e70:	2303      	movs	r3, #3
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <uartslkInit+0x11c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	f012 faa6 	bl	80183cc <xQueueGenericCreateStatic>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4a3c      	ldr	r2, [pc, #240]	; (8005f74 <uartslkInit+0x120>)
 8005e84:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8005e86:	4b3b      	ldr	r3, [pc, #236]	; (8005f74 <uartslkInit+0x120>)
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	f012 fbb2 	bl	80185f8 <xQueueGenericSend>

  syslinkPacketDelivery = STATIC_MEM_QUEUE_CREATE(syslinkPacketDelivery);
 8005e94:	2308      	movs	r3, #8
 8005e96:	4618      	mov	r0, r3
 8005e98:	2342      	movs	r3, #66	; 0x42
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <uartslkInit+0x124>)
 8005ea2:	4a36      	ldr	r2, [pc, #216]	; (8005f7c <uartslkInit+0x128>)
 8005ea4:	f012 fa92 	bl	80183cc <xQueueGenericCreateStatic>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	4a35      	ldr	r2, [pc, #212]	; (8005f80 <uartslkInit+0x12c>)
 8005eac:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(syslinkPacketDelivery);
 8005eae:	4b34      	ldr	r3, [pc, #208]	; (8005f80 <uartslkInit+0x12c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <uartslkInit+0x130>)
 8005eb4:	4934      	ldr	r1, [pc, #208]	; (8005f88 <uartslkInit+0x134>)
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f007 fc2a 	bl	800d710 <qmRegisterQueue>


  GPIO_InitTypeDef GPIO_InitStruct;
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	4b32      	ldr	r3, [pc, #200]	; (8005f8c <uartslkInit+0x138>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <uartslkInit+0x138>)
 8005ec6:	f043 0304 	orr.w	r3, r3, #4
 8005eca:	6313      	str	r3, [r2, #48]	; 0x30
 8005ecc:	4b2f      	ldr	r3, [pc, #188]	; (8005f8c <uartslkInit+0x138>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2140      	movs	r1, #64	; 0x40
 8005edc:	482c      	ldr	r0, [pc, #176]	; (8005f90 <uartslkInit+0x13c>)
 8005ede:	f00a fb89 	bl	80105f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2180      	movs	r1, #128	; 0x80
 8005ee6:	482a      	ldr	r0, [pc, #168]	; (8005f90 <uartslkInit+0x13c>)
 8005ee8:	f00a fb84 	bl	80105f4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_6;
 8005eec:	23c0      	movs	r3, #192	; 0xc0
 8005eee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005efc:	1d3b      	adds	r3, r7, #4
 8005efe:	4619      	mov	r1, r3
 8005f00:	4823      	ldr	r0, [pc, #140]	; (8005f90 <uartslkInit+0x13c>)
 8005f02:	f00a f9db 	bl	80102bc <HAL_GPIO_Init>
  huart6.Init.BaudRate = 2000000;
  huart6.Init.Mode = UART_MODE_TX;

#else

  huart6.Instance = USART6;
 8005f06:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <uartslkInit+0x140>)
 8005f08:	4a23      	ldr	r2, [pc, #140]	; (8005f98 <uartslkInit+0x144>)
 8005f0a:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 8005f0c:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <uartslkInit+0x140>)
 8005f0e:	4a23      	ldr	r2, [pc, #140]	; (8005f9c <uartslkInit+0x148>)
 8005f10:	605a      	str	r2, [r3, #4]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005f12:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <uartslkInit+0x140>)
 8005f14:	220c      	movs	r2, #12
 8005f16:	615a      	str	r2, [r3, #20]

#endif

  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005f18:	4b1e      	ldr	r3, [pc, #120]	; (8005f94 <uartslkInit+0x140>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005f1e:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <uartslkInit+0x140>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <uartslkInit+0x140>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	611a      	str	r2, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	; (8005f94 <uartslkInit+0x140>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f30:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <uartslkInit+0x140>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	61da      	str	r2, [r3, #28]


  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005f36:	4817      	ldr	r0, [pc, #92]	; (8005f94 <uartslkInit+0x140>)
 8005f38:	f00d fb36 	bl	80135a8 <HAL_UART_Init>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <uartslkInit+0xf2>
  {
    Error_Handler();
 8005f42:	f008 fbe3 	bl	800e70c <Error_Handler>
  }


  uartslkDmaInit();
 8005f46:	f7ff ff77 	bl	8005e38 <uartslkDmaInit>

  // Setting up TXEN pin (NRF flow control)
  // 향후 외부핀 PA4 연결 필요

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <uartslkInit+0x140>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <uartslkInit+0x140>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0220 	orr.w	r2, r2, #32
 8005f58:	60da      	str	r2, [r3, #12]

  isInit = true;
 8005f5a:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <uartslkInit+0x14c>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
}
 8005f60:	bf00      	nop
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20007234 	.word	0x20007234
 8005f6c:	20007230 	.word	0x20007230
 8005f70:	20007288 	.word	0x20007288
 8005f74:	20007284 	.word	0x20007284
 8005f78:	20002850 	.word	0x20002850
 8005f7c:	20002640 	.word	0x20002640
 8005f80:	200072d8 	.word	0x200072d8
 8005f84:	08022530 	.word	0x08022530
 8005f88:	08022548 	.word	0x08022548
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	40020800 	.word	0x40020800
 8005f94:	2000a1e4 	.word	0x2000a1e4
 8005f98:	40011400 	.word	0x40011400
 8005f9c:	000f4240 	.word	0x000f4240
 8005fa0:	2000722c 	.word	0x2000722c

08005fa4 <uartslkGetPacketBlocking>:
{
  syslinkPacketDeliveryReadyToReceive = true;
}

void uartslkGetPacketBlocking(SyslinkPacket* packet)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  xQueueReceive(syslinkPacketDelivery, packet, portMAX_DELAY);
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <uartslkGetPacketBlocking+0x20>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f012 fcc0 	bl	801893c <xQueueReceive>
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	200072d8 	.word	0x200072d8

08005fc8 <uartslkSendDataDmaBlocking>:

    return (unsigned char)ch;
}

void uartslkSendDataDmaBlocking(uint32_t size, uint8_t* data)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  if (dmaNrfFlowControlBufferFull) {
 8005fd2:	4b22      	ldr	r3, [pc, #136]	; (800605c <uartslkSendDataDmaBlocking+0x94>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <uartslkSendDataDmaBlocking+0x1c>
    dmaSendWhileNrfBufferFull++;
 8005fda:	4b21      	ldr	r3, [pc, #132]	; (8006060 <uartslkSendDataDmaBlocking+0x98>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	4a1f      	ldr	r2, [pc, #124]	; (8006060 <uartslkSendDataDmaBlocking+0x98>)
 8005fe2:	6013      	str	r3, [r2, #0]
  }

  if (isUartDmaInitialized)
 8005fe4:	4b1f      	ldr	r3, [pc, #124]	; (8006064 <uartslkSendDataDmaBlocking+0x9c>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d032      	beq.n	8006052 <uartslkSendDataDmaBlocking+0x8a>
  {
    xSemaphoreTake(uartBusy, portMAX_DELAY);
 8005fec:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <uartslkSendDataDmaBlocking+0xa0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f012 fd81 	bl	8018afc <xQueueSemaphoreTake>
    // Wait for DMA to be free
    while(HAL_DMA_GetState(&hdma_usart6_tx) != HAL_DMA_STATE_READY);
 8005ffa:	bf00      	nop
 8005ffc:	481b      	ldr	r0, [pc, #108]	; (800606c <uartslkSendDataDmaBlocking+0xa4>)
 8005ffe:	f00a f86f 	bl	80100e0 <HAL_DMA_GetState>
 8006002:	4603      	mov	r3, r0
 8006004:	2b01      	cmp	r3, #1
 8006006:	d1f9      	bne.n	8005ffc <uartslkSendDataDmaBlocking+0x34>

    //Copy data in DMA buffer
    memcpy(dmaTXBuffer, data, size);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	4818      	ldr	r0, [pc, #96]	; (8006070 <uartslkSendDataDmaBlocking+0xa8>)
 800600e:	f017 f8d8 	bl	801d1c2 <memcpy>
    initialDMACount = (uint16_t)size;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	b29a      	uxth	r2, r3
 8006016:	4b17      	ldr	r3, [pc, #92]	; (8006074 <uartslkSendDataDmaBlocking+0xac>)
 8006018:	801a      	strh	r2, [r3, #0]

    if(HAL_UART_Transmit_DMA(&huart6, dmaTXBuffer, size)!=HAL_OK){
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	b29b      	uxth	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	4913      	ldr	r1, [pc, #76]	; (8006070 <uartslkSendDataDmaBlocking+0xa8>)
 8006022:	4815      	ldr	r0, [pc, #84]	; (8006078 <uartslkSendDataDmaBlocking+0xb0>)
 8006024:	f00d fb10 	bl	8013648 <HAL_UART_Transmit_DMA>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <uartslkSendDataDmaBlocking+0x6e>
    	DEBUG_PRINT("DMA transfer failed\n");
 800602e:	4913      	ldr	r1, [pc, #76]	; (800607c <uartslkSendDataDmaBlocking+0xb4>)
 8006030:	2000      	movs	r0, #0
 8006032:	f004 fc01 	bl	800a838 <SEGGER_RTT_printf>
    }
    xSemaphoreTake(waitUntilSendDone, portMAX_DELAY);
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <uartslkSendDataDmaBlocking+0xb8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800603e:	4618      	mov	r0, r3
 8006040:	f012 fd5c 	bl	8018afc <xQueueSemaphoreTake>
    xSemaphoreGive(uartBusy);
 8006044:	4b08      	ldr	r3, [pc, #32]	; (8006068 <uartslkSendDataDmaBlocking+0xa0>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	2200      	movs	r2, #0
 800604c:	2100      	movs	r1, #0
 800604e:	f012 fad3 	bl	80185f8 <xQueueGenericSend>

  }
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20007330 	.word	0x20007330
 8006060:	20007334 	.word	0x20007334
 8006064:	2000731c 	.word	0x2000731c
 8006068:	20007284 	.word	0x20007284
 800606c:	2000a22c 	.word	0x2000a22c
 8006070:	200072dc 	.word	0x200072dc
 8006074:	2000731e 	.word	0x2000731e
 8006078:	2000a1e4 	.word	0x2000a1e4
 800607c:	0802256c 	.word	0x0802256c
 8006080:	20007230 	.word	0x20007230

08006084 <uartSyslinkDumpDebugProbe>:
#endif

*/


void uartSyslinkDumpDebugProbe() {
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  DEBUG_PRINT("STM dmaPausedCounter: %ld\n",dmaPausedCounter);
 8006088:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <uartSyslinkDumpDebugProbe+0x50>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	4912      	ldr	r1, [pc, #72]	; (80060d8 <uartSyslinkDumpDebugProbe+0x54>)
 8006090:	2000      	movs	r0, #0
 8006092:	f004 fbd1 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamPausedCounter: %ld\n", dmaTxStreamPausedCounter);
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <uartSyslinkDumpDebugProbe+0x58>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	4910      	ldr	r1, [pc, #64]	; (80060e0 <uartSyslinkDumpDebugProbe+0x5c>)
 800609e:	2000      	movs	r0, #0
 80060a0:	f004 fbca 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaResumedCounter: %ld\n", dmaResumedCounter);
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <uartSyslinkDumpDebugProbe+0x60>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	490f      	ldr	r1, [pc, #60]	; (80060e8 <uartSyslinkDumpDebugProbe+0x64>)
 80060ac:	2000      	movs	r0, #0
 80060ae:	f004 fbc3 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaTxStreamResumedCounter: %ld\n", dmaTxStreamResumedCounter);
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <uartSyslinkDumpDebugProbe+0x68>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	490d      	ldr	r1, [pc, #52]	; (80060f0 <uartSyslinkDumpDebugProbe+0x6c>)
 80060ba:	2000      	movs	r0, #0
 80060bc:	f004 fbbc 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("STM dmaSendWhileNrfBufferFull: %ld\n", dmaSendWhileNrfBufferFull);
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <uartSyslinkDumpDebugProbe+0x70>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	490c      	ldr	r1, [pc, #48]	; (80060f8 <uartSyslinkDumpDebugProbe+0x74>)
 80060c8:	2000      	movs	r0, #0
 80060ca:	f004 fbb5 	bl	800a838 <SEGGER_RTT_printf>
}
 80060ce:	bf00      	nop
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20007320 	.word	0x20007320
 80060d8:	08022584 	.word	0x08022584
 80060dc:	20007324 	.word	0x20007324
 80060e0:	080225a0 	.word	0x080225a0
 80060e4:	20007328 	.word	0x20007328
 80060e8:	080225c4 	.word	0x080225c4
 80060ec:	2000732c 	.word	0x2000732c
 80060f0:	080225e0 	.word	0x080225e0
 80060f4:	20007334 	.word	0x20007334
 80060f8:	08022604 	.word	0x08022604

080060fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610a:	2b00      	cmp	r3, #0
 800610c:	db0b      	blt.n	8006126 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800610e:	79fb      	ldrb	r3, [r7, #7]
 8006110:	f003 021f 	and.w	r2, r3, #31
 8006114:	4907      	ldr	r1, [pc, #28]	; (8006134 <__NVIC_EnableIRQ+0x38>)
 8006116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611a:	095b      	lsrs	r3, r3, #5
 800611c:	2001      	movs	r0, #1
 800611e:	fa00 f202 	lsl.w	r2, r0, r2
 8006122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006126:	bf00      	nop
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	e000e100 	.word	0xe000e100

08006138 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006146:	2b00      	cmp	r3, #0
 8006148:	db12      	blt.n	8006170 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	f003 021f 	and.w	r2, r3, #31
 8006150:	490a      	ldr	r1, [pc, #40]	; (800617c <__NVIC_DisableIRQ+0x44>)
 8006152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2001      	movs	r0, #1
 800615a:	fa00 f202 	lsl.w	r2, r0, r2
 800615e:	3320      	adds	r3, #32
 8006160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006164:	f3bf 8f4f 	dsb	sy
}
 8006168:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800616a:	f3bf 8f6f 	isb	sy
}
 800616e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	e000e100 	.word	0xe000e100

08006180 <usbGetDataBlocking>:
};
*/


bool usbGetDataBlocking(USBPacket *in)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  while (xQueueReceive(usbDataRx, in, portMAX_DELAY) != pdTRUE); // Don't return until we get some data on the USB
 8006188:	bf00      	nop
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <usbGetDataBlocking+0x50>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4618      	mov	r0, r3
 8006196:	f012 fbd1 	bl	801893c <xQueueReceive>
 800619a:	4603      	mov	r3, r0
 800619c:	2b01      	cmp	r3, #1
 800619e:	d1f4      	bne.n	800618a <usbGetDataBlocking+0xa>

  // Disabling USB interrupt to make sure we can check and re-enable the endpoint
  // if it is not currently accepting data (ie. can happen if the RX queue was full)
  NVIC_DisableIRQ(OTG_FS_IRQn);
 80061a0:	2043      	movs	r0, #67	; 0x43
 80061a2:	f7ff ffc9 	bl	8006138 <__NVIC_DisableIRQ>
  if (rxStopped) {
 80061a6:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <usbGetDataBlocking+0x54>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d008      	beq.n	80061c0 <usbGetDataBlocking+0x40>
	  USBD_LL_PrepareReceive(&hUsbDeviceFS, CF_OUT_EP, (uint8_t*)(inPacket.data), USB_RX_TX_PACKET_SIZE);
 80061ae:	2340      	movs	r3, #64	; 0x40
 80061b0:	4a09      	ldr	r2, [pc, #36]	; (80061d8 <usbGetDataBlocking+0x58>)
 80061b2:	2101      	movs	r1, #1
 80061b4:	4809      	ldr	r0, [pc, #36]	; (80061dc <usbGetDataBlocking+0x5c>)
 80061b6:	f015 ffab 	bl	801c110 <USBD_LL_PrepareReceive>
    rxStopped = false;
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <usbGetDataBlocking+0x54>)
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
  }
  NVIC_EnableIRQ(OTG_FS_IRQn);
 80061c0:	2043      	movs	r0, #67	; 0x43
 80061c2:	f7ff ff9b 	bl	80060fc <__NVIC_EnableIRQ>

  return true;
 80061c6:	2301      	movs	r3, #1
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	2000733c 	.word	0x2000733c
 80061d4:	200002e2 	.word	0x200002e2
 80061d8:	20007345 	.word	0x20007345
 80061dc:	2000e38c 	.word	0x2000e38c

080061e0 <usbSendData>:


static USBPacket outStage;

bool usbSendData(uint32_t size, uint8_t* data)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  outStage.size = size;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <usbSendData+0x40>)
 80061f0:	701a      	strb	r2, [r3, #0]
  memcpy(outStage.data, data, size);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	480b      	ldr	r0, [pc, #44]	; (8006224 <usbSendData+0x44>)
 80061f8:	f016 ffe3 	bl	801d1c2 <memcpy>
  // Dont' block when sending
  return (xQueueSend(usbDataTx, &outStage, M2T(100)) == pdTRUE);
 80061fc:	4b0a      	ldr	r3, [pc, #40]	; (8006228 <usbSendData+0x48>)
 80061fe:	6818      	ldr	r0, [r3, #0]
 8006200:	2300      	movs	r3, #0
 8006202:	2264      	movs	r2, #100	; 0x64
 8006204:	4906      	ldr	r1, [pc, #24]	; (8006220 <usbSendData+0x40>)
 8006206:	f012 f9f7 	bl	80185f8 <xQueueGenericSend>
 800620a:	4603      	mov	r3, r0
 800620c:	2b01      	cmp	r3, #1
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20007388 	.word	0x20007388
 8006224:	20007389 	.word	0x20007389
 8006228:	20007340 	.word	0x20007340

0800622c <usbInit>:


void usbInit(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af02      	add	r7, sp, #8

//  MX_USB_DEVICE_Init();		// HAL 드라이버에서 생성됨
  usbDataRx = STATIC_MEM_QUEUE_CREATE(usbDataRx);
 8006232:	2305      	movs	r3, #5
 8006234:	4618      	mov	r0, r3
 8006236:	2341      	movs	r3, #65	; 0x41
 8006238:	4619      	mov	r1, r3
 800623a:	2300      	movs	r3, #0
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	4b14      	ldr	r3, [pc, #80]	; (8006290 <usbInit+0x64>)
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <usbInit+0x68>)
 8006242:	f012 f8c3 	bl	80183cc <xQueueGenericCreateStatic>
 8006246:	4603      	mov	r3, r0
 8006248:	4a13      	ldr	r2, [pc, #76]	; (8006298 <usbInit+0x6c>)
 800624a:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataRx);
 800624c:	4b12      	ldr	r3, [pc, #72]	; (8006298 <usbInit+0x6c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a12      	ldr	r2, [pc, #72]	; (800629c <usbInit+0x70>)
 8006252:	4913      	ldr	r1, [pc, #76]	; (80062a0 <usbInit+0x74>)
 8006254:	4618      	mov	r0, r3
 8006256:	f007 fa5b 	bl	800d710 <qmRegisterQueue>
  usbDataTx = STATIC_MEM_QUEUE_CREATE(usbDataTx);
 800625a:	2301      	movs	r3, #1
 800625c:	4618      	mov	r0, r3
 800625e:	2341      	movs	r3, #65	; 0x41
 8006260:	4619      	mov	r1, r3
 8006262:	2300      	movs	r3, #0
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <usbInit+0x78>)
 8006268:	4a0f      	ldr	r2, [pc, #60]	; (80062a8 <usbInit+0x7c>)
 800626a:	f012 f8af 	bl	80183cc <xQueueGenericCreateStatic>
 800626e:	4603      	mov	r3, r0
 8006270:	4a0e      	ldr	r2, [pc, #56]	; (80062ac <usbInit+0x80>)
 8006272:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(usbDataTx);
 8006274:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <usbInit+0x80>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a0d      	ldr	r2, [pc, #52]	; (80062b0 <usbInit+0x84>)
 800627a:	4909      	ldr	r1, [pc, #36]	; (80062a0 <usbInit+0x74>)
 800627c:	4618      	mov	r0, r3
 800627e:	f007 fa47 	bl	800d710 <qmRegisterQueue>

  isInit = true;
 8006282:	4b0c      	ldr	r3, [pc, #48]	; (80062b4 <usbInit+0x88>)
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200029e8 	.word	0x200029e8
 8006294:	200028a0 	.word	0x200028a0
 8006298:	2000733c 	.word	0x2000733c
 800629c:	08022628 	.word	0x08022628
 80062a0:	08022634 	.word	0x08022634
 80062a4:	20002a7c 	.word	0x20002a7c
 80062a8:	20002a38 	.word	0x20002a38
 80062ac:	20007340 	.word	0x20007340
 80062b0:	08022650 	.word	0x08022650
 80062b4:	20007338 	.word	0x20007338

080062b8 <usbTest>:

bool usbTest(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  return isInit;
 80062bc:	4b03      	ldr	r3, [pc, #12]	; (80062cc <usbTest+0x14>)
 80062be:	781b      	ldrb	r3, [r3, #0]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	20007338 	.word	0x20007338

080062d0 <usblinkTask>:
 * and so much other cool things that I don't have time for it ...)
 */
static USBPacket usbIn;
static CRTPPacket p;
static void usblinkTask(void *param)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  while(1)
  {
    // Fetch a USB packet off the queue
    usbGetDataBlocking(&usbIn);
 80062d8:	480c      	ldr	r0, [pc, #48]	; (800630c <usblinkTask+0x3c>)
 80062da:	f7ff ff51 	bl	8006180 <usbGetDataBlocking>
    p.size = usbIn.size - 1;
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <usblinkTask+0x3c>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <usblinkTask+0x40>)
 80062e8:	701a      	strb	r2, [r3, #0]
    memcpy(&p.raw, usbIn.data, usbIn.size);
 80062ea:	4b08      	ldr	r3, [pc, #32]	; (800630c <usblinkTask+0x3c>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	4908      	ldr	r1, [pc, #32]	; (8006314 <usblinkTask+0x44>)
 80062f2:	4809      	ldr	r0, [pc, #36]	; (8006318 <usblinkTask+0x48>)
 80062f4:	f016 ff65 	bl	801d1c2 <memcpy>
    // This queuing will copy a CRTP packet size from usbIn
    xQueueSend(crtpPacketDelivery, &p, portMAX_DELAY);
 80062f8:	4b08      	ldr	r3, [pc, #32]	; (800631c <usblinkTask+0x4c>)
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	2300      	movs	r3, #0
 80062fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006302:	4903      	ldr	r1, [pc, #12]	; (8006310 <usblinkTask+0x40>)
 8006304:	f012 f978 	bl	80185f8 <xQueueGenericSend>
    usbGetDataBlocking(&usbIn);
 8006308:	e7e6      	b.n	80062d8 <usblinkTask+0x8>
 800630a:	bf00      	nop
 800630c:	20007610 	.word	0x20007610
 8006310:	20007654 	.word	0x20007654
 8006314:	20007611 	.word	0x20007611
 8006318:	20007655 	.word	0x20007655
 800631c:	200073cc 	.word	0x200073cc

08006320 <usblinkReceivePacket>:

}


static int usblinkReceivePacket(CRTPPacket *p)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  if (xQueueReceive(crtpPacketDelivery, p, M2T(100)) == pdTRUE)
 8006328:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <usblinkReceivePacket+0x34>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2264      	movs	r2, #100	; 0x64
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4618      	mov	r0, r3
 8006332:	f012 fb03 	bl	801893c <xQueueReceive>
 8006336:	4603      	mov	r3, r0
 8006338:	2b01      	cmp	r3, #1
 800633a:	d104      	bne.n	8006346 <usblinkReceivePacket+0x26>
  {
    ledseqRun(&seq_linkUp);
 800633c:	4806      	ldr	r0, [pc, #24]	; (8006358 <usblinkReceivePacket+0x38>)
 800633e:	f7fe fdeb 	bl	8004f18 <ledseqRun>
    return 0;
 8006342:	2300      	movs	r3, #0
 8006344:	e001      	b.n	800634a <usblinkReceivePacket+0x2a>
  }

  return -1;
 8006346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	200073cc 	.word	0x200073cc
 8006358:	200001d0 	.word	0x200001d0

0800635c <usblinkSendPacket>:

static int usblinkSendPacket(CRTPPacket *p)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  int dataSize;

  ASSERT(p->size < SYSLINK_MTU);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b3f      	cmp	r3, #63	; 0x3f
 800636a:	d904      	bls.n	8006376 <usblinkSendPacket+0x1a>
 800636c:	2267      	movs	r2, #103	; 0x67
 800636e:	4912      	ldr	r1, [pc, #72]	; (80063b8 <usblinkSendPacket+0x5c>)
 8006370:	4812      	ldr	r0, [pc, #72]	; (80063bc <usblinkSendPacket+0x60>)
 8006372:	f004 fa8f 	bl	800a894 <assertFail>

  sendBuffer[0] = p->header;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	785a      	ldrb	r2, [r3, #1]
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <usblinkSendPacket+0x64>)
 800637c:	701a      	strb	r2, [r3, #0]

  if (p->size <= CRTP_MAX_DATA_SIZE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b1e      	cmp	r3, #30
 8006384:	d807      	bhi.n	8006396 <usblinkSendPacket+0x3a>
  {
    memcpy(&sendBuffer[1], p->data, p->size);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	1c99      	adds	r1, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	480c      	ldr	r0, [pc, #48]	; (80063c4 <usblinkSendPacket+0x68>)
 8006392:	f016 ff16 	bl	801d1c2 <memcpy>
  }
  dataSize = p->size + 1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]


  ledseqRun(&seq_linkDown);
 800639e:	480a      	ldr	r0, [pc, #40]	; (80063c8 <usblinkSendPacket+0x6c>)
 80063a0:	f7fe fdba 	bl	8004f18 <ledseqRun>

  return usbSendData(dataSize, sendBuffer);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4906      	ldr	r1, [pc, #24]	; (80063c0 <usblinkSendPacket+0x64>)
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff ff19 	bl	80061e0 <usbSendData>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	0802265c 	.word	0x0802265c
 80063bc:	0802267c 	.word	0x0802267c
 80063c0:	200073d0 	.word	0x200073d0
 80063c4:	200073d1 	.word	0x200073d1
 80063c8:	200001e0 	.word	0x200001e0

080063cc <usblinkSetEnable>:



static int usblinkSetEnable(bool enable)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	4603      	mov	r3, r0
 80063d4:	71fb      	strb	r3, [r7, #7]
  return 0;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <usblinkInit>:


void usblinkInit()
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af04      	add	r7, sp, #16
  if(isInit)
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <usblinkInit+0x64>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d126      	bne.n	8006440 <usblinkInit+0x5c>
    return;

  // Initialize the USB peripheral
  usbInit();
 80063f2:	f7ff ff1b 	bl	800622c <usbInit>

  crtpPacketDelivery = STATIC_MEM_QUEUE_CREATE(crtpPacketDelivery);
 80063f6:	2310      	movs	r3, #16
 80063f8:	4618      	mov	r0, r3
 80063fa:	2320      	movs	r3, #32
 80063fc:	4619      	mov	r1, r3
 80063fe:	2300      	movs	r3, #0
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <usblinkInit+0x68>)
 8006404:	4a12      	ldr	r2, [pc, #72]	; (8006450 <usblinkInit+0x6c>)
 8006406:	f011 ffe1 	bl	80183cc <xQueueGenericCreateStatic>
 800640a:	4603      	mov	r3, r0
 800640c:	4a11      	ldr	r2, [pc, #68]	; (8006454 <usblinkInit+0x70>)
 800640e:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(crtpPacketDelivery);
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <usblinkInit+0x70>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a10      	ldr	r2, [pc, #64]	; (8006458 <usblinkInit+0x74>)
 8006416:	4911      	ldr	r1, [pc, #68]	; (800645c <usblinkInit+0x78>)
 8006418:	4618      	mov	r0, r3
 800641a:	f007 f979 	bl	800d710 <qmRegisterQueue>

  STATIC_MEM_TASK_CREATE(usblinkTask, usblinkTask, USBLINK_TASK_NAME, NULL, USBLINK_TASK_PRI);
 800641e:	2380      	movs	r3, #128	; 0x80
 8006420:	461a      	mov	r2, r3
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <usblinkInit+0x7c>)
 8006424:	9302      	str	r3, [sp, #8]
 8006426:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <usblinkInit+0x80>)
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	2303      	movs	r3, #3
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	2300      	movs	r3, #0
 8006430:	490d      	ldr	r1, [pc, #52]	; (8006468 <usblinkInit+0x84>)
 8006432:	480e      	ldr	r0, [pc, #56]	; (800646c <usblinkInit+0x88>)
 8006434:	f012 feda 	bl	80191ec <xTaskCreateStatic>

  isInit = true;
 8006438:	4b03      	ldr	r3, [pc, #12]	; (8006448 <usblinkInit+0x64>)
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	e000      	b.n	8006442 <usblinkInit+0x5e>
    return;
 8006440:	bf00      	nop
}
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	200073c9 	.word	0x200073c9
 800644c:	20002ccc 	.word	0x20002ccc
 8006450:	20002acc 	.word	0x20002acc
 8006454:	200073cc 	.word	0x200073cc
 8006458:	08022694 	.word	0x08022694
 800645c:	0802265c 	.word	0x0802265c
 8006460:	20002d1c 	.word	0x20002d1c
 8006464:	20007410 	.word	0x20007410
 8006468:	080226a8 	.word	0x080226a8
 800646c:	080062d1 	.word	0x080062d1

08006470 <usblinkGetLink>:
{
  return isInit;
}

struct crtpLinkOperations * usblinkGetLink()
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return &usblinkOp;
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <usblinkGetLink+0x10>)
}
 8006476:	4618      	mov	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	200002e4 	.word	0x200002e4

08006484 <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af04      	add	r7, sp, #16
  if(isInit)
 800648a:	4b21      	ldr	r3, [pc, #132]	; (8006510 <passthroughInit+0x8c>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d13b      	bne.n	800650a <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 8006492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006496:	4618      	mov	r0, r3
 8006498:	2301      	movs	r3, #1
 800649a:	4619      	mov	r1, r3
 800649c:	2300      	movs	r3, #0
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4b1c      	ldr	r3, [pc, #112]	; (8006514 <passthroughInit+0x90>)
 80064a2:	4a1d      	ldr	r2, [pc, #116]	; (8006518 <passthroughInit+0x94>)
 80064a4:	f011 ff92 	bl	80183cc <xQueueGenericCreateStatic>
 80064a8:	4603      	mov	r3, r0
 80064aa:	4a1c      	ldr	r2, [pc, #112]	; (800651c <passthroughInit+0x98>)
 80064ac:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80064ae:	4b1b      	ldr	r3, [pc, #108]	; (800651c <passthroughInit+0x98>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <passthroughInit+0x9c>)
 80064b4:	491b      	ldr	r1, [pc, #108]	; (8006524 <passthroughInit+0xa0>)
 80064b6:	4618      	mov	r0, r3
 80064b8:	f007 f92a 	bl	800d710 <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 80064bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c0:	4618      	mov	r0, r3
 80064c2:	2301      	movs	r3, #1
 80064c4:	4619      	mov	r1, r3
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	4b17      	ldr	r3, [pc, #92]	; (8006528 <passthroughInit+0xa4>)
 80064cc:	4a17      	ldr	r2, [pc, #92]	; (800652c <passthroughInit+0xa8>)
 80064ce:	f011 ff7d 	bl	80183cc <xQueueGenericCreateStatic>
 80064d2:	4603      	mov	r3, r0
 80064d4:	4a16      	ldr	r2, [pc, #88]	; (8006530 <passthroughInit+0xac>)
 80064d6:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80064d8:	4b10      	ldr	r3, [pc, #64]	; (800651c <passthroughInit+0x98>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a10      	ldr	r2, [pc, #64]	; (8006520 <passthroughInit+0x9c>)
 80064de:	4911      	ldr	r1, [pc, #68]	; (8006524 <passthroughInit+0xa0>)
 80064e0:	4618      	mov	r0, r3
 80064e2:	f007 f915 	bl	800d710 <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 80064e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ea:	461a      	mov	r2, r3
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <passthroughInit+0xb0>)
 80064ee:	9302      	str	r3, [sp, #8]
 80064f0:	4b11      	ldr	r3, [pc, #68]	; (8006538 <passthroughInit+0xb4>)
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	2305      	movs	r3, #5
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2300      	movs	r3, #0
 80064fa:	4910      	ldr	r1, [pc, #64]	; (800653c <passthroughInit+0xb8>)
 80064fc:	4810      	ldr	r0, [pc, #64]	; (8006540 <passthroughInit+0xbc>)
 80064fe:	f012 fe75 	bl	80191ec <xTaskCreateStatic>
 8006502:	4603      	mov	r3, r0
 8006504:	4a0f      	ldr	r2, [pc, #60]	; (8006544 <passthroughInit+0xc0>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	e000      	b.n	800650c <passthroughInit+0x88>
    return;
 800650a:	bf00      	nop
}
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20007a78 	.word	0x20007a78
 8006514:	2000308c 	.word	0x2000308c
 8006518:	20002e8c 	.word	0x20002e8c
 800651c:	20007a7c 	.word	0x20007a7c
 8006520:	080226b0 	.word	0x080226b0
 8006524:	080226bc 	.word	0x080226bc
 8006528:	200032dc 	.word	0x200032dc
 800652c:	200030dc 	.word	0x200030dc
 8006530:	20007a80 	.word	0x20007a80
 8006534:	20002dd4 	.word	0x20002dd4
 8006538:	20007678 	.word	0x20007678
 800653c:	080226e8 	.word	0x080226e8
 8006540:	08006549 	.word	0x08006549
 8006544:	20007674 	.word	0x20007674

08006548 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8006550:	f7ff fb64 	bl	8005c1c <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006558:	2001      	movs	r0, #1
 800655a:	f014 f86f 	bl	801a63c <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 800655e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006562:	2000      	movs	r0, #0
 8006564:	f014 f8b6 	bl	801a6d4 <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006568:	e7f4      	b.n	8006554 <passthroughTask+0xc>
	...

0800656c <commanderInit>:
static xQueueHandle priorityQueue;
STATIC_MEM_QUEUE_ALLOC(priorityQueue, 1, sizeof(int));

/* Public functions */
void commanderInit(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af02      	add	r7, sp, #8
  setpointQueue = STATIC_MEM_QUEUE_CREATE(setpointQueue);
 8006572:	2301      	movs	r3, #1
 8006574:	4618      	mov	r0, r3
 8006576:	2370      	movs	r3, #112	; 0x70
 8006578:	4619      	mov	r1, r3
 800657a:	2300      	movs	r3, #0
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4b21      	ldr	r3, [pc, #132]	; (8006604 <commanderInit+0x98>)
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <commanderInit+0x9c>)
 8006582:	f011 ff23 	bl	80183cc <xQueueGenericCreateStatic>
 8006586:	4603      	mov	r3, r0
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <commanderInit+0xa0>)
 800658a:	6013      	str	r3, [r2, #0]
  ASSERT(setpointQueue);
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <commanderInit+0xa0>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d104      	bne.n	800659e <commanderInit+0x32>
 8006594:	223c      	movs	r2, #60	; 0x3c
 8006596:	491e      	ldr	r1, [pc, #120]	; (8006610 <commanderInit+0xa4>)
 8006598:	481e      	ldr	r0, [pc, #120]	; (8006614 <commanderInit+0xa8>)
 800659a:	f004 f97b 	bl	800a894 <assertFail>
  xQueueSend(setpointQueue, &nullSetpoint, 0);
 800659e:	4b1b      	ldr	r3, [pc, #108]	; (800660c <commanderInit+0xa0>)
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	2300      	movs	r3, #0
 80065a4:	2200      	movs	r2, #0
 80065a6:	491c      	ldr	r1, [pc, #112]	; (8006618 <commanderInit+0xac>)
 80065a8:	f012 f826 	bl	80185f8 <xQueueGenericSend>

  priorityQueue = STATIC_MEM_QUEUE_CREATE(priorityQueue);
 80065ac:	2301      	movs	r3, #1
 80065ae:	4618      	mov	r0, r3
 80065b0:	2304      	movs	r3, #4
 80065b2:	4619      	mov	r1, r3
 80065b4:	2300      	movs	r3, #0
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	4b18      	ldr	r3, [pc, #96]	; (800661c <commanderInit+0xb0>)
 80065ba:	4a19      	ldr	r2, [pc, #100]	; (8006620 <commanderInit+0xb4>)
 80065bc:	f011 ff06 	bl	80183cc <xQueueGenericCreateStatic>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4a18      	ldr	r2, [pc, #96]	; (8006624 <commanderInit+0xb8>)
 80065c4:	6013      	str	r3, [r2, #0]
  ASSERT(priorityQueue);
 80065c6:	4b17      	ldr	r3, [pc, #92]	; (8006624 <commanderInit+0xb8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d104      	bne.n	80065d8 <commanderInit+0x6c>
 80065ce:	2240      	movs	r2, #64	; 0x40
 80065d0:	490f      	ldr	r1, [pc, #60]	; (8006610 <commanderInit+0xa4>)
 80065d2:	4815      	ldr	r0, [pc, #84]	; (8006628 <commanderInit+0xbc>)
 80065d4:	f004 f95e 	bl	800a894 <assertFail>
  xQueueSend(priorityQueue, &priorityDisable, 0);
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <commanderInit+0xb8>)
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	2300      	movs	r3, #0
 80065de:	2200      	movs	r2, #0
 80065e0:	4912      	ldr	r1, [pc, #72]	; (800662c <commanderInit+0xc0>)
 80065e2:	f012 f809 	bl	80185f8 <xQueueGenericSend>

  crtpCommanderInit();
 80065e6:	f7fb f939 	bl	800185c <crtpCommanderInit>
  crtpCommanderHighLevelInit();
 80065ea:	f7fb fed1 	bl	8002390 <crtpCommanderHighLevelInit>
  lastUpdate = xTaskGetTickCount();
 80065ee:	f013 f973 	bl	80198d8 <xTaskGetTickCount>
 80065f2:	4603      	mov	r3, r0
 80065f4:	4a0e      	ldr	r2, [pc, #56]	; (8006630 <commanderInit+0xc4>)
 80065f6:	6013      	str	r3, [r2, #0]

  isInit = true;
 80065f8:	4b0e      	ldr	r3, [pc, #56]	; (8006634 <commanderInit+0xc8>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	2000339c 	.word	0x2000339c
 8006608:	2000332c 	.word	0x2000332c
 800660c:	20007ae8 	.word	0x20007ae8
 8006610:	08022974 	.word	0x08022974
 8006614:	08022998 	.word	0x08022998
 8006618:	08024be8 	.word	0x08024be8
 800661c:	200033f0 	.word	0x200033f0
 8006620:	200033ec 	.word	0x200033ec
 8006624:	20007aec 	.word	0x20007aec
 8006628:	080229a8 	.word	0x080229a8
 800662c:	08024c58 	.word	0x08024c58
 8006630:	20007ae0 	.word	0x20007ae0
 8006634:	20007a8c 	.word	0x20007a8c

08006638 <commanderSetSetpoint>:

void commanderSetSetpoint(setpoint_t *setpoint, int priority)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  int currentPriority;

  const BaseType_t peekResult = xQueuePeek(priorityQueue, &currentPriority, 0);
 8006642:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <commanderSetSetpoint+0x6c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f107 0108 	add.w	r1, r7, #8
 800664a:	2200      	movs	r2, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f012 fb5f 	bl	8018d10 <xQueuePeek>
 8006652:	60f8      	str	r0, [r7, #12]
  ASSERT(peekResult == pdTRUE);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d004      	beq.n	8006664 <commanderSetSetpoint+0x2c>
 800665a:	224f      	movs	r2, #79	; 0x4f
 800665c:	4912      	ldr	r1, [pc, #72]	; (80066a8 <commanderSetSetpoint+0x70>)
 800665e:	4813      	ldr	r0, [pc, #76]	; (80066ac <commanderSetSetpoint+0x74>)
 8006660:	f004 f918 	bl	800a894 <assertFail>

  if (priority >= currentPriority) {
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	429a      	cmp	r2, r3
 800666a:	db17      	blt.n	800669c <commanderSetSetpoint+0x64>
    setpoint->timestamp = xTaskGetTickCount();
 800666c:	f013 f934 	bl	80198d8 <xTaskGetTickCount>
 8006670:	4602      	mov	r2, r0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
    // This is a potential race but without effect on functionality
    xQueueOverwrite(setpointQueue, setpoint);
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <commanderSetSetpoint+0x78>)
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	2302      	movs	r3, #2
 800667c:	2200      	movs	r2, #0
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	f011 ffba 	bl	80185f8 <xQueueGenericSend>
    xQueueOverwrite(priorityQueue, &priority);
 8006684:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <commanderSetSetpoint+0x6c>)
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	4639      	mov	r1, r7
 800668a:	2302      	movs	r3, #2
 800668c:	2200      	movs	r2, #0
 800668e:	f011 ffb3 	bl	80185f8 <xQueueGenericSend>
    if (priority > COMMANDER_PRIORITY_HIGHLEVEL) {
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	dd01      	ble.n	800669c <commanderSetSetpoint+0x64>
      // Stop the high-level planner so it will forget its current state
      crtpCommanderHighLevelStop();
 8006698:	f7fc fd4e 	bl	8003138 <crtpCommanderHighLevelStop>
    }
  }
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20007aec 	.word	0x20007aec
 80066a8:	08022974 	.word	0x08022974
 80066ac:	080229b8 	.word	0x080229b8
 80066b0:	20007ae8 	.word	0x20007ae8

080066b4 <commanderRelaxPriority>:

void commanderRelaxPriority()
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
  crtpCommanderHighLevelTellState(&lastState);
 80066ba:	4808      	ldr	r0, [pc, #32]	; (80066dc <commanderRelaxPriority+0x28>)
 80066bc:	f7fb fed0 	bl	8002460 <crtpCommanderHighLevelTellState>
  int priority = COMMANDER_PRIORITY_LOWEST;
 80066c0:	2301      	movs	r3, #1
 80066c2:	607b      	str	r3, [r7, #4]
  xQueueOverwrite(priorityQueue, &priority);
 80066c4:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <commanderRelaxPriority+0x2c>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	1d39      	adds	r1, r7, #4
 80066ca:	2302      	movs	r3, #2
 80066cc:	2200      	movs	r2, #0
 80066ce:	f011 ff93 	bl	80185f8 <xQueueGenericSend>
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20007a90 	.word	0x20007a90
 80066e0:	20007aec 	.word	0x20007aec

080066e4 <commanderGetActivePriority>:
{
  return xTaskGetTickCount() - lastUpdate;
}

int commanderGetActivePriority(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
  int priority;

  const BaseType_t peekResult = xQueuePeek(priorityQueue, &priority, 0);
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <commanderGetActivePriority+0x30>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4639      	mov	r1, r7
 80066f0:	2200      	movs	r2, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f012 fb0c 	bl	8018d10 <xQueuePeek>
 80066f8:	6078      	str	r0, [r7, #4]
  ASSERT(peekResult == pdTRUE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d004      	beq.n	800670a <commanderGetActivePriority+0x26>
 8006700:	227e      	movs	r2, #126	; 0x7e
 8006702:	4905      	ldr	r1, [pc, #20]	; (8006718 <commanderGetActivePriority+0x34>)
 8006704:	4805      	ldr	r0, [pc, #20]	; (800671c <commanderGetActivePriority+0x38>)
 8006706:	f004 f8c5 	bl	800a894 <assertFail>

  return priority;
 800670a:	683b      	ldr	r3, [r7, #0]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20007aec 	.word	0x20007aec
 8006718:	08022974 	.word	0x08022974
 800671c:	080229b8 	.word	0x080229b8

08006720 <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	ed87 0a02 	vstr	s0, [r7, #8]
 800672c:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <lpf2pInit+0x34>
 8006736:	edd7 7a01 	vldr	s15, [r7, #4]
 800673a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800673e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006742:	d907      	bls.n	8006754 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8006744:	edd7 0a01 	vldr	s1, [r7, #4]
 8006748:	ed97 0a02 	vldr	s0, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f000 f805 	bl	800675c <lpf2pSetCutoffFreq>
 8006752:	e000      	b.n	8006756 <lpf2pInit+0x36>
    return;
 8006754:	bf00      	nop
}
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	ed87 0a02 	vstr	s0, [r7, #8]
 8006768:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 800676c:	edd7 6a02 	vldr	s13, [r7, #8]
 8006770:	ed97 7a01 	vldr	s14, [r7, #4]
 8006774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006778:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 800677c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8006850 <lpf2pSetCutoffFreq+0xf4>
 8006780:	edd7 7a07 	vldr	s15, [r7, #28]
 8006784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006788:	eeb0 0a47 	vmov.f32	s0, s14
 800678c:	f018 fbb8 	bl	801ef00 <tanf>
 8006790:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8006794:	edd7 7a06 	vldr	s15, [r7, #24]
 8006798:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006854 <lpf2pSetCutoffFreq+0xf8>
 800679c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80067ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b4:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 80067b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80067bc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80067c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80067c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80067d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 80067e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80067ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80067fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80067fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 8006808:	edd7 7a06 	vldr	s15, [r7, #24]
 800680c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006854 <lpf2pSetCutoffFreq+0xf8>
 8006810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800681c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006820:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006824:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006828:	ed97 7a05 	vldr	s14, [r7, #20]
 800682c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	619a      	str	r2, [r3, #24]
}
 8006846:	bf00      	nop
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40490fdb 	.word	0x40490fdb
 8006854:	3fb504f3 	.word	0x3fb504f3

08006858 <normalize_radians>:
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	ed87 0a01 	vstr	s0, [r7, #4]
	float signed_pi = copysignf(M_PI_F, radians);
 8006862:	edd7 0a01 	vldr	s1, [r7, #4]
 8006866:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80068ac <normalize_radians+0x54>
 800686a:	f016 fcb8 	bl	801d1de <copysignf>
 800686e:	ed87 0a03 	vstr	s0, [r7, #12]
	radians = fmodf(radians + signed_pi, 2 * M_PI_F) - signed_pi;
 8006872:	ed97 7a01 	vldr	s14, [r7, #4]
 8006876:	edd7 7a03 	vldr	s15, [r7, #12]
 800687a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800687e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80068b0 <normalize_radians+0x58>
 8006882:	eeb0 0a67 	vmov.f32	s0, s15
 8006886:	f018 fa6b 	bl	801ed60 <fmodf>
 800688a:	eeb0 7a40 	vmov.f32	s14, s0
 800688e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006896:	edc7 7a01 	vstr	s15, [r7, #4]
	return radians;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	ee07 3a90 	vmov	s15, r3
}
 80068a0:	eeb0 0a67 	vmov.f32	s0, s15
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40490fdb 	.word	0x40490fdb
 80068b0:	40c90fdb 	.word	0x40c90fdb

080068b4 <fmodf_floored>:
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80068be:	edc7 0a00 	vstr	s1, [r7]
	return x - floorf(x / n) * n;
 80068c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80068c6:	edd7 7a00 	vldr	s15, [r7]
 80068ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068ce:	eeb0 0a66 	vmov.f32	s0, s13
 80068d2:	f018 fb7d 	bl	801efd0 <floorf>
 80068d6:	eeb0 7a40 	vmov.f32	s14, s0
 80068da:	edd7 7a00 	vldr	s15, [r7]
 80068de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80068e6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80068ea:	eeb0 0a67 	vmov.f32	s0, s15
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <shortest_signed_angle_radians>:
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80068fe:	edc7 0a00 	vstr	s1, [r7]
	float diff = goal - start;
 8006902:	ed97 7a00 	vldr	s14, [r7]
 8006906:	edd7 7a01 	vldr	s15, [r7, #4]
 800690a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800690e:	edc7 7a03 	vstr	s15, [r7, #12]
	float signed_diff = fmodf_floored(diff + M_PI_F, 2 * M_PI_F) - M_PI_F;
 8006912:	edd7 7a03 	vldr	s15, [r7, #12]
 8006916:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800694c <shortest_signed_angle_radians+0x58>
 800691a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800691e:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8006950 <shortest_signed_angle_radians+0x5c>
 8006922:	eeb0 0a67 	vmov.f32	s0, s15
 8006926:	f7ff ffc5 	bl	80068b4 <fmodf_floored>
 800692a:	eef0 7a40 	vmov.f32	s15, s0
 800692e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800694c <shortest_signed_angle_radians+0x58>
 8006932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006936:	edc7 7a02 	vstr	s15, [r7, #8]
	return signed_diff;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	ee07 3a90 	vmov	s15, r3
}
 8006940:	eeb0 0a67 	vmov.f32	s0, s15
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40490fdb 	.word	0x40490fdb
 8006950:	40c90fdb 	.word	0x40c90fdb

08006954 <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 8006954:	b480      	push	{r7}
 8006956:	b08f      	sub	sp, #60	; 0x3c
 8006958:	af00      	add	r7, sp, #0
 800695a:	ed87 0a07 	vstr	s0, [r7, #28]
 800695e:	edc7 0a06 	vstr	s1, [r7, #24]
 8006962:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	623b      	str	r3, [r7, #32]
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 8006972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006976:	f107 0220 	add.w	r2, r7, #32
 800697a:	ca07      	ldmia	r2, {r0, r1, r2}
 800697c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	ee06 1a90 	vmov	s13, r1
 800698a:	ee07 2a10 	vmov	s14, r2
 800698e:	ee07 3a90 	vmov	s15, r3
}
 8006992:	eeb0 0a66 	vmov.f32	s0, s13
 8006996:	eef0 0a47 	vmov.f32	s1, s14
 800699a:	eeb0 1a67 	vmov.f32	s2, s15
 800699e:	373c      	adds	r7, #60	; 0x3c
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <vrepeat>:
static inline struct vec vrepeat(float x) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 80069b2:	ed97 1a05 	vldr	s2, [r7, #20]
 80069b6:	edd7 0a05 	vldr	s1, [r7, #20]
 80069ba:	ed97 0a05 	vldr	s0, [r7, #20]
 80069be:	f7ff ffc9 	bl	8006954 <mkvec>
 80069c2:	eef0 6a40 	vmov.f32	s13, s0
 80069c6:	eeb0 7a60 	vmov.f32	s14, s1
 80069ca:	eef0 7a41 	vmov.f32	s15, s2
 80069ce:	edc7 6a07 	vstr	s13, [r7, #28]
 80069d2:	ed87 7a08 	vstr	s14, [r7, #32]
 80069d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80069da:	69f9      	ldr	r1, [r7, #28]
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	ee06 1a90 	vmov	s13, r1
 80069e4:	ee07 2a10 	vmov	s14, r2
 80069e8:	ee07 3a90 	vmov	s15, r3
}
 80069ec:	eeb0 0a66 	vmov.f32	s0, s13
 80069f0:	eef0 0a47 	vmov.f32	s1, s14
 80069f4:	eeb0 1a67 	vmov.f32	s2, s15
 80069f8:	3728      	adds	r7, #40	; 0x28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <vzero>:
static inline struct vec vzero(void) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 8006a06:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8006a4c <vzero+0x4c>
 8006a0a:	f7ff ffcd 	bl	80069a8 <vrepeat>
 8006a0e:	eef0 6a40 	vmov.f32	s13, s0
 8006a12:	eeb0 7a60 	vmov.f32	s14, s1
 8006a16:	eef0 7a41 	vmov.f32	s15, s2
 8006a1a:	edc7 6a05 	vstr	s13, [r7, #20]
 8006a1e:	ed87 7a06 	vstr	s14, [r7, #24]
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
 8006a26:	6979      	ldr	r1, [r7, #20]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	ee06 1a90 	vmov	s13, r1
 8006a30:	ee07 2a10 	vmov	s14, r2
 8006a34:	ee07 3a90 	vmov	s15, r3
}
 8006a38:	eeb0 0a66 	vmov.f32	s0, s13
 8006a3c:	eef0 0a47 	vmov.f32	s1, s14
 8006a40:	eeb0 1a67 	vmov.f32	s2, s15
 8006a44:	3720      	adds	r7, #32
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	00000000 	.word	0x00000000

08006a50 <vneg>:
// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
	return mkvec(s * v.x , s * v.y, s * v.z);
}
// negate a vector.
static inline struct vec vneg(struct vec v) {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08c      	sub	sp, #48	; 0x30
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	eef0 6a40 	vmov.f32	s13, s0
 8006a5a:	eeb0 7a60 	vmov.f32	s14, s1
 8006a5e:	eef0 7a41 	vmov.f32	s15, s2
 8006a62:	edc7 6a05 	vstr	s13, [r7, #20]
 8006a66:	ed87 7a06 	vstr	s14, [r7, #24]
 8006a6a:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(-v.x, -v.y, -v.z);
 8006a6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a72:	eeb1 7a67 	vneg.f32	s14, s15
 8006a76:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a7a:	eef1 6a67 	vneg.f32	s13, s15
 8006a7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006a82:	eef1 7a67 	vneg.f32	s15, s15
 8006a86:	eeb0 1a67 	vmov.f32	s2, s15
 8006a8a:	eef0 0a66 	vmov.f32	s1, s13
 8006a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8006a92:	f7ff ff5f 	bl	8006954 <mkvec>
 8006a96:	eef0 6a40 	vmov.f32	s13, s0
 8006a9a:	eeb0 7a60 	vmov.f32	s14, s1
 8006a9e:	eef0 7a41 	vmov.f32	s15, s2
 8006aa2:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8006aa6:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8006aaa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8006aae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	ee06 1a90 	vmov	s13, r1
 8006ab8:	ee07 2a10 	vmov	s14, r2
 8006abc:	ee07 3a90 	vmov	s15, r3
}
 8006ac0:	eeb0 0a66 	vmov.f32	s0, s13
 8006ac4:	eef0 0a47 	vmov.f32	s1, s14
 8006ac8:	eeb0 1a67 	vmov.f32	s2, s15
 8006acc:	3730      	adds	r7, #48	; 0x30
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <vadd>:
// does not perform divide-by-zero check.
static inline struct vec vdiv(struct vec v, float s) {
	return vscl(1.0f/s, v);
}
// add two vectors.
static inline struct vec vadd(struct vec a, struct vec b) {
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b08e      	sub	sp, #56	; 0x38
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	eeb0 5a40 	vmov.f32	s10, s0
 8006adc:	eef0 5a60 	vmov.f32	s11, s1
 8006ae0:	eeb0 6a41 	vmov.f32	s12, s2
 8006ae4:	eef0 6a61 	vmov.f32	s13, s3
 8006ae8:	eeb0 7a42 	vmov.f32	s14, s4
 8006aec:	eef0 7a62 	vmov.f32	s15, s5
 8006af0:	ed87 5a07 	vstr	s10, [r7, #28]
 8006af4:	edc7 5a08 	vstr	s11, [r7, #32]
 8006af8:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8006afc:	edc7 6a04 	vstr	s13, [r7, #16]
 8006b00:	ed87 7a05 	vstr	s14, [r7, #20]
 8006b04:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 8006b08:	ed97 7a07 	vldr	s14, [r7, #28]
 8006b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b10:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006b14:	ed97 7a08 	vldr	s14, [r7, #32]
 8006b18:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b1c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006b20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006b24:	edd7 7a06 	vldr	s15, [r7, #24]
 8006b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b2c:	eeb0 1a67 	vmov.f32	s2, s15
 8006b30:	eef0 0a46 	vmov.f32	s1, s12
 8006b34:	eeb0 0a66 	vmov.f32	s0, s13
 8006b38:	f7ff ff0c 	bl	8006954 <mkvec>
 8006b3c:	eef0 6a40 	vmov.f32	s13, s0
 8006b40:	eeb0 7a60 	vmov.f32	s14, s1
 8006b44:	eef0 7a41 	vmov.f32	s15, s2
 8006b48:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8006b4c:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8006b50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8006b54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5a:	ee06 1a90 	vmov	s13, r1
 8006b5e:	ee07 2a10 	vmov	s14, r2
 8006b62:	ee07 3a90 	vmov	s15, r3
}
 8006b66:	eeb0 0a66 	vmov.f32	s0, s13
 8006b6a:	eef0 0a47 	vmov.f32	s1, s14
 8006b6e:	eeb0 1a67 	vmov.f32	s2, s15
 8006b72:	3738      	adds	r7, #56	; 0x38
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <vsub>:
// subtract a vector from another vector.
static inline struct vec vsub(struct vec a, struct vec b) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b090      	sub	sp, #64	; 0x40
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	eeb0 5a40 	vmov.f32	s10, s0
 8006b82:	eef0 5a60 	vmov.f32	s11, s1
 8006b86:	eeb0 6a41 	vmov.f32	s12, s2
 8006b8a:	eef0 6a61 	vmov.f32	s13, s3
 8006b8e:	eeb0 7a42 	vmov.f32	s14, s4
 8006b92:	eef0 7a62 	vmov.f32	s15, s5
 8006b96:	ed87 5a07 	vstr	s10, [r7, #28]
 8006b9a:	edc7 5a08 	vstr	s11, [r7, #32]
 8006b9e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8006ba2:	edc7 6a04 	vstr	s13, [r7, #16]
 8006ba6:	ed87 7a05 	vstr	s14, [r7, #20]
 8006baa:	edc7 7a06 	vstr	s15, [r7, #24]
	return vadd(a, vneg(b));
 8006bae:	edd7 6a04 	vldr	s13, [r7, #16]
 8006bb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006bb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8006bba:	eeb0 0a66 	vmov.f32	s0, s13
 8006bbe:	eef0 0a47 	vmov.f32	s1, s14
 8006bc2:	eeb0 1a67 	vmov.f32	s2, s15
 8006bc6:	f7ff ff43 	bl	8006a50 <vneg>
 8006bca:	eef0 6a40 	vmov.f32	s13, s0
 8006bce:	eeb0 7a60 	vmov.f32	s14, s1
 8006bd2:	eef0 7a41 	vmov.f32	s15, s2
 8006bd6:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8006bda:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8006bde:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8006be2:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 8006be6:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 8006bea:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8006bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf2:	ed97 7a08 	vldr	s14, [r7, #32]
 8006bf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006bfa:	eef0 1a45 	vmov.f32	s3, s10
 8006bfe:	eeb0 2a65 	vmov.f32	s4, s11
 8006c02:	eef0 2a46 	vmov.f32	s5, s12
 8006c06:	eeb0 0a66 	vmov.f32	s0, s13
 8006c0a:	eef0 0a47 	vmov.f32	s1, s14
 8006c0e:	eeb0 1a67 	vmov.f32	s2, s15
 8006c12:	f7ff ff5e 	bl	8006ad2 <vadd>
 8006c16:	eef0 6a40 	vmov.f32	s13, s0
 8006c1a:	eeb0 7a60 	vmov.f32	s14, s1
 8006c1e:	eef0 7a41 	vmov.f32	s15, s2
 8006c22:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8006c26:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8006c2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8006c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	ee06 1a90 	vmov	s13, r1
 8006c38:	ee07 2a10 	vmov	s14, r2
 8006c3c:	ee07 3a90 	vmov	s15, r3
}
 8006c40:	eeb0 0a66 	vmov.f32	s0, s13
 8006c44:	eef0 0a47 	vmov.f32	s1, s14
 8006c48:	eeb0 1a67 	vmov.f32	s2, s15
 8006c4c:	3740      	adds	r7, #64	; 0x40
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <piecewise_duration>:
	unsigned char n_pieces;
	struct poly4d* pieces;
};

static inline float piecewise_duration(struct piecewise_traj const *pp)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b085      	sub	sp, #20
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
	float total_dur = 0;
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < pp->n_pieces; ++i) {
 8006c60:	2300      	movs	r3, #0
 8006c62:	60bb      	str	r3, [r7, #8]
 8006c64:	e012      	b.n	8006c8c <piecewise_duration+0x3a>
		total_dur += pp->pieces[i].duration;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6999      	ldr	r1, [r3, #24]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	015b      	lsls	r3, r3, #5
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8006c7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c82:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < pp->n_pieces; ++i) {
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7d1b      	ldrb	r3, [r3, #20]
 8006c90:	461a      	mov	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4293      	cmp	r3, r2
 8006c96:	dbe6      	blt.n	8006c66 <piecewise_duration+0x14>
	}
	return total_dur * pp->timescale;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8006c9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8006ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <piecewise_is_finished>:
struct traj_eval piecewise_eval_reversed(
	struct piecewise_traj const *traj, float t);


static inline bool piecewise_is_finished(struct piecewise_traj const *traj, float t)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	ed2d 8b02 	vpush	{d8}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	ed87 0a00 	vstr	s0, [r7]
	return (t - traj->t_begin) >= piecewise_duration(traj);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	edd3 7a00 	vldr	s15, [r3]
 8006cca:	ed97 7a00 	vldr	s14, [r7]
 8006cce:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff ffbd 	bl	8006c52 <piecewise_duration>
 8006cd8:	eef0 7a40 	vmov.f32	s15, s0
 8006cdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce4:	bfac      	ite	ge
 8006ce6:	2301      	movge	r3, #1
 8006ce8:	2300      	movlt	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	ecbd 8b02 	vpop	{d8}
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <piecewise_compressed_duration>:
	} current_piece;
};

// Returns the total duration of a compressed trajectory. The total duration
// is pre-calculated and cached in the trajectory itself.
static float piecewise_compressed_duration(struct piecewise_traj_compressed const *traj) {
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	return traj->duration;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	ee07 3a90 	vmov	s15, r3
}
 8006d08:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <piecewise_compressed_is_finished>:

// Returns whether we have finished flying the trajectory
static inline bool piecewise_compressed_is_finished(
	struct piecewise_traj_compressed const *traj, float t)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	ed2d 8b02 	vpush	{d8}
 8006d1c:	b082      	sub	sp, #8
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	ed87 0a00 	vstr	s0, [r7]
	return (t - traj->t_begin) >= piecewise_compressed_duration(traj);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	edd3 7a00 	vldr	s15, [r3]
 8006d2c:	ed97 7a00 	vldr	s14, [r7]
 8006d30:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ffdf 	bl	8006cf8 <piecewise_compressed_duration>
 8006d3a:	eef0 7a40 	vmov.f32	s15, s0
 8006d3e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d46:	bfac      	ite	ge
 8006d48:	2301      	movge	r3, #1
 8006d4a:	2300      	movlt	r3, #0
 8006d4c:	b2db      	uxtb	r3, r3
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	ecbd 8b02 	vpop	{d8}
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <plan_takeoff_or_landing>:
#include "planner.h"

static struct traj_eval plan_eval(struct planner *p, float t);

static void plan_takeoff_or_landing(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration)
{
 8006d5c:	b5b0      	push	{r4, r5, r7, lr}
 8006d5e:	b0a0      	sub	sp, #128	; 0x80
 8006d60:	af08      	add	r7, sp, #32
 8006d62:	61f8      	str	r0, [r7, #28]
 8006d64:	eef0 6a40 	vmov.f32	s13, s0
 8006d68:	eeb0 7a60 	vmov.f32	s14, s1
 8006d6c:	eef0 7a41 	vmov.f32	s15, s2
 8006d70:	edc7 1a03 	vstr	s3, [r7, #12]
 8006d74:	ed87 2a02 	vstr	s4, [r7, #8]
 8006d78:	edc7 2a01 	vstr	s5, [r7, #4]
 8006d7c:	ed87 3a00 	vstr	s6, [r7]
 8006d80:	edc7 6a04 	vstr	s13, [r7, #16]
 8006d84:	ed87 7a05 	vstr	s14, [r7, #20]
 8006d88:	edc7 7a06 	vstr	s15, [r7, #24]
	struct vec hover_pos = curr_pos;
 8006d8c:	f107 0320 	add.w	r3, r7, #32
 8006d90:	f107 0210 	add.w	r2, r7, #16
 8006d94:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hover_pos.z = hover_height;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	62bb      	str	r3, [r7, #40]	; 0x28

	// compute the shortest possible rotation towards 0
	hover_yaw = normalize_radians(hover_yaw);
 8006d9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8006da2:	f7ff fd59 	bl	8006858 <normalize_radians>
 8006da6:	ed87 0a01 	vstr	s0, [r7, #4]
	curr_yaw = normalize_radians(curr_yaw);
 8006daa:	ed97 0a03 	vldr	s0, [r7, #12]
 8006dae:	f7ff fd53 	bl	8006858 <normalize_radians>
 8006db2:	ed87 0a03 	vstr	s0, [r7, #12]
	float goal_yaw = curr_yaw + shortest_signed_angle_radians(curr_yaw, hover_yaw);
 8006db6:	edd7 0a01 	vldr	s1, [r7, #4]
 8006dba:	ed97 0a03 	vldr	s0, [r7, #12]
 8006dbe:	f7ff fd99 	bl	80068f4 <shortest_signed_angle_radians>
 8006dc2:	eeb0 7a40 	vmov.f32	s14, s0
 8006dc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dce:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f103 0508 	add.w	r5, r3, #8
 8006dd8:	f7ff fe12 	bl	8006a00 <vzero>
 8006ddc:	eef0 6a40 	vmov.f32	s13, s0
 8006de0:	eeb0 7a60 	vmov.f32	s14, s1
 8006de4:	eef0 7a41 	vmov.f32	s15, s2
 8006de8:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8006dec:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8006df0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8006df4:	f7ff fe04 	bl	8006a00 <vzero>
 8006df8:	eef0 6a40 	vmov.f32	s13, s0
 8006dfc:	eeb0 7a60 	vmov.f32	s14, s1
 8006e00:	eef0 7a41 	vmov.f32	s15, s2
 8006e04:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8006e08:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8006e0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8006e10:	f7ff fdf6 	bl	8006a00 <vzero>
 8006e14:	eef0 6a40 	vmov.f32	s13, s0
 8006e18:	eeb0 7a60 	vmov.f32	s14, s1
 8006e1c:	eef0 7a41 	vmov.f32	s15, s2
 8006e20:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8006e24:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8006e28:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8006e2c:	f7ff fde8 	bl	8006a00 <vzero>
 8006e30:	eef0 6a40 	vmov.f32	s13, s0
 8006e34:	eeb0 7a60 	vmov.f32	s14, s1
 8006e38:	eef0 7a41 	vmov.f32	s15, s2
 8006e3c:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 8006e40:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8006e44:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8006e48:	ed97 6a08 	vldr	s12, [r7, #32]
 8006e4c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006e50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8006e54:	edd7 4a0e 	vldr	s9, [r7, #56]	; 0x38
 8006e58:	ed97 5a0f 	vldr	s10, [r7, #60]	; 0x3c
 8006e5c:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 8006e60:	edd7 2a0b 	vldr	s5, [r7, #44]	; 0x2c
 8006e64:	ed97 3a0c 	vldr	s6, [r7, #48]	; 0x30
 8006e68:	edd7 3a0d 	vldr	s7, [r7, #52]	; 0x34
 8006e6c:	edd7 0a04 	vldr	s1, [r7, #16]
 8006e70:	ed97 1a05 	vldr	s2, [r7, #20]
 8006e74:	edd7 1a06 	vldr	s3, [r7, #24]
 8006e78:	ac04      	add	r4, sp, #16
 8006e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	9303      	str	r3, [sp, #12]
 8006e8c:	466c      	mov	r4, sp
 8006e8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006e92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e9a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006e9e:	ed9f 4a06 	vldr	s8, [pc, #24]	; 8006eb8 <plan_takeoff_or_landing+0x15c>
 8006ea2:	ed97 2a03 	vldr	s4, [r7, #12]
 8006ea6:	ed97 0a00 	vldr	s0, [r7]
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f002 f8b0 	bl	8009010 <piecewise_plan_7th_order_no_jerk>
		curr_pos,  curr_yaw,  vzero(), 0, vzero(),
		hover_pos, goal_yaw, vzero(), 0, vzero());
}
 8006eb0:	bf00      	nop
 8006eb2:	3760      	adds	r7, #96	; 0x60
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb8:	00000000 	.word	0x00000000

08006ebc <plan_init>:
// ----------------- //
// public functions. //
// ----------------- //

void plan_init(struct planner *p)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	p->state = TRAJECTORY_STATE_IDLE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	705a      	strb	r2, [r3, #1]
	p->reversed = false;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	709a      	strb	r2, [r3, #2]
	p->trajectory = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	605a      	str	r2, [r3, #4]
	p->compressed_trajectory = NULL;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	605a      	str	r2, [r3, #4]
	p->planned_trajectory.pieces = p->pieces;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	621a      	str	r2, [r3, #32]
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <plan_stop>:

void plan_stop(struct planner *p)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	p->state = TRAJECTORY_STATE_IDLE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	701a      	strb	r2, [r3, #0]
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <plan_is_finished>:

bool plan_is_finished(struct planner *p, float t)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	ed87 0a00 	vstr	s0, [r7]
	switch (p->type) {
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <plan_is_finished+0x1a>
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d009      	beq.n	8006f3e <plan_is_finished+0x2c>
 8006f2a:	e011      	b.n	8006f50 <plan_is_finished+0x3e>
		case TRAJECTORY_TYPE_PIECEWISE:
			return piecewise_is_finished(p->trajectory, t);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	ed97 0a00 	vldr	s0, [r7]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff febd 	bl	8006cb4 <piecewise_is_finished>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	e009      	b.n	8006f52 <plan_is_finished+0x40>

		case TRAJECTORY_TYPE_PIECEWISE_COMPRESSED:
		  return piecewise_compressed_is_finished(p->compressed_trajectory, t);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	ed97 0a00 	vldr	s0, [r7]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fee5 	bl	8006d16 <piecewise_compressed_is_finished>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	e000      	b.n	8006f52 <plan_is_finished+0x40>

		default:
		  return 1;
 8006f50:	2301      	movs	r3, #1
	}
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <plan_is_stopped>:

bool plan_is_stopped(struct planner *p)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b083      	sub	sp, #12
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
	return p->state == TRAJECTORY_STATE_IDLE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bf0c      	ite	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	2300      	movne	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <plan_is_disabled>:
{
	p->state = TRAJECTORY_STATE_DISABLED;
}

bool plan_is_disabled(struct planner *p)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	return p->state == TRAJECTORY_STATE_DISABLED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	bf0c      	ite	eq
 8006f8c:	2301      	moveq	r3, #1
 8006f8e:	2300      	movne	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <plan_current_goal>:

struct traj_eval plan_current_goal(struct planner *p, float t)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (p->state) {
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d00c      	beq.n	8006fce <plan_current_goal+0x30>
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d112      	bne.n	8006fde <plan_current_goal+0x40>
		case TRAJECTORY_STATE_LANDING:
			if (plan_is_finished(p, t)) {
 8006fb8:	ed97 0a01 	vldr	s0, [r7, #4]
 8006fbc:	68b8      	ldr	r0, [r7, #8]
 8006fbe:	f7ff ffa8 	bl	8006f12 <plan_is_finished>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <plan_current_goal+0x30>
				p->state = TRAJECTORY_STATE_IDLE;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
			}
			// intentional fall-thru
		case TRAJECTORY_STATE_FLYING:
			return plan_eval(p, t);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	ed97 0a01 	vldr	s0, [r7, #4]
 8006fd4:	68b9      	ldr	r1, [r7, #8]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f809 	bl	8006fee <plan_eval>
 8006fdc:	e003      	b.n	8006fe6 <plan_current_goal+0x48>

		default:
			return traj_eval_invalid();
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 fbfd 	bl	80087e0 <traj_eval_invalid>
	}
}
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <plan_eval>:

struct traj_eval plan_eval(struct planner *p, float t)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	ed87 0a01 	vstr	s0, [r7, #4]
	switch (p->type) {
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <plan_eval+0x1c>
 8007004:	2b01      	cmp	r3, #1
 8007006:	d018      	beq.n	800703a <plan_eval+0x4c>
 8007008:	e02a      	b.n	8007060 <plan_eval+0x72>
		case TRAJECTORY_TYPE_PIECEWISE:
			if (p->reversed) {
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	789b      	ldrb	r3, [r3, #2]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <plan_eval+0x38>
				return piecewise_eval_reversed(p->trajectory, t);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	ed97 0a01 	vldr	s0, [r7, #4]
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fefa 	bl	8008e18 <piecewise_eval_reversed>
 8007024:	e020      	b.n	8007068 <plan_eval+0x7a>
			}
			else {
				return piecewise_eval(p->trajectory, t);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	ed97 0a01 	vldr	s0, [r7, #4]
 8007030:	4611      	mov	r1, r2
 8007032:	4618      	mov	r0, r3
 8007034:	f001 fe06 	bl	8008c44 <piecewise_eval>
 8007038:	e016      	b.n	8007068 <plan_eval+0x7a>
			}
			break;

		case TRAJECTORY_TYPE_PIECEWISE_COMPRESSED:
			if (p->reversed) {
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	789b      	ldrb	r3, [r3, #2]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <plan_eval+0x5e>
				/* not supported */
				return traj_eval_invalid();
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4618      	mov	r0, r3
 8007046:	f001 fbcb 	bl	80087e0 <traj_eval_invalid>
 800704a:	e00d      	b.n	8007068 <plan_eval+0x7a>
			}
			else {
				return piecewise_compressed_eval(p->compressed_trajectory, t);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	ed97 0a01 	vldr	s0, [r7, #4]
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f002 face 	bl	80095fa <piecewise_compressed_eval>
 800705e:	e003      	b.n	8007068 <plan_eval+0x7a>
			}
			break;

		default:
			return traj_eval_invalid();
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4618      	mov	r0, r3
 8007064:	f001 fbbc 	bl	80087e0 <traj_eval_invalid>
	}
}
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <plan_takeoff>:

int plan_takeoff(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration, float t)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	6278      	str	r0, [r7, #36]	; 0x24
 8007078:	eef0 6a40 	vmov.f32	s13, s0
 800707c:	eeb0 7a60 	vmov.f32	s14, s1
 8007080:	eef0 7a41 	vmov.f32	s15, s2
 8007084:	edc7 1a05 	vstr	s3, [r7, #20]
 8007088:	ed87 2a04 	vstr	s4, [r7, #16]
 800708c:	edc7 2a03 	vstr	s5, [r7, #12]
 8007090:	ed87 3a02 	vstr	s6, [r7, #8]
 8007094:	edc7 3a01 	vstr	s7, [r7, #4]
 8007098:	edc7 6a06 	vstr	s13, [r7, #24]
 800709c:	ed87 7a07 	vstr	s14, [r7, #28]
 80070a0:	edc7 7a08 	vstr	s15, [r7, #32]
	if (p->state != TRAJECTORY_STATE_IDLE) {
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <plan_takeoff+0x40>
		return 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e028      	b.n	8007102 <plan_takeoff+0x92>
	}

	plan_takeoff_or_landing(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration);
 80070b0:	edd7 6a06 	vldr	s13, [r7, #24]
 80070b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80070b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80070bc:	ed97 3a02 	vldr	s6, [r7, #8]
 80070c0:	edd7 2a03 	vldr	s5, [r7, #12]
 80070c4:	ed97 2a04 	vldr	s4, [r7, #16]
 80070c8:	edd7 1a05 	vldr	s3, [r7, #20]
 80070cc:	eeb0 0a66 	vmov.f32	s0, s13
 80070d0:	eef0 0a47 	vmov.f32	s1, s14
 80070d4:	eeb0 1a67 	vmov.f32	s2, s15
 80070d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070da:	f7ff fe3f 	bl	8006d5c <plan_takeoff_or_landing>
	p->reversed = false;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	2200      	movs	r2, #0
 80070e2:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	2200      	movs	r2, #0
 80070ee:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	f103 0208 	add.w	r2, r3, #8
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	605a      	str	r2, [r3, #4]
	return 0;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3728      	adds	r7, #40	; 0x28
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <plan_land>:

int plan_land(struct planner *p, struct vec curr_pos, float curr_yaw, float hover_height, float hover_yaw, float duration, float t)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b08a      	sub	sp, #40	; 0x28
 800710e:	af00      	add	r7, sp, #0
 8007110:	6278      	str	r0, [r7, #36]	; 0x24
 8007112:	eef0 6a40 	vmov.f32	s13, s0
 8007116:	eeb0 7a60 	vmov.f32	s14, s1
 800711a:	eef0 7a41 	vmov.f32	s15, s2
 800711e:	edc7 1a05 	vstr	s3, [r7, #20]
 8007122:	ed87 2a04 	vstr	s4, [r7, #16]
 8007126:	edc7 2a03 	vstr	s5, [r7, #12]
 800712a:	ed87 3a02 	vstr	s6, [r7, #8]
 800712e:	edc7 3a01 	vstr	s7, [r7, #4]
 8007132:	edc7 6a06 	vstr	s13, [r7, #24]
 8007136:	ed87 7a07 	vstr	s14, [r7, #28]
 800713a:	edc7 7a08 	vstr	s15, [r7, #32]
	if (p->state == TRAJECTORY_STATE_LANDING) {
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d101      	bne.n	800714a <plan_land+0x40>
		return 1;
 8007146:	2301      	movs	r3, #1
 8007148:	e028      	b.n	800719c <plan_land+0x92>
	}

	plan_takeoff_or_landing(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration);
 800714a:	edd7 6a06 	vldr	s13, [r7, #24]
 800714e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007152:	edd7 7a08 	vldr	s15, [r7, #32]
 8007156:	ed97 3a02 	vldr	s6, [r7, #8]
 800715a:	edd7 2a03 	vldr	s5, [r7, #12]
 800715e:	ed97 2a04 	vldr	s4, [r7, #16]
 8007162:	edd7 1a05 	vldr	s3, [r7, #20]
 8007166:	eeb0 0a66 	vmov.f32	s0, s13
 800716a:	eef0 0a47 	vmov.f32	s1, s14
 800716e:	eeb0 1a67 	vmov.f32	s2, s15
 8007172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007174:	f7ff fdf2 	bl	8006d5c <plan_takeoff_or_landing>
	p->reversed = false;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	2200      	movs	r2, #0
 800717c:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_LANDING;
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	2203      	movs	r2, #3
 8007182:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	2200      	movs	r2, #0
 8007188:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	f103 0208 	add.w	r2, r3, #8
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	605a      	str	r2, [r3, #4]
	return 0;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3728      	adds	r7, #40	; 0x28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <plan_go_to_from>:

int plan_go_to_from(struct planner *p, const struct traj_eval *curr_eval, bool relative, struct vec hover_pos, float hover_yaw, float duration, float t)
{
 80071a4:	b5b0      	push	{r4, r5, r7, lr}
 80071a6:	ed2d 8b02 	vpush	{d8}
 80071aa:	b09a      	sub	sp, #104	; 0x68
 80071ac:	af08      	add	r7, sp, #32
 80071ae:	6278      	str	r0, [r7, #36]	; 0x24
 80071b0:	6239      	str	r1, [r7, #32]
 80071b2:	4613      	mov	r3, r2
 80071b4:	eef0 6a40 	vmov.f32	s13, s0
 80071b8:	eeb0 7a60 	vmov.f32	s14, s1
 80071bc:	eef0 7a41 	vmov.f32	s15, s2
 80071c0:	edc7 1a03 	vstr	s3, [r7, #12]
 80071c4:	ed87 2a02 	vstr	s4, [r7, #8]
 80071c8:	edc7 2a01 	vstr	s5, [r7, #4]
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	edc7 6a04 	vstr	s13, [r7, #16]
 80071d2:	ed87 7a05 	vstr	s14, [r7, #20]
 80071d6:	edc7 7a06 	vstr	s15, [r7, #24]
	if (relative) {
 80071da:	7ffb      	ldrb	r3, [r7, #31]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02f      	beq.n	8007240 <plan_go_to_from+0x9c>
		hover_pos = vadd(hover_pos, curr_eval->pos);
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	ed93 5a00 	vldr	s10, [r3]
 80071e6:	edd3 5a01 	vldr	s11, [r3, #4]
 80071ea:	ed93 6a02 	vldr	s12, [r3, #8]
 80071ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80071f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80071f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80071fa:	eef0 1a45 	vmov.f32	s3, s10
 80071fe:	eeb0 2a65 	vmov.f32	s4, s11
 8007202:	eef0 2a46 	vmov.f32	s5, s12
 8007206:	eeb0 0a66 	vmov.f32	s0, s13
 800720a:	eef0 0a47 	vmov.f32	s1, s14
 800720e:	eeb0 1a67 	vmov.f32	s2, s15
 8007212:	f7ff fc5e 	bl	8006ad2 <vadd>
 8007216:	eef0 6a40 	vmov.f32	s13, s0
 800721a:	eeb0 7a60 	vmov.f32	s14, s1
 800721e:	eef0 7a41 	vmov.f32	s15, s2
 8007222:	edc7 6a04 	vstr	s13, [r7, #16]
 8007226:	ed87 7a05 	vstr	s14, [r7, #20]
 800722a:	edc7 7a06 	vstr	s15, [r7, #24]
		hover_yaw += curr_eval->yaw;
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007234:	ed97 7a03 	vldr	s14, [r7, #12]
 8007238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800723c:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// compute the shortest possible rotation towards 0
	float curr_yaw = normalize_radians(curr_eval->yaw);
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007246:	eeb0 0a67 	vmov.f32	s0, s15
 800724a:	f7ff fb05 	bl	8006858 <normalize_radians>
 800724e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	hover_yaw = normalize_radians(hover_yaw);
 8007252:	ed97 0a03 	vldr	s0, [r7, #12]
 8007256:	f7ff faff 	bl	8006858 <normalize_radians>
 800725a:	ed87 0a03 	vstr	s0, [r7, #12]
	float goal_yaw = curr_yaw + shortest_signed_angle_radians(curr_yaw, hover_yaw);
 800725e:	edd7 0a03 	vldr	s1, [r7, #12]
 8007262:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8007266:	f7ff fb45 	bl	80068f4 <shortest_signed_angle_radians>
 800726a:	eeb0 7a40 	vmov.f32	s14, s0
 800726e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007276:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	f103 0508 	add.w	r5, r3, #8
		curr_eval->pos, curr_yaw, curr_eval->vel, curr_eval->omega.z, curr_eval->acc,
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	ed93 8a0b 	vldr	s16, [r3, #44]	; 0x2c
	piecewise_plan_7th_order_no_jerk(&p->planned_trajectory, duration,
 8007286:	f7ff fbbb 	bl	8006a00 <vzero>
 800728a:	eef0 6a40 	vmov.f32	s13, s0
 800728e:	eeb0 7a60 	vmov.f32	s14, s1
 8007292:	eef0 7a41 	vmov.f32	s15, s2
 8007296:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 800729a:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 800729e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80072a2:	f7ff fbad 	bl	8006a00 <vzero>
 80072a6:	eef0 6a40 	vmov.f32	s13, s0
 80072aa:	eeb0 7a60 	vmov.f32	s14, s1
 80072ae:	eef0 7a41 	vmov.f32	s15, s2
 80072b2:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80072b6:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80072ba:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80072be:	ed97 6a04 	vldr	s12, [r7, #16]
 80072c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80072c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	edd3 4a06 	vldr	s9, [r3, #24]
 80072d0:	ed93 5a07 	vldr	s10, [r3, #28]
 80072d4:	edd3 5a08 	vldr	s11, [r3, #32]
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	edd3 2a03 	vldr	s5, [r3, #12]
 80072de:	ed93 3a04 	vldr	s6, [r3, #16]
 80072e2:	edd3 3a05 	vldr	s7, [r3, #20]
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	edd3 0a00 	vldr	s1, [r3]
 80072ec:	ed93 1a01 	vldr	s2, [r3, #4]
 80072f0:	edd3 1a02 	vldr	s3, [r3, #8]
 80072f4:	ac04      	add	r4, sp, #16
 80072f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80072fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80072fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	466c      	mov	r4, sp
 800730a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800730e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007316:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800731a:	eeb0 4a48 	vmov.f32	s8, s16
 800731e:	ed97 2a11 	vldr	s4, [r7, #68]	; 0x44
 8007322:	ed97 0a02 	vldr	s0, [r7, #8]
 8007326:	4628      	mov	r0, r5
 8007328:	f001 fe72 	bl	8009010 <piecewise_plan_7th_order_no_jerk>
		hover_pos,      goal_yaw,      vzero(),        0,                  vzero());

	p->reversed = false;
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	2200      	movs	r2, #0
 8007330:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	2200      	movs	r2, #0
 800733c:	705a      	strb	r2, [r3, #1]
	p->planned_trajectory.t_begin = t;
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	609a      	str	r2, [r3, #8]
	p->trajectory = &p->planned_trajectory;
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	f103 0208 	add.w	r2, r3, #8
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	605a      	str	r2, [r3, #4]
	return 0;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3748      	adds	r7, #72	; 0x48
 8007354:	46bd      	mov	sp, r7
 8007356:	ecbd 8b02 	vpop	{d8}
 800735a:	bdb0      	pop	{r4, r5, r7, pc}

0800735c <plan_go_to>:

int plan_go_to(struct planner *p, bool relative, struct vec hover_pos, float hover_yaw, float duration, float t)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b096      	sub	sp, #88	; 0x58
 8007360:	af00      	add	r7, sp, #0
 8007362:	61f8      	str	r0, [r7, #28]
 8007364:	460b      	mov	r3, r1
 8007366:	eef0 6a40 	vmov.f32	s13, s0
 800736a:	eeb0 7a60 	vmov.f32	s14, s1
 800736e:	eef0 7a41 	vmov.f32	s15, s2
 8007372:	edc7 1a02 	vstr	s3, [r7, #8]
 8007376:	ed87 2a01 	vstr	s4, [r7, #4]
 800737a:	edc7 2a00 	vstr	s5, [r7]
 800737e:	76fb      	strb	r3, [r7, #27]
 8007380:	edc7 6a03 	vstr	s13, [r7, #12]
 8007384:	ed87 7a04 	vstr	s14, [r7, #16]
 8007388:	edc7 7a05 	vstr	s15, [r7, #20]
	struct traj_eval setpoint = plan_current_goal(p, t);
 800738c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007390:	ed97 0a00 	vldr	s0, [r7]
 8007394:	69f9      	ldr	r1, [r7, #28]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fe01 	bl	8006f9e <plan_current_goal>
	return plan_go_to_from(p, &setpoint, relative, hover_pos, hover_yaw, duration, t);
 800739c:	edd7 6a03 	vldr	s13, [r7, #12]
 80073a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80073a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80073a8:	7efa      	ldrb	r2, [r7, #27]
 80073aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ae:	edd7 2a00 	vldr	s5, [r7]
 80073b2:	ed97 2a01 	vldr	s4, [r7, #4]
 80073b6:	edd7 1a02 	vldr	s3, [r7, #8]
 80073ba:	eeb0 0a66 	vmov.f32	s0, s13
 80073be:	eef0 0a47 	vmov.f32	s1, s14
 80073c2:	eeb0 1a67 	vmov.f32	s2, s15
 80073c6:	4619      	mov	r1, r3
 80073c8:	69f8      	ldr	r0, [r7, #28]
 80073ca:	f7ff feeb 	bl	80071a4 <plan_go_to_from>
 80073ce:	4603      	mov	r3, r0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3758      	adds	r7, #88	; 0x58
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <plan_start_trajectory>:

int plan_start_trajectory(struct planner *p, struct piecewise_traj* trajectory, bool reversed, bool relative, struct vec start_from)
{
 80073d8:	b5b0      	push	{r4, r5, r7, lr}
 80073da:	b0a4      	sub	sp, #144	; 0x90
 80073dc:	af00      	add	r7, sp, #0
 80073de:	64f8      	str	r0, [r7, #76]	; 0x4c
 80073e0:	64b9      	str	r1, [r7, #72]	; 0x48
 80073e2:	4611      	mov	r1, r2
 80073e4:	461a      	mov	r2, r3
 80073e6:	eef0 6a40 	vmov.f32	s13, s0
 80073ea:	eeb0 7a60 	vmov.f32	s14, s1
 80073ee:	eef0 7a41 	vmov.f32	s15, s2
 80073f2:	460b      	mov	r3, r1
 80073f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80073f8:	4613      	mov	r3, r2
 80073fa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80073fe:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8007402:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8007406:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	p->reversed = reversed;
 800740a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007410:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 8007412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007414:	2201      	movs	r2, #1
 8007416:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE;
 8007418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800741a:	2200      	movs	r2, #0
 800741c:	705a      	strb	r2, [r3, #1]
	p->trajectory = trajectory;
 800741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007422:	605a      	str	r2, [r3, #4]

	if (relative) {
 8007424:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007428:	2b00      	cmp	r3, #0
 800742a:	d061      	beq.n	80074f0 <plan_start_trajectory+0x118>
		struct traj_eval traj_init;
		trajectory->shift = vzero();
 800742c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800742e:	f7ff fae7 	bl	8006a00 <vzero>
 8007432:	eef0 6a40 	vmov.f32	s13, s0
 8007436:	eeb0 7a60 	vmov.f32	s14, s1
 800743a:	eef0 7a41 	vmov.f32	s15, s2
 800743e:	edc4 6a02 	vstr	s13, [r4, #8]
 8007442:	ed84 7a03 	vstr	s14, [r4, #12]
 8007446:	edc4 7a04 	vstr	s15, [r4, #16]
		if (reversed) {
 800744a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00b      	beq.n	800746a <plan_start_trajectory+0x92>
			traj_init = piecewise_eval_reversed(trajectory, trajectory->t_begin);
 8007452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007454:	edd3 7a00 	vldr	s15, [r3]
 8007458:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800745c:	eeb0 0a67 	vmov.f32	s0, s15
 8007460:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007462:	4618      	mov	r0, r3
 8007464:	f001 fcd8 	bl	8008e18 <piecewise_eval_reversed>
 8007468:	e014      	b.n	8007494 <plan_start_trajectory+0xbc>
		}
		else {
			traj_init = piecewise_eval(trajectory, trajectory->t_begin);
 800746a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800746c:	edd3 7a00 	vldr	s15, [r3]
 8007470:	463b      	mov	r3, r7
 8007472:	eeb0 0a67 	vmov.f32	s0, s15
 8007476:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fbe3 	bl	8008c44 <piecewise_eval>
 800747e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007482:	463d      	mov	r5, r7
 8007484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800748a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800748c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800748e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	6023      	str	r3, [r4, #0]
		}
		struct vec shift_pos = vsub(start_from, traj_init.pos);
 8007494:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 8007498:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 800749c:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 80074a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80074a4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80074a8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80074ac:	eef0 1a45 	vmov.f32	s3, s10
 80074b0:	eeb0 2a65 	vmov.f32	s4, s11
 80074b4:	eef0 2a46 	vmov.f32	s5, s12
 80074b8:	eeb0 0a66 	vmov.f32	s0, s13
 80074bc:	eef0 0a47 	vmov.f32	s1, s14
 80074c0:	eeb0 1a67 	vmov.f32	s2, s15
 80074c4:	f7ff fb58 	bl	8006b78 <vsub>
 80074c8:	eef0 6a40 	vmov.f32	s13, s0
 80074cc:	eeb0 7a60 	vmov.f32	s14, s1
 80074d0:	eef0 7a41 	vmov.f32	s15, s2
 80074d4:	edc7 6a21 	vstr	s13, [r7, #132]	; 0x84
 80074d8:	ed87 7a22 	vstr	s14, [r7, #136]	; 0x88
 80074dc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		trajectory->shift = shift_pos;
 80074e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e2:	3308      	adds	r3, #8
 80074e4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80074e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80074ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80074ee:	e00e      	b.n	800750e <plan_start_trajectory+0x136>
	}
	else {
		trajectory->shift = vzero();
 80074f0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80074f2:	f7ff fa85 	bl	8006a00 <vzero>
 80074f6:	eef0 6a40 	vmov.f32	s13, s0
 80074fa:	eeb0 7a60 	vmov.f32	s14, s1
 80074fe:	eef0 7a41 	vmov.f32	s15, s2
 8007502:	edc4 6a02 	vstr	s13, [r4, #8]
 8007506:	ed84 7a03 	vstr	s14, [r4, #12]
 800750a:	edc4 7a04 	vstr	s15, [r4, #16]
	}

	return 0;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3790      	adds	r7, #144	; 0x90
 8007514:	46bd      	mov	sp, r7
 8007516:	bdb0      	pop	{r4, r5, r7, pc}

08007518 <plan_start_compressed_trajectory>:

int plan_start_compressed_trajectory( struct planner *p, struct piecewise_traj_compressed* trajectory, bool relative, struct vec start_from)
{
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b097      	sub	sp, #92	; 0x5c
 800751c:	af00      	add	r7, sp, #0
 800751e:	6178      	str	r0, [r7, #20]
 8007520:	6139      	str	r1, [r7, #16]
 8007522:	4613      	mov	r3, r2
 8007524:	eef0 6a40 	vmov.f32	s13, s0
 8007528:	eeb0 7a60 	vmov.f32	s14, s1
 800752c:	eef0 7a41 	vmov.f32	s15, s2
 8007530:	73fb      	strb	r3, [r7, #15]
 8007532:	edc7 6a00 	vstr	s13, [r7]
 8007536:	ed87 7a01 	vstr	s14, [r7, #4]
 800753a:	edc7 7a02 	vstr	s15, [r7, #8]
	p->reversed = 0;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	709a      	strb	r2, [r3, #2]
	p->state = TRAJECTORY_STATE_FLYING;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2201      	movs	r2, #1
 8007548:	701a      	strb	r2, [r3, #0]
	p->type = TRAJECTORY_TYPE_PIECEWISE_COMPRESSED;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2201      	movs	r2, #1
 800754e:	705a      	strb	r2, [r3, #1]
	p->compressed_trajectory = trajectory;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	605a      	str	r2, [r3, #4]

	if (relative) {
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d047      	beq.n	80075ec <plan_start_compressed_trajectory+0xd4>
		trajectory->shift = vzero();
 800755c:	693c      	ldr	r4, [r7, #16]
 800755e:	f7ff fa4f 	bl	8006a00 <vzero>
 8007562:	eef0 6a40 	vmov.f32	s13, s0
 8007566:	eeb0 7a60 	vmov.f32	s14, s1
 800756a:	eef0 7a41 	vmov.f32	s15, s2
 800756e:	edc4 6a03 	vstr	s13, [r4, #12]
 8007572:	ed84 7a04 	vstr	s14, [r4, #16]
 8007576:	edc4 7a05 	vstr	s15, [r4, #20]
		struct traj_eval traj_init = piecewise_compressed_eval(
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	edd3 7a00 	vldr	s15, [r3]
 8007580:	f107 0318 	add.w	r3, r7, #24
 8007584:	eeb0 0a67 	vmov.f32	s0, s15
 8007588:	6939      	ldr	r1, [r7, #16]
 800758a:	4618      	mov	r0, r3
 800758c:	f002 f835 	bl	80095fa <piecewise_compressed_eval>
			trajectory, trajectory->t_begin
		);
		struct vec shift_pos = vsub(start_from, traj_init.pos);
 8007590:	ed97 5a06 	vldr	s10, [r7, #24]
 8007594:	edd7 5a07 	vldr	s11, [r7, #28]
 8007598:	ed97 6a08 	vldr	s12, [r7, #32]
 800759c:	edd7 6a00 	vldr	s13, [r7]
 80075a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80075a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80075a8:	eef0 1a45 	vmov.f32	s3, s10
 80075ac:	eeb0 2a65 	vmov.f32	s4, s11
 80075b0:	eef0 2a46 	vmov.f32	s5, s12
 80075b4:	eeb0 0a66 	vmov.f32	s0, s13
 80075b8:	eef0 0a47 	vmov.f32	s1, s14
 80075bc:	eeb0 1a67 	vmov.f32	s2, s15
 80075c0:	f7ff fada 	bl	8006b78 <vsub>
 80075c4:	eef0 6a40 	vmov.f32	s13, s0
 80075c8:	eeb0 7a60 	vmov.f32	s14, s1
 80075cc:	eef0 7a41 	vmov.f32	s15, s2
 80075d0:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 80075d4:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80075d8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		trajectory->shift = shift_pos;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	330c      	adds	r3, #12
 80075e0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80075e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80075e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80075ea:	e00e      	b.n	800760a <plan_start_compressed_trajectory+0xf2>
	} else {
		trajectory->shift = vzero();
 80075ec:	693c      	ldr	r4, [r7, #16]
 80075ee:	f7ff fa07 	bl	8006a00 <vzero>
 80075f2:	eef0 6a40 	vmov.f32	s13, s0
 80075f6:	eeb0 7a60 	vmov.f32	s14, s1
 80075fa:	eef0 7a41 	vmov.f32	s15, s2
 80075fe:	edc4 6a03 	vstr	s13, [r4, #12]
 8007602:	ed84 7a04 	vstr	s14, [r4, #16]
 8007606:	edc4 7a05 	vstr	s15, [r4, #20]
	}

	return 0;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	375c      	adds	r7, #92	; 0x5c
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}

08007614 <positionControllerResetAllPID>:
    // saturate
  *thrust = constrain(*thrust, 0, UINT16_MAX);
}

void positionControllerResetAllPID()
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  pidReset(&this.pidX.pid);
 8007618:	4809      	ldr	r0, [pc, #36]	; (8007640 <positionControllerResetAllPID+0x2c>)
 800761a:	f005 fff7 	bl	800d60c <pidReset>
  pidReset(&this.pidY.pid);
 800761e:	4809      	ldr	r0, [pc, #36]	; (8007644 <positionControllerResetAllPID+0x30>)
 8007620:	f005 fff4 	bl	800d60c <pidReset>
  pidReset(&this.pidZ.pid);
 8007624:	4808      	ldr	r0, [pc, #32]	; (8007648 <positionControllerResetAllPID+0x34>)
 8007626:	f005 fff1 	bl	800d60c <pidReset>
  pidReset(&this.pidVX.pid);
 800762a:	4808      	ldr	r0, [pc, #32]	; (800764c <positionControllerResetAllPID+0x38>)
 800762c:	f005 ffee 	bl	800d60c <pidReset>
  pidReset(&this.pidVY.pid);
 8007630:	4807      	ldr	r0, [pc, #28]	; (8007650 <positionControllerResetAllPID+0x3c>)
 8007632:	f005 ffeb 	bl	800d60c <pidReset>
  pidReset(&this.pidVZ.pid);
 8007636:	4807      	ldr	r0, [pc, #28]	; (8007654 <positionControllerResetAllPID+0x40>)
 8007638:	f005 ffe8 	bl	800d60c <pidReset>
}
 800763c:	bf00      	nop
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000a78 	.word	0x20000a78
 8007644:	20000ae4 	.word	0x20000ae4
 8007648:	20000b50 	.word	0x20000b50
 800764c:	20000934 	.word	0x20000934
 8007650:	200009a0 	.word	0x200009a0
 8007654:	20000a0c 	.word	0x20000a0c

08007658 <positionControllerResetAllfilters>:

void positionControllerResetAllfilters() {
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  filterReset(&this.pidX.pid, POSITION_RATE, posFiltCutoff, posFiltEnable);
 800765c:	4b27      	ldr	r3, [pc, #156]	; (80076fc <positionControllerResetAllfilters+0xa4>)
 800765e:	edd3 7a00 	vldr	s15, [r3]
 8007662:	4b27      	ldr	r3, [pc, #156]	; (8007700 <positionControllerResetAllfilters+0xa8>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	4619      	mov	r1, r3
 8007668:	eef0 0a67 	vmov.f32	s1, s15
 800766c:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8007704 <positionControllerResetAllfilters+0xac>
 8007670:	4825      	ldr	r0, [pc, #148]	; (8007708 <positionControllerResetAllfilters+0xb0>)
 8007672:	f005 ffe5 	bl	800d640 <filterReset>
  filterReset(&this.pidY.pid, POSITION_RATE, posFiltCutoff, posFiltEnable);
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <positionControllerResetAllfilters+0xa4>)
 8007678:	edd3 7a00 	vldr	s15, [r3]
 800767c:	4b20      	ldr	r3, [pc, #128]	; (8007700 <positionControllerResetAllfilters+0xa8>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	4619      	mov	r1, r3
 8007682:	eef0 0a67 	vmov.f32	s1, s15
 8007686:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8007704 <positionControllerResetAllfilters+0xac>
 800768a:	4820      	ldr	r0, [pc, #128]	; (800770c <positionControllerResetAllfilters+0xb4>)
 800768c:	f005 ffd8 	bl	800d640 <filterReset>
  filterReset(&this.pidZ.pid, POSITION_RATE, posZFiltCutoff, posZFiltEnable);
 8007690:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <positionControllerResetAllfilters+0xb8>)
 8007692:	edd3 7a00 	vldr	s15, [r3]
 8007696:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <positionControllerResetAllfilters+0xbc>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	4619      	mov	r1, r3
 800769c:	eef0 0a67 	vmov.f32	s1, s15
 80076a0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007704 <positionControllerResetAllfilters+0xac>
 80076a4:	481c      	ldr	r0, [pc, #112]	; (8007718 <positionControllerResetAllfilters+0xc0>)
 80076a6:	f005 ffcb 	bl	800d640 <filterReset>
  filterReset(&this.pidVX.pid, POSITION_RATE, velFiltCutoff, velFiltEnable);
 80076aa:	4b1c      	ldr	r3, [pc, #112]	; (800771c <positionControllerResetAllfilters+0xc4>)
 80076ac:	edd3 7a00 	vldr	s15, [r3]
 80076b0:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <positionControllerResetAllfilters+0xc8>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	4619      	mov	r1, r3
 80076b6:	eef0 0a67 	vmov.f32	s1, s15
 80076ba:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8007704 <positionControllerResetAllfilters+0xac>
 80076be:	4819      	ldr	r0, [pc, #100]	; (8007724 <positionControllerResetAllfilters+0xcc>)
 80076c0:	f005 ffbe 	bl	800d640 <filterReset>
  filterReset(&this.pidVY.pid, POSITION_RATE, velFiltCutoff, velFiltEnable);
 80076c4:	4b15      	ldr	r3, [pc, #84]	; (800771c <positionControllerResetAllfilters+0xc4>)
 80076c6:	edd3 7a00 	vldr	s15, [r3]
 80076ca:	4b15      	ldr	r3, [pc, #84]	; (8007720 <positionControllerResetAllfilters+0xc8>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	4619      	mov	r1, r3
 80076d0:	eef0 0a67 	vmov.f32	s1, s15
 80076d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8007704 <positionControllerResetAllfilters+0xac>
 80076d8:	4813      	ldr	r0, [pc, #76]	; (8007728 <positionControllerResetAllfilters+0xd0>)
 80076da:	f005 ffb1 	bl	800d640 <filterReset>
  filterReset(&this.pidVZ.pid, POSITION_RATE, velZFiltCutoff, velZFiltEnable);
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <positionControllerResetAllfilters+0xd4>)
 80076e0:	edd3 7a00 	vldr	s15, [r3]
 80076e4:	4b12      	ldr	r3, [pc, #72]	; (8007730 <positionControllerResetAllfilters+0xd8>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	4619      	mov	r1, r3
 80076ea:	eef0 0a67 	vmov.f32	s1, s15
 80076ee:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8007704 <positionControllerResetAllfilters+0xac>
 80076f2:	4810      	ldr	r0, [pc, #64]	; (8007734 <positionControllerResetAllfilters+0xdc>)
 80076f4:	f005 ffa4 	bl	800d640 <filterReset>
}
 80076f8:	bf00      	nop
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000920 	.word	0x20000920
 8007700:	2000091c 	.word	0x2000091c
 8007704:	42c80000 	.word	0x42c80000
 8007708:	20000a78 	.word	0x20000a78
 800770c:	20000ae4 	.word	0x20000ae4
 8007710:	2000092c 	.word	0x2000092c
 8007714:	20000928 	.word	0x20000928
 8007718:	20000b50 	.word	0x20000b50
 800771c:	20000924 	.word	0x20000924
 8007720:	2000091d 	.word	0x2000091d
 8007724:	20000934 	.word	0x20000934
 8007728:	200009a0 	.word	0x200009a0
 800772c:	20000930 	.word	0x20000930
 8007730:	20000929 	.word	0x20000929
 8007734:	20000a0c 	.word	0x20000a0c

08007738 <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 8007738:	b480      	push	{r7}
 800773a:	b08f      	sub	sp, #60	; 0x3c
 800773c:	af00      	add	r7, sp, #0
 800773e:	ed87 0a07 	vstr	s0, [r7, #28]
 8007742:	edc7 0a06 	vstr	s1, [r7, #24]
 8007746:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	623b      	str	r3, [r7, #32]
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 8007756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800775a:	f107 0220 	add.w	r2, r7, #32
 800775e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007760:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	ee06 1a90 	vmov	s13, r1
 800776e:	ee07 2a10 	vmov	s14, r2
 8007772:	ee07 3a90 	vmov	s15, r3
}
 8007776:	eeb0 0a66 	vmov.f32	s0, s13
 800777a:	eef0 0a47 	vmov.f32	s1, s14
 800777e:	eeb0 1a67 	vmov.f32	s2, s15
 8007782:	373c      	adds	r7, #60	; 0x3c
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <vrepeat>:
static inline struct vec vrepeat(float x) {
 800778c:	b580      	push	{r7, lr}
 800778e:	b08a      	sub	sp, #40	; 0x28
 8007790:	af00      	add	r7, sp, #0
 8007792:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 8007796:	ed97 1a05 	vldr	s2, [r7, #20]
 800779a:	edd7 0a05 	vldr	s1, [r7, #20]
 800779e:	ed97 0a05 	vldr	s0, [r7, #20]
 80077a2:	f7ff ffc9 	bl	8007738 <mkvec>
 80077a6:	eef0 6a40 	vmov.f32	s13, s0
 80077aa:	eeb0 7a60 	vmov.f32	s14, s1
 80077ae:	eef0 7a41 	vmov.f32	s15, s2
 80077b2:	edc7 6a07 	vstr	s13, [r7, #28]
 80077b6:	ed87 7a08 	vstr	s14, [r7, #32]
 80077ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80077be:	69f9      	ldr	r1, [r7, #28]
 80077c0:	6a3a      	ldr	r2, [r7, #32]
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	ee06 1a90 	vmov	s13, r1
 80077c8:	ee07 2a10 	vmov	s14, r2
 80077cc:	ee07 3a90 	vmov	s15, r3
}
 80077d0:	eeb0 0a66 	vmov.f32	s0, s13
 80077d4:	eef0 0a47 	vmov.f32	s1, s14
 80077d8:	eeb0 1a67 	vmov.f32	s2, s15
 80077dc:	3728      	adds	r7, #40	; 0x28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <vzero>:
static inline struct vec vzero(void) {
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 80077ea:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8007830 <vzero+0x4c>
 80077ee:	f7ff ffcd 	bl	800778c <vrepeat>
 80077f2:	eef0 6a40 	vmov.f32	s13, s0
 80077f6:	eeb0 7a60 	vmov.f32	s14, s1
 80077fa:	eef0 7a41 	vmov.f32	s15, s2
 80077fe:	edc7 6a05 	vstr	s13, [r7, #20]
 8007802:	ed87 7a06 	vstr	s14, [r7, #24]
 8007806:	edc7 7a07 	vstr	s15, [r7, #28]
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	ee06 1a90 	vmov	s13, r1
 8007814:	ee07 2a10 	vmov	s14, r2
 8007818:	ee07 3a90 	vmov	s15, r3
}
 800781c:	eeb0 0a66 	vmov.f32	s0, s13
 8007820:	eef0 0a47 	vmov.f32	s1, s14
 8007824:	eeb0 1a67 	vmov.f32	s2, s15
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	00000000 	.word	0x00000000

08007834 <vscl>:
static inline struct vec vscl(float s, struct vec v) {
 8007834:	b580      	push	{r7, lr}
 8007836:	b08c      	sub	sp, #48	; 0x30
 8007838:	af00      	add	r7, sp, #0
 800783a:	ed87 0a07 	vstr	s0, [r7, #28]
 800783e:	eef0 6a60 	vmov.f32	s13, s1
 8007842:	eeb0 7a41 	vmov.f32	s14, s2
 8007846:	eef0 7a61 	vmov.f32	s15, s3
 800784a:	edc7 6a04 	vstr	s13, [r7, #16]
 800784e:	ed87 7a05 	vstr	s14, [r7, #20]
 8007852:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 8007856:	ed97 7a04 	vldr	s14, [r7, #16]
 800785a:	edd7 7a07 	vldr	s15, [r7, #28]
 800785e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007862:	ed97 7a05 	vldr	s14, [r7, #20]
 8007866:	edd7 7a07 	vldr	s15, [r7, #28]
 800786a:	ee27 6a27 	vmul.f32	s12, s14, s15
 800786e:	ed97 7a06 	vldr	s14, [r7, #24]
 8007872:	edd7 7a07 	vldr	s15, [r7, #28]
 8007876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800787a:	eeb0 1a67 	vmov.f32	s2, s15
 800787e:	eef0 0a46 	vmov.f32	s1, s12
 8007882:	eeb0 0a66 	vmov.f32	s0, s13
 8007886:	f7ff ff57 	bl	8007738 <mkvec>
 800788a:	eef0 6a40 	vmov.f32	s13, s0
 800788e:	eeb0 7a60 	vmov.f32	s14, s1
 8007892:	eef0 7a41 	vmov.f32	s15, s2
 8007896:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800789a:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800789e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80078a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	ee06 1a90 	vmov	s13, r1
 80078ac:	ee07 2a10 	vmov	s14, r2
 80078b0:	ee07 3a90 	vmov	s15, r3
}
 80078b4:	eeb0 0a66 	vmov.f32	s0, s13
 80078b8:	eef0 0a47 	vmov.f32	s1, s14
 80078bc:	eeb0 1a67 	vmov.f32	s2, s15
 80078c0:	3730      	adds	r7, #48	; 0x30
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <vneg>:
static inline struct vec vneg(struct vec v) {
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b08c      	sub	sp, #48	; 0x30
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	eef0 6a40 	vmov.f32	s13, s0
 80078d0:	eeb0 7a60 	vmov.f32	s14, s1
 80078d4:	eef0 7a41 	vmov.f32	s15, s2
 80078d8:	edc7 6a05 	vstr	s13, [r7, #20]
 80078dc:	ed87 7a06 	vstr	s14, [r7, #24]
 80078e0:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(-v.x, -v.y, -v.z);
 80078e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80078e8:	eeb1 7a67 	vneg.f32	s14, s15
 80078ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80078f0:	eef1 6a67 	vneg.f32	s13, s15
 80078f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80078f8:	eef1 7a67 	vneg.f32	s15, s15
 80078fc:	eeb0 1a67 	vmov.f32	s2, s15
 8007900:	eef0 0a66 	vmov.f32	s1, s13
 8007904:	eeb0 0a47 	vmov.f32	s0, s14
 8007908:	f7ff ff16 	bl	8007738 <mkvec>
 800790c:	eef0 6a40 	vmov.f32	s13, s0
 8007910:	eeb0 7a60 	vmov.f32	s14, s1
 8007914:	eef0 7a41 	vmov.f32	s15, s2
 8007918:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 800791c:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8007920:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8007924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	ee06 1a90 	vmov	s13, r1
 800792e:	ee07 2a10 	vmov	s14, r2
 8007932:	ee07 3a90 	vmov	s15, r3
}
 8007936:	eeb0 0a66 	vmov.f32	s0, s13
 800793a:	eef0 0a47 	vmov.f32	s1, s14
 800793e:	eeb0 1a67 	vmov.f32	s2, s15
 8007942:	3730      	adds	r7, #48	; 0x30
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <vdiv>:
static inline struct vec vdiv(struct vec v, float s) {
 8007948:	b580      	push	{r7, lr}
 800794a:	b08c      	sub	sp, #48	; 0x30
 800794c:	af00      	add	r7, sp, #0
 800794e:	eef0 6a40 	vmov.f32	s13, s0
 8007952:	eeb0 7a60 	vmov.f32	s14, s1
 8007956:	eef0 7a41 	vmov.f32	s15, s2
 800795a:	edc7 1a04 	vstr	s3, [r7, #16]
 800795e:	edc7 6a05 	vstr	s13, [r7, #20]
 8007962:	ed87 7a06 	vstr	s14, [r7, #24]
 8007966:	edc7 7a07 	vstr	s15, [r7, #28]
	return vscl(1.0f/s, v);
 800796a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007976:	ed97 6a05 	vldr	s12, [r7, #20]
 800797a:	edd7 6a06 	vldr	s13, [r7, #24]
 800797e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007982:	eef0 0a46 	vmov.f32	s1, s12
 8007986:	eeb0 1a66 	vmov.f32	s2, s13
 800798a:	eef0 1a67 	vmov.f32	s3, s15
 800798e:	eeb0 0a47 	vmov.f32	s0, s14
 8007992:	f7ff ff4f 	bl	8007834 <vscl>
 8007996:	eef0 6a40 	vmov.f32	s13, s0
 800799a:	eeb0 7a60 	vmov.f32	s14, s1
 800799e:	eef0 7a41 	vmov.f32	s15, s2
 80079a2:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 80079a6:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80079aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80079ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	ee06 1a90 	vmov	s13, r1
 80079b8:	ee07 2a10 	vmov	s14, r2
 80079bc:	ee07 3a90 	vmov	s15, r3
}
 80079c0:	eeb0 0a66 	vmov.f32	s0, s13
 80079c4:	eef0 0a47 	vmov.f32	s1, s14
 80079c8:	eeb0 1a67 	vmov.f32	s2, s15
 80079cc:	3730      	adds	r7, #48	; 0x30
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b08e      	sub	sp, #56	; 0x38
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	eeb0 5a40 	vmov.f32	s10, s0
 80079dc:	eef0 5a60 	vmov.f32	s11, s1
 80079e0:	eeb0 6a41 	vmov.f32	s12, s2
 80079e4:	eef0 6a61 	vmov.f32	s13, s3
 80079e8:	eeb0 7a42 	vmov.f32	s14, s4
 80079ec:	eef0 7a62 	vmov.f32	s15, s5
 80079f0:	ed87 5a07 	vstr	s10, [r7, #28]
 80079f4:	edc7 5a08 	vstr	s11, [r7, #32]
 80079f8:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80079fc:	edc7 6a04 	vstr	s13, [r7, #16]
 8007a00:	ed87 7a05 	vstr	s14, [r7, #20]
 8007a04:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 8007a08:	ed97 7a07 	vldr	s14, [r7, #28]
 8007a0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a10:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007a14:	ed97 7a08 	vldr	s14, [r7, #32]
 8007a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a1c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007a20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007a24:	edd7 7a06 	vldr	s15, [r7, #24]
 8007a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a2c:	eeb0 1a67 	vmov.f32	s2, s15
 8007a30:	eef0 0a46 	vmov.f32	s1, s12
 8007a34:	eeb0 0a66 	vmov.f32	s0, s13
 8007a38:	f7ff fe7e 	bl	8007738 <mkvec>
 8007a3c:	eef0 6a40 	vmov.f32	s13, s0
 8007a40:	eeb0 7a60 	vmov.f32	s14, s1
 8007a44:	eef0 7a41 	vmov.f32	s15, s2
 8007a48:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8007a4c:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8007a50:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8007a54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5a:	ee06 1a90 	vmov	s13, r1
 8007a5e:	ee07 2a10 	vmov	s14, r2
 8007a62:	ee07 3a90 	vmov	s15, r3
}
 8007a66:	eeb0 0a66 	vmov.f32	s0, s13
 8007a6a:	eef0 0a47 	vmov.f32	s1, s14
 8007a6e:	eeb0 1a67 	vmov.f32	s2, s15
 8007a72:	3738      	adds	r7, #56	; 0x38
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <vsub>:
static inline struct vec vsub(struct vec a, struct vec b) {
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b090      	sub	sp, #64	; 0x40
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	eeb0 5a40 	vmov.f32	s10, s0
 8007a82:	eef0 5a60 	vmov.f32	s11, s1
 8007a86:	eeb0 6a41 	vmov.f32	s12, s2
 8007a8a:	eef0 6a61 	vmov.f32	s13, s3
 8007a8e:	eeb0 7a42 	vmov.f32	s14, s4
 8007a92:	eef0 7a62 	vmov.f32	s15, s5
 8007a96:	ed87 5a07 	vstr	s10, [r7, #28]
 8007a9a:	edc7 5a08 	vstr	s11, [r7, #32]
 8007a9e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007aa2:	edc7 6a04 	vstr	s13, [r7, #16]
 8007aa6:	ed87 7a05 	vstr	s14, [r7, #20]
 8007aaa:	edc7 7a06 	vstr	s15, [r7, #24]
	return vadd(a, vneg(b));
 8007aae:	edd7 6a04 	vldr	s13, [r7, #16]
 8007ab2:	ed97 7a05 	vldr	s14, [r7, #20]
 8007ab6:	edd7 7a06 	vldr	s15, [r7, #24]
 8007aba:	eeb0 0a66 	vmov.f32	s0, s13
 8007abe:	eef0 0a47 	vmov.f32	s1, s14
 8007ac2:	eeb0 1a67 	vmov.f32	s2, s15
 8007ac6:	f7ff fefe 	bl	80078c6 <vneg>
 8007aca:	eef0 6a40 	vmov.f32	s13, s0
 8007ace:	eeb0 7a60 	vmov.f32	s14, s1
 8007ad2:	eef0 7a41 	vmov.f32	s15, s2
 8007ad6:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8007ada:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8007ade:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8007ae2:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 8007ae6:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 8007aea:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8007aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af2:	ed97 7a08 	vldr	s14, [r7, #32]
 8007af6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007afa:	eef0 1a45 	vmov.f32	s3, s10
 8007afe:	eeb0 2a65 	vmov.f32	s4, s11
 8007b02:	eef0 2a46 	vmov.f32	s5, s12
 8007b06:	eeb0 0a66 	vmov.f32	s0, s13
 8007b0a:	eef0 0a47 	vmov.f32	s1, s14
 8007b0e:	eeb0 1a67 	vmov.f32	s2, s15
 8007b12:	f7ff ff5e 	bl	80079d2 <vadd>
 8007b16:	eef0 6a40 	vmov.f32	s13, s0
 8007b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8007b1e:	eef0 7a41 	vmov.f32	s15, s2
 8007b22:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8007b26:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8007b2a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8007b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	ee06 1a90 	vmov	s13, r1
 8007b38:	ee07 2a10 	vmov	s14, r2
 8007b3c:	ee07 3a90 	vmov	s15, r3
}
 8007b40:	eeb0 0a66 	vmov.f32	s0, s13
 8007b44:	eef0 0a47 	vmov.f32	s1, s14
 8007b48:	eeb0 1a67 	vmov.f32	s2, s15
 8007b4c:	3740      	adds	r7, #64	; 0x40
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <vdot>:
// vector dot product.
static inline float vdot(struct vec a, struct vec b) {
 8007b52:	b480      	push	{r7}
 8007b54:	b087      	sub	sp, #28
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	eeb0 5a40 	vmov.f32	s10, s0
 8007b5c:	eef0 5a60 	vmov.f32	s11, s1
 8007b60:	eeb0 6a41 	vmov.f32	s12, s2
 8007b64:	eef0 6a61 	vmov.f32	s13, s3
 8007b68:	eeb0 7a42 	vmov.f32	s14, s4
 8007b6c:	eef0 7a62 	vmov.f32	s15, s5
 8007b70:	ed87 5a03 	vstr	s10, [r7, #12]
 8007b74:	edc7 5a04 	vstr	s11, [r7, #16]
 8007b78:	ed87 6a05 	vstr	s12, [r7, #20]
 8007b7c:	edc7 6a00 	vstr	s13, [r7]
 8007b80:	ed87 7a01 	vstr	s14, [r7, #4]
 8007b84:	edc7 7a02 	vstr	s15, [r7, #8]
	return a.x * b.x + a.y * b.y + a.z * b.z;
 8007b88:	ed97 7a03 	vldr	s14, [r7, #12]
 8007b8c:	edd7 7a00 	vldr	s15, [r7]
 8007b90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b94:	edd7 6a04 	vldr	s13, [r7, #16]
 8007b98:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ba4:	edd7 6a05 	vldr	s13, [r7, #20]
 8007ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8007bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007bb0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8007bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <vmag2>:
// element-wise vector reciprocal.
static inline struct vec veltrecip(struct vec a) {
	return mkvec(1.0f / a.x, 1.0f / a.y, 1.0f / a.z);
}
// vector magnitude squared.
static inline float vmag2(struct vec v) {
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	eef0 6a40 	vmov.f32	s13, s0
 8007bcc:	eeb0 7a60 	vmov.f32	s14, s1
 8007bd0:	eef0 7a41 	vmov.f32	s15, s2
 8007bd4:	edc7 6a01 	vstr	s13, [r7, #4]
 8007bd8:	ed87 7a02 	vstr	s14, [r7, #8]
 8007bdc:	edc7 7a03 	vstr	s15, [r7, #12]
	return vdot(v, v);
 8007be0:	ed97 5a01 	vldr	s10, [r7, #4]
 8007be4:	edd7 5a02 	vldr	s11, [r7, #8]
 8007be8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bec:	edd7 6a01 	vldr	s13, [r7, #4]
 8007bf0:	ed97 7a02 	vldr	s14, [r7, #8]
 8007bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8007bf8:	eef0 1a45 	vmov.f32	s3, s10
 8007bfc:	eeb0 2a65 	vmov.f32	s4, s11
 8007c00:	eef0 2a46 	vmov.f32	s5, s12
 8007c04:	eeb0 0a66 	vmov.f32	s0, s13
 8007c08:	eef0 0a47 	vmov.f32	s1, s14
 8007c0c:	eeb0 1a67 	vmov.f32	s2, s15
 8007c10:	f7ff ff9f 	bl	8007b52 <vdot>
 8007c14:	eef0 7a40 	vmov.f32	s15, s0
}
 8007c18:	eeb0 0a67 	vmov.f32	s0, s15
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <vmag>:
// vector magnitude.
static inline float vmag(struct vec v) {
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	eef0 6a40 	vmov.f32	s13, s0
 8007c2c:	eeb0 7a60 	vmov.f32	s14, s1
 8007c30:	eef0 7a41 	vmov.f32	s15, s2
 8007c34:	edc7 6a01 	vstr	s13, [r7, #4]
 8007c38:	ed87 7a02 	vstr	s14, [r7, #8]
 8007c3c:	edc7 7a03 	vstr	s15, [r7, #12]
	return sqrtf(vmag2(v));
 8007c40:	edd7 6a01 	vldr	s13, [r7, #4]
 8007c44:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c4c:	eeb0 0a66 	vmov.f32	s0, s13
 8007c50:	eef0 0a47 	vmov.f32	s1, s14
 8007c54:	eeb0 1a67 	vmov.f32	s2, s15
 8007c58:	f7ff ffb3 	bl	8007bc2 <vmag2>
 8007c5c:	eef0 7a40 	vmov.f32	s15, s0
 8007c60:	eeb0 0a67 	vmov.f32	s0, s15
 8007c64:	f017 f89c 	bl	801eda0 <sqrtf>
 8007c68:	eef0 7a40 	vmov.f32	s15, s0
}
 8007c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <vnormalize>:
// vector Euclidean distance.
static inline float vdist(struct vec a, struct vec b) {
  return sqrtf(vdist2(a, b));
}
// normalize a vector (make a unit vector).
static inline struct vec vnormalize(struct vec v) {
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b08c      	sub	sp, #48	; 0x30
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	eef0 6a40 	vmov.f32	s13, s0
 8007c80:	eeb0 7a60 	vmov.f32	s14, s1
 8007c84:	eef0 7a41 	vmov.f32	s15, s2
 8007c88:	edc7 6a05 	vstr	s13, [r7, #20]
 8007c8c:	ed87 7a06 	vstr	s14, [r7, #24]
 8007c90:	edc7 7a07 	vstr	s15, [r7, #28]
	return vdiv(v, vmag(v));
 8007c94:	edd7 6a05 	vldr	s13, [r7, #20]
 8007c98:	ed97 7a06 	vldr	s14, [r7, #24]
 8007c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007ca0:	eeb0 0a66 	vmov.f32	s0, s13
 8007ca4:	eef0 0a47 	vmov.f32	s1, s14
 8007ca8:	eeb0 1a67 	vmov.f32	s2, s15
 8007cac:	f7ff ffb9 	bl	8007c22 <vmag>
 8007cb0:	eeb0 6a40 	vmov.f32	s12, s0
 8007cb4:	edd7 6a05 	vldr	s13, [r7, #20]
 8007cb8:	ed97 7a06 	vldr	s14, [r7, #24]
 8007cbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8007cc0:	eef0 1a46 	vmov.f32	s3, s12
 8007cc4:	eeb0 0a66 	vmov.f32	s0, s13
 8007cc8:	eef0 0a47 	vmov.f32	s1, s14
 8007ccc:	eeb0 1a67 	vmov.f32	s2, s15
 8007cd0:	f7ff fe3a 	bl	8007948 <vdiv>
 8007cd4:	eef0 6a40 	vmov.f32	s13, s0
 8007cd8:	eeb0 7a60 	vmov.f32	s14, s1
 8007cdc:	eef0 7a41 	vmov.f32	s15, s2
 8007ce0:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8007ce4:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8007ce8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8007cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	ee06 1a90 	vmov	s13, r1
 8007cf6:	ee07 2a10 	vmov	s14, r2
 8007cfa:	ee07 3a90 	vmov	s15, r3
}
 8007cfe:	eeb0 0a66 	vmov.f32	s0, s13
 8007d02:	eef0 0a47 	vmov.f32	s1, s14
 8007d06:	eeb0 1a67 	vmov.f32	s2, s15
 8007d0a:	3730      	adds	r7, #48	; 0x30
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <vcross>:
		return vscl(maxnorm / norm, v);
	}
	return v;
}
// vector cross product.
static inline struct vec vcross(struct vec a, struct vec b) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	eeb0 5a40 	vmov.f32	s10, s0
 8007d1a:	eef0 5a60 	vmov.f32	s11, s1
 8007d1e:	eeb0 6a41 	vmov.f32	s12, s2
 8007d22:	eef0 6a61 	vmov.f32	s13, s3
 8007d26:	eeb0 7a42 	vmov.f32	s14, s4
 8007d2a:	eef0 7a62 	vmov.f32	s15, s5
 8007d2e:	ed87 5a07 	vstr	s10, [r7, #28]
 8007d32:	edc7 5a08 	vstr	s11, [r7, #32]
 8007d36:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007d3a:	edc7 6a04 	vstr	s13, [r7, #16]
 8007d3e:	ed87 7a05 	vstr	s14, [r7, #20]
 8007d42:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
 8007d46:	ed97 7a08 	vldr	s14, [r7, #32]
 8007d4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d52:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007d56:	edd7 7a05 	vldr	s15, [r7, #20]
 8007d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d5e:	ee37 6a67 	vsub.f32	s12, s14, s15
 8007d62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8007d66:	edd7 7a04 	vldr	s15, [r7, #16]
 8007d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8007d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d7a:	ee77 5a67 	vsub.f32	s11, s14, s15
 8007d7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007d82:	edd7 7a05 	vldr	s15, [r7, #20]
 8007d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d8a:	edd7 6a08 	vldr	s13, [r7, #32]
 8007d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d9a:	eeb0 1a67 	vmov.f32	s2, s15
 8007d9e:	eef0 0a65 	vmov.f32	s1, s11
 8007da2:	eeb0 0a46 	vmov.f32	s0, s12
 8007da6:	f7ff fcc7 	bl	8007738 <mkvec>
 8007daa:	eef0 6a40 	vmov.f32	s13, s0
 8007dae:	eeb0 7a60 	vmov.f32	s14, s1
 8007db2:	eef0 7a41 	vmov.f32	s15, s2
 8007db6:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8007dba:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8007dbe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8007dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	ee06 1a90 	vmov	s13, r1
 8007dcc:	ee07 2a10 	vmov	s14, r2
 8007dd0:	ee07 3a90 	vmov	s15, r3
}
 8007dd4:	eeb0 0a66 	vmov.f32	s0, s13
 8007dd8:	eef0 0a47 	vmov.f32	s1, s14
 8007ddc:	eeb0 1a67 	vmov.f32	s2, s15
 8007de0:	3738      	adds	r7, #56	; 0x38
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <vprojectunit>:
// projection of a onto b, where b is a unit vector.
static inline struct vec vprojectunit(struct vec a, struct vec b_unit) {
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b08e      	sub	sp, #56	; 0x38
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	eeb0 5a40 	vmov.f32	s10, s0
 8007df0:	eef0 5a60 	vmov.f32	s11, s1
 8007df4:	eeb0 6a41 	vmov.f32	s12, s2
 8007df8:	eef0 6a61 	vmov.f32	s13, s3
 8007dfc:	eeb0 7a42 	vmov.f32	s14, s4
 8007e00:	eef0 7a62 	vmov.f32	s15, s5
 8007e04:	ed87 5a07 	vstr	s10, [r7, #28]
 8007e08:	edc7 5a08 	vstr	s11, [r7, #32]
 8007e0c:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007e10:	edc7 6a04 	vstr	s13, [r7, #16]
 8007e14:	ed87 7a05 	vstr	s14, [r7, #20]
 8007e18:	edc7 7a06 	vstr	s15, [r7, #24]
	return vscl(vdot(a, b_unit), b_unit);
 8007e1c:	ed97 5a04 	vldr	s10, [r7, #16]
 8007e20:	edd7 5a05 	vldr	s11, [r7, #20]
 8007e24:	ed97 6a06 	vldr	s12, [r7, #24]
 8007e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8007e30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007e34:	eef0 1a45 	vmov.f32	s3, s10
 8007e38:	eeb0 2a65 	vmov.f32	s4, s11
 8007e3c:	eef0 2a46 	vmov.f32	s5, s12
 8007e40:	eeb0 0a66 	vmov.f32	s0, s13
 8007e44:	eef0 0a47 	vmov.f32	s1, s14
 8007e48:	eeb0 1a67 	vmov.f32	s2, s15
 8007e4c:	f7ff fe81 	bl	8007b52 <vdot>
 8007e50:	eeb0 6a40 	vmov.f32	s12, s0
 8007e54:	edd7 6a04 	vldr	s13, [r7, #16]
 8007e58:	ed97 7a05 	vldr	s14, [r7, #20]
 8007e5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007e60:	eef0 0a66 	vmov.f32	s1, s13
 8007e64:	eeb0 1a47 	vmov.f32	s2, s14
 8007e68:	eef0 1a67 	vmov.f32	s3, s15
 8007e6c:	eeb0 0a46 	vmov.f32	s0, s12
 8007e70:	f7ff fce0 	bl	8007834 <vscl>
 8007e74:	eef0 6a40 	vmov.f32	s13, s0
 8007e78:	eeb0 7a60 	vmov.f32	s14, s1
 8007e7c:	eef0 7a41 	vmov.f32	s15, s2
 8007e80:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8007e84:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8007e88:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8007e8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e92:	ee06 1a90 	vmov	s13, r1
 8007e96:	ee07 2a10 	vmov	s14, r2
 8007e9a:	ee07 3a90 	vmov	s15, r3
}
 8007e9e:	eeb0 0a66 	vmov.f32	s0, s13
 8007ea2:	eef0 0a47 	vmov.f32	s1, s14
 8007ea6:	eeb0 1a67 	vmov.f32	s2, s15
 8007eaa:	3738      	adds	r7, #56	; 0x38
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <vorthunit>:
// component of a orthogonal to b, where b is a unit vector.
static inline struct vec vorthunit(struct vec a, struct vec b_unit) {
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b090      	sub	sp, #64	; 0x40
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	eeb0 5a40 	vmov.f32	s10, s0
 8007eba:	eef0 5a60 	vmov.f32	s11, s1
 8007ebe:	eeb0 6a41 	vmov.f32	s12, s2
 8007ec2:	eef0 6a61 	vmov.f32	s13, s3
 8007ec6:	eeb0 7a42 	vmov.f32	s14, s4
 8007eca:	eef0 7a62 	vmov.f32	s15, s5
 8007ece:	ed87 5a07 	vstr	s10, [r7, #28]
 8007ed2:	edc7 5a08 	vstr	s11, [r7, #32]
 8007ed6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8007eda:	edc7 6a04 	vstr	s13, [r7, #16]
 8007ede:	ed87 7a05 	vstr	s14, [r7, #20]
 8007ee2:	edc7 7a06 	vstr	s15, [r7, #24]
	return vsub(a, vprojectunit(a, b_unit));
 8007ee6:	ed97 5a04 	vldr	s10, [r7, #16]
 8007eea:	edd7 5a05 	vldr	s11, [r7, #20]
 8007eee:	ed97 6a06 	vldr	s12, [r7, #24]
 8007ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ef6:	ed97 7a08 	vldr	s14, [r7, #32]
 8007efa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007efe:	eef0 1a45 	vmov.f32	s3, s10
 8007f02:	eeb0 2a65 	vmov.f32	s4, s11
 8007f06:	eef0 2a46 	vmov.f32	s5, s12
 8007f0a:	eeb0 0a66 	vmov.f32	s0, s13
 8007f0e:	eef0 0a47 	vmov.f32	s1, s14
 8007f12:	eeb0 1a67 	vmov.f32	s2, s15
 8007f16:	f7ff ff66 	bl	8007de6 <vprojectunit>
 8007f1a:	eef0 6a40 	vmov.f32	s13, s0
 8007f1e:	eeb0 7a60 	vmov.f32	s14, s1
 8007f22:	eef0 7a41 	vmov.f32	s15, s2
 8007f26:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8007f2a:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8007f2e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8007f32:	ed97 5a0d 	vldr	s10, [r7, #52]	; 0x34
 8007f36:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 8007f3a:	ed97 6a0f 	vldr	s12, [r7, #60]	; 0x3c
 8007f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f42:	ed97 7a08 	vldr	s14, [r7, #32]
 8007f46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007f4a:	eef0 1a45 	vmov.f32	s3, s10
 8007f4e:	eeb0 2a65 	vmov.f32	s4, s11
 8007f52:	eef0 2a46 	vmov.f32	s5, s12
 8007f56:	eeb0 0a66 	vmov.f32	s0, s13
 8007f5a:	eef0 0a47 	vmov.f32	s1, s14
 8007f5e:	eeb0 1a67 	vmov.f32	s2, s15
 8007f62:	f7ff fd89 	bl	8007a78 <vsub>
 8007f66:	eef0 6a40 	vmov.f32	s13, s0
 8007f6a:	eeb0 7a60 	vmov.f32	s14, s1
 8007f6e:	eef0 7a41 	vmov.f32	s15, s2
 8007f72:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8007f76:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8007f7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8007f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	ee06 1a90 	vmov	s13, r1
 8007f88:	ee07 2a10 	vmov	s14, r2
 8007f8c:	ee07 3a90 	vmov	s15, r3
}
 8007f90:	eeb0 0a66 	vmov.f32	s0, s13
 8007f94:	eef0 0a47 	vmov.f32	s1, s14
 8007f98:	eeb0 1a67 	vmov.f32	s2, s15
 8007f9c:	3740      	adds	r7, #64	; 0x40
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <polylinear>:
static struct poly4d poly4d_tmp;

// polynomials are stored with ascending degree

void polylinear(float p[PP_SIZE], float duration, float x0, float x1)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b087      	sub	sp, #28
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	ed87 0a02 	vstr	s0, [r7, #8]
 8007fae:	edc7 0a01 	vstr	s1, [r7, #4]
 8007fb2:	ed87 1a00 	vstr	s2, [r7]
	p[0] = x0;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	601a      	str	r2, [r3, #0]
	p[1] = (x1 - x0) / duration;
 8007fbc:	ed97 7a00 	vldr	s14, [r7]
 8007fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8007fc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8007fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 2; i < PP_SIZE; ++i) {
 8007fd8:	2302      	movs	r3, #2
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	e009      	b.n	8007ff2 <polylinear+0x50>
		p[i] = 0;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
	for (int i = 2; i < PP_SIZE; ++i) {
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b07      	cmp	r3, #7
 8007ff6:	ddf2      	ble.n	8007fde <polylinear+0x3c>
	}
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <polybezier>:

// precalculated factorials that we will need
static const int facs[PP_SIZE] = { 1, 1, 2, 6, 24, 120, 720, 5040 };

void polybezier(float p[PP_SIZE], float duration, float* x, int dim) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b08a      	sub	sp, #40	; 0x28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	ed87 0a02 	vstr	s0, [r7, #8]
 8008014:	6079      	str	r1, [r7, #4]
 8008016:	603a      	str	r2, [r7, #0]
	int i, j, n, sign;
	float coeff;

	if (dim <= 0) {
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f340 8094 	ble.w	8008148 <polybezier+0x140>
		/* nothing to do */
	} else if (dim == 1) {
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d104      	bne.n	8008030 <polybezier+0x28>
		p[0] = x[0];
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	601a      	str	r2, [r3, #0]
			}
			p[j] = coeff * facs[n] / facs[n-j];
		}
		polystretchtime(p, duration);
	}
}
 800802e:	e08b      	b.n	8008148 <polybezier+0x140>
	} else if (dim == 2) {
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b02      	cmp	r3, #2
 8008034:	d110      	bne.n	8008058 <polybezier+0x50>
		polylinear(p, duration, x[0], x[1]);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	edd3 7a00 	vldr	s15, [r3]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	ed93 7a00 	vldr	s14, [r3]
 8008044:	eeb0 1a47 	vmov.f32	s2, s14
 8008048:	eef0 0a67 	vmov.f32	s1, s15
 800804c:	ed97 0a02 	vldr	s0, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff ffa6 	bl	8007fa2 <polylinear>
}
 8008056:	e077      	b.n	8008148 <polybezier+0x140>
		n = ((dim < PP_SIZE) ? dim : PP_SIZE) - 1;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b08      	cmp	r3, #8
 800805c:	bfa8      	it	ge
 800805e:	2308      	movge	r3, #8
 8008060:	3b01      	subs	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
		sign = 1;
 8008064:	2301      	movs	r3, #1
 8008066:	61fb      	str	r3, [r7, #28]
		for (j = 0; j <= n; j++) {
 8008068:	2300      	movs	r3, #0
 800806a:	623b      	str	r3, [r7, #32]
 800806c:	e063      	b.n	8008136 <polybezier+0x12e>
			coeff = 0;
 800806e:	f04f 0300 	mov.w	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
			sign = (j % 2) ? -1 : 1;
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <polybezier+0x7c>
 800807e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008082:	e000      	b.n	8008086 <polybezier+0x7e>
 8008084:	2301      	movs	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]
			for (i = 0; i <= j; i++, sign *= -1) {
 8008088:	2300      	movs	r3, #0
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
 800808c:	e02e      	b.n	80080ec <polybezier+0xe4>
				coeff += sign * x[i] / facs[i] / facs[j-i];
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	ee07 3a90 	vmov	s15, r3
 8008094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	4413      	add	r3, r2
 80080a0:	edd3 7a00 	vldr	s15, [r3]
 80080a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080a8:	4a29      	ldr	r2, [pc, #164]	; (8008150 <polybezier+0x148>)
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80080bc:	6a3a      	ldr	r2, [r7, #32]
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4a23      	ldr	r2, [pc, #140]	; (8008150 <polybezier+0x148>)
 80080c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080c8:	ee07 3a90 	vmov	s15, r3
 80080cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80080d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080dc:	edc7 7a06 	vstr	s15, [r7, #24]
			for (i = 0; i <= j; i++, sign *= -1) {
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	3301      	adds	r3, #1
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	425b      	negs	r3, r3
 80080ea:	61fb      	str	r3, [r7, #28]
 80080ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	ddcc      	ble.n	800808e <polybezier+0x86>
			p[j] = coeff * facs[n] / facs[n-j];
 80080f4:	4a16      	ldr	r2, [pc, #88]	; (8008150 <polybezier+0x148>)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fc:	ee07 3a90 	vmov	s15, r3
 8008100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008104:	edd7 7a06 	vldr	s15, [r7, #24]
 8008108:	ee67 6a27 	vmul.f32	s13, s14, s15
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	4a0f      	ldr	r2, [pc, #60]	; (8008150 <polybezier+0x148>)
 8008114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008118:	ee07 3a90 	vmov	s15, r3
 800811c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812c:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j <= n; j++) {
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	3301      	adds	r3, #1
 8008134:	623b      	str	r3, [r7, #32]
 8008136:	6a3a      	ldr	r2, [r7, #32]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	429a      	cmp	r2, r3
 800813c:	dd97      	ble.n	800806e <polybezier+0x66>
		polystretchtime(p, duration);
 800813e:	ed97 0a02 	vldr	s0, [r7, #8]
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 f806 	bl	8008154 <polystretchtime>
}
 8008148:	bf00      	nop
 800814a:	3728      	adds	r7, #40	; 0x28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	08024c5c 	.word	0x08024c5c

08008154 <polystretchtime>:
	}
}

// e.g. if s==2 the new polynomial will be stretched to take 2x longer
void polystretchtime(float p[PP_SIZE], float s)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	ed87 0a00 	vstr	s0, [r7]
	float recip = 1.0f / s;
 8008160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008164:	ed97 7a00 	vldr	s14, [r7]
 8008168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816c:	edc7 7a03 	vstr	s15, [r7, #12]
	float scale = recip;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < PP_SIZE; ++i) {
 8008174:	2301      	movs	r3, #1
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	e01a      	b.n	80081b0 <polystretchtime+0x5c>
		p[i] *= scale;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4413      	add	r3, r2
 8008182:	ed93 7a00 	vldr	s14, [r3]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc3 7a00 	vstr	s15, [r3]
		scale *= recip;
 800819a:	ed97 7a05 	vldr	s14, [r7, #20]
 800819e:	edd7 7a03 	vldr	s15, [r7, #12]
 80081a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a6:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 1; i < PP_SIZE; ++i) {
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3301      	adds	r3, #1
 80081ae:	613b      	str	r3, [r7, #16]
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b07      	cmp	r3, #7
 80081b4:	dde1      	ble.n	800817a <polystretchtime+0x26>
	}
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	371c      	adds	r7, #28
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <polyreflect>:

void polyreflect(float p[PP_SIZE])
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	for (int i = 1; i < PP_SIZE; i += 2) {
 80081cc:	2301      	movs	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	e010      	b.n	80081f4 <polyreflect+0x30>
		p[i] = -p[i];
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	edd3 7a00 	vldr	s15, [r3]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4413      	add	r3, r2
 80081e6:	eef1 7a67 	vneg.f32	s15, s15
 80081ea:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i < PP_SIZE; i += 2) {
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3302      	adds	r3, #2
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b07      	cmp	r3, #7
 80081f8:	ddeb      	ble.n	80081d2 <polyreflect+0xe>
	}
}
 80081fa:	bf00      	nop
 80081fc:	bf00      	nop
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <polyval>:

// evaluate a polynomial using horner's rule.
float polyval(float const p[PP_SIZE], float t)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	ed87 0a00 	vstr	s0, [r7]
	float x = 0.0;
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
	for (int i = PP_DEGREE; i >= 0; --i) {
 800821a:	2307      	movs	r3, #7
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	e012      	b.n	8008246 <polyval+0x3e>
		x = x * t + p[i];
 8008220:	ed97 7a03 	vldr	s14, [r7, #12]
 8008224:	edd7 7a00 	vldr	s15, [r7]
 8008228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	edd3 7a00 	vldr	s15, [r3]
 8008238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800823c:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = PP_DEGREE; i >= 0; --i) {
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	3b01      	subs	r3, #1
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dae9      	bge.n	8008220 <polyval+0x18>
	}
	return x;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	ee07 3a90 	vmov	s15, r3
}
 8008252:	eeb0 0a67 	vmov.f32	s0, s15
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <polyder>:

// compute derivative of a polynomial in place
void polyder(float p[PP_SIZE])
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	for (int i = 1; i <= PP_DEGREE; ++i) {
 8008268:	2301      	movs	r3, #1
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	e018      	b.n	80082a0 <polyder+0x40>
		p[i-1] = i * p[i];
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	ee07 3a90 	vmov	s15, r3
 8008274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	4413      	add	r3, r2
 8008280:	edd3 7a00 	vldr	s15, [r3]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800828a:	3b01      	subs	r3, #1
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	4413      	add	r3, r2
 8008292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008296:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= PP_DEGREE; ++i) {
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3301      	adds	r3, #1
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b07      	cmp	r3, #7
 80082a4:	dde3      	ble.n	800826e <polyder+0xe>
	}
	p[PP_DEGREE] = 0;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	331c      	adds	r3, #28
 80082aa:	f04f 0200 	mov.w	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <poly7_nojerk>:
}

static void poly7_nojerk(float poly[PP_SIZE], float T,
	float x0, float dx0, float ddx0,
	float xf, float dxf, float ddxf)
{
 80082bc:	b480      	push	{r7}
 80082be:	b091      	sub	sp, #68	; 0x44
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	61f8      	str	r0, [r7, #28]
 80082c4:	ed87 0a06 	vstr	s0, [r7, #24]
 80082c8:	edc7 0a05 	vstr	s1, [r7, #20]
 80082cc:	ed87 1a04 	vstr	s2, [r7, #16]
 80082d0:	edc7 1a03 	vstr	s3, [r7, #12]
 80082d4:	ed87 2a02 	vstr	s4, [r7, #8]
 80082d8:	edc7 2a01 	vstr	s5, [r7, #4]
 80082dc:	ed87 3a00 	vstr	s6, [r7]
	if (T <= 0.0f) {
 80082e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80082e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ec:	d821      	bhi.n	8008332 <poly7_nojerk+0x76>
		poly[0] = xf;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	601a      	str	r2, [r3, #0]
		poly[1] = dxf;
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	3304      	adds	r3, #4
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	601a      	str	r2, [r3, #0]
		poly[2] = ddxf/2;
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	3308      	adds	r3, #8
 8008300:	ed97 7a00 	vldr	s14, [r7]
 8008304:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800830c:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 3; i < PP_SIZE; ++i) {
 8008310:	2303      	movs	r3, #3
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008314:	e009      	b.n	800832a <poly7_nojerk+0x6e>
			poly[i] = 0;
 8008316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	601a      	str	r2, [r3, #0]
		for (int i = 3; i < PP_SIZE; ++i) {
 8008324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008326:	3301      	adds	r3, #1
 8008328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800832a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832c:	2b07      	cmp	r3, #7
 800832e:	ddf2      	ble.n	8008316 <poly7_nojerk+0x5a>
		poly[7] = (2*(10*x0 - 10*xf + 5*T*dx0 + 5*T*dxf + T2*ddx0 - T2*ddxf))/T7;
		for (int i = 8; i < PP_SIZE; ++i) {
			poly[i] = 0;
		}
	}
}
 8008330:	e16b      	b.n	800860a <poly7_nojerk+0x34e>
		float T2 = T * T;
 8008332:	edd7 7a06 	vldr	s15, [r7, #24]
 8008336:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800833a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		float T3 = T2 * T;
 800833e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8008342:	edd7 7a06 	vldr	s15, [r7, #24]
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		float T4 = T3 * T;
 800834e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008352:	edd7 7a06 	vldr	s15, [r7, #24]
 8008356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float T5 = T4 * T;
 800835e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008362:	edd7 7a06 	vldr	s15, [r7, #24]
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		float T6 = T5 * T;
 800836e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008372:	edd7 7a06 	vldr	s15, [r7, #24]
 8008376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float T7 = T6 * T;
 800837e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008382:	edd7 7a06 	vldr	s15, [r7, #24]
 8008386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838a:	edc7 7a08 	vstr	s15, [r7, #32]
		poly[0] = x0;
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	601a      	str	r2, [r3, #0]
		poly[1] = dx0;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	3304      	adds	r3, #4
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	601a      	str	r2, [r3, #0]
		poly[2] = ddx0/2;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	3308      	adds	r3, #8
 80083a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80083a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80083a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083ac:	edc3 7a00 	vstr	s15, [r3]
		poly[3] = 0;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	330c      	adds	r3, #12
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
		poly[4] = -(5*(14*x0 - 14*xf + 8*T*dx0 + 6*T*dxf + 2*T2*ddx0 - T2*ddxf))/(2*T4);
 80083ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80083be:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80083c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80083c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80083ca:	eef2 6a0c 	vmov.f32	s13, #44	; 0x41600000  14.0
 80083ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80083da:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80083de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80083e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80083e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80083f2:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80083f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80083fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80083fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008406:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800840a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800840e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800841a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800841e:	edd7 7a00 	vldr	s15, [r7]
 8008422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800842a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800842e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008432:	eef1 6a67 	vneg.f32	s13, s15
 8008436:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800843a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	3310      	adds	r3, #16
 8008442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008446:	edc3 7a00 	vstr	s15, [r3]
		poly[5] = (84*x0 - 84*xf + 45*T*dx0 + 39*T*dxf + 10*T2*ddx0 - 7*T2*ddxf)/T5;
 800844a:	edd7 7a05 	vldr	s15, [r7, #20]
 800844e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8008618 <poly7_nojerk+0x35c>
 8008452:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008456:	edd7 7a02 	vldr	s15, [r7, #8]
 800845a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008618 <poly7_nojerk+0x35c>
 800845e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008462:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008466:	edd7 7a06 	vldr	s15, [r7, #24]
 800846a:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800861c <poly7_nojerk+0x360>
 800846e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008472:	edd7 7a04 	vldr	s15, [r7, #16]
 8008476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800847a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800847e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008482:	eddf 6a67 	vldr	s13, [pc, #412]	; 8008620 <poly7_nojerk+0x364>
 8008486:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800848a:	edd7 7a01 	vldr	s15, [r7, #4]
 800848e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008496:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800849a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800849e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80084a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80084a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80084b2:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 80084b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80084ba:	edd7 7a00 	vldr	s15, [r7]
 80084be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	3314      	adds	r3, #20
 80084ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80084ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d2:	edc3 7a00 	vstr	s15, [r3]
		poly[6] = -(140*x0 - 140*xf + 72*T*dx0 + 68*T*dxf + 15*T2*ddx0 - 13*T2*ddxf)/(2*T6);
 80084d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80084da:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8008624 <poly7_nojerk+0x368>
 80084de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80084e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008624 <poly7_nojerk+0x368>
 80084ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80084f6:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8008628 <poly7_nojerk+0x36c>
 80084fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80084fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8008502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800850a:	edd7 7a06 	vldr	s15, [r7, #24]
 800850e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800862c <poly7_nojerk+0x370>
 8008512:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008516:	edd7 7a01 	vldr	s15, [r7, #4]
 800851a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800851e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008522:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008526:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800852a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800852e:	edd7 7a03 	vldr	s15, [r7, #12]
 8008532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800853a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800853e:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8008542:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008546:	edd7 7a00 	vldr	s15, [r7]
 800854a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800854e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008552:	eef1 6a67 	vneg.f32	s13, s15
 8008556:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800855a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	3318      	adds	r3, #24
 8008562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008566:	edc3 7a00 	vstr	s15, [r3]
		poly[7] = (2*(10*x0 - 10*xf + 5*T*dx0 + 5*T*dxf + T2*ddx0 - T2*ddxf))/T7;
 800856a:	edd7 7a05 	vldr	s15, [r7, #20]
 800856e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008572:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008576:	edd7 7a02 	vldr	s15, [r7, #8]
 800857a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800857e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008582:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008586:	edd7 7a06 	vldr	s15, [r7, #24]
 800858a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800858e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008592:	edd7 7a04 	vldr	s15, [r7, #16]
 8008596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800859a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800859e:	edd7 7a06 	vldr	s15, [r7, #24]
 80085a2:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80085a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80085aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80085ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085b6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80085ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80085be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085c6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80085ca:	edd7 7a00 	vldr	s15, [r7]
 80085ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085d6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	331c      	adds	r3, #28
 80085de:	ed97 7a08 	vldr	s14, [r7, #32]
 80085e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e6:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 8; i < PP_SIZE; ++i) {
 80085ea:	2308      	movs	r3, #8
 80085ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80085ee:	e009      	b.n	8008604 <poly7_nojerk+0x348>
			poly[i] = 0;
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
		for (int i = 8; i < PP_SIZE; ++i) {
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	3301      	adds	r3, #1
 8008602:	63bb      	str	r3, [r7, #56]	; 0x38
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	2b07      	cmp	r3, #7
 8008608:	ddf2      	ble.n	80085f0 <poly7_nojerk+0x334>
}
 800860a:	bf00      	nop
 800860c:	3744      	adds	r7, #68	; 0x44
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	42a80000 	.word	0x42a80000
 800861c:	42340000 	.word	0x42340000
 8008620:	421c0000 	.word	0x421c0000
 8008624:	430c0000 	.word	0x430c0000
 8008628:	42900000 	.word	0x42900000
 800862c:	42880000 	.word	0x42880000

08008630 <poly4d_shift>:
	polyscale(p->p[2], z);
	polyscale(p->p[3], yaw);
}

void poly4d_shift(struct poly4d *p, float x, float y, float z, float yaw)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6178      	str	r0, [r7, #20]
 8008638:	ed87 0a04 	vstr	s0, [r7, #16]
 800863c:	edc7 0a03 	vstr	s1, [r7, #12]
 8008640:	ed87 1a02 	vstr	s2, [r7, #8]
 8008644:	edc7 1a01 	vstr	s3, [r7, #4]
	p->p[0][0] += x;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	ed93 7a00 	vldr	s14, [r3]
 800864e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	edc3 7a00 	vstr	s15, [r3]
	p->p[1][0] += y;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	ed93 7a08 	vldr	s14, [r3, #32]
 8008662:	edd7 7a03 	vldr	s15, [r7, #12]
 8008666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	edc3 7a08 	vstr	s15, [r3, #32]
	p->p[2][0] += z;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8008676:	edd7 7a02 	vldr	s15, [r7, #8]
 800867a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	p->p[3][0] += yaw;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800868a:	edd7 7a01 	vldr	s15, [r7, #4]
 800868e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <poly4d_stretchtime>:

void poly4d_stretchtime(struct poly4d *p, float s)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	ed87 0a00 	vstr	s0, [r7]
	for (int i = 0; i < 4; ++i) {
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	e00b      	b.n	80086ce <poly4d_stretchtime+0x2a>
		polystretchtime(p->p[i], s);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	015b      	lsls	r3, r3, #5
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	4413      	add	r3, r2
 80086be:	ed97 0a00 	vldr	s0, [r7]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fd46 	bl	8008154 <polystretchtime>
	for (int i = 0; i < 4; ++i) {
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	ddf0      	ble.n	80086b6 <poly4d_stretchtime+0x12>
	}
	p->duration *= s;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80086da:	edd7 7a00 	vldr	s15, [r7]
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 80086e8:	bf00      	nop
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <polyder4d>:

void polyder4d(struct poly4d *p)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; ++i) {
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	e009      	b.n	8008712 <polyder4d+0x22>
		polyder(p->p[i]);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	015b      	lsls	r3, r3, #5
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fdaa 	bl	8008260 <polyder>
	for (int i = 0; i < 4; ++i) {
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3301      	adds	r3, #1
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b03      	cmp	r3, #3
 8008716:	ddf2      	ble.n	80086fe <polyder4d+0xe>
	}
}
 8008718:	bf00      	nop
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <polyval_xyz>:

static struct vec polyval_xyz(struct poly4d const *p, float t)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	ed2d 8b02 	vpush	{d8}
 8008728:	b08a      	sub	sp, #40	; 0x28
 800872a:	af00      	add	r7, sp, #0
 800872c:	6178      	str	r0, [r7, #20]
 800872e:	ed87 0a04 	vstr	s0, [r7, #16]
	return mkvec(polyval(p->p[0], t), polyval(p->p[1], t), polyval(p->p[2], t));
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	ed97 0a04 	vldr	s0, [r7, #16]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fd65 	bl	8008208 <polyval>
 800873e:	eeb0 8a40 	vmov.f32	s16, s0
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	3320      	adds	r3, #32
 8008746:	ed97 0a04 	vldr	s0, [r7, #16]
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff fd5c 	bl	8008208 <polyval>
 8008750:	eef0 8a40 	vmov.f32	s17, s0
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	3340      	adds	r3, #64	; 0x40
 8008758:	ed97 0a04 	vldr	s0, [r7, #16]
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff fd53 	bl	8008208 <polyval>
 8008762:	eef0 7a40 	vmov.f32	s15, s0
 8008766:	eeb0 1a67 	vmov.f32	s2, s15
 800876a:	eef0 0a68 	vmov.f32	s1, s17
 800876e:	eeb0 0a48 	vmov.f32	s0, s16
 8008772:	f7fe ffe1 	bl	8007738 <mkvec>
 8008776:	eef0 6a40 	vmov.f32	s13, s0
 800877a:	eeb0 7a60 	vmov.f32	s14, s1
 800877e:	eef0 7a41 	vmov.f32	s15, s2
 8008782:	edc7 6a07 	vstr	s13, [r7, #28]
 8008786:	ed87 7a08 	vstr	s14, [r7, #32]
 800878a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800878e:	69f9      	ldr	r1, [r7, #28]
 8008790:	6a3a      	ldr	r2, [r7, #32]
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	ee06 1a90 	vmov	s13, r1
 8008798:	ee07 2a10 	vmov	s14, r2
 800879c:	ee07 3a90 	vmov	s15, r3
}
 80087a0:	eeb0 0a66 	vmov.f32	s0, s13
 80087a4:	eef0 0a47 	vmov.f32	s1, s14
 80087a8:	eeb0 1a67 	vmov.f32	s2, s15
 80087ac:	3728      	adds	r7, #40	; 0x28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	ecbd 8b02 	vpop	{d8}
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <polyval_yaw>:

static float polyval_yaw(struct poly4d const *p, float t)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	ed87 0a00 	vstr	s0, [r7]
	return polyval(p->p[3], t);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3360      	adds	r3, #96	; 0x60
 80087c6:	ed97 0a00 	vldr	s0, [r7]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fd1c 	bl	8008208 <polyval>
 80087d0:	eef0 7a40 	vmov.f32	s15, s0
}
 80087d4:	eeb0 0a67 	vmov.f32	s0, s15
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <traj_eval_invalid>:
	};
	return ev;
}

struct traj_eval traj_eval_invalid()
{
 80087e0:	b5b0      	push	{r4, r5, r7, lr}
 80087e2:	b090      	sub	sp, #64	; 0x40
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	struct traj_eval ev;
	ev.pos = vrepeat(NAN);
 80087e8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8008828 <traj_eval_invalid+0x48>
 80087ec:	f7fe ffce 	bl	800778c <vrepeat>
 80087f0:	eef0 6a40 	vmov.f32	s13, s0
 80087f4:	eeb0 7a60 	vmov.f32	s14, s1
 80087f8:	eef0 7a41 	vmov.f32	s15, s2
 80087fc:	edc7 6a03 	vstr	s13, [r7, #12]
 8008800:	ed87 7a04 	vstr	s14, [r7, #16]
 8008804:	edc7 7a05 	vstr	s15, [r7, #20]
	return ev;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	461d      	mov	r5, r3
 800880c:	f107 040c 	add.w	r4, r7, #12
 8008810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800881a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	602b      	str	r3, [r5, #0]
}
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	3740      	adds	r7, #64	; 0x40
 8008824:	46bd      	mov	sp, r7
 8008826:	bdb0      	pop	{r4, r5, r7, pc}
 8008828:	7fc00000 	.word	0x7fc00000

0800882c <poly4d_eval>:
{
	return !visnan(ev->pos);
}

struct traj_eval poly4d_eval(struct poly4d const *p, float t)
{
 800882c:	b5b0      	push	{r4, r5, r7, lr}
 800882e:	ed2d 8b02 	vpush	{d8}
 8008832:	b0b2      	sub	sp, #200	; 0xc8
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	ed87 0a01 	vstr	s0, [r7, #4]
	// flat variables
	struct traj_eval out;
	out.pos = polyval_xyz(p, t);
 800883e:	ed97 0a01 	vldr	s0, [r7, #4]
 8008842:	68b8      	ldr	r0, [r7, #8]
 8008844:	f7ff ff6d 	bl	8008722 <polyval_xyz>
 8008848:	eef0 6a40 	vmov.f32	s13, s0
 800884c:	eeb0 7a60 	vmov.f32	s14, s1
 8008850:	eef0 7a41 	vmov.f32	s15, s2
 8008854:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 8008858:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 800885c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	out.yaw = polyval_yaw(p, t);
 8008860:	ed97 0a01 	vldr	s0, [r7, #4]
 8008864:	68b8      	ldr	r0, [r7, #8]
 8008866:	f7ff ffa6 	bl	80087b6 <polyval_yaw>
 800886a:	eef0 7a40 	vmov.f32	s15, s0
 800886e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	// 1st derivative
	struct poly4d* deriv = &poly4d_tmp;
 8008872:	4bf1      	ldr	r3, [pc, #964]	; (8008c38 <poly4d_eval+0x40c>)
 8008874:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	*deriv = *p;
 8008878:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4610      	mov	r0, r2
 8008880:	4619      	mov	r1, r3
 8008882:	2384      	movs	r3, #132	; 0x84
 8008884:	461a      	mov	r2, r3
 8008886:	f014 fc9c 	bl	801d1c2 <memcpy>
	polyder4d(deriv);
 800888a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800888e:	f7ff ff2f 	bl	80086f0 <polyder4d>
	out.vel = polyval_xyz(deriv, t);
 8008892:	ed97 0a01 	vldr	s0, [r7, #4]
 8008896:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800889a:	f7ff ff42 	bl	8008722 <polyval_xyz>
 800889e:	eef0 6a40 	vmov.f32	s13, s0
 80088a2:	eeb0 7a60 	vmov.f32	s14, s1
 80088a6:	eef0 7a41 	vmov.f32	s15, s2
 80088aa:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 80088ae:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 80088b2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	float dyaw = polyval_yaw(deriv, t);
 80088b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80088ba:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80088be:	f7ff ff7a 	bl	80087b6 <polyval_yaw>
 80088c2:	ed87 0a30 	vstr	s0, [r7, #192]	; 0xc0

	// 2nd derivative
	polyder4d(deriv);
 80088c6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80088ca:	f7ff ff11 	bl	80086f0 <polyder4d>
	out.acc = polyval_xyz(deriv, t);
 80088ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80088d2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80088d6:	f7ff ff24 	bl	8008722 <polyval_xyz>
 80088da:	eef0 6a40 	vmov.f32	s13, s0
 80088de:	eeb0 7a60 	vmov.f32	s14, s1
 80088e2:	eef0 7a41 	vmov.f32	s15, s2
 80088e6:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80088ea:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80088ee:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

	// 3rd derivative
	polyder4d(deriv);
 80088f2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80088f6:	f7ff fefb 	bl	80086f0 <polyder4d>
	struct vec jerk = polyval_xyz(deriv, t);
 80088fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80088fe:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8008902:	f7ff ff0e 	bl	8008722 <polyval_xyz>
 8008906:	eef0 6a40 	vmov.f32	s13, s0
 800890a:	eeb0 7a60 	vmov.f32	s14, s1
 800890e:	eef0 7a41 	vmov.f32	s15, s2
 8008912:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8008916:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 800891a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	struct vec thrust = vadd(out.acc, mkvec(0, 0, GRAV));
 800891e:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 8008c3c <poly4d_eval+0x410>
 8008922:	eddf 0ac7 	vldr	s1, [pc, #796]	; 8008c40 <poly4d_eval+0x414>
 8008926:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 8008c40 <poly4d_eval+0x414>
 800892a:	f7fe ff05 	bl	8007738 <mkvec>
 800892e:	eef0 6a40 	vmov.f32	s13, s0
 8008932:	eeb0 7a60 	vmov.f32	s14, s1
 8008936:	eef0 7a41 	vmov.f32	s15, s2
 800893a:	edc7 6a2a 	vstr	s13, [r7, #168]	; 0xa8
 800893e:	ed87 7a2b 	vstr	s14, [r7, #172]	; 0xac
 8008942:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8008946:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 800894a:	edd7 5a2b 	vldr	s11, [r7, #172]	; 0xac
 800894e:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 8008952:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8008956:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800895a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800895e:	eef0 1a45 	vmov.f32	s3, s10
 8008962:	eeb0 2a65 	vmov.f32	s4, s11
 8008966:	eef0 2a46 	vmov.f32	s5, s12
 800896a:	eeb0 0a66 	vmov.f32	s0, s13
 800896e:	eef0 0a47 	vmov.f32	s1, s14
 8008972:	eeb0 1a67 	vmov.f32	s2, s15
 8008976:	f7ff f82c 	bl	80079d2 <vadd>
 800897a:	eef0 6a40 	vmov.f32	s13, s0
 800897e:	eeb0 7a60 	vmov.f32	s14, s1
 8008982:	eef0 7a41 	vmov.f32	s15, s2
 8008986:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 800898a:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 800898e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	// float thrust_mag = mass * vmag(thrust);

	struct vec z_body = vnormalize(thrust);
 8008992:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8008996:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800899a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800899e:	eeb0 0a66 	vmov.f32	s0, s13
 80089a2:	eef0 0a47 	vmov.f32	s1, s14
 80089a6:	eeb0 1a67 	vmov.f32	s2, s15
 80089aa:	f7ff f964 	bl	8007c76 <vnormalize>
 80089ae:	eef0 6a40 	vmov.f32	s13, s0
 80089b2:	eeb0 7a60 	vmov.f32	s14, s1
 80089b6:	eef0 7a41 	vmov.f32	s15, s2
 80089ba:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 80089be:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 80089c2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	struct vec x_world = mkvec(cosf(out.yaw), sinf(out.yaw), 0);
 80089c6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80089ca:	eeb0 0a67 	vmov.f32	s0, s15
 80089ce:	f016 fa05 	bl	801eddc <cosf>
 80089d2:	eeb0 8a40 	vmov.f32	s16, s0
 80089d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80089da:	eeb0 0a67 	vmov.f32	s0, s15
 80089de:	f016 fa49 	bl	801ee74 <sinf>
 80089e2:	eef0 7a40 	vmov.f32	s15, s0
 80089e6:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8008c40 <poly4d_eval+0x414>
 80089ea:	eef0 0a67 	vmov.f32	s1, s15
 80089ee:	eeb0 0a48 	vmov.f32	s0, s16
 80089f2:	f7fe fea1 	bl	8007738 <mkvec>
 80089f6:	eef0 6a40 	vmov.f32	s13, s0
 80089fa:	eeb0 7a60 	vmov.f32	s14, s1
 80089fe:	eef0 7a41 	vmov.f32	s15, s2
 8008a02:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8008a06:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8008a0a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	struct vec y_body = vnormalize(vcross(z_body, x_world));
 8008a0e:	ed97 5a11 	vldr	s10, [r7, #68]	; 0x44
 8008a12:	edd7 5a12 	vldr	s11, [r7, #72]	; 0x48
 8008a16:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8008a1a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8008a1e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008a22:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008a26:	eef0 1a45 	vmov.f32	s3, s10
 8008a2a:	eeb0 2a65 	vmov.f32	s4, s11
 8008a2e:	eef0 2a46 	vmov.f32	s5, s12
 8008a32:	eeb0 0a66 	vmov.f32	s0, s13
 8008a36:	eef0 0a47 	vmov.f32	s1, s14
 8008a3a:	eeb0 1a67 	vmov.f32	s2, s15
 8008a3e:	f7ff f967 	bl	8007d10 <vcross>
 8008a42:	eef0 6a40 	vmov.f32	s13, s0
 8008a46:	eeb0 7a60 	vmov.f32	s14, s1
 8008a4a:	eef0 7a41 	vmov.f32	s15, s2
 8008a4e:	edc7 6a2d 	vstr	s13, [r7, #180]	; 0xb4
 8008a52:	ed87 7a2e 	vstr	s14, [r7, #184]	; 0xb8
 8008a56:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
 8008a5a:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8008a5e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8008a62:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008a66:	eeb0 0a66 	vmov.f32	s0, s13
 8008a6a:	eef0 0a47 	vmov.f32	s1, s14
 8008a6e:	eeb0 1a67 	vmov.f32	s2, s15
 8008a72:	f7ff f900 	bl	8007c76 <vnormalize>
 8008a76:	eef0 6a40 	vmov.f32	s13, s0
 8008a7a:	eeb0 7a60 	vmov.f32	s14, s1
 8008a7e:	eef0 7a41 	vmov.f32	s15, s2
 8008a82:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8008a86:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8008a8a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	struct vec x_body = vcross(y_body, z_body);
 8008a8e:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 8008a92:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8008a96:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8008a9a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8008a9e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008aa2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008aa6:	eef0 1a45 	vmov.f32	s3, s10
 8008aaa:	eeb0 2a65 	vmov.f32	s4, s11
 8008aae:	eef0 2a46 	vmov.f32	s5, s12
 8008ab2:	eeb0 0a66 	vmov.f32	s0, s13
 8008ab6:	eef0 0a47 	vmov.f32	s1, s14
 8008aba:	eeb0 1a67 	vmov.f32	s2, s15
 8008abe:	f7ff f927 	bl	8007d10 <vcross>
 8008ac2:	eef0 6a40 	vmov.f32	s13, s0
 8008ac6:	eeb0 7a60 	vmov.f32	s14, s1
 8008aca:	eef0 7a41 	vmov.f32	s15, s2
 8008ace:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8008ad2:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8008ad6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	struct vec jerk_orth_zbody = vorthunit(jerk, z_body);
 8008ada:	ed97 5a14 	vldr	s10, [r7, #80]	; 0x50
 8008ade:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8008ae2:	ed97 6a16 	vldr	s12, [r7, #88]	; 0x58
 8008ae6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8008aea:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8008aee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8008af2:	eef0 1a45 	vmov.f32	s3, s10
 8008af6:	eeb0 2a65 	vmov.f32	s4, s11
 8008afa:	eef0 2a46 	vmov.f32	s5, s12
 8008afe:	eeb0 0a66 	vmov.f32	s0, s13
 8008b02:	eef0 0a47 	vmov.f32	s1, s14
 8008b06:	eeb0 1a67 	vmov.f32	s2, s15
 8008b0a:	f7ff f9d1 	bl	8007eb0 <vorthunit>
 8008b0e:	eef0 6a40 	vmov.f32	s13, s0
 8008b12:	eeb0 7a60 	vmov.f32	s14, s1
 8008b16:	eef0 7a41 	vmov.f32	s15, s2
 8008b1a:	edc7 6a08 	vstr	s13, [r7, #32]
 8008b1e:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8008b22:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	struct vec h_w = vscl(1.0f / vmag(thrust), jerk_orth_zbody);
 8008b26:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8008b2a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008b2e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8008b32:	eeb0 0a66 	vmov.f32	s0, s13
 8008b36:	eef0 0a47 	vmov.f32	s1, s14
 8008b3a:	eeb0 1a67 	vmov.f32	s2, s15
 8008b3e:	f7ff f870 	bl	8007c22 <vmag>
 8008b42:	eeb0 7a40 	vmov.f32	s14, s0
 8008b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4e:	ed97 6a08 	vldr	s12, [r7, #32]
 8008b52:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008b56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8008b5a:	eef0 0a46 	vmov.f32	s1, s12
 8008b5e:	eeb0 1a66 	vmov.f32	s2, s13
 8008b62:	eef0 1a47 	vmov.f32	s3, s14
 8008b66:	eeb0 0a67 	vmov.f32	s0, s15
 8008b6a:	f7fe fe63 	bl	8007834 <vscl>
 8008b6e:	eef0 6a40 	vmov.f32	s13, s0
 8008b72:	eeb0 7a60 	vmov.f32	s14, s1
 8008b76:	eef0 7a41 	vmov.f32	s15, s2
 8008b7a:	edc7 6a05 	vstr	s13, [r7, #20]
 8008b7e:	ed87 7a06 	vstr	s14, [r7, #24]
 8008b82:	edc7 7a07 	vstr	s15, [r7, #28]

	out.omega.x = -vdot(h_w, y_body);
 8008b86:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8008b8a:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8008b8e:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8008b92:	edd7 6a05 	vldr	s13, [r7, #20]
 8008b96:	ed97 7a06 	vldr	s14, [r7, #24]
 8008b9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b9e:	eef0 1a45 	vmov.f32	s3, s10
 8008ba2:	eeb0 2a65 	vmov.f32	s4, s11
 8008ba6:	eef0 2a46 	vmov.f32	s5, s12
 8008baa:	eeb0 0a66 	vmov.f32	s0, s13
 8008bae:	eef0 0a47 	vmov.f32	s1, s14
 8008bb2:	eeb0 1a67 	vmov.f32	s2, s15
 8008bb6:	f7fe ffcc 	bl	8007b52 <vdot>
 8008bba:	eef0 7a40 	vmov.f32	s15, s0
 8008bbe:	eef1 7a67 	vneg.f32	s15, s15
 8008bc2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	out.omega.y = vdot(h_w, x_body);
 8008bc6:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8008bca:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8008bce:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8008bd2:	edd7 6a05 	vldr	s13, [r7, #20]
 8008bd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8008bda:	edd7 7a07 	vldr	s15, [r7, #28]
 8008bde:	eef0 1a45 	vmov.f32	s3, s10
 8008be2:	eeb0 2a65 	vmov.f32	s4, s11
 8008be6:	eef0 2a46 	vmov.f32	s5, s12
 8008bea:	eeb0 0a66 	vmov.f32	s0, s13
 8008bee:	eef0 0a47 	vmov.f32	s1, s14
 8008bf2:	eeb0 1a67 	vmov.f32	s2, s15
 8008bf6:	f7fe ffac 	bl	8007b52 <vdot>
 8008bfa:	eef0 7a40 	vmov.f32	s15, s0
 8008bfe:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	out.omega.z = z_body.z * dyaw;
 8008c02:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008c06:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8008c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	return out;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	461d      	mov	r5, r3
 8008c16:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8008c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	602b      	str	r3, [r5, #0]
}
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	37c8      	adds	r7, #200	; 0xc8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	ecbd 8b02 	vpop	{d8}
 8008c34:	bdb0      	pop	{r4, r5, r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20007b84 	.word	0x20007b84
 8008c3c:	411cf5c3 	.word	0x411cf5c3
 8008c40:	00000000 	.word	0x00000000

08008c44 <piecewise_eval>:
//

// piecewise eval
struct traj_eval piecewise_eval(
  struct piecewise_traj const *traj, float t)
{
 8008c44:	b5b0      	push	{r4, r5, r7, lr}
 8008c46:	b094      	sub	sp, #80	; 0x50
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	ed87 0a01 	vstr	s0, [r7, #4]
	int cursor = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	64fb      	str	r3, [r7, #76]	; 0x4c
	t = t - traj->t_begin;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	edd3 7a00 	vldr	s15, [r3]
 8008c5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c64:	edc7 7a01 	vstr	s15, [r7, #4]
	while (cursor < traj->n_pieces) {
 8008c68:	e054      	b.n	8008d14 <piecewise_eval+0xd0>
		struct poly4d const *piece = &(traj->pieces[cursor]);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6999      	ldr	r1, [r3, #24]
 8008c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c70:	4613      	mov	r3, r2
 8008c72:	015b      	lsls	r3, r3, #5
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	647b      	str	r3, [r7, #68]	; 0x44
		if (t <= piece->duration * traj->timescale) {
 8008c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c98:	d82b      	bhi.n	8008cf2 <piecewise_eval+0xae>
			poly4d_tmp = *piece;
 8008c9a:	4a5d      	ldr	r2, [pc, #372]	; (8008e10 <piecewise_eval+0x1cc>)
 8008c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	2384      	movs	r3, #132	; 0x84
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f014 fa8c 	bl	801d1c2 <memcpy>
			poly4d_shift(&poly4d_tmp, traj->shift.x, traj->shift.y, traj->shift.z, 0);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	edd3 7a02 	vldr	s15, [r3, #8]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	ed93 7a03 	vldr	s14, [r3, #12]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	edd3 6a04 	vldr	s13, [r3, #16]
 8008cbc:	eddf 1a55 	vldr	s3, [pc, #340]	; 8008e14 <piecewise_eval+0x1d0>
 8008cc0:	eeb0 1a66 	vmov.f32	s2, s13
 8008cc4:	eef0 0a47 	vmov.f32	s1, s14
 8008cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8008ccc:	4850      	ldr	r0, [pc, #320]	; (8008e10 <piecewise_eval+0x1cc>)
 8008cce:	f7ff fcaf 	bl	8008630 <poly4d_shift>
			poly4d_stretchtime(&poly4d_tmp, traj->timescale);
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8008cdc:	484c      	ldr	r0, [pc, #304]	; (8008e10 <piecewise_eval+0x1cc>)
 8008cde:	f7ff fce1 	bl	80086a4 <poly4d_stretchtime>
			return poly4d_eval(&poly4d_tmp, t);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	ed97 0a01 	vldr	s0, [r7, #4]
 8008ce8:	4949      	ldr	r1, [pc, #292]	; (8008e10 <piecewise_eval+0x1cc>)
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff fd9e 	bl	800882c <poly4d_eval>
 8008cf0:	e08a      	b.n	8008e08 <piecewise_eval+0x1c4>
		}
		t -= piece->duration * traj->timescale;
 8008cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf4:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d02:	ed97 7a01 	vldr	s14, [r7, #4]
 8008d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d0a:	edc7 7a01 	vstr	s15, [r7, #4]
		++cursor;
 8008d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d10:	3301      	adds	r3, #1
 8008d12:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (cursor < traj->n_pieces) {
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	7d1b      	ldrb	r3, [r3, #20]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	dba4      	blt.n	8008c6a <piecewise_eval+0x26>
	}
	// if we get here, the trajectory has ended
	struct poly4d const *end_piece = &(traj->pieces[traj->n_pieces - 1]);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	699a      	ldr	r2, [r3, #24]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	7d1b      	ldrb	r3, [r3, #20]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	015b      	lsls	r3, r3, #5
 8008d2e:	440b      	add	r3, r1
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	3b84      	subs	r3, #132	; 0x84
 8008d34:	4413      	add	r3, r2
 8008d36:	64bb      	str	r3, [r7, #72]	; 0x48
	struct traj_eval ev = poly4d_eval(end_piece, end_piece->duration);
 8008d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8008d3e:	f107 0310 	add.w	r3, r7, #16
 8008d42:	eeb0 0a67 	vmov.f32	s0, s15
 8008d46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7ff fd6f 	bl	800882c <poly4d_eval>
	ev.pos = vadd(ev.pos, traj->shift);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	ed93 5a02 	vldr	s10, [r3, #8]
 8008d54:	edd3 5a03 	vldr	s11, [r3, #12]
 8008d58:	ed93 6a04 	vldr	s12, [r3, #16]
 8008d5c:	edd7 6a04 	vldr	s13, [r7, #16]
 8008d60:	ed97 7a05 	vldr	s14, [r7, #20]
 8008d64:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d68:	eef0 1a45 	vmov.f32	s3, s10
 8008d6c:	eeb0 2a65 	vmov.f32	s4, s11
 8008d70:	eef0 2a46 	vmov.f32	s5, s12
 8008d74:	eeb0 0a66 	vmov.f32	s0, s13
 8008d78:	eef0 0a47 	vmov.f32	s1, s14
 8008d7c:	eeb0 1a67 	vmov.f32	s2, s15
 8008d80:	f7fe fe27 	bl	80079d2 <vadd>
 8008d84:	eef0 6a40 	vmov.f32	s13, s0
 8008d88:	eeb0 7a60 	vmov.f32	s14, s1
 8008d8c:	eef0 7a41 	vmov.f32	s15, s2
 8008d90:	edc7 6a04 	vstr	s13, [r7, #16]
 8008d94:	ed87 7a05 	vstr	s14, [r7, #20]
 8008d98:	edc7 7a06 	vstr	s15, [r7, #24]
	ev.vel = vzero();
 8008d9c:	f7fe fd22 	bl	80077e4 <vzero>
 8008da0:	eef0 6a40 	vmov.f32	s13, s0
 8008da4:	eeb0 7a60 	vmov.f32	s14, s1
 8008da8:	eef0 7a41 	vmov.f32	s15, s2
 8008dac:	edc7 6a07 	vstr	s13, [r7, #28]
 8008db0:	ed87 7a08 	vstr	s14, [r7, #32]
 8008db4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ev.acc = vzero();
 8008db8:	f7fe fd14 	bl	80077e4 <vzero>
 8008dbc:	eef0 6a40 	vmov.f32	s13, s0
 8008dc0:	eeb0 7a60 	vmov.f32	s14, s1
 8008dc4:	eef0 7a41 	vmov.f32	s15, s2
 8008dc8:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8008dcc:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8008dd0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	ev.omega = vzero();
 8008dd4:	f7fe fd06 	bl	80077e4 <vzero>
 8008dd8:	eef0 6a40 	vmov.f32	s13, s0
 8008ddc:	eeb0 7a60 	vmov.f32	s14, s1
 8008de0:	eef0 7a41 	vmov.f32	s15, s2
 8008de4:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8008de8:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8008dec:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	return ev;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	461d      	mov	r5, r3
 8008df4:	f107 0410 	add.w	r4, r7, #16
 8008df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	602b      	str	r3, [r5, #0]
}
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	3750      	adds	r7, #80	; 0x50
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e10:	20007b84 	.word	0x20007b84
 8008e14:	00000000 	.word	0x00000000

08008e18 <piecewise_eval_reversed>:

struct traj_eval piecewise_eval_reversed(
  struct piecewise_traj const *traj, float t)
{
 8008e18:	b5b0      	push	{r4, r5, r7, lr}
 8008e1a:	b096      	sub	sp, #88	; 0x58
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	ed87 0a01 	vstr	s0, [r7, #4]
	int cursor = traj->n_pieces - 1;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	7d1b      	ldrb	r3, [r3, #20]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	657b      	str	r3, [r7, #84]	; 0x54
	t = t - traj->t_begin;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	edd3 7a00 	vldr	s15, [r3]
 8008e34:	ed97 7a01 	vldr	s14, [r7, #4]
 8008e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e3c:	edc7 7a01 	vstr	s15, [r7, #4]
	while (cursor >= 0) {
 8008e40:	e072      	b.n	8008f28 <piecewise_eval_reversed+0x110>
		struct poly4d const *piece = &(traj->pieces[cursor]);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	6999      	ldr	r1, [r3, #24]
 8008e46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e48:	4613      	mov	r3, r2
 8008e4a:	015b      	lsls	r3, r3, #5
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	64bb      	str	r3, [r7, #72]	; 0x48
		if (t <= piece->duration * traj->timescale) {
 8008e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e56:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e64:	ed97 7a01 	vldr	s14, [r7, #4]
 8008e68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e70:	d849      	bhi.n	8008f06 <piecewise_eval_reversed+0xee>
			poly4d_tmp = *piece;
 8008e72:	4a65      	ldr	r2, [pc, #404]	; (8009008 <piecewise_eval_reversed+0x1f0>)
 8008e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e76:	4610      	mov	r0, r2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	2384      	movs	r3, #132	; 0x84
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f014 f9a0 	bl	801d1c2 <memcpy>
			poly4d_shift(&poly4d_tmp, traj->shift.x, traj->shift.y, traj->shift.z, 0);
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	edd3 7a02 	vldr	s15, [r3, #8]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	ed93 7a03 	vldr	s14, [r3, #12]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	edd3 6a04 	vldr	s13, [r3, #16]
 8008e94:	eddf 1a5d 	vldr	s3, [pc, #372]	; 800900c <piecewise_eval_reversed+0x1f4>
 8008e98:	eeb0 1a66 	vmov.f32	s2, s13
 8008e9c:	eef0 0a47 	vmov.f32	s1, s14
 8008ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ea4:	4858      	ldr	r0, [pc, #352]	; (8009008 <piecewise_eval_reversed+0x1f0>)
 8008ea6:	f7ff fbc3 	bl	8008630 <poly4d_shift>
			poly4d_stretchtime(&poly4d_tmp, traj->timescale);
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	edd3 7a01 	vldr	s15, [r3, #4]
 8008eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8008eb4:	4854      	ldr	r0, [pc, #336]	; (8009008 <piecewise_eval_reversed+0x1f0>)
 8008eb6:	f7ff fbf5 	bl	80086a4 <poly4d_stretchtime>
			for (int i = 0; i < 4; ++i) {
 8008eba:	2300      	movs	r3, #0
 8008ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8008ebe:	e009      	b.n	8008ed4 <piecewise_eval_reversed+0xbc>
				polyreflect(poly4d_tmp.p[i]);
 8008ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ec2:	015b      	lsls	r3, r3, #5
 8008ec4:	4a50      	ldr	r2, [pc, #320]	; (8009008 <piecewise_eval_reversed+0x1f0>)
 8008ec6:	4413      	add	r3, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff f97b 	bl	80081c4 <polyreflect>
			for (int i = 0; i < 4; ++i) {
 8008ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	ddf2      	ble.n	8008ec0 <piecewise_eval_reversed+0xa8>
			}
			t = t - piece->duration * traj->timescale;
 8008eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008edc:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eea:	ed97 7a01 	vldr	s14, [r7, #4]
 8008eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ef2:	edc7 7a01 	vstr	s15, [r7, #4]
			return poly4d_eval(&poly4d_tmp, t);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	ed97 0a01 	vldr	s0, [r7, #4]
 8008efc:	4942      	ldr	r1, [pc, #264]	; (8009008 <piecewise_eval_reversed+0x1f0>)
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fc94 	bl	800882c <poly4d_eval>
 8008f04:	e07b      	b.n	8008ffe <piecewise_eval_reversed+0x1e6>
		}
		t -= piece->duration * traj->timescale;
 8008f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f08:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f16:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f1e:	edc7 7a01 	vstr	s15, [r7, #4]
		--cursor;
 8008f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f24:	3b01      	subs	r3, #1
 8008f26:	657b      	str	r3, [r7, #84]	; 0x54
	while (cursor >= 0) {
 8008f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	da89      	bge.n	8008e42 <piecewise_eval_reversed+0x2a>
	}
	// if we get here, the trajectory has ended
	struct poly4d const *end_piece = &(traj->pieces[0]);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	64fb      	str	r3, [r7, #76]	; 0x4c
	struct traj_eval ev = poly4d_eval(end_piece, 0.0f);
 8008f34:	f107 0314 	add.w	r3, r7, #20
 8008f38:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800900c <piecewise_eval_reversed+0x1f4>
 8008f3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fc74 	bl	800882c <poly4d_eval>
	ev.pos = vadd(ev.pos, traj->shift);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	ed93 5a02 	vldr	s10, [r3, #8]
 8008f4a:	edd3 5a03 	vldr	s11, [r3, #12]
 8008f4e:	ed93 6a04 	vldr	s12, [r3, #16]
 8008f52:	edd7 6a05 	vldr	s13, [r7, #20]
 8008f56:	ed97 7a06 	vldr	s14, [r7, #24]
 8008f5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008f5e:	eef0 1a45 	vmov.f32	s3, s10
 8008f62:	eeb0 2a65 	vmov.f32	s4, s11
 8008f66:	eef0 2a46 	vmov.f32	s5, s12
 8008f6a:	eeb0 0a66 	vmov.f32	s0, s13
 8008f6e:	eef0 0a47 	vmov.f32	s1, s14
 8008f72:	eeb0 1a67 	vmov.f32	s2, s15
 8008f76:	f7fe fd2c 	bl	80079d2 <vadd>
 8008f7a:	eef0 6a40 	vmov.f32	s13, s0
 8008f7e:	eeb0 7a60 	vmov.f32	s14, s1
 8008f82:	eef0 7a41 	vmov.f32	s15, s2
 8008f86:	edc7 6a05 	vstr	s13, [r7, #20]
 8008f8a:	ed87 7a06 	vstr	s14, [r7, #24]
 8008f8e:	edc7 7a07 	vstr	s15, [r7, #28]
	ev.vel = vzero();
 8008f92:	f7fe fc27 	bl	80077e4 <vzero>
 8008f96:	eef0 6a40 	vmov.f32	s13, s0
 8008f9a:	eeb0 7a60 	vmov.f32	s14, s1
 8008f9e:	eef0 7a41 	vmov.f32	s15, s2
 8008fa2:	edc7 6a08 	vstr	s13, [r7, #32]
 8008fa6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8008faa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	ev.acc = vzero();
 8008fae:	f7fe fc19 	bl	80077e4 <vzero>
 8008fb2:	eef0 6a40 	vmov.f32	s13, s0
 8008fb6:	eeb0 7a60 	vmov.f32	s14, s1
 8008fba:	eef0 7a41 	vmov.f32	s15, s2
 8008fbe:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8008fc2:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8008fc6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	ev.omega = vzero();
 8008fca:	f7fe fc0b 	bl	80077e4 <vzero>
 8008fce:	eef0 6a40 	vmov.f32	s13, s0
 8008fd2:	eeb0 7a60 	vmov.f32	s14, s1
 8008fd6:	eef0 7a41 	vmov.f32	s15, s2
 8008fda:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8008fde:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8008fe2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	return ev;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	461d      	mov	r5, r3
 8008fea:	f107 0414 	add.w	r4, r7, #20
 8008fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	602b      	str	r3, [r5, #0]
}
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	3758      	adds	r7, #88	; 0x58
 8009002:	46bd      	mov	sp, r7
 8009004:	bdb0      	pop	{r4, r5, r7, pc}
 8009006:	bf00      	nop
 8009008:	20007b84 	.word	0x20007b84
 800900c:	00000000 	.word	0x00000000

08009010 <piecewise_plan_7th_order_no_jerk>:

// y, dy == yaw, derivative of yaw
void piecewise_plan_7th_order_no_jerk(struct piecewise_traj *pp, float duration,
	struct vec p0, float y0, struct vec v0, float dy0, struct vec a0,
	struct vec p1, float y1, struct vec v1, float dy1, struct vec a1)
{
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b095      	sub	sp, #84	; 0x54
 8009014:	af00      	add	r7, sp, #0
 8009016:	6478      	str	r0, [r7, #68]	; 0x44
 8009018:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 800901c:	ed87 2a0c 	vstr	s4, [r7, #48]	; 0x30
 8009020:	ed87 4a08 	vstr	s8, [r7, #32]
 8009024:	edc7 7a01 	vstr	s15, [r7, #4]
 8009028:	edc7 0a0d 	vstr	s1, [r7, #52]	; 0x34
 800902c:	ed87 1a0e 	vstr	s2, [r7, #56]	; 0x38
 8009030:	edc7 1a0f 	vstr	s3, [r7, #60]	; 0x3c
 8009034:	edc7 2a09 	vstr	s5, [r7, #36]	; 0x24
 8009038:	ed87 3a0a 	vstr	s6, [r7, #40]	; 0x28
 800903c:	edc7 3a0b 	vstr	s7, [r7, #44]	; 0x2c
 8009040:	edc7 4a05 	vstr	s9, [r7, #20]
 8009044:	ed87 5a06 	vstr	s10, [r7, #24]
 8009048:	edc7 5a07 	vstr	s11, [r7, #28]
 800904c:	ed87 6a02 	vstr	s12, [r7, #8]
 8009050:	edc7 6a03 	vstr	s13, [r7, #12]
 8009054:	ed87 7a04 	vstr	s14, [r7, #16]
	struct poly4d *p = &pp->pieces[0];
 8009058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	64fb      	str	r3, [r7, #76]	; 0x4c
	p->duration = duration;
 800905e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	pp->timescale = 1.0;
 8009066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009068:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800906c:	605a      	str	r2, [r3, #4]
	pp->shift = vzero();
 800906e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8009070:	f7fe fbb8 	bl	80077e4 <vzero>
 8009074:	eef0 6a40 	vmov.f32	s13, s0
 8009078:	eeb0 7a60 	vmov.f32	s14, s1
 800907c:	eef0 7a41 	vmov.f32	s15, s2
 8009080:	edc4 6a02 	vstr	s13, [r4, #8]
 8009084:	ed84 7a03 	vstr	s14, [r4, #12]
 8009088:	edc4 7a04 	vstr	s15, [r4, #16]
	pp->n_pieces = 1;
 800908c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800908e:	2201      	movs	r2, #1
 8009090:	751a      	strb	r2, [r3, #20]
	poly7_nojerk(p->p[0], duration, p0.x, v0.x, a0.x, p1.x, v1.x, a1.x);
 8009092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009094:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009098:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800909c:	edd7 6a05 	vldr	s13, [r7, #20]
 80090a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80090a4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80090a8:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80090ac:	eeb0 3a45 	vmov.f32	s6, s10
 80090b0:	eef0 2a65 	vmov.f32	s5, s11
 80090b4:	eeb0 2a46 	vmov.f32	s4, s12
 80090b8:	eef0 1a66 	vmov.f32	s3, s13
 80090bc:	eeb0 1a47 	vmov.f32	s2, s14
 80090c0:	eef0 0a67 	vmov.f32	s1, s15
 80090c4:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7ff f8f7 	bl	80082bc <poly7_nojerk>
	poly7_nojerk(p->p[1], duration, p0.y, v0.y, a0.y, p1.y, v1.y, a1.y);
 80090ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d0:	3320      	adds	r3, #32
 80090d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80090d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80090da:	edd7 6a06 	vldr	s13, [r7, #24]
 80090de:	ed97 6a03 	vldr	s12, [r7, #12]
 80090e2:	edd7 5a19 	vldr	s11, [r7, #100]	; 0x64
 80090e6:	ed97 5a1d 	vldr	s10, [r7, #116]	; 0x74
 80090ea:	eeb0 3a45 	vmov.f32	s6, s10
 80090ee:	eef0 2a65 	vmov.f32	s5, s11
 80090f2:	eeb0 2a46 	vmov.f32	s4, s12
 80090f6:	eef0 1a66 	vmov.f32	s3, s13
 80090fa:	eeb0 1a47 	vmov.f32	s2, s14
 80090fe:	eef0 0a67 	vmov.f32	s1, s15
 8009102:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff f8d8 	bl	80082bc <poly7_nojerk>
	poly7_nojerk(p->p[2], duration, p0.z, v0.z, a0.z, p1.z, v1.z, a1.z);
 800910c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800910e:	3340      	adds	r3, #64	; 0x40
 8009110:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009114:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8009118:	edd7 6a07 	vldr	s13, [r7, #28]
 800911c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009120:	edd7 5a1a 	vldr	s11, [r7, #104]	; 0x68
 8009124:	ed97 5a1e 	vldr	s10, [r7, #120]	; 0x78
 8009128:	eeb0 3a45 	vmov.f32	s6, s10
 800912c:	eef0 2a65 	vmov.f32	s5, s11
 8009130:	eeb0 2a46 	vmov.f32	s4, s12
 8009134:	eef0 1a66 	vmov.f32	s3, s13
 8009138:	eeb0 1a47 	vmov.f32	s2, s14
 800913c:	eef0 0a67 	vmov.f32	s1, s15
 8009140:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff f8b9 	bl	80082bc <poly7_nojerk>
	poly7_nojerk(p->p[3], duration, y0, dy0, 0, y1, dy1, 0);
 800914a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914c:	3360      	adds	r3, #96	; 0x60
 800914e:	ed9f 3a0a 	vldr	s6, [pc, #40]	; 8009178 <piecewise_plan_7th_order_no_jerk+0x168>
 8009152:	edd7 2a1b 	vldr	s5, [r7, #108]	; 0x6c
 8009156:	ed97 2a01 	vldr	s4, [r7, #4]
 800915a:	eddf 1a07 	vldr	s3, [pc, #28]	; 8009178 <piecewise_plan_7th_order_no_jerk+0x168>
 800915e:	ed97 1a08 	vldr	s2, [r7, #32]
 8009162:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8009166:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff f8a6 	bl	80082bc <poly7_nojerk>
}
 8009170:	bf00      	nop
 8009172:	3754      	adds	r7, #84	; 0x54
 8009174:	46bd      	mov	sp, r7
 8009176:	bd90      	pop	{r4, r7, pc}
 8009178:	00000000 	.word	0x00000000

0800917c <mkvec>:
static inline struct vec mkvec(float x, float y, float z) {
 800917c:	b480      	push	{r7}
 800917e:	b08f      	sub	sp, #60	; 0x3c
 8009180:	af00      	add	r7, sp, #0
 8009182:	ed87 0a07 	vstr	s0, [r7, #28]
 8009186:	edc7 0a06 	vstr	s1, [r7, #24]
 800918a:	ed87 1a05 	vstr	s2, [r7, #20]
	v.x = x; v.y = y; v.z = z;
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	623b      	str	r3, [r7, #32]
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	627b      	str	r3, [r7, #36]	; 0x24
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
	return v;
 800919a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800919e:	f107 0220 	add.w	r2, r7, #32
 80091a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80091a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80091a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ae:	ee06 1a90 	vmov	s13, r1
 80091b2:	ee07 2a10 	vmov	s14, r2
 80091b6:	ee07 3a90 	vmov	s15, r3
}
 80091ba:	eeb0 0a66 	vmov.f32	s0, s13
 80091be:	eef0 0a47 	vmov.f32	s1, s14
 80091c2:	eeb0 1a67 	vmov.f32	s2, s15
 80091c6:	373c      	adds	r7, #60	; 0x3c
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <vrepeat>:
static inline struct vec vrepeat(float x) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08a      	sub	sp, #40	; 0x28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	ed87 0a05 	vstr	s0, [r7, #20]
	return mkvec(x, x, x);
 80091da:	ed97 1a05 	vldr	s2, [r7, #20]
 80091de:	edd7 0a05 	vldr	s1, [r7, #20]
 80091e2:	ed97 0a05 	vldr	s0, [r7, #20]
 80091e6:	f7ff ffc9 	bl	800917c <mkvec>
 80091ea:	eef0 6a40 	vmov.f32	s13, s0
 80091ee:	eeb0 7a60 	vmov.f32	s14, s1
 80091f2:	eef0 7a41 	vmov.f32	s15, s2
 80091f6:	edc7 6a07 	vstr	s13, [r7, #28]
 80091fa:	ed87 7a08 	vstr	s14, [r7, #32]
 80091fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8009202:	69f9      	ldr	r1, [r7, #28]
 8009204:	6a3a      	ldr	r2, [r7, #32]
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	ee06 1a90 	vmov	s13, r1
 800920c:	ee07 2a10 	vmov	s14, r2
 8009210:	ee07 3a90 	vmov	s15, r3
}
 8009214:	eeb0 0a66 	vmov.f32	s0, s13
 8009218:	eef0 0a47 	vmov.f32	s1, s14
 800921c:	eeb0 1a67 	vmov.f32	s2, s15
 8009220:	3728      	adds	r7, #40	; 0x28
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <vzero>:
static inline struct vec vzero(void) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
	return vrepeat(0.0f);
 800922e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8009274 <vzero+0x4c>
 8009232:	f7ff ffcd 	bl	80091d0 <vrepeat>
 8009236:	eef0 6a40 	vmov.f32	s13, s0
 800923a:	eeb0 7a60 	vmov.f32	s14, s1
 800923e:	eef0 7a41 	vmov.f32	s15, s2
 8009242:	edc7 6a05 	vstr	s13, [r7, #20]
 8009246:	ed87 7a06 	vstr	s14, [r7, #24]
 800924a:	edc7 7a07 	vstr	s15, [r7, #28]
 800924e:	6979      	ldr	r1, [r7, #20]
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	ee06 1a90 	vmov	s13, r1
 8009258:	ee07 2a10 	vmov	s14, r2
 800925c:	ee07 3a90 	vmov	s15, r3
}
 8009260:	eeb0 0a66 	vmov.f32	s0, s13
 8009264:	eef0 0a47 	vmov.f32	s1, s14
 8009268:	eeb0 1a67 	vmov.f32	s2, s15
 800926c:	3720      	adds	r7, #32
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	00000000 	.word	0x00000000

08009278 <vadd>:
static inline struct vec vadd(struct vec a, struct vec b) {
 8009278:	b580      	push	{r7, lr}
 800927a:	b08e      	sub	sp, #56	; 0x38
 800927c:	af00      	add	r7, sp, #0
 800927e:	eeb0 5a40 	vmov.f32	s10, s0
 8009282:	eef0 5a60 	vmov.f32	s11, s1
 8009286:	eeb0 6a41 	vmov.f32	s12, s2
 800928a:	eef0 6a61 	vmov.f32	s13, s3
 800928e:	eeb0 7a42 	vmov.f32	s14, s4
 8009292:	eef0 7a62 	vmov.f32	s15, s5
 8009296:	ed87 5a07 	vstr	s10, [r7, #28]
 800929a:	edc7 5a08 	vstr	s11, [r7, #32]
 800929e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80092a2:	edc7 6a04 	vstr	s13, [r7, #16]
 80092a6:	ed87 7a05 	vstr	s14, [r7, #20]
 80092aa:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(a.x + b.x, a.y + b.y, a.z + b.z);
 80092ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80092b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80092b6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80092ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80092be:	edd7 7a05 	vldr	s15, [r7, #20]
 80092c2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80092c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80092ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80092ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092d2:	eeb0 1a67 	vmov.f32	s2, s15
 80092d6:	eef0 0a46 	vmov.f32	s1, s12
 80092da:	eeb0 0a66 	vmov.f32	s0, s13
 80092de:	f7ff ff4d 	bl	800917c <mkvec>
 80092e2:	eef0 6a40 	vmov.f32	s13, s0
 80092e6:	eeb0 7a60 	vmov.f32	s14, s1
 80092ea:	eef0 7a41 	vmov.f32	s15, s2
 80092ee:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80092f2:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80092f6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80092fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009300:	ee06 1a90 	vmov	s13, r1
 8009304:	ee07 2a10 	vmov	s14, r2
 8009308:	ee07 3a90 	vmov	s15, r3
}
 800930c:	eeb0 0a66 	vmov.f32	s0, s13
 8009310:	eef0 0a47 	vmov.f32	s1, s14
 8009314:	eeb0 1a67 	vmov.f32	s2, s15
 8009318:	3738      	adds	r7, #56	; 0x38
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <calculate_polynomial_coefficients>:
// points to _after_ the part that has been processed.
static compressed_piece_ptr calculate_polynomial_coefficients(
  float *result, compressed_piece_ptr ptr,
  enum piecewise_traj_storage_type storage_type,
  float initial_condition, float duration, float scale)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b090      	sub	sp, #64	; 0x40
 8009324:	af00      	add	r7, sp, #0
 8009326:	6178      	str	r0, [r7, #20]
 8009328:	6139      	str	r1, [r7, #16]
 800932a:	4613      	mov	r3, r2
 800932c:	ed87 0a02 	vstr	s0, [r7, #8]
 8009330:	edc7 0a01 	vstr	s1, [r7, #4]
 8009334:	ed87 1a00 	vstr	s2, [r7]
 8009338:	73fb      	strb	r3, [r7, #15]
  compressed_piece_coordinate value;
  float control_points[PP_SIZE];
  uint8_t i, n;

  n = control_points_by_type[storage_type] + 1;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	4a1e      	ldr	r2, [pc, #120]	; (80093b8 <calculate_polynomial_coefficients+0x98>)
 800933e:	5cd3      	ldrb	r3, [r2, r3]
 8009340:	3301      	adds	r3, #1
 8009342:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  control_points[0] = initial_condition;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	61fb      	str	r3, [r7, #28]
  for (i = 1; i < n; i++) {
 800934a:	2301      	movs	r3, #1
 800934c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009350:	e01d      	b.n	800938e <calculate_polynomial_coefficients+0x6e>
    ptr = next_coordinate(ptr, &value);
 8009352:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009356:	4619      	mov	r1, r3
 8009358:	6938      	ldr	r0, [r7, #16]
 800935a:	f000 f870 	bl	800943e <next_coordinate>
 800935e:	6138      	str	r0, [r7, #16]
    control_points[i] = value / scale;
 8009360:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800936c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009370:	ed97 7a00 	vldr	s14, [r7]
 8009374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	3340      	adds	r3, #64	; 0x40
 800937c:	443b      	add	r3, r7
 800937e:	3b24      	subs	r3, #36	; 0x24
 8009380:	edc3 7a00 	vstr	s15, [r3]
  for (i = 1; i < n; i++) {
 8009384:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009388:	3301      	adds	r3, #1
 800938a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800938e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009392:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009396:	429a      	cmp	r2, r3
 8009398:	d3db      	bcc.n	8009352 <calculate_polynomial_coefficients+0x32>
  }

  polybezier(result, duration, control_points, n);
 800939a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800939e:	f107 031c 	add.w	r3, r7, #28
 80093a2:	4619      	mov	r1, r3
 80093a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80093a8:	6978      	ldr	r0, [r7, #20]
 80093aa:	f7fe fe2d 	bl	8008008 <polybezier>

  return ptr;
 80093ae:	693b      	ldr	r3, [r7, #16]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3740      	adds	r7, #64	; 0x40
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	08024c7c 	.word	0x08024c7c

080093bc <calculate_total_duration>:

// Calculates the total duration of a compressed trajectory, starting at the
// given piece
static float calculate_total_duration(compressed_piece_ptr ptr)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t duration_in_msec = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	617b      	str	r3, [r7, #20]
  struct compressed_piece_parsed_header header;

  while (1) {
    ptr = parse_header_of_current_piece(&header, ptr);
 80093c8:	f107 0308 	add.w	r3, r7, #8
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f87a 	bl	80094c8 <parse_header_of_current_piece>
 80093d4:	6078      	str	r0, [r7, #4]
    if (ptr) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <calculate_total_duration+0x2c>
      duration_in_msec += header.duration_in_msec;
 80093dc:	893b      	ldrh	r3, [r7, #8]
 80093de:	461a      	mov	r2, r3
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	4413      	add	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
 80093e6:	e7ef      	b.n	80093c8 <calculate_total_duration+0xc>
    } else {
      return duration_in_msec / STORED_DURATION_SCALE;
 80093e8:	6978      	ldr	r0, [r7, #20]
 80093ea:	f7f7 f89b 	bl	8000524 <__aeabi_ui2d>
 80093ee:	f04f 0200 	mov.w	r2, #0
 80093f2:	4b08      	ldr	r3, [pc, #32]	; (8009414 <calculate_total_duration+0x58>)
 80093f4:	f7f7 fa3a 	bl	800086c <__aeabi_ddiv>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4610      	mov	r0, r2
 80093fe:	4619      	mov	r1, r3
 8009400:	f7f7 fbe2 	bl	8000bc8 <__aeabi_d2f>
 8009404:	4603      	mov	r3, r0
 8009406:	ee07 3a90 	vmov	s15, r3
    }
  }
}
 800940a:	eeb0 0a67 	vmov.f32	s0, s15
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	408f4000 	.word	0x408f4000

08009418 <end_time_of_current_piece>:

// Returns the end time of the current piece being executed
static inline float end_time_of_current_piece(const struct piecewise_traj_compressed *traj) {
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  return start_time_of_current_piece(traj) + traj->current_piece.poly4d.duration;
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f8c3 	bl	80095ac <start_time_of_current_piece>
 8009426:	eeb0 7a40 	vmov.f32	s14, s0
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8009430:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009434:	eeb0 0a67 	vmov.f32	s0, s15
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <next_coordinate>:

// Parses the two bytes pointed to by the given pointer as a signed 16-bit
// integer, in little endian order, and returns the pointer advanced by two
// bytes
static compressed_piece_ptr next_coordinate(compressed_piece_ptr ptr, compressed_piece_coordinate* coord) {
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
  *coord = ptr[0] + (ptr[1] << 8);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	b29a      	uxth	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3301      	adds	r3, #1
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	b29b      	uxth	r3, r3
 800945a:	4413      	add	r3, r2
 800945c:	b29b      	uxth	r3, r3
 800945e:	b21a      	sxth	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	801a      	strh	r2, [r3, #0]
  return ptr + 2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3302      	adds	r3, #2
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <next_duration>:

// Parses the two bytes pointed to by the given pointer as an unsigned 16-bit
// integer, in little endian order, and returns the pointer advanced by two
// bytes
static compressed_piece_ptr next_duration(compressed_piece_ptr ptr, uint16_t* coord) {
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  *coord = ptr[0] + (ptr[1] << 8);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	b29a      	uxth	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3301      	adds	r3, #1
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	b29b      	uxth	r3, r3
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	b29b      	uxth	r3, r3
 8009490:	4413      	add	r3, r2
 8009492:	b29a      	uxth	r2, r3
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	801a      	strh	r2, [r3, #0]
  return ptr + 2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3302      	adds	r3, #2
}
 800949c:	4618      	mov	r0, r3
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <next_piece>:

// Given a pointer that points to the start of a piece inside the data section
// of a compressed trajectory, returns the pointer that points to the next
// piece or zero if this is the last piece
static compressed_piece_ptr next_piece(compressed_piece_ptr ptr)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b086      	sub	sp, #24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  struct compressed_piece_parsed_header header;
  return parse_header_of_current_piece(&header, ptr);
 80094b0:	f107 030c 	add.w	r3, r7, #12
 80094b4:	6879      	ldr	r1, [r7, #4]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f806 	bl	80094c8 <parse_header_of_current_piece>
 80094bc:	4603      	mov	r3, r0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <parse_header_of_current_piece>:
// the duration of the piece as well as the storage types of the XY, Z and
// yaw coordinates. Returns a pointer that points to the next piece or 0 if
// this was the last piece.
static compressed_piece_ptr parse_header_of_current_piece(
  struct compressed_piece_parsed_header* result, compressed_piece_ptr ptr)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint8_t header;
  int length;

  if (!ptr) {
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d116      	bne.n	8009506 <parse_header_of_current_piece+0x3e>
    result->x_type = result->y_type = result->z_type = result->yaw_type = PPTRAJ_STORAGE_CONSTANT;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	715a      	strb	r2, [r3, #5]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	795a      	ldrb	r2, [r3, #5]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	711a      	strb	r2, [r3, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	791a      	ldrb	r2, [r3, #4]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	70da      	strb	r2, [r3, #3]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	78da      	ldrb	r2, [r3, #3]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	709a      	strb	r2, [r3, #2]
    result->body = 0;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	609a      	str	r2, [r3, #8]
    result->duration_in_msec = 0;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	801a      	strh	r2, [r3, #0]
    return 0;
 8009502:	2300      	movs	r3, #0
 8009504:	e04c      	b.n	80095a0 <parse_header_of_current_piece+0xd8>
  }

  header = *ptr;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	73fb      	strb	r3, [r7, #15]

  result->x_type   = (enum piecewise_traj_storage_type) (header & 0x03);
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	709a      	strb	r2, [r3, #2]
  result->y_type   = (enum piecewise_traj_storage_type) ((header >> 2) & 0x03);
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	089b      	lsrs	r3, r3, #2
 800951c:	b2db      	uxtb	r3, r3
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	b2da      	uxtb	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	70da      	strb	r2, [r3, #3]
  result->z_type   = (enum piecewise_traj_storage_type) ((header >> 4) & 0x03);
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	091b      	lsrs	r3, r3, #4
 800952c:	b2db      	uxtb	r3, r3
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	b2da      	uxtb	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	711a      	strb	r2, [r3, #4]
  result->yaw_type = (enum piecewise_traj_storage_type) ((header >> 6) & 0x03);
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	099b      	lsrs	r3, r3, #6
 800953c:	b2da      	uxtb	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	715a      	strb	r2, [r3, #5]
  ptr++;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	3301      	adds	r3, #1
 8009546:	603b      	str	r3, [r7, #0]

  result->body = ptr = next_duration(ptr, &result->duration_in_msec);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4619      	mov	r1, r3
 800954c:	6838      	ldr	r0, [r7, #0]
 800954e:	f7ff ff91 	bl	8009474 <next_duration>
 8009552:	6038      	str	r0, [r7, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	609a      	str	r2, [r3, #8]

  if (result->duration_in_msec > 0) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d01d      	beq.n	800959e <parse_header_of_current_piece+0xd6>
    length = (
      control_points_by_type[result->x_type] +
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	789b      	ldrb	r3, [r3, #2]
 8009566:	461a      	mov	r2, r3
 8009568:	4b0f      	ldr	r3, [pc, #60]	; (80095a8 <parse_header_of_current_piece+0xe0>)
 800956a:	5c9b      	ldrb	r3, [r3, r2]
 800956c:	461a      	mov	r2, r3
      control_points_by_type[result->y_type] +
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	78db      	ldrb	r3, [r3, #3]
 8009572:	4619      	mov	r1, r3
 8009574:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <parse_header_of_current_piece+0xe0>)
 8009576:	5c5b      	ldrb	r3, [r3, r1]
      control_points_by_type[result->x_type] +
 8009578:	4413      	add	r3, r2
      control_points_by_type[result->z_type] +
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	7912      	ldrb	r2, [r2, #4]
 800957e:	4611      	mov	r1, r2
 8009580:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <parse_header_of_current_piece+0xe0>)
 8009582:	5c52      	ldrb	r2, [r2, r1]
      control_points_by_type[result->y_type] +
 8009584:	4413      	add	r3, r2
      control_points_by_type[result->yaw_type]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	7952      	ldrb	r2, [r2, #5]
 800958a:	4611      	mov	r1, r2
 800958c:	4a06      	ldr	r2, [pc, #24]	; (80095a8 <parse_header_of_current_piece+0xe0>)
 800958e:	5c52      	ldrb	r2, [r2, r1]
      control_points_by_type[result->z_type] +
 8009590:	4413      	add	r3, r2
    ) * sizeof(compressed_piece_coordinate);
 8009592:	005b      	lsls	r3, r3, #1
    length = (
 8009594:	60bb      	str	r3, [r7, #8]
    return ptr + length;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	4413      	add	r3, r2
 800959c:	e000      	b.n	80095a0 <parse_header_of_current_piece+0xd8>
  } else {
    return 0;
 800959e:	2300      	movs	r3, #0
  }
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	08024c7c 	.word	0x08024c7c

080095ac <start_time_of_current_piece>:

// Returns the start time of the current piece being executed
static inline float start_time_of_current_piece(const struct piecewise_traj_compressed *traj) {
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  return traj->t_begin + traj->current_piece.t_begin_relative;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	ed93 7a00 	vldr	s14, [r3]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80095c0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80095c4:	eeb0 0a67 	vmov.f32	s0, s15
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <time_relative_to_start_of_current_piece>:

// Returns the number of seconds elapsed since the start time of the current
// piece being executed
static inline float time_relative_to_start_of_current_piece(const struct piecewise_traj_compressed *traj, float t) {
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	ed87 0a00 	vstr	s0, [r7]
  return t - start_time_of_current_piece(traj);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7ff ffe4 	bl	80095ac <start_time_of_current_piece>
 80095e4:	eeb0 7a40 	vmov.f32	s14, s0
 80095e8:	edd7 7a00 	vldr	s15, [r7]
 80095ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80095f0:	eeb0 0a67 	vmov.f32	s0, s15
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <piecewise_compressed_eval>:

/* ************************************************************************ */

struct traj_eval piecewise_compressed_eval(
  struct piecewise_traj_compressed *traj, float t)
{
 80095fa:	b5b0      	push	{r4, r5, r7, lr}
 80095fc:	b092      	sub	sp, #72	; 0x48
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	ed87 0a01 	vstr	s0, [r7, #4]
   * piecewise_compressed_update_current_poly4d() to stretch the time of
   * the poly4d. The problem is that the user may set the timescale to
   * a different value while the poly4d is already pre-calculated, and we
   * have no way of detecting it */

  if (t < start_time_of_current_piece(traj)) {
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f7ff ffcf 	bl	80095ac <start_time_of_current_piece>
 800960e:	eeb0 7a40 	vmov.f32	s14, s0
 8009612:	edd7 7a01 	vldr	s15, [r7, #4]
 8009616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800961a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961e:	d502      	bpl.n	8009626 <piecewise_compressed_eval+0x2c>
    piecewise_compressed_rewind(traj);
 8009620:	68b8      	ldr	r0, [r7, #8]
 8009622:	f000 f88d 	bl	8009740 <piecewise_compressed_rewind>
  }

  while (traj->current_piece.data && t >= end_time_of_current_piece(traj)) {
 8009626:	e002      	b.n	800962e <piecewise_compressed_eval+0x34>
    piecewise_compressed_advance_playhead(traj);
 8009628:	68b8      	ldr	r0, [r7, #8]
 800962a:	f000 f997 	bl	800995c <piecewise_compressed_advance_playhead>
  while (traj->current_piece.data && t >= end_time_of_current_piece(traj)) {
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00b      	beq.n	800964e <piecewise_compressed_eval+0x54>
 8009636:	68b8      	ldr	r0, [r7, #8]
 8009638:	f7ff feee 	bl	8009418 <end_time_of_current_piece>
 800963c:	eeb0 7a40 	vmov.f32	s14, s0
 8009640:	edd7 7a01 	vldr	s15, [r7, #4]
 8009644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800964c:	daec      	bge.n	8009628 <piecewise_compressed_eval+0x2e>
  }

  t = time_relative_to_start_of_current_piece(traj, t);
 800964e:	ed97 0a01 	vldr	s0, [r7, #4]
 8009652:	68b8      	ldr	r0, [r7, #8]
 8009654:	f7ff ffbd 	bl	80095d2 <time_relative_to_start_of_current_piece>
 8009658:	ed87 0a01 	vstr	s0, [r7, #4]

  eval = poly4d_eval(&traj->current_piece.poly4d, t);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009662:	f107 0314 	add.w	r3, r7, #20
 8009666:	ed97 0a01 	vldr	s0, [r7, #4]
 800966a:	4611      	mov	r1, r2
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff f8dd 	bl	800882c <poly4d_eval>
  eval.pos = vadd(eval.pos, traj->shift);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	ed93 5a03 	vldr	s10, [r3, #12]
 8009678:	edd3 5a04 	vldr	s11, [r3, #16]
 800967c:	ed93 6a05 	vldr	s12, [r3, #20]
 8009680:	edd7 6a05 	vldr	s13, [r7, #20]
 8009684:	ed97 7a06 	vldr	s14, [r7, #24]
 8009688:	edd7 7a07 	vldr	s15, [r7, #28]
 800968c:	eef0 1a45 	vmov.f32	s3, s10
 8009690:	eeb0 2a65 	vmov.f32	s4, s11
 8009694:	eef0 2a46 	vmov.f32	s5, s12
 8009698:	eeb0 0a66 	vmov.f32	s0, s13
 800969c:	eef0 0a47 	vmov.f32	s1, s14
 80096a0:	eeb0 1a67 	vmov.f32	s2, s15
 80096a4:	f7ff fde8 	bl	8009278 <vadd>
 80096a8:	eef0 6a40 	vmov.f32	s13, s0
 80096ac:	eeb0 7a60 	vmov.f32	s14, s1
 80096b0:	eef0 7a41 	vmov.f32	s15, s2
 80096b4:	edc7 6a05 	vstr	s13, [r7, #20]
 80096b8:	ed87 7a06 	vstr	s14, [r7, #24]
 80096bc:	edc7 7a07 	vstr	s15, [r7, #28]

  return eval;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	461d      	mov	r5, r3
 80096c4:	f107 0414 	add.w	r4, r7, #20
 80096c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	602b      	str	r3, [r5, #0]
}
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	3748      	adds	r7, #72	; 0x48
 80096dc:	46bd      	mov	sp, r7
 80096de:	bdb0      	pop	{r4, r5, r7, pc}

080096e0 <piecewise_compressed_load>:

void piecewise_compressed_load(struct piecewise_traj_compressed *traj, const void* data)
{
 80096e0:	b590      	push	{r4, r7, lr}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  traj->t_begin = 0;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]
  traj->timescale = 1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80096f8:	609a      	str	r2, [r3, #8]

  traj->data = data;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	619a      	str	r2, [r3, #24]
  traj->shift = vzero();
 8009700:	687c      	ldr	r4, [r7, #4]
 8009702:	f7ff fd91 	bl	8009228 <vzero>
 8009706:	eef0 6a40 	vmov.f32	s13, s0
 800970a:	eeb0 7a60 	vmov.f32	s14, s1
 800970e:	eef0 7a41 	vmov.f32	s15, s2
 8009712:	edc4 6a03 	vstr	s13, [r4, #12]
 8009716:	ed84 7a04 	vstr	s14, [r4, #16]
 800971a:	edc4 7a05 	vstr	s15, [r4, #20]
  piecewise_compressed_rewind(traj);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f80e 	bl	8009740 <piecewise_compressed_rewind>

  traj->duration = calculate_total_duration(traj->current_piece.data);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fe47 	bl	80093bc <calculate_total_duration>
 800972e:	eef0 7a40 	vmov.f32	s15, s0
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	bd90      	pop	{r4, r7, pc}

08009740 <piecewise_compressed_rewind>:

static void piecewise_compressed_rewind(struct piecewise_traj_compressed *traj)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b092      	sub	sp, #72	; 0x48
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  struct traj_eval stopped;
  compressed_piece_coordinate value;
  compressed_piece_ptr ptr;

  /* Parse header that stores the start coordinates */
  bzero(&stopped, sizeof(stopped));
 8009748:	f107 0310 	add.w	r3, r7, #16
 800974c:	4618      	mov	r0, r3
 800974e:	2334      	movs	r3, #52	; 0x34
 8009750:	461a      	mov	r2, r3
 8009752:	2100      	movs	r1, #0
 8009754:	f013 fc30 	bl	801cfb8 <memset>
  ptr = traj->data;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	647b      	str	r3, [r7, #68]	; 0x44
  ptr = next_coordinate(ptr, &value); stopped.pos.x = value / STORED_DISTANCE_SCALE;
 800975e:	f107 030e 	add.w	r3, r7, #14
 8009762:	4619      	mov	r1, r3
 8009764:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009766:	f7ff fe6a 	bl	800943e <next_coordinate>
 800976a:	6478      	str	r0, [r7, #68]	; 0x44
 800976c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009770:	4618      	mov	r0, r3
 8009772:	f7f6 fee7 	bl	8000544 <__aeabi_i2d>
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	4b35      	ldr	r3, [pc, #212]	; (8009850 <piecewise_compressed_rewind+0x110>)
 800977c:	f7f7 f876 	bl	800086c <__aeabi_ddiv>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4610      	mov	r0, r2
 8009786:	4619      	mov	r1, r3
 8009788:	f7f7 fa1e 	bl	8000bc8 <__aeabi_d2f>
 800978c:	4603      	mov	r3, r0
 800978e:	613b      	str	r3, [r7, #16]
  ptr = next_coordinate(ptr, &value); stopped.pos.y = value / STORED_DISTANCE_SCALE;
 8009790:	f107 030e 	add.w	r3, r7, #14
 8009794:	4619      	mov	r1, r3
 8009796:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009798:	f7ff fe51 	bl	800943e <next_coordinate>
 800979c:	6478      	str	r0, [r7, #68]	; 0x44
 800979e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f6 fece 	bl	8000544 <__aeabi_i2d>
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	4b28      	ldr	r3, [pc, #160]	; (8009850 <piecewise_compressed_rewind+0x110>)
 80097ae:	f7f7 f85d 	bl	800086c <__aeabi_ddiv>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4610      	mov	r0, r2
 80097b8:	4619      	mov	r1, r3
 80097ba:	f7f7 fa05 	bl	8000bc8 <__aeabi_d2f>
 80097be:	4603      	mov	r3, r0
 80097c0:	617b      	str	r3, [r7, #20]
  ptr = next_coordinate(ptr, &value); stopped.pos.z = value / STORED_DISTANCE_SCALE;
 80097c2:	f107 030e 	add.w	r3, r7, #14
 80097c6:	4619      	mov	r1, r3
 80097c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097ca:	f7ff fe38 	bl	800943e <next_coordinate>
 80097ce:	6478      	str	r0, [r7, #68]	; 0x44
 80097d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7f6 feb5 	bl	8000544 <__aeabi_i2d>
 80097da:	f04f 0200 	mov.w	r2, #0
 80097de:	4b1c      	ldr	r3, [pc, #112]	; (8009850 <piecewise_compressed_rewind+0x110>)
 80097e0:	f7f7 f844 	bl	800086c <__aeabi_ddiv>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4610      	mov	r0, r2
 80097ea:	4619      	mov	r1, r3
 80097ec:	f7f7 f9ec 	bl	8000bc8 <__aeabi_d2f>
 80097f0:	4603      	mov	r3, r0
 80097f2:	61bb      	str	r3, [r7, #24]
  ptr = next_coordinate(ptr, &value); stopped.yaw = value / STORED_ANGLE_SCALE;
 80097f4:	f107 030e 	add.w	r3, r7, #14
 80097f8:	4619      	mov	r1, r3
 80097fa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097fc:	f7ff fe1f 	bl	800943e <next_coordinate>
 8009800:	6478      	str	r0, [r7, #68]	; 0x44
 8009802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009806:	4618      	mov	r0, r3
 8009808:	f7f6 fe9c 	bl	8000544 <__aeabi_i2d>
 800980c:	a30e      	add	r3, pc, #56	; (adr r3, 8009848 <piecewise_compressed_rewind+0x108>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f7 f82b 	bl	800086c <__aeabi_ddiv>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4610      	mov	r0, r2
 800981c:	4619      	mov	r1, r3
 800981e:	f7f7 f9d3 	bl	8000bc8 <__aeabi_d2f>
 8009822:	4603      	mov	r3, r0
 8009824:	643b      	str	r3, [r7, #64]	; 0x40
  traj->current_piece.t_begin_relative = 0;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f04f 0200 	mov.w	r2, #0
 800982c:	621a      	str	r2, [r3, #32]
  traj->current_piece.data = ptr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009832:	61da      	str	r2, [r3, #28]

  piecewise_compressed_update_current_poly4d(traj, &stopped);
 8009834:	f107 0310 	add.w	r3, r7, #16
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f80a 	bl	8009854 <piecewise_compressed_update_current_poly4d>
}
 8009840:	bf00      	nop
 8009842:	3748      	adds	r7, #72	; 0x48
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	9999999a 	.word	0x9999999a
 800984c:	3fb99999 	.word	0x3fb99999
 8009850:	408f4000 	.word	0x408f4000

08009854 <piecewise_compressed_update_current_poly4d>:

static void piecewise_compressed_update_current_poly4d(
  struct piecewise_traj_compressed *traj, const struct traj_eval *prev_end)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  struct poly4d* poly4d = &traj->current_piece.poly4d;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3324      	adds	r3, #36	; 0x24
 8009862:	61fb      	str	r3, [r7, #28]
  compressed_piece_ptr ptr;
  struct compressed_piece_parsed_header header;

  /* First, clear everything in the poly4d */
  bzero(poly4d, sizeof(*poly4d));
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	4618      	mov	r0, r3
 8009868:	2384      	movs	r3, #132	; 0x84
 800986a:	461a      	mov	r2, r3
 800986c:	2100      	movs	r1, #0
 800986e:	f013 fba3 	bl	801cfb8 <memset>

  /* Parse the header of the current piece, extract the storage types and the duration */
  ptr = traj->current_piece.data;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	61bb      	str	r3, [r7, #24]
  parse_header_of_current_piece(&header, ptr);
 8009878:	f107 030c 	add.w	r3, r7, #12
 800987c:	69b9      	ldr	r1, [r7, #24]
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff fe22 	bl	80094c8 <parse_header_of_current_piece>
  poly4d->duration = header.duration_in_msec / STORED_DURATION_SCALE;
 8009884:	89bb      	ldrh	r3, [r7, #12]
 8009886:	4618      	mov	r0, r3
 8009888:	f7f6 fe5c 	bl	8000544 <__aeabi_i2d>
 800988c:	f04f 0200 	mov.w	r2, #0
 8009890:	4b2f      	ldr	r3, [pc, #188]	; (8009950 <piecewise_compressed_update_current_poly4d+0xfc>)
 8009892:	f7f6 ffeb 	bl	800086c <__aeabi_ddiv>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4610      	mov	r0, r2
 800989c:	4619      	mov	r1, r3
 800989e:	f7f7 f993 	bl	8000bc8 <__aeabi_d2f>
 80098a2:	4602      	mov	r2, r0
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process the body */
  ptr = header.body;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	61bb      	str	r3, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[0], ptr, header.x_type, prev_end->pos.x, poly4d->duration, STORED_DISTANCE_SCALE);
 80098ae:	69f8      	ldr	r0, [r7, #28]
  ptr = calculate_polynomial_coefficients(
 80098b0:	7bba      	ldrb	r2, [r7, #14]
    poly4d->p[0], ptr, header.x_type, prev_end->pos.x, poly4d->duration, STORED_DISTANCE_SCALE);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	edd3 7a00 	vldr	s15, [r3]
  ptr = calculate_polynomial_coefficients(
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80098be:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8009954 <piecewise_compressed_update_current_poly4d+0x100>
 80098c2:	eef0 0a47 	vmov.f32	s1, s14
 80098c6:	eeb0 0a67 	vmov.f32	s0, s15
 80098ca:	69b9      	ldr	r1, [r7, #24]
 80098cc:	f7ff fd28 	bl	8009320 <calculate_polynomial_coefficients>
 80098d0:	61b8      	str	r0, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[1], ptr, header.y_type, prev_end->pos.y, poly4d->duration, STORED_DISTANCE_SCALE);
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	f103 0020 	add.w	r0, r3, #32
  ptr = calculate_polynomial_coefficients(
 80098d8:	7bfa      	ldrb	r2, [r7, #15]
    poly4d->p[1], ptr, header.y_type, prev_end->pos.y, poly4d->duration, STORED_DISTANCE_SCALE);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	edd3 7a01 	vldr	s15, [r3, #4]
  ptr = calculate_polynomial_coefficients(
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 80098e6:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8009954 <piecewise_compressed_update_current_poly4d+0x100>
 80098ea:	eef0 0a47 	vmov.f32	s1, s14
 80098ee:	eeb0 0a67 	vmov.f32	s0, s15
 80098f2:	69b9      	ldr	r1, [r7, #24]
 80098f4:	f7ff fd14 	bl	8009320 <calculate_polynomial_coefficients>
 80098f8:	61b8      	str	r0, [r7, #24]
  ptr = calculate_polynomial_coefficients(
    poly4d->p[2], ptr, header.z_type, prev_end->pos.z, poly4d->duration, STORED_DISTANCE_SCALE);
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	f103 0040 	add.w	r0, r3, #64	; 0x40
  ptr = calculate_polynomial_coefficients(
 8009900:	7c3a      	ldrb	r2, [r7, #16]
    poly4d->p[2], ptr, header.z_type, prev_end->pos.z, poly4d->duration, STORED_DISTANCE_SCALE);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	edd3 7a02 	vldr	s15, [r3, #8]
  ptr = calculate_polynomial_coefficients(
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800990e:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8009954 <piecewise_compressed_update_current_poly4d+0x100>
 8009912:	eef0 0a47 	vmov.f32	s1, s14
 8009916:	eeb0 0a67 	vmov.f32	s0, s15
 800991a:	69b9      	ldr	r1, [r7, #24]
 800991c:	f7ff fd00 	bl	8009320 <calculate_polynomial_coefficients>
 8009920:	61b8      	str	r0, [r7, #24]
  calculate_polynomial_coefficients(
    poly4d->p[3], ptr, header.yaw_type, prev_end->yaw, poly4d->duration, STORED_ANGLE_SCALE);
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	f103 0060 	add.w	r0, r3, #96	; 0x60
  calculate_polynomial_coefficients(
 8009928:	7c7a      	ldrb	r2, [r7, #17]
    poly4d->p[3], ptr, header.yaw_type, prev_end->yaw, poly4d->duration, STORED_ANGLE_SCALE);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
  calculate_polynomial_coefficients(
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8009936:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8009958 <piecewise_compressed_update_current_poly4d+0x104>
 800993a:	eef0 0a47 	vmov.f32	s1, s14
 800993e:	eeb0 0a67 	vmov.f32	s0, s15
 8009942:	69b9      	ldr	r1, [r7, #24]
 8009944:	f7ff fcec 	bl	8009320 <calculate_polynomial_coefficients>
}
 8009948:	bf00      	nop
 800994a:	3720      	adds	r7, #32
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	408f4000 	.word	0x408f4000
 8009954:	447a0000 	.word	0x447a0000
 8009958:	3dcccccd 	.word	0x3dcccccd

0800995c <piecewise_compressed_advance_playhead>:

static void piecewise_compressed_advance_playhead(struct piecewise_traj_compressed *traj)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b090      	sub	sp, #64	; 0x40
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  float duration = traj->current_piece.poly4d.duration;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct traj_eval end_of_previous_piece = poly4d_eval(&traj->current_piece.poly4d, duration);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800997a:	4611      	mov	r1, r2
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe ff55 	bl	800882c <poly4d_eval>

  traj->current_piece.t_begin_relative += duration;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	ed93 7a08 	vldr	s14, [r3, #32]
 8009988:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800998c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	edc3 7a08 	vstr	s15, [r3, #32]
  traj->current_piece.data = next_piece(traj->current_piece.data);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	69db      	ldr	r3, [r3, #28]
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff fd84 	bl	80094a8 <next_piece>
 80099a0:	4602      	mov	r2, r0
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	61da      	str	r2, [r3, #28]

  piecewise_compressed_update_current_poly4d(traj, &end_of_previous_piece);
 80099a6:	f107 0308 	add.w	r3, r7, #8
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f7ff ff51 	bl	8009854 <piecewise_compressed_update_current_poly4d>
}
 80099b2:	bf00      	nop
 80099b4:	3740      	adds	r7, #64	; 0x40
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80099c0:	2300      	movs	r3, #0
 80099c2:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80099c4:	1d3b      	adds	r3, r7, #4
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f8a2 	bl	8009b10 <platformGetListOfConfigurations>
 80099cc:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4619      	mov	r1, r3
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f854 	bl	8009a80 <platformInitConfiguration>
 80099d8:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e000      	b.n	80099e6 <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b086      	sub	sp, #24
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b30      	cmp	r3, #48	; 0x30
 80099fe:	d104      	bne.n	8009a0a <platformParseDeviceTypeString+0x1c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3301      	adds	r3, #1
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b3b      	cmp	r3, #59	; 0x3b
 8009a08:	d001      	beq.n	8009a0e <platformParseDeviceTypeString+0x20>
    return 1;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e034      	b.n	8009a78 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8009a0e:	2302      	movs	r3, #2
 8009a10:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	3304      	adds	r3, #4
 8009a16:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	e00e      	b.n	8009a40 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00c      	beq.n	8009a48 <platformParseDeviceTypeString+0x5a>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	4413      	add	r3, r2
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b3b      	cmp	r3, #59	; 0x3b
 8009a38:	d006      	beq.n	8009a48 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	617b      	str	r3, [r7, #20]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	ddec      	ble.n	8009a22 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	dd01      	ble.n	8009a54 <platformParseDeviceTypeString+0x66>
    return 1;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e011      	b.n	8009a78 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	4413      	add	r3, r2
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	4619      	mov	r1, r3
 8009a66:	6838      	ldr	r0, [r7, #0]
 8009a68:	f013 fbab 	bl	801d1c2 <memcpy>
  deviceType[length] = '\0';
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4413      	add	r3, r2
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
  return 0;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b090      	sub	sp, #64	; 0x40
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8009a8a:	f107 0314 	add.w	r3, r7, #20
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f85e 	bl	8009b50 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8009a94:	f107 020c 	add.w	r2, r7, #12
 8009a98:	f107 0314 	add.w	r3, r7, #20
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff ffa5 	bl	80099ee <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa8:	e01a      	b.n	8009ae0 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8009aaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aac:	4613      	mov	r3, r2
 8009aae:	00db      	lsls	r3, r3, #3
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	4413      	add	r3, r2
 8009aba:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	f107 020c 	add.w	r2, r7, #12
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7f6 fb83 	bl	80001d0 <strcmp>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <platformInitConfiguration+0x5a>
      active_config = config;
 8009ad0:	4a08      	ldr	r2, [pc, #32]	; (8009af4 <platformInitConfiguration+0x74>)
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad4:	6013      	str	r3, [r2, #0]
      return 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e007      	b.n	8009aea <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	3301      	adds	r3, #1
 8009ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	dbe0      	blt.n	8009aaa <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8009ae8:	2301      	movs	r3, #1
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3740      	adds	r7, #64	; 0x40
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20007c08 	.word	0x20007c08

08009af8 <platformConfigGetDeviceTypeName>:

const char* platformConfigGetDeviceType() {
  return active_config->deviceType;
}

const char* platformConfigGetDeviceTypeName() {
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  return active_config->deviceTypeName;
 8009afc:	4b03      	ldr	r3, [pc, #12]	; (8009b0c <platformConfigGetDeviceTypeName+0x14>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3305      	adds	r3, #5
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	20007c08 	.word	0x20007c08

08009b10 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	601a      	str	r2, [r3, #0]
  return configs;
 8009b1e:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <platformGetListOfConfigurations+0x1c>)
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	20000bc0 	.word	0x20000bc0

08009b30 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8009b3e:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8009b42:	015b      	lsls	r3, r3, #5
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	e00d      	b.n	8009b7e <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8009b62:	6938      	ldr	r0, [r7, #16]
 8009b64:	f7ff ffe4 	bl	8009b30 <getAddressOfOtpMemoryBlock>
 8009b68:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	617b      	str	r3, [r7, #20]
      break;
 8009b76:	e005      	b.n	8009b84 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	613b      	str	r3, [r7, #16]
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	2b0f      	cmp	r3, #15
 8009b82:	ddee      	ble.n	8009b62 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <platformGetDeviceTypeString+0x42>
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2bff      	cmp	r3, #255	; 0xff
 8009b90:	d101      	bne.n	8009b96 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8009b92:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <platformGetDeviceTypeString+0x60>)
 8009b94:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8009b96:	2220      	movs	r2, #32
 8009b98:	6979      	ldr	r1, [r7, #20]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f013 fa30 	bl	801d000 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3320      	adds	r3, #32
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
}
 8009ba8:	bf00      	nop
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	08023230 	.word	0x08023230

08009bb4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8009bba:	4b21      	ldr	r3, [pc, #132]	; (8009c40 <_DoInit+0x8c>)
 8009bbc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2203      	movs	r2, #3
 8009bc2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2203      	movs	r2, #3
 8009bc8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <_DoInit+0x90>)
 8009bce:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a1d      	ldr	r2, [pc, #116]	; (8009c48 <_DoInit+0x94>)
 8009bd4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bdc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a14      	ldr	r2, [pc, #80]	; (8009c44 <_DoInit+0x90>)
 8009bf4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a14      	ldr	r2, [pc, #80]	; (8009c4c <_DoInit+0x98>)
 8009bfa:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2202      	movs	r2, #2
 8009c12:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3307      	adds	r3, #7
 8009c18:	4a0d      	ldr	r2, [pc, #52]	; (8009c50 <_DoInit+0x9c>)
 8009c1a:	6810      	ldr	r0, [r2, #0]
 8009c1c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <_DoInit+0xa0>)
 8009c22:	6810      	ldr	r0, [r2, #0]
 8009c24:	6018      	str	r0, [r3, #0]
 8009c26:	8891      	ldrh	r1, [r2, #4]
 8009c28:	7992      	ldrb	r2, [r2, #6]
 8009c2a:	8099      	strh	r1, [r3, #4]
 8009c2c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	719a      	strb	r2, [r3, #6]
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	20007c0c 	.word	0x20007c0c
 8009c44:	08023238 	.word	0x08023238
 8009c48:	20007cb4 	.word	0x20007cb4
 8009c4c:	20008cb4 	.word	0x20008cb4
 8009c50:	08023244 	.word	0x08023244
 8009c54:	08023248 	.word	0x08023248

08009c58 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8009c64:	2300      	movs	r3, #0
 8009c66:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d905      	bls.n	8009c88 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	61fb      	str	r3, [r7, #28]
 8009c86:	e007      	b.n	8009c98 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	689a      	ldr	r2, [r3, #8]
 8009c8c:	6939      	ldr	r1, [r7, #16]
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	1acb      	subs	r3, r1, r3
 8009c92:	4413      	add	r3, r2
 8009c94:	3b01      	subs	r3, #1
 8009c96:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	689a      	ldr	r2, [r3, #8]
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	bf28      	it	cs
 8009ca6:	4613      	movcs	r3, r2
 8009ca8:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	bf28      	it	cs
 8009cb2:	4613      	movcs	r3, r2
 8009cb4:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	68b9      	ldr	r1, [r7, #8]
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f013 fa7d 	bl	801d1c2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	4413      	add	r3, r2
 8009cce:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d101      	bne.n	8009cf6 <_WriteBlocking+0x9e>
      WrOff = 0u;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1b5      	bne.n	8009c6e <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 8009d02:	69bb      	ldr	r3, [r7, #24]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3720      	adds	r7, #32
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	689a      	ldr	r2, [r3, #8]
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d90e      	bls.n	8009d4e <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	4413      	add	r3, r2
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f013 fa40 	bl	801d1c2 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	441a      	add	r2, r3
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009d4c:	e01a      	b.n	8009d84 <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	4413      	add	r3, r2
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	68b9      	ldr	r1, [r7, #8]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f013 fa2f 	bl	801d1c2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6858      	ldr	r0, [r3, #4]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	4413      	add	r3, r2
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	f013 fa22 	bl	801d1c2 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	60da      	str	r2, [r3, #12]
}
 8009d84:	bf00      	nop
 8009d86:	3720      	adds	r7, #32
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d808      	bhi.n	8009dba <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	1ad2      	subs	r2, r2, r3
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	4413      	add	r3, r2
 8009db4:	3b01      	subs	r3, #1
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e004      	b.n	8009dc4 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	617b      	str	r3, [r7, #20]
  }
  return r;
 8009dc4:	697b      	ldr	r3, [r7, #20]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
	...

08009dd4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	4613      	mov	r3, r2
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	4413      	add	r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	4a1f      	ldr	r2, [pc, #124]	; (8009e70 <SEGGER_RTT_WriteNoLock+0x9c>)
 8009df2:	4413      	add	r3, r2
 8009df4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d029      	beq.n	8009e52 <SEGGER_RTT_WriteNoLock+0x7e>
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d82e      	bhi.n	8009e60 <SEGGER_RTT_WriteNoLock+0x8c>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <SEGGER_RTT_WriteNoLock+0x38>
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d013      	beq.n	8009e32 <SEGGER_RTT_WriteNoLock+0x5e>
 8009e0a:	e029      	b.n	8009e60 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	f7ff ffbd 	bl	8009d8c <_GetAvailWriteSpace>
 8009e12:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d202      	bcs.n	8009e22 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009e20:	e021      	b.n	8009e66 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	69b9      	ldr	r1, [r7, #24]
 8009e2a:	6978      	ldr	r0, [r7, #20]
 8009e2c:	f7ff ff6e 	bl	8009d0c <_WriteNoCheck>
    break;
 8009e30:	e019      	b.n	8009e66 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009e32:	6978      	ldr	r0, [r7, #20]
 8009e34:	f7ff ffaa 	bl	8009d8c <_GetAvailWriteSpace>
 8009e38:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	bf28      	it	cs
 8009e42:	4613      	movcs	r3, r2
 8009e44:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	69b9      	ldr	r1, [r7, #24]
 8009e4a:	6978      	ldr	r0, [r7, #20]
 8009e4c:	f7ff ff5e 	bl	8009d0c <_WriteNoCheck>
    break;
 8009e50:	e009      	b.n	8009e66 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	69b9      	ldr	r1, [r7, #24]
 8009e56:	6978      	ldr	r0, [r7, #20]
 8009e58:	f7ff fefe 	bl	8009c58 <_WriteBlocking>
 8009e5c:	61f8      	str	r0, [r7, #28]
    break;
 8009e5e:	e002      	b.n	8009e66 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61fb      	str	r3, [r7, #28]
    break;
 8009e64:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009e66:	69fb      	ldr	r3, [r7, #28]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3720      	adds	r7, #32
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	20007c0c 	.word	0x20007c0c

08009e74 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8009e80:	4b0d      	ldr	r3, [pc, #52]	; (8009eb8 <SEGGER_RTT_Write+0x44>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <SEGGER_RTT_Write+0x18>
 8009e88:	f7ff fe94 	bl	8009bb4 <_DoInit>
  SEGGER_RTT_LOCK();
 8009e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8009e90:	f04f 0120 	mov.w	r1, #32
 8009e94:	f381 8811 	msr	BASEPRI, r1
 8009e98:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f7ff ff98 	bl	8009dd4 <SEGGER_RTT_WriteNoLock>
 8009ea4:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 8009eac:	693b      	ldr	r3, [r7, #16]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3718      	adds	r7, #24
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20007c0c 	.word	0x20007c0c

08009ebc <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8009eca:	4b30      	ldr	r3, [pc, #192]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8009ed2:	f7ff fe6f 	bl	8009bb4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8009ed6:	4b2d      	ldr	r3, [pc, #180]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	461a      	mov	r2, r3
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d24c      	bcs.n	8009f7c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8009ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ee6:	f04f 0120 	mov.w	r1, #32
 8009eea:	f381 8811 	msr	BASEPRI, r1
 8009eee:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d032      	beq.n	8009f5c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8009ef6:	4925      	ldr	r1, [pc, #148]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	1c5a      	adds	r2, r3, #1
 8009efc:	4613      	mov	r3, r2
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	4413      	add	r3, r2
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	440b      	add	r3, r1
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009f0a:	4920      	ldr	r1, [pc, #128]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	4613      	mov	r3, r2
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	4413      	add	r3, r2
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	440b      	add	r3, r1
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8009f20:	491a      	ldr	r1, [pc, #104]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4613      	mov	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	4413      	add	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	440b      	add	r3, r1
 8009f2e:	3320      	adds	r3, #32
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8009f34:	4915      	ldr	r1, [pc, #84]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	4413      	add	r3, r2
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	440b      	add	r3, r1
 8009f42:	3328      	adds	r3, #40	; 0x28
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8009f48:	4910      	ldr	r1, [pc, #64]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	4413      	add	r3, r2
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	440b      	add	r3, r1
 8009f56:	3324      	adds	r3, #36	; 0x24
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8009f5c:	490b      	ldr	r1, [pc, #44]	; (8009f8c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	4613      	mov	r3, r2
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	4413      	add	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	440b      	add	r3, r1
 8009f6a:	332c      	adds	r3, #44	; 0x2c
 8009f6c:	6a3a      	ldr	r2, [r7, #32]
 8009f6e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	e002      	b.n	8009f82 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8009f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f80:	617b      	str	r3, [r7, #20]
  }
  return r;
 8009f82:	697b      	ldr	r3, [r7, #20]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20007c0c 	.word	0x20007c0c

08009f90 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	af00      	add	r7, sp, #0
  _DoInit();
 8009f94:	f7ff fe0e 	bl	8009bb4 <_DoInit>
}
 8009f98:	bf00      	nop
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d80e      	bhi.n	8009fd8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689a      	ldr	r2, [r3, #8]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d115      	bne.n	800a010 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6918      	ldr	r0, [r3, #16]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6819      	ldr	r1, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	f7ff ff3f 	bl	8009e74 <SEGGER_RTT_Write>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d004      	beq.n	800a00a <_StoreChar+0x6e>
      p->ReturnValue = -1;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a006:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 800a008:	e002      	b.n	800a010 <_StoreChar+0x74>
      p->Cnt = 0u;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	609a      	str	r2, [r3, #8]
}
 800a010:	bf00      	nop
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	; 0x28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800a02a:	2301      	movs	r3, #1
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800a02e:	2301      	movs	r3, #1
 800a030:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800a032:	e007      	b.n	800a044 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800a034:	6a3a      	ldr	r2, [r7, #32]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	fbb2 f3f3 	udiv	r3, r2, r3
 800a03c:	623b      	str	r3, [r7, #32]
    Width++;
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	3301      	adds	r3, #1
 800a042:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800a044:	6a3a      	ldr	r2, [r7, #32]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d2f3      	bcs.n	800a034 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	429a      	cmp	r2, r3
 800a052:	d901      	bls.n	800a058 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800a058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d125      	bne.n	800a0ae <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	2b00      	cmp	r3, #0
 800a066:	d022      	beq.n	800a0ae <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800a068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <_PrintUnsigned+0x66>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d102      	bne.n	800a07e <_PrintUnsigned+0x66>
        c = '0';
 800a078:	2330      	movs	r3, #48	; 0x30
 800a07a:	76fb      	strb	r3, [r7, #27]
 800a07c:	e001      	b.n	800a082 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800a07e:	2320      	movs	r3, #32
 800a080:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a082:	e00b      	b.n	800a09c <_PrintUnsigned+0x84>
        FieldWidth--;
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	3b01      	subs	r3, #1
 800a088:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800a08a:	7efb      	ldrb	r3, [r7, #27]
 800a08c:	4619      	mov	r1, r3
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff ff84 	bl	8009f9c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	db07      	blt.n	800a0ac <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d005      	beq.n	800a0ae <_PrintUnsigned+0x96>
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d3ec      	bcc.n	800a084 <_PrintUnsigned+0x6c>
 800a0aa:	e000      	b.n	800a0ae <_PrintUnsigned+0x96>
          break;
 800a0ac:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	db55      	blt.n	800a162 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d903      	bls.n	800a0c4 <_PrintUnsigned+0xac>
        NumDigits--;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	603b      	str	r3, [r7, #0]
 800a0c2:	e009      	b.n	800a0d8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0cc:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d200      	bcs.n	800a0d8 <_PrintUnsigned+0xc0>
          break;
 800a0d6:	e005      	b.n	800a0e4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	fb02 f303 	mul.w	r3, r2, r3
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800a0e2:	e7e8      	b.n	800a0b6 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ec:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f2:	fb02 f303 	mul.w	r3, r2, r3
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 800a0fc:	4a1b      	ldr	r2, [pc, #108]	; (800a16c <_PrintUnsigned+0x154>)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	4413      	add	r3, r2
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	4619      	mov	r1, r3
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff ff48 	bl	8009f9c <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	db08      	blt.n	800a126 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 800a114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	fbb2 f3f3 	udiv	r3, r2, r3
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d1df      	bne.n	800a0e4 <_PrintUnsigned+0xcc>
 800a124:	e000      	b.n	800a128 <_PrintUnsigned+0x110>
        break;
 800a126:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800a128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d017      	beq.n	800a162 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2b00      	cmp	r3, #0
 800a136:	d014      	beq.n	800a162 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a138:	e00a      	b.n	800a150 <_PrintUnsigned+0x138>
          FieldWidth--;
 800a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13c:	3b01      	subs	r3, #1
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 800a140:	2120      	movs	r1, #32
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff ff2a 	bl	8009f9c <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	db07      	blt.n	800a160 <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a152:	2b00      	cmp	r3, #0
 800a154:	d005      	beq.n	800a162 <_PrintUnsigned+0x14a>
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d3ed      	bcc.n	800a13a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800a15e:	e000      	b.n	800a162 <_PrintUnsigned+0x14a>
            break;
 800a160:	bf00      	nop
}
 800a162:	bf00      	nop
 800a164:	3728      	adds	r7, #40	; 0x28
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	08024c80 	.word	0x08024c80

0800a170 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfb8      	it	lt
 800a184:	425b      	neglt	r3, r3
 800a186:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800a188:	2301      	movs	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800a18c:	e007      	b.n	800a19e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	693a      	ldr	r2, [r7, #16]
 800a192:	fb92 f3f3 	sdiv	r3, r2, r3
 800a196:	613b      	str	r3, [r7, #16]
    Width++;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	3301      	adds	r3, #1
 800a19c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	daf3      	bge.n	800a18e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d901      	bls.n	800a1b2 <_PrintInt+0x42>
    Width = NumDigits;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <_PrintInt+0x5e>
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	db04      	blt.n	800a1c8 <_PrintInt+0x58>
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <_PrintInt+0x5e>
    FieldWidth--;
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	f003 0302 	and.w	r3, r3, #2
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <_PrintInt+0x6e>
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d01c      	beq.n	800a218 <_PrintInt+0xa8>
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d117      	bne.n	800a218 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d014      	beq.n	800a218 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a1ee:	e00a      	b.n	800a206 <_PrintInt+0x96>
        FieldWidth--;
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800a1f6:	2120      	movs	r1, #32
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff fecf 	bl	8009f9c <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	db07      	blt.n	800a216 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d005      	beq.n	800a218 <_PrintInt+0xa8>
 800a20c:	697a      	ldr	r2, [r7, #20]
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	429a      	cmp	r2, r3
 800a212:	d3ed      	bcc.n	800a1f0 <_PrintInt+0x80>
 800a214:	e000      	b.n	800a218 <_PrintInt+0xa8>
          break;
 800a216:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	db4a      	blt.n	800a2b6 <_PrintInt+0x146>
    if (v < 0) {
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	da07      	bge.n	800a236 <_PrintInt+0xc6>
      v = -v;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	425b      	negs	r3, r3
 800a22a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 800a22c:	212d      	movs	r1, #45	; 0x2d
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff feb4 	bl	8009f9c <_StoreChar>
 800a234:	e008      	b.n	800a248 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d003      	beq.n	800a248 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 800a240:	212b      	movs	r1, #43	; 0x2b
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f7ff feaa 	bl	8009f9c <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	db32      	blt.n	800a2b6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d01f      	beq.n	800a29a <_PrintInt+0x12a>
 800a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d11a      	bne.n	800a29a <_PrintInt+0x12a>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d117      	bne.n	800a29a <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 800a26a:	6a3b      	ldr	r3, [r7, #32]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d014      	beq.n	800a29a <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a270:	e00a      	b.n	800a288 <_PrintInt+0x118>
            FieldWidth--;
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	3b01      	subs	r3, #1
 800a276:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 800a278:	2130      	movs	r1, #48	; 0x30
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f7ff fe8e 	bl	8009f9c <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	db07      	blt.n	800a298 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800a288:	6a3b      	ldr	r3, [r7, #32]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d005      	beq.n	800a29a <_PrintInt+0x12a>
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	429a      	cmp	r2, r3
 800a294:	d3ed      	bcc.n	800a272 <_PrintInt+0x102>
 800a296:	e000      	b.n	800a29a <_PrintInt+0x12a>
              break;
 800a298:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	db09      	blt.n	800a2b6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	6a3b      	ldr	r3, [r7, #32]
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff feb1 	bl	800a018 <_PrintUnsigned>
      }
    }
  }
}
 800a2b6:	bf00      	nop
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b0d2      	sub	sp, #328	; 0x148
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a2ce:	6018      	str	r0, [r3, #0]
 800a2d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2d4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a2d8:	6019      	str	r1, [r3, #0]
 800a2da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a2e2:	601a      	str	r2, [r3, #0]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 800a2e4:	f107 0310 	add.w	r3, r7, #16
 800a2e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800a2ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  BufferDesc.Cnt            = 0u;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  BufferDesc.RTTBufferIndex = BufferIndex;
 800a2fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  BufferDesc.ReturnValue    = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  do {
    c = *sFormat;
 800a30e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a312:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    sFormat++;
 800a31e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a322:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a326:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a32a:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a32e:	6812      	ldr	r2, [r2, #0]
 800a330:	3201      	adds	r2, #1
 800a332:	601a      	str	r2, [r3, #0]
    if (c == 0u) {
 800a334:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 825a 	beq.w	800a7f2 <SEGGER_RTT_vprintf+0x532>
      break;
    }
    if (c == '%') {
 800a33e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a342:	2b25      	cmp	r3, #37	; 0x25
 800a344:	f040 8247 	bne.w	800a7d6 <SEGGER_RTT_vprintf+0x516>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800a348:	2300      	movs	r3, #0
 800a34a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      v = 1;
 800a34e:	2301      	movs	r3, #1
 800a350:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      do {
        c = *sFormat;
 800a354:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a358:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        switch (c) {
 800a364:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a368:	3b23      	subs	r3, #35	; 0x23
 800a36a:	2b0d      	cmp	r3, #13
 800a36c:	d866      	bhi.n	800a43c <SEGGER_RTT_vprintf+0x17c>
 800a36e:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <SEGGER_RTT_vprintf+0xb4>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a419 	.word	0x0800a419
 800a378:	0800a43d 	.word	0x0800a43d
 800a37c:	0800a43d 	.word	0x0800a43d
 800a380:	0800a43d 	.word	0x0800a43d
 800a384:	0800a43d 	.word	0x0800a43d
 800a388:	0800a43d 	.word	0x0800a43d
 800a38c:	0800a43d 	.word	0x0800a43d
 800a390:	0800a43d 	.word	0x0800a43d
 800a394:	0800a3f5 	.word	0x0800a3f5
 800a398:	0800a43d 	.word	0x0800a43d
 800a39c:	0800a3ad 	.word	0x0800a3ad
 800a3a0:	0800a43d 	.word	0x0800a43d
 800a3a4:	0800a43d 	.word	0x0800a43d
 800a3a8:	0800a3d1 	.word	0x0800a3d1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800a3ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a3b0:	f043 0301 	orr.w	r3, r3, #1
 800a3b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800a3b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a3c0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a3c4:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	3201      	adds	r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	e039      	b.n	800a444 <SEGGER_RTT_vprintf+0x184>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800a3d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a3d4:	f043 0302 	orr.w	r3, r3, #2
 800a3d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800a3dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a3e4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a3e8:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	3201      	adds	r2, #1
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	e027      	b.n	800a444 <SEGGER_RTT_vprintf+0x184>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800a3f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a3f8:	f043 0304 	orr.w	r3, r3, #4
 800a3fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800a400:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a404:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a408:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a40c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a410:	6812      	ldr	r2, [r2, #0]
 800a412:	3201      	adds	r2, #1
 800a414:	601a      	str	r2, [r3, #0]
 800a416:	e015      	b.n	800a444 <SEGGER_RTT_vprintf+0x184>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800a418:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a41c:	f043 0308 	orr.w	r3, r3, #8
 800a420:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800a424:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a428:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a42c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a430:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a434:	6812      	ldr	r2, [r2, #0]
 800a436:	3201      	adds	r2, #1
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	e003      	b.n	800a444 <SEGGER_RTT_vprintf+0x184>
        default:  v = 0; break;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800a442:	bf00      	nop
        }
      } while (v);
 800a444:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d183      	bne.n	800a354 <SEGGER_RTT_vprintf+0x94>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800a44c:	2300      	movs	r3, #0
 800a44e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      do {
        c = *sFormat;
 800a452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a456:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c < '0') || (c > '9')) {
 800a462:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a466:	2b2f      	cmp	r3, #47	; 0x2f
 800a468:	d91c      	bls.n	800a4a4 <SEGGER_RTT_vprintf+0x1e4>
 800a46a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a46e:	2b39      	cmp	r3, #57	; 0x39
 800a470:	d818      	bhi.n	800a4a4 <SEGGER_RTT_vprintf+0x1e4>
          break;
        }
        sFormat++;
 800a472:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a476:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a47a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a47e:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a482:	6812      	ldr	r2, [r2, #0]
 800a484:	3201      	adds	r2, #1
 800a486:	601a      	str	r2, [r3, #0]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 800a488:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800a48c:	4613      	mov	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	461a      	mov	r2, r3
 800a496:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a49a:	4413      	add	r3, r2
 800a49c:	3b30      	subs	r3, #48	; 0x30
 800a49e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        c = *sFormat;
 800a4a2:	e7d6      	b.n	800a452 <SEGGER_RTT_vprintf+0x192>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      c = *sFormat;
 800a4aa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a4ae:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      if (c == '.') {
 800a4ba:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a4be:	2b2e      	cmp	r3, #46	; 0x2e
 800a4c0:	d133      	bne.n	800a52a <SEGGER_RTT_vprintf+0x26a>
        sFormat++;
 800a4c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a4c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a4ca:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a4ce:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	3201      	adds	r2, #1
 800a4d6:	601a      	str	r2, [r3, #0]
        do {
          c = *sFormat;
 800a4d8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a4dc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
          if ((c < '0') || (c > '9')) {
 800a4e8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a4ec:	2b2f      	cmp	r3, #47	; 0x2f
 800a4ee:	d91c      	bls.n	800a52a <SEGGER_RTT_vprintf+0x26a>
 800a4f0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a4f4:	2b39      	cmp	r3, #57	; 0x39
 800a4f6:	d818      	bhi.n	800a52a <SEGGER_RTT_vprintf+0x26a>
            break;
          }
          sFormat++;
 800a4f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a4fc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a500:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a504:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	3201      	adds	r2, #1
 800a50c:	601a      	str	r2, [r3, #0]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 800a50e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	461a      	mov	r2, r3
 800a51c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a520:	4413      	add	r3, r2
 800a522:	3b30      	subs	r3, #48	; 0x30
 800a524:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c = *sFormat;
 800a528:	e7d6      	b.n	800a4d8 <SEGGER_RTT_vprintf+0x218>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800a52a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a52e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
      do {
        if ((c == 'l') || (c == 'h')) {
 800a53a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a53e:	2b6c      	cmp	r3, #108	; 0x6c
 800a540:	d003      	beq.n	800a54a <SEGGER_RTT_vprintf+0x28a>
 800a542:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a546:	2b68      	cmp	r3, #104	; 0x68
 800a548:	d113      	bne.n	800a572 <SEGGER_RTT_vprintf+0x2b2>
          sFormat++;
 800a54a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a54e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a552:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a556:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	3201      	adds	r2, #1
 800a55e:	601a      	str	r2, [r3, #0]
          c = *sFormat;
 800a560:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a564:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
        if ((c == 'l') || (c == 'h')) {
 800a570:	e7e3      	b.n	800a53a <SEGGER_RTT_vprintf+0x27a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800a572:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a576:	2b25      	cmp	r3, #37	; 0x25
 800a578:	f000 8119 	beq.w	800a7ae <SEGGER_RTT_vprintf+0x4ee>
 800a57c:	2b25      	cmp	r3, #37	; 0x25
 800a57e:	f2c0 811d 	blt.w	800a7bc <SEGGER_RTT_vprintf+0x4fc>
 800a582:	2b78      	cmp	r3, #120	; 0x78
 800a584:	f300 811a 	bgt.w	800a7bc <SEGGER_RTT_vprintf+0x4fc>
 800a588:	2b58      	cmp	r3, #88	; 0x58
 800a58a:	f2c0 8117 	blt.w	800a7bc <SEGGER_RTT_vprintf+0x4fc>
 800a58e:	3b58      	subs	r3, #88	; 0x58
 800a590:	2b20      	cmp	r3, #32
 800a592:	f200 8113 	bhi.w	800a7bc <SEGGER_RTT_vprintf+0x4fc>
 800a596:	a201      	add	r2, pc, #4	; (adr r2, 800a59c <SEGGER_RTT_vprintf+0x2dc>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a6db 	.word	0x0800a6db
 800a5a0:	0800a7bd 	.word	0x0800a7bd
 800a5a4:	0800a7bd 	.word	0x0800a7bd
 800a5a8:	0800a7bd 	.word	0x0800a7bd
 800a5ac:	0800a7bd 	.word	0x0800a7bd
 800a5b0:	0800a7bd 	.word	0x0800a7bd
 800a5b4:	0800a7bd 	.word	0x0800a7bd
 800a5b8:	0800a7bd 	.word	0x0800a7bd
 800a5bc:	0800a7bd 	.word	0x0800a7bd
 800a5c0:	0800a7bd 	.word	0x0800a7bd
 800a5c4:	0800a7bd 	.word	0x0800a7bd
 800a5c8:	0800a621 	.word	0x0800a621
 800a5cc:	0800a65b 	.word	0x0800a65b
 800a5d0:	0800a7bd 	.word	0x0800a7bd
 800a5d4:	0800a7bd 	.word	0x0800a7bd
 800a5d8:	0800a7bd 	.word	0x0800a7bd
 800a5dc:	0800a7bd 	.word	0x0800a7bd
 800a5e0:	0800a7bd 	.word	0x0800a7bd
 800a5e4:	0800a7bd 	.word	0x0800a7bd
 800a5e8:	0800a7bd 	.word	0x0800a7bd
 800a5ec:	0800a7bd 	.word	0x0800a7bd
 800a5f0:	0800a7bd 	.word	0x0800a7bd
 800a5f4:	0800a7bd 	.word	0x0800a7bd
 800a5f8:	0800a7bd 	.word	0x0800a7bd
 800a5fc:	0800a775 	.word	0x0800a775
 800a600:	0800a7bd 	.word	0x0800a7bd
 800a604:	0800a7bd 	.word	0x0800a7bd
 800a608:	0800a71b 	.word	0x0800a71b
 800a60c:	0800a7bd 	.word	0x0800a7bd
 800a610:	0800a69b 	.word	0x0800a69b
 800a614:	0800a7bd 	.word	0x0800a7bd
 800a618:	0800a7bd 	.word	0x0800a7bd
 800a61c:	0800a6db 	.word	0x0800a6db
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800a620:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a624:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	1d19      	adds	r1, r3, #4
 800a62e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a632:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a636:	6812      	ldr	r2, [r2, #0]
 800a638:	6011      	str	r1, [r2, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        c0 = (char)v;
 800a640:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        _StoreChar(&BufferDesc, c0);
 800a648:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 800a64c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fca2 	bl	8009f9c <_StoreChar>
        break;
 800a658:	e0b1      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800a65a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a65e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	1d19      	adds	r1, r3, #4
 800a668:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a66c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	6011      	str	r1, [r2, #0]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a67a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800a67e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a682:	9301      	str	r3, [sp, #4]
 800a684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a68e:	220a      	movs	r2, #10
 800a690:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800a694:	f7ff fd6c 	bl	800a170 <_PrintInt>
        break;
 800a698:	e091      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
      case 'u':
        v = va_arg(*pParamList, int);
 800a69a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a69e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	1d19      	adds	r1, r3, #4
 800a6a8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a6ac:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	6011      	str	r1, [r2, #0]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800a6ba:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800a6be:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800a6c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6d2:	220a      	movs	r2, #10
 800a6d4:	f7ff fca0 	bl	800a018 <_PrintUnsigned>
        break;
 800a6d8:	e071      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800a6da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a6de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	1d19      	adds	r1, r3, #4
 800a6e8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a6ec:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a6f0:	6812      	ldr	r2, [r2, #0]
 800a6f2:	6011      	str	r1, [r2, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800a6fa:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800a6fe:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800a702:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a712:	2210      	movs	r2, #16
 800a714:	f7ff fc80 	bl	800a018 <_PrintUnsigned>
        break;
 800a718:	e051      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
 800a71a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a71e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	1d19      	adds	r1, r3, #4
 800a728:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a72c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a730:	6812      	ldr	r2, [r2, #0]
 800a732:	6011      	str	r1, [r2, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          do {
            c = *s;
 800a73a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
            s++;
 800a744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a748:	3301      	adds	r3, #1
 800a74a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            if (c == '\0') {
 800a74e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00c      	beq.n	800a770 <SEGGER_RTT_vprintf+0x4b0>
              break;
            }
           _StoreChar(&BufferDesc, c);
 800a756:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a75a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a75e:	4611      	mov	r1, r2
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff fc1b 	bl	8009f9c <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800a766:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	dae5      	bge.n	800a73a <SEGGER_RTT_vprintf+0x47a>
        }
        break;
 800a76e:	e026      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
              break;
 800a770:	bf00      	nop
        break;
 800a772:	e024      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
      case 'p':
        v = va_arg(*pParamList, int);
 800a774:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a778:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	1d19      	adds	r1, r3, #4
 800a782:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a786:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a78a:	6812      	ldr	r2, [r2, #0]
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800a794:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800a798:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800a79c:	2300      	movs	r3, #0
 800a79e:	9301      	str	r3, [sp, #4]
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	2308      	movs	r3, #8
 800a7a6:	2210      	movs	r2, #16
 800a7a8:	f7ff fc36 	bl	800a018 <_PrintUnsigned>
        break;
 800a7ac:	e007      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800a7ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7b2:	2125      	movs	r1, #37	; 0x25
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fbf1 	bl	8009f9c <_StoreChar>
        break;
 800a7ba:	e000      	b.n	800a7be <SEGGER_RTT_vprintf+0x4fe>
      default:
        break;
 800a7bc:	bf00      	nop
      }
      sFormat++;
 800a7be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a7c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a7c6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a7ca:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a7ce:	6812      	ldr	r2, [r2, #0]
 800a7d0:	3201      	adds	r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	e007      	b.n	800a7e6 <SEGGER_RTT_vprintf+0x526>
    } else {
      _StoreChar(&BufferDesc, c);
 800a7d6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a7da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7de:	4611      	mov	r1, r2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff fbdb 	bl	8009f9c <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 800a7e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f6bf ad8f 	bge.w	800a30e <SEGGER_RTT_vprintf+0x4e>
 800a7f0:	e000      	b.n	800a7f4 <SEGGER_RTT_vprintf+0x534>
      break;
 800a7f2:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 800a7f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dd15      	ble.n	800a828 <SEGGER_RTT_vprintf+0x568>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800a7fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00a      	beq.n	800a81a <SEGGER_RTT_vprintf+0x55a>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 800a804:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800a808:	f107 0110 	add.w	r1, r7, #16
 800a80c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a810:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	f7ff fb2d 	bl	8009e74 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 800a81a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a81e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800a822:	4413      	add	r3, r2
 800a824:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  }
  return BufferDesc.ReturnValue;
 800a828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop

0800a838 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800a838:	b40e      	push	{r1, r2, r3}
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b085      	sub	sp, #20
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 800a842:	f107 0320 	add.w	r3, r7, #32
 800a846:	60bb      	str	r3, [r7, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800a848:	f107 0308 	add.w	r3, r7, #8
 800a84c:	461a      	mov	r2, r3
 800a84e:	69f9      	ldr	r1, [r7, #28]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff fd35 	bl	800a2c0 <SEGGER_RTT_vprintf>
 800a856:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return r;
 800a858:	68fb      	ldr	r3, [r7, #12]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3714      	adds	r7, #20
 800a85e:	46bd      	mov	sp, r7
 800a860:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a864:	b003      	add	sp, #12
 800a866:	4770      	bx	lr

0800a868 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a86c:	f3bf 8f4f 	dsb	sy
}
 800a870:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a872:	4b06      	ldr	r3, [pc, #24]	; (800a88c <__NVIC_SystemReset+0x24>)
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a87a:	4904      	ldr	r1, [pc, #16]	; (800a88c <__NVIC_SystemReset+0x24>)
 800a87c:	4b04      	ldr	r3, [pc, #16]	; (800a890 <__NVIC_SystemReset+0x28>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a882:	f3bf 8f4f 	dsb	sy
}
 800a886:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a888:	bf00      	nop
 800a88a:	e7fd      	b.n	800a888 <__NVIC_SystemReset+0x20>
 800a88c:	e000ed00 	.word	0xe000ed00
 800a890:	05fa0004 	.word	0x05fa0004

0800a894 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8b2:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 800a8b4:	6879      	ldr	r1, [r7, #4]
 800a8b6:	68b8      	ldr	r0, [r7, #8]
 800a8b8:	f000 f810 	bl	800a8dc <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 800a8bc:	f7fa fa5c 	bl	8004d78 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <assertFail+0x44>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 800a8cc:	f7ff ffcc 	bl	800a868 <__NVIC_SystemReset>
  }
}
 800a8d0:	bf00      	nop
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	e000edf0 	.word	0xe000edf0

0800a8dc <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <storeAssertFileData+0x38>)
 800a8e8:	4a0b      	ldr	r2, [pc, #44]	; (800a918 <storeAssertFileData+0x3c>)
 800a8ea:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 800a8ec:	4b09      	ldr	r3, [pc, #36]	; (800a914 <storeAssertFileData+0x38>)
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 800a8f2:	4b08      	ldr	r3, [pc, #32]	; (800a914 <storeAssertFileData+0x38>)
 800a8f4:	791a      	ldrb	r2, [r3, #4]
 800a8f6:	4b09      	ldr	r3, [pc, #36]	; (800a91c <storeAssertFileData+0x40>)
 800a8f8:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 800a8fa:	4a06      	ldr	r2, [pc, #24]	; (800a914 <storeAssertFileData+0x38>)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 800a900:	4a04      	ldr	r2, [pc, #16]	; (800a914 <storeAssertFileData+0x38>)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	60d3      	str	r3, [r2, #12]
}
 800a906:	bf00      	nop
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20004b78 	.word	0x20004b78
 800a918:	2f8a001f 	.word	0x2f8a001f
 800a91c:	20008cd4 	.word	0x20008cd4

0800a920 <consoleInit>:

  return true;
}

void consoleInit()
{
 800a920:	b580      	push	{r7, lr}
 800a922:	af00      	add	r7, sp, #0
  if (isInit)
 800a924:	4b12      	ldr	r3, [pc, #72]	; (800a970 <consoleInit+0x50>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11f      	bne.n	800a96c <consoleInit+0x4c>
    return;

  messageToPrint.size = 0;
 800a92c:	4b11      	ldr	r3, [pc, #68]	; (800a974 <consoleInit+0x54>)
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
  messageToPrint.header = CRTP_HEADER(CRTP_PORT_CONSOLE, 0);
 800a932:	4b10      	ldr	r3, [pc, #64]	; (800a974 <consoleInit+0x54>)
 800a934:	2200      	movs	r2, #0
 800a936:	705a      	strb	r2, [r3, #1]
  vSemaphoreCreateBinary(synch);
 800a938:	2203      	movs	r2, #3
 800a93a:	2100      	movs	r1, #0
 800a93c:	2001      	movs	r0, #1
 800a93e:	f00d fdb1 	bl	80184a4 <xQueueGenericCreate>
 800a942:	4603      	mov	r3, r0
 800a944:	4a0c      	ldr	r2, [pc, #48]	; (800a978 <consoleInit+0x58>)
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <consoleInit+0x58>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d006      	beq.n	800a95e <consoleInit+0x3e>
 800a950:	4b09      	ldr	r3, [pc, #36]	; (800a978 <consoleInit+0x58>)
 800a952:	6818      	ldr	r0, [r3, #0]
 800a954:	2300      	movs	r3, #0
 800a956:	2200      	movs	r2, #0
 800a958:	2100      	movs	r1, #0
 800a95a:	f00d fe4d 	bl	80185f8 <xQueueGenericSend>
  messageSendingIsPending = false;
 800a95e:	4b07      	ldr	r3, [pc, #28]	; (800a97c <consoleInit+0x5c>)
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]

  isInit = true;
 800a964:	4b02      	ldr	r3, [pc, #8]	; (800a970 <consoleInit+0x50>)
 800a966:	2201      	movs	r2, #1
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	e000      	b.n	800a96e <consoleInit+0x4e>
    return;
 800a96c:	bf00      	nop
}
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20008d00 	.word	0x20008d00
 800a974:	20008cd8 	.word	0x20008cd8
 800a978:	20008cfc 	.word	0x20008cfc
 800a97c:	20008cf8 	.word	0x20008cf8

0800a980 <crc32ContextInit>:
static bool crcTableInitialized = false;

// *** Public API ***

void crc32ContextInit(crc32Context_t *context)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  // Lazy static ...
  if (crcTableInitialized == false) {
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <crc32ContextInit+0x34>)
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	f083 0301 	eor.w	r3, r3, #1
 800a990:	b2db      	uxtb	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <crc32ContextInit+0x22>
    // initialize crcTable
    crcTableInit(crcTable);
 800a996:	4808      	ldr	r0, [pc, #32]	; (800a9b8 <crc32ContextInit+0x38>)
 800a998:	f000 f8af 	bl	800aafa <crcTableInit>
    crcTableInitialized = true;
 800a99c:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <crc32ContextInit+0x34>)
 800a99e:	2201      	movs	r2, #1
 800a9a0:	701a      	strb	r2, [r3, #0]
  }

  context->remainder = INITIAL_REMAINDER;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9a8:	601a      	str	r2, [r3, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20008d01 	.word	0x20008d01
 800a9b8:	20003440 	.word	0x20003440

0800a9bc <crc32Update>:

void crc32Update(crc32Context_t *context, const void* data, size_t size)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
  context->remainder = crcByByte(data, size, context->remainder, crcTable);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b05      	ldr	r3, [pc, #20]	; (800a9e4 <crc32Update+0x28>)
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	68b8      	ldr	r0, [r7, #8]
 800a9d2:	f000 f869 	bl	800aaa8 <crcByByte>
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	601a      	str	r2, [r3, #0]
}
 800a9dc:	bf00      	nop
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20003440 	.word	0x20003440

0800a9e8 <crc32Out>:

uint32_t crc32Out(const crc32Context_t *context)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  return context->remainder ^ FINAL_XOR_VALUE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	43db      	mvns	r3, r3
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <crc32CalculateBuffer>:

uint32_t crc32CalculateBuffer(const void* buffer, size_t size)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
  crc32Context_t ctx;

  crc32ContextInit(&ctx);
 800aa0c:	f107 030c 	add.w	r3, r7, #12
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff ffb5 	bl	800a980 <crc32ContextInit>
  crc32Update(&ctx, buffer, size);
 800aa16:	f107 030c 	add.w	r3, r7, #12
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	6879      	ldr	r1, [r7, #4]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff ffcc 	bl	800a9bc <crc32Update>
  return crc32Out(&ctx);
 800aa24:	f107 030c 	add.w	r3, r7, #12
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff ffdd 	bl	800a9e8 <crc32Out>
 800aa2e:	4603      	mov	r3, r0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <crcByBit>:
// *** Core calculation from Bosh ***

/* bit-wise crc calculation */
static uint32_t crcByBit(const uint8_t* message, uint32_t bytesToProcess,
             uint32_t remainder)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 800aa44:	2300      	movs	r3, #0
 800aa46:	617b      	str	r3, [r7, #20]
 800aa48:	e021      	b.n	800aa8e <crcByBit+0x56>
    {
      remainder ^= *(message+byte);
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	4413      	add	r3, r2
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4053      	eors	r3, r2
 800aa58:	607b      	str	r3, [r7, #4]

      for(uint8_t bit = 8; bit > 0; --bit)
 800aa5a:	2308      	movs	r3, #8
 800aa5c:	74fb      	strb	r3, [r7, #19]
 800aa5e:	e010      	b.n	800aa82 <crcByBit+0x4a>
        {
          /* reflect is realized by mirroring algorithm
           * LSB is first to be processed */
          if (remainder & 1)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d005      	beq.n	800aa76 <crcByBit+0x3e>
            remainder = (remainder >> 1) ^ POLYNOMIAL;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	085a      	lsrs	r2, r3, #1
 800aa6e:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <crcByBit+0x6c>)
 800aa70:	4053      	eors	r3, r2
 800aa72:	607b      	str	r3, [r7, #4]
 800aa74:	e002      	b.n	800aa7c <crcByBit+0x44>
          else
            remainder = (remainder >> 1);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	085b      	lsrs	r3, r3, #1
 800aa7a:	607b      	str	r3, [r7, #4]
      for(uint8_t bit = 8; bit > 0; --bit)
 800aa7c:	7cfb      	ldrb	r3, [r7, #19]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	74fb      	strb	r3, [r7, #19]
 800aa82:	7cfb      	ldrb	r3, [r7, #19]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1eb      	bne.n	800aa60 <crcByBit+0x28>
  for (unsigned int byte = 0; byte < bytesToProcess; ++byte)
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d3d9      	bcc.n	800aa4a <crcByBit+0x12>
        }
    }
  return remainder;
 800aa96:	687b      	ldr	r3, [r7, #4]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	371c      	adds	r7, #28
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	edb88320 	.word	0xedb88320

0800aaa8 <crcByByte>:
/* byte-wise crc calculation, requires an initialized crcTable
 * this is factor 8 faster and should be used if multiple crcs
 * have to be calculated */
static uint32_t crcByByte(const uint8_t* message, uint32_t bytesToProcess,
              uint32_t remainder, uint32_t* crcTable)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	603b      	str	r3, [r7, #0]
  uint8_t data;
  for (int byte = 0; byte < bytesToProcess; ++byte)
 800aab6:	2300      	movs	r3, #0
 800aab8:	617b      	str	r3, [r7, #20]
 800aaba:	e013      	b.n	800aae4 <crcByByte+0x3c>
    {
      data = (*(message+byte) ^ remainder);
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	4053      	eors	r3, r2
 800aaca:	74fb      	strb	r3, [r7, #19]
      remainder = *(crcTable+data) ^ (remainder >> 8);
 800aacc:	7cfb      	ldrb	r3, [r7, #19]
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	683a      	ldr	r2, [r7, #0]
 800aad2:	4413      	add	r3, r2
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	0a1b      	lsrs	r3, r3, #8
 800aada:	4053      	eors	r3, r2
 800aadc:	607b      	str	r3, [r7, #4]
  for (int byte = 0; byte < bytesToProcess; ++byte)
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	3301      	adds	r3, #1
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d8e7      	bhi.n	800aabc <crcByByte+0x14>
    }
  return remainder;
 800aaec:	687b      	ldr	r3, [r7, #4]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	371c      	adds	r7, #28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <crcTableInit>:

/* creates a lookup-table which is necessary for the crcByByte function */
static void crcTableInit(uint32_t* crcTable)
{
 800aafa:	b590      	push	{r4, r7, lr}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  uint8_t dividend = ~0;
 800ab02:	23ff      	movs	r3, #255	; 0xff
 800ab04:	73fb      	strb	r3, [r7, #15]
  /* fill the table by bit-wise calculations of checksums
   * for each possible dividend */
  do {
      *(crcTable+dividend) = crcByBit(&dividend, 1, 0);
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	18d4      	adds	r4, r2, r3
 800ab0e:	f107 030f 	add.w	r3, r7, #15
 800ab12:	2200      	movs	r2, #0
 800ab14:	2101      	movs	r1, #1
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff ff8e 	bl	800aa38 <crcByBit>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	6023      	str	r3, [r4, #0]
  } while(dividend-- > 0);
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	1e5a      	subs	r2, r3, #1
 800ab24:	b2d2      	uxtb	r2, r2
 800ab26:	73fa      	strb	r2, [r7, #15]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1ec      	bne.n	800ab06 <crcTableInit+0xc>
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd90      	pop	{r4, r7, pc}

0800ab36 <debugInit>:
 */
#include "debug.h"


void debugInit(void)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	af02      	add	r7, sp, #8
#ifdef DEBUG_PRINT_ON_SEGGER_RTT
  SEGGER_RTT_Init();
 800ab3c:	f7ff fa28 	bl	8009f90 <SEGGER_RTT_Init>
  SEGGER_RTT_ConfigUpBuffer(0, NULL, NULL, 0, SEGGER_RTT_MODE_NO_BLOCK_TRIM);
 800ab40:	2301      	movs	r3, #1
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	2300      	movs	r3, #0
 800ab46:	2200      	movs	r2, #0
 800ab48:	2100      	movs	r1, #0
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	f7ff f9b6 	bl	8009ebc <SEGGER_RTT_ConfigUpBuffer>
#endif
}
 800ab50:	bf00      	nop
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
	...

0800ab58 <uartInit>:
    return len;
}
*/


void uartInit(void) {
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af02      	add	r7, sp, #8

#ifdef CONFIG_DEBUG_PRINT_ON_UART
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 800ab5e:	2340      	movs	r3, #64	; 0x40
 800ab60:	4618      	mov	r0, r3
 800ab62:	2301      	movs	r3, #1
 800ab64:	4619      	mov	r1, r3
 800ab66:	2300      	movs	r3, #0
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <uartInit+0x2c>)
 800ab6c:	4a06      	ldr	r2, [pc, #24]	; (800ab88 <uartInit+0x30>)
 800ab6e:	f00d fc2d 	bl	80183cc <xQueueGenericCreateStatic>
 800ab72:	4603      	mov	r3, r0
 800ab74:	4a05      	ldr	r2, [pc, #20]	; (800ab8c <uartInit+0x34>)
 800ab76:	6013      	str	r3, [r2, #0]
	isInit = true;
 800ab78:	4b05      	ldr	r3, [pc, #20]	; (800ab90 <uartInit+0x38>)
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

}
 800ab7e:	bf00      	nop
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20003880 	.word	0x20003880
 800ab88:	20003840 	.word	0x20003840
 800ab8c:	20008d04 	.word	0x20008d04
 800ab90:	20008db1 	.word	0x20008db1

0800ab94 <uartDmaInit>:



void uartDmaInit(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af02      	add	r7, sp, #8


#ifdef ENABLE_UART_DMA

	  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
	  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	4b21      	ldr	r3, [pc, #132]	; (800ac24 <uartDmaInit+0x90>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	2100      	movs	r1, #0
 800aba4:	2001      	movs	r0, #1
 800aba6:	f00d fc11 	bl	80183cc <xQueueGenericCreateStatic>
 800abaa:	4603      	mov	r3, r0
 800abac:	4a1e      	ldr	r2, [pc, #120]	; (800ac28 <uartDmaInit+0x94>)
 800abae:	6013      	str	r3, [r2, #0]
	  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 800abb0:	2303      	movs	r3, #3
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4b1d      	ldr	r3, [pc, #116]	; (800ac2c <uartDmaInit+0x98>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	2100      	movs	r1, #0
 800abba:	2001      	movs	r0, #1
 800abbc:	f00d fc06 	bl	80183cc <xQueueGenericCreateStatic>
 800abc0:	4603      	mov	r3, r0
 800abc2:	4a1b      	ldr	r2, [pc, #108]	; (800ac30 <uartDmaInit+0x9c>)
 800abc4:	6013      	str	r3, [r2, #0]
	  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 800abc6:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <uartDmaInit+0x9c>)
 800abc8:	6818      	ldr	r0, [r3, #0]
 800abca:	2300      	movs	r3, #0
 800abcc:	2200      	movs	r2, #0
 800abce:	2100      	movs	r1, #0
 800abd0:	f00d fd12 	bl	80185f8 <xQueueGenericSend>
	  xSemaphoreGive(waitUntilSendDone);
 800abd4:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <uartDmaInit+0x94>)
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	2300      	movs	r3, #0
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	f00d fd0b 	bl	80185f8 <xQueueGenericSend>

	  __HAL_RCC_DMA2_CLK_ENABLE();
 800abe2:	2300      	movs	r3, #0
 800abe4:	607b      	str	r3, [r7, #4]
 800abe6:	4b13      	ldr	r3, [pc, #76]	; (800ac34 <uartDmaInit+0xa0>)
 800abe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abea:	4a12      	ldr	r2, [pc, #72]	; (800ac34 <uartDmaInit+0xa0>)
 800abec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800abf0:	6313      	str	r3, [r2, #48]	; 0x30
 800abf2:	4b10      	ldr	r3, [pc, #64]	; (800ac34 <uartDmaInit+0xa0>)
 800abf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abfa:	607b      	str	r3, [r7, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
	  HAL_DMA_Init(&hdma_usart6_tx);
 800abfe:	480e      	ldr	r0, [pc, #56]	; (800ac38 <uartDmaInit+0xa4>)
 800ac00:	f004 ff4c 	bl	800fa9c <HAL_DMA_Init>
	  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800ac04:	2200      	movs	r2, #0
 800ac06:	2105      	movs	r1, #5
 800ac08:	2045      	movs	r0, #69	; 0x45
 800ac0a:	f004 ff10 	bl	800fa2e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800ac0e:	2045      	movs	r0, #69	; 0x45
 800ac10:	f004 ff29 	bl	800fa66 <HAL_NVIC_EnableIRQ>

	  isUartDmaInitialized = true;
 800ac14:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <uartDmaInit+0xa8>)
 800ac16:	2201      	movs	r2, #1
 800ac18:	701a      	strb	r2, [r3, #0]
#endif


}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20008d60 	.word	0x20008d60
 800ac28:	20008d5c 	.word	0x20008d5c
 800ac2c:	20008d0c 	.word	0x20008d0c
 800ac30:	20008d08 	.word	0x20008d08
 800ac34:	40023800 	.word	0x40023800
 800ac38:	2000a22c 	.word	0x2000a22c
 800ac3c:	20008db0 	.word	0x20008db0

0800ac40 <eventTrigger>:
    }
    return 0;
}

void eventTrigger(const eventtrigger *event)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	e00e      	b.n	800ac6c <eventTrigger+0x2c>
        if (callbacks[i]) {
 800ac4e:	4a0b      	ldr	r2, [pc, #44]	; (800ac7c <eventTrigger+0x3c>)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d005      	beq.n	800ac66 <eventTrigger+0x26>
            callbacks[i](event);
 800ac5a:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <eventTrigger+0x3c>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
    for (int i = 0; i < eventtriggerHandler_Count; ++i) {
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dded      	ble.n	800ac4e <eventTrigger+0xe>
        }
    }
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	20008db4 	.word	0x20008db4

0800ac80 <logInit>:
static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType);

STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(logTask, LOG_TASK_STACKSIZE);

void logInit(void)
{
 800ac80:	b590      	push	{r4, r7, lr}
 800ac82:	b08b      	sub	sp, #44	; 0x2c
 800ac84:	af04      	add	r7, sp, #16
  int i;
  const char* group = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	607b      	str	r3, [r7, #4]
  int groupLength = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	613b      	str	r3, [r7, #16]

  if(isInit)
 800ac8e:	4b80      	ldr	r3, [pc, #512]	; (800ae90 <logInit+0x210>)
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f040 80f7 	bne.w	800ae86 <logInit+0x206>
    return;

  logs = &_log_start;
 800ac98:	4b7e      	ldr	r3, [pc, #504]	; (800ae94 <logInit+0x214>)
 800ac9a:	4a7f      	ldr	r2, [pc, #508]	; (800ae98 <logInit+0x218>)
 800ac9c:	601a      	str	r2, [r3, #0]
  logsLen = &_log_stop - &_log_start;
 800ac9e:	4a7f      	ldr	r2, [pc, #508]	; (800ae9c <logInit+0x21c>)
 800aca0:	4b7d      	ldr	r3, [pc, #500]	; (800ae98 <logInit+0x218>)
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	109b      	asrs	r3, r3, #2
 800aca6:	4a7e      	ldr	r2, [pc, #504]	; (800aea0 <logInit+0x220>)
 800aca8:	fb02 f303 	mul.w	r3, r2, r3
 800acac:	461a      	mov	r2, r3
 800acae:	4b7d      	ldr	r3, [pc, #500]	; (800aea4 <logInit+0x224>)
 800acb0:	601a      	str	r2, [r3, #0]

  // Calculate a hash of the toc by chaining description of each elements
  // Using the CRTP packet as temporary buffer
  logsCrc = 0;
 800acb2:	4b7d      	ldr	r3, [pc, #500]	; (800aea8 <logInit+0x228>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	601a      	str	r2, [r3, #0]
  for (int i=0; i<logsLen; i++)
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e092      	b.n	800ade4 <logInit+0x164>
  {
    int len = 5;
 800acbe:	2305      	movs	r3, #5
 800acc0:	60bb      	str	r3, [r7, #8]
 800acc2:	4b79      	ldr	r3, [pc, #484]	; (800aea8 <logInit+0x228>)
 800acc4:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[0], &logsCrc, 4);
 800acc6:	4a79      	ldr	r2, [pc, #484]	; (800aeac <logInit+0x22c>)
 800acc8:	f8c2 3002 	str.w	r3, [r2, #2]
    p.data[4] = logs[i].type;
 800accc:	4b71      	ldr	r3, [pc, #452]	; (800ae94 <logInit+0x214>)
 800acce:	6819      	ldr	r1, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4613      	mov	r3, r2
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	781a      	ldrb	r2, [r3, #0]
 800acde:	4b73      	ldr	r3, [pc, #460]	; (800aeac <logInit+0x22c>)
 800ace0:	719a      	strb	r2, [r3, #6]
    if (logs[i].type & LOG_GROUP) {
 800ace2:	4b6c      	ldr	r3, [pc, #432]	; (800ae94 <logInit+0x214>)
 800ace4:	6819      	ldr	r1, [r3, #0]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	4613      	mov	r3, r2
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	4413      	add	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	440b      	add	r3, r1
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	b25b      	sxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	da1c      	bge.n	800ad34 <logInit+0xb4>
      if (logs[i].type & LOG_START) {
 800acfa:	4b66      	ldr	r3, [pc, #408]	; (800ae94 <logInit+0x214>)
 800acfc:	6819      	ldr	r1, [r3, #0]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	4613      	mov	r3, r2
 800ad02:	005b      	lsls	r3, r3, #1
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d026      	beq.n	800ad62 <logInit+0xe2>
        group = logs[i].name;
 800ad14:	4b5f      	ldr	r3, [pc, #380]	; (800ae94 <logInit+0x214>)
 800ad16:	6819      	ldr	r1, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	440b      	add	r3, r1
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	607b      	str	r3, [r7, #4]
        groupLength = strlen(group);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7f5 fab1 	bl	8000290 <strlen>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	613b      	str	r3, [r7, #16]
 800ad32:	e016      	b.n	800ad62 <logInit+0xe2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 3 + strlen(logs[i].name) + groupLength + 2
      if (strlen(logs[i].name) + groupLength + 2 > 26) {
 800ad34:	4b57      	ldr	r3, [pc, #348]	; (800ae94 <logInit+0x214>)
 800ad36:	6819      	ldr	r1, [r3, #0]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	440b      	add	r3, r1
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7f5 faa2 	bl	8000290 <strlen>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	4413      	add	r3, r2
 800ad52:	3302      	adds	r3, #2
 800ad54:	2b1a      	cmp	r3, #26
 800ad56:	d904      	bls.n	800ad62 <logInit+0xe2>
        LOG_ERROR("'%s.%s' too long\n", group, logs[i].name);
        ASSERT_FAILED();
 800ad58:	22d1      	movs	r2, #209	; 0xd1
 800ad5a:	4955      	ldr	r1, [pc, #340]	; (800aeb0 <logInit+0x230>)
 800ad5c:	4855      	ldr	r0, [pc, #340]	; (800aeb4 <logInit+0x234>)
 800ad5e:	f7ff fd99 	bl	800a894 <assertFail>
      }
    }
    if (logs[i].name) {
 800ad62:	4b4c      	ldr	r3, [pc, #304]	; (800ae94 <logInit+0x214>)
 800ad64:	6819      	ldr	r1, [r3, #0]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	005b      	lsls	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d02a      	beq.n	800adce <logInit+0x14e>
      memcpy(&p.data[5], logs[i].name, strlen(logs[i].name));
 800ad78:	4b46      	ldr	r3, [pc, #280]	; (800ae94 <logInit+0x214>)
 800ad7a:	6819      	ldr	r1, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	005b      	lsls	r3, r3, #1
 800ad82:	4413      	add	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	440b      	add	r3, r1
 800ad88:	685c      	ldr	r4, [r3, #4]
 800ad8a:	4b42      	ldr	r3, [pc, #264]	; (800ae94 <logInit+0x214>)
 800ad8c:	6819      	ldr	r1, [r3, #0]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4613      	mov	r3, r2
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	4413      	add	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	440b      	add	r3, r1
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7f5 fa77 	bl	8000290 <strlen>
 800ada2:	4603      	mov	r3, r0
 800ada4:	461a      	mov	r2, r3
 800ada6:	4621      	mov	r1, r4
 800ada8:	4843      	ldr	r0, [pc, #268]	; (800aeb8 <logInit+0x238>)
 800adaa:	f012 fa0a 	bl	801d1c2 <memcpy>
      len += strlen(logs[i].name);
 800adae:	4b39      	ldr	r3, [pc, #228]	; (800ae94 <logInit+0x214>)
 800adb0:	6819      	ldr	r1, [r3, #0]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4613      	mov	r3, r2
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	4413      	add	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	440b      	add	r3, r1
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7f5 fa65 	bl	8000290 <strlen>
 800adc6:	4602      	mov	r2, r0
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	4413      	add	r3, r2
 800adcc:	60bb      	str	r3, [r7, #8]
    }
    logsCrc = crc32CalculateBuffer(p.data, len);
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	4619      	mov	r1, r3
 800add2:	483a      	ldr	r0, [pc, #232]	; (800aebc <logInit+0x23c>)
 800add4:	f7ff fe15 	bl	800aa02 <crc32CalculateBuffer>
 800add8:	4603      	mov	r3, r0
 800adda:	4a33      	ldr	r2, [pc, #204]	; (800aea8 <logInit+0x228>)
 800addc:	6013      	str	r3, [r2, #0]
  for (int i=0; i<logsLen; i++)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3301      	adds	r3, #1
 800ade2:	60fb      	str	r3, [r7, #12]
 800ade4:	4b2f      	ldr	r3, [pc, #188]	; (800aea4 <logInit+0x224>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	429a      	cmp	r2, r3
 800adec:	f6ff af67 	blt.w	800acbe <logInit+0x3e>
  }

  // Big lock that protects the log datastructures
  logLock = xSemaphoreCreateMutexStatic(&logLockBuffer);
 800adf0:	4933      	ldr	r1, [pc, #204]	; (800aec0 <logInit+0x240>)
 800adf2:	2001      	movs	r0, #1
 800adf4:	f00d fbe5 	bl	80185c2 <xQueueCreateMutexStatic>
 800adf8:	4603      	mov	r3, r0
 800adfa:	4a32      	ldr	r2, [pc, #200]	; (800aec4 <logInit+0x244>)
 800adfc:	6013      	str	r3, [r2, #0]

  for (i=0; i<logsLen; i++)
 800adfe:	2300      	movs	r3, #0
 800ae00:	617b      	str	r3, [r7, #20]
 800ae02:	e014      	b.n	800ae2e <logInit+0x1ae>
  {
    if(!(logs[i].type & LOG_GROUP))
 800ae04:	4b23      	ldr	r3, [pc, #140]	; (800ae94 <logInit+0x214>)
 800ae06:	6819      	ldr	r1, [r3, #0]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	4413      	add	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	440b      	add	r3, r1
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	b25b      	sxtb	r3, r3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	db05      	blt.n	800ae28 <logInit+0x1a8>
      logsCount++;
 800ae1c:	4b2a      	ldr	r3, [pc, #168]	; (800aec8 <logInit+0x248>)
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	3301      	adds	r3, #1
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	4b28      	ldr	r3, [pc, #160]	; (800aec8 <logInit+0x248>)
 800ae26:	801a      	strh	r2, [r3, #0]
  for (i=0; i<logsLen; i++)
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	4b1d      	ldr	r3, [pc, #116]	; (800aea4 <logInit+0x224>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	697a      	ldr	r2, [r7, #20]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	dbe5      	blt.n	800ae04 <logInit+0x184>
  }

  //Manually free all log blocks
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	e00c      	b.n	800ae58 <logInit+0x1d8>
    logBlocks[i].id = BLOCK_ID_FREE;
 800ae3e:	4923      	ldr	r1, [pc, #140]	; (800aecc <logInit+0x24c>)
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	4613      	mov	r3, r2
 800ae44:	011b      	lsls	r3, r3, #4
 800ae46:	1a9b      	subs	r3, r3, r2
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	440b      	add	r3, r1
 800ae4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae50:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	3301      	adds	r3, #1
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	2b0f      	cmp	r3, #15
 800ae5c:	ddef      	ble.n	800ae3e <logInit+0x1be>

  //Init data structures and set the log subsystem in a known state
  logReset();
 800ae5e:	f001 f9fd 	bl	800c25c <logReset>

  //Start the log task
  STATIC_MEM_TASK_CREATE(logTask, logTask, LOG_TASK_NAME, NULL, LOG_TASK_PRI);
 800ae62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae66:	461a      	mov	r2, r3
 800ae68:	4b19      	ldr	r3, [pc, #100]	; (800aed0 <logInit+0x250>)
 800ae6a:	9302      	str	r3, [sp, #8]
 800ae6c:	4b19      	ldr	r3, [pc, #100]	; (800aed4 <logInit+0x254>)
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	2301      	movs	r3, #1
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	2300      	movs	r3, #0
 800ae76:	4918      	ldr	r1, [pc, #96]	; (800aed8 <logInit+0x258>)
 800ae78:	4818      	ldr	r0, [pc, #96]	; (800aedc <logInit+0x25c>)
 800ae7a:	f00e f9b7 	bl	80191ec <xTaskCreateStatic>

  isInit = true;
 800ae7e:	4b04      	ldr	r3, [pc, #16]	; (800ae90 <logInit+0x210>)
 800ae80:	2201      	movs	r2, #1
 800ae82:	701a      	strb	r2, [r3, #0]
 800ae84:	e000      	b.n	800ae88 <logInit+0x208>
    return;
 800ae86:	bf00      	nop
}
 800ae88:	371c      	adds	r7, #28
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd90      	pop	{r4, r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	20008e3c 	.word	0x20008e3c
 800ae94:	20008e0c 	.word	0x20008e0c
 800ae98:	08020bc0 	.word	0x08020bc0
 800ae9c:	0802155c 	.word	0x0802155c
 800aea0:	aaaaaaab 	.word	0xaaaaaaab
 800aea4:	20008e10 	.word	0x20008e10
 800aea8:	20008e14 	.word	0x20008e14
 800aeac:	20008e1c 	.word	0x20008e1c
 800aeb0:	08023250 	.word	0x08023250
 800aeb4:	08023268 	.word	0x08023268
 800aeb8:	20008e23 	.word	0x20008e23
 800aebc:	20008e1e 	.word	0x20008e1e
 800aec0:	20008dbc 	.word	0x20008dbc
 800aec4:	20008db8 	.word	0x20008db8
 800aec8:	20008e18 	.word	0x20008e18
 800aecc:	200040d0 	.word	0x200040d0
 800aed0:	20004890 	.word	0x20004890
 800aed4:	20004490 	.word	0x20004490
 800aed8:	0802326c 	.word	0x0802326c
 800aedc:	0800aee1 	.word	0x0800aee1

0800aee0 <logTask>:
{
  return isInit;
}

void logTask(void * prm)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_LOG);
 800aee8:	2005      	movs	r0, #5
 800aeea:	f7f6 faa5 	bl	8001438 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 800aeee:	4914      	ldr	r1, [pc, #80]	; (800af40 <logTask+0x60>)
 800aef0:	2005      	movs	r0, #5
 800aef2:	f7f6 fad1 	bl	8001498 <crtpReceivePacketBlock>

		xSemaphoreTake(logLock, portMAX_DELAY);
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <logTask+0x64>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aefe:	4618      	mov	r0, r3
 800af00:	f00d fdfc 	bl	8018afc <xQueueSemaphoreTake>
		if (p.channel==TOC_CH)
 800af04:	4b0e      	ldr	r3, [pc, #56]	; (800af40 <logTask+0x60>)
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d104      	bne.n	800af1c <logTask+0x3c>
		  logTOCProcess(p.data[0]);
 800af12:	4b0b      	ldr	r3, [pc, #44]	; (800af40 <logTask+0x60>)
 800af14:	789b      	ldrb	r3, [r3, #2]
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f816 	bl	800af48 <logTOCProcess>
		if (p.channel==CONTROL_CH)
 800af1c:	4b08      	ldr	r3, [pc, #32]	; (800af40 <logTask+0x60>)
 800af1e:	785b      	ldrb	r3, [r3, #1]
 800af20:	f003 0303 	and.w	r3, r3, #3
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b01      	cmp	r3, #1
 800af28:	d101      	bne.n	800af2e <logTask+0x4e>
		  logControlProcess();
 800af2a:	f000 fa13 	bl	800b354 <logControlProcess>
		xSemaphoreGive(logLock);
 800af2e:	4b05      	ldr	r3, [pc, #20]	; (800af44 <logTask+0x64>)
 800af30:	6818      	ldr	r0, [r3, #0]
 800af32:	2300      	movs	r3, #0
 800af34:	2200      	movs	r2, #0
 800af36:	2100      	movs	r1, #0
 800af38:	f00d fb5e 	bl	80185f8 <xQueueGenericSend>
		crtpReceivePacketBlock(CRTP_PORT_LOG, &p);
 800af3c:	e7d7      	b.n	800aeee <logTask+0xe>
 800af3e:	bf00      	nop
 800af40:	20008e1c 	.word	0x20008e1c
 800af44:	20008db8 	.word	0x20008db8

0800af48 <logTOCProcess>:
	}
}

void logTOCProcess(int command)
{
 800af48:	b5b0      	push	{r4, r5, r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  int ptr = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	617b      	str	r3, [r7, #20]
  char * group = "plop";
 800af54:	4ba4      	ldr	r3, [pc, #656]	; (800b1e8 <logTOCProcess+0x2a0>)
 800af56:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 800af58:	2300      	movs	r3, #0
 800af5a:	81fb      	strh	r3, [r7, #14]
  uint16_t logId=0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	81bb      	strh	r3, [r7, #12]

  switch (command)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b03      	cmp	r3, #3
 800af64:	f200 81e3 	bhi.w	800b32e <logTOCProcess+0x3e6>
 800af68:	a201      	add	r2, pc, #4	; (adr r2, 800af70 <logTOCProcess+0x28>)
 800af6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6e:	bf00      	nop
 800af70:	0800afd9 	.word	0x0800afd9
 800af74:	0800af81 	.word	0x0800af81
 800af78:	0800b189 	.word	0x0800b189
 800af7c:	0800b147 	.word	0x0800b147
  {
  case CMD_GET_INFO: //Get info packet about the log implementation
    DEBUG_PRINT("Client uses old logging API!\n");
 800af80:	499a      	ldr	r1, [pc, #616]	; (800b1ec <logTOCProcess+0x2a4>)
 800af82:	2000      	movs	r0, #0
 800af84:	f7ff fc58 	bl	800a838 <SEGGER_RTT_printf>
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	617b      	str	r3, [r7, #20]
    group = "";
 800af8c:	4b98      	ldr	r3, [pc, #608]	; (800b1f0 <logTOCProcess+0x2a8>)
 800af8e:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 800af90:	4b98      	ldr	r3, [pc, #608]	; (800b1f4 <logTOCProcess+0x2ac>)
 800af92:	2250      	movs	r2, #80	; 0x50
 800af94:	705a      	strb	r2, [r3, #1]
    p.size=8;
 800af96:	4b97      	ldr	r3, [pc, #604]	; (800b1f4 <logTOCProcess+0x2ac>)
 800af98:	2208      	movs	r2, #8
 800af9a:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO;
 800af9c:	4b95      	ldr	r3, [pc, #596]	; (800b1f4 <logTOCProcess+0x2ac>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	709a      	strb	r2, [r3, #2]
    if (logsCount < 255) {
 800afa2:	4b95      	ldr	r3, [pc, #596]	; (800b1f8 <logTOCProcess+0x2b0>)
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	2bfe      	cmp	r3, #254	; 0xfe
 800afa8:	d805      	bhi.n	800afb6 <logTOCProcess+0x6e>
      p.data[1]=logsCount;
 800afaa:	4b93      	ldr	r3, [pc, #588]	; (800b1f8 <logTOCProcess+0x2b0>)
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	4b90      	ldr	r3, [pc, #576]	; (800b1f4 <logTOCProcess+0x2ac>)
 800afb2:	70da      	strb	r2, [r3, #3]
 800afb4:	e002      	b.n	800afbc <logTOCProcess+0x74>
    } else {
      p.data[1]=255;
 800afb6:	4b8f      	ldr	r3, [pc, #572]	; (800b1f4 <logTOCProcess+0x2ac>)
 800afb8:	22ff      	movs	r2, #255	; 0xff
 800afba:	70da      	strb	r2, [r3, #3]
 800afbc:	4b8f      	ldr	r3, [pc, #572]	; (800b1fc <logTOCProcess+0x2b4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
    }
    memcpy(&p.data[2], &logsCrc, 4);
 800afc0:	4a8c      	ldr	r2, [pc, #560]	; (800b1f4 <logTOCProcess+0x2ac>)
 800afc2:	6053      	str	r3, [r2, #4]
    p.data[6]=LOG_MAX_BLOCKS;
 800afc4:	4b8b      	ldr	r3, [pc, #556]	; (800b1f4 <logTOCProcess+0x2ac>)
 800afc6:	2210      	movs	r2, #16
 800afc8:	721a      	strb	r2, [r3, #8]
    p.data[7]=LOG_MAX_OPS;
 800afca:	4b8a      	ldr	r3, [pc, #552]	; (800b1f4 <logTOCProcess+0x2ac>)
 800afcc:	2280      	movs	r2, #128	; 0x80
 800afce:	725a      	strb	r2, [r3, #9]
    crtpSendPacketBlock(&p);
 800afd0:	4888      	ldr	r0, [pc, #544]	; (800b1f4 <logTOCProcess+0x2ac>)
 800afd2:	f7f6 fb61 	bl	8001698 <crtpSendPacketBlock>
    break;
 800afd6:	e1aa      	b.n	800b32e <logTOCProcess+0x3e6>
  case CMD_GET_ITEM:  //Get log variable
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", p.data[1]);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 800afd8:	2300      	movs	r3, #0
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e032      	b.n	800b044 <logTOCProcess+0xfc>
    {
      if (logs[ptr].type & LOG_GROUP)
 800afde:	4b88      	ldr	r3, [pc, #544]	; (800b200 <logTOCProcess+0x2b8>)
 800afe0:	6819      	ldr	r1, [r3, #0]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	4613      	mov	r3, r2
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	4413      	add	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	440b      	add	r3, r1
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da1a      	bge.n	800b02c <logTOCProcess+0xe4>
      {
        if (logs[ptr].type & LOG_START)
 800aff6:	4b82      	ldr	r3, [pc, #520]	; (800b200 <logTOCProcess+0x2b8>)
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	4613      	mov	r3, r2
 800affe:	005b      	lsls	r3, r3, #1
 800b000:	4413      	add	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	440b      	add	r3, r1
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <logTOCProcess+0xde>
          group = logs[ptr].name;
 800b010:	4b7b      	ldr	r3, [pc, #492]	; (800b200 <logTOCProcess+0x2b8>)
 800b012:	6819      	ldr	r1, [r3, #0]
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	4613      	mov	r3, r2
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	440b      	add	r3, r1
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	613b      	str	r3, [r7, #16]
 800b024:	e00b      	b.n	800b03e <logTOCProcess+0xf6>
        else
          group = "";
 800b026:	4b72      	ldr	r3, [pc, #456]	; (800b1f0 <logTOCProcess+0x2a8>)
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	e008      	b.n	800b03e <logTOCProcess+0xf6>
      }
      else                          //Ptr points a variable
      {
        if (n==p.data[1])
 800b02c:	4b71      	ldr	r3, [pc, #452]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b02e:	78db      	ldrb	r3, [r3, #3]
 800b030:	b29b      	uxth	r3, r3
 800b032:	89fa      	ldrh	r2, [r7, #14]
 800b034:	429a      	cmp	r2, r3
 800b036:	d00b      	beq.n	800b050 <logTOCProcess+0x108>
          break;
        n++;
 800b038:	89fb      	ldrh	r3, [r7, #14]
 800b03a:	3301      	adds	r3, #1
 800b03c:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	3301      	adds	r3, #1
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	4b6f      	ldr	r3, [pc, #444]	; (800b204 <logTOCProcess+0x2bc>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	dbc7      	blt.n	800afde <logTOCProcess+0x96>
 800b04e:	e000      	b.n	800b052 <logTOCProcess+0x10a>
          break;
 800b050:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 800b052:	4b6c      	ldr	r3, [pc, #432]	; (800b204 <logTOCProcess+0x2bc>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	429a      	cmp	r2, r3
 800b05a:	da67      	bge.n	800b12c <logTOCProcess+0x1e4>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 800b05c:	4b65      	ldr	r3, [pc, #404]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b05e:	2250      	movs	r2, #80	; 0x50
 800b060:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 800b062:	4b64      	ldr	r3, [pc, #400]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b064:	2200      	movs	r2, #0
 800b066:	709a      	strb	r2, [r3, #2]
      p.data[1]=n;
 800b068:	89fb      	ldrh	r3, [r7, #14]
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	4b61      	ldr	r3, [pc, #388]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b06e:	70da      	strb	r2, [r3, #3]
      p.data[2]=logGetType(ptr);
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	b29b      	uxth	r3, r3
 800b074:	4618      	mov	r0, r3
 800b076:	f001 f951 	bl	800c31c <logGetType>
 800b07a:	4603      	mov	r3, r0
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	4b5d      	ldr	r3, [pc, #372]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b080:	711a      	strb	r2, [r3, #4]
      p.size=3+2+strlen(group)+strlen(logs[ptr].name);
 800b082:	6938      	ldr	r0, [r7, #16]
 800b084:	f7f5 f904 	bl	8000290 <strlen>
 800b088:	4603      	mov	r3, r0
 800b08a:	b2dc      	uxtb	r4, r3
 800b08c:	4b5c      	ldr	r3, [pc, #368]	; (800b200 <logTOCProcess+0x2b8>)
 800b08e:	6819      	ldr	r1, [r3, #0]
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	4613      	mov	r3, r2
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f5 f8f6 	bl	8000290 <strlen>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	4423      	add	r3, r4
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	3305      	adds	r3, #5
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	4b50      	ldr	r3, [pc, #320]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b0b2:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 800b0b4:	4b4f      	ldr	r3, [pc, #316]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	2b1e      	cmp	r3, #30
 800b0ba:	d905      	bls.n	800b0c8 <logTOCProcess+0x180>
 800b0bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b0c0:	4951      	ldr	r1, [pc, #324]	; (800b208 <logTOCProcess+0x2c0>)
 800b0c2:	4852      	ldr	r0, [pc, #328]	; (800b20c <logTOCProcess+0x2c4>)
 800b0c4:	f7ff fbe6 	bl	800a894 <assertFail>
      memcpy(p.data+3, group, strlen(group)+1);
 800b0c8:	4c51      	ldr	r4, [pc, #324]	; (800b210 <logTOCProcess+0x2c8>)
 800b0ca:	6938      	ldr	r0, [r7, #16]
 800b0cc:	f7f5 f8e0 	bl	8000290 <strlen>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6939      	ldr	r1, [r7, #16]
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f012 f872 	bl	801d1c2 <memcpy>
      memcpy(p.data+3+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 800b0de:	6938      	ldr	r0, [r7, #16]
 800b0e0:	f7f5 f8d6 	bl	8000290 <strlen>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4a4a      	ldr	r2, [pc, #296]	; (800b214 <logTOCProcess+0x2cc>)
 800b0ea:	189c      	adds	r4, r3, r2
 800b0ec:	4b44      	ldr	r3, [pc, #272]	; (800b200 <logTOCProcess+0x2b8>)
 800b0ee:	6819      	ldr	r1, [r3, #0]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	4413      	add	r3, r2
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	685d      	ldr	r5, [r3, #4]
 800b0fe:	4b40      	ldr	r3, [pc, #256]	; (800b200 <logTOCProcess+0x2b8>)
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4613      	mov	r3, r2
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	440b      	add	r3, r1
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	4618      	mov	r0, r3
 800b112:	f7f5 f8bd 	bl	8000290 <strlen>
 800b116:	4603      	mov	r3, r0
 800b118:	3301      	adds	r3, #1
 800b11a:	461a      	mov	r2, r3
 800b11c:	4629      	mov	r1, r5
 800b11e:	4620      	mov	r0, r4
 800b120:	f012 f84f 	bl	801d1c2 <memcpy>
      crtpSendPacketBlock(&p);
 800b124:	4833      	ldr	r0, [pc, #204]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b126:	f7f6 fab7 	bl	8001698 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 800b12a:	e100      	b.n	800b32e <logTOCProcess+0x3e6>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 800b12c:	4b31      	ldr	r3, [pc, #196]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b12e:	2250      	movs	r2, #80	; 0x50
 800b130:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM;
 800b132:	4b30      	ldr	r3, [pc, #192]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b134:	2200      	movs	r2, #0
 800b136:	709a      	strb	r2, [r3, #2]
      p.size=1;
 800b138:	4b2e      	ldr	r3, [pc, #184]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b13a:	2201      	movs	r2, #1
 800b13c:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 800b13e:	482d      	ldr	r0, [pc, #180]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b140:	f7f6 faaa 	bl	8001698 <crtpSendPacketBlock>
    break;
 800b144:	e0f3      	b.n	800b32e <logTOCProcess+0x3e6>
  case CMD_GET_INFO_V2: //Get info packet about the log implementation
    LOG_DEBUG("Packet is TOC_GET_INFO\n");
    ptr = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	617b      	str	r3, [r7, #20]
    group = "";
 800b14a:	4b29      	ldr	r3, [pc, #164]	; (800b1f0 <logTOCProcess+0x2a8>)
 800b14c:	613b      	str	r3, [r7, #16]
    p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 800b14e:	4b29      	ldr	r3, [pc, #164]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b150:	2250      	movs	r2, #80	; 0x50
 800b152:	705a      	strb	r2, [r3, #1]
    p.size=9;
 800b154:	4b27      	ldr	r3, [pc, #156]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b156:	2209      	movs	r2, #9
 800b158:	701a      	strb	r2, [r3, #0]
    p.data[0]=CMD_GET_INFO_V2;
 800b15a:	4b26      	ldr	r3, [pc, #152]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b15c:	2203      	movs	r2, #3
 800b15e:	709a      	strb	r2, [r3, #2]
 800b160:	4b25      	ldr	r3, [pc, #148]	; (800b1f8 <logTOCProcess+0x2b0>)
 800b162:	881b      	ldrh	r3, [r3, #0]
    memcpy(&p.data[1], &logsCount, 2);
 800b164:	4a23      	ldr	r2, [pc, #140]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b166:	f8a2 3003 	strh.w	r3, [r2, #3]
 800b16a:	4b24      	ldr	r3, [pc, #144]	; (800b1fc <logTOCProcess+0x2b4>)
 800b16c:	681b      	ldr	r3, [r3, #0]
    memcpy(&p.data[3], &logsCrc, 4);
 800b16e:	4a21      	ldr	r2, [pc, #132]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b170:	f8c2 3005 	str.w	r3, [r2, #5]
    p.data[7]=LOG_MAX_BLOCKS;
 800b174:	4b1f      	ldr	r3, [pc, #124]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b176:	2210      	movs	r2, #16
 800b178:	725a      	strb	r2, [r3, #9]
    p.data[8]=LOG_MAX_OPS;
 800b17a:	4b1e      	ldr	r3, [pc, #120]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b17c:	2280      	movs	r2, #128	; 0x80
 800b17e:	729a      	strb	r2, [r3, #10]
    crtpSendPacketBlock(&p);
 800b180:	481c      	ldr	r0, [pc, #112]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b182:	f7f6 fa89 	bl	8001698 <crtpSendPacketBlock>
    break;
 800b186:	e0d2      	b.n	800b32e <logTOCProcess+0x3e6>
 800b188:	4b1a      	ldr	r3, [pc, #104]	; (800b1f4 <logTOCProcess+0x2ac>)
 800b18a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b18e:	b29b      	uxth	r3, r3
  case CMD_GET_ITEM_V2:  //Get log variable
    memcpy(&logId, &p.data[1], 2);
 800b190:	81bb      	strh	r3, [r7, #12]
    LOG_DEBUG("Packet is TOC_GET_ITEM Id: %d\n", logId);
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 800b192:	2300      	movs	r3, #0
 800b194:	617b      	str	r3, [r7, #20]
 800b196:	e049      	b.n	800b22c <logTOCProcess+0x2e4>
    {
      if (logs[ptr].type & LOG_GROUP)
 800b198:	4b19      	ldr	r3, [pc, #100]	; (800b200 <logTOCProcess+0x2b8>)
 800b19a:	6819      	ldr	r1, [r3, #0]
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	005b      	lsls	r3, r3, #1
 800b1a2:	4413      	add	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	440b      	add	r3, r1
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	b25b      	sxtb	r3, r3
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	da33      	bge.n	800b218 <logTOCProcess+0x2d0>
      {
        if (logs[ptr].type & LOG_START)
 800b1b0:	4b13      	ldr	r3, [pc, #76]	; (800b200 <logTOCProcess+0x2b8>)
 800b1b2:	6819      	ldr	r1, [r3, #0]
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	440b      	add	r3, r1
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <logTOCProcess+0x298>
          group = logs[ptr].name;
 800b1ca:	4b0d      	ldr	r3, [pc, #52]	; (800b200 <logTOCProcess+0x2b8>)
 800b1cc:	6819      	ldr	r1, [r3, #0]
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	440b      	add	r3, r1
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	e022      	b.n	800b226 <logTOCProcess+0x2de>
        else
          group = "";
 800b1e0:	4b03      	ldr	r3, [pc, #12]	; (800b1f0 <logTOCProcess+0x2a8>)
 800b1e2:	613b      	str	r3, [r7, #16]
 800b1e4:	e01f      	b.n	800b226 <logTOCProcess+0x2de>
 800b1e6:	bf00      	nop
 800b1e8:	08023270 	.word	0x08023270
 800b1ec:	08023278 	.word	0x08023278
 800b1f0:	08023268 	.word	0x08023268
 800b1f4:	20008e1c 	.word	0x20008e1c
 800b1f8:	20008e18 	.word	0x20008e18
 800b1fc:	20008e14 	.word	0x20008e14
 800b200:	20008e0c 	.word	0x20008e0c
 800b204:	20008e10 	.word	0x20008e10
 800b208:	08023250 	.word	0x08023250
 800b20c:	08023298 	.word	0x08023298
 800b210:	20008e21 	.word	0x20008e21
 800b214:	20008e1e 	.word	0x20008e1e
      }
      else                          //Ptr points a variable
      {
        if (n==logId)
 800b218:	89bb      	ldrh	r3, [r7, #12]
 800b21a:	89fa      	ldrh	r2, [r7, #14]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d00b      	beq.n	800b238 <logTOCProcess+0x2f0>
          break;
        n++;
 800b220:	89fb      	ldrh	r3, [r7, #14]
 800b222:	3301      	adds	r3, #1
 800b224:	81fb      	strh	r3, [r7, #14]
    for (ptr=0; ptr<logsLen; ptr++) //Ptr points a group
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	3301      	adds	r3, #1
 800b22a:	617b      	str	r3, [r7, #20]
 800b22c:	4b42      	ldr	r3, [pc, #264]	; (800b338 <logTOCProcess+0x3f0>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	429a      	cmp	r2, r3
 800b234:	dbb0      	blt.n	800b198 <logTOCProcess+0x250>
 800b236:	e000      	b.n	800b23a <logTOCProcess+0x2f2>
          break;
 800b238:	bf00      	nop
      }
    }

    if (ptr<logsLen)
 800b23a:	4b3f      	ldr	r3, [pc, #252]	; (800b338 <logTOCProcess+0x3f0>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	429a      	cmp	r2, r3
 800b242:	da67      	bge.n	800b314 <logTOCProcess+0x3cc>
    {
      LOG_DEBUG("    Item is \"%s\":\"%s\"\n", group, logs[ptr].name);
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 800b244:	4b3d      	ldr	r3, [pc, #244]	; (800b33c <logTOCProcess+0x3f4>)
 800b246:	2250      	movs	r2, #80	; 0x50
 800b248:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 800b24a:	4b3c      	ldr	r3, [pc, #240]	; (800b33c <logTOCProcess+0x3f4>)
 800b24c:	2202      	movs	r2, #2
 800b24e:	709a      	strb	r2, [r3, #2]
 800b250:	89bb      	ldrh	r3, [r7, #12]
      memcpy(&p.data[1], &logId, 2);
 800b252:	4a3a      	ldr	r2, [pc, #232]	; (800b33c <logTOCProcess+0x3f4>)
 800b254:	f8a2 3003 	strh.w	r3, [r2, #3]
      p.data[3]=logGetType(ptr);
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4618      	mov	r0, r3
 800b25e:	f001 f85d 	bl	800c31c <logGetType>
 800b262:	4603      	mov	r3, r0
 800b264:	b2da      	uxtb	r2, r3
 800b266:	4b35      	ldr	r3, [pc, #212]	; (800b33c <logTOCProcess+0x3f4>)
 800b268:	715a      	strb	r2, [r3, #5]
      p.size=4+2+strlen(group)+strlen(logs[ptr].name);
 800b26a:	6938      	ldr	r0, [r7, #16]
 800b26c:	f7f5 f810 	bl	8000290 <strlen>
 800b270:	4603      	mov	r3, r0
 800b272:	b2dc      	uxtb	r4, r3
 800b274:	4b32      	ldr	r3, [pc, #200]	; (800b340 <logTOCProcess+0x3f8>)
 800b276:	6819      	ldr	r1, [r3, #0]
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	4613      	mov	r3, r2
 800b27c:	005b      	lsls	r3, r3, #1
 800b27e:	4413      	add	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	440b      	add	r3, r1
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	4618      	mov	r0, r3
 800b288:	f7f5 f802 	bl	8000290 <strlen>
 800b28c:	4603      	mov	r3, r0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	4423      	add	r3, r4
 800b292:	b2db      	uxtb	r3, r3
 800b294:	3306      	adds	r3, #6
 800b296:	b2da      	uxtb	r2, r3
 800b298:	4b28      	ldr	r3, [pc, #160]	; (800b33c <logTOCProcess+0x3f4>)
 800b29a:	701a      	strb	r2, [r3, #0]
      ASSERT(p.size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 800b29c:	4b27      	ldr	r3, [pc, #156]	; (800b33c <logTOCProcess+0x3f4>)
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	2b1e      	cmp	r3, #30
 800b2a2:	d905      	bls.n	800b2b0 <logTOCProcess+0x368>
 800b2a4:	f240 1271 	movw	r2, #369	; 0x171
 800b2a8:	4926      	ldr	r1, [pc, #152]	; (800b344 <logTOCProcess+0x3fc>)
 800b2aa:	4827      	ldr	r0, [pc, #156]	; (800b348 <logTOCProcess+0x400>)
 800b2ac:	f7ff faf2 	bl	800a894 <assertFail>
      memcpy(p.data+4, group, strlen(group)+1);
 800b2b0:	4c26      	ldr	r4, [pc, #152]	; (800b34c <logTOCProcess+0x404>)
 800b2b2:	6938      	ldr	r0, [r7, #16]
 800b2b4:	f7f4 ffec 	bl	8000290 <strlen>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	461a      	mov	r2, r3
 800b2be:	6939      	ldr	r1, [r7, #16]
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	f011 ff7e 	bl	801d1c2 <memcpy>
      memcpy(p.data+4+strlen(group)+1, logs[ptr].name, strlen(logs[ptr].name)+1);
 800b2c6:	6938      	ldr	r0, [r7, #16]
 800b2c8:	f7f4 ffe2 	bl	8000290 <strlen>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	3305      	adds	r3, #5
 800b2d0:	4a1f      	ldr	r2, [pc, #124]	; (800b350 <logTOCProcess+0x408>)
 800b2d2:	189c      	adds	r4, r3, r2
 800b2d4:	4b1a      	ldr	r3, [pc, #104]	; (800b340 <logTOCProcess+0x3f8>)
 800b2d6:	6819      	ldr	r1, [r3, #0]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	4413      	add	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	440b      	add	r3, r1
 800b2e4:	685d      	ldr	r5, [r3, #4]
 800b2e6:	4b16      	ldr	r3, [pc, #88]	; (800b340 <logTOCProcess+0x3f8>)
 800b2e8:	6819      	ldr	r1, [r3, #0]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	4413      	add	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	440b      	add	r3, r1
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7f4 ffc9 	bl	8000290 <strlen>
 800b2fe:	4603      	mov	r3, r0
 800b300:	3301      	adds	r3, #1
 800b302:	461a      	mov	r2, r3
 800b304:	4629      	mov	r1, r5
 800b306:	4620      	mov	r0, r4
 800b308:	f011 ff5b 	bl	801d1c2 <memcpy>
      crtpSendPacketBlock(&p);
 800b30c:	480b      	ldr	r0, [pc, #44]	; (800b33c <logTOCProcess+0x3f4>)
 800b30e:	f7f6 f9c3 	bl	8001698 <crtpSendPacketBlock>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
      p.data[0]=CMD_GET_ITEM_V2;
      p.size=1;
      crtpSendPacketBlock(&p);
    }
    break;
 800b312:	e00b      	b.n	800b32c <logTOCProcess+0x3e4>
      p.header=CRTP_HEADER(CRTP_PORT_LOG, TOC_CH);
 800b314:	4b09      	ldr	r3, [pc, #36]	; (800b33c <logTOCProcess+0x3f4>)
 800b316:	2250      	movs	r2, #80	; 0x50
 800b318:	705a      	strb	r2, [r3, #1]
      p.data[0]=CMD_GET_ITEM_V2;
 800b31a:	4b08      	ldr	r3, [pc, #32]	; (800b33c <logTOCProcess+0x3f4>)
 800b31c:	2202      	movs	r2, #2
 800b31e:	709a      	strb	r2, [r3, #2]
      p.size=1;
 800b320:	4b06      	ldr	r3, [pc, #24]	; (800b33c <logTOCProcess+0x3f4>)
 800b322:	2201      	movs	r2, #1
 800b324:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(&p);
 800b326:	4805      	ldr	r0, [pc, #20]	; (800b33c <logTOCProcess+0x3f4>)
 800b328:	f7f6 f9b6 	bl	8001698 <crtpSendPacketBlock>
    break;
 800b32c:	bf00      	nop
  }
}
 800b32e:	bf00      	nop
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bdb0      	pop	{r4, r5, r7, pc}
 800b336:	bf00      	nop
 800b338:	20008e10 	.word	0x20008e10
 800b33c:	20008e1c 	.word	0x20008e1c
 800b340:	20008e0c 	.word	0x20008e0c
 800b344:	08023250 	.word	0x08023250
 800b348:	08023298 	.word	0x08023298
 800b34c:	20008e22 	.word	0x20008e22
 800b350:	20008e1e 	.word	0x20008e1e

0800b354 <logControlProcess>:

void logControlProcess()
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
  int ret = ENOEXEC;
 800b35a:	2308      	movs	r3, #8
 800b35c:	607b      	str	r3, [r7, #4]

  switch(p.data[0])
 800b35e:	4b40      	ldr	r3, [pc, #256]	; (800b460 <logControlProcess+0x10c>)
 800b360:	789b      	ldrb	r3, [r3, #2]
 800b362:	2b07      	cmp	r3, #7
 800b364:	d86e      	bhi.n	800b444 <logControlProcess+0xf0>
 800b366:	a201      	add	r2, pc, #4	; (adr r2, 800b36c <logControlProcess+0x18>)
 800b368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b3a5 	.word	0x0800b3a5
 800b374:	0800b3bf 	.word	0x0800b3bf
 800b378:	0800b3cd 	.word	0x0800b3cd
 800b37c:	0800b3eb 	.word	0x0800b3eb
 800b380:	0800b3f9 	.word	0x0800b3f9
 800b384:	0800b403 	.word	0x0800b403
 800b388:	0800b423 	.word	0x0800b423
  {
    case CONTROL_CREATE_BLOCK:
      ret = logCreateBlock( p.data[1],
 800b38c:	4b34      	ldr	r3, [pc, #208]	; (800b460 <logControlProcess+0x10c>)
 800b38e:	78db      	ldrb	r3, [r3, #3]
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 800b390:	4a33      	ldr	r2, [pc, #204]	; (800b460 <logControlProcess+0x10c>)
 800b392:	7812      	ldrb	r2, [r2, #0]
 800b394:	3a02      	subs	r2, #2
 800b396:	0852      	lsrs	r2, r2, #1
      ret = logCreateBlock( p.data[1],
 800b398:	4932      	ldr	r1, [pc, #200]	; (800b464 <logControlProcess+0x110>)
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 f866 	bl	800b46c <logCreateBlock>
 800b3a0:	6078      	str	r0, [r7, #4]
      break;
 800b3a2:	e04f      	b.n	800b444 <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK:
      ret = logAppendBlock( p.data[1],
 800b3a4:	4b2e      	ldr	r3, [pc, #184]	; (800b460 <logControlProcess+0x10c>)
 800b3a6:	78db      	ldrb	r3, [r3, #3]
 800b3a8:	4618      	mov	r0, r3
                            (struct ops_setting*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting) );
 800b3aa:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <logControlProcess+0x10c>)
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	3b02      	subs	r3, #2
 800b3b0:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlock( p.data[1],
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	492b      	ldr	r1, [pc, #172]	; (800b464 <logControlProcess+0x110>)
 800b3b6:	f000 f985 	bl	800b6c4 <logAppendBlock>
 800b3ba:	6078      	str	r0, [r7, #4]
      break;
 800b3bc:	e042      	b.n	800b444 <logControlProcess+0xf0>
    case CONTROL_DELETE_BLOCK:
      ret = logDeleteBlock( p.data[1] );
 800b3be:	4b28      	ldr	r3, [pc, #160]	; (800b460 <logControlProcess+0x10c>)
 800b3c0:	78db      	ldrb	r3, [r3, #3]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 fb3a 	bl	800ba3c <logDeleteBlock>
 800b3c8:	6078      	str	r0, [r7, #4]
      break;
 800b3ca:	e03b      	b.n	800b444 <logControlProcess+0xf0>
    case CONTROL_START_BLOCK:
      ret = logStartBlock( p.data[1], p.data[2]*10);
 800b3cc:	4b24      	ldr	r3, [pc, #144]	; (800b460 <logControlProcess+0x10c>)
 800b3ce:	78db      	ldrb	r3, [r3, #3]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	4b23      	ldr	r3, [pc, #140]	; (800b460 <logControlProcess+0x10c>)
 800b3d4:	791b      	ldrb	r3, [r3, #4]
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	f000 fba9 	bl	800bb38 <logStartBlock>
 800b3e6:	6078      	str	r0, [r7, #4]
      break;
 800b3e8:	e02c      	b.n	800b444 <logControlProcess+0xf0>
    case CONTROL_STOP_BLOCK:
      ret = logStopBlock( p.data[1] );
 800b3ea:	4b1d      	ldr	r3, [pc, #116]	; (800b460 <logControlProcess+0x10c>)
 800b3ec:	78db      	ldrb	r3, [r3, #3]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 fbfe 	bl	800bbf0 <logStopBlock>
 800b3f4:	6078      	str	r0, [r7, #4]
      break;
 800b3f6:	e025      	b.n	800b444 <logControlProcess+0xf0>
    case CONTROL_RESET:
      logReset();
 800b3f8:	f000 ff30 	bl	800c25c <logReset>
      ret = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	607b      	str	r3, [r7, #4]
      break;
 800b400:	e020      	b.n	800b444 <logControlProcess+0xf0>
    case CONTROL_CREATE_BLOCK_V2:
      ret = logCreateBlockV2( p.data[1],
 800b402:	4b17      	ldr	r3, [pc, #92]	; (800b460 <logControlProcess+0x10c>)
 800b404:	78d8      	ldrb	r0, [r3, #3]
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 800b406:	4b16      	ldr	r3, [pc, #88]	; (800b460 <logControlProcess+0x10c>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	3b02      	subs	r3, #2
 800b40c:	461a      	mov	r2, r3
 800b40e:	4b16      	ldr	r3, [pc, #88]	; (800b468 <logControlProcess+0x114>)
 800b410:	fba3 2302 	umull	r2, r3, r3, r2
 800b414:	085b      	lsrs	r3, r3, #1
      ret = logCreateBlockV2( p.data[1],
 800b416:	461a      	mov	r2, r3
 800b418:	4912      	ldr	r1, [pc, #72]	; (800b464 <logControlProcess+0x110>)
 800b41a:	f000 f8bd 	bl	800b598 <logCreateBlockV2>
 800b41e:	6078      	str	r0, [r7, #4]
      break;
 800b420:	e010      	b.n	800b444 <logControlProcess+0xf0>
    case CONTROL_APPEND_BLOCK_V2:
      ret = logAppendBlockV2( p.data[1],
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <logControlProcess+0x10c>)
 800b424:	78db      	ldrb	r3, [r3, #3]
 800b426:	4618      	mov	r0, r3
                            (struct ops_setting_v2*)&p.data[2],
                            (p.size-2)/sizeof(struct ops_setting_v2) );
 800b428:	4b0d      	ldr	r3, [pc, #52]	; (800b460 <logControlProcess+0x10c>)
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	3b02      	subs	r3, #2
 800b42e:	461a      	mov	r2, r3
 800b430:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <logControlProcess+0x114>)
 800b432:	fba3 2302 	umull	r2, r3, r3, r2
 800b436:	085b      	lsrs	r3, r3, #1
      ret = logAppendBlockV2( p.data[1],
 800b438:	461a      	mov	r2, r3
 800b43a:	490a      	ldr	r1, [pc, #40]	; (800b464 <logControlProcess+0x110>)
 800b43c:	f000 fa16 	bl	800b86c <logAppendBlockV2>
 800b440:	6078      	str	r0, [r7, #4]
      break;
 800b442:	bf00      	nop
  }

  //Commands answer
  p.data[2] = ret;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	b2da      	uxtb	r2, r3
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <logControlProcess+0x10c>)
 800b44a:	711a      	strb	r2, [r3, #4]
  p.size = 3;
 800b44c:	4b04      	ldr	r3, [pc, #16]	; (800b460 <logControlProcess+0x10c>)
 800b44e:	2203      	movs	r2, #3
 800b450:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(&p);
 800b452:	4803      	ldr	r0, [pc, #12]	; (800b460 <logControlProcess+0x10c>)
 800b454:	f7f6 f920 	bl	8001698 <crtpSendPacketBlock>
}
 800b458:	bf00      	nop
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20008e1c 	.word	0x20008e1c
 800b464:	20008e20 	.word	0x20008e20
 800b468:	aaaaaaab 	.word	0xaaaaaaab

0800b46c <logCreateBlock>:

static int logCreateBlock(unsigned char id, struct ops_setting * settings, int len)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af02      	add	r7, sp, #8
 800b472:	4603      	mov	r3, r0
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b47a:	2300      	movs	r3, #0
 800b47c:	617b      	str	r3, [r7, #20]
 800b47e:	e00f      	b.n	800b4a0 <logCreateBlock+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 800b480:	7bf9      	ldrb	r1, [r7, #15]
 800b482:	4842      	ldr	r0, [pc, #264]	; (800b58c <logCreateBlock+0x120>)
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	4613      	mov	r3, r2
 800b488:	011b      	lsls	r3, r3, #4
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4403      	add	r3, r0
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4299      	cmp	r1, r3
 800b494:	d101      	bne.n	800b49a <logCreateBlock+0x2e>
 800b496:	2311      	movs	r3, #17
 800b498:	e074      	b.n	800b584 <logCreateBlock+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	3301      	adds	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	2b0f      	cmp	r3, #15
 800b4a4:	ddec      	ble.n	800b480 <logCreateBlock+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	617b      	str	r3, [r7, #20]
 800b4aa:	e00d      	b.n	800b4c8 <logCreateBlock+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 800b4ac:	4937      	ldr	r1, [pc, #220]	; (800b58c <logCreateBlock+0x120>)
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	011b      	lsls	r3, r3, #4
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	440b      	add	r3, r1
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4c0:	d006      	beq.n	800b4d0 <logCreateBlock+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2b0f      	cmp	r3, #15
 800b4cc:	ddee      	ble.n	800b4ac <logCreateBlock+0x40>
 800b4ce:	e000      	b.n	800b4d2 <logCreateBlock+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 800b4d0:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b10      	cmp	r3, #16
 800b4d6:	d101      	bne.n	800b4dc <logCreateBlock+0x70>
    return ENOMEM;
 800b4d8:	230c      	movs	r3, #12
 800b4da:	e053      	b.n	800b584 <logCreateBlock+0x118>

  logBlocks[i].id = id;
 800b4dc:	7bf9      	ldrb	r1, [r7, #15]
 800b4de:	482b      	ldr	r0, [pc, #172]	; (800b58c <logCreateBlock+0x120>)
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	1a9b      	subs	r3, r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4403      	add	r3, r0
 800b4ec:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	011b      	lsls	r3, r3, #4
 800b4f4:	1a9b      	subs	r3, r3, r2
 800b4f6:	009b      	lsls	r3, r3, #2
 800b4f8:	4a24      	ldr	r2, [pc, #144]	; (800b58c <logCreateBlock+0x120>)
 800b4fa:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 800b4fc:	697a      	ldr	r2, [r7, #20]
 800b4fe:	4613      	mov	r3, r2
 800b500:	011b      	lsls	r3, r3, #4
 800b502:	1a9b      	subs	r3, r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	3308      	adds	r3, #8
 800b508:	4a20      	ldr	r2, [pc, #128]	; (800b58c <logCreateBlock+0x120>)
 800b50a:	4413      	add	r3, r2
 800b50c:	9301      	str	r3, [sp, #4]
 800b50e:	4b20      	ldr	r3, [pc, #128]	; (800b590 <logCreateBlock+0x124>)
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	460b      	mov	r3, r1
 800b514:	2201      	movs	r2, #1
 800b516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b51a:	481e      	ldr	r0, [pc, #120]	; (800b594 <logCreateBlock+0x128>)
 800b51c:	f00f f9ce 	bl	801a8bc <xTimerCreateStatic>
 800b520:	4601      	mov	r1, r0
 800b522:	481a      	ldr	r0, [pc, #104]	; (800b58c <logCreateBlock+0x120>)
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	4613      	mov	r3, r2
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	1a9b      	subs	r3, r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4403      	add	r3, r0
 800b530:	3304      	adds	r3, #4
 800b532:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 800b534:	4915      	ldr	r1, [pc, #84]	; (800b58c <logCreateBlock+0x120>)
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4613      	mov	r3, r2
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	1a9b      	subs	r3, r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	440b      	add	r3, r1
 800b542:	3338      	adds	r3, #56	; 0x38
 800b544:	2200      	movs	r2, #0
 800b546:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 800b548:	4910      	ldr	r1, [pc, #64]	; (800b58c <logCreateBlock+0x120>)
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4613      	mov	r3, r2
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	1a9b      	subs	r3, r3, r2
 800b552:	009b      	lsls	r3, r3, #2
 800b554:	440b      	add	r3, r1
 800b556:	3304      	adds	r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10b      	bne.n	800b576 <logCreateBlock+0x10a>
  {
	logBlocks[i].id = BLOCK_ID_FREE;
 800b55e:	490b      	ldr	r1, [pc, #44]	; (800b58c <logCreateBlock+0x120>)
 800b560:	697a      	ldr	r2, [r7, #20]
 800b562:	4613      	mov	r3, r2
 800b564:	011b      	lsls	r3, r3, #4
 800b566:	1a9b      	subs	r3, r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	440b      	add	r3, r1
 800b56c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b570:	601a      	str	r2, [r3, #0]
	return ENOMEM;
 800b572:	230c      	movs	r3, #12
 800b574:	e006      	b.n	800b584 <logCreateBlock+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlock(id, settings, len);
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 f8a1 	bl	800b6c4 <logAppendBlock>
 800b582:	4603      	mov	r3, r0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3718      	adds	r7, #24
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	200040d0 	.word	0x200040d0
 800b590:	0800bc61 	.word	0x0800bc61
 800b594:	080232b8 	.word	0x080232b8

0800b598 <logCreateBlockV2>:

static int logCreateBlockV2(unsigned char id, struct ops_setting_v2 * settings, int len)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af02      	add	r7, sp, #8
 800b59e:	4603      	mov	r3, r0
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	73fb      	strb	r3, [r7, #15]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e00f      	b.n	800b5cc <logCreateBlockV2+0x34>
    if (id == logBlocks[i].id) return EEXIST;
 800b5ac:	7bf9      	ldrb	r1, [r7, #15]
 800b5ae:	4842      	ldr	r0, [pc, #264]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	011b      	lsls	r3, r3, #4
 800b5b6:	1a9b      	subs	r3, r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4403      	add	r3, r0
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4299      	cmp	r1, r3
 800b5c0:	d101      	bne.n	800b5c6 <logCreateBlockV2+0x2e>
 800b5c2:	2311      	movs	r3, #17
 800b5c4:	e074      	b.n	800b6b0 <logCreateBlockV2+0x118>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	617b      	str	r3, [r7, #20]
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	2b0f      	cmp	r3, #15
 800b5d0:	ddec      	ble.n	800b5ac <logCreateBlockV2+0x14>

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	e00d      	b.n	800b5f4 <logCreateBlockV2+0x5c>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 800b5d8:	4937      	ldr	r1, [pc, #220]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	011b      	lsls	r3, r3, #4
 800b5e0:	1a9b      	subs	r3, r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5ec:	d006      	beq.n	800b5fc <logCreateBlockV2+0x64>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2b0f      	cmp	r3, #15
 800b5f8:	ddee      	ble.n	800b5d8 <logCreateBlockV2+0x40>
 800b5fa:	e000      	b.n	800b5fe <logCreateBlockV2+0x66>
    if (logBlocks[i].id == BLOCK_ID_FREE) break;
 800b5fc:	bf00      	nop

  if (i == LOG_MAX_BLOCKS)
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2b10      	cmp	r3, #16
 800b602:	d101      	bne.n	800b608 <logCreateBlockV2+0x70>
    return ENOMEM;
 800b604:	230c      	movs	r3, #12
 800b606:	e053      	b.n	800b6b0 <logCreateBlockV2+0x118>

  logBlocks[i].id = id;
 800b608:	7bf9      	ldrb	r1, [r7, #15]
 800b60a:	482b      	ldr	r0, [pc, #172]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b60c:	697a      	ldr	r2, [r7, #20]
 800b60e:	4613      	mov	r3, r2
 800b610:	011b      	lsls	r3, r3, #4
 800b612:	1a9b      	subs	r3, r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4403      	add	r3, r0
 800b618:	6019      	str	r1, [r3, #0]
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
    &logBlocks[i], logBlockTimed, &logBlocks[i].timerBuffer);
 800b61a:	697a      	ldr	r2, [r7, #20]
 800b61c:	4613      	mov	r3, r2
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	1a9b      	subs	r3, r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4a24      	ldr	r2, [pc, #144]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b626:	1899      	adds	r1, r3, r2
  logBlocks[i].timer = xTimerCreateStatic("logTimer", M2T(1000), pdTRUE,
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	4613      	mov	r3, r2
 800b62c:	011b      	lsls	r3, r3, #4
 800b62e:	1a9b      	subs	r3, r3, r2
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	3308      	adds	r3, #8
 800b634:	4a20      	ldr	r2, [pc, #128]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b636:	4413      	add	r3, r2
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	4b20      	ldr	r3, [pc, #128]	; (800b6bc <logCreateBlockV2+0x124>)
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	460b      	mov	r3, r1
 800b640:	2201      	movs	r2, #1
 800b642:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b646:	481e      	ldr	r0, [pc, #120]	; (800b6c0 <logCreateBlockV2+0x128>)
 800b648:	f00f f938 	bl	801a8bc <xTimerCreateStatic>
 800b64c:	4601      	mov	r1, r0
 800b64e:	481a      	ldr	r0, [pc, #104]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	4613      	mov	r3, r2
 800b654:	011b      	lsls	r3, r3, #4
 800b656:	1a9b      	subs	r3, r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4403      	add	r3, r0
 800b65c:	3304      	adds	r3, #4
 800b65e:	6019      	str	r1, [r3, #0]
  logBlocks[i].ops = NULL;
 800b660:	4915      	ldr	r1, [pc, #84]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4613      	mov	r3, r2
 800b666:	011b      	lsls	r3, r3, #4
 800b668:	1a9b      	subs	r3, r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	440b      	add	r3, r1
 800b66e:	3338      	adds	r3, #56	; 0x38
 800b670:	2200      	movs	r2, #0
 800b672:	601a      	str	r2, [r3, #0]

  if (logBlocks[i].timer == NULL)
 800b674:	4910      	ldr	r1, [pc, #64]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4613      	mov	r3, r2
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	1a9b      	subs	r3, r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	440b      	add	r3, r1
 800b682:	3304      	adds	r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10b      	bne.n	800b6a2 <logCreateBlockV2+0x10a>
  {
  logBlocks[i].id = BLOCK_ID_FREE;
 800b68a:	490b      	ldr	r1, [pc, #44]	; (800b6b8 <logCreateBlockV2+0x120>)
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	4613      	mov	r3, r2
 800b690:	011b      	lsls	r3, r3, #4
 800b692:	1a9b      	subs	r3, r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	440b      	add	r3, r1
 800b698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b69c:	601a      	str	r2, [r3, #0]
  return ENOMEM;
 800b69e:	230c      	movs	r3, #12
 800b6a0:	e006      	b.n	800b6b0 <logCreateBlockV2+0x118>
  }

  LOG_DEBUG("Added block ID %d\n", id);

  return logAppendBlockV2(id, settings, len);
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	68b9      	ldr	r1, [r7, #8]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f000 f8df 	bl	800b86c <logAppendBlockV2>
 800b6ae:	4603      	mov	r3, r0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	200040d0 	.word	0x200040d0
 800b6bc:	0800bc61 	.word	0x0800bc61
 800b6c0:	080232b8 	.word	0x080232b8

0800b6c4 <logAppendBlock>:
static void opsFree(struct log_ops * ops);
static void blockAppendOps(struct log_block * block, struct log_ops * ops);
static int variableGetIndex(int id);

static int logAppendBlock(int id, struct ops_setting * settings, int len)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08a      	sub	sp, #40	; 0x28
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6d4:	e00d      	b.n	800b6f2 <logAppendBlock+0x2e>
    if (logBlocks[i].id == id) break;
 800b6d6:	4962      	ldr	r1, [pc, #392]	; (800b860 <logAppendBlock+0x19c>)
 800b6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6da:	4613      	mov	r3, r2
 800b6dc:	011b      	lsls	r3, r3, #4
 800b6de:	1a9b      	subs	r3, r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d006      	beq.n	800b6fa <logAppendBlock+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	2b0f      	cmp	r3, #15
 800b6f6:	ddee      	ble.n	800b6d6 <logAppendBlock+0x12>
 800b6f8:	e000      	b.n	800b6fc <logAppendBlock+0x38>
    if (logBlocks[i].id == id) break;
 800b6fa:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fe:	2b0f      	cmp	r3, #15
 800b700:	dd01      	ble.n	800b706 <logAppendBlock+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 800b702:	2302      	movs	r3, #2
 800b704:	e0a8      	b.n	800b858 <logAppendBlock+0x194>
  }

  block = &logBlocks[i];
 800b706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b708:	4613      	mov	r3, r2
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	4a53      	ldr	r2, [pc, #332]	; (800b860 <logAppendBlock+0x19c>)
 800b712:	4413      	add	r3, r2
 800b714:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 800b716:	2300      	movs	r3, #0
 800b718:	627b      	str	r3, [r7, #36]	; 0x24
 800b71a:	e097      	b.n	800b84c <logAppendBlock+0x188>
  {
    int currentLength = blockCalcLength(block);
 800b71c:	6a38      	ldr	r0, [r7, #32]
 800b71e:	f000 fd53 	bl	800c1c8 <blockCalcLength>
 800b722:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	005b      	lsls	r3, r3, #1
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	4413      	add	r3, r2
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	f003 030f 	and.w	r3, r3, #15
 800b732:	4a4c      	ldr	r2, [pc, #304]	; (800b864 <logAppendBlock+0x1a0>)
 800b734:	5cd3      	ldrb	r3, [r2, r3]
 800b736:	461a      	mov	r2, r3
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	4413      	add	r3, r2
 800b73c:	2b1a      	cmp	r3, #26
 800b73e:	dd01      	ble.n	800b744 <logAppendBlock+0x80>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 800b740:	2307      	movs	r3, #7
 800b742:	e089      	b.n	800b858 <logAppendBlock+0x194>
    }

    ops = opsMalloc();
 800b744:	f000 fd0a 	bl	800c15c <opsMalloc>
 800b748:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <logAppendBlock+0x90>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 800b750:	230c      	movs	r3, #12
 800b752:	e081      	b.n	800b858 <logAppendBlock+0x194>
    }

    if (settings[i].id != 255)  //TOC variable
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	005b      	lsls	r3, r3, #1
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	4413      	add	r3, r2
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2bff      	cmp	r3, #255	; 0xff
 800b760:	d044      	beq.n	800b7ec <logAppendBlock+0x128>
    {
      varId = variableGetIndex(settings[i].id);
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4413      	add	r3, r2
 800b76a:	785b      	ldrb	r3, [r3, #1]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fcbb 	bl	800c0e8 <variableGetIndex>
 800b772:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	2b00      	cmp	r3, #0
 800b778:	da01      	bge.n	800b77e <logAppendBlock+0xba>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 800b77a:	2302      	movs	r3, #2
 800b77c:	e06c      	b.n	800b858 <logAppendBlock+0x194>
      }

      ops->variable    = logs[varId].address;
 800b77e:	4b3a      	ldr	r3, [pc, #232]	; (800b868 <logAppendBlock+0x1a4>)
 800b780:	6819      	ldr	r1, [r3, #0]
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	4613      	mov	r3, r2
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	440b      	add	r3, r1
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	b29b      	uxth	r3, r3
 800b798:	4618      	mov	r0, r3
 800b79a:	f000 fdbf 	bl	800c31c <logGetType>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f003 030f 	and.w	r3, r3, #15
 800b7a4:	b2d9      	uxtb	r1, r3
 800b7a6:	69ba      	ldr	r2, [r7, #24]
 800b7a8:	7913      	ldrb	r3, [r2, #4]
 800b7aa:	f361 0303 	bfi	r3, r1, #0, #4
 800b7ae:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	005b      	lsls	r3, r3, #1
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	f003 030f 	and.w	r3, r3, #15
 800b7be:	b2d9      	uxtb	r1, r3
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	7913      	ldrb	r3, [r2, #4]
 800b7c4:	f361 1307 	bfi	r3, r1, #4, #4
 800b7c8:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 800b7ca:	4b27      	ldr	r3, [pc, #156]	; (800b868 <logAppendBlock+0x1a4>)
 800b7cc:	6819      	ldr	r1, [r3, #0]
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	4413      	add	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	440b      	add	r3, r1
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 fdb5 	bl	800c34c <acquisitionTypeFromLogType>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	731a      	strb	r2, [r3, #12]
 800b7ea:	e028      	b.n	800b83e <logAppendBlock+0x17a>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 800b7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	005b      	lsls	r3, r3, #1
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	441a      	add	r2, r3
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 800b7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	4413      	add	r3, r2
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	091b      	lsrs	r3, r3, #4
 800b806:	b2db      	uxtb	r3, r3
 800b808:	f003 030f 	and.w	r3, r3, #15
 800b80c:	b2d9      	uxtb	r1, r3
 800b80e:	69ba      	ldr	r2, [r7, #24]
 800b810:	7913      	ldrb	r3, [r2, #4]
 800b812:	f361 0303 	bfi	r3, r1, #0, #4
 800b816:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	005b      	lsls	r3, r3, #1
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	4413      	add	r3, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	f003 030f 	and.w	r3, r3, #15
 800b826:	b2d9      	uxtb	r1, r3
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	7913      	ldrb	r3, [r2, #4]
 800b82c:	f361 1307 	bfi	r3, r1, #4, #4
 800b830:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	2200      	movs	r2, #0
 800b836:	731a      	strb	r2, [r3, #12]
      i += 2;
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	3302      	adds	r3, #2
 800b83c:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 800b83e:	69b9      	ldr	r1, [r7, #24]
 800b840:	6a38      	ldr	r0, [r7, #32]
 800b842:	f000 fce7 	bl	800c214 <blockAppendOps>
  for (i=0; i<len; i++)
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	3301      	adds	r3, #1
 800b84a:	627b      	str	r3, [r7, #36]	; 0x24
 800b84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	f6ff af63 	blt.w	800b71c <logAppendBlock+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3728      	adds	r7, #40	; 0x28
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200040d0 	.word	0x200040d0
 800b864:	08024c90 	.word	0x08024c90
 800b868:	20008e0c 	.word	0x20008e0c

0800b86c <logAppendBlockV2>:

static int logAppendBlockV2(int id, struct ops_setting_v2 * settings, int len)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08a      	sub	sp, #40	; 0x28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  int i;
  struct log_block * block;

  LOG_DEBUG("Appending %d variable to block %d\n", len, id);

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b878:	2300      	movs	r3, #0
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
 800b87c:	e00d      	b.n	800b89a <logAppendBlockV2+0x2e>
    if (logBlocks[i].id == id) break;
 800b87e:	496c      	ldr	r1, [pc, #432]	; (800ba30 <logAppendBlockV2+0x1c4>)
 800b880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b882:	4613      	mov	r3, r2
 800b884:	011b      	lsls	r3, r3, #4
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	009b      	lsls	r3, r3, #2
 800b88a:	440b      	add	r3, r1
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	429a      	cmp	r2, r3
 800b892:	d006      	beq.n	800b8a2 <logAppendBlockV2+0x36>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	3301      	adds	r3, #1
 800b898:	627b      	str	r3, [r7, #36]	; 0x24
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	2b0f      	cmp	r3, #15
 800b89e:	ddee      	ble.n	800b87e <logAppendBlockV2+0x12>
 800b8a0:	e000      	b.n	800b8a4 <logAppendBlockV2+0x38>
    if (logBlocks[i].id == id) break;
 800b8a2:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	2b0f      	cmp	r3, #15
 800b8a8:	dd01      	ble.n	800b8ae <logAppendBlockV2+0x42>
    LOG_ERROR("Trying to append block id %d that doesn't exist.", id);
    return ENOENT;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e0bc      	b.n	800ba28 <logAppendBlockV2+0x1bc>
  }

  block = &logBlocks[i];
 800b8ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	1a9b      	subs	r3, r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4a5d      	ldr	r2, [pc, #372]	; (800ba30 <logAppendBlockV2+0x1c4>)
 800b8ba:	4413      	add	r3, r2
 800b8bc:	623b      	str	r3, [r7, #32]

  for (i=0; i<len; i++)
 800b8be:	2300      	movs	r3, #0
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c2:	e0ab      	b.n	800ba1c <logAppendBlockV2+0x1b0>
  {
    int currentLength = blockCalcLength(block);
 800b8c4:	6a38      	ldr	r0, [r7, #32]
 800b8c6:	f000 fc7f 	bl	800c1c8 <blockCalcLength>
 800b8ca:	61f8      	str	r0, [r7, #28]
    struct log_ops * ops;
    int varId;

    if ((currentLength + typeLength[settings[i].logType & LOG_TYPE_MASK])>LOG_MAX_LEN) {
 800b8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	4413      	add	r3, r2
 800b8d4:	68ba      	ldr	r2, [r7, #8]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	f003 030f 	and.w	r3, r3, #15
 800b8de:	4a55      	ldr	r2, [pc, #340]	; (800ba34 <logAppendBlockV2+0x1c8>)
 800b8e0:	5cd3      	ldrb	r3, [r2, r3]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	2b1a      	cmp	r3, #26
 800b8ea:	dd01      	ble.n	800b8f0 <logAppendBlockV2+0x84>
      LOG_ERROR("Trying to append a full block. Block id %d.\n", id);
      return E2BIG;
 800b8ec:	2307      	movs	r3, #7
 800b8ee:	e09b      	b.n	800ba28 <logAppendBlockV2+0x1bc>
    }

    ops = opsMalloc();
 800b8f0:	f000 fc34 	bl	800c15c <opsMalloc>
 800b8f4:	61b8      	str	r0, [r7, #24]

    if(!ops) {
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <logAppendBlockV2+0x94>
      LOG_ERROR("No more ops memory free!\n");
      return ENOMEM;
 800b8fc:	230c      	movs	r3, #12
 800b8fe:	e093      	b.n	800ba28 <logAppendBlockV2+0x1bc>
    }

    if (settings[i].id != 0xFFFFul)  //TOC variable
 800b900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b902:	4613      	mov	r3, r2
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	4413      	add	r3, r2
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	4413      	add	r3, r2
 800b90c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b910:	b29b      	uxth	r3, r3
 800b912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b916:	4293      	cmp	r3, r2
 800b918:	d04a      	beq.n	800b9b0 <logAppendBlockV2+0x144>
    {
      varId = variableGetIndex(settings[i].id);
 800b91a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91c:	4613      	mov	r3, r2
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	4413      	add	r3, r2
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	4413      	add	r3, r2
 800b926:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fbdb 	bl	800c0e8 <variableGetIndex>
 800b932:	6178      	str	r0, [r7, #20]

      if (varId<0) {
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	2b00      	cmp	r3, #0
 800b938:	da01      	bge.n	800b93e <logAppendBlockV2+0xd2>
        LOG_ERROR("Trying to add variable Id %d that does not exists.", settings[i].id);
        return ENOENT;
 800b93a:	2302      	movs	r3, #2
 800b93c:	e074      	b.n	800ba28 <logAppendBlockV2+0x1bc>
      }

      ops->variable    = logs[varId].address;
 800b93e:	4b3e      	ldr	r3, [pc, #248]	; (800ba38 <logAppendBlockV2+0x1cc>)
 800b940:	6819      	ldr	r1, [r3, #0]
 800b942:	697a      	ldr	r2, [r7, #20]
 800b944:	4613      	mov	r3, r2
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	4413      	add	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	440b      	add	r3, r1
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	609a      	str	r2, [r3, #8]
      ops->storageType = logGetType(varId);
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	b29b      	uxth	r3, r3
 800b958:	4618      	mov	r0, r3
 800b95a:	f000 fcdf 	bl	800c31c <logGetType>
 800b95e:	4603      	mov	r3, r0
 800b960:	f003 030f 	and.w	r3, r3, #15
 800b964:	b2d9      	uxtb	r1, r3
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	7913      	ldrb	r3, [r2, #4]
 800b96a:	f361 0303 	bfi	r3, r1, #0, #4
 800b96e:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 800b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b972:	4613      	mov	r3, r2
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	4413      	add	r3, r2
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	4413      	add	r3, r2
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	f003 030f 	and.w	r3, r3, #15
 800b982:	b2d9      	uxtb	r1, r3
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	7913      	ldrb	r3, [r2, #4]
 800b988:	f361 1307 	bfi	r3, r1, #4, #4
 800b98c:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acquisitionTypeFromLogType(logs[varId].type);
 800b98e:	4b2a      	ldr	r3, [pc, #168]	; (800ba38 <logAppendBlockV2+0x1cc>)
 800b990:	6819      	ldr	r1, [r3, #0]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	4613      	mov	r3, r2
 800b996:	005b      	lsls	r3, r3, #1
 800b998:	4413      	add	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	440b      	add	r3, r1
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 fcd3 	bl	800c34c <acquisitionTypeFromLogType>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	731a      	strb	r2, [r3, #12]
 800b9ae:	e02e      	b.n	800ba0e <logAppendBlockV2+0x1a2>

      LOG_DEBUG("Appended variable %d to block %d\n", settings[i].id, id);
    } else {                     //Memory variable
      //TODO: Check that the address is in ram
      ops->variable    = (void*)(&settings[i]+1);
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	1c5a      	adds	r2, r3, #1
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	005b      	lsls	r3, r3, #1
 800b9b8:	4413      	add	r3, r2
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	441a      	add	r2, r3
 800b9be:	69bb      	ldr	r3, [r7, #24]
 800b9c0:	609a      	str	r2, [r3, #8]
      ops->storageType = (settings[i].logType>>4) & LOG_TYPE_MASK;
 800b9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	4413      	add	r3, r2
 800b9ca:	68ba      	ldr	r2, [r7, #8]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	091b      	lsrs	r3, r3, #4
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 030f 	and.w	r3, r3, #15
 800b9d8:	b2d9      	uxtb	r1, r3
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	7913      	ldrb	r3, [r2, #4]
 800b9de:	f361 0303 	bfi	r3, r1, #0, #4
 800b9e2:	7113      	strb	r3, [r2, #4]
      ops->logType     = settings[i].logType & LOG_TYPE_MASK;
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	4413      	add	r3, r2
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	f003 030f 	and.w	r3, r3, #15
 800b9f6:	b2d9      	uxtb	r1, r3
 800b9f8:	69ba      	ldr	r2, [r7, #24]
 800b9fa:	7913      	ldrb	r3, [r2, #4]
 800b9fc:	f361 1307 	bfi	r3, r1, #4, #4
 800ba00:	7113      	strb	r3, [r2, #4]
      ops->acquisitionType = acqType_memory;
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	2200      	movs	r2, #0
 800ba06:	731a      	strb	r2, [r3, #12]
      i += 2;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0a:	3302      	adds	r3, #2
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24

      LOG_DEBUG("Appended var addr 0x%x to block %d\n", (int)ops->variable, id);
    }
    blockAppendOps(block, ops);
 800ba0e:	69b9      	ldr	r1, [r7, #24]
 800ba10:	6a38      	ldr	r0, [r7, #32]
 800ba12:	f000 fbff 	bl	800c214 <blockAppendOps>
  for (i=0; i<len; i++)
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	3301      	adds	r3, #1
 800ba1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	f6ff af4f 	blt.w	800b8c4 <logAppendBlockV2+0x58>

    LOG_DEBUG("   Now lenght %d\n", blockCalcLength(block));
  }

  return 0;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3728      	adds	r7, #40	; 0x28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	200040d0 	.word	0x200040d0
 800ba34:	08024c90 	.word	0x08024c90
 800ba38:	20008e0c 	.word	0x20008e0c

0800ba3c <logDeleteBlock>:

static int logDeleteBlock(int id)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b088      	sub	sp, #32
 800ba40:	af02      	add	r7, sp, #8
 800ba42:	6078      	str	r0, [r7, #4]
  int i;
  struct log_ops * ops;
  struct log_ops * opsNext;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800ba44:	2300      	movs	r3, #0
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	e00d      	b.n	800ba66 <logDeleteBlock+0x2a>
    if (logBlocks[i].id == id) break;
 800ba4a:	493a      	ldr	r1, [pc, #232]	; (800bb34 <logDeleteBlock+0xf8>)
 800ba4c:	697a      	ldr	r2, [r7, #20]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	011b      	lsls	r3, r3, #4
 800ba52:	1a9b      	subs	r3, r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	440b      	add	r3, r1
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d006      	beq.n	800ba6e <logDeleteBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	3301      	adds	r3, #1
 800ba64:	617b      	str	r3, [r7, #20]
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	2b0f      	cmp	r3, #15
 800ba6a:	ddee      	ble.n	800ba4a <logDeleteBlock+0xe>
 800ba6c:	e000      	b.n	800ba70 <logDeleteBlock+0x34>
    if (logBlocks[i].id == id) break;
 800ba6e:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2b0f      	cmp	r3, #15
 800ba74:	dd01      	ble.n	800ba7a <logDeleteBlock+0x3e>
    LOG_ERROR("trying to delete block id %d that doesn't exist.", id);
    return ENOENT;
 800ba76:	2302      	movs	r3, #2
 800ba78:	e057      	b.n	800bb2a <logDeleteBlock+0xee>
  }

  ops = logBlocks[i].ops;
 800ba7a:	492e      	ldr	r1, [pc, #184]	; (800bb34 <logDeleteBlock+0xf8>)
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	011b      	lsls	r3, r3, #4
 800ba82:	1a9b      	subs	r3, r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	440b      	add	r3, r1
 800ba88:	3338      	adds	r3, #56	; 0x38
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	613b      	str	r3, [r7, #16]
  while (ops)
 800ba8e:	e007      	b.n	800baa0 <logDeleteBlock+0x64>
  {
    opsNext = ops->next;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60fb      	str	r3, [r7, #12]
    opsFree(ops);
 800ba96:	6938      	ldr	r0, [r7, #16]
 800ba98:	f000 fb88 	bl	800c1ac <opsFree>
    ops = opsNext;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	613b      	str	r3, [r7, #16]
  while (ops)
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1f4      	bne.n	800ba90 <logDeleteBlock+0x54>
  }

  if (logBlocks[i].timer != 0) {
 800baa6:	4923      	ldr	r1, [pc, #140]	; (800bb34 <logDeleteBlock+0xf8>)
 800baa8:	697a      	ldr	r2, [r7, #20]
 800baaa:	4613      	mov	r3, r2
 800baac:	011b      	lsls	r3, r3, #4
 800baae:	1a9b      	subs	r3, r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	440b      	add	r3, r1
 800bab4:	3304      	adds	r3, #4
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d02b      	beq.n	800bb14 <logDeleteBlock+0xd8>
    xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 800babc:	491d      	ldr	r1, [pc, #116]	; (800bb34 <logDeleteBlock+0xf8>)
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	4613      	mov	r3, r2
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	1a9b      	subs	r3, r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	440b      	add	r3, r1
 800baca:	3304      	adds	r3, #4
 800bacc:	6818      	ldr	r0, [r3, #0]
 800bace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	2200      	movs	r2, #0
 800bad8:	2103      	movs	r1, #3
 800bada:	f00e ff63 	bl	801a9a4 <xTimerGenericCommand>
    xTimerDelete(logBlocks[i].timer, portMAX_DELAY);
 800bade:	4915      	ldr	r1, [pc, #84]	; (800bb34 <logDeleteBlock+0xf8>)
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	4613      	mov	r3, r2
 800bae4:	011b      	lsls	r3, r3, #4
 800bae6:	1a9b      	subs	r3, r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	440b      	add	r3, r1
 800baec:	3304      	adds	r3, #4
 800baee:	6818      	ldr	r0, [r3, #0]
 800baf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	2300      	movs	r3, #0
 800baf8:	2200      	movs	r2, #0
 800bafa:	2105      	movs	r1, #5
 800bafc:	f00e ff52 	bl	801a9a4 <xTimerGenericCommand>
    logBlocks[i].timer = 0;
 800bb00:	490c      	ldr	r1, [pc, #48]	; (800bb34 <logDeleteBlock+0xf8>)
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	4613      	mov	r3, r2
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	1a9b      	subs	r3, r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	3304      	adds	r3, #4
 800bb10:	2200      	movs	r2, #0
 800bb12:	601a      	str	r2, [r3, #0]
  }

  logBlocks[i].id = BLOCK_ID_FREE;
 800bb14:	4907      	ldr	r1, [pc, #28]	; (800bb34 <logDeleteBlock+0xf8>)
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	011b      	lsls	r3, r3, #4
 800bb1c:	1a9b      	subs	r3, r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	440b      	add	r3, r1
 800bb22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb26:	601a      	str	r2, [r3, #0]
  return 0;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	200040d0 	.word	0x200040d0

0800bb38 <logStartBlock>:

static int logStartBlock(int id, unsigned int period)
{
 800bb38:	b590      	push	{r4, r7, lr}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800bb42:	2300      	movs	r3, #0
 800bb44:	60fb      	str	r3, [r7, #12]
 800bb46:	e00d      	b.n	800bb64 <logStartBlock+0x2c>
    if (logBlocks[i].id == id) break;
 800bb48:	4927      	ldr	r1, [pc, #156]	; (800bbe8 <logStartBlock+0xb0>)
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	011b      	lsls	r3, r3, #4
 800bb50:	1a9b      	subs	r3, r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	440b      	add	r3, r1
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d006      	beq.n	800bb6c <logStartBlock+0x34>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3301      	adds	r3, #1
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b0f      	cmp	r3, #15
 800bb68:	ddee      	ble.n	800bb48 <logStartBlock+0x10>
 800bb6a:	e000      	b.n	800bb6e <logStartBlock+0x36>
    if (logBlocks[i].id == id) break;
 800bb6c:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2b0f      	cmp	r3, #15
 800bb72:	dd01      	ble.n	800bb78 <logStartBlock+0x40>
    LOG_ERROR("Trying to start block id %d that doesn't exist.", id);
    return ENOENT;
 800bb74:	2302      	movs	r3, #2
 800bb76:	e032      	b.n	800bbde <logStartBlock+0xa6>
  }

  LOG_DEBUG("Starting block %d with period %dms\n", id, period);

  if (period>0)
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d023      	beq.n	800bbc6 <logStartBlock+0x8e>
  {
    xTimerChangePeriod(logBlocks[i].timer, M2T(period), 100);
 800bb7e:	491a      	ldr	r1, [pc, #104]	; (800bbe8 <logStartBlock+0xb0>)
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	4613      	mov	r3, r2
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	1a9b      	subs	r3, r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	440b      	add	r3, r1
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	6818      	ldr	r0, [r3, #0]
 800bb90:	2364      	movs	r3, #100	; 0x64
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	2300      	movs	r3, #0
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	2104      	movs	r1, #4
 800bb9a:	f00e ff03 	bl	801a9a4 <xTimerGenericCommand>
    xTimerStart(logBlocks[i].timer, 100);
 800bb9e:	4912      	ldr	r1, [pc, #72]	; (800bbe8 <logStartBlock+0xb0>)
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	4613      	mov	r3, r2
 800bba4:	011b      	lsls	r3, r3, #4
 800bba6:	1a9b      	subs	r3, r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	440b      	add	r3, r1
 800bbac:	3304      	adds	r3, #4
 800bbae:	681c      	ldr	r4, [r3, #0]
 800bbb0:	f00d fe92 	bl	80198d8 <xTaskGetTickCount>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	2364      	movs	r3, #100	; 0x64
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f00e fef0 	bl	801a9a4 <xTimerGenericCommand>
 800bbc4:	e00a      	b.n	800bbdc <logStartBlock+0xa4>
  } else {
    // single-shoot run
    workerSchedule(logRunBlock, &logBlocks[i]);
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	1a9b      	subs	r3, r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4a05      	ldr	r2, [pc, #20]	; (800bbe8 <logStartBlock+0xb0>)
 800bbd2:	4413      	add	r3, r2
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4805      	ldr	r0, [pc, #20]	; (800bbec <logStartBlock+0xb4>)
 800bbd8:	f002 f8bc 	bl	800dd54 <workerSchedule>
  }

  return 0;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3714      	adds	r7, #20
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd90      	pop	{r4, r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200040d0 	.word	0x200040d0
 800bbec:	0800bcd5 	.word	0x0800bcd5

0800bbf0 <logStopBlock>:

static int logStopBlock(int id)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	6078      	str	r0, [r7, #4]
  int i;

  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	e00d      	b.n	800bc1a <logStopBlock+0x2a>
    if (logBlocks[i].id == id) break;
 800bbfe:	4917      	ldr	r1, [pc, #92]	; (800bc5c <logStopBlock+0x6c>)
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4613      	mov	r3, r2
 800bc04:	011b      	lsls	r3, r3, #4
 800bc06:	1a9b      	subs	r3, r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	440b      	add	r3, r1
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d006      	beq.n	800bc22 <logStopBlock+0x32>
  for (i=0; i<LOG_MAX_BLOCKS; i++)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3301      	adds	r3, #1
 800bc18:	60fb      	str	r3, [r7, #12]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b0f      	cmp	r3, #15
 800bc1e:	ddee      	ble.n	800bbfe <logStopBlock+0xe>
 800bc20:	e000      	b.n	800bc24 <logStopBlock+0x34>
    if (logBlocks[i].id == id) break;
 800bc22:	bf00      	nop

  if (i >= LOG_MAX_BLOCKS) {
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2b0f      	cmp	r3, #15
 800bc28:	dd01      	ble.n	800bc2e <logStopBlock+0x3e>
    LOG_ERROR("Trying to stop block id %d that doesn't exist.\n", id);
    return ENOENT;
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e011      	b.n	800bc52 <logStopBlock+0x62>
  }

  xTimerStop(logBlocks[i].timer, portMAX_DELAY);
 800bc2e:	490b      	ldr	r1, [pc, #44]	; (800bc5c <logStopBlock+0x6c>)
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	4613      	mov	r3, r2
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	1a9b      	subs	r3, r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	2300      	movs	r3, #0
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2103      	movs	r1, #3
 800bc4c:	f00e feaa 	bl	801a9a4 <xTimerGenericCommand>

  return 0;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	200040d0 	.word	0x200040d0

0800bc60 <logBlockTimed>:

/* This function is called by the timer subsystem */
void logBlockTimed(xTimerHandle timer)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  workerSchedule(logRunBlock, pvTimerGetTimerID(timer));
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f00f f99b 	bl	801afa4 <pvTimerGetTimerID>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4619      	mov	r1, r3
 800bc72:	4803      	ldr	r0, [pc, #12]	; (800bc80 <logBlockTimed+0x20>)
 800bc74:	f002 f86e 	bl	800dd54 <workerSchedule>
}
 800bc78:	bf00      	nop
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	0800bcd5 	.word	0x0800bcd5

0800bc84 <appendToPacket>:

/* Appends data to a packet if space is available; returns false on failure. */
static bool appendToPacket(CRTPPacket * pk, const void * data, size_t n) {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
  if (pk->size <= CRTP_MAX_DATA_SIZE - n)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f1c3 031e 	rsb	r3, r3, #30
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d814      	bhi.n	800bcca <appendToPacket+0x46>
  {
    memcpy(&pk->data[pk->size], data, n);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	461a      	mov	r2, r3
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	4413      	add	r3, r2
 800bcaa:	3302      	adds	r3, #2
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f011 fa86 	bl	801d1c2 <memcpy>
    pk->size += n;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	781a      	ldrb	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	701a      	strb	r2, [r3, #0]
    return true;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <appendToPacket+0x48>
  }
  else return false;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <logRunBlock>:

/* This function is usually called by the worker subsystem */
void logRunBlock(void * arg)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b094      	sub	sp, #80	; 0x50
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  struct log_block *blk = arg;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	64bb      	str	r3, [r7, #72]	; 0x48
  struct log_ops *ops = blk->ops;
 800bce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  static CRTPPacket pk;
  unsigned int timestamp;

  xSemaphoreTake(logLock, portMAX_DELAY);
 800bce6:	4b8c      	ldr	r3, [pc, #560]	; (800bf18 <logRunBlock+0x244>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f00c ff04 	bl	8018afc <xQueueSemaphoreTake>

  timestamp = ((long long)xTaskGetTickCount())/portTICK_RATE_MS;
 800bcf4:	f00d fdf0 	bl	80198d8 <xTaskGetTickCount>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	4a88      	ldr	r2, [pc, #544]	; (800bf1c <logRunBlock+0x248>)
 800bcfc:	fba2 2303 	umull	r2, r3, r2, r3
 800bd00:	099b      	lsrs	r3, r3, #6
 800bd02:	647b      	str	r3, [r7, #68]	; 0x44

  pk.header = CRTP_HEADER(CRTP_PORT_LOG, LOG_CH);
 800bd04:	4b86      	ldr	r3, [pc, #536]	; (800bf20 <logRunBlock+0x24c>)
 800bd06:	2252      	movs	r2, #82	; 0x52
 800bd08:	705a      	strb	r2, [r3, #1]
  pk.size = 4;
 800bd0a:	4b85      	ldr	r3, [pc, #532]	; (800bf20 <logRunBlock+0x24c>)
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	701a      	strb	r2, [r3, #0]
  pk.data[0] = blk->id;
 800bd10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	4b82      	ldr	r3, [pc, #520]	; (800bf20 <logRunBlock+0x24c>)
 800bd18:	709a      	strb	r2, [r3, #2]
  pk.data[1] = timestamp&0x0ff;
 800bd1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	4b80      	ldr	r3, [pc, #512]	; (800bf20 <logRunBlock+0x24c>)
 800bd20:	70da      	strb	r2, [r3, #3]
  pk.data[2] = (timestamp>>8)&0x0ff;
 800bd22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd24:	0a1b      	lsrs	r3, r3, #8
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	4b7d      	ldr	r3, [pc, #500]	; (800bf20 <logRunBlock+0x24c>)
 800bd2a:	711a      	strb	r2, [r3, #4]
  pk.data[3] = (timestamp>>16)&0x0ff;
 800bd2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd2e:	0c1b      	lsrs	r3, r3, #16
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	4b7b      	ldr	r3, [pc, #492]	; (800bf20 <logRunBlock+0x24c>)
 800bd34:	715a      	strb	r2, [r3, #5]

  while (ops)
 800bd36:	e18f      	b.n	800c058 <logRunBlock+0x384>
  {
    int valuei = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	627b      	str	r3, [r7, #36]	; 0x24
    float valuef = 0;
 800bd3c:	f04f 0300 	mov.w	r3, #0
 800bd40:	623b      	str	r3, [r7, #32]

    // FPU instructions must run on aligned data.
    // We first copy the data to an (aligned) local variable, before assigning it
    switch(ops->storageType)
 800bd42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd44:	791b      	ldrb	r3, [r3, #4]
 800bd46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	2b06      	cmp	r3, #6
 800bd50:	f200 8121 	bhi.w	800bf96 <logRunBlock+0x2c2>
 800bd54:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <logRunBlock+0x88>)
 800bd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5a:	bf00      	nop
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	0800be03 	.word	0x0800be03
 800bd64:	0800be91 	.word	0x0800be91
 800bd68:	0800bdbd 	.word	0x0800bdbd
 800bd6c:	0800be49 	.word	0x0800be49
 800bd70:	0800bed5 	.word	0x0800bed5
 800bd74:	0800bf41 	.word	0x0800bf41
    {
      case LOG_UINT8:
      {
        uint8_t v;
        if (ops->acquisitionType == acqType_function) {
 800bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7a:	7b1b      	ldrb	r3, [r3, #12]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d116      	bne.n	800bdae <logRunBlock+0xda>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 800bd80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	62bb      	str	r3, [r7, #40]	; 0x28
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt8);
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d105      	bne.n	800bd9a <logRunBlock+0xc6>
 800bd8e:	f44f 723d 	mov.w	r2, #756	; 0x2f4
 800bd92:	4964      	ldr	r1, [pc, #400]	; (800bf24 <logRunBlock+0x250>)
 800bd94:	4864      	ldr	r0, [pc, #400]	; (800bf28 <logRunBlock+0x254>)
 800bd96:	f7fe fd7d 	bl	800a894 <assertFail>
          v = logByFunction->acquireUInt8(timestamp, logByFunction->data);
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda0:	6852      	ldr	r2, [r2, #4]
 800bda2:	4611      	mov	r1, r2
 800bda4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bda6:	4798      	blx	r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	77fb      	strb	r3, [r7, #31]
 800bdac:	e003      	b.n	800bdb6 <logRunBlock+0xe2>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 800bdae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	77fb      	strb	r3, [r7, #31]
        }
        valuei = v;
 800bdb6:	7ffb      	ldrb	r3, [r7, #31]
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdba:	e0ec      	b.n	800bf96 <logRunBlock+0x2c2>
      }
      case LOG_INT8:
      {
        int8_t v;
        if (ops->acquisitionType == acqType_function) {
 800bdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbe:	7b1b      	ldrb	r3, [r3, #12]
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d116      	bne.n	800bdf2 <logRunBlock+0x11e>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 800bdc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	637b      	str	r3, [r7, #52]	; 0x34
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt8);
 800bdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d105      	bne.n	800bdde <logRunBlock+0x10a>
 800bdd2:	f240 3201 	movw	r2, #769	; 0x301
 800bdd6:	4953      	ldr	r1, [pc, #332]	; (800bf24 <logRunBlock+0x250>)
 800bdd8:	4854      	ldr	r0, [pc, #336]	; (800bf2c <logRunBlock+0x258>)
 800bdda:	f7fe fd5b 	bl	800a894 <assertFail>
          v = logByFunction->acquireInt8(timestamp, logByFunction->data);
 800bdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bde4:	6852      	ldr	r2, [r2, #4]
 800bde6:	4611      	mov	r1, r2
 800bde8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bdea:	4798      	blx	r3
 800bdec:	4603      	mov	r3, r0
 800bdee:	77bb      	strb	r3, [r7, #30]
 800bdf0:	e003      	b.n	800bdfa <logRunBlock+0x126>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 800bdf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	77bb      	strb	r3, [r7, #30]
        }
        valuei = v;
 800bdfa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800bdfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be00:	e0c9      	b.n	800bf96 <logRunBlock+0x2c2>
      }
      case LOG_UINT16:
      {
        uint16_t v;
        if (ops->acquisitionType == acqType_function) {
 800be02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be04:	7b1b      	ldrb	r3, [r3, #12]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d116      	bne.n	800be38 <logRunBlock+0x164>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 800be0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	62fb      	str	r3, [r7, #44]	; 0x2c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt16);
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d105      	bne.n	800be24 <logRunBlock+0x150>
 800be18:	f240 320e 	movw	r2, #782	; 0x30e
 800be1c:	4941      	ldr	r1, [pc, #260]	; (800bf24 <logRunBlock+0x250>)
 800be1e:	4844      	ldr	r0, [pc, #272]	; (800bf30 <logRunBlock+0x25c>)
 800be20:	f7fe fd38 	bl	800a894 <assertFail>
          v = logByFunction->acquireUInt16(timestamp, logByFunction->data);
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be2a:	6852      	ldr	r2, [r2, #4]
 800be2c:	4611      	mov	r1, r2
 800be2e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800be30:	4798      	blx	r3
 800be32:	4603      	mov	r3, r0
 800be34:	83bb      	strh	r3, [r7, #28]
 800be36:	e004      	b.n	800be42 <logRunBlock+0x16e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 800be38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	b29b      	uxth	r3, r3
 800be40:	83bb      	strh	r3, [r7, #28]
        }
        valuei = v;
 800be42:	8bbb      	ldrh	r3, [r7, #28]
 800be44:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be46:	e0a6      	b.n	800bf96 <logRunBlock+0x2c2>
      }
      case LOG_INT16:
      {
        int16_t v;
        if (ops->acquisitionType == acqType_function) {
 800be48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be4a:	7b1b      	ldrb	r3, [r3, #12]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d116      	bne.n	800be7e <logRunBlock+0x1aa>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 800be50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	63bb      	str	r3, [r7, #56]	; 0x38
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt16);
 800be56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d105      	bne.n	800be6a <logRunBlock+0x196>
 800be5e:	f240 321b 	movw	r2, #795	; 0x31b
 800be62:	4930      	ldr	r1, [pc, #192]	; (800bf24 <logRunBlock+0x250>)
 800be64:	4833      	ldr	r0, [pc, #204]	; (800bf34 <logRunBlock+0x260>)
 800be66:	f7fe fd15 	bl	800a894 <assertFail>
          v = logByFunction->acquireInt16(timestamp, logByFunction->data);
 800be6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be70:	6852      	ldr	r2, [r2, #4]
 800be72:	4611      	mov	r1, r2
 800be74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800be76:	4798      	blx	r3
 800be78:	4603      	mov	r3, r0
 800be7a:	837b      	strh	r3, [r7, #26]
 800be7c:	e004      	b.n	800be88 <logRunBlock+0x1b4>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 800be7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	b29b      	uxth	r3, r3
 800be86:	837b      	strh	r3, [r7, #26]
        }
        valuei = v;
 800be88:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800be8e:	e082      	b.n	800bf96 <logRunBlock+0x2c2>
      }
      case LOG_UINT32:
      {
        uint32_t v;
        if (ops->acquisitionType == acqType_function) {
 800be90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be92:	7b1b      	ldrb	r3, [r3, #12]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d116      	bne.n	800bec6 <logRunBlock+0x1f2>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 800be98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	633b      	str	r3, [r7, #48]	; 0x30
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireUInt32);
 800be9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d105      	bne.n	800beb2 <logRunBlock+0x1de>
 800bea6:	f44f 724a 	mov.w	r2, #808	; 0x328
 800beaa:	491e      	ldr	r1, [pc, #120]	; (800bf24 <logRunBlock+0x250>)
 800beac:	4822      	ldr	r0, [pc, #136]	; (800bf38 <logRunBlock+0x264>)
 800beae:	f7fe fcf1 	bl	800a894 <assertFail>
          v = logByFunction->acquireUInt32(timestamp, logByFunction->data);
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beb8:	6852      	ldr	r2, [r2, #4]
 800beba:	4611      	mov	r1, r2
 800bebc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bebe:	4798      	blx	r3
 800bec0:	4603      	mov	r3, r0
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	e003      	b.n	800bece <logRunBlock+0x1fa>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 800bec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	617b      	str	r3, [r7, #20]
        }
        valuei = v;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bed2:	e060      	b.n	800bf96 <logRunBlock+0x2c2>
      }
      case LOG_INT32:
      {
        int32_t v;
        if (ops->acquisitionType == acqType_function) {
 800bed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bed6:	7b1b      	ldrb	r3, [r3, #12]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d116      	bne.n	800bf0a <logRunBlock+0x236>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 800bedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	63fb      	str	r3, [r7, #60]	; 0x3c
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->acquireInt32);
 800bee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <logRunBlock+0x222>
 800beea:	f240 3235 	movw	r2, #821	; 0x335
 800beee:	490d      	ldr	r1, [pc, #52]	; (800bf24 <logRunBlock+0x250>)
 800bef0:	4812      	ldr	r0, [pc, #72]	; (800bf3c <logRunBlock+0x268>)
 800bef2:	f7fe fccf 	bl	800a894 <assertFail>
          v = logByFunction->acquireInt32(timestamp, logByFunction->data);
 800bef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800befc:	6852      	ldr	r2, [r2, #4]
 800befe:	4611      	mov	r1, r2
 800bf00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bf02:	4798      	blx	r3
 800bf04:	4603      	mov	r3, r0
 800bf06:	613b      	str	r3, [r7, #16]
 800bf08:	e003      	b.n	800bf12 <logRunBlock+0x23e>
        } else {
          memcpy(&v, ops->variable, sizeof(v));
 800bf0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	613b      	str	r3, [r7, #16]
        }
        valuei = v;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf16:	e03e      	b.n	800bf96 <logRunBlock+0x2c2>
 800bf18:	20008db8 	.word	0x20008db8
 800bf1c:	10624dd3 	.word	0x10624dd3
 800bf20:	20008e40 	.word	0x20008e40
 800bf24:	08023250 	.word	0x08023250
 800bf28:	080232c4 	.word	0x080232c4
 800bf2c:	080232e0 	.word	0x080232e0
 800bf30:	080232fc 	.word	0x080232fc
 800bf34:	0802331c 	.word	0x0802331c
 800bf38:	08023338 	.word	0x08023338
 800bf3c:	08023358 	.word	0x08023358
      }
      case LOG_FLOAT:
      {
        float v;
        if (ops->acquisitionType == acqType_function) {
 800bf40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf42:	7b1b      	ldrb	r3, [r3, #12]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d118      	bne.n	800bf7a <logRunBlock+0x2a6>
          logByFunction_t* logByFunction = (logByFunction_t*)ops->variable;
 800bf48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	643b      	str	r3, [r7, #64]	; 0x40
          ASSERT_LOG_FUNCTION_INITIALIZED(logByFunction->aquireFloat);
 800bf4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d105      	bne.n	800bf62 <logRunBlock+0x28e>
 800bf56:	f240 3242 	movw	r2, #834	; 0x342
 800bf5a:	495c      	ldr	r1, [pc, #368]	; (800c0cc <logRunBlock+0x3f8>)
 800bf5c:	485c      	ldr	r0, [pc, #368]	; (800c0d0 <logRunBlock+0x3fc>)
 800bf5e:	f7fe fc99 	bl	800a894 <assertFail>
          v = logByFunction->aquireFloat(timestamp, logByFunction->data);
 800bf62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf68:	6852      	ldr	r2, [r2, #4]
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bf6e:	4798      	blx	r3
 800bf70:	eef0 7a40 	vmov.f32	s15, s0
 800bf74:	edc7 7a03 	vstr	s15, [r7, #12]
 800bf78:	e003      	b.n	800bf82 <logRunBlock+0x2ae>
        } else {
          memcpy(&v, ops->variable, sizeof(valuef));
 800bf7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60fb      	str	r3, [r7, #12]
        }
        valuei = v;
 800bf82:	edd7 7a03 	vldr	s15, [r7, #12]
 800bf86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf8a:	ee17 3a90 	vmov	r3, s15
 800bf8e:	627b      	str	r3, [r7, #36]	; 0x24
        valuef = v;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	623b      	str	r3, [r7, #32]
        break;
 800bf94:	bf00      	nop
      }
    }

    if (ops->logType == LOG_FLOAT || ops->logType == LOG_FP16)
 800bf96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf98:	791b      	ldrb	r3, [r3, #4]
 800bf9a:	f023 030f 	bic.w	r3, r3, #15
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b70      	cmp	r3, #112	; 0x70
 800bfa2:	d006      	beq.n	800bfb2 <logRunBlock+0x2de>
 800bfa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfa6:	791b      	ldrb	r3, [r3, #4]
 800bfa8:	f023 030f 	bic.w	r3, r3, #15
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b80      	cmp	r3, #128	; 0x80
 800bfb0:	d138      	bne.n	800c024 <logRunBlock+0x350>
    {
      if (ops->storageType != LOG_FLOAT)
 800bfb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfb4:	791b      	ldrb	r3, [r3, #4]
 800bfb6:	f003 030f 	and.w	r3, r3, #15
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b07      	cmp	r3, #7
 800bfbe:	d006      	beq.n	800bfce <logRunBlock+0x2fa>
      {
        valuef = valuei;
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfca:	edc7 7a08 	vstr	s15, [r7, #32]
      }

      // Try to append the next item to the packet.  If we run out of space,
      // drop this and subsequent items.
      if (ops->logType == LOG_FLOAT)
 800bfce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd0:	791b      	ldrb	r3, [r3, #4]
 800bfd2:	f023 030f 	bic.w	r3, r3, #15
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b70      	cmp	r3, #112	; 0x70
 800bfda:	d10d      	bne.n	800bff8 <logRunBlock+0x324>
      {
        if (!appendToPacket(&pk, &valuef, 4)) break;
 800bfdc:	f107 0320 	add.w	r3, r7, #32
 800bfe0:	2204      	movs	r2, #4
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	483b      	ldr	r0, [pc, #236]	; (800c0d4 <logRunBlock+0x400>)
 800bfe6:	f7ff fe4d 	bl	800bc84 <appendToPacket>
 800bfea:	4603      	mov	r3, r0
 800bfec:	f083 0301 	eor.w	r3, r3, #1
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d02c      	beq.n	800c050 <logRunBlock+0x37c>
 800bff6:	e035      	b.n	800c064 <logRunBlock+0x390>
      }
      else
      {
        valuei = single2half(valuef);
 800bff8:	edd7 7a08 	vldr	s15, [r7, #32]
 800bffc:	eeb0 0a67 	vmov.f32	s0, s15
 800c000:	f000 f9b7 	bl	800c372 <single2half>
 800c004:	4603      	mov	r3, r0
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
        if (!appendToPacket(&pk, &valuei, 2)) break;
 800c008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c00c:	2202      	movs	r2, #2
 800c00e:	4619      	mov	r1, r3
 800c010:	4830      	ldr	r0, [pc, #192]	; (800c0d4 <logRunBlock+0x400>)
 800c012:	f7ff fe37 	bl	800bc84 <appendToPacket>
 800c016:	4603      	mov	r3, r0
 800c018:	f083 0301 	eor.w	r3, r3, #1
 800c01c:	b2db      	uxtb	r3, r3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d016      	beq.n	800c050 <logRunBlock+0x37c>
 800c022:	e01f      	b.n	800c064 <logRunBlock+0x390>
      }
    }
    else  //logType is an integer
    {
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 800c024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c026:	791b      	ldrb	r3, [r3, #4]
 800c028:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	461a      	mov	r2, r3
 800c030:	4b29      	ldr	r3, [pc, #164]	; (800c0d8 <logRunBlock+0x404>)
 800c032:	5c9b      	ldrb	r3, [r3, r2]
 800c034:	461a      	mov	r2, r3
 800c036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c03a:	4619      	mov	r1, r3
 800c03c:	4825      	ldr	r0, [pc, #148]	; (800c0d4 <logRunBlock+0x400>)
 800c03e:	f7ff fe21 	bl	800bc84 <appendToPacket>
 800c042:	4603      	mov	r3, r0
 800c044:	f083 0301 	eor.w	r3, r3, #1
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <logRunBlock+0x38e>
 800c04e:	e000      	b.n	800c052 <logRunBlock+0x37e>
      if (ops->logType == LOG_FLOAT)
 800c050:	bf00      	nop
    }

    ops = ops->next;
 800c052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (ops)
 800c058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	f47f ae6c 	bne.w	800bd38 <logRunBlock+0x64>
 800c060:	e000      	b.n	800c064 <logRunBlock+0x390>
      if (!appendToPacket(&pk, &valuei, typeLength[ops->logType])) break;
 800c062:	bf00      	nop
  }

  xSemaphoreGive(logLock);
 800c064:	4b1d      	ldr	r3, [pc, #116]	; (800c0dc <logRunBlock+0x408>)
 800c066:	6818      	ldr	r0, [r3, #0]
 800c068:	2300      	movs	r3, #0
 800c06a:	2200      	movs	r2, #0
 800c06c:	2100      	movs	r1, #0
 800c06e:	f00c fac3 	bl	80185f8 <xQueueGenericSend>

  // Check if the connection is still up, oherwise disable
  // all the logging and flush all the CRTP queues.
  if (!crtpIsConnected())
 800c072:	f7f5 fb53 	bl	800171c <crtpIsConnected>
 800c076:	4603      	mov	r3, r0
 800c078:	f083 0301 	eor.w	r3, r3, #1
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <logRunBlock+0x3b8>
  {
    logReset();
 800c082:	f000 f8eb 	bl	800c25c <logReset>
    crtpReset();
 800c086:	f7f5 fb31 	bl	80016ec <crtpReset>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
                    blk->droppedPackets);
      }
    }
  }
}
 800c08a:	e01b      	b.n	800c0c4 <logRunBlock+0x3f0>
    if (!crtpSendPacket(&pk))
 800c08c:	4811      	ldr	r0, [pc, #68]	; (800c0d4 <logRunBlock+0x400>)
 800c08e:	f7f5 fad9 	bl	8001644 <crtpSendPacket>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d115      	bne.n	800c0c4 <logRunBlock+0x3f0>
      if (blk->droppedPackets++ % 100 == 0)
 800c098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c09a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c09c:	1c51      	adds	r1, r2, #1
 800c09e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0a0:	6359      	str	r1, [r3, #52]	; 0x34
 800c0a2:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <logRunBlock+0x40c>)
 800c0a4:	fba3 1302 	umull	r1, r3, r3, r2
 800c0a8:	095b      	lsrs	r3, r3, #5
 800c0aa:	2164      	movs	r1, #100	; 0x64
 800c0ac:	fb01 f303 	mul.w	r3, r1, r3
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <logRunBlock+0x3f0>
        DEBUG_PRINT("WARNING: LOG packets drop detected (%lu packets lost)\n",
 800c0b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4909      	ldr	r1, [pc, #36]	; (800c0e4 <logRunBlock+0x410>)
 800c0be:	2000      	movs	r0, #0
 800c0c0:	f7fe fbba 	bl	800a838 <SEGGER_RTT_printf>
}
 800c0c4:	bf00      	nop
 800c0c6:	3750      	adds	r7, #80	; 0x50
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	08023250 	.word	0x08023250
 800c0d0:	08023374 	.word	0x08023374
 800c0d4:	20008e40 	.word	0x20008e40
 800c0d8:	08024c90 	.word	0x08024c90
 800c0dc:	20008db8 	.word	0x20008db8
 800c0e0:	51eb851f 	.word	0x51eb851f
 800c0e4:	08023390 	.word	0x08023390

0800c0e8 <variableGetIndex>:

static int variableGetIndex(int id)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  int i;
  int n=0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60bb      	str	r3, [r7, #8]

  for (i=0; i<logsLen; i++)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	e015      	b.n	800c126 <variableGetIndex+0x3e>
  {
    if(!(logs[i].type & LOG_GROUP))
 800c0fa:	4b16      	ldr	r3, [pc, #88]	; (800c154 <variableGetIndex+0x6c>)
 800c0fc:	6819      	ldr	r1, [r3, #0]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	4613      	mov	r3, r2
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	4413      	add	r3, r2
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	440b      	add	r3, r1
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b25b      	sxtb	r3, r3
 800c10e:	2b00      	cmp	r3, #0
 800c110:	db06      	blt.n	800c120 <variableGetIndex+0x38>
    {
      if(n==id)
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	429a      	cmp	r2, r3
 800c118:	d00b      	beq.n	800c132 <variableGetIndex+0x4a>
        break;
      n++;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	3301      	adds	r3, #1
 800c11e:	60bb      	str	r3, [r7, #8]
  for (i=0; i<logsLen; i++)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <variableGetIndex+0x70>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	dbe4      	blt.n	800c0fa <variableGetIndex+0x12>
 800c130:	e000      	b.n	800c134 <variableGetIndex+0x4c>
        break;
 800c132:	bf00      	nop
    }
  }

  if (i>=logsLen)
 800c134:	4b08      	ldr	r3, [pc, #32]	; (800c158 <variableGetIndex+0x70>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	db02      	blt.n	800c144 <variableGetIndex+0x5c>
    return -1;
 800c13e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c142:	e000      	b.n	800c146 <variableGetIndex+0x5e>

  return i;
 800c144:	68fb      	ldr	r3, [r7, #12]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	20008e0c 	.word	0x20008e0c
 800c158:	20008e10 	.word	0x20008e10

0800c15c <opsMalloc>:

static struct log_ops * opsMalloc()
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
  int i;

  for (i=0;i<LOG_MAX_OPS; i++)
 800c162:	2300      	movs	r3, #0
 800c164:	607b      	str	r3, [r7, #4]
 800c166:	e00a      	b.n	800c17e <opsMalloc+0x22>
      if (logOps[i].variable == NULL) break;
 800c168:	4a0f      	ldr	r2, [pc, #60]	; (800c1a8 <opsMalloc+0x4c>)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	4413      	add	r3, r2
 800c170:	3308      	adds	r3, #8
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <opsMalloc+0x2a>
  for (i=0;i<LOG_MAX_OPS; i++)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	3301      	adds	r3, #1
 800c17c:	607b      	str	r3, [r7, #4]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b7f      	cmp	r3, #127	; 0x7f
 800c182:	ddf1      	ble.n	800c168 <opsMalloc+0xc>
 800c184:	e000      	b.n	800c188 <opsMalloc+0x2c>
      if (logOps[i].variable == NULL) break;
 800c186:	bf00      	nop

  if (i >= LOG_MAX_OPS)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b7f      	cmp	r3, #127	; 0x7f
 800c18c:	dd01      	ble.n	800c192 <opsMalloc+0x36>
      return NULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	e003      	b.n	800c19a <opsMalloc+0x3e>

  return &logOps[i];
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	011b      	lsls	r3, r3, #4
 800c196:	4a04      	ldr	r2, [pc, #16]	; (800c1a8 <opsMalloc+0x4c>)
 800c198:	4413      	add	r3, r2
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	370c      	adds	r7, #12
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	200038d0 	.word	0x200038d0

0800c1ac <opsFree>:

static void opsFree(struct log_ops * ops)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  ops->variable = NULL;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	609a      	str	r2, [r3, #8]
}
 800c1ba:	bf00      	nop
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <blockCalcLength>:

static int blockCalcLength(struct log_block * block)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  struct log_ops * ops;
  int len = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	60bb      	str	r3, [r7, #8]

  for (ops = block->ops; ops; ops = ops->next)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d8:	60fb      	str	r3, [r7, #12]
 800c1da:	e00e      	b.n	800c1fa <blockCalcLength+0x32>
    len += typeLength[ops->logType];
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	791b      	ldrb	r3, [r3, #4]
 800c1e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	4b09      	ldr	r3, [pc, #36]	; (800c210 <blockCalcLength+0x48>)
 800c1ea:	5c9b      	ldrb	r3, [r3, r2]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	60bb      	str	r3, [r7, #8]
  for (ops = block->ops; ops; ops = ops->next)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	60fb      	str	r3, [r7, #12]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1ed      	bne.n	800c1dc <blockCalcLength+0x14>

  return len;
 800c200:	68bb      	ldr	r3, [r7, #8]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	08024c90 	.word	0x08024c90

0800c214 <blockAppendOps>:

void blockAppendOps(struct log_block * block, struct log_ops * ops)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  struct log_ops * o;

  ops->next = NULL;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2200      	movs	r2, #0
 800c222:	601a      	str	r2, [r3, #0]

  if (block->ops == NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d103      	bne.n	800c234 <blockAppendOps+0x20>
    block->ops = ops;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	639a      	str	r2, [r3, #56]	; 0x38
  {
    for (o = block->ops; o->next; o = o->next);

    o->next = ops;
  }
}
 800c232:	e00d      	b.n	800c250 <blockAppendOps+0x3c>
    for (o = block->ops; o->next; o = o->next);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	e002      	b.n	800c242 <blockAppendOps+0x2e>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1f8      	bne.n	800c23c <blockAppendOps+0x28>
    o->next = ops;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	683a      	ldr	r2, [r7, #0]
 800c24e:	601a      	str	r2, [r3, #0]
}
 800c250:	bf00      	nop
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <logReset>:

static void logReset(void)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
  int i;

  if (isInit)
 800c262:	4b2b      	ldr	r3, [pc, #172]	; (800c310 <logReset+0xb4>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d029      	beq.n	800c2be <logReset+0x62>
  {
    //Stop and delete all started log blocks
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 800c26a:	2300      	movs	r3, #0
 800c26c:	607b      	str	r3, [r7, #4]
 800c26e:	e023      	b.n	800c2b8 <logReset+0x5c>
      if (logBlocks[i].id != -1)
 800c270:	4928      	ldr	r1, [pc, #160]	; (800c314 <logReset+0xb8>)
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	4613      	mov	r3, r2
 800c276:	011b      	lsls	r3, r3, #4
 800c278:	1a9b      	subs	r3, r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	440b      	add	r3, r1
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c284:	d015      	beq.n	800c2b2 <logReset+0x56>
      {
        logStopBlock(logBlocks[i].id);
 800c286:	4923      	ldr	r1, [pc, #140]	; (800c314 <logReset+0xb8>)
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	4613      	mov	r3, r2
 800c28c:	011b      	lsls	r3, r3, #4
 800c28e:	1a9b      	subs	r3, r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	440b      	add	r3, r1
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff fcaa 	bl	800bbf0 <logStopBlock>
        logDeleteBlock(logBlocks[i].id);
 800c29c:	491d      	ldr	r1, [pc, #116]	; (800c314 <logReset+0xb8>)
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	011b      	lsls	r3, r3, #4
 800c2a4:	1a9b      	subs	r3, r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	440b      	add	r3, r1
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fbc5 	bl	800ba3c <logDeleteBlock>
    for(i=0; i<LOG_MAX_BLOCKS; i++)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	607b      	str	r3, [r7, #4]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b0f      	cmp	r3, #15
 800c2bc:	ddd8      	ble.n	800c270 <logReset+0x14>
      }
  }

  //Force free all the log block objects
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 800c2be:	2300      	movs	r3, #0
 800c2c0:	607b      	str	r3, [r7, #4]
 800c2c2:	e00c      	b.n	800c2de <logReset+0x82>
    logBlocks[i].id = BLOCK_ID_FREE;
 800c2c4:	4913      	ldr	r1, [pc, #76]	; (800c314 <logReset+0xb8>)
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	1a9b      	subs	r3, r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	440b      	add	r3, r1
 800c2d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2d6:	601a      	str	r2, [r3, #0]
  for(i=0; i<LOG_MAX_BLOCKS; i++)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	607b      	str	r3, [r7, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b0f      	cmp	r3, #15
 800c2e2:	ddef      	ble.n	800c2c4 <logReset+0x68>

  //Force free the log ops
  for (i=0; i<LOG_MAX_OPS; i++)
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	607b      	str	r3, [r7, #4]
 800c2e8:	e009      	b.n	800c2fe <logReset+0xa2>
    logOps[i].variable = NULL;
 800c2ea:	4a0b      	ldr	r2, [pc, #44]	; (800c318 <logReset+0xbc>)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	011b      	lsls	r3, r3, #4
 800c2f0:	4413      	add	r3, r2
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]
  for (i=0; i<LOG_MAX_OPS; i++)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	607b      	str	r3, [r7, #4]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b7f      	cmp	r3, #127	; 0x7f
 800c302:	ddf2      	ble.n	800c2ea <logReset+0x8e>
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	20008e3c 	.word	0x20008e3c
 800c314:	200040d0 	.word	0x200040d0
 800c318:	200038d0 	.word	0x200038d0

0800c31c <logGetType>:

  return invalidVarId;
}

inline int logGetType(logVarId_t varid)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	80fb      	strh	r3, [r7, #6]
  return logs[varid].type & LOG_TYPE_MASK;
 800c326:	4b08      	ldr	r3, [pc, #32]	; (800c348 <logGetType+0x2c>)
 800c328:	6819      	ldr	r1, [r3, #0]
 800c32a:	88fa      	ldrh	r2, [r7, #6]
 800c32c:	4613      	mov	r3, r2
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	440b      	add	r3, r1
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	f003 030f 	and.w	r3, r3, #15
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	20008e0c 	.word	0x20008e0c

0800c34c <acquisitionTypeFromLogType>:
unsigned int logGetUint(logVarId_t varid)
{
  return (unsigned int)logGetInt(varid);
}

static acquisitionType_t acquisitionTypeFromLogType(uint8_t logType) {
 800c34c:	b480      	push	{r7}
 800c34e:	b083      	sub	sp, #12
 800c350:	af00      	add	r7, sp, #0
 800c352:	4603      	mov	r3, r0
 800c354:	71fb      	strb	r3, [r7, #7]
  if (logType & LOG_BY_FUNCTION) {
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <acquisitionTypeFromLogType+0x18>
    return acqType_function;
 800c360:	2301      	movs	r3, #1
 800c362:	e000      	b.n	800c366 <acquisitionTypeFromLogType+0x1a>
  }

  return acqType_memory;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <single2half>:
 *  * Rounding seems to give at least 11 bits precision
 *  * Faster and smaller than the GCC implementation
 */

uint16_t single2half(float number)
{
 800c372:	b480      	push	{r7}
 800c374:	b087      	sub	sp, #28
 800c376:	af00      	add	r7, sp, #0
 800c378:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t num = *((uint32_t*)&number);
 800c37c:	1d3b      	adds	r3, r7, #4
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	617b      	str	r3, [r7, #20]
    uint32_t s = num>>31;
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	0fdb      	lsrs	r3, r3, #31
 800c386:	613b      	str	r3, [r7, #16]
    uint32_t e = (num>>23)&0x0FF;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	0ddb      	lsrs	r3, r3, #23
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	60fb      	str	r3, [r7, #12]

    if ((e==255) && (num&0x007fffff))
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2bff      	cmp	r3, #255	; 0xff
 800c394:	d107      	bne.n	800c3a6 <single2half+0x34>
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <single2half+0x34>
        return 0x7E00; // NaN
 800c3a0:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 800c3a4:	e02c      	b.n	800c400 <single2half+0x8e>
    if (e>(127+15))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2b8e      	cmp	r3, #142	; 0x8e
 800c3aa:	d908      	bls.n	800c3be <single2half+0x4c>
        return s?0xFC00:0x7C00;  //+/- inf
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <single2half+0x46>
 800c3b2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800c3b6:	e023      	b.n	800c400 <single2half+0x8e>
 800c3b8:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800c3bc:	e020      	b.n	800c400 <single2half+0x8e>
    if (e<(127-15))
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2b6f      	cmp	r3, #111	; 0x6f
 800c3c2:	d801      	bhi.n	800c3c8 <single2half+0x56>
        return 0; //Do not handle generating subnormalised representation
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	e01b      	b.n	800c400 <single2half+0x8e>

    return (s<<15) | ((e-127+15)<<10) | (((num>>13)&0x3FF)+((num>>12)&0x01));
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	03db      	lsls	r3, r3, #15
 800c3ce:	b29a      	uxth	r2, r3
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	3b70      	subs	r3, #112	; 0x70
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	029b      	lsls	r3, r3, #10
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	0b5b      	lsrs	r3, r3, #13
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3ea:	b299      	uxth	r1, r3
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	0b1b      	lsrs	r3, r3, #12
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	440b      	add	r3, r1
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	b29b      	uxth	r3, r3
}
 800c400:	4618      	mov	r0, r3
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <paramGetDefault>:
extern int _stext;
extern int _etext;
static const uint64_t dummyZero64 = 0;

static void * paramGetDefault(int index)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b087      	sub	sp, #28
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  uint32_t valueRelative;
  uint32_t address;
  void *ptrDefaultValue;

  address = (uint32_t)(params[index].address);
 800c414:	4b17      	ldr	r3, [pc, #92]	; (800c474 <paramGetDefault+0x68>)
 800c416:	6819      	ldr	r1, [r3, #0]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	4613      	mov	r3, r2
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	4413      	add	r3, r2
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	440b      	add	r3, r1
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	613b      	str	r3, [r7, #16]

  // Is variable in data section?
  if (address >= (uint32_t)&_sdata &&
 800c428:	4a13      	ldr	r2, [pc, #76]	; (800c478 <paramGetDefault+0x6c>)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d30c      	bcc.n	800c44a <paramGetDefault+0x3e>
      address <= (uint32_t)&_edata)
 800c430:	4a12      	ldr	r2, [pc, #72]	; (800c47c <paramGetDefault+0x70>)
  if (address >= (uint32_t)&_sdata &&
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	4293      	cmp	r3, r2
 800c436:	d808      	bhi.n	800c44a <paramGetDefault+0x3e>
  {
    valueRelative =  address - (uint32_t)&_sdata;
 800c438:	4a0f      	ldr	r2, [pc, #60]	; (800c478 <paramGetDefault+0x6c>)
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	1a9b      	subs	r3, r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
    ptrDefaultValue = (void *)((uint32_t)&_sidata + valueRelative);
 800c440:	4a0f      	ldr	r2, [pc, #60]	; (800c480 <paramGetDefault+0x74>)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	617b      	str	r3, [r7, #20]
 800c448:	e00c      	b.n	800c464 <paramGetDefault+0x58>
  }
  // Is variable in flash section?
  else if (address >= (uint32_t)&_stext &&
 800c44a:	4a0e      	ldr	r2, [pc, #56]	; (800c484 <paramGetDefault+0x78>)
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	4293      	cmp	r3, r2
 800c450:	d306      	bcc.n	800c460 <paramGetDefault+0x54>
           address <= (uint32_t)&_etext)
 800c452:	4a0d      	ldr	r2, [pc, #52]	; (800c488 <paramGetDefault+0x7c>)
  else if (address >= (uint32_t)&_stext &&
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	4293      	cmp	r3, r2
 800c458:	d802      	bhi.n	800c460 <paramGetDefault+0x54>
  {
    ptrDefaultValue = (void *)(address);
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	617b      	str	r3, [r7, #20]
 800c45e:	e001      	b.n	800c464 <paramGetDefault+0x58>
  }
  // It is zero
  else
  {
    ptrDefaultValue = (void *)&dummyZero64;
 800c460:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <paramGetDefault+0x80>)
 800c462:	617b      	str	r3, [r7, #20]
  }

  return ptrDefaultValue;
 800c464:	697b      	ldr	r3, [r7, #20]
}
 800c466:	4618      	mov	r0, r3
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	20008e60 	.word	0x20008e60
 800c478:	20000000 	.word	0x20000000
 800c47c:	20000f0c 	.word	0x20000f0c
 800c480:	0802542c 	.word	0x0802542c
 800c484:	08000190 	.word	0x08000190
 800c488:	0802164c 	.word	0x0802164c
 800c48c:	08024ca0 	.word	0x08024ca0

0800c490 <paramSet>:
 * @param data  The variable data
 *
 * @return number of bytes set
 **/
static int paramSet(uint16_t index, void *data)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	6039      	str	r1, [r7, #0]
 800c49a:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 800c4a0:	4b1b      	ldr	r3, [pc, #108]	; (800c510 <paramSet+0x80>)
 800c4a2:	6819      	ldr	r1, [r3, #0]
 800c4a4:	88fa      	ldrh	r2, [r7, #6]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4413      	add	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	440b      	add	r3, r1
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d816      	bhi.n	800c4e8 <paramSet+0x58>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <paramSet+0x30>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c4d1 	.word	0x0800c4d1
 800c4c4:	0800c4d7 	.word	0x0800c4d7
 800c4c8:	0800c4dd 	.word	0x0800c4dd
 800c4cc:	0800c4e3 	.word	0x0800c4e3
  {
    case PARAM_1BYTE:
      paramLength = 1;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	60fb      	str	r3, [r7, #12]
      break;
 800c4d4:	e008      	b.n	800c4e8 <paramSet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	60fb      	str	r3, [r7, #12]
      break;
 800c4da:	e005      	b.n	800c4e8 <paramSet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 800c4dc:	2304      	movs	r3, #4
 800c4de:	60fb      	str	r3, [r7, #12]
      break;
 800c4e0:	e002      	b.n	800c4e8 <paramSet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 800c4e2:	2308      	movs	r3, #8
 800c4e4:	60fb      	str	r3, [r7, #12]
      break;
 800c4e6:	bf00      	nop
  }

 	memcpy(params[index].address, data, paramLength);
 800c4e8:	4b09      	ldr	r3, [pc, #36]	; (800c510 <paramSet+0x80>)
 800c4ea:	6819      	ldr	r1, [r3, #0]
 800c4ec:	88fa      	ldrh	r2, [r7, #6]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	440b      	add	r3, r1
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f010 fe5f 	bl	801d1c2 <memcpy>

  return paramLength;
 800c504:	68fb      	ldr	r3, [r7, #12]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20008e60 	.word	0x20008e60

0800c514 <paramGet>:
 * @param data  The variable data
 *
 * @return number of bytes read
 **/
static int paramGet(uint16_t index, void *data)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	6039      	str	r1, [r7, #0]
 800c51e:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 800c524:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <paramGet+0x80>)
 800c526:	6819      	ldr	r1, [r3, #0]
 800c528:	88fa      	ldrh	r2, [r7, #6]
 800c52a:	4613      	mov	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	4413      	add	r3, r2
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	440b      	add	r3, r1
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	f003 0303 	and.w	r3, r3, #3
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d816      	bhi.n	800c56c <paramGet+0x58>
 800c53e:	a201      	add	r2, pc, #4	; (adr r2, 800c544 <paramGet+0x30>)
 800c540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c544:	0800c555 	.word	0x0800c555
 800c548:	0800c55b 	.word	0x0800c55b
 800c54c:	0800c561 	.word	0x0800c561
 800c550:	0800c567 	.word	0x0800c567
  {
    case PARAM_1BYTE:
      paramLength = 1;
 800c554:	2301      	movs	r3, #1
 800c556:	60fb      	str	r3, [r7, #12]
      break;
 800c558:	e008      	b.n	800c56c <paramGet+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 800c55a:	2302      	movs	r3, #2
 800c55c:	60fb      	str	r3, [r7, #12]
      break;
 800c55e:	e005      	b.n	800c56c <paramGet+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 800c560:	2304      	movs	r3, #4
 800c562:	60fb      	str	r3, [r7, #12]
      break;
 800c564:	e002      	b.n	800c56c <paramGet+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 800c566:	2308      	movs	r3, #8
 800c568:	60fb      	str	r3, [r7, #12]
      break;
 800c56a:	bf00      	nop
  }

 	memcpy(data, params[index].address, paramLength);
 800c56c:	4b09      	ldr	r3, [pc, #36]	; (800c594 <paramGet+0x80>)
 800c56e:	6819      	ldr	r1, [r3, #0]
 800c570:	88fa      	ldrh	r2, [r7, #6]
 800c572:	4613      	mov	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	440b      	add	r3, r1
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	4619      	mov	r1, r3
 800c582:	6838      	ldr	r0, [r7, #0]
 800c584:	f010 fe1d 	bl	801d1c2 <memcpy>

  return paramLength;
 800c588:	68fb      	ldr	r3, [r7, #12]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	20008e60 	.word	0x20008e60

0800c598 <paramGetLen>:
 * Get param on [index] length in bytes
 *
 * @return number of bytes
 **/
static int paramGetLen(uint16_t index)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	80fb      	strh	r3, [r7, #6]
  int paramLength = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]

  switch (params[index].type & PARAM_BYTES_MASK)
 800c5a6:	4b16      	ldr	r3, [pc, #88]	; (800c600 <paramGetLen+0x68>)
 800c5a8:	6819      	ldr	r1, [r3, #0]
 800c5aa:	88fa      	ldrh	r2, [r7, #6]
 800c5ac:	4613      	mov	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4413      	add	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	440b      	add	r3, r1
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	f003 0303 	and.w	r3, r3, #3
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d817      	bhi.n	800c5f0 <paramGetLen+0x58>
 800c5c0:	a201      	add	r2, pc, #4	; (adr r2, 800c5c8 <paramGetLen+0x30>)
 800c5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c6:	bf00      	nop
 800c5c8:	0800c5d9 	.word	0x0800c5d9
 800c5cc:	0800c5df 	.word	0x0800c5df
 800c5d0:	0800c5e5 	.word	0x0800c5e5
 800c5d4:	0800c5eb 	.word	0x0800c5eb
  {
    case PARAM_1BYTE:
      paramLength = 1;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	60fb      	str	r3, [r7, #12]
      break;
 800c5dc:	e008      	b.n	800c5f0 <paramGetLen+0x58>
    case PARAM_2BYTES:
      paramLength = 2;
 800c5de:	2302      	movs	r3, #2
 800c5e0:	60fb      	str	r3, [r7, #12]
      break;
 800c5e2:	e005      	b.n	800c5f0 <paramGetLen+0x58>
    case PARAM_4BYTES:
      paramLength = 4;
 800c5e4:	2304      	movs	r3, #4
 800c5e6:	60fb      	str	r3, [r7, #12]
      break;
 800c5e8:	e002      	b.n	800c5f0 <paramGetLen+0x58>
    case PARAM_8BYTES:
      paramLength = 8;
 800c5ea:	2308      	movs	r3, #8
 800c5ec:	60fb      	str	r3, [r7, #12]
      break;
 800c5ee:	bf00      	nop
  }

  return paramLength;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	20008e60 	.word	0x20008e60

0800c604 <paramLogicInit>:

void paramLogicInit(void)
{
 800c604:	b590      	push	{r4, r7, lr}
 800c606:	b08f      	sub	sp, #60	; 0x3c
 800c608:	af00      	add	r7, sp, #0
  int i;
  const char* group = NULL;
 800c60a:	2300      	movs	r3, #0
 800c60c:	627b      	str	r3, [r7, #36]	; 0x24
  int groupLength = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t buf[30];

#ifndef UNIT_TEST_MODE
  params = &_param_start;
 800c612:	4b66      	ldr	r3, [pc, #408]	; (800c7ac <paramLogicInit+0x1a8>)
 800c614:	4a66      	ldr	r2, [pc, #408]	; (800c7b0 <paramLogicInit+0x1ac>)
 800c616:	601a      	str	r2, [r3, #0]
  paramsLen = &_param_stop - &_param_start;
 800c618:	4a66      	ldr	r2, [pc, #408]	; (800c7b4 <paramLogicInit+0x1b0>)
 800c61a:	4b65      	ldr	r3, [pc, #404]	; (800c7b0 <paramLogicInit+0x1ac>)
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	109b      	asrs	r3, r3, #2
 800c620:	4a65      	ldr	r2, [pc, #404]	; (800c7b8 <paramLogicInit+0x1b4>)
 800c622:	fb02 f303 	mul.w	r3, r2, r3
 800c626:	461a      	mov	r2, r3
 800c628:	4b64      	ldr	r3, [pc, #400]	; (800c7bc <paramLogicInit+0x1b8>)
 800c62a:	601a      	str	r2, [r3, #0]
#else
  params = _param_start;
  paramsLen = _param_stop - _param_start;
#endif
  // Calculate a hash of the toc by chaining description of each elements
  paramsCrc = 0;
 800c62c:	4b64      	ldr	r3, [pc, #400]	; (800c7c0 <paramLogicInit+0x1bc>)
 800c62e:	2200      	movs	r2, #0
 800c630:	601a      	str	r2, [r3, #0]
  for (int i=0; i<paramsLen; i++)
 800c632:	2300      	movs	r3, #0
 800c634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c636:	e091      	b.n	800c75c <paramLogicInit+0x158>
  {
    int len = 5;
 800c638:	2305      	movs	r3, #5
 800c63a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c63c:	4b60      	ldr	r3, [pc, #384]	; (800c7c0 <paramLogicInit+0x1bc>)
 800c63e:	681b      	ldr	r3, [r3, #0]
    memcpy(&buf[0], &paramsCrc, 4);
 800c640:	607b      	str	r3, [r7, #4]
    buf[4] = params[i].type;
 800c642:	4b5a      	ldr	r3, [pc, #360]	; (800c7ac <paramLogicInit+0x1a8>)
 800c644:	6819      	ldr	r1, [r3, #0]
 800c646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c648:	4613      	mov	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	440b      	add	r3, r1
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	723b      	strb	r3, [r7, #8]
    if (params[i].type & PARAM_GROUP) {
 800c656:	4b55      	ldr	r3, [pc, #340]	; (800c7ac <paramLogicInit+0x1a8>)
 800c658:	6819      	ldr	r1, [r3, #0]
 800c65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65c:	4613      	mov	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	440b      	add	r3, r1
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	b25b      	sxtb	r3, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	da1c      	bge.n	800c6a8 <paramLogicInit+0xa4>
      if (params[i].type & PARAM_START) {
 800c66e:	4b4f      	ldr	r3, [pc, #316]	; (800c7ac <paramLogicInit+0x1a8>)
 800c670:	6819      	ldr	r1, [r3, #0]
 800c672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c674:	4613      	mov	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4413      	add	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	440b      	add	r3, r1
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	2b00      	cmp	r3, #0
 800c686:	d026      	beq.n	800c6d6 <paramLogicInit+0xd2>
        group = params[i].name;
 800c688:	4b48      	ldr	r3, [pc, #288]	; (800c7ac <paramLogicInit+0x1a8>)
 800c68a:	6819      	ldr	r1, [r3, #0]
 800c68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	627b      	str	r3, [r7, #36]	; 0x24
        groupLength = strlen(group);
 800c69c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c69e:	f7f3 fdf7 	bl	8000290 <strlen>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	633b      	str	r3, [r7, #48]	; 0x30
 800c6a6:	e016      	b.n	800c6d6 <paramLogicInit+0xd2>
      }
    } else {
      // CMD_GET_ITEM_V2 result's size is: 4 + strlen(params[i].name) + groupLength + 2
      if (strlen(params[i].name) + groupLength + 2 > 26) {
 800c6a8:	4b40      	ldr	r3, [pc, #256]	; (800c7ac <paramLogicInit+0x1a8>)
 800c6aa:	6819      	ldr	r1, [r3, #0]
 800c6ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	440b      	add	r3, r1
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7f3 fde8 	bl	8000290 <strlen>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c4:	4413      	add	r3, r2
 800c6c6:	3302      	adds	r3, #2
 800c6c8:	2b1a      	cmp	r3, #26
 800c6ca:	d904      	bls.n	800c6d6 <paramLogicInit+0xd2>
        PARAM_ERROR("'%s.%s' too long\n", group, params[i].name);
        ASSERT_FAILED();
 800c6cc:	22fe      	movs	r2, #254	; 0xfe
 800c6ce:	493d      	ldr	r1, [pc, #244]	; (800c7c4 <paramLogicInit+0x1c0>)
 800c6d0:	483d      	ldr	r0, [pc, #244]	; (800c7c8 <paramLogicInit+0x1c4>)
 800c6d2:	f7fe f8df 	bl	800a894 <assertFail>
      }
    }

    if (params[i].name) {
 800c6d6:	4b35      	ldr	r3, [pc, #212]	; (800c7ac <paramLogicInit+0x1a8>)
 800c6d8:	6819      	ldr	r1, [r3, #0]
 800c6da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6dc:	4613      	mov	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	440b      	add	r3, r1
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d02b      	beq.n	800c744 <paramLogicInit+0x140>
      memcpy(&buf[5], params[i].name, strlen(params[i].name));
 800c6ec:	4b2f      	ldr	r3, [pc, #188]	; (800c7ac <paramLogicInit+0x1a8>)
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	440b      	add	r3, r1
 800c6fc:	685c      	ldr	r4, [r3, #4]
 800c6fe:	4b2b      	ldr	r3, [pc, #172]	; (800c7ac <paramLogicInit+0x1a8>)
 800c700:	6819      	ldr	r1, [r3, #0]
 800c702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	440b      	add	r3, r1
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	4618      	mov	r0, r3
 800c712:	f7f3 fdbd 	bl	8000290 <strlen>
 800c716:	4602      	mov	r2, r0
 800c718:	1d3b      	adds	r3, r7, #4
 800c71a:	3305      	adds	r3, #5
 800c71c:	4621      	mov	r1, r4
 800c71e:	4618      	mov	r0, r3
 800c720:	f010 fd4f 	bl	801d1c2 <memcpy>
      len += strlen(params[i].name);
 800c724:	4b21      	ldr	r3, [pc, #132]	; (800c7ac <paramLogicInit+0x1a8>)
 800c726:	6819      	ldr	r1, [r3, #0]
 800c728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c72a:	4613      	mov	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4413      	add	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	440b      	add	r3, r1
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	4618      	mov	r0, r3
 800c738:	f7f3 fdaa 	bl	8000290 <strlen>
 800c73c:	4602      	mov	r2, r0
 800c73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c740:	4413      	add	r3, r2
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    paramsCrc = crc32CalculateBuffer(buf, len);
 800c744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c746:	1d3b      	adds	r3, r7, #4
 800c748:	4611      	mov	r1, r2
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe f959 	bl	800aa02 <crc32CalculateBuffer>
 800c750:	4603      	mov	r3, r0
 800c752:	4a1b      	ldr	r2, [pc, #108]	; (800c7c0 <paramLogicInit+0x1bc>)
 800c754:	6013      	str	r3, [r2, #0]
  for (int i=0; i<paramsLen; i++)
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	3301      	adds	r3, #1
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c75c:	4b17      	ldr	r3, [pc, #92]	; (800c7bc <paramLogicInit+0x1b8>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c762:	429a      	cmp	r2, r3
 800c764:	f6ff af68 	blt.w	800c638 <paramLogicInit+0x34>
  }

  for (i=0; i<paramsLen; i++)
 800c768:	2300      	movs	r3, #0
 800c76a:	637b      	str	r3, [r7, #52]	; 0x34
 800c76c:	e014      	b.n	800c798 <paramLogicInit+0x194>
  {
    if(!(params[i].type & PARAM_GROUP))
 800c76e:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <paramLogicInit+0x1a8>)
 800c770:	6819      	ldr	r1, [r3, #0]
 800c772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	440b      	add	r3, r1
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	b25b      	sxtb	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	db05      	blt.n	800c792 <paramLogicInit+0x18e>
      paramsCount++;
 800c786:	4b11      	ldr	r3, [pc, #68]	; (800c7cc <paramLogicInit+0x1c8>)
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	3301      	adds	r3, #1
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	4b0f      	ldr	r3, [pc, #60]	; (800c7cc <paramLogicInit+0x1c8>)
 800c790:	801a      	strh	r2, [r3, #0]
  for (i=0; i<paramsLen; i++)
 800c792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c794:	3301      	adds	r3, #1
 800c796:	637b      	str	r3, [r7, #52]	; 0x34
 800c798:	4b08      	ldr	r3, [pc, #32]	; (800c7bc <paramLogicInit+0x1b8>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	dbe5      	blt.n	800c76e <paramLogicInit+0x16a>
  }
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	373c      	adds	r7, #60	; 0x3c
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd90      	pop	{r4, r7, pc}
 800c7ac:	20008e60 	.word	0x20008e60
 800c7b0:	0801fc84 	.word	0x0801fc84
 800c7b4:	08020bc0 	.word	0x08020bc0
 800c7b8:	cccccccd 	.word	0xcccccccd
 800c7bc:	20008e64 	.word	0x20008e64
 800c7c0:	20008e68 	.word	0x20008e68
 800c7c4:	080233e0 	.word	0x080233e0
 800c7c8:	08023400 	.word	0x08023400
 800c7cc:	20008e6c 	.word	0x20008e6c

0800c7d0 <paramTOCProcess>:

void paramTOCProcess(CRTPPacket *p, int command)
{
 800c7d0:	b5b0      	push	{r4, r5, r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  int ptr = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	617b      	str	r3, [r7, #20]
  char * group = "";
 800c7de:	4b8e      	ldr	r3, [pc, #568]	; (800ca18 <paramTOCProcess+0x248>)
 800c7e0:	613b      	str	r3, [r7, #16]
  uint16_t n=0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	81fb      	strh	r3, [r7, #14]
  uint16_t paramId=0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	81bb      	strh	r3, [r7, #12]

  switch (command)
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b03      	cmp	r3, #3
 800c7ee:	f200 810e 	bhi.w	800ca0e <paramTOCProcess+0x23e>
 800c7f2:	a201      	add	r2, pc, #4	; (adr r2, 800c7f8 <paramTOCProcess+0x28>)
 800c7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f8:	0800c839 	.word	0x0800c839
 800c7fc:	0800c809 	.word	0x0800c809
 800c800:	0800c891 	.word	0x0800c891
 800c804:	0800c85b 	.word	0x0800c85b
  {
    case CMD_GET_INFO: //Get info packet about the param implementation (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 800c808:	4984      	ldr	r1, [pc, #528]	; (800ca1c <paramTOCProcess+0x24c>)
 800c80a:	2000      	movs	r0, #0
 800c80c:	f7fe f814 	bl	800a838 <SEGGER_RTT_printf>
      ptr = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
      group = "";
 800c814:	4b80      	ldr	r3, [pc, #512]	; (800ca18 <paramTOCProcess+0x248>)
 800c816:	613b      	str	r3, [r7, #16]
      p->header = CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2220      	movs	r2, #32
 800c81c:	705a      	strb	r2, [r3, #1]
      p->size = 4;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2204      	movs	r2, #4
 800c822:	701a      	strb	r2, [r3, #0]
      p->data[0] = CMD_GET_INFO;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	709a      	strb	r2, [r3, #2]
      p->data[1] = 0; // Param count
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	70da      	strb	r2, [r3, #3]
      crtpSendPacketBlock(p);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7f4 ff31 	bl	8001698 <crtpSendPacketBlock>
      break;
 800c836:	e0ea      	b.n	800ca0e <paramTOCProcess+0x23e>
    case CMD_GET_ITEM:  //Get param variable (obsolete)
      DEBUG_PRINT("Param API V1 not supported anymore!\n");
 800c838:	4978      	ldr	r1, [pc, #480]	; (800ca1c <paramTOCProcess+0x24c>)
 800c83a:	2000      	movs	r0, #0
 800c83c:	f7fd fffc 	bl	800a838 <SEGGER_RTT_printf>
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2220      	movs	r2, #32
 800c844:	705a      	strb	r2, [r3, #1]
      p->data[0]=CMD_GET_ITEM;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	709a      	strb	r2, [r3, #2]
      p->size=1;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	701a      	strb	r2, [r3, #0]
      crtpSendPacketBlock(p);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7f4 ff20 	bl	8001698 <crtpSendPacketBlock>
      break;
 800c858:	e0d9      	b.n	800ca0e <paramTOCProcess+0x23e>
    case CMD_GET_INFO_V2: //Get info packet about the param implementation
      ptr = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	617b      	str	r3, [r7, #20]
      group = "";
 800c85e:	4b6e      	ldr	r3, [pc, #440]	; (800ca18 <paramTOCProcess+0x248>)
 800c860:	613b      	str	r3, [r7, #16]
      p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2220      	movs	r2, #32
 800c866:	705a      	strb	r2, [r3, #1]
      p->size=7;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2207      	movs	r2, #7
 800c86c:	701a      	strb	r2, [r3, #0]
      p->data[0]=CMD_GET_INFO_V2;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2203      	movs	r2, #3
 800c872:	709a      	strb	r2, [r3, #2]
      memcpy(&p->data[1], &paramsCount, 2);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	3303      	adds	r3, #3
 800c878:	4a69      	ldr	r2, [pc, #420]	; (800ca20 <paramTOCProcess+0x250>)
 800c87a:	8812      	ldrh	r2, [r2, #0]
 800c87c:	801a      	strh	r2, [r3, #0]
      memcpy(&p->data[3], &paramsCrc, 4);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	3305      	adds	r3, #5
 800c882:	4a68      	ldr	r2, [pc, #416]	; (800ca24 <paramTOCProcess+0x254>)
 800c884:	6812      	ldr	r2, [r2, #0]
 800c886:	601a      	str	r2, [r3, #0]
      crtpSendPacketBlock(p);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7f4 ff05 	bl	8001698 <crtpSendPacketBlock>
      break;
 800c88e:	e0be      	b.n	800ca0e <paramTOCProcess+0x23e>
    case CMD_GET_ITEM_V2:  //Get param variable
      memcpy(&paramId, &p->data[1], 2);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3303      	adds	r3, #3
 800c894:	881b      	ldrh	r3, [r3, #0]
 800c896:	b29b      	uxth	r3, r3
 800c898:	81bb      	strh	r3, [r7, #12]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 800c89a:	2300      	movs	r3, #0
 800c89c:	617b      	str	r3, [r7, #20]
 800c89e:	e030      	b.n	800c902 <paramTOCProcess+0x132>
      {
        if (params[ptr].type & PARAM_GROUP)
 800c8a0:	4b61      	ldr	r3, [pc, #388]	; (800ca28 <paramTOCProcess+0x258>)
 800c8a2:	6819      	ldr	r1, [r3, #0]
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	440b      	add	r3, r1
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	b25b      	sxtb	r3, r3
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	da1a      	bge.n	800c8ee <paramTOCProcess+0x11e>
        {
          if (params[ptr].type & PARAM_START)
 800c8b8:	4b5b      	ldr	r3, [pc, #364]	; (800ca28 <paramTOCProcess+0x258>)
 800c8ba:	6819      	ldr	r1, [r3, #0]
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	4413      	add	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	440b      	add	r3, r1
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	f003 0301 	and.w	r3, r3, #1
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <paramTOCProcess+0x118>
            group = params[ptr].name;
 800c8d2:	4b55      	ldr	r3, [pc, #340]	; (800ca28 <paramTOCProcess+0x258>)
 800c8d4:	6819      	ldr	r1, [r3, #0]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	440b      	add	r3, r1
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	613b      	str	r3, [r7, #16]
 800c8e6:	e009      	b.n	800c8fc <paramTOCProcess+0x12c>
          else
            group = "";
 800c8e8:	4b4b      	ldr	r3, [pc, #300]	; (800ca18 <paramTOCProcess+0x248>)
 800c8ea:	613b      	str	r3, [r7, #16]
 800c8ec:	e006      	b.n	800c8fc <paramTOCProcess+0x12c>
        }
        else                          //Ptr points a variable
        {
          if (n==paramId)
 800c8ee:	89bb      	ldrh	r3, [r7, #12]
 800c8f0:	89fa      	ldrh	r2, [r7, #14]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d00b      	beq.n	800c90e <paramTOCProcess+0x13e>
            break;
          n++;
 800c8f6:	89fb      	ldrh	r3, [r7, #14]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	81fb      	strh	r3, [r7, #14]
      for (ptr=0; ptr<paramsLen; ptr++) //Ptr points a group
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	3301      	adds	r3, #1
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	4b4a      	ldr	r3, [pc, #296]	; (800ca2c <paramTOCProcess+0x25c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	429a      	cmp	r2, r3
 800c90a:	dbc9      	blt.n	800c8a0 <paramTOCProcess+0xd0>
 800c90c:	e000      	b.n	800c910 <paramTOCProcess+0x140>
            break;
 800c90e:	bf00      	nop
        }
      }

      if (ptr<paramsLen)
 800c910:	4b46      	ldr	r3, [pc, #280]	; (800ca2c <paramTOCProcess+0x25c>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	697a      	ldr	r2, [r7, #20]
 800c916:	429a      	cmp	r2, r3
 800c918:	da6c      	bge.n	800c9f4 <paramTOCProcess+0x224>
      {
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2220      	movs	r2, #32
 800c91e:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2202      	movs	r2, #2
 800c924:	709a      	strb	r2, [r3, #2]
        memcpy(&p->data[1], &paramId, 2);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	3303      	adds	r3, #3
 800c92a:	89ba      	ldrh	r2, [r7, #12]
 800c92c:	801a      	strh	r2, [r3, #0]
        p->data[3] = params[ptr].type;
 800c92e:	4b3e      	ldr	r3, [pc, #248]	; (800ca28 <paramTOCProcess+0x258>)
 800c930:	6819      	ldr	r1, [r3, #0]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	4613      	mov	r3, r2
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	4413      	add	r3, r2
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	440b      	add	r3, r1
 800c93e:	781a      	ldrb	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	715a      	strb	r2, [r3, #5]
        p->size = 4 + 2 + strlen(group) + strlen(params[ptr].name);
 800c944:	6938      	ldr	r0, [r7, #16]
 800c946:	f7f3 fca3 	bl	8000290 <strlen>
 800c94a:	4603      	mov	r3, r0
 800c94c:	b2dc      	uxtb	r4, r3
 800c94e:	4b36      	ldr	r3, [pc, #216]	; (800ca28 <paramTOCProcess+0x258>)
 800c950:	6819      	ldr	r1, [r3, #0]
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	4613      	mov	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	440b      	add	r3, r1
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	4618      	mov	r0, r3
 800c962:	f7f3 fc95 	bl	8000290 <strlen>
 800c966:	4603      	mov	r3, r0
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	4423      	add	r3, r4
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	3306      	adds	r3, #6
 800c970:	b2da      	uxtb	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	701a      	strb	r2, [r3, #0]
        ASSERT(p->size <= CRTP_MAX_DATA_SIZE); // Too long! The name of the group or the parameter may be too long.
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	2b1e      	cmp	r3, #30
 800c97c:	d905      	bls.n	800c98a <paramTOCProcess+0x1ba>
 800c97e:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800c982:	492b      	ldr	r1, [pc, #172]	; (800ca30 <paramTOCProcess+0x260>)
 800c984:	482b      	ldr	r0, [pc, #172]	; (800ca34 <paramTOCProcess+0x264>)
 800c986:	f7fd ff85 	bl	800a894 <assertFail>
        memcpy(p->data+4, group, strlen(group)+1);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	3302      	adds	r3, #2
 800c98e:	1d1c      	adds	r4, r3, #4
 800c990:	6938      	ldr	r0, [r7, #16]
 800c992:	f7f3 fc7d 	bl	8000290 <strlen>
 800c996:	4603      	mov	r3, r0
 800c998:	3301      	adds	r3, #1
 800c99a:	461a      	mov	r2, r3
 800c99c:	6939      	ldr	r1, [r7, #16]
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f010 fc0f 	bl	801d1c2 <memcpy>
        memcpy(p->data+4+strlen(group)+1, params[ptr].name, strlen(params[ptr].name)+1);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	1c9c      	adds	r4, r3, #2
 800c9a8:	6938      	ldr	r0, [r7, #16]
 800c9aa:	f7f3 fc71 	bl	8000290 <strlen>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	3305      	adds	r3, #5
 800c9b2:	441c      	add	r4, r3
 800c9b4:	4b1c      	ldr	r3, [pc, #112]	; (800ca28 <paramTOCProcess+0x258>)
 800c9b6:	6819      	ldr	r1, [r3, #0]
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	440b      	add	r3, r1
 800c9c4:	685d      	ldr	r5, [r3, #4]
 800c9c6:	4b18      	ldr	r3, [pc, #96]	; (800ca28 <paramTOCProcess+0x258>)
 800c9c8:	6819      	ldr	r1, [r3, #0]
 800c9ca:	697a      	ldr	r2, [r7, #20]
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	440b      	add	r3, r1
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7f3 fc59 	bl	8000290 <strlen>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f010 fbeb 	bl	801d1c2 <memcpy>
        crtpSendPacketBlock(p);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f7f4 fe53 	bl	8001698 <crtpSendPacketBlock>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
        p->data[0]=CMD_GET_ITEM_V2;
        p->size=1;
        crtpSendPacketBlock(p);
      }
      break;
 800c9f2:	e00b      	b.n	800ca0c <paramTOCProcess+0x23c>
        p->header=CRTP_HEADER(CRTP_PORT_PARAM, TOC_CH);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	705a      	strb	r2, [r3, #1]
        p->data[0]=CMD_GET_ITEM_V2;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	709a      	strb	r2, [r3, #2]
        p->size=1;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2201      	movs	r2, #1
 800ca04:	701a      	strb	r2, [r3, #0]
        crtpSendPacketBlock(p);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7f4 fe46 	bl	8001698 <crtpSendPacketBlock>
      break;
 800ca0c:	bf00      	nop
  }
}
 800ca0e:	bf00      	nop
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bdb0      	pop	{r4, r5, r7, pc}
 800ca16:	bf00      	nop
 800ca18:	08023400 	.word	0x08023400
 800ca1c:	08023404 	.word	0x08023404
 800ca20:	20008e6c 	.word	0x20008e6c
 800ca24:	20008e68 	.word	0x20008e68
 800ca28:	20008e60 	.word	0x20008e60
 800ca2c:	20008e64 	.word	0x20008e64
 800ca30:	080233e0 	.word	0x080233e0
 800ca34:	0802342c 	.word	0x0802342c

0800ca38 <paramWriteProcess>:

void paramWriteProcess(CRTPPacket *p)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	3302      	adds	r3, #2
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	81fb      	strh	r3, [r7, #14]

  void* valptr = &p->data[2];
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	617b      	str	r3, [r7, #20]
  int index;

  index = variableGetIndex(id);
 800ca50:	89fb      	ldrh	r3, [r7, #14]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 f90e 	bl	800cc74 <variableGetIndex>
 800ca58:	6138      	str	r0, [r7, #16]

  if (index < 0) {
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	da09      	bge.n	800ca74 <paramWriteProcess+0x3c>
    p->data[2] = ENOENT;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2202      	movs	r2, #2
 800ca64:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2203      	movs	r2, #3
 800ca6a:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7f4 fe13 	bl	8001698 <crtpSendPacketBlock>
    return;
 800ca72:	e01a      	b.n	800caaa <paramWriteProcess+0x72>
  }

  if (params[index].type & PARAM_RONLY)
 800ca74:	4b0e      	ldr	r3, [pc, #56]	; (800cab0 <paramWriteProcess+0x78>)
 800ca76:	6819      	ldr	r1, [r3, #0]
 800ca78:	693a      	ldr	r2, [r7, #16]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	440b      	add	r3, r1
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10c      	bne.n	800caa8 <paramWriteProcess+0x70>
    return;

  paramSet(index, valptr);
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	6979      	ldr	r1, [r7, #20]
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff fcfb 	bl	800c490 <paramSet>

  crtpSendPacketBlock(p);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7f4 fdfc 	bl	8001698 <crtpSendPacketBlock>

  paramNotifyChanged(index);
 800caa0:	6938      	ldr	r0, [r7, #16]
 800caa2:	f000 f807 	bl	800cab4 <paramNotifyChanged>
 800caa6:	e000      	b.n	800caaa <paramWriteProcess+0x72>
    return;
 800caa8:	bf00      	nop
}
 800caaa:	3718      	adds	r7, #24
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	20008e60 	.word	0x20008e60

0800cab4 <paramNotifyChanged>:

static void paramNotifyChanged(int index) {
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  if (params[index].callback) {
 800cabc:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <paramNotifyChanged+0x3c>)
 800cabe:	6819      	ldr	r1, [r3, #0]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d009      	beq.n	800cae6 <paramNotifyChanged+0x32>
    params[index].callback();
 800cad2:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <paramNotifyChanged+0x3c>)
 800cad4:	6819      	ldr	r1, [r3, #0]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	440b      	add	r3, r1
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	4798      	blx	r3
  }
}
 800cae6:	bf00      	nop
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	20008e60 	.word	0x20008e60

0800caf4 <paramWriteByNameProcess>:

static char paramWriteByNameProcess(char* group, char* name, int type, void *valptr) {
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b086      	sub	sp, #24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
  int index;
  char *pgroup = "";
 800cb02:	4b40      	ldr	r3, [pc, #256]	; (800cc04 <paramWriteByNameProcess+0x110>)
 800cb04:	613b      	str	r3, [r7, #16]

  for (index = 0; index < paramsLen; index++) //Ptr points a group
 800cb06:	2300      	movs	r3, #0
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	e040      	b.n	800cb8e <paramWriteByNameProcess+0x9a>
  {
    if (params[index].type & PARAM_GROUP)
 800cb0c:	4b3e      	ldr	r3, [pc, #248]	; (800cc08 <paramWriteByNameProcess+0x114>)
 800cb0e:	6819      	ldr	r1, [r3, #0]
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	4613      	mov	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	440b      	add	r3, r1
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	b25b      	sxtb	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	da1a      	bge.n	800cb5a <paramWriteByNameProcess+0x66>
    {
      if (params[index].type & PARAM_START)
 800cb24:	4b38      	ldr	r3, [pc, #224]	; (800cc08 <paramWriteByNameProcess+0x114>)
 800cb26:	6819      	ldr	r1, [r3, #0]
 800cb28:	697a      	ldr	r2, [r7, #20]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4413      	add	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	440b      	add	r3, r1
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00a      	beq.n	800cb54 <paramWriteByNameProcess+0x60>
        pgroup = params[index].name;
 800cb3e:	4b32      	ldr	r3, [pc, #200]	; (800cc08 <paramWriteByNameProcess+0x114>)
 800cb40:	6819      	ldr	r1, [r3, #0]
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	4613      	mov	r3, r2
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4413      	add	r3, r2
 800cb4a:	009b      	lsls	r3, r3, #2
 800cb4c:	440b      	add	r3, r1
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	613b      	str	r3, [r7, #16]
 800cb52:	e019      	b.n	800cb88 <paramWriteByNameProcess+0x94>
      else
        pgroup = "";
 800cb54:	4b2b      	ldr	r3, [pc, #172]	; (800cc04 <paramWriteByNameProcess+0x110>)
 800cb56:	613b      	str	r3, [r7, #16]
 800cb58:	e016      	b.n	800cb88 <paramWriteByNameProcess+0x94>
    }
    else                          //Ptr points a variable
    {
      if (!strcmp(params[index].name, name) && !strcmp(pgroup, group))
 800cb5a:	4b2b      	ldr	r3, [pc, #172]	; (800cc08 <paramWriteByNameProcess+0x114>)
 800cb5c:	6819      	ldr	r1, [r3, #0]
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	4613      	mov	r3, r2
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	440b      	add	r3, r1
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7f3 fb2e 	bl	80001d0 <strcmp>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <paramWriteByNameProcess+0x94>
 800cb7a:	68f9      	ldr	r1, [r7, #12]
 800cb7c:	6938      	ldr	r0, [r7, #16]
 800cb7e:	f7f3 fb27 	bl	80001d0 <strcmp>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d008      	beq.n	800cb9a <paramWriteByNameProcess+0xa6>
  for (index = 0; index < paramsLen; index++) //Ptr points a group
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	617b      	str	r3, [r7, #20]
 800cb8e:	4b1f      	ldr	r3, [pc, #124]	; (800cc0c <paramWriteByNameProcess+0x118>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	697a      	ldr	r2, [r7, #20]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	dbb9      	blt.n	800cb0c <paramWriteByNameProcess+0x18>
 800cb98:	e000      	b.n	800cb9c <paramWriteByNameProcess+0xa8>
        break;
 800cb9a:	bf00      	nop
    }
  }

  if (index >= paramsLen) {
 800cb9c:	4b1b      	ldr	r3, [pc, #108]	; (800cc0c <paramWriteByNameProcess+0x118>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	697a      	ldr	r2, [r7, #20]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	db01      	blt.n	800cbaa <paramWriteByNameProcess+0xb6>
    return ENOENT;
 800cba6:	2302      	movs	r3, #2
 800cba8:	e028      	b.n	800cbfc <paramWriteByNameProcess+0x108>
  }

  if (type != (params[index].type & (~(PARAM_CORE | PARAM_RONLY | PARAM_EXTENDED)))) {
 800cbaa:	4b17      	ldr	r3, [pc, #92]	; (800cc08 <paramWriteByNameProcess+0x114>)
 800cbac:	6819      	ldr	r1, [r3, #0]
 800cbae:	697a      	ldr	r2, [r7, #20]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	440b      	add	r3, r1
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d001      	beq.n	800cbca <paramWriteByNameProcess+0xd6>
    return EINVAL;
 800cbc6:	2316      	movs	r3, #22
 800cbc8:	e018      	b.n	800cbfc <paramWriteByNameProcess+0x108>
  }

  if (params[index].type & PARAM_RONLY) {
 800cbca:	4b0f      	ldr	r3, [pc, #60]	; (800cc08 <paramWriteByNameProcess+0x114>)
 800cbcc:	6819      	ldr	r1, [r3, #0]
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4413      	add	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	440b      	add	r3, r1
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <paramWriteByNameProcess+0xf4>
    return EACCES;
 800cbe4:	230d      	movs	r3, #13
 800cbe6:	e009      	b.n	800cbfc <paramWriteByNameProcess+0x108>
  }

  paramSet(index, valptr);
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff fc4e 	bl	800c490 <paramSet>

  paramNotifyChanged(index);
 800cbf4:	6978      	ldr	r0, [r7, #20]
 800cbf6:	f7ff ff5d 	bl	800cab4 <paramNotifyChanged>

  return 0;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	08023400 	.word	0x08023400
 800cc08:	20008e60 	.word	0x20008e60
 800cc0c:	20008e64 	.word	0x20008e64

0800cc10 <paramReadProcess>:

void paramReadProcess(CRTPPacket *p)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  uint16_t id;
  memcpy(&id, &p->data[0], 2);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	3302      	adds	r3, #2
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	817b      	strh	r3, [r7, #10]
  int index = variableGetIndex(id);
 800cc22:	897b      	ldrh	r3, [r7, #10]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 f825 	bl	800cc74 <variableGetIndex>
 800cc2a:	60f8      	str	r0, [r7, #12]

  if (index<0) {
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da09      	bge.n	800cc46 <paramReadProcess+0x36>
    p->data[2] = ENOENT;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2202      	movs	r2, #2
 800cc36:	711a      	strb	r2, [r3, #4]
    p->size = 3;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2203      	movs	r2, #3
 800cc3c:	701a      	strb	r2, [r3, #0]

    crtpSendPacketBlock(p);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7f4 fd2a 	bl	8001698 <crtpSendPacketBlock>
 800cc44:	e013      	b.n	800cc6e <paramReadProcess+0x5e>
    return;
  }
  p->data[2] = 0;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	711a      	strb	r2, [r3, #4]
  p->size = 3 + paramGet(index, &p->data[3]);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3305      	adds	r3, #5
 800cc54:	4619      	mov	r1, r3
 800cc56:	4610      	mov	r0, r2
 800cc58:	f7ff fc5c 	bl	800c514 <paramGet>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	3303      	adds	r3, #3
 800cc62:	b2da      	uxtb	r2, r3
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7f4 fd15 	bl	8001698 <crtpSendPacketBlock>
}
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <variableGetIndex>:

static int variableGetIndex(int id)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  int i;
  int n = 0;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < paramsLen; i++)
 800cc80:	2300      	movs	r3, #0
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	e015      	b.n	800ccb2 <variableGetIndex+0x3e>
  {
    if(!(params[i].type & PARAM_GROUP))
 800cc86:	4b16      	ldr	r3, [pc, #88]	; (800cce0 <variableGetIndex+0x6c>)
 800cc88:	6819      	ldr	r1, [r3, #0]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	440b      	add	r3, r1
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	b25b      	sxtb	r3, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	db06      	blt.n	800ccac <variableGetIndex+0x38>
    {
      if(n == id) {
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d00b      	beq.n	800ccbe <variableGetIndex+0x4a>
        break;
      }
      n++;
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < paramsLen; i++)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	60fb      	str	r3, [r7, #12]
 800ccb2:	4b0c      	ldr	r3, [pc, #48]	; (800cce4 <variableGetIndex+0x70>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	dbe4      	blt.n	800cc86 <variableGetIndex+0x12>
 800ccbc:	e000      	b.n	800ccc0 <variableGetIndex+0x4c>
        break;
 800ccbe:	bf00      	nop
    }
  }

  if (i >= paramsLen)
 800ccc0:	4b08      	ldr	r3, [pc, #32]	; (800cce4 <variableGetIndex+0x70>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	db02      	blt.n	800ccd0 <variableGetIndex+0x5c>
    return -1;
 800ccca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccce:	e000      	b.n	800ccd2 <variableGetIndex+0x5e>

  return i;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	20008e60 	.word	0x20008e60
 800cce4:	20008e64 	.word	0x20008e64

0800cce8 <paramGetVarIdFromComplete>:

/* Public API to access param TOC from within the copter */
static paramVarId_t invalidVarId = {0xffffu, 0xffffu};

paramVarId_t paramGetVarIdFromComplete(const char* completeName)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08e      	sub	sp, #56	; 0x38
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  char group[32] = { 0, };
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	60bb      	str	r3, [r7, #8]
 800ccf4:	f107 030c 	add.w	r3, r7, #12
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	605a      	str	r2, [r3, #4]
 800ccfe:	609a      	str	r2, [r3, #8]
 800cd00:	60da      	str	r2, [r3, #12]
 800cd02:	611a      	str	r2, [r3, #16]
 800cd04:	615a      	str	r2, [r3, #20]
 800cd06:	619a      	str	r2, [r3, #24]

  char *dot = strchr(completeName, '.');
 800cd08:	212e      	movs	r1, #46	; 0x2e
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f010 f96b 	bl	801cfe6 <strchr>
 800cd10:	6378      	str	r0, [r7, #52]	; 0x34
  if (!dot) {
 800cd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d103      	bne.n	800cd20 <paramGetVarIdFromComplete+0x38>
    return invalidVarId;
 800cd18:	4b17      	ldr	r3, [pc, #92]	; (800cd78 <paramGetVarIdFromComplete+0x90>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd1e:	e015      	b.n	800cd4c <paramGetVarIdFromComplete+0x64>
  }

  size_t group_len = dot - completeName;
 800cd20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	633b      	str	r3, [r7, #48]	; 0x30
  memcpy(group, completeName, group_len);
 800cd28:	f107 0308 	add.w	r3, r7, #8
 800cd2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2e:	6879      	ldr	r1, [r7, #4]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f010 fa46 	bl	801d1c2 <memcpy>
  char *name = (char *) (dot + 1);
 800cd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd38:	3301      	adds	r3, #1
 800cd3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  return paramGetVarId(group, name);
 800cd3c:	f107 0308 	add.w	r3, r7, #8
 800cd40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 f81a 	bl	800cd7c <paramGetVarId>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800cd52:	f362 0307 	bfi	r3, r2, #0, #8
 800cd56:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800cd5a:	f362 230f 	bfi	r3, r2, #8, #8
 800cd5e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800cd62:	f362 4317 	bfi	r3, r2, #16, #8
 800cd66:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800cd6a:	f362 631f 	bfi	r3, r2, #24, #8
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3738      	adds	r7, #56	; 0x38
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20000c30 	.word	0x20000c30

0800cd7c <paramGetVarId>:

paramVarId_t paramGetVarId(const char* group, const char* name)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  uint16_t index;
  uint16_t id = 0;
 800cd86:	2300      	movs	r3, #0
 800cd88:	82bb      	strh	r3, [r7, #20]
  paramVarId_t varId = invalidVarId;
 800cd8a:	4b35      	ldr	r3, [pc, #212]	; (800ce60 <paramGetVarId+0xe4>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	60bb      	str	r3, [r7, #8]
  char * currgroup = "";
 800cd90:	4b34      	ldr	r3, [pc, #208]	; (800ce64 <paramGetVarId+0xe8>)
 800cd92:	613b      	str	r3, [r7, #16]

  for(index = 0; index < paramsLen; index++)
 800cd94:	2300      	movs	r3, #0
 800cd96:	82fb      	strh	r3, [r7, #22]
 800cd98:	e049      	b.n	800ce2e <paramGetVarId+0xb2>
  {
    if (params[index].type & PARAM_GROUP) {
 800cd9a:	4b33      	ldr	r3, [pc, #204]	; (800ce68 <paramGetVarId+0xec>)
 800cd9c:	6819      	ldr	r1, [r3, #0]
 800cd9e:	8afa      	ldrh	r2, [r7, #22]
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	440b      	add	r3, r1
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	b25b      	sxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	da17      	bge.n	800cde2 <paramGetVarId+0x66>
      if (params[index].type & PARAM_START) {
 800cdb2:	4b2d      	ldr	r3, [pc, #180]	; (800ce68 <paramGetVarId+0xec>)
 800cdb4:	6819      	ldr	r1, [r3, #0]
 800cdb6:	8afa      	ldrh	r2, [r7, #22]
 800cdb8:	4613      	mov	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	440b      	add	r3, r1
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	f003 0301 	and.w	r3, r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00d      	beq.n	800cde8 <paramGetVarId+0x6c>
        currgroup = params[index].name;
 800cdcc:	4b26      	ldr	r3, [pc, #152]	; (800ce68 <paramGetVarId+0xec>)
 800cdce:	6819      	ldr	r1, [r3, #0]
 800cdd0:	8afa      	ldrh	r2, [r7, #22]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	440b      	add	r3, r1
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	613b      	str	r3, [r7, #16]
 800cde0:	e002      	b.n	800cde8 <paramGetVarId+0x6c>
      }
    } else {
      id += 1;
 800cde2:	8abb      	ldrh	r3, [r7, #20]
 800cde4:	3301      	adds	r3, #1
 800cde6:	82bb      	strh	r3, [r7, #20]
    }

    if ((!strcmp(group, currgroup)) && (!strcmp(name, params[index].name))) {
 800cde8:	6939      	ldr	r1, [r7, #16]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f7f3 f9f0 	bl	80001d0 <strcmp>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d118      	bne.n	800ce28 <paramGetVarId+0xac>
 800cdf6:	4b1c      	ldr	r3, [pc, #112]	; (800ce68 <paramGetVarId+0xec>)
 800cdf8:	6819      	ldr	r1, [r3, #0]
 800cdfa:	8afa      	ldrh	r2, [r7, #22]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	440b      	add	r3, r1
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6838      	ldr	r0, [r7, #0]
 800ce0c:	f7f3 f9e0 	bl	80001d0 <strcmp>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d108      	bne.n	800ce28 <paramGetVarId+0xac>
      varId.index = index;
 800ce16:	8afb      	ldrh	r3, [r7, #22]
 800ce18:	817b      	strh	r3, [r7, #10]
      varId.id = id - 1;
 800ce1a:	8abb      	ldrh	r3, [r7, #20]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	813b      	strh	r3, [r7, #8]
      return varId;
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	e00a      	b.n	800ce3e <paramGetVarId+0xc2>
  for(index = 0; index < paramsLen; index++)
 800ce28:	8afb      	ldrh	r3, [r7, #22]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	82fb      	strh	r3, [r7, #22]
 800ce2e:	8afa      	ldrh	r2, [r7, #22]
 800ce30:	4b0e      	ldr	r3, [pc, #56]	; (800ce6c <paramGetVarId+0xf0>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	dbb0      	blt.n	800cd9a <paramGetVarId+0x1e>
    }
  }

  return invalidVarId;
 800ce38:	4b09      	ldr	r3, [pc, #36]	; (800ce60 <paramGetVarId+0xe4>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	60fb      	str	r3, [r7, #12]
}
 800ce3e:	2300      	movs	r3, #0
 800ce40:	7b3a      	ldrb	r2, [r7, #12]
 800ce42:	f362 0307 	bfi	r3, r2, #0, #8
 800ce46:	7b7a      	ldrb	r2, [r7, #13]
 800ce48:	f362 230f 	bfi	r3, r2, #8, #8
 800ce4c:	7bba      	ldrb	r2, [r7, #14]
 800ce4e:	f362 4317 	bfi	r3, r2, #16, #8
 800ce52:	7bfa      	ldrb	r2, [r7, #15]
 800ce54:	f362 631f 	bfi	r3, r2, #24, #8
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3718      	adds	r7, #24
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	20000c30 	.word	0x20000c30
 800ce64:	08023400 	.word	0x08023400
 800ce68:	20008e60 	.word	0x20008e60
 800ce6c:	20008e64 	.word	0x20008e64

0800ce70 <paramGetGroupAndName>:
{
  return params[varid.index].type;
}

void paramGetGroupAndName(paramVarId_t varid, char** group, char** name)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b087      	sub	sp, #28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
  char * currgroup = "";
 800ce7c:	4b28      	ldr	r3, [pc, #160]	; (800cf20 <paramGetGroupAndName+0xb0>)
 800ce7e:	617b      	str	r3, [r7, #20]
  *group = 0;
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
  *name = 0;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]

  for(int index = 0; index < paramsLen; index++) {
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	613b      	str	r3, [r7, #16]
 800ce90:	e039      	b.n	800cf06 <paramGetGroupAndName+0x96>
    if (params[index].type & PARAM_GROUP) {
 800ce92:	4b24      	ldr	r3, [pc, #144]	; (800cf24 <paramGetGroupAndName+0xb4>)
 800ce94:	6819      	ldr	r1, [r3, #0]
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	440b      	add	r3, r1
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	b25b      	sxtb	r3, r3
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	da16      	bge.n	800ced8 <paramGetGroupAndName+0x68>
      if (params[index].type & PARAM_START) {
 800ceaa:	4b1e      	ldr	r3, [pc, #120]	; (800cf24 <paramGetGroupAndName+0xb4>)
 800ceac:	6819      	ldr	r1, [r3, #0]
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	440b      	add	r3, r1
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	f003 0301 	and.w	r3, r3, #1
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d009      	beq.n	800ced8 <paramGetGroupAndName+0x68>
        currgroup = params[index].name;
 800cec4:	4b17      	ldr	r3, [pc, #92]	; (800cf24 <paramGetGroupAndName+0xb4>)
 800cec6:	6819      	ldr	r1, [r3, #0]
 800cec8:	693a      	ldr	r2, [r7, #16]
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	440b      	add	r3, r1
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	617b      	str	r3, [r7, #20]
      }
    }

    if (index == varid.index) {
 800ced8:	89fb      	ldrh	r3, [r7, #14]
 800ceda:	461a      	mov	r2, r3
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	4293      	cmp	r3, r2
 800cee0:	d10e      	bne.n	800cf00 <paramGetGroupAndName+0x90>
      *group = currgroup;
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	601a      	str	r2, [r3, #0]
      *name = params[index].name;
 800cee8:	4b0e      	ldr	r3, [pc, #56]	; (800cf24 <paramGetGroupAndName+0xb4>)
 800ceea:	6819      	ldr	r1, [r3, #0]
 800ceec:	693a      	ldr	r2, [r7, #16]
 800ceee:	4613      	mov	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	4413      	add	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	440b      	add	r3, r1
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	601a      	str	r2, [r3, #0]
      break;
 800cefe:	e008      	b.n	800cf12 <paramGetGroupAndName+0xa2>
  for(int index = 0; index < paramsLen; index++) {
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	3301      	adds	r3, #1
 800cf04:	613b      	str	r3, [r7, #16]
 800cf06:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <paramGetGroupAndName+0xb8>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	693a      	ldr	r2, [r7, #16]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	dbc0      	blt.n	800ce92 <paramGetGroupAndName+0x22>
    }
  }
}
 800cf10:	bf00      	nop
 800cf12:	bf00      	nop
 800cf14:	371c      	adds	r7, #28
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	08023400 	.word	0x08023400
 800cf24:	20008e60 	.word	0x20008e60
 800cf28:	20008e64 	.word	0x20008e64

0800cf2c <paramSetByName>:

  paramNotifyChanged(varid.index);
}

void paramSetByName(CRTPPacket *p)
{
 800cf2c:	b590      	push	{r4, r7, lr}
 800cf2e:	b08b      	sub	sp, #44	; 0x2c
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  int i, nzero = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	623b      	str	r3, [r7, #32]
  void * valPtr;
  int error;

  // If the packet contains at least 2 zeros in the first 28 bytes
  // The packet decoding algorithm will not crash
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 800cf38:	2300      	movs	r3, #0
 800cf3a:	627b      	str	r3, [r7, #36]	; 0x24
 800cf3c:	e00c      	b.n	800cf58 <paramSetByName+0x2c>
    if (p->data[i] == '\0') nzero++;
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf42:	4413      	add	r3, r2
 800cf44:	3302      	adds	r3, #2
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d102      	bne.n	800cf52 <paramSetByName+0x26>
 800cf4c:	6a3b      	ldr	r3, [r7, #32]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	623b      	str	r3, [r7, #32]
  for (i = 0; i < CRTP_MAX_DATA_SIZE; i++) {
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	3301      	adds	r3, #1
 800cf56:	627b      	str	r3, [r7, #36]	; 0x24
 800cf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5a:	2b1d      	cmp	r3, #29
 800cf5c:	ddef      	ble.n	800cf3e <paramSetByName+0x12>
  }

  if (nzero < 2) return;
 800cf5e:	6a3b      	ldr	r3, [r7, #32]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	dd53      	ble.n	800d00c <paramSetByName+0xe0>

  group = (char*)&p->data[1];
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	3303      	adds	r3, #3
 800cf68:	61fb      	str	r3, [r7, #28]
  name = (char*)&p->data[1 + strlen(group) + 1];
 800cf6a:	69f8      	ldr	r0, [r7, #28]
 800cf6c:	f7f3 f990 	bl	8000290 <strlen>
 800cf70:	4603      	mov	r3, r0
 800cf72:	3302      	adds	r3, #2
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	4413      	add	r3, r2
 800cf78:	3302      	adds	r3, #2
 800cf7a:	61bb      	str	r3, [r7, #24]
  type = p->data[1 + strlen(group) + 1 + strlen(name) + 1];
 800cf7c:	69f8      	ldr	r0, [r7, #28]
 800cf7e:	f7f3 f987 	bl	8000290 <strlen>
 800cf82:	4604      	mov	r4, r0
 800cf84:	69b8      	ldr	r0, [r7, #24]
 800cf86:	f7f3 f983 	bl	8000290 <strlen>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	4423      	add	r3, r4
 800cf8e:	3303      	adds	r3, #3
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	4413      	add	r3, r2
 800cf94:	789b      	ldrb	r3, [r3, #2]
 800cf96:	75fb      	strb	r3, [r7, #23]
  valPtr = &p->data[1 + strlen(group) + 1 + strlen(name) + 2];
 800cf98:	69f8      	ldr	r0, [r7, #28]
 800cf9a:	f7f3 f979 	bl	8000290 <strlen>
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	69b8      	ldr	r0, [r7, #24]
 800cfa2:	f7f3 f975 	bl	8000290 <strlen>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	4423      	add	r3, r4
 800cfaa:	3304      	adds	r3, #4
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	4413      	add	r3, r2
 800cfb0:	3302      	adds	r3, #2
 800cfb2:	613b      	str	r3, [r7, #16]

  error = paramWriteByNameProcess(group, name, type, valPtr);  /* calls callback */
 800cfb4:	7dfa      	ldrb	r2, [r7, #23]
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	69b9      	ldr	r1, [r7, #24]
 800cfba:	69f8      	ldr	r0, [r7, #28]
 800cfbc:	f7ff fd9a 	bl	800caf4 <paramWriteByNameProcess>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	60fb      	str	r3, [r7, #12]

  p->data[1 + strlen(group) + 1 + strlen(name) + 1] = error;
 800cfc4:	69f8      	ldr	r0, [r7, #28]
 800cfc6:	f7f3 f963 	bl	8000290 <strlen>
 800cfca:	4604      	mov	r4, r0
 800cfcc:	69b8      	ldr	r0, [r7, #24]
 800cfce:	f7f3 f95f 	bl	8000290 <strlen>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4423      	add	r3, r4
 800cfd6:	3303      	adds	r3, #3
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	b2d1      	uxtb	r1, r2
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	4413      	add	r3, r2
 800cfe0:	460a      	mov	r2, r1
 800cfe2:	709a      	strb	r2, [r3, #2]
  p->size = 1 + strlen(group) + 1 + strlen(name) + 1 + 1;
 800cfe4:	69f8      	ldr	r0, [r7, #28]
 800cfe6:	f7f3 f953 	bl	8000290 <strlen>
 800cfea:	4603      	mov	r3, r0
 800cfec:	b2dc      	uxtb	r4, r3
 800cfee:	69b8      	ldr	r0, [r7, #24]
 800cff0:	f7f3 f94e 	bl	8000290 <strlen>
 800cff4:	4603      	mov	r3, r0
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	4423      	add	r3, r4
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	3304      	adds	r3, #4
 800cffe:	b2da      	uxtb	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7f4 fb47 	bl	8001698 <crtpSendPacketBlock>
 800d00a:	e000      	b.n	800d00e <paramSetByName+0xe2>
  if (nzero < 2) return;
 800d00c:	bf00      	nop

}
 800d00e:	372c      	adds	r7, #44	; 0x2c
 800d010:	46bd      	mov	sp, r7
 800d012:	bd90      	pop	{r4, r7, pc}

0800d014 <paramGetExtendedType>:

#define KEY_LEN 30  // FIXME

void paramGetExtendedType(CRTPPacket *p)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3303      	adds	r3, #3
 800d020:	881b      	ldrh	r3, [r3, #0]
 800d022:	b29b      	uxth	r3, r3
 800d024:	817b      	strh	r3, [r7, #10]
  index = variableGetIndex(id);
 800d026:	897b      	ldrh	r3, [r7, #10]
 800d028:	4618      	mov	r0, r3
 800d02a:	f7ff fe23 	bl	800cc74 <variableGetIndex>
 800d02e:	60f8      	str	r0, [r7, #12]

  if (index < 0 || !(params[index].type & PARAM_EXTENDED)) {
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	db0c      	blt.n	800d050 <paramGetExtendedType+0x3c>
 800d036:	4b15      	ldr	r3, [pc, #84]	; (800d08c <paramGetExtendedType+0x78>)
 800d038:	6819      	ldr	r1, [r3, #0]
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	4613      	mov	r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4413      	add	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	440b      	add	r3, r1
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d109      	bne.n	800d064 <paramGetExtendedType+0x50>
    p->data[3] = ENOENT;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2202      	movs	r2, #2
 800d054:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2204      	movs	r2, #4
 800d05a:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f7f4 fb1b 	bl	8001698 <crtpSendPacketBlock>
 800d062:	e010      	b.n	800d086 <paramGetExtendedType+0x72>
    return;
  }

  p->data[3] = params[index].extended_type;
 800d064:	4b09      	ldr	r3, [pc, #36]	; (800d08c <paramGetExtendedType+0x78>)
 800d066:	6819      	ldr	r1, [r3, #0]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	4613      	mov	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4413      	add	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	440b      	add	r3, r1
 800d074:	785a      	ldrb	r2, [r3, #1]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2204      	movs	r2, #4
 800d07e:	701a      	strb	r2, [r3, #0]

  crtpSendPacketBlock(p);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f7f4 fb09 	bl	8001698 <crtpSendPacketBlock>
}
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	20008e60 	.word	0x20008e60

0800d090 <generateStorageKey>:

static void generateStorageKey(const uint16_t index, char key[KEY_LEN])
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	4603      	mov	r3, r0
 800d098:	6039      	str	r1, [r7, #0]
 800d09a:	80fb      	strh	r3, [r7, #6]
  char *group;
  char *name;
  paramVarId_t paramId;

  paramId.index = (uint16_t)index;
 800d09c:	88fb      	ldrh	r3, [r7, #6]
 800d09e:	81fb      	strh	r3, [r7, #14]
  paramGetGroupAndName(paramId, &group, &name);
 800d0a0:	f107 0210 	add.w	r2, r7, #16
 800d0a4:	f107 0314 	add.w	r3, r7, #20
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f7ff fee0 	bl	800ce70 <paramGetGroupAndName>

  // Assemble key string, e.g. "prm/pid_rate.kp"
  strcpy(key, PERSISTENT_PREFIX_STRING);
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	4a0f      	ldr	r2, [pc, #60]	; (800d0f0 <generateStorageKey+0x60>)
 800d0b4:	6810      	ldr	r0, [r2, #0]
 800d0b6:	6018      	str	r0, [r3, #0]
 800d0b8:	7912      	ldrb	r2, [r2, #4]
 800d0ba:	711a      	strb	r2, [r3, #4]
  strcat(key, group);
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	6838      	ldr	r0, [r7, #0]
 800d0c2:	f00f ff81 	bl	801cfc8 <strcat>
  strcat(key, ".");
 800d0c6:	6838      	ldr	r0, [r7, #0]
 800d0c8:	f7f3 f8e2 	bl	8000290 <strlen>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	4907      	ldr	r1, [pc, #28]	; (800d0f4 <generateStorageKey+0x64>)
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	460b      	mov	r3, r1
 800d0da:	881b      	ldrh	r3, [r3, #0]
 800d0dc:	8013      	strh	r3, [r2, #0]
  strcat(key, name);
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6838      	ldr	r0, [r7, #0]
 800d0e4:	f00f ff70 	bl	801cfc8 <strcat>
}
 800d0e8:	bf00      	nop
 800d0ea:	3718      	adds	r7, #24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	08023570 	.word	0x08023570
 800d0f4:	08023578 	.word	0x08023578

0800d0f8 <paramPersistentStore>:

void paramPersistentStore(CRTPPacket *p)
{
 800d0f8:	b590      	push	{r4, r7, lr}
 800d0fa:	b08d      	sub	sp, #52	; 0x34
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 800d100:	2301      	movs	r3, #1
 800d102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3303      	adds	r3, #3
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 800d110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d112:	4618      	mov	r0, r3
 800d114:	f7ff fdae 	bl	800cc74 <variableGetIndex>
 800d118:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	da09      	bge.n	800d134 <paramPersistentStore+0x3c>
    p->data[3] = ENOENT;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2202      	movs	r2, #2
 800d124:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2204      	movs	r2, #4
 800d12a:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7f4 fab3 	bl	8001698 <crtpSendPacketBlock>
 800d132:	e03b      	b.n	800d1ac <paramPersistentStore+0xb4>
    return;
  }

  char key[KEY_LEN] = {0};
 800d134:	2300      	movs	r3, #0
 800d136:	60bb      	str	r3, [r7, #8]
 800d138:	f107 030c 	add.w	r3, r7, #12
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	605a      	str	r2, [r3, #4]
 800d142:	609a      	str	r2, [r3, #8]
 800d144:	60da      	str	r2, [r3, #12]
 800d146:	611a      	str	r2, [r3, #16]
 800d148:	615a      	str	r2, [r3, #20]
 800d14a:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 800d14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14e:	b29b      	uxth	r3, r3
 800d150:	f107 0208 	add.w	r2, r7, #8
 800d154:	4611      	mov	r1, r2
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff ff9a 	bl	800d090 <generateStorageKey>

  result = storageStore(key, params[index].address, paramGetLen(index));
 800d15c:	4b15      	ldr	r3, [pc, #84]	; (800d1b4 <paramPersistentStore+0xbc>)
 800d15e:	6819      	ldr	r1, [r3, #0]
 800d160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d162:	4613      	mov	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	009b      	lsls	r3, r3, #2
 800d16a:	440b      	add	r3, r1
 800d16c:	689c      	ldr	r4, [r3, #8]
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	b29b      	uxth	r3, r3
 800d172:	4618      	mov	r0, r3
 800d174:	f7ff fa10 	bl	800c598 <paramGetLen>
 800d178:	4603      	mov	r3, r0
 800d17a:	461a      	mov	r2, r3
 800d17c:	f107 0308 	add.w	r3, r7, #8
 800d180:	4621      	mov	r1, r4
 800d182:	4618      	mov	r0, r3
 800d184:	f7f8 fbd0 	bl	8005928 <storageStore>
 800d188:	4603      	mov	r3, r0
 800d18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 800d18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <paramPersistentStore+0xa2>
 800d196:	2200      	movs	r2, #0
 800d198:	e000      	b.n	800d19c <paramPersistentStore+0xa4>
 800d19a:	2202      	movs	r2, #2
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2204      	movs	r2, #4
 800d1a4:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7f4 fa76 	bl	8001698 <crtpSendPacketBlock>
}
 800d1ac:	3734      	adds	r7, #52	; 0x34
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd90      	pop	{r4, r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20008e60 	.word	0x20008e60

0800d1b8 <paramGetDefaultValue>:

void paramGetDefaultValue(CRTPPacket *p)
{
 800d1b8:	b590      	push	{r4, r7, lr}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], sizeof(id));
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3303      	adds	r3, #3
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	813b      	strh	r3, [r7, #8]
  int index = variableGetIndex(id);
 800d1ca:	893b      	ldrh	r3, [r7, #8]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff fd51 	bl	800cc74 <variableGetIndex>
 800d1d2:	60f8      	str	r0, [r7, #12]

  const bool doesParamExist = (index >= 0);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	43db      	mvns	r3, r3
 800d1d8:	0fdb      	lsrs	r3, r3, #31
 800d1da:	72fb      	strb	r3, [r7, #11]
  // Read-only parameters have no default value
  if (!doesParamExist || params[index].type & PARAM_RONLY) {
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	f083 0301 	eor.w	r3, r3, #1
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d10c      	bne.n	800d202 <paramGetDefaultValue+0x4a>
 800d1e8:	4b28      	ldr	r3, [pc, #160]	; (800d28c <paramGetDefaultValue+0xd4>)
 800d1ea:	6819      	ldr	r1, [r3, #0]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	4413      	add	r3, r2
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	440b      	add	r3, r1
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d009      	beq.n	800d216 <paramGetDefaultValue+0x5e>
    p->data[3] = ENOENT;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2202      	movs	r2, #2
 800d206:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2204      	movs	r2, #4
 800d20c:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7f4 fa42 	bl	8001698 <crtpSendPacketBlock>
 800d214:	e037      	b.n	800d286 <paramGetDefaultValue+0xce>
    return;
  }

  // Add default value
  uint8_t paramLen = paramGetLen(index);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7ff f9bc 	bl	800c598 <paramGetLen>
 800d220:	4603      	mov	r3, r0
 800d222:	72bb      	strb	r3, [r7, #10]
  if (params[index].getter) {
 800d224:	4b19      	ldr	r3, [pc, #100]	; (800d28c <paramGetDefaultValue+0xd4>)
 800d226:	6819      	ldr	r1, [r3, #0]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4613      	mov	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	4413      	add	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	440b      	add	r3, r1
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d012      	beq.n	800d260 <paramGetDefaultValue+0xa8>
    memcpy(&p->data[3], params[index].getter(), paramLen);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	1d5c      	adds	r4, r3, #5
 800d23e:	4b13      	ldr	r3, [pc, #76]	; (800d28c <paramGetDefaultValue+0xd4>)
 800d240:	6819      	ldr	r1, [r3, #0]
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	4613      	mov	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	4413      	add	r3, r2
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	440b      	add	r3, r1
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	4798      	blx	r3
 800d252:	4601      	mov	r1, r0
 800d254:	7abb      	ldrb	r3, [r7, #10]
 800d256:	461a      	mov	r2, r3
 800d258:	4620      	mov	r0, r4
 800d25a:	f00f ffb2 	bl	801d1c2 <memcpy>
 800d25e:	e00a      	b.n	800d276 <paramGetDefaultValue+0xbe>
  } else {
    memcpy(&p->data[3], paramGetDefault(index), paramLen);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	1d5c      	adds	r4, r3, #5
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	f7ff f8d1 	bl	800c40c <paramGetDefault>
 800d26a:	4601      	mov	r1, r0
 800d26c:	7abb      	ldrb	r3, [r7, #10]
 800d26e:	461a      	mov	r2, r3
 800d270:	4620      	mov	r0, r4
 800d272:	f00f ffa6 	bl	801d1c2 <memcpy>
  }
  p->size = 3 + paramLen;
 800d276:	7abb      	ldrb	r3, [r7, #10]
 800d278:	3303      	adds	r3, #3
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7f4 fa09 	bl	8001698 <crtpSendPacketBlock>
}
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd90      	pop	{r4, r7, pc}
 800d28c:	20008e60 	.word	0x20008e60

0800d290 <paramPersistentGetState>:

void paramPersistentGetState(CRTPPacket *p)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b08f      	sub	sp, #60	; 0x3c
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  uint16_t id;

  memcpy(&id, &p->data[1], 2);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3303      	adds	r3, #3
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  int index = variableGetIndex(id);
 800d2a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7ff fce5 	bl	800cc74 <variableGetIndex>
 800d2aa:	6378      	str	r0, [r7, #52]	; 0x34

  const bool doesParamExist = (index >= 0);
 800d2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ae:	43db      	mvns	r3, r3
 800d2b0:	0fdb      	lsrs	r3, r3, #31
 800d2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (! doesParamExist) {
 800d2b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d2ba:	f083 0301 	eor.w	r3, r3, #1
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d009      	beq.n	800d2d8 <paramPersistentGetState+0x48>
    p->data[3] = ENOENT;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2202      	movs	r2, #2
 800d2c8:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7f4 f9e1 	bl	8001698 <crtpSendPacketBlock>
 800d2d6:	e08c      	b.n	800d3f2 <paramPersistentGetState+0x162>
    return;
  }

  char key[KEY_LEN] = {0};
 800d2d8:	2300      	movs	r3, #0
 800d2da:	613b      	str	r3, [r7, #16]
 800d2dc:	f107 0314 	add.w	r3, r7, #20
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	605a      	str	r2, [r3, #4]
 800d2e6:	609a      	str	r2, [r3, #8]
 800d2e8:	60da      	str	r2, [r3, #12]
 800d2ea:	611a      	str	r2, [r3, #16]
 800d2ec:	615a      	str	r2, [r3, #20]
 800d2ee:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 800d2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	f107 0210 	add.w	r2, r7, #16
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff fec8 	bl	800d090 <generateStorageKey>

  uint8_t paramLen = paramGetLen(index);
 800d300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d302:	b29b      	uxth	r3, r3
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff f947 	bl	800c598 <paramGetLen>
 800d30a:	4603      	mov	r3, r0
 800d30c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  // First part of data use 4 bytes
  p->size = 4;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2204      	movs	r2, #4
 800d314:	701a      	strb	r2, [r3, #0]

  // Add default value
  if (params[index].getter) {
 800d316:	4b38      	ldr	r3, [pc, #224]	; (800d3f8 <paramPersistentGetState+0x168>)
 800d318:	6819      	ldr	r1, [r3, #0]
 800d31a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	440b      	add	r3, r1
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d017      	beq.n	800d35c <paramPersistentGetState+0xcc>
    memcpy(&p->data[p->size], params[index].getter(), paramLen);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4413      	add	r3, r2
 800d336:	1c9c      	adds	r4, r3, #2
 800d338:	4b2f      	ldr	r3, [pc, #188]	; (800d3f8 <paramPersistentGetState+0x168>)
 800d33a:	6819      	ldr	r1, [r3, #0]
 800d33c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d33e:	4613      	mov	r3, r2
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	4413      	add	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	440b      	add	r3, r1
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	4798      	blx	r3
 800d34c:	4601      	mov	r1, r0
 800d34e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d352:	461a      	mov	r2, r3
 800d354:	4620      	mov	r0, r4
 800d356:	f00f ff34 	bl	801d1c2 <memcpy>
 800d35a:	e00f      	b.n	800d37c <paramPersistentGetState+0xec>
  } else {
    memcpy(&p->data[p->size], paramGetDefault(index), paramLen);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	461a      	mov	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4413      	add	r3, r2
 800d366:	1c9c      	adds	r4, r3, #2
 800d368:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d36a:	f7ff f84f 	bl	800c40c <paramGetDefault>
 800d36e:	4601      	mov	r1, r0
 800d370:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d374:	461a      	mov	r2, r3
 800d376:	4620      	mov	r0, r4
 800d378:	f00f ff23 	bl	801d1c2 <memcpy>
  }
  p->size += paramLen;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	781a      	ldrb	r2, [r3, #0]
 800d380:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d384:	4413      	add	r3, r2
 800d386:	b2da      	uxtb	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	701a      	strb	r2, [r3, #0]

  // Add stored value if avialable
  uint8_t value[8];
  const bool isValueStored = (storageFetch(key, &value, paramLen) > 0);
 800d38c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800d390:	f107 0108 	add.w	r1, r7, #8
 800d394:	f107 0310 	add.w	r3, r7, #16
 800d398:	4618      	mov	r0, r3
 800d39a:	f7f8 fb15 	bl	80059c8 <storageFetch>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	bf14      	ite	ne
 800d3a4:	2301      	movne	r3, #1
 800d3a6:	2300      	moveq	r3, #0
 800d3a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  if (isValueStored) {
 800d3ac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d018      	beq.n	800d3e6 <paramPersistentGetState+0x156>
    p->data[3] = PARAM_PERSISTENT_STORED;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	715a      	strb	r2, [r3, #5]
    memcpy(&p->data[p->size], &value, paramLen);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	3302      	adds	r3, #2
 800d3c6:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800d3ca:	f107 0108 	add.w	r1, r7, #8
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f00f fef7 	bl	801d1c2 <memcpy>
    p->size += paramLen;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	781a      	ldrb	r2, [r3, #0]
 800d3d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d3dc:	4413      	add	r3, r2
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	701a      	strb	r2, [r3, #0]
 800d3e4:	e002      	b.n	800d3ec <paramPersistentGetState+0x15c>
  } else {
    p->data[3] = PARAM_PERSISTENT_NOT_STORED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	715a      	strb	r2, [r3, #5]
  }

  crtpSendPacketBlock(p);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7f4 f953 	bl	8001698 <crtpSendPacketBlock>
}
 800d3f2:	373c      	adds	r7, #60	; 0x3c
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd90      	pop	{r4, r7, pc}
 800d3f8:	20008e60 	.word	0x20008e60

0800d3fc <paramPersistentClear>:

void paramPersistentClear(CRTPPacket *p)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b08c      	sub	sp, #48	; 0x30
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  int index;
  uint16_t id;
  bool result = true;
 800d404:	2301      	movs	r3, #1
 800d406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  memcpy(&id, &p->data[1], 2);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	3303      	adds	r3, #3
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	b29b      	uxth	r3, r3
 800d412:	84fb      	strh	r3, [r7, #38]	; 0x26
  index = variableGetIndex(id);
 800d414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d416:	4618      	mov	r0, r3
 800d418:	f7ff fc2c 	bl	800cc74 <variableGetIndex>
 800d41c:	62b8      	str	r0, [r7, #40]	; 0x28

  if (index < 0) {
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	2b00      	cmp	r3, #0
 800d422:	da09      	bge.n	800d438 <paramPersistentClear+0x3c>
    p->data[3] = ENOENT;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2202      	movs	r2, #2
 800d428:	715a      	strb	r2, [r3, #5]
    p->size = 4;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2204      	movs	r2, #4
 800d42e:	701a      	strb	r2, [r3, #0]
    crtpSendPacketBlock(p);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7f4 f931 	bl	8001698 <crtpSendPacketBlock>
 800d436:	e02a      	b.n	800d48e <paramPersistentClear+0x92>
    return;
  }

  // Assemble key string, e.g. "prm/pid_rate.kp"
  char key[KEY_LEN] = {0};
 800d438:	2300      	movs	r3, #0
 800d43a:	60bb      	str	r3, [r7, #8]
 800d43c:	f107 030c 	add.w	r3, r7, #12
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	605a      	str	r2, [r3, #4]
 800d446:	609a      	str	r2, [r3, #8]
 800d448:	60da      	str	r2, [r3, #12]
 800d44a:	611a      	str	r2, [r3, #16]
 800d44c:	615a      	str	r2, [r3, #20]
 800d44e:	831a      	strh	r2, [r3, #24]
  generateStorageKey(index, key);
 800d450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d452:	b29b      	uxth	r3, r3
 800d454:	f107 0208 	add.w	r2, r7, #8
 800d458:	4611      	mov	r1, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff fe18 	bl	800d090 <generateStorageKey>

  result = storageDelete(key);
 800d460:	f107 0308 	add.w	r3, r7, #8
 800d464:	4618      	mov	r0, r3
 800d466:	f7f8 fad7 	bl	8005a18 <storageDelete>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  p->data[3] = result ? 0: ENOENT;
 800d470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <paramPersistentClear+0x80>
 800d478:	2200      	movs	r2, #0
 800d47a:	e000      	b.n	800d47e <paramPersistentClear+0x82>
 800d47c:	2202      	movs	r2, #2
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	715a      	strb	r2, [r3, #5]
  p->size = 4;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2204      	movs	r2, #4
 800d486:	701a      	strb	r2, [r3, #0]
  crtpSendPacketBlock(p);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7f4 f905 	bl	8001698 <crtpSendPacketBlock>
}
 800d48e:	3730      	adds	r7, #48	; 0x30
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <persistentParamFromStorage>:

static bool persistentParamFromStorage(const char *key, void *buffer, size_t length)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  //
  // The key is of format "prm/group.name", we need group and name.
  //
  char *completeName = (char *) key + strlen(PERSISTENT_PREFIX_STRING);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	617b      	str	r3, [r7, #20]
  paramVarId_t varId = paramGetVarIdFromComplete(completeName);
 800d4a6:	6978      	ldr	r0, [r7, #20]
 800d4a8:	f7ff fc1e 	bl	800cce8 <paramGetVarIdFromComplete>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	613b      	str	r3, [r7, #16]

  if (PARAM_VARID_IS_VALID(varId)) {
 800d4b0:	8a3b      	ldrh	r3, [r7, #16]
 800d4b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d004      	beq.n	800d4c4 <persistentParamFromStorage+0x30>
    paramSet(varId.index, buffer);
 800d4ba:	8a7b      	ldrh	r3, [r7, #18]
 800d4bc:	68b9      	ldr	r1, [r7, #8]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe ffe6 	bl	800c490 <paramSet>
  }

  return true;
 800d4c4:	2301      	movs	r3, #1
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
	...

0800d4d0 <paramLogicStorageInit>:

void paramLogicStorageInit()
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	af00      	add	r7, sp, #0
  storageForeach(PERSISTENT_PREFIX_STRING, persistentParamFromStorage);
 800d4d4:	4902      	ldr	r1, [pc, #8]	; (800d4e0 <paramLogicStorageInit+0x10>)
 800d4d6:	4803      	ldr	r0, [pc, #12]	; (800d4e4 <paramLogicStorageInit+0x14>)
 800d4d8:	f7f8 fa4e 	bl	8005978 <storageForeach>
}
 800d4dc:	bf00      	nop
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	0800d495 	.word	0x0800d495
 800d4e4:	08023570 	.word	0x08023570

0800d4e8 <paramInit>:

STATIC_MEM_TASK_ALLOC(paramTask, PARAM_TASK_STACKSIZE);


void paramInit(void)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af04      	add	r7, sp, #16
  if(isInit) {
 800d4ee:	4b0e      	ldr	r3, [pc, #56]	; (800d528 <paramInit+0x40>)
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d115      	bne.n	800d522 <paramInit+0x3a>
    return;
  }

  paramLogicInit();
 800d4f6:	f7ff f885 	bl	800c604 <paramLogicInit>
  paramLogicStorageInit();
 800d4fa:	f7ff ffe9 	bl	800d4d0 <paramLogicStorageInit>

  //Start the param task
  STATIC_MEM_TASK_CREATE(paramTask, paramTask, PARAM_TASK_NAME, NULL, PARAM_TASK_PRI);
 800d4fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d502:	461a      	mov	r2, r3
 800d504:	4b09      	ldr	r3, [pc, #36]	; (800d52c <paramInit+0x44>)
 800d506:	9302      	str	r3, [sp, #8]
 800d508:	4b09      	ldr	r3, [pc, #36]	; (800d530 <paramInit+0x48>)
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	2301      	movs	r3, #1
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	2300      	movs	r3, #0
 800d512:	4908      	ldr	r1, [pc, #32]	; (800d534 <paramInit+0x4c>)
 800d514:	4808      	ldr	r0, [pc, #32]	; (800d538 <paramInit+0x50>)
 800d516:	f00b fe69 	bl	80191ec <xTaskCreateStatic>

  isInit = true;
 800d51a:	4b03      	ldr	r3, [pc, #12]	; (800d528 <paramInit+0x40>)
 800d51c:	2201      	movs	r2, #1
 800d51e:	701a      	strb	r2, [r3, #0]
 800d520:	e000      	b.n	800d524 <paramInit+0x3c>
    return;
 800d522:	bf00      	nop
}
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}
 800d528:	20008e6e 	.word	0x20008e6e
 800d52c:	20004948 	.word	0x20004948
 800d530:	20008e90 	.word	0x20008e90
 800d534:	0802357c 	.word	0x0802357c
 800d538:	0800d53d 	.word	0x0800d53d

0800d53c <paramTask>:
{
  return isInit;
}

void paramTask(void * prm)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
	crtpInitTaskQueue(CRTP_PORT_PARAM);
 800d544:	2002      	movs	r0, #2
 800d546:	f7f3 ff77 	bl	8001438 <crtpInitTaskQueue>

	while(1) {
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 800d54a:	492f      	ldr	r1, [pc, #188]	; (800d608 <paramTask+0xcc>)
 800d54c:	2002      	movs	r0, #2
 800d54e:	f7f3 ffa3 	bl	8001498 <crtpReceivePacketBlock>

		if (p.channel==TOC_CH)
 800d552:	4b2d      	ldr	r3, [pc, #180]	; (800d608 <paramTask+0xcc>)
 800d554:	785b      	ldrb	r3, [r3, #1]
 800d556:	f003 0303 	and.w	r3, r3, #3
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d106      	bne.n	800d56e <paramTask+0x32>
		  paramTOCProcess(&p, p.data[0]);
 800d560:	4b29      	ldr	r3, [pc, #164]	; (800d608 <paramTask+0xcc>)
 800d562:	789b      	ldrb	r3, [r3, #2]
 800d564:	4619      	mov	r1, r3
 800d566:	4828      	ldr	r0, [pc, #160]	; (800d608 <paramTask+0xcc>)
 800d568:	f7ff f932 	bl	800c7d0 <paramTOCProcess>
 800d56c:	e7ed      	b.n	800d54a <paramTask+0xe>
	  else if (p.channel==READ_CH)
 800d56e:	4b26      	ldr	r3, [pc, #152]	; (800d608 <paramTask+0xcc>)
 800d570:	785b      	ldrb	r3, [r3, #1]
 800d572:	f003 0303 	and.w	r3, r3, #3
 800d576:	b2db      	uxtb	r3, r3
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d103      	bne.n	800d584 <paramTask+0x48>
		  paramReadProcess(&p);
 800d57c:	4822      	ldr	r0, [pc, #136]	; (800d608 <paramTask+0xcc>)
 800d57e:	f7ff fb47 	bl	800cc10 <paramReadProcess>
 800d582:	e7e2      	b.n	800d54a <paramTask+0xe>
		else if (p.channel==WRITE_CH)
 800d584:	4b20      	ldr	r3, [pc, #128]	; (800d608 <paramTask+0xcc>)
 800d586:	785b      	ldrb	r3, [r3, #1]
 800d588:	f003 0303 	and.w	r3, r3, #3
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	2b02      	cmp	r3, #2
 800d590:	d103      	bne.n	800d59a <paramTask+0x5e>
		  paramWriteProcess(&p);
 800d592:	481d      	ldr	r0, [pc, #116]	; (800d608 <paramTask+0xcc>)
 800d594:	f7ff fa50 	bl	800ca38 <paramWriteProcess>
 800d598:	e7d7      	b.n	800d54a <paramTask+0xe>
    else if (p.channel==MISC_CH) {
 800d59a:	4b1b      	ldr	r3, [pc, #108]	; (800d608 <paramTask+0xcc>)
 800d59c:	785b      	ldrb	r3, [r3, #1]
 800d59e:	f003 0303 	and.w	r3, r3, #3
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b03      	cmp	r3, #3
 800d5a6:	d1d0      	bne.n	800d54a <paramTask+0xe>
      switch (p.data[0]) {
 800d5a8:	4b17      	ldr	r3, [pc, #92]	; (800d608 <paramTask+0xcc>)
 800d5aa:	789b      	ldrb	r3, [r3, #2]
 800d5ac:	2b06      	cmp	r3, #6
 800d5ae:	d829      	bhi.n	800d604 <paramTask+0xc8>
 800d5b0:	a201      	add	r2, pc, #4	; (adr r2, 800d5b8 <paramTask+0x7c>)
 800d5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b6:	bf00      	nop
 800d5b8:	0800d5d5 	.word	0x0800d5d5
 800d5bc:	0800d605 	.word	0x0800d605
 800d5c0:	0800d5dd 	.word	0x0800d5dd
 800d5c4:	0800d5e5 	.word	0x0800d5e5
 800d5c8:	0800d5ed 	.word	0x0800d5ed
 800d5cc:	0800d5f5 	.word	0x0800d5f5
 800d5d0:	0800d5fd 	.word	0x0800d5fd
        case MISC_SETBYNAME:
          paramSetByName(&p);
 800d5d4:	480c      	ldr	r0, [pc, #48]	; (800d608 <paramTask+0xcc>)
 800d5d6:	f7ff fca9 	bl	800cf2c <paramSetByName>
          break;
 800d5da:	e014      	b.n	800d606 <paramTask+0xca>
        case MISC_GET_EXTENDED_TYPE:
          paramGetExtendedType(&p);
 800d5dc:	480a      	ldr	r0, [pc, #40]	; (800d608 <paramTask+0xcc>)
 800d5de:	f7ff fd19 	bl	800d014 <paramGetExtendedType>
          break;
 800d5e2:	e010      	b.n	800d606 <paramTask+0xca>
        case MISC_PERSISTENT_STORE:
          paramPersistentStore(&p);
 800d5e4:	4808      	ldr	r0, [pc, #32]	; (800d608 <paramTask+0xcc>)
 800d5e6:	f7ff fd87 	bl	800d0f8 <paramPersistentStore>
          break;
 800d5ea:	e00c      	b.n	800d606 <paramTask+0xca>
        case MISC_PERSISTENT_GET_STATE:
          paramPersistentGetState(&p);
 800d5ec:	4806      	ldr	r0, [pc, #24]	; (800d608 <paramTask+0xcc>)
 800d5ee:	f7ff fe4f 	bl	800d290 <paramPersistentGetState>
          break;
 800d5f2:	e008      	b.n	800d606 <paramTask+0xca>
        case MISC_PERSISTENT_CLEAR:
          paramPersistentClear(&p);
 800d5f4:	4804      	ldr	r0, [pc, #16]	; (800d608 <paramTask+0xcc>)
 800d5f6:	f7ff ff01 	bl	800d3fc <paramPersistentClear>
          break;
 800d5fa:	e004      	b.n	800d606 <paramTask+0xca>
        case MISC_GET_DEFAULT_VALUE:
          paramGetDefaultValue(&p);
 800d5fc:	4802      	ldr	r0, [pc, #8]	; (800d608 <paramTask+0xcc>)
 800d5fe:	f7ff fddb 	bl	800d1b8 <paramGetDefaultValue>
          break;
 800d602:	e000      	b.n	800d606 <paramTask+0xca>
        default:
          break;
 800d604:	bf00      	nop
		crtpReceivePacketBlock(CRTP_PORT_PARAM, &p);
 800d606:	e7a0      	b.n	800d54a <paramTask+0xe>
 800d608:	20008e70 	.word	0x20008e70

0800d60c <pidReset>:
    pid->iLimit = limit;
}


void pidReset(PidObject* pid)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  pid->error     = 0;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f04f 0200 	mov.w	r2, #0
 800d61a:	605a      	str	r2, [r3, #4]
  pid->prevError = 0;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f04f 0200 	mov.w	r2, #0
 800d622:	609a      	str	r2, [r3, #8]
  pid->integ     = 0;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f04f 0200 	mov.w	r2, #0
 800d62a:	60da      	str	r2, [r3, #12]
  pid->deriv     = 0;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f04f 0200 	mov.w	r2, #0
 800d632:	611a      	str	r2, [r3, #16]
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <filterReset>:

void pidSetDt(PidObject* pid, const float dt) {
    pid->dt = dt;
}

void filterReset(PidObject* pid, const float samplingRate, const float cutoffFreq, bool enableDFilter) {
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	ed87 0a02 	vstr	s0, [r7, #8]
 800d64c:	edc7 0a01 	vstr	s1, [r7, #4]
 800d650:	460b      	mov	r3, r1
 800d652:	70fb      	strb	r3, [r7, #3]
  pid->enableDFilter = enableDFilter;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	78fa      	ldrb	r2, [r7, #3]
 800d658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  if (pid->enableDFilter)
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d662:	2b00      	cmp	r3, #0
 800d664:	d008      	beq.n	800d678 <filterReset+0x38>
  {
    lpf2pInit(&pid->dFilter, samplingRate, cutoffFreq);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	3340      	adds	r3, #64	; 0x40
 800d66a:	edd7 0a01 	vldr	s1, [r7, #4]
 800d66e:	ed97 0a02 	vldr	s0, [r7, #8]
 800d672:	4618      	mov	r0, r3
 800d674:	f7f9 f854 	bl	8006720 <lpf2pInit>
  }
}
 800d678:	bf00      	nop
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 800d680:	b590      	push	{r4, r7, lr}
 800d682:	b083      	sub	sp, #12
 800d684:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 800d686:	4b19      	ldr	r3, [pc, #100]	; (800d6ec <queueMonitorInit+0x6c>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	f083 0301 	eor.w	r3, r3, #1
 800d68e:	b2db      	uxtb	r3, r3
 800d690:	2b00      	cmp	r3, #0
 800d692:	d104      	bne.n	800d69e <queueMonitorInit+0x1e>
 800d694:	2248      	movs	r2, #72	; 0x48
 800d696:	4916      	ldr	r1, [pc, #88]	; (800d6f0 <queueMonitorInit+0x70>)
 800d698:	4816      	ldr	r0, [pc, #88]	; (800d6f4 <queueMonitorInit+0x74>)
 800d69a:	f7fd f8fb 	bl	800a894 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 800d69e:	4b16      	ldr	r3, [pc, #88]	; (800d6f8 <queueMonitorInit+0x78>)
 800d6a0:	9301      	str	r3, [sp, #4]
 800d6a2:	4b16      	ldr	r3, [pc, #88]	; (800d6fc <queueMonitorInit+0x7c>)
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f242 7110 	movw	r1, #10000	; 0x2710
 800d6ae:	4814      	ldr	r0, [pc, #80]	; (800d700 <queueMonitorInit+0x80>)
 800d6b0:	f00d f904 	bl	801a8bc <xTimerCreateStatic>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	4a13      	ldr	r2, [pc, #76]	; (800d704 <queueMonitorInit+0x84>)
 800d6b8:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 800d6ba:	4b12      	ldr	r3, [pc, #72]	; (800d704 <queueMonitorInit+0x84>)
 800d6bc:	681c      	ldr	r4, [r3, #0]
 800d6be:	f00c f90b 	bl	80198d8 <xTaskGetTickCount>
 800d6c2:	4602      	mov	r2, r0
 800d6c4:	2364      	movs	r3, #100	; 0x64
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	f00d f969 	bl	801a9a4 <xTimerGenericCommand>

  data[0].fileName = "Na";
 800d6d2:	4b0d      	ldr	r3, [pc, #52]	; (800d708 <queueMonitorInit+0x88>)
 800d6d4:	4a0d      	ldr	r2, [pc, #52]	; (800d70c <queueMonitorInit+0x8c>)
 800d6d6:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 800d6d8:	4b0b      	ldr	r3, [pc, #44]	; (800d708 <queueMonitorInit+0x88>)
 800d6da:	4a0c      	ldr	r2, [pc, #48]	; (800d70c <queueMonitorInit+0x8c>)
 800d6dc:	605a      	str	r2, [r3, #4]

  initialized = true;
 800d6de:	4b03      	ldr	r3, [pc, #12]	; (800d6ec <queueMonitorInit+0x6c>)
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	701a      	strb	r2, [r3, #0]
}
 800d6e4:	bf00      	nop
 800d6e6:	3704      	adds	r7, #4
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd90      	pop	{r4, r7, pc}
 800d6ec:	20009450 	.word	0x20009450
 800d6f0:	08023584 	.word	0x08023584
 800d6f4:	080235a8 	.word	0x080235a8
 800d6f8:	20009424 	.word	0x20009424
 800d6fc:	0800d8ad 	.word	0x0800d8ad
 800d700:	080235b8 	.word	0x080235b8
 800d704:	20009420 	.word	0x20009420
 800d708:	20009290 	.word	0x20009290
 800d70c:	080235cc 	.word	0x080235cc

0800d710 <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 800d71c:	4b18      	ldr	r3, [pc, #96]	; (800d780 <qmRegisterQueue+0x70>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d104      	bne.n	800d72e <qmRegisterQueue+0x1e>
 800d724:	2265      	movs	r2, #101	; 0x65
 800d726:	4917      	ldr	r1, [pc, #92]	; (800d784 <qmRegisterQueue+0x74>)
 800d728:	4817      	ldr	r0, [pc, #92]	; (800d788 <qmRegisterQueue+0x78>)
 800d72a:	f7fd f8b3 	bl	800a894 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 800d72e:	4b17      	ldr	r3, [pc, #92]	; (800d78c <qmRegisterQueue+0x7c>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2b13      	cmp	r3, #19
 800d734:	d904      	bls.n	800d740 <qmRegisterQueue+0x30>
 800d736:	2266      	movs	r2, #102	; 0x66
 800d738:	4912      	ldr	r1, [pc, #72]	; (800d784 <qmRegisterQueue+0x74>)
 800d73a:	4815      	ldr	r0, [pc, #84]	; (800d790 <qmRegisterQueue+0x80>)
 800d73c:	f7fd f8aa 	bl	800a894 <assertFail>
  Data* queueData = &data[nrOfQueues];
 800d740:	4b12      	ldr	r3, [pc, #72]	; (800d78c <qmRegisterQueue+0x7c>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	461a      	mov	r2, r3
 800d746:	4613      	mov	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	4a11      	ldr	r2, [pc, #68]	; (800d794 <qmRegisterQueue+0x84>)
 800d750:	4413      	add	r3, r2
 800d752:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	68ba      	ldr	r2, [r7, #8]
 800d758:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 800d760:	4b0a      	ldr	r3, [pc, #40]	; (800d78c <qmRegisterQueue+0x7c>)
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	4619      	mov	r1, r3
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f00b fbac 	bl	8018ec4 <vQueueSetQueueNumber>

  nrOfQueues++;
 800d76c:	4b07      	ldr	r3, [pc, #28]	; (800d78c <qmRegisterQueue+0x7c>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	3301      	adds	r3, #1
 800d772:	b2da      	uxtb	r2, r3
 800d774:	4b05      	ldr	r3, [pc, #20]	; (800d78c <qmRegisterQueue+0x7c>)
 800d776:	701a      	strb	r2, [r3, #0]
}
 800d778:	bf00      	nop
 800d77a:	3718      	adds	r7, #24
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	20009450 	.word	0x20009450
 800d784:	08023584 	.word	0x08023584
 800d788:	080235d0 	.word	0x080235d0
 800d78c:	20000c34 	.word	0x20000c34
 800d790:	080235dc 	.word	0x080235dc
 800d794:	20009290 	.word	0x20009290

0800d798 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
  int i = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	607b      	str	r3, [r7, #4]
 800d7a6:	e013      	b.n	800d7d0 <debugPrint+0x38>
    Data* queueData = &data[i];
 800d7a8:	687a      	ldr	r2, [r7, #4]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	4413      	add	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4a0d      	ldr	r2, [pc, #52]	; (800d7e8 <debugPrint+0x50>)
 800d7b4:	4413      	add	r3, r2
 800d7b6:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 800d7b8:	6838      	ldr	r0, [r7, #0]
 800d7ba:	f000 f819 	bl	800d7f0 <filter>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d002      	beq.n	800d7ca <debugPrint+0x32>
      debugPrintQueue(queueData);
 800d7c4:	6838      	ldr	r0, [r7, #0]
 800d7c6:	f000 f827 	bl	800d818 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	607b      	str	r3, [r7, #4]
 800d7d0:	4b06      	ldr	r3, [pc, #24]	; (800d7ec <debugPrint+0x54>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	dbe5      	blt.n	800d7a8 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 800d7dc:	f000 f838 	bl	800d850 <resetCounters>
  }
}
 800d7e0:	bf00      	nop
 800d7e2:	3708      	adds	r7, #8
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	20009290 	.word	0x20009290
 800d7ec:	20000c34 	.word	0x20000c34

0800d7f0 <filter>:

static bool filter(Data* queueData) {
 800d7f0:	b480      	push	{r7}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	2b00      	cmp	r3, #0
 800d802:	bf14      	ite	ne
 800d804:	2301      	movne	r3, #1
 800d806:	2300      	moveq	r3, #0
 800d808:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3714      	adds	r7, #20
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 800d818:	b590      	push	{r4, r7, lr}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af02      	add	r7, sp, #8
 800d81e:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6819      	ldr	r1, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6858      	ldr	r0, [r3, #4]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	689c      	ldr	r4, [r3, #8]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	6912      	ldr	r2, [r2, #16]
 800d834:	9201      	str	r2, [sp, #4]
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	4623      	mov	r3, r4
 800d83a:	4602      	mov	r2, r0
 800d83c:	4803      	ldr	r0, [pc, #12]	; (800d84c <debugPrintQueue+0x34>)
 800d83e:	f00f fac9 	bl	801cdd4 <iprintf>
}
 800d842:	bf00      	nop
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	bd90      	pop	{r4, r7, pc}
 800d84a:	bf00      	nop
 800d84c:	08023618 	.word	0x08023618

0800d850 <resetCounters>:

static void resetCounters() {
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
  int i = 0;
 800d856:	2300      	movs	r3, #0
 800d858:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 800d85a:	2300      	movs	r3, #0
 800d85c:	607b      	str	r3, [r7, #4]
 800d85e:	e013      	b.n	800d888 <resetCounters+0x38>
    Data* queueData = &data[i];
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	4613      	mov	r3, r2
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4a0e      	ldr	r2, [pc, #56]	; (800d8a4 <resetCounters+0x54>)
 800d86c:	4413      	add	r3, r2
 800d86e:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	2200      	movs	r2, #0
 800d874:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2200      	movs	r2, #0
 800d87a:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	2200      	movs	r2, #0
 800d880:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	3301      	adds	r3, #1
 800d886:	607b      	str	r3, [r7, #4]
 800d888:	4b07      	ldr	r3, [pc, #28]	; (800d8a8 <resetCounters+0x58>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	461a      	mov	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4293      	cmp	r3, r2
 800d892:	dbe5      	blt.n	800d860 <resetCounters+0x10>
  }
}
 800d894:	bf00      	nop
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	20009290 	.word	0x20009290
 800d8a8:	20000c34 	.word	0x20000c34

0800d8ac <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  debugPrint();
 800d8b4:	f7ff ff70 	bl	800d798 <debugPrint>
}
 800d8b8:	bf00      	nop
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <statsCntRateCounterUpdate>:
    counter->latestCount = 0;
    counter->latestAveragingMs = 0;
    counter->latestRate = 0.0f;
}

float statsCntRateCounterUpdate(statsCntRateCounter_t* counter, uint32_t now_ms) {
 800d8c0:	b480      	push	{r7}
 800d8c2:	b087      	sub	sp, #28
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
    uint32_t dt_ms = now_ms - counter->latestAveragingMs;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	617b      	str	r3, [r7, #20]
    if (dt_ms > counter->intervalMs) {
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d925      	bls.n	800d92a <statsCntRateCounterUpdate+0x6a>
        float dt_s = dt_ms / 1000.0f;
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	ee07 3a90 	vmov	s15, r3
 800d8e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8e8:	eddf 6a15 	vldr	s13, [pc, #84]	; 800d940 <statsCntRateCounterUpdate+0x80>
 800d8ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d8f0:	edc7 7a04 	vstr	s15, [r7, #16]
        float dv = counter->count - counter->latestCount;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	ee07 3a90 	vmov	s15, r3
 800d902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d906:	edc7 7a03 	vstr	s15, [r7, #12]

        counter->latestRate = dv / dt_s;
 800d90a:	edd7 6a03 	vldr	s13, [r7, #12]
 800d90e:	ed97 7a04 	vldr	s14, [r7, #16]
 800d912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	edc3 7a03 	vstr	s15, [r3, #12]

        counter->latestCount = counter->count;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	605a      	str	r2, [r3, #4]
        counter->latestAveragingMs = now_ms;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	609a      	str	r2, [r3, #8]
    }

    return counter->latestRate;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	ee07 3a90 	vmov	s15, r3
}
 800d932:	eeb0 0a67 	vmov.f32	s0, s15
 800d936:	371c      	adds	r7, #28
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr
 800d940:	447a0000 	.word	0x447a0000

0800d944 <statsCntRateLogHandler>:

    logger->logByFunction.data = (void*)logger;
    logger->logByFunction.aquireFloat = statsCntRateLogHandler;
}

float statsCntRateLogHandler(uint32_t timestamp, void* data) {
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
    statsCntRateLogger_t* logger = (statsCntRateLogger_t*)data;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	60fb      	str	r3, [r7, #12]
    return statsCntRateCounterUpdate(&logger->rateCounter, timestamp);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	3308      	adds	r3, #8
 800d956:	6879      	ldr	r1, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff ffb1 	bl	800d8c0 <statsCntRateCounterUpdate>
 800d95e:	eef0 7a40 	vmov.f32	s15, s0
}
 800d962:	eeb0 0a67 	vmov.f32	s0, s15
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <sysLoadInit>:
static int taskTopIndex = 0;
static uint32_t previousTotalRunTime = 0;

static StaticTimer_t timerBuffer;

void sysLoadInit() {
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 800d972:	4b14      	ldr	r3, [pc, #80]	; (800d9c4 <sysLoadInit+0x58>)
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	f083 0301 	eor.w	r3, r3, #1
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d104      	bne.n	800d98a <sysLoadInit+0x1e>
 800d980:	223c      	movs	r2, #60	; 0x3c
 800d982:	4911      	ldr	r1, [pc, #68]	; (800d9c8 <sysLoadInit+0x5c>)
 800d984:	4811      	ldr	r0, [pc, #68]	; (800d9cc <sysLoadInit+0x60>)
 800d986:	f7fc ff85 	bl	800a894 <assertFail>

  xTimerHandle timer = xTimerCreateStatic( "sysLoadMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 800d98a:	4b11      	ldr	r3, [pc, #68]	; (800d9d0 <sysLoadInit+0x64>)
 800d98c:	9301      	str	r3, [sp, #4]
 800d98e:	4b11      	ldr	r3, [pc, #68]	; (800d9d4 <sysLoadInit+0x68>)
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	2300      	movs	r3, #0
 800d994:	2201      	movs	r2, #1
 800d996:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d99a:	480f      	ldr	r0, [pc, #60]	; (800d9d8 <sysLoadInit+0x6c>)
 800d99c:	f00c ff8e 	bl	801a8bc <xTimerCreateStatic>
 800d9a0:	6078      	str	r0, [r7, #4]
  xTimerStart(timer, 100);
 800d9a2:	f00b ff99 	bl	80198d8 <xTaskGetTickCount>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	2364      	movs	r3, #100	; 0x64
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f00c fff7 	bl	801a9a4 <xTimerGenericCommand>

  initialized = true;
 800d9b6:	4b03      	ldr	r3, [pc, #12]	; (800d9c4 <sysLoadInit+0x58>)
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	701a      	strb	r2, [r3, #0]
}
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20009451 	.word	0x20009451
 800d9c8:	08023640 	.word	0x08023640
 800d9cc:	0802365c 	.word	0x0802365c
 800d9d0:	2000945c 	.word	0x2000945c
 800d9d4:	0800da5d 	.word	0x0800da5d
 800d9d8:	0802366c 	.word	0x0802366c

0800d9dc <getPreviousTaskData>:


static taskData_t* getPreviousTaskData(uint32_t xTaskNumber) {
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  // Try to find the task in the list of tasks
  for (int i = 0; i < taskTopIndex; i++) {
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60fb      	str	r3, [r7, #12]
 800d9e8:	e00f      	b.n	800da0a <getPreviousTaskData+0x2e>
    if (previousSnapshot[i].xTaskNumber == xTaskNumber) {
 800d9ea:	4a18      	ldr	r2, [pc, #96]	; (800da4c <getPreviousTaskData+0x70>)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	4413      	add	r3, r2
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d104      	bne.n	800da04 <getPreviousTaskData+0x28>
      return &previousSnapshot[i];
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	00db      	lsls	r3, r3, #3
 800d9fe:	4a13      	ldr	r2, [pc, #76]	; (800da4c <getPreviousTaskData+0x70>)
 800da00:	4413      	add	r3, r2
 800da02:	e01f      	b.n	800da44 <getPreviousTaskData+0x68>
  for (int i = 0; i < taskTopIndex; i++) {
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3301      	adds	r3, #1
 800da08:	60fb      	str	r3, [r7, #12]
 800da0a:	4b11      	ldr	r3, [pc, #68]	; (800da50 <getPreviousTaskData+0x74>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	68fa      	ldr	r2, [r7, #12]
 800da10:	429a      	cmp	r2, r3
 800da12:	dbea      	blt.n	800d9ea <getPreviousTaskData+0xe>
    }
  }

  // Allocate a new entry
  ASSERT(taskTopIndex < TASK_MAX_COUNT);
 800da14:	4b0e      	ldr	r3, [pc, #56]	; (800da50 <getPreviousTaskData+0x74>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b1f      	cmp	r3, #31
 800da1a:	dd04      	ble.n	800da26 <getPreviousTaskData+0x4a>
 800da1c:	224e      	movs	r2, #78	; 0x4e
 800da1e:	490d      	ldr	r1, [pc, #52]	; (800da54 <getPreviousTaskData+0x78>)
 800da20:	480d      	ldr	r0, [pc, #52]	; (800da58 <getPreviousTaskData+0x7c>)
 800da22:	f7fc ff37 	bl	800a894 <assertFail>
  taskData_t* result = &previousSnapshot[taskTopIndex];
 800da26:	4b0a      	ldr	r3, [pc, #40]	; (800da50 <getPreviousTaskData+0x74>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	00db      	lsls	r3, r3, #3
 800da2c:	4a07      	ldr	r2, [pc, #28]	; (800da4c <getPreviousTaskData+0x70>)
 800da2e:	4413      	add	r3, r2
 800da30:	60bb      	str	r3, [r7, #8]
  result->xTaskNumber = xTaskNumber;
 800da32:	68bb      	ldr	r3, [r7, #8]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	605a      	str	r2, [r3, #4]

  taskTopIndex++;
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <getPreviousTaskData+0x74>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3301      	adds	r3, #1
 800da3e:	4a04      	ldr	r2, [pc, #16]	; (800da50 <getPreviousTaskData+0x74>)
 800da40:	6013      	str	r3, [r2, #0]

  return result;
 800da42:	68bb      	ldr	r3, [r7, #8]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20004a00 	.word	0x20004a00
 800da50:	20009454 	.word	0x20009454
 800da54:	08023640 	.word	0x08023640
 800da58:	08023680 	.word	0x08023680

0800da5c <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 800da5c:	b580      	push	{r7, lr}
 800da5e:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 800da62:	af02      	add	r7, sp, #8
 800da64:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800da68:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 800da6c:	6018      	str	r0, [r3, #0]
  if (triggerDump != 0) {
 800da6e:	4b4e      	ldr	r3, [pc, #312]	; (800dba8 <timerHandler+0x14c>)
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 8092 	beq.w	800db9c <timerHandler+0x140>
    uint32_t totalRunTime;

    TaskStatus_t taskStats[TASK_MAX_COUNT];
    uint32_t taskCount = uxTaskGetSystemState(taskStats, TASK_MAX_COUNT, &totalRunTime);
 800da78:	f207 428c 	addw	r2, r7, #1164	; 0x48c
 800da7c:	f107 030c 	add.w	r3, r7, #12
 800da80:	2120      	movs	r1, #32
 800da82:	4618      	mov	r0, r3
 800da84:	f00b ff38 	bl	80198f8 <uxTaskGetSystemState>
 800da88:	f8c7 04a8 	str.w	r0, [r7, #1192]	; 0x4a8
    ASSERT(taskCount < TASK_MAX_COUNT);
 800da8c:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 800da90:	2b1f      	cmp	r3, #31
 800da92:	d904      	bls.n	800da9e <timerHandler+0x42>
 800da94:	225d      	movs	r2, #93	; 0x5d
 800da96:	4945      	ldr	r1, [pc, #276]	; (800dbac <timerHandler+0x150>)
 800da98:	4845      	ldr	r0, [pc, #276]	; (800dbb0 <timerHandler+0x154>)
 800da9a:	f7fc fefb 	bl	800a894 <assertFail>

    uint32_t totalDelta = totalRunTime - previousTotalRunTime;
 800da9e:	f8d7 248c 	ldr.w	r2, [r7, #1164]	; 0x48c
 800daa2:	4b44      	ldr	r3, [pc, #272]	; (800dbb4 <timerHandler+0x158>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
    float f = 100.0 / totalDelta;
 800daac:	f8d7 04a4 	ldr.w	r0, [r7, #1188]	; 0x4a4
 800dab0:	f7f2 fd38 	bl	8000524 <__aeabi_ui2d>
 800dab4:	4602      	mov	r2, r0
 800dab6:	460b      	mov	r3, r1
 800dab8:	f04f 0000 	mov.w	r0, #0
 800dabc:	493e      	ldr	r1, [pc, #248]	; (800dbb8 <timerHandler+0x15c>)
 800dabe:	f7f2 fed5 	bl	800086c <__aeabi_ddiv>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4610      	mov	r0, r2
 800dac8:	4619      	mov	r1, r3
 800daca:	f7f3 f87d 	bl	8000bc8 <__aeabi_d2f>
 800dace:	4603      	mov	r3, r0
 800dad0:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800dad4:	6013      	str	r3, [r2, #0]

    // Dumps the the CPU load and stack usage for all tasks
    // CPU usage is since last dump in % compared to total time spent in tasks. Note that time spent in interrupts will be included in measured time.
    // Stack usage is displayed as nr of unused bytes at peak stack usage.

    DEBUG_PRINT("Task dump\n");
 800dad6:	4939      	ldr	r1, [pc, #228]	; (800dbbc <timerHandler+0x160>)
 800dad8:	2000      	movs	r0, #0
 800dada:	f7fc fead 	bl	800a838 <SEGGER_RTT_printf>
    DEBUG_PRINT("Load\tStack left\tName\n");
 800dade:	4938      	ldr	r1, [pc, #224]	; (800dbc0 <timerHandler+0x164>)
 800dae0:	2000      	movs	r0, #0
 800dae2:	f7fc fea9 	bl	800a838 <SEGGER_RTT_printf>
    for (uint32_t i = 0; i < taskCount; i++) {
 800dae6:	2300      	movs	r3, #0
 800dae8:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800daec:	e049      	b.n	800db82 <timerHandler+0x126>
      TaskStatus_t* stats = &taskStats[i];
 800daee:	f107 010c 	add.w	r1, r7, #12
 800daf2:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 800daf6:	4613      	mov	r3, r2
 800daf8:	00db      	lsls	r3, r3, #3
 800dafa:	4413      	add	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	440b      	add	r3, r1
 800db00:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
      taskData_t* previousTaskData = getPreviousTaskData(stats->xTaskNumber);
 800db04:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff ff66 	bl	800d9dc <getPreviousTaskData>
 800db10:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498

      uint32_t taskRunTime = stats->ulRunTimeCounter;
 800db14:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 800db18:	699b      	ldr	r3, [r3, #24]
 800db1a:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
      float load = f * (taskRunTime - previousTaskData->ulRunTimeCounter);
 800db1e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 800db28:	1ad3      	subs	r3, r2, r3
 800db2a:	ee07 3a90 	vmov	s15, r3
 800db2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db32:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800db36:	ed93 7a00 	vldr	s14, [r3]
 800db3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db3e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800db42:	edc3 7a00 	vstr	s15, [r3]
      DEBUG_PRINT("%.2f \t%u \t%s\n", (double)load, stats->usStackHighWaterMark, stats->pcTaskName);
 800db46:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800db4a:	6818      	ldr	r0, [r3, #0]
 800db4c:	f7f2 fd0c 	bl	8000568 <__aeabi_f2d>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800db58:	8c09      	ldrh	r1, [r1, #32]
 800db5a:	4608      	mov	r0, r1
 800db5c:	f8d7 149c 	ldr.w	r1, [r7, #1180]	; 0x49c
 800db60:	6849      	ldr	r1, [r1, #4]
 800db62:	9101      	str	r1, [sp, #4]
 800db64:	9000      	str	r0, [sp, #0]
 800db66:	4917      	ldr	r1, [pc, #92]	; (800dbc4 <timerHandler+0x168>)
 800db68:	2000      	movs	r0, #0
 800db6a:	f7fc fe65 	bl	800a838 <SEGGER_RTT_printf>

      previousTaskData->ulRunTimeCounter = taskRunTime;
 800db6e:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800db72:	f8d7 2494 	ldr.w	r2, [r7, #1172]	; 0x494
 800db76:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < taskCount; i++) {
 800db78:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 800db7c:	3301      	adds	r3, #1
 800db7e:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 800db82:	f8d7 24ac 	ldr.w	r2, [r7, #1196]	; 0x4ac
 800db86:	f8d7 34a8 	ldr.w	r3, [r7, #1192]	; 0x4a8
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d3af      	bcc.n	800daee <timerHandler+0x92>
    }

    previousTotalRunTime = totalRunTime;
 800db8e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	; 0x48c
 800db92:	4a08      	ldr	r2, [pc, #32]	; (800dbb4 <timerHandler+0x158>)
 800db94:	6013      	str	r3, [r2, #0]

    triggerDump = 0;
 800db96:	4b04      	ldr	r3, [pc, #16]	; (800dba8 <timerHandler+0x14c>)
 800db98:	2200      	movs	r2, #0
 800db9a:	701a      	strb	r2, [r3, #0]
  }
}
 800db9c:	bf00      	nop
 800db9e:	f507 6796 	add.w	r7, r7, #1200	; 0x4b0
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	20009452 	.word	0x20009452
 800dbac:	08023640 	.word	0x08023640
 800dbb0:	080236a0 	.word	0x080236a0
 800dbb4:	20009458 	.word	0x20009458
 800dbb8:	40590000 	.word	0x40590000
 800dbbc:	080236bc 	.word	0x080236bc
 800dbc0:	080236c8 	.word	0x080236c8
 800dbc4:	080236e0 	.word	0x080236e0

0800dbc8 <usecTimerReset>:
static uint32_t usecTimerHighCount;



void usecTimerReset(void)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800dbce:	4b0c      	ldr	r3, [pc, #48]	; (800dc00 <usecTimerReset+0x38>)
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d104      	bne.n	800dbe0 <usecTimerReset+0x18>
 800dbd6:	2211      	movs	r2, #17
 800dbd8:	490a      	ldr	r1, [pc, #40]	; (800dc04 <usecTimerReset+0x3c>)
 800dbda:	480b      	ldr	r0, [pc, #44]	; (800dc08 <usecTimerReset+0x40>)
 800dbdc:	f7fc fe5a 	bl	800a894 <assertFail>

  const uint32_t zero = 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	607b      	str	r3, [r7, #4]
  __atomic_store(&usecTimerHighCount, &zero, __ATOMIC_SEQ_CST);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4a09      	ldr	r2, [pc, #36]	; (800dc0c <usecTimerReset+0x44>)
 800dbe8:	f3bf 8f5b 	dmb	ish
 800dbec:	6013      	str	r3, [r2, #0]
 800dbee:	f3bf 8f5b 	dmb	ish

  TIM7->CNT = 0;
 800dbf2:	4b07      	ldr	r3, [pc, #28]	; (800dc10 <usecTimerReset+0x48>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	20009488 	.word	0x20009488
 800dc04:	08023710 	.word	0x08023710
 800dc08:	08023730 	.word	0x08023730
 800dc0c:	2000948c 	.word	0x2000948c
 800dc10:	40001400 	.word	0x40001400

0800dc14 <usecTimestamp>:

uint64_t usecTimestamp(void)
{
 800dc14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc18:	b08c      	sub	sp, #48	; 0x30
 800dc1a:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800dc1c:	4b2b      	ldr	r3, [pc, #172]	; (800dccc <usecTimestamp+0xb8>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d104      	bne.n	800dc2e <usecTimestamp+0x1a>
 800dc24:	221b      	movs	r2, #27
 800dc26:	492a      	ldr	r1, [pc, #168]	; (800dcd0 <usecTimestamp+0xbc>)
 800dc28:	482a      	ldr	r0, [pc, #168]	; (800dcd4 <usecTimestamp+0xc0>)
 800dc2a:	f7fc fe33 	bl	800a894 <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 800dc2e:	4b2a      	ldr	r3, [pc, #168]	; (800dcd8 <usecTimestamp+0xc4>)
 800dc30:	f3bf 8f5b 	dmb	ish
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f3bf 8f5b 	dmb	ish
 800dc3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t low = TIM7->CNT;
 800dc3c:	4b27      	ldr	r3, [pc, #156]	; (800dcdc <usecTimestamp+0xc8>)
 800dc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc40:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 800dc42:	4b25      	ldr	r3, [pc, #148]	; (800dcd8 <usecTimestamp+0xc4>)
 800dc44:	f3bf 8f5b 	dmb	ish
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f3bf 8f5b 	dmb	ish
 800dc4e:	627b      	str	r3, [r7, #36]	; 0x24

  // There was no increment in between
  if (high == high0)
 800dc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d118      	bne.n	800dc8a <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 800dc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	61bb      	str	r3, [r7, #24]
 800dc5e:	61fa      	str	r2, [r7, #28]
 800dc60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dc64:	460b      	mov	r3, r1
 800dc66:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800dc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc72:	2200      	movs	r2, #0
 800dc74:	613b      	str	r3, [r7, #16]
 800dc76:	617a      	str	r2, [r7, #20]
 800dc78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	eb1a 0403 	adds.w	r4, sl, r3
 800dc82:	4613      	mov	r3, r2
 800dc84:	eb4b 0503 	adc.w	r5, fp, r3
 800dc88:	e018      	b.n	800dcbc <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	60bb      	str	r3, [r7, #8]
 800dc90:	60fa      	str	r2, [r7, #12]
 800dc92:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dc96:	460b      	mov	r3, r1
 800dc98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800dca2:	4b0e      	ldr	r3, [pc, #56]	; (800dcdc <usecTimestamp+0xc8>)
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	2200      	movs	r2, #0
 800dca8:	603b      	str	r3, [r7, #0]
 800dcaa:	607a      	str	r2, [r7, #4]
 800dcac:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	eb18 0403 	adds.w	r4, r8, r3
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	eb49 0503 	adc.w	r5, r9, r3
}
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	3730      	adds	r7, #48	; 0x30
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dccc:	20009488 	.word	0x20009488
 800dcd0:	08023710 	.word	0x08023710
 800dcd4:	08023730 	.word	0x08023730
 800dcd8:	2000948c 	.word	0x2000948c
 800dcdc:	40001400 	.word	0x40001400

0800dce0 <resetParamCallback>:

/**
 * Parameters for the usec timer
 * */
static void resetParamCallback(void)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
  if (reset) {
 800dce4:	4b05      	ldr	r3, [pc, #20]	; (800dcfc <resetParamCallback+0x1c>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d004      	beq.n	800dcf6 <resetParamCallback+0x16>
    usecTimerReset();
 800dcec:	f7ff ff6c 	bl	800dbc8 <usecTimerReset>
    reset = 0;
 800dcf0:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <resetParamCallback+0x1c>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	701a      	strb	r2, [r3, #0]
  }
}
 800dcf6:	bf00      	nop
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20009489 	.word	0x20009489

0800dd00 <workerInit>:

static xQueueHandle workerQueue;
STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af02      	add	r7, sp, #8
  if (workerQueue)
 800dd06:	4b0e      	ldr	r3, [pc, #56]	; (800dd40 <workerInit+0x40>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d114      	bne.n	800dd38 <workerInit+0x38>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 800dd0e:	2305      	movs	r3, #5
 800dd10:	4618      	mov	r0, r3
 800dd12:	2308      	movs	r3, #8
 800dd14:	4619      	mov	r1, r3
 800dd16:	2300      	movs	r3, #0
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	4b0a      	ldr	r3, [pc, #40]	; (800dd44 <workerInit+0x44>)
 800dd1c:	4a0a      	ldr	r2, [pc, #40]	; (800dd48 <workerInit+0x48>)
 800dd1e:	f00a fb55 	bl	80183cc <xQueueGenericCreateStatic>
 800dd22:	4603      	mov	r3, r0
 800dd24:	4a06      	ldr	r2, [pc, #24]	; (800dd40 <workerInit+0x40>)
 800dd26:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(workerQueue);
 800dd28:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <workerInit+0x40>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a07      	ldr	r2, [pc, #28]	; (800dd4c <workerInit+0x4c>)
 800dd2e:	4908      	ldr	r1, [pc, #32]	; (800dd50 <workerInit+0x50>)
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff fced 	bl	800d710 <qmRegisterQueue>
 800dd36:	e000      	b.n	800dd3a <workerInit+0x3a>
    return;
 800dd38:	bf00      	nop
}
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20009490 	.word	0x20009490
 800dd44:	20004b28 	.word	0x20004b28
 800dd48:	20004b00 	.word	0x20004b00
 800dd4c:	080237bc 	.word	0x080237bc
 800dd50:	080237c8 	.word	0x080237c8

0800dd54 <workerSchedule>:
      work.function(work.arg);
  }
}

int workerSchedule(void (*function)(void*), void *arg)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	6039      	str	r1, [r7, #0]
  struct worker_work work;

  if (!function)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <workerSchedule+0x14>
    return ENOEXEC;
 800dd64:	2308      	movs	r3, #8
 800dd66:	e011      	b.n	800dd8c <workerSchedule+0x38>

  work.function = function;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	60bb      	str	r3, [r7, #8]
  work.arg = arg;
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	60fb      	str	r3, [r7, #12]
  if (xQueueSend(workerQueue, &work, 0) == pdFALSE)
 800dd70:	4b08      	ldr	r3, [pc, #32]	; (800dd94 <workerSchedule+0x40>)
 800dd72:	6818      	ldr	r0, [r3, #0]
 800dd74:	f107 0108 	add.w	r1, r7, #8
 800dd78:	2300      	movs	r3, #0
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f00a fc3c 	bl	80185f8 <xQueueGenericSend>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <workerSchedule+0x36>
    return ENOMEM;
 800dd86:	230c      	movs	r3, #12
 800dd88:	e000      	b.n	800dd8c <workerSchedule+0x38>

  return 0;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	20009490 	.word	0x20009490

0800dd98 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	af00      	add	r7, sp, #0

}
 800dd9c:	bf00      	nop
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr

0800dda6 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800dda6:	b480      	push	{r7}
 800dda8:	af00      	add	r7, sp, #0
return 0;
 800ddaa:	2300      	movs	r3, #0
}
 800ddac:	4618      	mov	r0, r3
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800ddb6:	b480      	push	{r7}
 800ddb8:	b083      	sub	sp, #12
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b085      	sub	sp, #20
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	4a07      	ldr	r2, [pc, #28]	; (800ddf8 <vApplicationGetIdleTaskMemory+0x2c>)
 800dddc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	4a06      	ldr	r2, [pc, #24]	; (800ddfc <vApplicationGetIdleTaskMemory+0x30>)
 800dde2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2280      	movs	r2, #128	; 0x80
 800dde8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800ddea:	bf00      	nop
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20009494 	.word	0x20009494
 800ddfc:	2000954c 	.word	0x2000954c

0800de00 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800de00:	b480      	push	{r7}
 800de02:	b085      	sub	sp, #20
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	4a07      	ldr	r2, [pc, #28]	; (800de2c <vApplicationGetTimerTaskMemory+0x2c>)
 800de10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	4a06      	ldr	r2, [pc, #24]	; (800de30 <vApplicationGetTimerTaskMemory+0x30>)
 800de16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de1e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800de20:	bf00      	nop
 800de22:	3714      	adds	r7, #20
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	2000974c 	.word	0x2000974c
 800de30:	20009804 	.word	0x20009804

0800de34 <LL_SPI_SetStandard>:
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	f023 0210 	bic.w	r2, r3, #16
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	431a      	orrs	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	605a      	str	r2, [r3, #4]
}
 800de4e:	bf00      	nop
 800de50:	370c      	adds	r7, #12
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
	...

0800de5c <LL_AHB1_GRP1_EnableClock>:
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800de64:	4b08      	ldr	r3, [pc, #32]	; (800de88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800de66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de68:	4907      	ldr	r1, [pc, #28]	; (800de88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800de70:	4b05      	ldr	r3, [pc, #20]	; (800de88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800de72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	4013      	ands	r3, r2
 800de78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800de7a:	68fb      	ldr	r3, [r7, #12]
}
 800de7c:	bf00      	nop
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr
 800de88:	40023800 	.word	0x40023800

0800de8c <LL_APB2_GRP1_EnableClock>:
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800de94:	4b08      	ldr	r3, [pc, #32]	; (800deb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800de96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de98:	4907      	ldr	r1, [pc, #28]	; (800deb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800dea0:	4b05      	ldr	r3, [pc, #20]	; (800deb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800dea2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4013      	ands	r3, r2
 800dea8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800deaa:	68fb      	ldr	r3, [r7, #12]
}
 800deac:	bf00      	nop
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	40023800 	.word	0x40023800

0800debc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800debc:	b5b0      	push	{r4, r5, r7, lr}
 800debe:	b088      	sub	sp, #32
 800dec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800dec2:	f001 f831 	bl	800ef28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800dec6:	f000 f871 	bl	800dfac <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800deca:	f000 fadb 	bl	800e484 <MX_GPIO_Init>
  MX_DMA_Init();
 800dece:	f000 faa1 	bl	800e414 <MX_DMA_Init>
  MX_USART6_UART_Init();
 800ded2:	f000 fa75 	bl	800e3c0 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800ded6:	f000 fa3d 	bl	800e354 <MX_TIM7_Init>
  MX_SPI1_Init();
 800deda:	f000 f973 	bl	800e1c4 <MX_SPI1_Init>
  MX_ADC1_Init();
 800dede:	f000 f8cd 	bl	800e07c <MX_ADC1_Init>
  MX_ADC2_Init();
 800dee2:	f000 f91d 	bl	800e120 <MX_ADC2_Init>
  MX_TIM3_Init();
 800dee6:	f000 f9bf 	bl	800e268 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  debugInit();
 800deea:	f7fc fe24 	bl	800ab36 <debugInit>
  uartInit();
 800deee:	f7fc fe33 	bl	800ab58 <uartInit>
  uartDmaInit();
 800def2:	f7fc fe4f 	bl	800ab94 <uartDmaInit>
*/


//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 800def6:	4b24      	ldr	r3, [pc, #144]	; (800df88 <main+0xcc>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68da      	ldr	r2, [r3, #12]
 800defc:	4b22      	ldr	r3, [pc, #136]	; (800df88 <main+0xcc>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f042 0220 	orr.w	r2, r2, #32
 800df04:	60da      	str	r2, [r3, #12]


  freertos_IntroTitle();
 800df06:	f000 fb49 	bl	800e59c <freertos_IntroTitle>

  check_enter_bootloader();
 800df0a:	f7f6 fd79 	bl	8004a00 <check_enter_bootloader>

  int err = platformInit();
 800df0e:	f7fb fd54 	bl	80099ba <platformInit>
 800df12:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d000      	beq.n	800df1c <main+0x60>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 800df1a:	e7fe      	b.n	800df1a <main+0x5e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 800df1c:	481b      	ldr	r0, [pc, #108]	; (800df8c <main+0xd0>)
 800df1e:	f004 fabb 	bl	8012498 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 800df22:	4b1b      	ldr	r3, [pc, #108]	; (800df90 <main+0xd4>)
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	4a1b      	ldr	r2, [pc, #108]	; (800df94 <main+0xd8>)
 800df28:	6013      	str	r3, [r2, #0]
//  vTaskDelay(M2T(2000));
  delay_us(1000);	// 1002 us
 800df2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800df2e:	f000 fbc1 	bl	800e6b4 <delay_us>
//  vTaskDelay(1);	// 입력값에 상관없이 약 7us, 정상적인 동작 안됨
//  usDelay(10);
//  HAL_Delay(1);		// 1350 us
  t2 = DWT->CYCCNT;
 800df32:	4b17      	ldr	r3, [pc, #92]	; (800df90 <main+0xd4>)
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	4a18      	ldr	r2, [pc, #96]	; (800df98 <main+0xdc>)
 800df38:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 800df3a:	4814      	ldr	r0, [pc, #80]	; (800df8c <main+0xd0>)
 800df3c:	f004 fb1c 	bl	8012578 <HAL_TIM_Base_Stop_IT>
  //  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
  DEBUG_PRINT("delay = %d(us)\n",(uint32_t)(t2-t1)/CLOCK_PER_USEC);
 800df40:	4b15      	ldr	r3, [pc, #84]	; (800df98 <main+0xdc>)
 800df42:	681a      	ldr	r2, [r3, #0]
 800df44:	4b13      	ldr	r3, [pc, #76]	; (800df94 <main+0xd8>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	4a14      	ldr	r2, [pc, #80]	; (800df9c <main+0xe0>)
 800df4c:	fba2 2303 	umull	r2, r3, r2, r3
 800df50:	091b      	lsrs	r3, r3, #4
 800df52:	461a      	mov	r2, r3
 800df54:	4912      	ldr	r1, [pc, #72]	; (800dfa0 <main+0xe4>)
 800df56:	2000      	movs	r0, #0
 800df58:	f7fc fc6e 	bl	800a838 <SEGGER_RTT_printf>

	  DEBUG_PRINT("ADC Measure - Current:[%04d]\t Voltage:[%04d]\n", adc1Val, adc2Val);
	  delay_us(1000);
  }
*/
  systemLaunch();
 800df5c:	f7f7 fde4 	bl	8005b28 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800df60:	4b10      	ldr	r3, [pc, #64]	; (800dfa4 <main+0xe8>)
 800df62:	463c      	mov	r4, r7
 800df64:	461d      	mov	r5, r3
 800df66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800df6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800df72:	463b      	mov	r3, r7
 800df74:	2100      	movs	r1, #0
 800df76:	4618      	mov	r0, r3
 800df78:	f00a f8a5 	bl	80180c6 <osThreadCreate>
 800df7c:	4603      	mov	r3, r0
 800df7e:	4a0a      	ldr	r2, [pc, #40]	; (800dfa8 <main+0xec>)
 800df80:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800df82:	f00a f899 	bl	80180b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800df86:	e7fe      	b.n	800df86 <main+0xca>
 800df88:	2000a1e4 	.word	0x2000a1e4
 800df8c:	2000a19c 	.word	0x2000a19c
 800df90:	e0001000 	.word	0xe0001000
 800df94:	2000a2f0 	.word	0x2000a2f0
 800df98:	2000a2f4 	.word	0x2000a2f4
 800df9c:	38e38e39 	.word	0x38e38e39
 800dfa0:	080237e4 	.word	0x080237e4
 800dfa4:	08023800 	.word	0x08023800
 800dfa8:	2000a2ec 	.word	0x2000a2ec

0800dfac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b094      	sub	sp, #80	; 0x50
 800dfb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dfb2:	f107 0320 	add.w	r3, r7, #32
 800dfb6:	2230      	movs	r2, #48	; 0x30
 800dfb8:	2100      	movs	r1, #0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f00e fffc 	bl	801cfb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dfc0:	f107 030c 	add.w	r3, r7, #12
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	601a      	str	r2, [r3, #0]
 800dfc8:	605a      	str	r2, [r3, #4]
 800dfca:	609a      	str	r2, [r3, #8]
 800dfcc:	60da      	str	r2, [r3, #12]
 800dfce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	60bb      	str	r3, [r7, #8]
 800dfd4:	4b27      	ldr	r3, [pc, #156]	; (800e074 <SystemClock_Config+0xc8>)
 800dfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfd8:	4a26      	ldr	r2, [pc, #152]	; (800e074 <SystemClock_Config+0xc8>)
 800dfda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfde:	6413      	str	r3, [r2, #64]	; 0x40
 800dfe0:	4b24      	ldr	r3, [pc, #144]	; (800e074 <SystemClock_Config+0xc8>)
 800dfe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfe8:	60bb      	str	r3, [r7, #8]
 800dfea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800dfec:	2300      	movs	r3, #0
 800dfee:	607b      	str	r3, [r7, #4]
 800dff0:	4b21      	ldr	r3, [pc, #132]	; (800e078 <SystemClock_Config+0xcc>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a20      	ldr	r2, [pc, #128]	; (800e078 <SystemClock_Config+0xcc>)
 800dff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dffa:	6013      	str	r3, [r2, #0]
 800dffc:	4b1e      	ldr	r3, [pc, #120]	; (800e078 <SystemClock_Config+0xcc>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e004:	607b      	str	r3, [r7, #4]
 800e006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e008:	2301      	movs	r3, #1
 800e00a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e00c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e012:	2302      	movs	r3, #2
 800e014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e01a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e01c:	2304      	movs	r3, #4
 800e01e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800e020:	2348      	movs	r3, #72	; 0x48
 800e022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e024:	2302      	movs	r3, #2
 800e026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800e028:	2303      	movs	r3, #3
 800e02a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e02c:	f107 0320 	add.w	r3, r7, #32
 800e030:	4618      	mov	r0, r3
 800e032:	f003 fd49 	bl	8011ac8 <HAL_RCC_OscConfig>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e03c:	f000 fb66 	bl	800e70c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e040:	230f      	movs	r3, #15
 800e042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e044:	2302      	movs	r3, #2
 800e046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e048:	2300      	movs	r3, #0
 800e04a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800e04c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e052:	2300      	movs	r3, #0
 800e054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800e056:	f107 030c 	add.w	r3, r7, #12
 800e05a:	2102      	movs	r1, #2
 800e05c:	4618      	mov	r0, r3
 800e05e:	f003 ffab 	bl	8011fb8 <HAL_RCC_ClockConfig>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d001      	beq.n	800e06c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800e068:	f000 fb50 	bl	800e70c <Error_Handler>
  }
}
 800e06c:	bf00      	nop
 800e06e:	3750      	adds	r7, #80	; 0x50
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	40023800 	.word	0x40023800
 800e078:	40007000 	.word	0x40007000

0800e07c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b084      	sub	sp, #16
 800e080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e082:	463b      	mov	r3, r7
 800e084:	2200      	movs	r2, #0
 800e086:	601a      	str	r2, [r3, #0]
 800e088:	605a      	str	r2, [r3, #4]
 800e08a:	609a      	str	r2, [r3, #8]
 800e08c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800e08e:	4b21      	ldr	r3, [pc, #132]	; (800e114 <MX_ADC1_Init+0x98>)
 800e090:	4a21      	ldr	r2, [pc, #132]	; (800e118 <MX_ADC1_Init+0x9c>)
 800e092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800e094:	4b1f      	ldr	r3, [pc, #124]	; (800e114 <MX_ADC1_Init+0x98>)
 800e096:	2200      	movs	r2, #0
 800e098:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e09a:	4b1e      	ldr	r3, [pc, #120]	; (800e114 <MX_ADC1_Init+0x98>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800e0a0:	4b1c      	ldr	r3, [pc, #112]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e0a6:	4b1b      	ldr	r3, [pc, #108]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e0ac:	4b19      	ldr	r3, [pc, #100]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e0b4:	4b17      	ldr	r3, [pc, #92]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e0ba:	4b16      	ldr	r3, [pc, #88]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0bc:	4a17      	ldr	r2, [pc, #92]	; (800e11c <MX_ADC1_Init+0xa0>)
 800e0be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e0c0:	4b14      	ldr	r3, [pc, #80]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e0c6:	4b13      	ldr	r3, [pc, #76]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e0cc:	4b11      	ldr	r3, [pc, #68]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e0d4:	4b0f      	ldr	r3, [pc, #60]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e0da:	480e      	ldr	r0, [pc, #56]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0dc:	f000 ffba 	bl	800f054 <HAL_ADC_Init>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800e0e6:	f000 fb11 	bl	800e70c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800e0ea:	230b      	movs	r3, #11
 800e0ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800e0f2:	2307      	movs	r3, #7
 800e0f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	4806      	ldr	r0, [pc, #24]	; (800e114 <MX_ADC1_Init+0x98>)
 800e0fc:	f001 f91c 	bl	800f338 <HAL_ADC_ConfigChannel>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800e106:	f000 fb01 	bl	800e70c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e10a:	bf00      	nop
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	2000a004 	.word	0x2000a004
 800e118:	40012000 	.word	0x40012000
 800e11c:	0f000001 	.word	0x0f000001

0800e120 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e126:	463b      	mov	r3, r7
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	605a      	str	r2, [r3, #4]
 800e12e:	609a      	str	r2, [r3, #8]
 800e130:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800e132:	4b21      	ldr	r3, [pc, #132]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e134:	4a21      	ldr	r2, [pc, #132]	; (800e1bc <MX_ADC2_Init+0x9c>)
 800e136:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800e138:	4b1f      	ldr	r3, [pc, #124]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800e13e:	4b1e      	ldr	r3, [pc, #120]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e140:	2200      	movs	r2, #0
 800e142:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800e144:	4b1c      	ldr	r3, [pc, #112]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e146:	2200      	movs	r2, #0
 800e148:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800e14a:	4b1b      	ldr	r3, [pc, #108]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e14c:	2201      	movs	r2, #1
 800e14e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e150:	4b19      	ldr	r3, [pc, #100]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e158:	4b17      	ldr	r3, [pc, #92]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e15e:	4b16      	ldr	r3, [pc, #88]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e160:	4a17      	ldr	r2, [pc, #92]	; (800e1c0 <MX_ADC2_Init+0xa0>)
 800e162:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e164:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e166:	2200      	movs	r2, #0
 800e168:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800e16a:	4b13      	ldr	r3, [pc, #76]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e16c:	2201      	movs	r2, #1
 800e16e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e170:	4b11      	ldr	r3, [pc, #68]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e172:	2201      	movs	r2, #1
 800e174:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e178:	4b0f      	ldr	r3, [pc, #60]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e17a:	2201      	movs	r2, #1
 800e17c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800e17e:	480e      	ldr	r0, [pc, #56]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e180:	f000 ff68 	bl	800f054 <HAL_ADC_Init>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800e18a:	f000 fabf 	bl	800e70c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800e18e:	230c      	movs	r3, #12
 800e190:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e192:	2301      	movs	r3, #1
 800e194:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800e196:	2307      	movs	r3, #7
 800e198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e19a:	463b      	mov	r3, r7
 800e19c:	4619      	mov	r1, r3
 800e19e:	4806      	ldr	r0, [pc, #24]	; (800e1b8 <MX_ADC2_Init+0x98>)
 800e1a0:	f001 f8ca 	bl	800f338 <HAL_ADC_ConfigChannel>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800e1aa:	f000 faaf 	bl	800e70c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800e1ae:	bf00      	nop
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	2000a04c 	.word	0x2000a04c
 800e1bc:	40012100 	.word	0x40012100
 800e1c0:	0f000001 	.word	0x0f000001

0800e1c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b090      	sub	sp, #64	; 0x40
 800e1c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800e1ca:	f107 0318 	add.w	r3, r7, #24
 800e1ce:	2228      	movs	r2, #40	; 0x28
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f00e fef0 	bl	801cfb8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1d8:	463b      	mov	r3, r7
 800e1da:	2200      	movs	r2, #0
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	605a      	str	r2, [r3, #4]
 800e1e0:	609a      	str	r2, [r3, #8]
 800e1e2:	60da      	str	r2, [r3, #12]
 800e1e4:	611a      	str	r2, [r3, #16]
 800e1e6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800e1e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e1ec:	f7ff fe4e 	bl	800de8c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800e1f0:	2001      	movs	r0, #1
 800e1f2:	f7ff fe33 	bl	800de5c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800e1f6:	23e0      	movs	r3, #224	; 0xe0
 800e1f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800e1fe:	2303      	movs	r3, #3
 800e200:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800e202:	2300      	movs	r3, #0
 800e204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800e206:	2300      	movs	r3, #0
 800e208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800e20a:	2305      	movs	r3, #5
 800e20c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e20e:	463b      	mov	r3, r7
 800e210:	4619      	mov	r1, r3
 800e212:	4813      	ldr	r0, [pc, #76]	; (800e260 <MX_SPI1_Init+0x9c>)
 800e214:	f006 fb77 	bl	8014906 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800e218:	2300      	movs	r3, #0
 800e21a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800e21c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e220:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800e222:	2300      	movs	r3, #0
 800e224:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800e226:	2302      	movs	r3, #2
 800e228:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800e22a:	2301      	movs	r3, #1
 800e22c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800e22e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e232:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800e234:	2310      	movs	r3, #16
 800e236:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800e238:	2300      	movs	r3, #0
 800e23a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800e240:	230a      	movs	r3, #10
 800e242:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800e244:	f107 0318 	add.w	r3, r7, #24
 800e248:	4619      	mov	r1, r3
 800e24a:	4806      	ldr	r0, [pc, #24]	; (800e264 <MX_SPI1_Init+0xa0>)
 800e24c:	f006 fbff 	bl	8014a4e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800e250:	2100      	movs	r1, #0
 800e252:	4804      	ldr	r0, [pc, #16]	; (800e264 <MX_SPI1_Init+0xa0>)
 800e254:	f7ff fdee 	bl	800de34 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800e258:	bf00      	nop
 800e25a:	3740      	adds	r7, #64	; 0x40
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	40020000 	.word	0x40020000
 800e264:	40013000 	.word	0x40013000

0800e268 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08e      	sub	sp, #56	; 0x38
 800e26c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e26e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	605a      	str	r2, [r3, #4]
 800e278:	609a      	str	r2, [r3, #8]
 800e27a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e27c:	f107 0320 	add.w	r3, r7, #32
 800e280:	2200      	movs	r2, #0
 800e282:	601a      	str	r2, [r3, #0]
 800e284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e286:	1d3b      	adds	r3, r7, #4
 800e288:	2200      	movs	r2, #0
 800e28a:	601a      	str	r2, [r3, #0]
 800e28c:	605a      	str	r2, [r3, #4]
 800e28e:	609a      	str	r2, [r3, #8]
 800e290:	60da      	str	r2, [r3, #12]
 800e292:	611a      	str	r2, [r3, #16]
 800e294:	615a      	str	r2, [r3, #20]
 800e296:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e298:	4b2c      	ldr	r3, [pc, #176]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e29a:	4a2d      	ldr	r2, [pc, #180]	; (800e350 <MX_TIM3_Init+0xe8>)
 800e29c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800e29e:	4b2b      	ldr	r3, [pc, #172]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e2a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e2a6:	4b29      	ldr	r3, [pc, #164]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 71;
 800e2ac:	4b27      	ldr	r3, [pc, #156]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2ae:	2247      	movs	r2, #71	; 0x47
 800e2b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e2b2:	4b26      	ldr	r3, [pc, #152]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e2b8:	4b24      	ldr	r3, [pc, #144]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e2be:	4823      	ldr	r0, [pc, #140]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2c0:	f004 f89a 	bl	80123f8 <HAL_TIM_Base_Init>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800e2ca:	f000 fa1f 	bl	800e70c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e2ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e2d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e2d8:	4619      	mov	r1, r3
 800e2da:	481c      	ldr	r0, [pc, #112]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2dc:	f004 fcbe 	bl	8012c5c <HAL_TIM_ConfigClockSource>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800e2e6:	f000 fa11 	bl	800e70c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800e2ea:	4818      	ldr	r0, [pc, #96]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e2ec:	f004 f973 	bl	80125d6 <HAL_TIM_PWM_Init>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800e2f6:	f000 fa09 	bl	800e70c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e2fe:	2300      	movs	r3, #0
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e302:	f107 0320 	add.w	r3, r7, #32
 800e306:	4619      	mov	r1, r3
 800e308:	4810      	ldr	r0, [pc, #64]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e30a:	f005 f8bd 	bl	8013488 <HAL_TIMEx_MasterConfigSynchronization>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d001      	beq.n	800e318 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800e314:	f000 f9fa 	bl	800e70c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e318:	2360      	movs	r3, #96	; 0x60
 800e31a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 36;
 800e31c:	2324      	movs	r3, #36	; 0x24
 800e31e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e320:	2300      	movs	r3, #0
 800e322:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e324:	2300      	movs	r3, #0
 800e326:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e328:	1d3b      	adds	r3, r7, #4
 800e32a:	2200      	movs	r2, #0
 800e32c:	4619      	mov	r1, r3
 800e32e:	4807      	ldr	r0, [pc, #28]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e330:	f004 fbd2 	bl	8012ad8 <HAL_TIM_PWM_ConfigChannel>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800e33a:	f000 f9e7 	bl	800e70c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800e33e:	4803      	ldr	r0, [pc, #12]	; (800e34c <MX_TIM3_Init+0xe4>)
 800e340:	f000 fb38 	bl	800e9b4 <HAL_TIM_MspPostInit>

}
 800e344:	bf00      	nop
 800e346:	3738      	adds	r7, #56	; 0x38
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	2000a154 	.word	0x2000a154
 800e350:	40000400 	.word	0x40000400

0800e354 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e35a:	463b      	mov	r3, r7
 800e35c:	2200      	movs	r2, #0
 800e35e:	601a      	str	r2, [r3, #0]
 800e360:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800e362:	4b15      	ldr	r3, [pc, #84]	; (800e3b8 <MX_TIM7_Init+0x64>)
 800e364:	4a15      	ldr	r2, [pc, #84]	; (800e3bc <MX_TIM7_Init+0x68>)
 800e366:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 800e368:	4b13      	ldr	r3, [pc, #76]	; (800e3b8 <MX_TIM7_Init+0x64>)
 800e36a:	2247      	movs	r2, #71	; 0x47
 800e36c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e36e:	4b12      	ldr	r3, [pc, #72]	; (800e3b8 <MX_TIM7_Init+0x64>)
 800e370:	2200      	movs	r2, #0
 800e372:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800e374:	4b10      	ldr	r3, [pc, #64]	; (800e3b8 <MX_TIM7_Init+0x64>)
 800e376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e37a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e37c:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <MX_TIM7_Init+0x64>)
 800e37e:	2200      	movs	r2, #0
 800e380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800e382:	480d      	ldr	r0, [pc, #52]	; (800e3b8 <MX_TIM7_Init+0x64>)
 800e384:	f004 f838 	bl	80123f8 <HAL_TIM_Base_Init>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d001      	beq.n	800e392 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800e38e:	f000 f9bd 	bl	800e70c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e392:	2300      	movs	r3, #0
 800e394:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e396:	2300      	movs	r3, #0
 800e398:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800e39a:	463b      	mov	r3, r7
 800e39c:	4619      	mov	r1, r3
 800e39e:	4806      	ldr	r0, [pc, #24]	; (800e3b8 <MX_TIM7_Init+0x64>)
 800e3a0:	f005 f872 	bl	8013488 <HAL_TIMEx_MasterConfigSynchronization>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800e3aa:	f000 f9af 	bl	800e70c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	2000a19c 	.word	0x2000a19c
 800e3bc:	40001400 	.word	0x40001400

0800e3c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800e3c4:	4b11      	ldr	r3, [pc, #68]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3c6:	4a12      	ldr	r2, [pc, #72]	; (800e410 <MX_USART6_UART_Init+0x50>)
 800e3c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800e3ca:	4b10      	ldr	r3, [pc, #64]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e3d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e3d2:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e3de:	4b0b      	ldr	r3, [pc, #44]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e3e4:	4b09      	ldr	r3, [pc, #36]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3e6:	220c      	movs	r2, #12
 800e3e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e3ea:	4b08      	ldr	r3, [pc, #32]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e3f0:	4b06      	ldr	r3, [pc, #24]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800e3f6:	4805      	ldr	r0, [pc, #20]	; (800e40c <MX_USART6_UART_Init+0x4c>)
 800e3f8:	f005 f8d6 	bl	80135a8 <HAL_UART_Init>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d001      	beq.n	800e406 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800e402:	f000 f983 	bl	800e70c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800e406:	bf00      	nop
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	2000a1e4 	.word	0x2000a1e4
 800e410:	40011400 	.word	0x40011400

0800e414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e41a:	2300      	movs	r3, #0
 800e41c:	607b      	str	r3, [r7, #4]
 800e41e:	4b18      	ldr	r3, [pc, #96]	; (800e480 <MX_DMA_Init+0x6c>)
 800e420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e422:	4a17      	ldr	r2, [pc, #92]	; (800e480 <MX_DMA_Init+0x6c>)
 800e424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e428:	6313      	str	r3, [r2, #48]	; 0x30
 800e42a:	4b15      	ldr	r3, [pc, #84]	; (800e480 <MX_DMA_Init+0x6c>)
 800e42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e42e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e432:	607b      	str	r3, [r7, #4]
 800e434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800e436:	2200      	movs	r2, #0
 800e438:	2105      	movs	r1, #5
 800e43a:	2038      	movs	r0, #56	; 0x38
 800e43c:	f001 faf7 	bl	800fa2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e440:	2038      	movs	r0, #56	; 0x38
 800e442:	f001 fb10 	bl	800fa66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800e446:	2200      	movs	r2, #0
 800e448:	2105      	movs	r1, #5
 800e44a:	2039      	movs	r0, #57	; 0x39
 800e44c:	f001 faef 	bl	800fa2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800e450:	2039      	movs	r0, #57	; 0x39
 800e452:	f001 fb08 	bl	800fa66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800e456:	2200      	movs	r2, #0
 800e458:	2105      	movs	r1, #5
 800e45a:	203a      	movs	r0, #58	; 0x3a
 800e45c:	f001 fae7 	bl	800fa2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800e460:	203a      	movs	r0, #58	; 0x3a
 800e462:	f001 fb00 	bl	800fa66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800e466:	2200      	movs	r2, #0
 800e468:	2105      	movs	r1, #5
 800e46a:	2046      	movs	r0, #70	; 0x46
 800e46c:	f001 fadf 	bl	800fa2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800e470:	2046      	movs	r0, #70	; 0x46
 800e472:	f001 faf8 	bl	800fa66 <HAL_NVIC_EnableIRQ>

}
 800e476:	bf00      	nop
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	40023800 	.word	0x40023800

0800e484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b08a      	sub	sp, #40	; 0x28
 800e488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e48a:	f107 0314 	add.w	r3, r7, #20
 800e48e:	2200      	movs	r2, #0
 800e490:	601a      	str	r2, [r3, #0]
 800e492:	605a      	str	r2, [r3, #4]
 800e494:	609a      	str	r2, [r3, #8]
 800e496:	60da      	str	r2, [r3, #12]
 800e498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e49a:	2300      	movs	r3, #0
 800e49c:	613b      	str	r3, [r7, #16]
 800e49e:	4b36      	ldr	r3, [pc, #216]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a2:	4a35      	ldr	r2, [pc, #212]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4a8:	6313      	str	r3, [r2, #48]	; 0x30
 800e4aa:	4b33      	ldr	r3, [pc, #204]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4b2:	613b      	str	r3, [r7, #16]
 800e4b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	60fb      	str	r3, [r7, #12]
 800e4ba:	4b2f      	ldr	r3, [pc, #188]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4be:	4a2e      	ldr	r2, [pc, #184]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4c0:	f043 0304 	orr.w	r3, r3, #4
 800e4c4:	6313      	str	r3, [r2, #48]	; 0x30
 800e4c6:	4b2c      	ldr	r3, [pc, #176]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ca:	f003 0304 	and.w	r3, r3, #4
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	60bb      	str	r3, [r7, #8]
 800e4d6:	4b28      	ldr	r3, [pc, #160]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4da:	4a27      	ldr	r2, [pc, #156]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4dc:	f043 0301 	orr.w	r3, r3, #1
 800e4e0:	6313      	str	r3, [r2, #48]	; 0x30
 800e4e2:	4b25      	ldr	r3, [pc, #148]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e6:	f003 0301 	and.w	r3, r3, #1
 800e4ea:	60bb      	str	r3, [r7, #8]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	607b      	str	r3, [r7, #4]
 800e4f2:	4b21      	ldr	r3, [pc, #132]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f6:	4a20      	ldr	r2, [pc, #128]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e4f8:	f043 0302 	orr.w	r3, r3, #2
 800e4fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e4fe:	4b1e      	ldr	r3, [pc, #120]	; (800e578 <MX_GPIO_Init+0xf4>)
 800e500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e502:	f003 0302 	and.w	r3, r3, #2
 800e506:	607b      	str	r3, [r7, #4]
 800e508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 800e50a:	2201      	movs	r2, #1
 800e50c:	2110      	movs	r1, #16
 800e50e:	481b      	ldr	r0, [pc, #108]	; (800e57c <MX_GPIO_Init+0xf8>)
 800e510:	f002 f870 	bl	80105f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800e514:	2200      	movs	r2, #0
 800e516:	2120      	movs	r1, #32
 800e518:	4819      	ldr	r0, [pc, #100]	; (800e580 <MX_GPIO_Init+0xfc>)
 800e51a:	f002 f86b 	bl	80105f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 800e51e:	2310      	movs	r3, #16
 800e520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e522:	2301      	movs	r3, #1
 800e524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e526:	2300      	movs	r3, #0
 800e528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e52a:	2303      	movs	r3, #3
 800e52c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 800e52e:	f107 0314 	add.w	r3, r7, #20
 800e532:	4619      	mov	r1, r3
 800e534:	4811      	ldr	r0, [pc, #68]	; (800e57c <MX_GPIO_Init+0xf8>)
 800e536:	f001 fec1 	bl	80102bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 800e53a:	2310      	movs	r3, #16
 800e53c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e53e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e544:	2300      	movs	r3, #0
 800e546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 800e548:	f107 0314 	add.w	r3, r7, #20
 800e54c:	4619      	mov	r1, r3
 800e54e:	480d      	ldr	r0, [pc, #52]	; (800e584 <MX_GPIO_Init+0x100>)
 800e550:	f001 feb4 	bl	80102bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 800e554:	2320      	movs	r3, #32
 800e556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e558:	2301      	movs	r3, #1
 800e55a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e55c:	2300      	movs	r3, #0
 800e55e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e560:	2300      	movs	r3, #0
 800e562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 800e564:	f107 0314 	add.w	r3, r7, #20
 800e568:	4619      	mov	r1, r3
 800e56a:	4805      	ldr	r0, [pc, #20]	; (800e580 <MX_GPIO_Init+0xfc>)
 800e56c:	f001 fea6 	bl	80102bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800e570:	bf00      	nop
 800e572:	3728      	adds	r7, #40	; 0x28
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	40023800 	.word	0x40023800
 800e57c:	40020000 	.word	0x40020000
 800e580:	40020400 	.word	0x40020400
 800e584:	40020800 	.word	0x40020800

0800e588 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 800e588:	b480      	push	{r7}
 800e58a:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 800e58c:	4b02      	ldr	r3, [pc, #8]	; (800e598 <OSVersion+0x10>)
}
 800e58e:	4618      	mov	r0, r3
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	0802381c 	.word	0x0802381c

0800e59c <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 800e5a0:	492e      	ldr	r1, [pc, #184]	; (800e65c <freertos_IntroTitle+0xc0>)
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	f7fc f948 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 800e5a8:	492d      	ldr	r1, [pc, #180]	; (800e660 <freertos_IntroTitle+0xc4>)
 800e5aa:	2000      	movs	r0, #0
 800e5ac:	f7fc f944 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 800e5b0:	492c      	ldr	r1, [pc, #176]	; (800e664 <freertos_IntroTitle+0xc8>)
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	f7fc f940 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 800e5b8:	492b      	ldr	r1, [pc, #172]	; (800e668 <freertos_IntroTitle+0xcc>)
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	f7fc f93c 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 800e5c0:	492a      	ldr	r1, [pc, #168]	; (800e66c <freertos_IntroTitle+0xd0>)
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	f7fc f938 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 800e5c8:	4929      	ldr	r1, [pc, #164]	; (800e670 <freertos_IntroTitle+0xd4>)
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	f7fc f934 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 800e5d0:	4928      	ldr	r1, [pc, #160]	; (800e674 <freertos_IntroTitle+0xd8>)
 800e5d2:	2000      	movs	r0, #0
 800e5d4:	f7fc f930 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 800e5d8:	4927      	ldr	r1, [pc, #156]	; (800e678 <freertos_IntroTitle+0xdc>)
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f7fc f92c 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 800e5e0:	4926      	ldr	r1, [pc, #152]	; (800e67c <freertos_IntroTitle+0xe0>)
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	f7fc f928 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 800e5e8:	4925      	ldr	r1, [pc, #148]	; (800e680 <freertos_IntroTitle+0xe4>)
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	f7fc f924 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 800e5f0:	4924      	ldr	r1, [pc, #144]	; (800e684 <freertos_IntroTitle+0xe8>)
 800e5f2:	2000      	movs	r0, #0
 800e5f4:	f7fc f920 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 800e5f8:	4923      	ldr	r1, [pc, #140]	; (800e688 <freertos_IntroTitle+0xec>)
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	f7fc f91c 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 800e600:	4922      	ldr	r1, [pc, #136]	; (800e68c <freertos_IntroTitle+0xf0>)
 800e602:	2000      	movs	r0, #0
 800e604:	f7fc f918 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 800e608:	4921      	ldr	r1, [pc, #132]	; (800e690 <freertos_IntroTitle+0xf4>)
 800e60a:	2000      	movs	r0, #0
 800e60c:	f7fc f914 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 800e610:	4920      	ldr	r1, [pc, #128]	; (800e694 <freertos_IntroTitle+0xf8>)
 800e612:	2000      	movs	r0, #0
 800e614:	f7fc f910 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 800e618:	491f      	ldr	r1, [pc, #124]	; (800e698 <freertos_IntroTitle+0xfc>)
 800e61a:	2000      	movs	r0, #0
 800e61c:	f7fc f90c 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 800e620:	491e      	ldr	r1, [pc, #120]	; (800e69c <freertos_IntroTitle+0x100>)
 800e622:	2000      	movs	r0, #0
 800e624:	f7fc f908 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 800e628:	491d      	ldr	r1, [pc, #116]	; (800e6a0 <freertos_IntroTitle+0x104>)
 800e62a:	2000      	movs	r0, #0
 800e62c:	f7fc f904 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800e630:	491c      	ldr	r1, [pc, #112]	; (800e6a4 <freertos_IntroTitle+0x108>)
 800e632:	2000      	movs	r0, #0
 800e634:	f7fc f900 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 800e638:	f7ff ffa6 	bl	800e588 <OSVersion>
 800e63c:	4603      	mov	r3, r0
 800e63e:	461a      	mov	r2, r3
 800e640:	4919      	ldr	r1, [pc, #100]	; (800e6a8 <freertos_IntroTitle+0x10c>)
 800e642:	2000      	movs	r0, #0
 800e644:	f7fc f8f8 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 800e648:	4918      	ldr	r1, [pc, #96]	; (800e6ac <freertos_IntroTitle+0x110>)
 800e64a:	2000      	movs	r0, #0
 800e64c:	f7fc f8f4 	bl	800a838 <SEGGER_RTT_printf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n\n");
 800e650:	4917      	ldr	r1, [pc, #92]	; (800e6b0 <freertos_IntroTitle+0x114>)
 800e652:	2000      	movs	r0, #0
 800e654:	f7fc f8f0 	bl	800a838 <SEGGER_RTT_printf>
}
 800e658:	bf00      	nop
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	08023824 	.word	0x08023824
 800e660:	08023864 	.word	0x08023864
 800e664:	080238b8 	.word	0x080238b8
 800e668:	0802390c 	.word	0x0802390c
 800e66c:	08023960 	.word	0x08023960
 800e670:	080239b4 	.word	0x080239b4
 800e674:	08023a08 	.word	0x08023a08
 800e678:	08023a5c 	.word	0x08023a5c
 800e67c:	08023ab0 	.word	0x08023ab0
 800e680:	08023b04 	.word	0x08023b04
 800e684:	08023b58 	.word	0x08023b58
 800e688:	08023bac 	.word	0x08023bac
 800e68c:	08023c00 	.word	0x08023c00
 800e690:	08023c54 	.word	0x08023c54
 800e694:	08023ca8 	.word	0x08023ca8
 800e698:	08023cfc 	.word	0x08023cfc
 800e69c:	08023d50 	.word	0x08023d50
 800e6a0:	08023da4 	.word	0x08023da4
 800e6a4:	08023dec 	.word	0x08023dec
 800e6a8:	08023e1c 	.word	0x08023e1c
 800e6ac:	08023e60 	.word	0x08023e60
 800e6b0:	08023e8c 	.word	0x08023e8c

0800e6b4 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 800e6be:	480a      	ldr	r0, [pc, #40]	; (800e6e8 <delay_us+0x34>)
 800e6c0:	f003 feea 	bl	8012498 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 800e6c4:	4b08      	ldr	r3, [pc, #32]	; (800e6e8 <delay_us+0x34>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 800e6cc:	bf00      	nop
 800e6ce:	4b06      	ldr	r3, [pc, #24]	; (800e6e8 <delay_us+0x34>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6d4:	88fb      	ldrh	r3, [r7, #6]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d3f9      	bcc.n	800e6ce <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 800e6da:	4803      	ldr	r0, [pc, #12]	; (800e6e8 <delay_us+0x34>)
 800e6dc:	f003 ff4c 	bl	8012578 <HAL_TIM_Base_Stop_IT>
}
 800e6e0:	bf00      	nop
 800e6e2:	3708      	adds	r7, #8
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	2000a19c 	.word	0x2000a19c

0800e6ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800e6f4:	f00d f890 	bl	801b818 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask is running!\n");
 800e6f8:	4903      	ldr	r1, [pc, #12]	; (800e708 <StartDefaultTask+0x1c>)
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	f7fc f89c 	bl	800a838 <SEGGER_RTT_printf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800e700:	2001      	movs	r0, #1
 800e702:	f009 fd2d 	bl	8018160 <osDelay>
 800e706:	e7fb      	b.n	800e700 <StartDefaultTask+0x14>
 800e708:	08023ed8 	.word	0x08023ed8

0800e70c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e710:	b672      	cpsid	i
}
 800e712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e714:	e7fe      	b.n	800e714 <Error_Handler+0x8>
	...

0800e718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e71e:	2300      	movs	r3, #0
 800e720:	607b      	str	r3, [r7, #4]
 800e722:	4b16      	ldr	r3, [pc, #88]	; (800e77c <HAL_MspInit+0x64>)
 800e724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e726:	4a15      	ldr	r2, [pc, #84]	; (800e77c <HAL_MspInit+0x64>)
 800e728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e72c:	6453      	str	r3, [r2, #68]	; 0x44
 800e72e:	4b13      	ldr	r3, [pc, #76]	; (800e77c <HAL_MspInit+0x64>)
 800e730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e736:	607b      	str	r3, [r7, #4]
 800e738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e73a:	2300      	movs	r3, #0
 800e73c:	603b      	str	r3, [r7, #0]
 800e73e:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <HAL_MspInit+0x64>)
 800e740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e742:	4a0e      	ldr	r2, [pc, #56]	; (800e77c <HAL_MspInit+0x64>)
 800e744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e748:	6413      	str	r3, [r2, #64]	; 0x40
 800e74a:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <HAL_MspInit+0x64>)
 800e74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e74e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e752:	603b      	str	r3, [r7, #0]
 800e754:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e756:	2200      	movs	r2, #0
 800e758:	210f      	movs	r1, #15
 800e75a:	f06f 0001 	mvn.w	r0, #1
 800e75e:	f001 f966 	bl	800fa2e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800e762:	2200      	movs	r2, #0
 800e764:	2105      	movs	r1, #5
 800e766:	2005      	movs	r0, #5
 800e768:	f001 f961 	bl	800fa2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800e76c:	2005      	movs	r0, #5
 800e76e:	f001 f97a 	bl	800fa66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e772:	bf00      	nop
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	40023800 	.word	0x40023800

0800e780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b08c      	sub	sp, #48	; 0x30
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e788:	f107 031c 	add.w	r3, r7, #28
 800e78c:	2200      	movs	r2, #0
 800e78e:	601a      	str	r2, [r3, #0]
 800e790:	605a      	str	r2, [r3, #4]
 800e792:	609a      	str	r2, [r3, #8]
 800e794:	60da      	str	r2, [r3, #12]
 800e796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a5e      	ldr	r2, [pc, #376]	; (800e918 <HAL_ADC_MspInit+0x198>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d158      	bne.n	800e854 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	61bb      	str	r3, [r7, #24]
 800e7a6:	4b5d      	ldr	r3, [pc, #372]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7aa:	4a5c      	ldr	r2, [pc, #368]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e7ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7b0:	6453      	str	r3, [r2, #68]	; 0x44
 800e7b2:	4b5a      	ldr	r3, [pc, #360]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e7b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7ba:	61bb      	str	r3, [r7, #24]
 800e7bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7be:	2300      	movs	r3, #0
 800e7c0:	617b      	str	r3, [r7, #20]
 800e7c2:	4b56      	ldr	r3, [pc, #344]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c6:	4a55      	ldr	r2, [pc, #340]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e7c8:	f043 0304 	orr.w	r3, r3, #4
 800e7cc:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ce:	4b53      	ldr	r3, [pc, #332]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7d2:	f003 0304 	and.w	r3, r3, #4
 800e7d6:	617b      	str	r3, [r7, #20]
 800e7d8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC1_CM_Pin;
 800e7da:	2302      	movs	r3, #2
 800e7dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e7de:	2303      	movs	r3, #3
 800e7e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC1_CM_GPIO_Port, &GPIO_InitStruct);
 800e7e6:	f107 031c 	add.w	r3, r7, #28
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	484c      	ldr	r0, [pc, #304]	; (800e920 <HAL_ADC_MspInit+0x1a0>)
 800e7ee:	f001 fd65 	bl	80102bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800e7f2:	4b4c      	ldr	r3, [pc, #304]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e7f4:	4a4c      	ldr	r2, [pc, #304]	; (800e928 <HAL_ADC_MspInit+0x1a8>)
 800e7f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e7f8:	4b4a      	ldr	r3, [pc, #296]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e7fe:	4b49      	ldr	r3, [pc, #292]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e800:	2200      	movs	r2, #0
 800e802:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e804:	4b47      	ldr	r3, [pc, #284]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e806:	2200      	movs	r2, #0
 800e808:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e80a:	4b46      	ldr	r3, [pc, #280]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e80c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e812:	4b44      	ldr	r3, [pc, #272]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e81a:	4b42      	ldr	r3, [pc, #264]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e81c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800e822:	4b40      	ldr	r3, [pc, #256]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e824:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e828:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e82a:	4b3e      	ldr	r3, [pc, #248]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e82c:	2200      	movs	r2, #0
 800e82e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e830:	4b3c      	ldr	r3, [pc, #240]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e832:	2200      	movs	r2, #0
 800e834:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e836:	483b      	ldr	r0, [pc, #236]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e838:	f001 f930 	bl	800fa9c <HAL_DMA_Init>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800e842:	f7ff ff63 	bl	800e70c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a36      	ldr	r2, [pc, #216]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e84a:	639a      	str	r2, [r3, #56]	; 0x38
 800e84c:	4a35      	ldr	r2, [pc, #212]	; (800e924 <HAL_ADC_MspInit+0x1a4>)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800e852:	e05d      	b.n	800e910 <HAL_ADC_MspInit+0x190>
  else if(hadc->Instance==ADC2)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a34      	ldr	r2, [pc, #208]	; (800e92c <HAL_ADC_MspInit+0x1ac>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d158      	bne.n	800e910 <HAL_ADC_MspInit+0x190>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e85e:	2300      	movs	r3, #0
 800e860:	613b      	str	r3, [r7, #16]
 800e862:	4b2e      	ldr	r3, [pc, #184]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e866:	4a2d      	ldr	r2, [pc, #180]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e86c:	6453      	str	r3, [r2, #68]	; 0x44
 800e86e:	4b2b      	ldr	r3, [pc, #172]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e876:	613b      	str	r3, [r7, #16]
 800e878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e87a:	2300      	movs	r3, #0
 800e87c:	60fb      	str	r3, [r7, #12]
 800e87e:	4b27      	ldr	r3, [pc, #156]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e882:	4a26      	ldr	r2, [pc, #152]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e884:	f043 0304 	orr.w	r3, r3, #4
 800e888:	6313      	str	r3, [r2, #48]	; 0x30
 800e88a:	4b24      	ldr	r3, [pc, #144]	; (800e91c <HAL_ADC_MspInit+0x19c>)
 800e88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88e:	f003 0304 	and.w	r3, r3, #4
 800e892:	60fb      	str	r3, [r7, #12]
 800e894:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC2_VM_Pin;
 800e896:	2304      	movs	r3, #4
 800e898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e89a:	2303      	movs	r3, #3
 800e89c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC2_VM_GPIO_Port, &GPIO_InitStruct);
 800e8a2:	f107 031c 	add.w	r3, r7, #28
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	481d      	ldr	r0, [pc, #116]	; (800e920 <HAL_ADC_MspInit+0x1a0>)
 800e8aa:	f001 fd07 	bl	80102bc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e8ae:	4b20      	ldr	r3, [pc, #128]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8b0:	4a20      	ldr	r2, [pc, #128]	; (800e934 <HAL_ADC_MspInit+0x1b4>)
 800e8b2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e8b4:	4b1e      	ldr	r3, [pc, #120]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e8ba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e8bc:	4b1c      	ldr	r3, [pc, #112]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e8c2:	4b1b      	ldr	r3, [pc, #108]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e8c8:	4b19      	ldr	r3, [pc, #100]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e8ce:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e8d0:	4b17      	ldr	r3, [pc, #92]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8d6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e8d8:	4b15      	ldr	r3, [pc, #84]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e8de:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800e8e0:	4b13      	ldr	r3, [pc, #76]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8e6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800e8e8:	4b11      	ldr	r3, [pc, #68]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e8ee:	4b10      	ldr	r3, [pc, #64]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e8f4:	480e      	ldr	r0, [pc, #56]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e8f6:	f001 f8d1 	bl	800fa9c <HAL_DMA_Init>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d001      	beq.n	800e904 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 800e900:	f7ff ff04 	bl	800e70c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4a0a      	ldr	r2, [pc, #40]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e908:	639a      	str	r2, [r3, #56]	; 0x38
 800e90a:	4a09      	ldr	r2, [pc, #36]	; (800e930 <HAL_ADC_MspInit+0x1b0>)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e910:	bf00      	nop
 800e912:	3730      	adds	r7, #48	; 0x30
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	40012000 	.word	0x40012000
 800e91c:	40023800 	.word	0x40023800
 800e920:	40020800 	.word	0x40020800
 800e924:	2000a094 	.word	0x2000a094
 800e928:	40026410 	.word	0x40026410
 800e92c:	40012100 	.word	0x40012100
 800e930:	2000a0f4 	.word	0x2000a0f4
 800e934:	40026440 	.word	0x40026440

0800e938 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b084      	sub	sp, #16
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a18      	ldr	r2, [pc, #96]	; (800e9a8 <HAL_TIM_Base_MspInit+0x70>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d10e      	bne.n	800e968 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e94a:	2300      	movs	r3, #0
 800e94c:	60fb      	str	r3, [r7, #12]
 800e94e:	4b17      	ldr	r3, [pc, #92]	; (800e9ac <HAL_TIM_Base_MspInit+0x74>)
 800e950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e952:	4a16      	ldr	r2, [pc, #88]	; (800e9ac <HAL_TIM_Base_MspInit+0x74>)
 800e954:	f043 0302 	orr.w	r3, r3, #2
 800e958:	6413      	str	r3, [r2, #64]	; 0x40
 800e95a:	4b14      	ldr	r3, [pc, #80]	; (800e9ac <HAL_TIM_Base_MspInit+0x74>)
 800e95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95e:	f003 0302 	and.w	r3, r3, #2
 800e962:	60fb      	str	r3, [r7, #12]
 800e964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800e966:	e01a      	b.n	800e99e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a10      	ldr	r2, [pc, #64]	; (800e9b0 <HAL_TIM_Base_MspInit+0x78>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d115      	bne.n	800e99e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800e972:	2300      	movs	r3, #0
 800e974:	60bb      	str	r3, [r7, #8]
 800e976:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <HAL_TIM_Base_MspInit+0x74>)
 800e978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97a:	4a0c      	ldr	r2, [pc, #48]	; (800e9ac <HAL_TIM_Base_MspInit+0x74>)
 800e97c:	f043 0320 	orr.w	r3, r3, #32
 800e980:	6413      	str	r3, [r2, #64]	; 0x40
 800e982:	4b0a      	ldr	r3, [pc, #40]	; (800e9ac <HAL_TIM_Base_MspInit+0x74>)
 800e984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e986:	f003 0320 	and.w	r3, r3, #32
 800e98a:	60bb      	str	r3, [r7, #8]
 800e98c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800e98e:	2200      	movs	r2, #0
 800e990:	2105      	movs	r1, #5
 800e992:	2037      	movs	r0, #55	; 0x37
 800e994:	f001 f84b 	bl	800fa2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800e998:	2037      	movs	r0, #55	; 0x37
 800e99a:	f001 f864 	bl	800fa66 <HAL_NVIC_EnableIRQ>
}
 800e99e:	bf00      	nop
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	40000400 	.word	0x40000400
 800e9ac:	40023800 	.word	0x40023800
 800e9b0:	40001400 	.word	0x40001400

0800e9b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b088      	sub	sp, #32
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9bc:	f107 030c 	add.w	r3, r7, #12
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	605a      	str	r2, [r3, #4]
 800e9c6:	609a      	str	r2, [r3, #8]
 800e9c8:	60da      	str	r2, [r3, #12]
 800e9ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a12      	ldr	r2, [pc, #72]	; (800ea1c <HAL_TIM_MspPostInit+0x68>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d11d      	bne.n	800ea12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	60bb      	str	r3, [r7, #8]
 800e9da:	4b11      	ldr	r3, [pc, #68]	; (800ea20 <HAL_TIM_MspPostInit+0x6c>)
 800e9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9de:	4a10      	ldr	r2, [pc, #64]	; (800ea20 <HAL_TIM_MspPostInit+0x6c>)
 800e9e0:	f043 0302 	orr.w	r3, r3, #2
 800e9e4:	6313      	str	r3, [r2, #48]	; 0x30
 800e9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ea20 <HAL_TIM_MspPostInit+0x6c>)
 800e9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ea:	f003 0302 	and.w	r3, r3, #2
 800e9ee:	60bb      	str	r3, [r7, #8]
 800e9f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM3_BUZZER_Pin;
 800e9f2:	2310      	movs	r3, #16
 800e9f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ea02:	2302      	movs	r3, #2
 800ea04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM3_BUZZER_GPIO_Port, &GPIO_InitStruct);
 800ea06:	f107 030c 	add.w	r3, r7, #12
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	4805      	ldr	r0, [pc, #20]	; (800ea24 <HAL_TIM_MspPostInit+0x70>)
 800ea0e:	f001 fc55 	bl	80102bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800ea12:	bf00      	nop
 800ea14:	3720      	adds	r7, #32
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	40000400 	.word	0x40000400
 800ea20:	40023800 	.word	0x40023800
 800ea24:	40020400 	.word	0x40020400

0800ea28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b08a      	sub	sp, #40	; 0x28
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea30:	f107 0314 	add.w	r3, r7, #20
 800ea34:	2200      	movs	r2, #0
 800ea36:	601a      	str	r2, [r3, #0]
 800ea38:	605a      	str	r2, [r3, #4]
 800ea3a:	609a      	str	r2, [r3, #8]
 800ea3c:	60da      	str	r2, [r3, #12]
 800ea3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4a4c      	ldr	r2, [pc, #304]	; (800eb78 <HAL_UART_MspInit+0x150>)
 800ea46:	4293      	cmp	r3, r2
 800ea48:	f040 8092 	bne.w	800eb70 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	613b      	str	r3, [r7, #16]
 800ea50:	4b4a      	ldr	r3, [pc, #296]	; (800eb7c <HAL_UART_MspInit+0x154>)
 800ea52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea54:	4a49      	ldr	r2, [pc, #292]	; (800eb7c <HAL_UART_MspInit+0x154>)
 800ea56:	f043 0320 	orr.w	r3, r3, #32
 800ea5a:	6453      	str	r3, [r2, #68]	; 0x44
 800ea5c:	4b47      	ldr	r3, [pc, #284]	; (800eb7c <HAL_UART_MspInit+0x154>)
 800ea5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea60:	f003 0320 	and.w	r3, r3, #32
 800ea64:	613b      	str	r3, [r7, #16]
 800ea66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ea68:	2300      	movs	r3, #0
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	4b43      	ldr	r3, [pc, #268]	; (800eb7c <HAL_UART_MspInit+0x154>)
 800ea6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea70:	4a42      	ldr	r2, [pc, #264]	; (800eb7c <HAL_UART_MspInit+0x154>)
 800ea72:	f043 0304 	orr.w	r3, r3, #4
 800ea76:	6313      	str	r3, [r2, #48]	; 0x30
 800ea78:	4b40      	ldr	r3, [pc, #256]	; (800eb7c <HAL_UART_MspInit+0x154>)
 800ea7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	60fb      	str	r3, [r7, #12]
 800ea82:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 800ea84:	23c0      	movs	r3, #192	; 0xc0
 800ea86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea88:	2302      	movs	r3, #2
 800ea8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea90:	2303      	movs	r3, #3
 800ea92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800ea94:	2308      	movs	r3, #8
 800ea96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ea98:	f107 0314 	add.w	r3, r7, #20
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4838      	ldr	r0, [pc, #224]	; (800eb80 <HAL_UART_MspInit+0x158>)
 800eaa0:	f001 fc0c 	bl	80102bc <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream7;
 800eaa4:	4b37      	ldr	r3, [pc, #220]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eaa6:	4a38      	ldr	r2, [pc, #224]	; (800eb88 <HAL_UART_MspInit+0x160>)
 800eaa8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800eaaa:	4b36      	ldr	r3, [pc, #216]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eaac:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800eab0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800eab2:	4b34      	ldr	r3, [pc, #208]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eab4:	2240      	movs	r2, #64	; 0x40
 800eab6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eab8:	4b32      	ldr	r3, [pc, #200]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eaba:	2200      	movs	r2, #0
 800eabc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800eabe:	4b31      	ldr	r3, [pc, #196]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eac4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eac6:	4b2f      	ldr	r3, [pc, #188]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eacc:	4b2d      	ldr	r3, [pc, #180]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eace:	2200      	movs	r2, #0
 800ead0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800ead2:	4b2c      	ldr	r3, [pc, #176]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800ead8:	4b2a      	ldr	r3, [pc, #168]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eade:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eae0:	4b28      	ldr	r3, [pc, #160]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800eae6:	4827      	ldr	r0, [pc, #156]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eae8:	f000 ffd8 	bl	800fa9c <HAL_DMA_Init>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d001      	beq.n	800eaf6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800eaf2:	f7ff fe0b 	bl	800e70c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a22      	ldr	r2, [pc, #136]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eafa:	639a      	str	r2, [r3, #56]	; 0x38
 800eafc:	4a21      	ldr	r2, [pc, #132]	; (800eb84 <HAL_UART_MspInit+0x15c>)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800eb02:	4b22      	ldr	r3, [pc, #136]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb04:	4a22      	ldr	r2, [pc, #136]	; (800eb90 <HAL_UART_MspInit+0x168>)
 800eb06:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800eb08:	4b20      	ldr	r3, [pc, #128]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb0a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800eb0e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800eb10:	4b1e      	ldr	r3, [pc, #120]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb16:	4b1d      	ldr	r3, [pc, #116]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800eb1c:	4b1b      	ldr	r3, [pc, #108]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb22:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800eb24:	4b19      	ldr	r3, [pc, #100]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb26:	2200      	movs	r2, #0
 800eb28:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800eb2a:	4b18      	ldr	r3, [pc, #96]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800eb30:	4b16      	ldr	r3, [pc, #88]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800eb36:	4b15      	ldr	r3, [pc, #84]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eb3c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb3e:	4b13      	ldr	r3, [pc, #76]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800eb44:	4811      	ldr	r0, [pc, #68]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb46:	f000 ffa9 	bl	800fa9c <HAL_DMA_Init>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d001      	beq.n	800eb54 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800eb50:	f7ff fddc 	bl	800e70c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a0d      	ldr	r2, [pc, #52]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb58:	63da      	str	r2, [r3, #60]	; 0x3c
 800eb5a:	4a0c      	ldr	r2, [pc, #48]	; (800eb8c <HAL_UART_MspInit+0x164>)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800eb60:	2200      	movs	r2, #0
 800eb62:	2105      	movs	r1, #5
 800eb64:	2047      	movs	r0, #71	; 0x47
 800eb66:	f000 ff62 	bl	800fa2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800eb6a:	2047      	movs	r0, #71	; 0x47
 800eb6c:	f000 ff7b 	bl	800fa66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800eb70:	bf00      	nop
 800eb72:	3728      	adds	r7, #40	; 0x28
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	40011400 	.word	0x40011400
 800eb7c:	40023800 	.word	0x40023800
 800eb80:	40020800 	.word	0x40020800
 800eb84:	2000a22c 	.word	0x2000a22c
 800eb88:	400264b8 	.word	0x400264b8
 800eb8c:	2000a28c 	.word	0x2000a28c
 800eb90:	40026428 	.word	0x40026428

0800eb94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800eb94:	b480      	push	{r7}
 800eb96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800eb98:	e7fe      	b.n	800eb98 <NMI_Handler+0x4>

0800eb9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800eb9a:	b480      	push	{r7}
 800eb9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800eb9e:	e7fe      	b.n	800eb9e <HardFault_Handler+0x4>

0800eba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800eba0:	b480      	push	{r7}
 800eba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800eba4:	e7fe      	b.n	800eba4 <MemManage_Handler+0x4>

0800eba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800eba6:	b480      	push	{r7}
 800eba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ebaa:	e7fe      	b.n	800ebaa <BusFault_Handler+0x4>

0800ebac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ebac:	b480      	push	{r7}
 800ebae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ebb0:	e7fe      	b.n	800ebb0 <UsageFault_Handler+0x4>

0800ebb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ebb6:	bf00      	nop
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 800ebc4:	4b09      	ldr	r3, [pc, #36]	; (800ebec <SysTick_Handler+0x2c>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d004      	beq.n	800ebd6 <SysTick_Handler+0x16>

		TimingDelay--;
 800ebcc:	4b07      	ldr	r3, [pc, #28]	; (800ebec <SysTick_Handler+0x2c>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	4a06      	ldr	r2, [pc, #24]	; (800ebec <SysTick_Handler+0x2c>)
 800ebd4:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ebd6:	f000 f9f9 	bl	800efcc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ebda:	f00b fb7b 	bl	801a2d4 <xTaskGetSchedulerState>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d001      	beq.n	800ebe8 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800ebe4:	f00c fbb8 	bl	801b358 <tickFreeRTOS>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ebe8:	bf00      	nop
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	2000a2fc 	.word	0x2000a2fc

0800ebf0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800ebf4:	bf00      	nop
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ec04:	4802      	ldr	r0, [pc, #8]	; (800ec10 <TIM7_IRQHandler+0x10>)
 800ec06:	f003 fe77 	bl	80128f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ec0a:	bf00      	nop
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	2000a19c 	.word	0x2000a19c

0800ec14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800ec18:	4802      	ldr	r0, [pc, #8]	; (800ec24 <DMA2_Stream0_IRQHandler+0x10>)
 800ec1a:	f001 f8d7 	bl	800fdcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800ec1e:	bf00      	nop
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	2000a094 	.word	0x2000a094

0800ec28 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800ec2c:	4802      	ldr	r0, [pc, #8]	; (800ec38 <DMA2_Stream1_IRQHandler+0x10>)
 800ec2e:	f001 f8cd 	bl	800fdcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800ec32:	bf00      	nop
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	2000a28c 	.word	0x2000a28c

0800ec3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800ec40:	4802      	ldr	r0, [pc, #8]	; (800ec4c <DMA2_Stream2_IRQHandler+0x10>)
 800ec42:	f001 f8c3 	bl	800fdcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800ec46:	bf00      	nop
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2000a0f4 	.word	0x2000a0f4

0800ec50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ec54:	4802      	ldr	r0, [pc, #8]	; (800ec60 <OTG_FS_IRQHandler+0x10>)
 800ec56:	f001 fe2a 	bl	80108ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ec5a:	bf00      	nop
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	2000f868 	.word	0x2000f868

0800ec64 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800ec68:	4802      	ldr	r0, [pc, #8]	; (800ec74 <DMA2_Stream7_IRQHandler+0x10>)
 800ec6a:	f001 f8af 	bl	800fdcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800ec6e:	bf00      	nop
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	2000a22c 	.word	0x2000a22c

0800ec78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 800ec7e:	4b1d      	ldr	r3, [pc, #116]	; (800ecf4 <USART6_IRQHandler+0x7c>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f003 0320 	and.w	r3, r3, #32
 800ec88:	2b20      	cmp	r3, #32
 800ec8a:	d12b      	bne.n	800ece4 <USART6_IRQHandler+0x6c>
 800ec8c:	4b19      	ldr	r3, [pc, #100]	; (800ecf4 <USART6_IRQHandler+0x7c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	f003 0320 	and.w	r3, r3, #32
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d024      	beq.n	800ece4 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 800ec9e:	4b15      	ldr	r3, [pc, #84]	; (800ecf4 <USART6_IRQHandler+0x7c>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	4b14      	ldr	r3, [pc, #80]	; (800ecf8 <USART6_IRQHandler+0x80>)
 800eca8:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 800ecaa:	2300      	movs	r3, #0
 800ecac:	603b      	str	r3, [r7, #0]
 800ecae:	4b11      	ldr	r3, [pc, #68]	; (800ecf4 <USART6_IRQHandler+0x7c>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	603b      	str	r3, [r7, #0]
 800ecb6:	4b0f      	ldr	r3, [pc, #60]	; (800ecf4 <USART6_IRQHandler+0x7c>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	603b      	str	r3, [r7, #0]
 800ecbe:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 800ecc0:	4b0e      	ldr	r3, [pc, #56]	; (800ecfc <USART6_IRQHandler+0x84>)
 800ecc2:	6818      	ldr	r0, [r3, #0]
 800ecc4:	1d3a      	adds	r2, r7, #4
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	490b      	ldr	r1, [pc, #44]	; (800ecf8 <USART6_IRQHandler+0x80>)
 800ecca:	f009 fda3 	bl	8018814 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d007      	beq.n	800ece4 <USART6_IRQHandler+0x6c>
 800ecd4:	4b0a      	ldr	r3, [pc, #40]	; (800ed00 <USART6_IRQHandler+0x88>)
 800ecd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800ece4:	4803      	ldr	r0, [pc, #12]	; (800ecf4 <USART6_IRQHandler+0x7c>)
 800ece6:	f004 fd1f 	bl	8013728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800ecea:	bf00      	nop
 800ecec:	3708      	adds	r7, #8
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	2000a1e4 	.word	0x2000a1e4
 800ecf8:	2000a2f8 	.word	0x2000a2f8
 800ecfc:	20008d04 	.word	0x20008d04
 800ed00:	e000ed04 	.word	0xe000ed04

0800ed04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ed04:	b480      	push	{r7}
 800ed06:	af00      	add	r7, sp, #0
  return 1;
 800ed08:	2301      	movs	r3, #1
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <_kill>:

int _kill(int pid, int sig)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800ed1e:	f00e fa23 	bl	801d168 <__errno>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2216      	movs	r2, #22
 800ed26:	601a      	str	r2, [r3, #0]
  return -1;
 800ed28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <_exit>:

void _exit (int status)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ed3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7ff ffe7 	bl	800ed14 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ed46:	e7fe      	b.n	800ed46 <_exit+0x12>

0800ed48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b086      	sub	sp, #24
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	60f8      	str	r0, [r7, #12]
 800ed50:	60b9      	str	r1, [r7, #8]
 800ed52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ed54:	2300      	movs	r3, #0
 800ed56:	617b      	str	r3, [r7, #20]
 800ed58:	e00a      	b.n	800ed70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ed5a:	f3af 8000 	nop.w
 800ed5e:	4601      	mov	r1, r0
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	60ba      	str	r2, [r7, #8]
 800ed66:	b2ca      	uxtb	r2, r1
 800ed68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	617b      	str	r3, [r7, #20]
 800ed70:	697a      	ldr	r2, [r7, #20]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	dbf0      	blt.n	800ed5a <_read+0x12>
  }

  return len;
 800ed78:	687b      	ldr	r3, [r7, #4]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3718      	adds	r7, #24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b086      	sub	sp, #24
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	60f8      	str	r0, [r7, #12]
 800ed8a:	60b9      	str	r1, [r7, #8]
 800ed8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ed8e:	2300      	movs	r3, #0
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	e009      	b.n	800eda8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	60ba      	str	r2, [r7, #8]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	3301      	adds	r3, #1
 800eda6:	617b      	str	r3, [r7, #20]
 800eda8:	697a      	ldr	r2, [r7, #20]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	429a      	cmp	r2, r3
 800edae:	dbf1      	blt.n	800ed94 <_write+0x12>
  }
  return len;
 800edb0:	687b      	ldr	r3, [r7, #4]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3718      	adds	r7, #24
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <_close>:

int _close(int file)
{
 800edba:	b480      	push	{r7}
 800edbc:	b083      	sub	sp, #12
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800edc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr

0800edd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800edd2:	b480      	push	{r7}
 800edd4:	b083      	sub	sp, #12
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ede2:	605a      	str	r2, [r3, #4]
  return 0;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr

0800edf2 <_isatty>:

int _isatty(int file)
{
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800edfa:	2301      	movs	r3, #1
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	60f8      	str	r0, [r7, #12]
 800ee10:	60b9      	str	r1, [r7, #8]
 800ee12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3714      	adds	r7, #20
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
	...

0800ee24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ee2c:	4a14      	ldr	r2, [pc, #80]	; (800ee80 <_sbrk+0x5c>)
 800ee2e:	4b15      	ldr	r3, [pc, #84]	; (800ee84 <_sbrk+0x60>)
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ee38:	4b13      	ldr	r3, [pc, #76]	; (800ee88 <_sbrk+0x64>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d102      	bne.n	800ee46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ee40:	4b11      	ldr	r3, [pc, #68]	; (800ee88 <_sbrk+0x64>)
 800ee42:	4a12      	ldr	r2, [pc, #72]	; (800ee8c <_sbrk+0x68>)
 800ee44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ee46:	4b10      	ldr	r3, [pc, #64]	; (800ee88 <_sbrk+0x64>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	693a      	ldr	r2, [r7, #16]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d207      	bcs.n	800ee64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ee54:	f00e f988 	bl	801d168 <__errno>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	220c      	movs	r2, #12
 800ee5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ee5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee62:	e009      	b.n	800ee78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ee64:	4b08      	ldr	r3, [pc, #32]	; (800ee88 <_sbrk+0x64>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ee6a:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <_sbrk+0x64>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	4413      	add	r3, r2
 800ee72:	4a05      	ldr	r2, [pc, #20]	; (800ee88 <_sbrk+0x64>)
 800ee74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ee76:	68fb      	ldr	r3, [r7, #12]
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3718      	adds	r7, #24
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	20020000 	.word	0x20020000
 800ee84:	00000400 	.word	0x00000400
 800ee88:	2000a300 	.word	0x2000a300
 800ee8c:	200100b8 	.word	0x200100b8

0800ee90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ee90:	b480      	push	{r7}
 800ee92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ee94:	4b06      	ldr	r3, [pc, #24]	; (800eeb0 <SystemInit+0x20>)
 800ee96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee9a:	4a05      	ldr	r2, [pc, #20]	; (800eeb0 <SystemInit+0x20>)
 800ee9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800eea4:	bf00      	nop
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	e000ed00 	.word	0xe000ed00

0800eeb4 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 800eeb8:	202e      	movs	r0, #46	; 0x2e
 800eeba:	f00d ff9d 	bl	801cdf8 <putchar>
 800eebe:	4b04      	ldr	r3, [pc, #16]	; (800eed0 <vApplicationIdleHook+0x1c>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f00d feaf 	bl	801cc28 <fflush>
}
 800eeca:	bf00      	nop
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	20000d9c 	.word	0x20000d9c

0800eed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800eed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ef0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800eed8:	f7ff ffda 	bl	800ee90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800eedc:	480c      	ldr	r0, [pc, #48]	; (800ef10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800eede:	490d      	ldr	r1, [pc, #52]	; (800ef14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800eee0:	4a0d      	ldr	r2, [pc, #52]	; (800ef18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800eee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800eee4:	e002      	b.n	800eeec <LoopCopyDataInit>

0800eee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800eee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800eee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800eeea:	3304      	adds	r3, #4

0800eeec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eeec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eeee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eef0:	d3f9      	bcc.n	800eee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eef2:	4a0a      	ldr	r2, [pc, #40]	; (800ef1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800eef4:	4c0a      	ldr	r4, [pc, #40]	; (800ef20 <LoopFillZerobss+0x22>)
  movs r3, #0
 800eef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eef8:	e001      	b.n	800eefe <LoopFillZerobss>

0800eefa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800eefa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800eefc:	3204      	adds	r2, #4

0800eefe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800eefe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ef00:	d3fb      	bcc.n	800eefa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800ef02:	f00e f937 	bl	801d174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ef06:	f7fe ffd9 	bl	800debc <main>
  bx  lr    
 800ef0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ef0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ef10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ef14:	20000f0c 	.word	0x20000f0c
  ldr r2, =_sidata
 800ef18:	0802542c 	.word	0x0802542c
  ldr r2, =_sbss
 800ef1c:	20004ba0 	.word	0x20004ba0
  ldr r4, =_ebss
 800ef20:	200100b8 	.word	0x200100b8

0800ef24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ef24:	e7fe      	b.n	800ef24 <ADC_IRQHandler>
	...

0800ef28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ef2c:	4b0e      	ldr	r3, [pc, #56]	; (800ef68 <HAL_Init+0x40>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a0d      	ldr	r2, [pc, #52]	; (800ef68 <HAL_Init+0x40>)
 800ef32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800ef38:	4b0b      	ldr	r3, [pc, #44]	; (800ef68 <HAL_Init+0x40>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a0a      	ldr	r2, [pc, #40]	; (800ef68 <HAL_Init+0x40>)
 800ef3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ef42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800ef44:	4b08      	ldr	r3, [pc, #32]	; (800ef68 <HAL_Init+0x40>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a07      	ldr	r2, [pc, #28]	; (800ef68 <HAL_Init+0x40>)
 800ef4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ef50:	2003      	movs	r0, #3
 800ef52:	f000 fd61 	bl	800fa18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800ef56:	200f      	movs	r0, #15
 800ef58:	f000 f808 	bl	800ef6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800ef5c:	f7ff fbdc 	bl	800e718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	40023c00 	.word	0x40023c00

0800ef6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ef74:	4b12      	ldr	r3, [pc, #72]	; (800efc0 <HAL_InitTick+0x54>)
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	4b12      	ldr	r3, [pc, #72]	; (800efc4 <HAL_InitTick+0x58>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ef82:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 fd79 	bl	800fa82 <HAL_SYSTICK_Config>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d001      	beq.n	800ef9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ef96:	2301      	movs	r3, #1
 800ef98:	e00e      	b.n	800efb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2b0f      	cmp	r3, #15
 800ef9e:	d80a      	bhi.n	800efb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800efa0:	2200      	movs	r2, #0
 800efa2:	6879      	ldr	r1, [r7, #4]
 800efa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efa8:	f000 fd41 	bl	800fa2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800efac:	4a06      	ldr	r2, [pc, #24]	; (800efc8 <HAL_InitTick+0x5c>)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800efb2:	2300      	movs	r3, #0
 800efb4:	e000      	b.n	800efb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	20000c44 	.word	0x20000c44
 800efc4:	20000c4c 	.word	0x20000c4c
 800efc8:	20000c48 	.word	0x20000c48

0800efcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800efcc:	b480      	push	{r7}
 800efce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800efd0:	4b06      	ldr	r3, [pc, #24]	; (800efec <HAL_IncTick+0x20>)
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	461a      	mov	r2, r3
 800efd6:	4b06      	ldr	r3, [pc, #24]	; (800eff0 <HAL_IncTick+0x24>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4413      	add	r3, r2
 800efdc:	4a04      	ldr	r2, [pc, #16]	; (800eff0 <HAL_IncTick+0x24>)
 800efde:	6013      	str	r3, [r2, #0]
}
 800efe0:	bf00      	nop
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr
 800efea:	bf00      	nop
 800efec:	20000c4c 	.word	0x20000c4c
 800eff0:	2000a304 	.word	0x2000a304

0800eff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800eff4:	b480      	push	{r7}
 800eff6:	af00      	add	r7, sp, #0
  return uwTick;
 800eff8:	4b03      	ldr	r3, [pc, #12]	; (800f008 <HAL_GetTick+0x14>)
 800effa:	681b      	ldr	r3, [r3, #0]
}
 800effc:	4618      	mov	r0, r3
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	2000a304 	.word	0x2000a304

0800f00c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f014:	f7ff ffee 	bl	800eff4 <HAL_GetTick>
 800f018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f024:	d005      	beq.n	800f032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f026:	4b0a      	ldr	r3, [pc, #40]	; (800f050 <HAL_Delay+0x44>)
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	4413      	add	r3, r2
 800f030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f032:	bf00      	nop
 800f034:	f7ff ffde 	bl	800eff4 <HAL_GetTick>
 800f038:	4602      	mov	r2, r0
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	1ad3      	subs	r3, r2, r3
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	429a      	cmp	r2, r3
 800f042:	d8f7      	bhi.n	800f034 <HAL_Delay+0x28>
  {
  }
}
 800f044:	bf00      	nop
 800f046:	bf00      	nop
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	20000c4c 	.word	0x20000c4c

0800f054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f05c:	2300      	movs	r3, #0
 800f05e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	e033      	b.n	800f0d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d109      	bne.n	800f086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f7ff fb84 	bl	800e780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2200      	movs	r2, #0
 800f082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f08a:	f003 0310 	and.w	r3, r3, #16
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d118      	bne.n	800f0c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f096:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f09a:	f023 0302 	bic.w	r3, r3, #2
 800f09e:	f043 0202 	orr.w	r2, r3, #2
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fa68 	bl	800f57c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0b6:	f023 0303 	bic.w	r3, r3, #3
 800f0ba:	f043 0201 	orr.w	r2, r3, #1
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	641a      	str	r2, [r3, #64]	; 0x40
 800f0c2:	e001      	b.n	800f0c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
	...

0800f0dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	60f8      	str	r0, [r7, #12]
 800f0e4:	60b9      	str	r1, [r7, #8]
 800f0e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d101      	bne.n	800f0fa <HAL_ADC_Start_DMA+0x1e>
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	e0e9      	b.n	800f2ce <HAL_ADC_Start_DMA+0x1f2>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	f003 0301 	and.w	r3, r3, #1
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d018      	beq.n	800f142 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	689a      	ldr	r2, [r3, #8]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f042 0201 	orr.w	r2, r2, #1
 800f11e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f120:	4b6d      	ldr	r3, [pc, #436]	; (800f2d8 <HAL_ADC_Start_DMA+0x1fc>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a6d      	ldr	r2, [pc, #436]	; (800f2dc <HAL_ADC_Start_DMA+0x200>)
 800f126:	fba2 2303 	umull	r2, r3, r2, r3
 800f12a:	0c9a      	lsrs	r2, r3, #18
 800f12c:	4613      	mov	r3, r2
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	4413      	add	r3, r2
 800f132:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800f134:	e002      	b.n	800f13c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	3b01      	subs	r3, #1
 800f13a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d1f9      	bne.n	800f136 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	689b      	ldr	r3, [r3, #8]
 800f148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f14c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f150:	d107      	bne.n	800f162 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	689a      	ldr	r2, [r3, #8]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f160:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f003 0301 	and.w	r3, r3, #1
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	f040 80a1 	bne.w	800f2b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f176:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f17a:	f023 0301 	bic.w	r3, r3, #1
 800f17e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f190:	2b00      	cmp	r3, #0
 800f192:	d007      	beq.n	800f1a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f19c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f1ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1b0:	d106      	bne.n	800f1c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1b6:	f023 0206 	bic.w	r2, r3, #6
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	645a      	str	r2, [r3, #68]	; 0x44
 800f1be:	e002      	b.n	800f1c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f1ce:	4b44      	ldr	r3, [pc, #272]	; (800f2e0 <HAL_ADC_Start_DMA+0x204>)
 800f1d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1d6:	4a43      	ldr	r2, [pc, #268]	; (800f2e4 <HAL_ADC_Start_DMA+0x208>)
 800f1d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1de:	4a42      	ldr	r2, [pc, #264]	; (800f2e8 <HAL_ADC_Start_DMA+0x20c>)
 800f1e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1e6:	4a41      	ldr	r2, [pc, #260]	; (800f2ec <HAL_ADC_Start_DMA+0x210>)
 800f1e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f1f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	685a      	ldr	r2, [r3, #4]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f202:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	689a      	ldr	r2, [r3, #8]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f212:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	334c      	adds	r3, #76	; 0x4c
 800f21e:	4619      	mov	r1, r3
 800f220:	68ba      	ldr	r2, [r7, #8]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f000 fce8 	bl	800fbf8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	f003 031f 	and.w	r3, r3, #31
 800f230:	2b00      	cmp	r3, #0
 800f232:	d12a      	bne.n	800f28a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a2d      	ldr	r2, [pc, #180]	; (800f2f0 <HAL_ADC_Start_DMA+0x214>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d015      	beq.n	800f26a <HAL_ADC_Start_DMA+0x18e>
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a2c      	ldr	r2, [pc, #176]	; (800f2f4 <HAL_ADC_Start_DMA+0x218>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d105      	bne.n	800f254 <HAL_ADC_Start_DMA+0x178>
 800f248:	4b25      	ldr	r3, [pc, #148]	; (800f2e0 <HAL_ADC_Start_DMA+0x204>)
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	f003 031f 	and.w	r3, r3, #31
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00a      	beq.n	800f26a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a27      	ldr	r2, [pc, #156]	; (800f2f8 <HAL_ADC_Start_DMA+0x21c>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d136      	bne.n	800f2cc <HAL_ADC_Start_DMA+0x1f0>
 800f25e:	4b20      	ldr	r3, [pc, #128]	; (800f2e0 <HAL_ADC_Start_DMA+0x204>)
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	f003 0310 	and.w	r3, r3, #16
 800f266:	2b00      	cmp	r3, #0
 800f268:	d130      	bne.n	800f2cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f274:	2b00      	cmp	r3, #0
 800f276:	d129      	bne.n	800f2cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	689a      	ldr	r2, [r3, #8]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f286:	609a      	str	r2, [r3, #8]
 800f288:	e020      	b.n	800f2cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4a18      	ldr	r2, [pc, #96]	; (800f2f0 <HAL_ADC_Start_DMA+0x214>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d11b      	bne.n	800f2cc <HAL_ADC_Start_DMA+0x1f0>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	689b      	ldr	r3, [r3, #8]
 800f29a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d114      	bne.n	800f2cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	689a      	ldr	r2, [r3, #8]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f2b0:	609a      	str	r2, [r3, #8]
 800f2b2:	e00b      	b.n	800f2cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2b8:	f043 0210 	orr.w	r2, r3, #16
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2c4:	f043 0201 	orr.w	r2, r3, #1
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3718      	adds	r7, #24
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20000c44 	.word	0x20000c44
 800f2dc:	431bde83 	.word	0x431bde83
 800f2e0:	40012300 	.word	0x40012300
 800f2e4:	0800f775 	.word	0x0800f775
 800f2e8:	0800f82f 	.word	0x0800f82f
 800f2ec:	0800f84b 	.word	0x0800f84b
 800f2f0:	40012000 	.word	0x40012000
 800f2f4:	40012100 	.word	0x40012100
 800f2f8:	40012200 	.word	0x40012200

0800f2fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800f310:	b480      	push	{r7}
 800f312:	b083      	sub	sp, #12
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800f318:	bf00      	nop
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800f342:	2300      	movs	r3, #0
 800f344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d101      	bne.n	800f354 <HAL_ADC_ConfigChannel+0x1c>
 800f350:	2302      	movs	r3, #2
 800f352:	e105      	b.n	800f560 <HAL_ADC_ConfigChannel+0x228>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b09      	cmp	r3, #9
 800f362:	d925      	bls.n	800f3b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68d9      	ldr	r1, [r3, #12]
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	461a      	mov	r2, r3
 800f372:	4613      	mov	r3, r2
 800f374:	005b      	lsls	r3, r3, #1
 800f376:	4413      	add	r3, r2
 800f378:	3b1e      	subs	r3, #30
 800f37a:	2207      	movs	r2, #7
 800f37c:	fa02 f303 	lsl.w	r3, r2, r3
 800f380:	43da      	mvns	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	400a      	ands	r2, r1
 800f388:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	68d9      	ldr	r1, [r3, #12]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	689a      	ldr	r2, [r3, #8]
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	4618      	mov	r0, r3
 800f39c:	4603      	mov	r3, r0
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	4403      	add	r3, r0
 800f3a2:	3b1e      	subs	r3, #30
 800f3a4:	409a      	lsls	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	430a      	orrs	r2, r1
 800f3ac:	60da      	str	r2, [r3, #12]
 800f3ae:	e022      	b.n	800f3f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	6919      	ldr	r1, [r3, #16]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	461a      	mov	r2, r3
 800f3be:	4613      	mov	r3, r2
 800f3c0:	005b      	lsls	r3, r3, #1
 800f3c2:	4413      	add	r3, r2
 800f3c4:	2207      	movs	r2, #7
 800f3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ca:	43da      	mvns	r2, r3
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	400a      	ands	r2, r1
 800f3d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6919      	ldr	r1, [r3, #16]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	689a      	ldr	r2, [r3, #8]
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	4403      	add	r3, r0
 800f3ec:	409a      	lsls	r2, r3
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	430a      	orrs	r2, r1
 800f3f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	2b06      	cmp	r3, #6
 800f3fc:	d824      	bhi.n	800f448 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	685a      	ldr	r2, [r3, #4]
 800f408:	4613      	mov	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4413      	add	r3, r2
 800f40e:	3b05      	subs	r3, #5
 800f410:	221f      	movs	r2, #31
 800f412:	fa02 f303 	lsl.w	r3, r2, r3
 800f416:	43da      	mvns	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	400a      	ands	r2, r1
 800f41e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	4618      	mov	r0, r3
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	4613      	mov	r3, r2
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	4413      	add	r3, r2
 800f438:	3b05      	subs	r3, #5
 800f43a:	fa00 f203 	lsl.w	r2, r0, r3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	635a      	str	r2, [r3, #52]	; 0x34
 800f446:	e04c      	b.n	800f4e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	2b0c      	cmp	r3, #12
 800f44e:	d824      	bhi.n	800f49a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	685a      	ldr	r2, [r3, #4]
 800f45a:	4613      	mov	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	4413      	add	r3, r2
 800f460:	3b23      	subs	r3, #35	; 0x23
 800f462:	221f      	movs	r2, #31
 800f464:	fa02 f303 	lsl.w	r3, r2, r3
 800f468:	43da      	mvns	r2, r3
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	400a      	ands	r2, r1
 800f470:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	4618      	mov	r0, r3
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	685a      	ldr	r2, [r3, #4]
 800f484:	4613      	mov	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4413      	add	r3, r2
 800f48a:	3b23      	subs	r3, #35	; 0x23
 800f48c:	fa00 f203 	lsl.w	r2, r0, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	430a      	orrs	r2, r1
 800f496:	631a      	str	r2, [r3, #48]	; 0x30
 800f498:	e023      	b.n	800f4e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	685a      	ldr	r2, [r3, #4]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	4413      	add	r3, r2
 800f4aa:	3b41      	subs	r3, #65	; 0x41
 800f4ac:	221f      	movs	r2, #31
 800f4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f4b2:	43da      	mvns	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	400a      	ands	r2, r1
 800f4ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	685a      	ldr	r2, [r3, #4]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4413      	add	r3, r2
 800f4d4:	3b41      	subs	r3, #65	; 0x41
 800f4d6:	fa00 f203 	lsl.w	r2, r0, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	430a      	orrs	r2, r1
 800f4e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f4e2:	4b22      	ldr	r3, [pc, #136]	; (800f56c <HAL_ADC_ConfigChannel+0x234>)
 800f4e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4a21      	ldr	r2, [pc, #132]	; (800f570 <HAL_ADC_ConfigChannel+0x238>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d109      	bne.n	800f504 <HAL_ADC_ConfigChannel+0x1cc>
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b12      	cmp	r3, #18
 800f4f6:	d105      	bne.n	800f504 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a19      	ldr	r2, [pc, #100]	; (800f570 <HAL_ADC_ConfigChannel+0x238>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d123      	bne.n	800f556 <HAL_ADC_ConfigChannel+0x21e>
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b10      	cmp	r3, #16
 800f514:	d003      	beq.n	800f51e <HAL_ADC_ConfigChannel+0x1e6>
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b11      	cmp	r3, #17
 800f51c:	d11b      	bne.n	800f556 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	2b10      	cmp	r3, #16
 800f530:	d111      	bne.n	800f556 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f532:	4b10      	ldr	r3, [pc, #64]	; (800f574 <HAL_ADC_ConfigChannel+0x23c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4a10      	ldr	r2, [pc, #64]	; (800f578 <HAL_ADC_ConfigChannel+0x240>)
 800f538:	fba2 2303 	umull	r2, r3, r2, r3
 800f53c:	0c9a      	lsrs	r2, r3, #18
 800f53e:	4613      	mov	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4413      	add	r3, r2
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800f548:	e002      	b.n	800f550 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	3b01      	subs	r3, #1
 800f54e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1f9      	bne.n	800f54a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	3714      	adds	r7, #20
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	40012300 	.word	0x40012300
 800f570:	40012000 	.word	0x40012000
 800f574:	20000c44 	.word	0x20000c44
 800f578:	431bde83 	.word	0x431bde83

0800f57c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b085      	sub	sp, #20
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f584:	4b79      	ldr	r3, [pc, #484]	; (800f76c <ADC_Init+0x1f0>)
 800f586:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	685a      	ldr	r2, [r3, #4]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	431a      	orrs	r2, r3
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	685a      	ldr	r2, [r3, #4]
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f5b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	6859      	ldr	r1, [r3, #4]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	021a      	lsls	r2, r3, #8
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	430a      	orrs	r2, r1
 800f5c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	685a      	ldr	r2, [r3, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f5d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	6859      	ldr	r1, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	689a      	ldr	r2, [r3, #8]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	430a      	orrs	r2, r1
 800f5e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	689a      	ldr	r2, [r3, #8]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f5f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	6899      	ldr	r1, [r3, #8]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68da      	ldr	r2, [r3, #12]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	430a      	orrs	r2, r1
 800f608:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f60e:	4a58      	ldr	r2, [pc, #352]	; (800f770 <ADC_Init+0x1f4>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d022      	beq.n	800f65a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	689a      	ldr	r2, [r3, #8]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	6899      	ldr	r1, [r3, #8]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	430a      	orrs	r2, r1
 800f634:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	689a      	ldr	r2, [r3, #8]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	6899      	ldr	r1, [r3, #8]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	430a      	orrs	r2, r1
 800f656:	609a      	str	r2, [r3, #8]
 800f658:	e00f      	b.n	800f67a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	689a      	ldr	r2, [r3, #8]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	689a      	ldr	r2, [r3, #8]
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f678:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	689a      	ldr	r2, [r3, #8]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f022 0202 	bic.w	r2, r2, #2
 800f688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	6899      	ldr	r1, [r3, #8]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	7e1b      	ldrb	r3, [r3, #24]
 800f694:	005a      	lsls	r2, r3, #1
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	430a      	orrs	r2, r1
 800f69c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d01b      	beq.n	800f6e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	685a      	ldr	r2, [r3, #4]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	685a      	ldr	r2, [r3, #4]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f6c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	6859      	ldr	r1, [r3, #4]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d2:	3b01      	subs	r3, #1
 800f6d4:	035a      	lsls	r2, r3, #13
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	430a      	orrs	r2, r1
 800f6dc:	605a      	str	r2, [r3, #4]
 800f6de:	e007      	b.n	800f6f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	685a      	ldr	r2, [r3, #4]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f6ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f6fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	69db      	ldr	r3, [r3, #28]
 800f70a:	3b01      	subs	r3, #1
 800f70c:	051a      	lsls	r2, r3, #20
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	430a      	orrs	r2, r1
 800f714:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689a      	ldr	r2, [r3, #8]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f724:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	6899      	ldr	r1, [r3, #8]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f732:	025a      	lsls	r2, r3, #9
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	430a      	orrs	r2, r1
 800f73a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	689a      	ldr	r2, [r3, #8]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f74a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6899      	ldr	r1, [r3, #8]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	695b      	ldr	r3, [r3, #20]
 800f756:	029a      	lsls	r2, r3, #10
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	430a      	orrs	r2, r1
 800f75e:	609a      	str	r2, [r3, #8]
}
 800f760:	bf00      	nop
 800f762:	3714      	adds	r7, #20
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr
 800f76c:	40012300 	.word	0x40012300
 800f770:	0f000001 	.word	0x0f000001

0800f774 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f780:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f786:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d13c      	bne.n	800f808 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f792:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	689b      	ldr	r3, [r3, #8]
 800f7a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d12b      	bne.n	800f800 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d127      	bne.n	800f800 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d006      	beq.n	800f7cc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d119      	bne.n	800f800 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	685a      	ldr	r2, [r3, #4]
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	f022 0220 	bic.w	r2, r2, #32
 800f7da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d105      	bne.n	800f800 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f8:	f043 0201 	orr.w	r2, r3, #1
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f800:	68f8      	ldr	r0, [r7, #12]
 800f802:	f7ff fd7b 	bl	800f2fc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800f806:	e00e      	b.n	800f826 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f80c:	f003 0310 	and.w	r3, r3, #16
 800f810:	2b00      	cmp	r3, #0
 800f812:	d003      	beq.n	800f81c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800f814:	68f8      	ldr	r0, [r7, #12]
 800f816:	f7ff fd85 	bl	800f324 <HAL_ADC_ErrorCallback>
}
 800f81a:	e004      	b.n	800f826 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	4798      	blx	r3
}
 800f826:	bf00      	nop
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}

0800f82e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	b084      	sub	sp, #16
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f83a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7ff fd67 	bl	800f310 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f842:	bf00      	nop
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b084      	sub	sp, #16
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f856:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2240      	movs	r2, #64	; 0x40
 800f85c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f862:	f043 0204 	orr.w	r2, r3, #4
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	f7ff fd5a 	bl	800f324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f870:	bf00      	nop
 800f872:	3710      	adds	r7, #16
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <__NVIC_SetPriorityGrouping>:
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f003 0307 	and.w	r3, r3, #7
 800f886:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f888:	4b0c      	ldr	r3, [pc, #48]	; (800f8bc <__NVIC_SetPriorityGrouping+0x44>)
 800f88a:	68db      	ldr	r3, [r3, #12]
 800f88c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f894:	4013      	ands	r3, r2
 800f896:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f8a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f8a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f8a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f8aa:	4a04      	ldr	r2, [pc, #16]	; (800f8bc <__NVIC_SetPriorityGrouping+0x44>)
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	60d3      	str	r3, [r2, #12]
}
 800f8b0:	bf00      	nop
 800f8b2:	3714      	adds	r7, #20
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	e000ed00 	.word	0xe000ed00

0800f8c0 <__NVIC_GetPriorityGrouping>:
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f8c4:	4b04      	ldr	r3, [pc, #16]	; (800f8d8 <__NVIC_GetPriorityGrouping+0x18>)
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	0a1b      	lsrs	r3, r3, #8
 800f8ca:	f003 0307 	and.w	r3, r3, #7
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr
 800f8d8:	e000ed00 	.word	0xe000ed00

0800f8dc <__NVIC_EnableIRQ>:
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f8e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	db0b      	blt.n	800f906 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f8ee:	79fb      	ldrb	r3, [r7, #7]
 800f8f0:	f003 021f 	and.w	r2, r3, #31
 800f8f4:	4907      	ldr	r1, [pc, #28]	; (800f914 <__NVIC_EnableIRQ+0x38>)
 800f8f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8fa:	095b      	lsrs	r3, r3, #5
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	fa00 f202 	lsl.w	r2, r0, r2
 800f902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f906:	bf00      	nop
 800f908:	370c      	adds	r7, #12
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	e000e100 	.word	0xe000e100

0800f918 <__NVIC_SetPriority>:
{
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	4603      	mov	r3, r0
 800f920:	6039      	str	r1, [r7, #0]
 800f922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	db0a      	blt.n	800f942 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	490c      	ldr	r1, [pc, #48]	; (800f964 <__NVIC_SetPriority+0x4c>)
 800f932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f936:	0112      	lsls	r2, r2, #4
 800f938:	b2d2      	uxtb	r2, r2
 800f93a:	440b      	add	r3, r1
 800f93c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f940:	e00a      	b.n	800f958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	b2da      	uxtb	r2, r3
 800f946:	4908      	ldr	r1, [pc, #32]	; (800f968 <__NVIC_SetPriority+0x50>)
 800f948:	79fb      	ldrb	r3, [r7, #7]
 800f94a:	f003 030f 	and.w	r3, r3, #15
 800f94e:	3b04      	subs	r3, #4
 800f950:	0112      	lsls	r2, r2, #4
 800f952:	b2d2      	uxtb	r2, r2
 800f954:	440b      	add	r3, r1
 800f956:	761a      	strb	r2, [r3, #24]
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	e000e100 	.word	0xe000e100
 800f968:	e000ed00 	.word	0xe000ed00

0800f96c <NVIC_EncodePriority>:
{
 800f96c:	b480      	push	{r7}
 800f96e:	b089      	sub	sp, #36	; 0x24
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	f003 0307 	and.w	r3, r3, #7
 800f97e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	f1c3 0307 	rsb	r3, r3, #7
 800f986:	2b04      	cmp	r3, #4
 800f988:	bf28      	it	cs
 800f98a:	2304      	movcs	r3, #4
 800f98c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	3304      	adds	r3, #4
 800f992:	2b06      	cmp	r3, #6
 800f994:	d902      	bls.n	800f99c <NVIC_EncodePriority+0x30>
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	3b03      	subs	r3, #3
 800f99a:	e000      	b.n	800f99e <NVIC_EncodePriority+0x32>
 800f99c:	2300      	movs	r3, #0
 800f99e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f9a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	fa02 f303 	lsl.w	r3, r2, r3
 800f9aa:	43da      	mvns	r2, r3
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	401a      	ands	r2, r3
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f9b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f9be:	43d9      	mvns	r1, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f9c4:	4313      	orrs	r3, r2
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3724      	adds	r7, #36	; 0x24
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
	...

0800f9d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f9e4:	d301      	bcc.n	800f9ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e00f      	b.n	800fa0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f9ea:	4a0a      	ldr	r2, [pc, #40]	; (800fa14 <SysTick_Config+0x40>)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f9f2:	210f      	movs	r1, #15
 800f9f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9f8:	f7ff ff8e 	bl	800f918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f9fc:	4b05      	ldr	r3, [pc, #20]	; (800fa14 <SysTick_Config+0x40>)
 800f9fe:	2200      	movs	r2, #0
 800fa00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800fa02:	4b04      	ldr	r3, [pc, #16]	; (800fa14 <SysTick_Config+0x40>)
 800fa04:	2207      	movs	r2, #7
 800fa06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3708      	adds	r7, #8
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	e000e010 	.word	0xe000e010

0800fa18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f7ff ff29 	bl	800f878 <__NVIC_SetPriorityGrouping>
}
 800fa26:	bf00      	nop
 800fa28:	3708      	adds	r7, #8
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}

0800fa2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b086      	sub	sp, #24
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	4603      	mov	r3, r0
 800fa36:	60b9      	str	r1, [r7, #8]
 800fa38:	607a      	str	r2, [r7, #4]
 800fa3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800fa40:	f7ff ff3e 	bl	800f8c0 <__NVIC_GetPriorityGrouping>
 800fa44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	68b9      	ldr	r1, [r7, #8]
 800fa4a:	6978      	ldr	r0, [r7, #20]
 800fa4c:	f7ff ff8e 	bl	800f96c <NVIC_EncodePriority>
 800fa50:	4602      	mov	r2, r0
 800fa52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa56:	4611      	mov	r1, r2
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff ff5d 	bl	800f918 <__NVIC_SetPriority>
}
 800fa5e:	bf00      	nop
 800fa60:	3718      	adds	r7, #24
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}

0800fa66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b082      	sub	sp, #8
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800fa70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff ff31 	bl	800f8dc <__NVIC_EnableIRQ>
}
 800fa7a:	bf00      	nop
 800fa7c:	3708      	adds	r7, #8
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b082      	sub	sp, #8
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7ff ffa2 	bl	800f9d4 <SysTick_Config>
 800fa90:	4603      	mov	r3, r0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
	...

0800fa9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b086      	sub	sp, #24
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800faa4:	2300      	movs	r3, #0
 800faa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800faa8:	f7ff faa4 	bl	800eff4 <HAL_GetTick>
 800faac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d101      	bne.n	800fab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	e099      	b.n	800fbec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2202      	movs	r2, #2
 800fabc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f022 0201 	bic.w	r2, r2, #1
 800fad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fad8:	e00f      	b.n	800fafa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800fada:	f7ff fa8b 	bl	800eff4 <HAL_GetTick>
 800fade:	4602      	mov	r2, r0
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	1ad3      	subs	r3, r2, r3
 800fae4:	2b05      	cmp	r3, #5
 800fae6:	d908      	bls.n	800fafa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2220      	movs	r2, #32
 800faec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2203      	movs	r2, #3
 800faf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800faf6:	2303      	movs	r3, #3
 800faf8:	e078      	b.n	800fbec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f003 0301 	and.w	r3, r3, #1
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1e8      	bne.n	800fada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	4b38      	ldr	r3, [pc, #224]	; (800fbf4 <HAL_DMA_Init+0x158>)
 800fb14:	4013      	ands	r3, r2
 800fb16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685a      	ldr	r2, [r3, #4]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	689b      	ldr	r3, [r3, #8]
 800fb20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800fb26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800fb32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	699b      	ldr	r3, [r3, #24]
 800fb38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800fb3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a1b      	ldr	r3, [r3, #32]
 800fb44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb50:	2b04      	cmp	r3, #4
 800fb52:	d107      	bne.n	800fb64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	697a      	ldr	r2, [r7, #20]
 800fb60:	4313      	orrs	r3, r2
 800fb62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	697a      	ldr	r2, [r7, #20]
 800fb6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	f023 0307 	bic.w	r3, r3, #7
 800fb7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8a:	2b04      	cmp	r3, #4
 800fb8c:	d117      	bne.n	800fbbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb92:	697a      	ldr	r2, [r7, #20]
 800fb94:	4313      	orrs	r3, r2
 800fb96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00e      	beq.n	800fbbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f000 fb0f 	bl	80101c4 <DMA_CheckFifoParam>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d008      	beq.n	800fbbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2240      	movs	r2, #64	; 0x40
 800fbb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e016      	b.n	800fbec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 fac6 	bl	8010158 <DMA_CalcBaseAndBitshift>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbd4:	223f      	movs	r2, #63	; 0x3f
 800fbd6:	409a      	lsls	r2, r3
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2200      	movs	r2, #0
 800fbe0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3718      	adds	r7, #24
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}
 800fbf4:	f010803f 	.word	0xf010803f

0800fbf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b086      	sub	sp, #24
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
 800fc04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fc06:	2300      	movs	r3, #0
 800fc08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d101      	bne.n	800fc1e <HAL_DMA_Start_IT+0x26>
 800fc1a:	2302      	movs	r3, #2
 800fc1c:	e040      	b.n	800fca0 <HAL_DMA_Start_IT+0xa8>
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2201      	movs	r2, #1
 800fc22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d12f      	bne.n	800fc92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2202      	movs	r2, #2
 800fc36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	68b9      	ldr	r1, [r7, #8]
 800fc46:	68f8      	ldr	r0, [r7, #12]
 800fc48:	f000 fa58 	bl	80100fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc50:	223f      	movs	r2, #63	; 0x3f
 800fc52:	409a      	lsls	r2, r3
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f042 0216 	orr.w	r2, r2, #22
 800fc66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d007      	beq.n	800fc80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f042 0208 	orr.w	r2, r2, #8
 800fc7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f042 0201 	orr.w	r2, r2, #1
 800fc8e:	601a      	str	r2, [r3, #0]
 800fc90:	e005      	b.n	800fc9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	2200      	movs	r2, #0
 800fc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800fc9a:	2302      	movs	r3, #2
 800fc9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800fc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3718      	adds	r7, #24
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800fcb6:	f7ff f99d 	bl	800eff4 <HAL_GetTick>
 800fcba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	2b02      	cmp	r3, #2
 800fcc6:	d008      	beq.n	800fcda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2280      	movs	r2, #128	; 0x80
 800fccc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e052      	b.n	800fd80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f022 0216 	bic.w	r2, r2, #22
 800fce8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	695a      	ldr	r2, [r3, #20]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fcf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d103      	bne.n	800fd0a <HAL_DMA_Abort+0x62>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d007      	beq.n	800fd1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	681a      	ldr	r2, [r3, #0]
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f022 0208 	bic.w	r2, r2, #8
 800fd18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f022 0201 	bic.w	r2, r2, #1
 800fd28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fd2a:	e013      	b.n	800fd54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800fd2c:	f7ff f962 	bl	800eff4 <HAL_GetTick>
 800fd30:	4602      	mov	r2, r0
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	2b05      	cmp	r3, #5
 800fd38:	d90c      	bls.n	800fd54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2220      	movs	r2, #32
 800fd3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2203      	movs	r2, #3
 800fd44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800fd50:	2303      	movs	r3, #3
 800fd52:	e015      	b.n	800fd80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f003 0301 	and.w	r3, r3, #1
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1e4      	bne.n	800fd2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd66:	223f      	movs	r2, #63	; 0x3f
 800fd68:	409a      	lsls	r2, r3
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2201      	movs	r2, #1
 800fd72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	2b02      	cmp	r3, #2
 800fd9a:	d004      	beq.n	800fda6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2280      	movs	r2, #128	; 0x80
 800fda0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800fda2:	2301      	movs	r3, #1
 800fda4:	e00c      	b.n	800fdc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2205      	movs	r2, #5
 800fdaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f022 0201 	bic.w	r2, r2, #1
 800fdbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	370c      	adds	r7, #12
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800fdd8:	4b8e      	ldr	r3, [pc, #568]	; (8010014 <HAL_DMA_IRQHandler+0x248>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4a8e      	ldr	r2, [pc, #568]	; (8010018 <HAL_DMA_IRQHandler+0x24c>)
 800fdde:	fba2 2303 	umull	r2, r3, r2, r3
 800fde2:	0a9b      	lsrs	r3, r3, #10
 800fde4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdf6:	2208      	movs	r2, #8
 800fdf8:	409a      	lsls	r2, r3
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	4013      	ands	r3, r2
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d01a      	beq.n	800fe38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f003 0304 	and.w	r3, r3, #4
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d013      	beq.n	800fe38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f022 0204 	bic.w	r2, r2, #4
 800fe1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe24:	2208      	movs	r2, #8
 800fe26:	409a      	lsls	r2, r3
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe30:	f043 0201 	orr.w	r2, r3, #1
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	409a      	lsls	r2, r3
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4013      	ands	r3, r2
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d012      	beq.n	800fe6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00b      	beq.n	800fe6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	409a      	lsls	r2, r3
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe66:	f043 0202 	orr.w	r2, r3, #2
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe72:	2204      	movs	r2, #4
 800fe74:	409a      	lsls	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	4013      	ands	r3, r2
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d012      	beq.n	800fea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f003 0302 	and.w	r3, r3, #2
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00b      	beq.n	800fea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe90:	2204      	movs	r2, #4
 800fe92:	409a      	lsls	r2, r3
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe9c:	f043 0204 	orr.w	r2, r3, #4
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fea8:	2210      	movs	r2, #16
 800feaa:	409a      	lsls	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4013      	ands	r3, r2
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d043      	beq.n	800ff3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f003 0308 	and.w	r3, r3, #8
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d03c      	beq.n	800ff3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fec6:	2210      	movs	r2, #16
 800fec8:	409a      	lsls	r2, r3
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d018      	beq.n	800ff0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d108      	bne.n	800fefc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d024      	beq.n	800ff3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	4798      	blx	r3
 800fefa:	e01f      	b.n	800ff3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d01b      	beq.n	800ff3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	4798      	blx	r3
 800ff0c:	e016      	b.n	800ff3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d107      	bne.n	800ff2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f022 0208 	bic.w	r2, r2, #8
 800ff2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d003      	beq.n	800ff3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff40:	2220      	movs	r2, #32
 800ff42:	409a      	lsls	r2, r3
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	4013      	ands	r3, r2
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 808f 	beq.w	801006c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f003 0310 	and.w	r3, r3, #16
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f000 8087 	beq.w	801006c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff62:	2220      	movs	r2, #32
 800ff64:	409a      	lsls	r2, r3
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	2b05      	cmp	r3, #5
 800ff74:	d136      	bne.n	800ffe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	681a      	ldr	r2, [r3, #0]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f022 0216 	bic.w	r2, r2, #22
 800ff84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	695a      	ldr	r2, [r3, #20]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ff94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d103      	bne.n	800ffa6 <HAL_DMA_IRQHandler+0x1da>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d007      	beq.n	800ffb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f022 0208 	bic.w	r2, r2, #8
 800ffb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ffba:	223f      	movs	r2, #63	; 0x3f
 800ffbc:	409a      	lsls	r2, r3
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d07e      	beq.n	80100d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	4798      	blx	r3
        }
        return;
 800ffe2:	e079      	b.n	80100d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d01d      	beq.n	801002e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d10d      	bne.n	801001c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010004:	2b00      	cmp	r3, #0
 8010006:	d031      	beq.n	801006c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	4798      	blx	r3
 8010010:	e02c      	b.n	801006c <HAL_DMA_IRQHandler+0x2a0>
 8010012:	bf00      	nop
 8010014:	20000c44 	.word	0x20000c44
 8010018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010020:	2b00      	cmp	r3, #0
 8010022:	d023      	beq.n	801006c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	4798      	blx	r3
 801002c:	e01e      	b.n	801006c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10f      	bne.n	801005c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	681a      	ldr	r2, [r3, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f022 0210 	bic.w	r2, r2, #16
 801004a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010060:	2b00      	cmp	r3, #0
 8010062:	d003      	beq.n	801006c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010070:	2b00      	cmp	r3, #0
 8010072:	d032      	beq.n	80100da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010078:	f003 0301 	and.w	r3, r3, #1
 801007c:	2b00      	cmp	r3, #0
 801007e:	d022      	beq.n	80100c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2205      	movs	r2, #5
 8010084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f022 0201 	bic.w	r2, r2, #1
 8010096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	3301      	adds	r3, #1
 801009c:	60bb      	str	r3, [r7, #8]
 801009e:	697a      	ldr	r2, [r7, #20]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d307      	bcc.n	80100b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f003 0301 	and.w	r3, r3, #1
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d1f2      	bne.n	8010098 <HAL_DMA_IRQHandler+0x2cc>
 80100b2:	e000      	b.n	80100b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80100b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2201      	movs	r2, #1
 80100ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2200      	movs	r2, #0
 80100c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d005      	beq.n	80100da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	4798      	blx	r3
 80100d6:	e000      	b.n	80100da <HAL_DMA_IRQHandler+0x30e>
        return;
 80100d8:	bf00      	nop
    }
  }
}
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80100ee:	b2db      	uxtb	r3, r3
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b085      	sub	sp, #20
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010118:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	683a      	ldr	r2, [r7, #0]
 8010120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	2b40      	cmp	r3, #64	; 0x40
 8010128:	d108      	bne.n	801013c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801013a:	e007      	b.n	801014c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	68ba      	ldr	r2, [r7, #8]
 8010142:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	60da      	str	r2, [r3, #12]
}
 801014c:	bf00      	nop
 801014e:	3714      	adds	r7, #20
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010158:	b480      	push	{r7}
 801015a:	b085      	sub	sp, #20
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	b2db      	uxtb	r3, r3
 8010166:	3b10      	subs	r3, #16
 8010168:	4a14      	ldr	r2, [pc, #80]	; (80101bc <DMA_CalcBaseAndBitshift+0x64>)
 801016a:	fba2 2303 	umull	r2, r3, r2, r3
 801016e:	091b      	lsrs	r3, r3, #4
 8010170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010172:	4a13      	ldr	r2, [pc, #76]	; (80101c0 <DMA_CalcBaseAndBitshift+0x68>)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	4413      	add	r3, r2
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	461a      	mov	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b03      	cmp	r3, #3
 8010184:	d909      	bls.n	801019a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801018e:	f023 0303 	bic.w	r3, r3, #3
 8010192:	1d1a      	adds	r2, r3, #4
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	659a      	str	r2, [r3, #88]	; 0x58
 8010198:	e007      	b.n	80101aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80101a2:	f023 0303 	bic.w	r3, r3, #3
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	aaaaaaab 	.word	0xaaaaaaab
 80101c0:	08024ccc 	.word	0x08024ccc

080101c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80101cc:	2300      	movs	r3, #0
 80101ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	699b      	ldr	r3, [r3, #24]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d11f      	bne.n	801021e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	2b03      	cmp	r3, #3
 80101e2:	d856      	bhi.n	8010292 <DMA_CheckFifoParam+0xce>
 80101e4:	a201      	add	r2, pc, #4	; (adr r2, 80101ec <DMA_CheckFifoParam+0x28>)
 80101e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ea:	bf00      	nop
 80101ec:	080101fd 	.word	0x080101fd
 80101f0:	0801020f 	.word	0x0801020f
 80101f4:	080101fd 	.word	0x080101fd
 80101f8:	08010293 	.word	0x08010293
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010204:	2b00      	cmp	r3, #0
 8010206:	d046      	beq.n	8010296 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8010208:	2301      	movs	r3, #1
 801020a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801020c:	e043      	b.n	8010296 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010216:	d140      	bne.n	801029a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8010218:	2301      	movs	r3, #1
 801021a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801021c:	e03d      	b.n	801029a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	699b      	ldr	r3, [r3, #24]
 8010222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010226:	d121      	bne.n	801026c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b03      	cmp	r3, #3
 801022c:	d837      	bhi.n	801029e <DMA_CheckFifoParam+0xda>
 801022e:	a201      	add	r2, pc, #4	; (adr r2, 8010234 <DMA_CheckFifoParam+0x70>)
 8010230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010234:	08010245 	.word	0x08010245
 8010238:	0801024b 	.word	0x0801024b
 801023c:	08010245 	.word	0x08010245
 8010240:	0801025d 	.word	0x0801025d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010244:	2301      	movs	r3, #1
 8010246:	73fb      	strb	r3, [r7, #15]
      break;
 8010248:	e030      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010252:	2b00      	cmp	r3, #0
 8010254:	d025      	beq.n	80102a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8010256:	2301      	movs	r3, #1
 8010258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801025a:	e022      	b.n	80102a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010264:	d11f      	bne.n	80102a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8010266:	2301      	movs	r3, #1
 8010268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801026a:	e01c      	b.n	80102a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	2b02      	cmp	r3, #2
 8010270:	d903      	bls.n	801027a <DMA_CheckFifoParam+0xb6>
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	2b03      	cmp	r3, #3
 8010276:	d003      	beq.n	8010280 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010278:	e018      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	73fb      	strb	r3, [r7, #15]
      break;
 801027e:	e015      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00e      	beq.n	80102aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801028c:	2301      	movs	r3, #1
 801028e:	73fb      	strb	r3, [r7, #15]
      break;
 8010290:	e00b      	b.n	80102aa <DMA_CheckFifoParam+0xe6>
      break;
 8010292:	bf00      	nop
 8010294:	e00a      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      break;
 8010296:	bf00      	nop
 8010298:	e008      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      break;
 801029a:	bf00      	nop
 801029c:	e006      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      break;
 801029e:	bf00      	nop
 80102a0:	e004      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      break;
 80102a2:	bf00      	nop
 80102a4:	e002      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      break;   
 80102a6:	bf00      	nop
 80102a8:	e000      	b.n	80102ac <DMA_CheckFifoParam+0xe8>
      break;
 80102aa:	bf00      	nop
    }
  } 
  
  return status; 
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop

080102bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80102bc:	b480      	push	{r7}
 80102be:	b089      	sub	sp, #36	; 0x24
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80102c6:	2300      	movs	r3, #0
 80102c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80102ca:	2300      	movs	r3, #0
 80102cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80102ce:	2300      	movs	r3, #0
 80102d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80102d2:	2300      	movs	r3, #0
 80102d4:	61fb      	str	r3, [r7, #28]
 80102d6:	e16b      	b.n	80105b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80102d8:	2201      	movs	r2, #1
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	fa02 f303 	lsl.w	r3, r2, r3
 80102e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	4013      	ands	r3, r2
 80102ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80102ec:	693a      	ldr	r2, [r7, #16]
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	429a      	cmp	r2, r3
 80102f2:	f040 815a 	bne.w	80105aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	f003 0303 	and.w	r3, r3, #3
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d005      	beq.n	801030e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801030a:	2b02      	cmp	r3, #2
 801030c:	d130      	bne.n	8010370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	2203      	movs	r2, #3
 801031a:	fa02 f303 	lsl.w	r3, r2, r3
 801031e:	43db      	mvns	r3, r3
 8010320:	69ba      	ldr	r2, [r7, #24]
 8010322:	4013      	ands	r3, r2
 8010324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	68da      	ldr	r2, [r3, #12]
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	fa02 f303 	lsl.w	r3, r2, r3
 8010332:	69ba      	ldr	r2, [r7, #24]
 8010334:	4313      	orrs	r3, r2
 8010336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	69ba      	ldr	r2, [r7, #24]
 801033c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010344:	2201      	movs	r2, #1
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	fa02 f303 	lsl.w	r3, r2, r3
 801034c:	43db      	mvns	r3, r3
 801034e:	69ba      	ldr	r2, [r7, #24]
 8010350:	4013      	ands	r3, r2
 8010352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	091b      	lsrs	r3, r3, #4
 801035a:	f003 0201 	and.w	r2, r3, #1
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	fa02 f303 	lsl.w	r3, r2, r3
 8010364:	69ba      	ldr	r2, [r7, #24]
 8010366:	4313      	orrs	r3, r2
 8010368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	69ba      	ldr	r2, [r7, #24]
 801036e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	f003 0303 	and.w	r3, r3, #3
 8010378:	2b03      	cmp	r3, #3
 801037a:	d017      	beq.n	80103ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	005b      	lsls	r3, r3, #1
 8010386:	2203      	movs	r2, #3
 8010388:	fa02 f303 	lsl.w	r3, r2, r3
 801038c:	43db      	mvns	r3, r3
 801038e:	69ba      	ldr	r2, [r7, #24]
 8010390:	4013      	ands	r3, r2
 8010392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	689a      	ldr	r2, [r3, #8]
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	005b      	lsls	r3, r3, #1
 801039c:	fa02 f303 	lsl.w	r3, r2, r3
 80103a0:	69ba      	ldr	r2, [r7, #24]
 80103a2:	4313      	orrs	r3, r2
 80103a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	69ba      	ldr	r2, [r7, #24]
 80103aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	f003 0303 	and.w	r3, r3, #3
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	d123      	bne.n	8010400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	08da      	lsrs	r2, r3, #3
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	3208      	adds	r2, #8
 80103c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	f003 0307 	and.w	r3, r3, #7
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	220f      	movs	r2, #15
 80103d0:	fa02 f303 	lsl.w	r3, r2, r3
 80103d4:	43db      	mvns	r3, r3
 80103d6:	69ba      	ldr	r2, [r7, #24]
 80103d8:	4013      	ands	r3, r2
 80103da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	691a      	ldr	r2, [r3, #16]
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	f003 0307 	and.w	r3, r3, #7
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	fa02 f303 	lsl.w	r3, r2, r3
 80103ec:	69ba      	ldr	r2, [r7, #24]
 80103ee:	4313      	orrs	r3, r2
 80103f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80103f2:	69fb      	ldr	r3, [r7, #28]
 80103f4:	08da      	lsrs	r2, r3, #3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	3208      	adds	r2, #8
 80103fa:	69b9      	ldr	r1, [r7, #24]
 80103fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	005b      	lsls	r3, r3, #1
 801040a:	2203      	movs	r2, #3
 801040c:	fa02 f303 	lsl.w	r3, r2, r3
 8010410:	43db      	mvns	r3, r3
 8010412:	69ba      	ldr	r2, [r7, #24]
 8010414:	4013      	ands	r3, r2
 8010416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	685b      	ldr	r3, [r3, #4]
 801041c:	f003 0203 	and.w	r2, r3, #3
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	005b      	lsls	r3, r3, #1
 8010424:	fa02 f303 	lsl.w	r3, r2, r3
 8010428:	69ba      	ldr	r2, [r7, #24]
 801042a:	4313      	orrs	r3, r2
 801042c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	69ba      	ldr	r2, [r7, #24]
 8010432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801043c:	2b00      	cmp	r3, #0
 801043e:	f000 80b4 	beq.w	80105aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010442:	2300      	movs	r3, #0
 8010444:	60fb      	str	r3, [r7, #12]
 8010446:	4b60      	ldr	r3, [pc, #384]	; (80105c8 <HAL_GPIO_Init+0x30c>)
 8010448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801044a:	4a5f      	ldr	r2, [pc, #380]	; (80105c8 <HAL_GPIO_Init+0x30c>)
 801044c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010450:	6453      	str	r3, [r2, #68]	; 0x44
 8010452:	4b5d      	ldr	r3, [pc, #372]	; (80105c8 <HAL_GPIO_Init+0x30c>)
 8010454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801045e:	4a5b      	ldr	r2, [pc, #364]	; (80105cc <HAL_GPIO_Init+0x310>)
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	089b      	lsrs	r3, r3, #2
 8010464:	3302      	adds	r3, #2
 8010466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801046a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	f003 0303 	and.w	r3, r3, #3
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	220f      	movs	r2, #15
 8010476:	fa02 f303 	lsl.w	r3, r2, r3
 801047a:	43db      	mvns	r3, r3
 801047c:	69ba      	ldr	r2, [r7, #24]
 801047e:	4013      	ands	r3, r2
 8010480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4a52      	ldr	r2, [pc, #328]	; (80105d0 <HAL_GPIO_Init+0x314>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d02b      	beq.n	80104e2 <HAL_GPIO_Init+0x226>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4a51      	ldr	r2, [pc, #324]	; (80105d4 <HAL_GPIO_Init+0x318>)
 801048e:	4293      	cmp	r3, r2
 8010490:	d025      	beq.n	80104de <HAL_GPIO_Init+0x222>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4a50      	ldr	r2, [pc, #320]	; (80105d8 <HAL_GPIO_Init+0x31c>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d01f      	beq.n	80104da <HAL_GPIO_Init+0x21e>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a4f      	ldr	r2, [pc, #316]	; (80105dc <HAL_GPIO_Init+0x320>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d019      	beq.n	80104d6 <HAL_GPIO_Init+0x21a>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4a4e      	ldr	r2, [pc, #312]	; (80105e0 <HAL_GPIO_Init+0x324>)
 80104a6:	4293      	cmp	r3, r2
 80104a8:	d013      	beq.n	80104d2 <HAL_GPIO_Init+0x216>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4a4d      	ldr	r2, [pc, #308]	; (80105e4 <HAL_GPIO_Init+0x328>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d00d      	beq.n	80104ce <HAL_GPIO_Init+0x212>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	4a4c      	ldr	r2, [pc, #304]	; (80105e8 <HAL_GPIO_Init+0x32c>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d007      	beq.n	80104ca <HAL_GPIO_Init+0x20e>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4a4b      	ldr	r2, [pc, #300]	; (80105ec <HAL_GPIO_Init+0x330>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d101      	bne.n	80104c6 <HAL_GPIO_Init+0x20a>
 80104c2:	2307      	movs	r3, #7
 80104c4:	e00e      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104c6:	2308      	movs	r3, #8
 80104c8:	e00c      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104ca:	2306      	movs	r3, #6
 80104cc:	e00a      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104ce:	2305      	movs	r3, #5
 80104d0:	e008      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104d2:	2304      	movs	r3, #4
 80104d4:	e006      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104d6:	2303      	movs	r3, #3
 80104d8:	e004      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104da:	2302      	movs	r3, #2
 80104dc:	e002      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104de:	2301      	movs	r3, #1
 80104e0:	e000      	b.n	80104e4 <HAL_GPIO_Init+0x228>
 80104e2:	2300      	movs	r3, #0
 80104e4:	69fa      	ldr	r2, [r7, #28]
 80104e6:	f002 0203 	and.w	r2, r2, #3
 80104ea:	0092      	lsls	r2, r2, #2
 80104ec:	4093      	lsls	r3, r2
 80104ee:	69ba      	ldr	r2, [r7, #24]
 80104f0:	4313      	orrs	r3, r2
 80104f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80104f4:	4935      	ldr	r1, [pc, #212]	; (80105cc <HAL_GPIO_Init+0x310>)
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	089b      	lsrs	r3, r3, #2
 80104fa:	3302      	adds	r3, #2
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010502:	4b3b      	ldr	r3, [pc, #236]	; (80105f0 <HAL_GPIO_Init+0x334>)
 8010504:	689b      	ldr	r3, [r3, #8]
 8010506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	43db      	mvns	r3, r3
 801050c:	69ba      	ldr	r2, [r7, #24]
 801050e:	4013      	ands	r3, r2
 8010510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801051a:	2b00      	cmp	r3, #0
 801051c:	d003      	beq.n	8010526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801051e:	69ba      	ldr	r2, [r7, #24]
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	4313      	orrs	r3, r2
 8010524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010526:	4a32      	ldr	r2, [pc, #200]	; (80105f0 <HAL_GPIO_Init+0x334>)
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801052c:	4b30      	ldr	r3, [pc, #192]	; (80105f0 <HAL_GPIO_Init+0x334>)
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	43db      	mvns	r3, r3
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	4013      	ands	r3, r2
 801053a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	685b      	ldr	r3, [r3, #4]
 8010540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010544:	2b00      	cmp	r3, #0
 8010546:	d003      	beq.n	8010550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010548:	69ba      	ldr	r2, [r7, #24]
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	4313      	orrs	r3, r2
 801054e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010550:	4a27      	ldr	r2, [pc, #156]	; (80105f0 <HAL_GPIO_Init+0x334>)
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8010556:	4b26      	ldr	r3, [pc, #152]	; (80105f0 <HAL_GPIO_Init+0x334>)
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	43db      	mvns	r3, r3
 8010560:	69ba      	ldr	r2, [r7, #24]
 8010562:	4013      	ands	r3, r2
 8010564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801056e:	2b00      	cmp	r3, #0
 8010570:	d003      	beq.n	801057a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010572:	69ba      	ldr	r2, [r7, #24]
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	4313      	orrs	r3, r2
 8010578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801057a:	4a1d      	ldr	r2, [pc, #116]	; (80105f0 <HAL_GPIO_Init+0x334>)
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010580:	4b1b      	ldr	r3, [pc, #108]	; (80105f0 <HAL_GPIO_Init+0x334>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	43db      	mvns	r3, r3
 801058a:	69ba      	ldr	r2, [r7, #24]
 801058c:	4013      	ands	r3, r2
 801058e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010598:	2b00      	cmp	r3, #0
 801059a:	d003      	beq.n	80105a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 801059c:	69ba      	ldr	r2, [r7, #24]
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80105a4:	4a12      	ldr	r2, [pc, #72]	; (80105f0 <HAL_GPIO_Init+0x334>)
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	3301      	adds	r3, #1
 80105ae:	61fb      	str	r3, [r7, #28]
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	2b0f      	cmp	r3, #15
 80105b4:	f67f ae90 	bls.w	80102d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80105b8:	bf00      	nop
 80105ba:	bf00      	nop
 80105bc:	3724      	adds	r7, #36	; 0x24
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	40023800 	.word	0x40023800
 80105cc:	40013800 	.word	0x40013800
 80105d0:	40020000 	.word	0x40020000
 80105d4:	40020400 	.word	0x40020400
 80105d8:	40020800 	.word	0x40020800
 80105dc:	40020c00 	.word	0x40020c00
 80105e0:	40021000 	.word	0x40021000
 80105e4:	40021400 	.word	0x40021400
 80105e8:	40021800 	.word	0x40021800
 80105ec:	40021c00 	.word	0x40021c00
 80105f0:	40013c00 	.word	0x40013c00

080105f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	460b      	mov	r3, r1
 80105fe:	807b      	strh	r3, [r7, #2]
 8010600:	4613      	mov	r3, r2
 8010602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010604:	787b      	ldrb	r3, [r7, #1]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d003      	beq.n	8010612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801060a:	887a      	ldrh	r2, [r7, #2]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8010610:	e003      	b.n	801061a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8010612:	887b      	ldrh	r3, [r7, #2]
 8010614:	041a      	lsls	r2, r3, #16
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	619a      	str	r2, [r3, #24]
}
 801061a:	bf00      	nop
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr

08010626 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b086      	sub	sp, #24
 801062a:	af02      	add	r7, sp, #8
 801062c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d101      	bne.n	8010638 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8010634:	2301      	movs	r3, #1
 8010636:	e101      	b.n	801083c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2200      	movs	r2, #0
 801064e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f00b fac0 	bl	801bbd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2203      	movs	r2, #3
 801065c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010666:	d102      	bne.n	801066e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4618      	mov	r0, r3
 8010674:	f004 fb55 	bl	8014d22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6818      	ldr	r0, [r3, #0]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	7c1a      	ldrb	r2, [r3, #16]
 8010680:	f88d 2000 	strb.w	r2, [sp]
 8010684:	3304      	adds	r3, #4
 8010686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010688:	f004 fa33 	bl	8014af2 <USB_CoreInit>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d005      	beq.n	801069e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2202      	movs	r2, #2
 8010696:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 801069a:	2301      	movs	r3, #1
 801069c:	e0ce      	b.n	801083c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2100      	movs	r1, #0
 80106a4:	4618      	mov	r0, r3
 80106a6:	f004 fb4d 	bl	8014d44 <USB_SetCurrentMode>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d005      	beq.n	80106bc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2202      	movs	r2, #2
 80106b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80106b8:	2301      	movs	r3, #1
 80106ba:	e0bf      	b.n	801083c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80106bc:	2300      	movs	r3, #0
 80106be:	73fb      	strb	r3, [r7, #15]
 80106c0:	e04a      	b.n	8010758 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80106c2:	7bfa      	ldrb	r2, [r7, #15]
 80106c4:	6879      	ldr	r1, [r7, #4]
 80106c6:	4613      	mov	r3, r2
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	4413      	add	r3, r2
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	440b      	add	r3, r1
 80106d0:	3315      	adds	r3, #21
 80106d2:	2201      	movs	r2, #1
 80106d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80106d6:	7bfa      	ldrb	r2, [r7, #15]
 80106d8:	6879      	ldr	r1, [r7, #4]
 80106da:	4613      	mov	r3, r2
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	4413      	add	r3, r2
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	440b      	add	r3, r1
 80106e4:	3314      	adds	r3, #20
 80106e6:	7bfa      	ldrb	r2, [r7, #15]
 80106e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80106ea:	7bfa      	ldrb	r2, [r7, #15]
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
 80106ee:	b298      	uxth	r0, r3
 80106f0:	6879      	ldr	r1, [r7, #4]
 80106f2:	4613      	mov	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	4413      	add	r3, r2
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	440b      	add	r3, r1
 80106fc:	332e      	adds	r3, #46	; 0x2e
 80106fe:	4602      	mov	r2, r0
 8010700:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8010702:	7bfa      	ldrb	r2, [r7, #15]
 8010704:	6879      	ldr	r1, [r7, #4]
 8010706:	4613      	mov	r3, r2
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	4413      	add	r3, r2
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	440b      	add	r3, r1
 8010710:	3318      	adds	r3, #24
 8010712:	2200      	movs	r2, #0
 8010714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8010716:	7bfa      	ldrb	r2, [r7, #15]
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	4613      	mov	r3, r2
 801071c:	00db      	lsls	r3, r3, #3
 801071e:	4413      	add	r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	440b      	add	r3, r1
 8010724:	331c      	adds	r3, #28
 8010726:	2200      	movs	r2, #0
 8010728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801072a:	7bfa      	ldrb	r2, [r7, #15]
 801072c:	6879      	ldr	r1, [r7, #4]
 801072e:	4613      	mov	r3, r2
 8010730:	00db      	lsls	r3, r3, #3
 8010732:	4413      	add	r3, r2
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	440b      	add	r3, r1
 8010738:	3320      	adds	r3, #32
 801073a:	2200      	movs	r2, #0
 801073c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801073e:	7bfa      	ldrb	r2, [r7, #15]
 8010740:	6879      	ldr	r1, [r7, #4]
 8010742:	4613      	mov	r3, r2
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	4413      	add	r3, r2
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	440b      	add	r3, r1
 801074c:	3324      	adds	r3, #36	; 0x24
 801074e:	2200      	movs	r2, #0
 8010750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	3301      	adds	r3, #1
 8010756:	73fb      	strb	r3, [r7, #15]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	791b      	ldrb	r3, [r3, #4]
 801075c:	7bfa      	ldrb	r2, [r7, #15]
 801075e:	429a      	cmp	r2, r3
 8010760:	d3af      	bcc.n	80106c2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010762:	2300      	movs	r3, #0
 8010764:	73fb      	strb	r3, [r7, #15]
 8010766:	e044      	b.n	80107f2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8010768:	7bfa      	ldrb	r2, [r7, #15]
 801076a:	6879      	ldr	r1, [r7, #4]
 801076c:	4613      	mov	r3, r2
 801076e:	00db      	lsls	r3, r3, #3
 8010770:	4413      	add	r3, r2
 8010772:	009b      	lsls	r3, r3, #2
 8010774:	440b      	add	r3, r1
 8010776:	f203 2355 	addw	r3, r3, #597	; 0x255
 801077a:	2200      	movs	r2, #0
 801077c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801077e:	7bfa      	ldrb	r2, [r7, #15]
 8010780:	6879      	ldr	r1, [r7, #4]
 8010782:	4613      	mov	r3, r2
 8010784:	00db      	lsls	r3, r3, #3
 8010786:	4413      	add	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	440b      	add	r3, r1
 801078c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8010790:	7bfa      	ldrb	r2, [r7, #15]
 8010792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8010794:	7bfa      	ldrb	r2, [r7, #15]
 8010796:	6879      	ldr	r1, [r7, #4]
 8010798:	4613      	mov	r3, r2
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	4413      	add	r3, r2
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	440b      	add	r3, r1
 80107a2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80107a6:	2200      	movs	r2, #0
 80107a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80107aa:	7bfa      	ldrb	r2, [r7, #15]
 80107ac:	6879      	ldr	r1, [r7, #4]
 80107ae:	4613      	mov	r3, r2
 80107b0:	00db      	lsls	r3, r3, #3
 80107b2:	4413      	add	r3, r2
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	440b      	add	r3, r1
 80107b8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80107bc:	2200      	movs	r2, #0
 80107be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80107c0:	7bfa      	ldrb	r2, [r7, #15]
 80107c2:	6879      	ldr	r1, [r7, #4]
 80107c4:	4613      	mov	r3, r2
 80107c6:	00db      	lsls	r3, r3, #3
 80107c8:	4413      	add	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	440b      	add	r3, r1
 80107ce:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80107d2:	2200      	movs	r2, #0
 80107d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80107d6:	7bfa      	ldrb	r2, [r7, #15]
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	4613      	mov	r3, r2
 80107dc:	00db      	lsls	r3, r3, #3
 80107de:	4413      	add	r3, r2
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	440b      	add	r3, r1
 80107e4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80107e8:	2200      	movs	r2, #0
 80107ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
 80107ee:	3301      	adds	r3, #1
 80107f0:	73fb      	strb	r3, [r7, #15]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	791b      	ldrb	r3, [r3, #4]
 80107f6:	7bfa      	ldrb	r2, [r7, #15]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d3b5      	bcc.n	8010768 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6818      	ldr	r0, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	7c1a      	ldrb	r2, [r3, #16]
 8010804:	f88d 2000 	strb.w	r2, [sp]
 8010808:	3304      	adds	r3, #4
 801080a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801080c:	f004 fae6 	bl	8014ddc <USB_DevInit>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d005      	beq.n	8010822 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2202      	movs	r2, #2
 801081a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 801081e:	2301      	movs	r3, #1
 8010820:	e00c      	b.n	801083c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2201      	movs	r2, #1
 801082c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	4618      	mov	r0, r3
 8010836:	f005 fb2a 	bl	8015e8e <USB_DevDisconnect>

  return HAL_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010858:	2b01      	cmp	r3, #1
 801085a:	d101      	bne.n	8010860 <HAL_PCD_Start+0x1c>
 801085c:	2302      	movs	r3, #2
 801085e:	e022      	b.n	80108a6 <HAL_PCD_Start+0x62>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2201      	movs	r2, #1
 8010864:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	68db      	ldr	r3, [r3, #12]
 801086c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010870:	2b00      	cmp	r3, #0
 8010872:	d009      	beq.n	8010888 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8010878:	2b01      	cmp	r3, #1
 801087a:	d105      	bne.n	8010888 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010880:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4618      	mov	r0, r3
 801088e:	f004 fa37 	bl	8014d00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4618      	mov	r0, r3
 8010898:	f005 fad8 	bl	8015e4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80108ae:	b590      	push	{r4, r7, lr}
 80108b0:	b08d      	sub	sp, #52	; 0x34
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108bc:	6a3b      	ldr	r3, [r7, #32]
 80108be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f005 fb96 	bl	8015ff6 <USB_GetMode>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	f040 848c 	bne.w	80111ea <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	4618      	mov	r0, r3
 80108d8:	f005 fafa 	bl	8015ed0 <USB_ReadInterrupts>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	f000 8482 	beq.w	80111e8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108ea:	689b      	ldr	r3, [r3, #8]
 80108ec:	0a1b      	lsrs	r3, r3, #8
 80108ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f005 fae7 	bl	8015ed0 <USB_ReadInterrupts>
 8010902:	4603      	mov	r3, r0
 8010904:	f003 0302 	and.w	r3, r3, #2
 8010908:	2b02      	cmp	r3, #2
 801090a:	d107      	bne.n	801091c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	695a      	ldr	r2, [r3, #20]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f002 0202 	and.w	r2, r2, #2
 801091a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4618      	mov	r0, r3
 8010922:	f005 fad5 	bl	8015ed0 <USB_ReadInterrupts>
 8010926:	4603      	mov	r3, r0
 8010928:	f003 0310 	and.w	r3, r3, #16
 801092c:	2b10      	cmp	r3, #16
 801092e:	d161      	bne.n	80109f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	699a      	ldr	r2, [r3, #24]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f022 0210 	bic.w	r2, r2, #16
 801093e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8010940:	6a3b      	ldr	r3, [r7, #32]
 8010942:	6a1b      	ldr	r3, [r3, #32]
 8010944:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	f003 020f 	and.w	r2, r3, #15
 801094c:	4613      	mov	r3, r2
 801094e:	00db      	lsls	r3, r3, #3
 8010950:	4413      	add	r3, r2
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	4413      	add	r3, r2
 801095c:	3304      	adds	r3, #4
 801095e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	0c5b      	lsrs	r3, r3, #17
 8010964:	f003 030f 	and.w	r3, r3, #15
 8010968:	2b02      	cmp	r3, #2
 801096a:	d124      	bne.n	80109b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 801096c:	69ba      	ldr	r2, [r7, #24]
 801096e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8010972:	4013      	ands	r3, r2
 8010974:	2b00      	cmp	r3, #0
 8010976:	d035      	beq.n	80109e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	091b      	lsrs	r3, r3, #4
 8010980:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8010982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8010986:	b29b      	uxth	r3, r3
 8010988:	461a      	mov	r2, r3
 801098a:	6a38      	ldr	r0, [r7, #32]
 801098c:	f005 f90c 	bl	8015ba8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	68da      	ldr	r2, [r3, #12]
 8010994:	69bb      	ldr	r3, [r7, #24]
 8010996:	091b      	lsrs	r3, r3, #4
 8010998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801099c:	441a      	add	r2, r3
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	695a      	ldr	r2, [r3, #20]
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	091b      	lsrs	r3, r3, #4
 80109aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109ae:	441a      	add	r2, r3
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	615a      	str	r2, [r3, #20]
 80109b4:	e016      	b.n	80109e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80109b6:	69bb      	ldr	r3, [r7, #24]
 80109b8:	0c5b      	lsrs	r3, r3, #17
 80109ba:	f003 030f 	and.w	r3, r3, #15
 80109be:	2b06      	cmp	r3, #6
 80109c0:	d110      	bne.n	80109e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80109c8:	2208      	movs	r2, #8
 80109ca:	4619      	mov	r1, r3
 80109cc:	6a38      	ldr	r0, [r7, #32]
 80109ce:	f005 f8eb 	bl	8015ba8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	695a      	ldr	r2, [r3, #20]
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	091b      	lsrs	r3, r3, #4
 80109da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80109de:	441a      	add	r2, r3
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	699a      	ldr	r2, [r3, #24]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f042 0210 	orr.w	r2, r2, #16
 80109f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f005 fa69 	bl	8015ed0 <USB_ReadInterrupts>
 80109fe:	4603      	mov	r3, r0
 8010a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010a04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010a08:	f040 80a7 	bne.w	8010b5a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f005 fa6e 	bl	8015ef6 <USB_ReadDevAllOutEpInterrupt>
 8010a1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8010a1c:	e099      	b.n	8010b52 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8010a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a20:	f003 0301 	and.w	r3, r3, #1
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f000 808e 	beq.w	8010b46 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a30:	b2d2      	uxtb	r2, r2
 8010a32:	4611      	mov	r1, r2
 8010a34:	4618      	mov	r0, r3
 8010a36:	f005 fa92 	bl	8015f5e <USB_ReadDevOutEPInterrupt>
 8010a3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	f003 0301 	and.w	r3, r3, #1
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00c      	beq.n	8010a60 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8010a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a48:	015a      	lsls	r2, r3, #5
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	4413      	add	r3, r2
 8010a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a52:	461a      	mov	r2, r3
 8010a54:	2301      	movs	r3, #1
 8010a56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8010a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 fea2 	bl	80117a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	f003 0308 	and.w	r3, r3, #8
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d00c      	beq.n	8010a84 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6c:	015a      	lsls	r2, r3, #5
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	4413      	add	r3, r2
 8010a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a76:	461a      	mov	r2, r3
 8010a78:	2308      	movs	r3, #8
 8010a7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8010a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 ff78 	bl	8011974 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8010a84:	693b      	ldr	r3, [r7, #16]
 8010a86:	f003 0310 	and.w	r3, r3, #16
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d008      	beq.n	8010aa0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a90:	015a      	lsls	r2, r3, #5
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	4413      	add	r3, r2
 8010a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	2310      	movs	r3, #16
 8010a9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	f003 0302 	and.w	r3, r3, #2
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d030      	beq.n	8010b0c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8010aaa:	6a3b      	ldr	r3, [r7, #32]
 8010aac:	695b      	ldr	r3, [r3, #20]
 8010aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ab2:	2b80      	cmp	r3, #128	; 0x80
 8010ab4:	d109      	bne.n	8010aca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	69fa      	ldr	r2, [r7, #28]
 8010ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ac4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010ac8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8010aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010acc:	4613      	mov	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	4413      	add	r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	4413      	add	r3, r2
 8010adc:	3304      	adds	r3, #4
 8010ade:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	78db      	ldrb	r3, [r3, #3]
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d108      	bne.n	8010afa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	2200      	movs	r2, #0
 8010aec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	4619      	mov	r1, r3
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f00b f975 	bl	801bde4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	015a      	lsls	r2, r3, #5
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	4413      	add	r3, r2
 8010b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b06:	461a      	mov	r2, r3
 8010b08:	2302      	movs	r3, #2
 8010b0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	f003 0320 	and.w	r3, r3, #32
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d008      	beq.n	8010b28 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b18:	015a      	lsls	r2, r3, #5
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b22:	461a      	mov	r2, r3
 8010b24:	2320      	movs	r3, #32
 8010b26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d009      	beq.n	8010b46 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8010b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b34:	015a      	lsls	r2, r3, #5
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	4413      	add	r3, r2
 8010b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b3e:	461a      	mov	r2, r3
 8010b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b44:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8010b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b48:	3301      	adds	r3, #1
 8010b4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4e:	085b      	lsrs	r3, r3, #1
 8010b50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f47f af62 	bne.w	8010a1e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f005 f9b6 	bl	8015ed0 <USB_ReadInterrupts>
 8010b64:	4603      	mov	r3, r0
 8010b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010b6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010b6e:	f040 80db 	bne.w	8010d28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4618      	mov	r0, r3
 8010b78:	f005 f9d7 	bl	8015f2a <USB_ReadDevAllInEpInterrupt>
 8010b7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8010b82:	e0cd      	b.n	8010d20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8010b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b86:	f003 0301 	and.w	r3, r3, #1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f000 80c2 	beq.w	8010d14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b96:	b2d2      	uxtb	r2, r2
 8010b98:	4611      	mov	r1, r2
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f005 f9fd 	bl	8015f9a <USB_ReadDevInEPInterrupt>
 8010ba0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d057      	beq.n	8010c5c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	f003 030f 	and.w	r3, r3, #15
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	43db      	mvns	r3, r3
 8010bc6:	69f9      	ldr	r1, [r7, #28]
 8010bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010bcc:	4013      	ands	r3, r2
 8010bce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	015a      	lsls	r2, r3, #5
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bdc:	461a      	mov	r2, r3
 8010bde:	2301      	movs	r3, #1
 8010be0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	799b      	ldrb	r3, [r3, #6]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d132      	bne.n	8010c50 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bee:	4613      	mov	r3, r2
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	4413      	add	r3, r2
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	440b      	add	r3, r1
 8010bf8:	3320      	adds	r3, #32
 8010bfa:	6819      	ldr	r1, [r3, #0]
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c00:	4613      	mov	r3, r2
 8010c02:	00db      	lsls	r3, r3, #3
 8010c04:	4413      	add	r3, r2
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4403      	add	r3, r0
 8010c0a:	331c      	adds	r3, #28
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	4419      	add	r1, r3
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c14:	4613      	mov	r3, r2
 8010c16:	00db      	lsls	r3, r3, #3
 8010c18:	4413      	add	r3, r2
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	4403      	add	r3, r0
 8010c1e:	3320      	adds	r3, #32
 8010c20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d113      	bne.n	8010c50 <HAL_PCD_IRQHandler+0x3a2>
 8010c28:	6879      	ldr	r1, [r7, #4]
 8010c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	00db      	lsls	r3, r3, #3
 8010c30:	4413      	add	r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	440b      	add	r3, r1
 8010c36:	3324      	adds	r3, #36	; 0x24
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d108      	bne.n	8010c50 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6818      	ldr	r0, [r3, #0]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8010c48:	461a      	mov	r2, r3
 8010c4a:	2101      	movs	r1, #1
 8010c4c:	f005 fa04 	bl	8016058 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8010c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	4619      	mov	r1, r3
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f00b f83f 	bl	801bcda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	f003 0308 	and.w	r3, r3, #8
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d008      	beq.n	8010c78 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8010c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c68:	015a      	lsls	r2, r3, #5
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c72:	461a      	mov	r2, r3
 8010c74:	2308      	movs	r3, #8
 8010c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	f003 0310 	and.w	r3, r3, #16
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d008      	beq.n	8010c94 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8010c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c84:	015a      	lsls	r2, r3, #5
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	4413      	add	r3, r2
 8010c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c8e:	461a      	mov	r2, r3
 8010c90:	2310      	movs	r3, #16
 8010c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d008      	beq.n	8010cb0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	015a      	lsls	r2, r3, #5
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010caa:	461a      	mov	r2, r3
 8010cac:	2340      	movs	r3, #64	; 0x40
 8010cae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	f003 0302 	and.w	r3, r3, #2
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d023      	beq.n	8010d02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8010cba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cbc:	6a38      	ldr	r0, [r7, #32]
 8010cbe:	f004 f9f1 	bl	80150a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8010cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	00db      	lsls	r3, r3, #3
 8010cc8:	4413      	add	r3, r2
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	3310      	adds	r3, #16
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	3304      	adds	r3, #4
 8010cd4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	78db      	ldrb	r3, [r3, #3]
 8010cda:	2b01      	cmp	r3, #1
 8010cdc:	d108      	bne.n	8010cf0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	4619      	mov	r1, r3
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	f00b f88c 	bl	801be08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf2:	015a      	lsls	r2, r3, #5
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	2302      	movs	r3, #2
 8010d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d003      	beq.n	8010d14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8010d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f000 fcbb 	bl	801168a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8010d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d16:	3301      	adds	r3, #1
 8010d18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8010d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d1c:	085b      	lsrs	r3, r3, #1
 8010d1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8010d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f47f af2e 	bne.w	8010b84 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f005 f8cf 	bl	8015ed0 <USB_ReadInterrupts>
 8010d32:	4603      	mov	r3, r0
 8010d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d3c:	d122      	bne.n	8010d84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	69fa      	ldr	r2, [r7, #28]
 8010d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d4c:	f023 0301 	bic.w	r3, r3, #1
 8010d50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d108      	bne.n	8010d6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2200      	movs	r2, #0
 8010d60:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8010d64:	2100      	movs	r1, #0
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 fea2 	bl	8011ab0 <HAL_PCDEx_LPM_Callback>
 8010d6c:	e002      	b.n	8010d74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f00b f82a 	bl	801bdc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	695a      	ldr	r2, [r3, #20]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8010d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f005 f8a1 	bl	8015ed0 <USB_ReadInterrupts>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010d98:	d112      	bne.n	8010dc0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010da0:	689b      	ldr	r3, [r3, #8]
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b01      	cmp	r3, #1
 8010da8:	d102      	bne.n	8010db0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f00a ffe6 	bl	801bd7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	695a      	ldr	r2, [r3, #20]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8010dbe:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f005 f883 	bl	8015ed0 <USB_ReadInterrupts>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010dd4:	f040 80b7 	bne.w	8010f46 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	69fa      	ldr	r2, [r7, #28]
 8010de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010de6:	f023 0301 	bic.w	r3, r3, #1
 8010dea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2110      	movs	r1, #16
 8010df2:	4618      	mov	r0, r3
 8010df4:	f004 f956 	bl	80150a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010df8:	2300      	movs	r3, #0
 8010dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010dfc:	e046      	b.n	8010e8c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8010dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e00:	015a      	lsls	r2, r3, #5
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	4413      	add	r3, r2
 8010e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010e10:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e14:	015a      	lsls	r2, r3, #5
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	4413      	add	r3, r2
 8010e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e22:	0151      	lsls	r1, r2, #5
 8010e24:	69fa      	ldr	r2, [r7, #28]
 8010e26:	440a      	add	r2, r1
 8010e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8010e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e34:	015a      	lsls	r2, r3, #5
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	4413      	add	r3, r2
 8010e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e3e:	461a      	mov	r2, r3
 8010e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010e44:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e48:	015a      	lsls	r2, r3, #5
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	4413      	add	r3, r2
 8010e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e56:	0151      	lsls	r1, r2, #5
 8010e58:	69fa      	ldr	r2, [r7, #28]
 8010e5a:	440a      	add	r2, r1
 8010e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e68:	015a      	lsls	r2, r3, #5
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e76:	0151      	lsls	r1, r2, #5
 8010e78:	69fa      	ldr	r2, [r7, #28]
 8010e7a:	440a      	add	r2, r1
 8010e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010e84:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8010e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e88:	3301      	adds	r3, #1
 8010e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	791b      	ldrb	r3, [r3, #4]
 8010e90:	461a      	mov	r2, r3
 8010e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d3b2      	bcc.n	8010dfe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e9e:	69db      	ldr	r3, [r3, #28]
 8010ea0:	69fa      	ldr	r2, [r7, #28]
 8010ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ea6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8010eaa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	7bdb      	ldrb	r3, [r3, #15]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d016      	beq.n	8010ee2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ebe:	69fa      	ldr	r2, [r7, #28]
 8010ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ec4:	f043 030b 	orr.w	r3, r3, #11
 8010ec8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ed4:	69fa      	ldr	r2, [r7, #28]
 8010ed6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010eda:	f043 030b 	orr.w	r3, r3, #11
 8010ede:	6453      	str	r3, [r2, #68]	; 0x44
 8010ee0:	e015      	b.n	8010f0e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee8:	695b      	ldr	r3, [r3, #20]
 8010eea:	69fa      	ldr	r2, [r7, #28]
 8010eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010ef4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8010ef8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	69fa      	ldr	r2, [r7, #28]
 8010f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f08:	f043 030b 	orr.w	r3, r3, #11
 8010f0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	69fa      	ldr	r2, [r7, #28]
 8010f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010f20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6818      	ldr	r0, [r3, #0]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8010f30:	461a      	mov	r2, r3
 8010f32:	f005 f891 	bl	8016058 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	695a      	ldr	r2, [r3, #20]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8010f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f004 ffc0 	bl	8015ed0 <USB_ReadInterrupts>
 8010f50:	4603      	mov	r3, r0
 8010f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f5a:	d123      	bne.n	8010fa4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f005 f856 	bl	8016012 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f004 f913 	bl	8015196 <USB_GetDevSpeed>
 8010f70:	4603      	mov	r3, r0
 8010f72:	461a      	mov	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681c      	ldr	r4, [r3, #0]
 8010f7c:	f001 fa08 	bl	8012390 <HAL_RCC_GetHCLKFreq>
 8010f80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8010f86:	461a      	mov	r2, r3
 8010f88:	4620      	mov	r0, r4
 8010f8a:	f003 fe17 	bl	8014bbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f00a fecb 	bl	801bd2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	695a      	ldr	r2, [r3, #20]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8010fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f004 ff91 	bl	8015ed0 <USB_ReadInterrupts>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	f003 0308 	and.w	r3, r3, #8
 8010fb4:	2b08      	cmp	r3, #8
 8010fb6:	d10a      	bne.n	8010fce <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f00a fea8 	bl	801bd0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	695a      	ldr	r2, [r3, #20]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f002 0208 	and.w	r2, r2, #8
 8010fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f004 ff7c 	bl	8015ed0 <USB_ReadInterrupts>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fde:	2b80      	cmp	r3, #128	; 0x80
 8010fe0:	d123      	bne.n	801102a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8010fe2:	6a3b      	ldr	r3, [r7, #32]
 8010fe4:	699b      	ldr	r3, [r3, #24]
 8010fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010fea:	6a3b      	ldr	r3, [r7, #32]
 8010fec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8010fee:	2301      	movs	r3, #1
 8010ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8010ff2:	e014      	b.n	801101e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8010ff4:	6879      	ldr	r1, [r7, #4]
 8010ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	00db      	lsls	r3, r3, #3
 8010ffc:	4413      	add	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	440b      	add	r3, r1
 8011002:	f203 2357 	addw	r3, r3, #599	; 0x257
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	2b01      	cmp	r3, #1
 801100a:	d105      	bne.n	8011018 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	b2db      	uxtb	r3, r3
 8011010:	4619      	mov	r1, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 fb08 	bl	8011628 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	3301      	adds	r3, #1
 801101c:	627b      	str	r3, [r7, #36]	; 0x24
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	791b      	ldrb	r3, [r3, #4]
 8011022:	461a      	mov	r2, r3
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	4293      	cmp	r3, r2
 8011028:	d3e4      	bcc.n	8010ff4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	4618      	mov	r0, r3
 8011030:	f004 ff4e 	bl	8015ed0 <USB_ReadInterrupts>
 8011034:	4603      	mov	r3, r0
 8011036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801103a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801103e:	d13c      	bne.n	80110ba <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011040:	2301      	movs	r3, #1
 8011042:	627b      	str	r3, [r7, #36]	; 0x24
 8011044:	e02b      	b.n	801109e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8011046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011048:	015a      	lsls	r2, r3, #5
 801104a:	69fb      	ldr	r3, [r7, #28]
 801104c:	4413      	add	r3, r2
 801104e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8011056:	6879      	ldr	r1, [r7, #4]
 8011058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801105a:	4613      	mov	r3, r2
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	4413      	add	r3, r2
 8011060:	009b      	lsls	r3, r3, #2
 8011062:	440b      	add	r3, r1
 8011064:	3318      	adds	r3, #24
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d115      	bne.n	8011098 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 801106c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 801106e:	2b00      	cmp	r3, #0
 8011070:	da12      	bge.n	8011098 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8011072:	6879      	ldr	r1, [r7, #4]
 8011074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011076:	4613      	mov	r3, r2
 8011078:	00db      	lsls	r3, r3, #3
 801107a:	4413      	add	r3, r2
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	440b      	add	r3, r1
 8011080:	3317      	adds	r3, #23
 8011082:	2201      	movs	r2, #1
 8011084:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	b2db      	uxtb	r3, r3
 801108a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801108e:	b2db      	uxtb	r3, r3
 8011090:	4619      	mov	r1, r3
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f000 fac8 	bl	8011628 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8011098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109a:	3301      	adds	r3, #1
 801109c:	627b      	str	r3, [r7, #36]	; 0x24
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	791b      	ldrb	r3, [r3, #4]
 80110a2:	461a      	mov	r2, r3
 80110a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d3cd      	bcc.n	8011046 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	695a      	ldr	r2, [r3, #20]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80110b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4618      	mov	r0, r3
 80110c0:	f004 ff06 	bl	8015ed0 <USB_ReadInterrupts>
 80110c4:	4603      	mov	r3, r0
 80110c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80110ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80110ce:	d156      	bne.n	801117e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80110d0:	2301      	movs	r3, #1
 80110d2:	627b      	str	r3, [r7, #36]	; 0x24
 80110d4:	e045      	b.n	8011162 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80110d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d8:	015a      	lsls	r2, r3, #5
 80110da:	69fb      	ldr	r3, [r7, #28]
 80110dc:	4413      	add	r3, r2
 80110de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110ea:	4613      	mov	r3, r2
 80110ec:	00db      	lsls	r3, r3, #3
 80110ee:	4413      	add	r3, r2
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	440b      	add	r3, r1
 80110f4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80110f8:	781b      	ldrb	r3, [r3, #0]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	d12e      	bne.n	801115c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80110fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8011100:	2b00      	cmp	r3, #0
 8011102:	da2b      	bge.n	801115c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8011104:	69bb      	ldr	r3, [r7, #24]
 8011106:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8011110:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8011114:	429a      	cmp	r2, r3
 8011116:	d121      	bne.n	801115c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8011118:	6879      	ldr	r1, [r7, #4]
 801111a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801111c:	4613      	mov	r3, r2
 801111e:	00db      	lsls	r3, r3, #3
 8011120:	4413      	add	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	440b      	add	r3, r1
 8011126:	f203 2357 	addw	r3, r3, #599	; 0x257
 801112a:	2201      	movs	r2, #1
 801112c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 801112e:	6a3b      	ldr	r3, [r7, #32]
 8011130:	699b      	ldr	r3, [r3, #24]
 8011132:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011136:	6a3b      	ldr	r3, [r7, #32]
 8011138:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 801113a:	6a3b      	ldr	r3, [r7, #32]
 801113c:	695b      	ldr	r3, [r3, #20]
 801113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011142:	2b00      	cmp	r3, #0
 8011144:	d10a      	bne.n	801115c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	69fa      	ldr	r2, [r7, #28]
 8011150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011158:	6053      	str	r3, [r2, #4]
            break;
 801115a:	e008      	b.n	801116e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 801115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115e:	3301      	adds	r3, #1
 8011160:	627b      	str	r3, [r7, #36]	; 0x24
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	791b      	ldrb	r3, [r3, #4]
 8011166:	461a      	mov	r2, r3
 8011168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116a:	4293      	cmp	r3, r2
 801116c:	d3b3      	bcc.n	80110d6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	695a      	ldr	r2, [r3, #20]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801117c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	4618      	mov	r0, r3
 8011184:	f004 fea4 	bl	8015ed0 <USB_ReadInterrupts>
 8011188:	4603      	mov	r3, r0
 801118a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801118e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011192:	d10a      	bne.n	80111aa <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f00a fe49 	bl	801be2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	695a      	ldr	r2, [r3, #20]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80111a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f004 fe8e 	bl	8015ed0 <USB_ReadInterrupts>
 80111b4:	4603      	mov	r3, r0
 80111b6:	f003 0304 	and.w	r3, r3, #4
 80111ba:	2b04      	cmp	r3, #4
 80111bc:	d115      	bne.n	80111ea <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	685b      	ldr	r3, [r3, #4]
 80111c4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	f003 0304 	and.w	r3, r3, #4
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f00a fe39 	bl	801be48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	6859      	ldr	r1, [r3, #4]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	69ba      	ldr	r2, [r7, #24]
 80111e2:	430a      	orrs	r2, r1
 80111e4:	605a      	str	r2, [r3, #4]
 80111e6:	e000      	b.n	80111ea <HAL_PCD_IRQHandler+0x93c>
      return;
 80111e8:	bf00      	nop
    }
  }
}
 80111ea:	3734      	adds	r7, #52	; 0x34
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd90      	pop	{r4, r7, pc}

080111f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	460b      	mov	r3, r1
 80111fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8011202:	2b01      	cmp	r3, #1
 8011204:	d101      	bne.n	801120a <HAL_PCD_SetAddress+0x1a>
 8011206:	2302      	movs	r3, #2
 8011208:	e012      	b.n	8011230 <HAL_PCD_SetAddress+0x40>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2201      	movs	r2, #1
 801120e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	78fa      	ldrb	r2, [r7, #3]
 8011216:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	78fa      	ldrb	r2, [r7, #3]
 801121e:	4611      	mov	r1, r2
 8011220:	4618      	mov	r0, r3
 8011222:	f004 fded 	bl	8015e00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2200      	movs	r2, #0
 801122a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 801122e:	2300      	movs	r3, #0
}
 8011230:	4618      	mov	r0, r3
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	4608      	mov	r0, r1
 8011242:	4611      	mov	r1, r2
 8011244:	461a      	mov	r2, r3
 8011246:	4603      	mov	r3, r0
 8011248:	70fb      	strb	r3, [r7, #3]
 801124a:	460b      	mov	r3, r1
 801124c:	803b      	strh	r3, [r7, #0]
 801124e:	4613      	mov	r3, r2
 8011250:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011252:	2300      	movs	r3, #0
 8011254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801125a:	2b00      	cmp	r3, #0
 801125c:	da0f      	bge.n	801127e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801125e:	78fb      	ldrb	r3, [r7, #3]
 8011260:	f003 020f 	and.w	r2, r3, #15
 8011264:	4613      	mov	r3, r2
 8011266:	00db      	lsls	r3, r3, #3
 8011268:	4413      	add	r3, r2
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	3310      	adds	r3, #16
 801126e:	687a      	ldr	r2, [r7, #4]
 8011270:	4413      	add	r3, r2
 8011272:	3304      	adds	r3, #4
 8011274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	2201      	movs	r2, #1
 801127a:	705a      	strb	r2, [r3, #1]
 801127c:	e00f      	b.n	801129e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801127e:	78fb      	ldrb	r3, [r7, #3]
 8011280:	f003 020f 	and.w	r2, r3, #15
 8011284:	4613      	mov	r3, r2
 8011286:	00db      	lsls	r3, r3, #3
 8011288:	4413      	add	r3, r2
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	4413      	add	r3, r2
 8011294:	3304      	adds	r3, #4
 8011296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2200      	movs	r2, #0
 801129c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 801129e:	78fb      	ldrb	r3, [r7, #3]
 80112a0:	f003 030f 	and.w	r3, r3, #15
 80112a4:	b2da      	uxtb	r2, r3
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80112aa:	883a      	ldrh	r2, [r7, #0]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	78ba      	ldrb	r2, [r7, #2]
 80112b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	785b      	ldrb	r3, [r3, #1]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d004      	beq.n	80112c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80112c8:	78bb      	ldrb	r3, [r7, #2]
 80112ca:	2b02      	cmp	r3, #2
 80112cc:	d102      	bne.n	80112d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2200      	movs	r2, #0
 80112d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80112da:	2b01      	cmp	r3, #1
 80112dc:	d101      	bne.n	80112e2 <HAL_PCD_EP_Open+0xaa>
 80112de:	2302      	movs	r3, #2
 80112e0:	e00e      	b.n	8011300 <HAL_PCD_EP_Open+0xc8>
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2201      	movs	r2, #1
 80112e6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	68f9      	ldr	r1, [r7, #12]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f003 ff75 	bl	80151e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80112fe:	7afb      	ldrb	r3, [r7, #11]
}
 8011300:	4618      	mov	r0, r3
 8011302:	3710      	adds	r7, #16
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b084      	sub	sp, #16
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	460b      	mov	r3, r1
 8011312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011318:	2b00      	cmp	r3, #0
 801131a:	da0f      	bge.n	801133c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801131c:	78fb      	ldrb	r3, [r7, #3]
 801131e:	f003 020f 	and.w	r2, r3, #15
 8011322:	4613      	mov	r3, r2
 8011324:	00db      	lsls	r3, r3, #3
 8011326:	4413      	add	r3, r2
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	3310      	adds	r3, #16
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	4413      	add	r3, r2
 8011330:	3304      	adds	r3, #4
 8011332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2201      	movs	r2, #1
 8011338:	705a      	strb	r2, [r3, #1]
 801133a:	e00f      	b.n	801135c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801133c:	78fb      	ldrb	r3, [r7, #3]
 801133e:	f003 020f 	and.w	r2, r3, #15
 8011342:	4613      	mov	r3, r2
 8011344:	00db      	lsls	r3, r3, #3
 8011346:	4413      	add	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	4413      	add	r3, r2
 8011352:	3304      	adds	r3, #4
 8011354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2200      	movs	r2, #0
 801135a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 801135c:	78fb      	ldrb	r3, [r7, #3]
 801135e:	f003 030f 	and.w	r3, r3, #15
 8011362:	b2da      	uxtb	r2, r3
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 801136e:	2b01      	cmp	r3, #1
 8011370:	d101      	bne.n	8011376 <HAL_PCD_EP_Close+0x6e>
 8011372:	2302      	movs	r3, #2
 8011374:	e00e      	b.n	8011394 <HAL_PCD_EP_Close+0x8c>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2201      	movs	r2, #1
 801137a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	68f9      	ldr	r1, [r7, #12]
 8011384:	4618      	mov	r0, r3
 8011386:	f003 ffb3 	bl	80152f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2200      	movs	r2, #0
 801138e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8011392:	2300      	movs	r3, #0
}
 8011394:	4618      	mov	r0, r3
 8011396:	3710      	adds	r7, #16
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b086      	sub	sp, #24
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	607a      	str	r2, [r7, #4]
 80113a6:	603b      	str	r3, [r7, #0]
 80113a8:	460b      	mov	r3, r1
 80113aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80113ac:	7afb      	ldrb	r3, [r7, #11]
 80113ae:	f003 020f 	and.w	r2, r3, #15
 80113b2:	4613      	mov	r3, r2
 80113b4:	00db      	lsls	r3, r3, #3
 80113b6:	4413      	add	r3, r2
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	4413      	add	r3, r2
 80113c2:	3304      	adds	r3, #4
 80113c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	687a      	ldr	r2, [r7, #4]
 80113ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2200      	movs	r2, #0
 80113d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	2200      	movs	r2, #0
 80113dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80113de:	7afb      	ldrb	r3, [r7, #11]
 80113e0:	f003 030f 	and.w	r3, r3, #15
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	799b      	ldrb	r3, [r3, #6]
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d102      	bne.n	80113f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	6818      	ldr	r0, [r3, #0]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	799b      	ldrb	r3, [r3, #6]
 8011400:	461a      	mov	r2, r3
 8011402:	6979      	ldr	r1, [r7, #20]
 8011404:	f004 f850 	bl	80154a8 <USB_EPStartXfer>

  return HAL_OK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3718      	adds	r7, #24
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8011412:	b480      	push	{r7}
 8011414:	b083      	sub	sp, #12
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
 801141a:	460b      	mov	r3, r1
 801141c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801141e:	78fb      	ldrb	r3, [r7, #3]
 8011420:	f003 020f 	and.w	r2, r3, #15
 8011424:	6879      	ldr	r1, [r7, #4]
 8011426:	4613      	mov	r3, r2
 8011428:	00db      	lsls	r3, r3, #3
 801142a:	4413      	add	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	440b      	add	r3, r1
 8011430:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8011434:	681b      	ldr	r3, [r3, #0]
}
 8011436:	4618      	mov	r0, r3
 8011438:	370c      	adds	r7, #12
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr

08011442 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8011442:	b580      	push	{r7, lr}
 8011444:	b086      	sub	sp, #24
 8011446:	af00      	add	r7, sp, #0
 8011448:	60f8      	str	r0, [r7, #12]
 801144a:	607a      	str	r2, [r7, #4]
 801144c:	603b      	str	r3, [r7, #0]
 801144e:	460b      	mov	r3, r1
 8011450:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011452:	7afb      	ldrb	r3, [r7, #11]
 8011454:	f003 020f 	and.w	r2, r3, #15
 8011458:	4613      	mov	r3, r2
 801145a:	00db      	lsls	r3, r3, #3
 801145c:	4413      	add	r3, r2
 801145e:	009b      	lsls	r3, r3, #2
 8011460:	3310      	adds	r3, #16
 8011462:	68fa      	ldr	r2, [r7, #12]
 8011464:	4413      	add	r3, r2
 8011466:	3304      	adds	r3, #4
 8011468:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	683a      	ldr	r2, [r7, #0]
 8011474:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	2200      	movs	r2, #0
 801147a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	2201      	movs	r2, #1
 8011480:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8011482:	7afb      	ldrb	r3, [r7, #11]
 8011484:	f003 030f 	and.w	r3, r3, #15
 8011488:	b2da      	uxtb	r2, r3
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	799b      	ldrb	r3, [r3, #6]
 8011492:	2b01      	cmp	r3, #1
 8011494:	d102      	bne.n	801149c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	6818      	ldr	r0, [r3, #0]
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	799b      	ldrb	r3, [r3, #6]
 80114a4:	461a      	mov	r2, r3
 80114a6:	6979      	ldr	r1, [r7, #20]
 80114a8:	f003 fffe 	bl	80154a8 <USB_EPStartXfer>

  return HAL_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3718      	adds	r7, #24
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}

080114b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80114b6:	b580      	push	{r7, lr}
 80114b8:	b084      	sub	sp, #16
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
 80114be:	460b      	mov	r3, r1
 80114c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80114c2:	78fb      	ldrb	r3, [r7, #3]
 80114c4:	f003 030f 	and.w	r3, r3, #15
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	7912      	ldrb	r2, [r2, #4]
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d901      	bls.n	80114d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80114d0:	2301      	movs	r3, #1
 80114d2:	e04f      	b.n	8011574 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80114d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	da0f      	bge.n	80114fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80114dc:	78fb      	ldrb	r3, [r7, #3]
 80114de:	f003 020f 	and.w	r2, r3, #15
 80114e2:	4613      	mov	r3, r2
 80114e4:	00db      	lsls	r3, r3, #3
 80114e6:	4413      	add	r3, r2
 80114e8:	009b      	lsls	r3, r3, #2
 80114ea:	3310      	adds	r3, #16
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	4413      	add	r3, r2
 80114f0:	3304      	adds	r3, #4
 80114f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2201      	movs	r2, #1
 80114f8:	705a      	strb	r2, [r3, #1]
 80114fa:	e00d      	b.n	8011518 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80114fc:	78fa      	ldrb	r2, [r7, #3]
 80114fe:	4613      	mov	r3, r2
 8011500:	00db      	lsls	r3, r3, #3
 8011502:	4413      	add	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	f503 7314 	add.w	r3, r3, #592	; 0x250
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	4413      	add	r3, r2
 801150e:	3304      	adds	r3, #4
 8011510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2200      	movs	r2, #0
 8011516:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2201      	movs	r2, #1
 801151c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801151e:	78fb      	ldrb	r3, [r7, #3]
 8011520:	f003 030f 	and.w	r3, r3, #15
 8011524:	b2da      	uxtb	r2, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8011530:	2b01      	cmp	r3, #1
 8011532:	d101      	bne.n	8011538 <HAL_PCD_EP_SetStall+0x82>
 8011534:	2302      	movs	r3, #2
 8011536:	e01d      	b.n	8011574 <HAL_PCD_EP_SetStall+0xbe>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2201      	movs	r2, #1
 801153c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	68f9      	ldr	r1, [r7, #12]
 8011546:	4618      	mov	r0, r3
 8011548:	f004 fb86 	bl	8015c58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801154c:	78fb      	ldrb	r3, [r7, #3]
 801154e:	f003 030f 	and.w	r3, r3, #15
 8011552:	2b00      	cmp	r3, #0
 8011554:	d109      	bne.n	801156a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6818      	ldr	r0, [r3, #0]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	7999      	ldrb	r1, [r3, #6]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8011564:	461a      	mov	r2, r3
 8011566:	f004 fd77 	bl	8016058 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2200      	movs	r2, #0
 801156e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	3710      	adds	r7, #16
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}

0801157c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801157c:	b580      	push	{r7, lr}
 801157e:	b084      	sub	sp, #16
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	460b      	mov	r3, r1
 8011586:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8011588:	78fb      	ldrb	r3, [r7, #3]
 801158a:	f003 030f 	and.w	r3, r3, #15
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	7912      	ldrb	r2, [r2, #4]
 8011592:	4293      	cmp	r3, r2
 8011594:	d901      	bls.n	801159a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8011596:	2301      	movs	r3, #1
 8011598:	e042      	b.n	8011620 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801159a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	da0f      	bge.n	80115c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80115a2:	78fb      	ldrb	r3, [r7, #3]
 80115a4:	f003 020f 	and.w	r2, r3, #15
 80115a8:	4613      	mov	r3, r2
 80115aa:	00db      	lsls	r3, r3, #3
 80115ac:	4413      	add	r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	3310      	adds	r3, #16
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	4413      	add	r3, r2
 80115b6:	3304      	adds	r3, #4
 80115b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2201      	movs	r2, #1
 80115be:	705a      	strb	r2, [r3, #1]
 80115c0:	e00f      	b.n	80115e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80115c2:	78fb      	ldrb	r3, [r7, #3]
 80115c4:	f003 020f 	and.w	r2, r3, #15
 80115c8:	4613      	mov	r3, r2
 80115ca:	00db      	lsls	r3, r3, #3
 80115cc:	4413      	add	r3, r2
 80115ce:	009b      	lsls	r3, r3, #2
 80115d0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80115d4:	687a      	ldr	r2, [r7, #4]
 80115d6:	4413      	add	r3, r2
 80115d8:	3304      	adds	r3, #4
 80115da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2200      	movs	r2, #0
 80115e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2200      	movs	r2, #0
 80115e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80115e8:	78fb      	ldrb	r3, [r7, #3]
 80115ea:	f003 030f 	and.w	r3, r3, #15
 80115ee:	b2da      	uxtb	r2, r3
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d101      	bne.n	8011602 <HAL_PCD_EP_ClrStall+0x86>
 80115fe:	2302      	movs	r3, #2
 8011600:	e00e      	b.n	8011620 <HAL_PCD_EP_ClrStall+0xa4>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2201      	movs	r2, #1
 8011606:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	68f9      	ldr	r1, [r7, #12]
 8011610:	4618      	mov	r0, r3
 8011612:	f004 fb8f 	bl	8015d34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	2200      	movs	r2, #0
 801161a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 801161e:	2300      	movs	r3, #0
}
 8011620:	4618      	mov	r0, r3
 8011622:	3710      	adds	r7, #16
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}

08011628 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
 8011630:	460b      	mov	r3, r1
 8011632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8011634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011638:	2b00      	cmp	r3, #0
 801163a:	da0c      	bge.n	8011656 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801163c:	78fb      	ldrb	r3, [r7, #3]
 801163e:	f003 020f 	and.w	r2, r3, #15
 8011642:	4613      	mov	r3, r2
 8011644:	00db      	lsls	r3, r3, #3
 8011646:	4413      	add	r3, r2
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	3310      	adds	r3, #16
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	4413      	add	r3, r2
 8011650:	3304      	adds	r3, #4
 8011652:	60fb      	str	r3, [r7, #12]
 8011654:	e00c      	b.n	8011670 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011656:	78fb      	ldrb	r3, [r7, #3]
 8011658:	f003 020f 	and.w	r2, r3, #15
 801165c:	4613      	mov	r3, r2
 801165e:	00db      	lsls	r3, r3, #3
 8011660:	4413      	add	r3, r2
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	4413      	add	r3, r2
 801166c:	3304      	adds	r3, #4
 801166e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	68f9      	ldr	r1, [r7, #12]
 8011676:	4618      	mov	r0, r3
 8011678:	f004 f9ae 	bl	80159d8 <USB_EPStopXfer>
 801167c:	4603      	mov	r3, r0
 801167e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8011680:	7afb      	ldrb	r3, [r7, #11]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b08a      	sub	sp, #40	; 0x28
 801168e:	af02      	add	r7, sp, #8
 8011690:	6078      	str	r0, [r7, #4]
 8011692:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	4613      	mov	r3, r2
 80116a2:	00db      	lsls	r3, r3, #3
 80116a4:	4413      	add	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	3310      	adds	r3, #16
 80116aa:	687a      	ldr	r2, [r7, #4]
 80116ac:	4413      	add	r3, r2
 80116ae:	3304      	adds	r3, #4
 80116b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	695a      	ldr	r2, [r3, #20]
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	691b      	ldr	r3, [r3, #16]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d901      	bls.n	80116c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	e06b      	b.n	801179a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	691a      	ldr	r2, [r3, #16]
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	695b      	ldr	r3, [r3, #20]
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	69fa      	ldr	r2, [r7, #28]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d902      	bls.n	80116de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	689b      	ldr	r3, [r3, #8]
 80116dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	3303      	adds	r3, #3
 80116e2:	089b      	lsrs	r3, r3, #2
 80116e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80116e6:	e02a      	b.n	801173e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	691a      	ldr	r2, [r3, #16]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	695b      	ldr	r3, [r3, #20]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	689b      	ldr	r3, [r3, #8]
 80116f8:	69fa      	ldr	r2, [r7, #28]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d902      	bls.n	8011704 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	689b      	ldr	r3, [r3, #8]
 8011702:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	3303      	adds	r3, #3
 8011708:	089b      	lsrs	r3, r3, #2
 801170a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	68d9      	ldr	r1, [r3, #12]
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	b2da      	uxtb	r2, r3
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	4603      	mov	r3, r0
 8011720:	6978      	ldr	r0, [r7, #20]
 8011722:	f004 fa03 	bl	8015b2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	68da      	ldr	r2, [r3, #12]
 801172a:	69fb      	ldr	r3, [r7, #28]
 801172c:	441a      	add	r2, r3
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	695a      	ldr	r2, [r3, #20]
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	441a      	add	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	015a      	lsls	r2, r3, #5
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	4413      	add	r3, r2
 8011746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801174a:	699b      	ldr	r3, [r3, #24]
 801174c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801174e:	69ba      	ldr	r2, [r7, #24]
 8011750:	429a      	cmp	r2, r3
 8011752:	d809      	bhi.n	8011768 <PCD_WriteEmptyTxFifo+0xde>
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	695a      	ldr	r2, [r3, #20]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801175c:	429a      	cmp	r2, r3
 801175e:	d203      	bcs.n	8011768 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1bf      	bne.n	80116e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	691a      	ldr	r2, [r3, #16]
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	695b      	ldr	r3, [r3, #20]
 8011770:	429a      	cmp	r2, r3
 8011772:	d811      	bhi.n	8011798 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	f003 030f 	and.w	r3, r3, #15
 801177a:	2201      	movs	r2, #1
 801177c:	fa02 f303 	lsl.w	r3, r2, r3
 8011780:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	43db      	mvns	r3, r3
 801178e:	6939      	ldr	r1, [r7, #16]
 8011790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011794:	4013      	ands	r3, r2
 8011796:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	3720      	adds	r7, #32
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
	...

080117a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	333c      	adds	r3, #60	; 0x3c
 80117bc:	3304      	adds	r3, #4
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	015a      	lsls	r2, r3, #5
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	4413      	add	r3, r2
 80117ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	799b      	ldrb	r3, [r3, #6]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d17b      	bne.n	80118d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	f003 0308 	and.w	r3, r3, #8
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d015      	beq.n	8011810 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	4a61      	ldr	r2, [pc, #388]	; (801196c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	f240 80b9 	bls.w	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f000 80b3 	beq.w	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	015a      	lsls	r2, r3, #5
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	4413      	add	r3, r2
 8011802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011806:	461a      	mov	r2, r3
 8011808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801180c:	6093      	str	r3, [r2, #8]
 801180e:	e0a7      	b.n	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	f003 0320 	and.w	r3, r3, #32
 8011816:	2b00      	cmp	r3, #0
 8011818:	d009      	beq.n	801182e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	015a      	lsls	r2, r3, #5
 801181e:	69bb      	ldr	r3, [r7, #24]
 8011820:	4413      	add	r3, r2
 8011822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011826:	461a      	mov	r2, r3
 8011828:	2320      	movs	r3, #32
 801182a:	6093      	str	r3, [r2, #8]
 801182c:	e098      	b.n	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011834:	2b00      	cmp	r3, #0
 8011836:	f040 8093 	bne.w	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	4a4b      	ldr	r2, [pc, #300]	; (801196c <PCD_EP_OutXfrComplete_int+0x1c8>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d90f      	bls.n	8011862 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00a      	beq.n	8011862 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	015a      	lsls	r2, r3, #5
 8011850:	69bb      	ldr	r3, [r7, #24]
 8011852:	4413      	add	r3, r2
 8011854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011858:	461a      	mov	r2, r3
 801185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801185e:	6093      	str	r3, [r2, #8]
 8011860:	e07e      	b.n	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8011862:	683a      	ldr	r2, [r7, #0]
 8011864:	4613      	mov	r3, r2
 8011866:	00db      	lsls	r3, r3, #3
 8011868:	4413      	add	r3, r2
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	4413      	add	r3, r2
 8011874:	3304      	adds	r3, #4
 8011876:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	6a1a      	ldr	r2, [r3, #32]
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	0159      	lsls	r1, r3, #5
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	440b      	add	r3, r1
 8011884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011888:	691b      	ldr	r3, [r3, #16]
 801188a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801188e:	1ad2      	subs	r2, r2, r3
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d114      	bne.n	80118c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	691b      	ldr	r3, [r3, #16]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d109      	bne.n	80118b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6818      	ldr	r0, [r3, #0]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80118ac:	461a      	mov	r2, r3
 80118ae:	2101      	movs	r1, #1
 80118b0:	f004 fbd2 	bl	8016058 <USB_EP0_OutStart>
 80118b4:	e006      	b.n	80118c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	68da      	ldr	r2, [r3, #12]
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	695b      	ldr	r3, [r3, #20]
 80118be:	441a      	add	r2, r3
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	4619      	mov	r1, r3
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f00a f9ea 	bl	801bca4 <HAL_PCD_DataOutStageCallback>
 80118d0:	e046      	b.n	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	4a26      	ldr	r2, [pc, #152]	; (8011970 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d124      	bne.n	8011924 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d00a      	beq.n	80118fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	015a      	lsls	r2, r3, #5
 80118e8:	69bb      	ldr	r3, [r7, #24]
 80118ea:	4413      	add	r3, r2
 80118ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118f0:	461a      	mov	r2, r3
 80118f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118f6:	6093      	str	r3, [r2, #8]
 80118f8:	e032      	b.n	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	f003 0320 	and.w	r3, r3, #32
 8011900:	2b00      	cmp	r3, #0
 8011902:	d008      	beq.n	8011916 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	015a      	lsls	r2, r3, #5
 8011908:	69bb      	ldr	r3, [r7, #24]
 801190a:	4413      	add	r3, r2
 801190c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011910:	461a      	mov	r2, r3
 8011912:	2320      	movs	r3, #32
 8011914:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	b2db      	uxtb	r3, r3
 801191a:	4619      	mov	r1, r3
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f00a f9c1 	bl	801bca4 <HAL_PCD_DataOutStageCallback>
 8011922:	e01d      	b.n	8011960 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d114      	bne.n	8011954 <PCD_EP_OutXfrComplete_int+0x1b0>
 801192a:	6879      	ldr	r1, [r7, #4]
 801192c:	683a      	ldr	r2, [r7, #0]
 801192e:	4613      	mov	r3, r2
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	4413      	add	r3, r2
 8011934:	009b      	lsls	r3, r3, #2
 8011936:	440b      	add	r3, r1
 8011938:	f503 7319 	add.w	r3, r3, #612	; 0x264
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d108      	bne.n	8011954 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6818      	ldr	r0, [r3, #0]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 801194c:	461a      	mov	r2, r3
 801194e:	2100      	movs	r1, #0
 8011950:	f004 fb82 	bl	8016058 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	b2db      	uxtb	r3, r3
 8011958:	4619      	mov	r1, r3
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f00a f9a2 	bl	801bca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8011960:	2300      	movs	r3, #0
}
 8011962:	4618      	mov	r0, r3
 8011964:	3720      	adds	r7, #32
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	4f54300a 	.word	0x4f54300a
 8011970:	4f54310a 	.word	0x4f54310a

08011974 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b086      	sub	sp, #24
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	333c      	adds	r3, #60	; 0x3c
 801198c:	3304      	adds	r3, #4
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	015a      	lsls	r2, r3, #5
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	4413      	add	r3, r2
 801199a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801199e:	689b      	ldr	r3, [r3, #8]
 80119a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	4a15      	ldr	r2, [pc, #84]	; (80119fc <PCD_EP_OutSetupPacket_int+0x88>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d90e      	bls.n	80119c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80119aa:	68bb      	ldr	r3, [r7, #8]
 80119ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d009      	beq.n	80119c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	015a      	lsls	r2, r3, #5
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	4413      	add	r3, r2
 80119bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119c0:	461a      	mov	r2, r3
 80119c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80119c8:	6878      	ldr	r0, [r7, #4]
 80119ca:	f00a f959 	bl	801bc80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	4a0a      	ldr	r2, [pc, #40]	; (80119fc <PCD_EP_OutSetupPacket_int+0x88>)
 80119d2:	4293      	cmp	r3, r2
 80119d4:	d90c      	bls.n	80119f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	799b      	ldrb	r3, [r3, #6]
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d108      	bne.n	80119f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6818      	ldr	r0, [r3, #0]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80119e8:	461a      	mov	r2, r3
 80119ea:	2101      	movs	r1, #1
 80119ec:	f004 fb34 	bl	8016058 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80119f0:	2300      	movs	r3, #0
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3718      	adds	r7, #24
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
 80119fa:	bf00      	nop
 80119fc:	4f54300a 	.word	0x4f54300a

08011a00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b085      	sub	sp, #20
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	70fb      	strb	r3, [r7, #3]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8011a18:	78fb      	ldrb	r3, [r7, #3]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d107      	bne.n	8011a2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8011a1e:	883b      	ldrh	r3, [r7, #0]
 8011a20:	0419      	lsls	r1, r3, #16
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	68ba      	ldr	r2, [r7, #8]
 8011a28:	430a      	orrs	r2, r1
 8011a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8011a2c:	e028      	b.n	8011a80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a34:	0c1b      	lsrs	r3, r3, #16
 8011a36:	68ba      	ldr	r2, [r7, #8]
 8011a38:	4413      	add	r3, r2
 8011a3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	73fb      	strb	r3, [r7, #15]
 8011a40:	e00d      	b.n	8011a5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	7bfb      	ldrb	r3, [r7, #15]
 8011a48:	3340      	adds	r3, #64	; 0x40
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	0c1b      	lsrs	r3, r3, #16
 8011a52:	68ba      	ldr	r2, [r7, #8]
 8011a54:	4413      	add	r3, r2
 8011a56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	73fb      	strb	r3, [r7, #15]
 8011a5e:	7bfa      	ldrb	r2, [r7, #15]
 8011a60:	78fb      	ldrb	r3, [r7, #3]
 8011a62:	3b01      	subs	r3, #1
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d3ec      	bcc.n	8011a42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8011a68:	883b      	ldrh	r3, [r7, #0]
 8011a6a:	0418      	lsls	r0, r3, #16
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6819      	ldr	r1, [r3, #0]
 8011a70:	78fb      	ldrb	r3, [r7, #3]
 8011a72:	3b01      	subs	r3, #1
 8011a74:	68ba      	ldr	r2, [r7, #8]
 8011a76:	4302      	orrs	r2, r0
 8011a78:	3340      	adds	r3, #64	; 0x40
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	440b      	add	r3, r1
 8011a7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8011a80:	2300      	movs	r3, #0
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3714      	adds	r7, #20
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr

08011a8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8011a8e:	b480      	push	{r7}
 8011a90:	b083      	sub	sp, #12
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
 8011a96:	460b      	mov	r3, r1
 8011a98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	887a      	ldrh	r2, [r7, #2]
 8011aa0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8011aa2:	2300      	movs	r3, #0
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	370c      	adds	r7, #12
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aae:	4770      	bx	lr

08011ab0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b083      	sub	sp, #12
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	460b      	mov	r3, r1
 8011aba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8011abc:	bf00      	nop
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b086      	sub	sp, #24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d101      	bne.n	8011ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	e267      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f003 0301 	and.w	r3, r3, #1
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d075      	beq.n	8011bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011ae6:	4b88      	ldr	r3, [pc, #544]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011ae8:	689b      	ldr	r3, [r3, #8]
 8011aea:	f003 030c 	and.w	r3, r3, #12
 8011aee:	2b04      	cmp	r3, #4
 8011af0:	d00c      	beq.n	8011b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011af2:	4b85      	ldr	r3, [pc, #532]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011af4:	689b      	ldr	r3, [r3, #8]
 8011af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011afa:	2b08      	cmp	r3, #8
 8011afc:	d112      	bne.n	8011b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011afe:	4b82      	ldr	r3, [pc, #520]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b0a:	d10b      	bne.n	8011b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011b0c:	4b7e      	ldr	r3, [pc, #504]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d05b      	beq.n	8011bd0 <HAL_RCC_OscConfig+0x108>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d157      	bne.n	8011bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011b20:	2301      	movs	r3, #1
 8011b22:	e242      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b2c:	d106      	bne.n	8011b3c <HAL_RCC_OscConfig+0x74>
 8011b2e:	4b76      	ldr	r3, [pc, #472]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4a75      	ldr	r2, [pc, #468]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011b38:	6013      	str	r3, [r2, #0]
 8011b3a:	e01d      	b.n	8011b78 <HAL_RCC_OscConfig+0xb0>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011b44:	d10c      	bne.n	8011b60 <HAL_RCC_OscConfig+0x98>
 8011b46:	4b70      	ldr	r3, [pc, #448]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4a6f      	ldr	r2, [pc, #444]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011b50:	6013      	str	r3, [r2, #0]
 8011b52:	4b6d      	ldr	r3, [pc, #436]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	4a6c      	ldr	r2, [pc, #432]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011b5c:	6013      	str	r3, [r2, #0]
 8011b5e:	e00b      	b.n	8011b78 <HAL_RCC_OscConfig+0xb0>
 8011b60:	4b69      	ldr	r3, [pc, #420]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4a68      	ldr	r2, [pc, #416]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011b6a:	6013      	str	r3, [r2, #0]
 8011b6c:	4b66      	ldr	r3, [pc, #408]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a65      	ldr	r2, [pc, #404]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d013      	beq.n	8011ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b80:	f7fd fa38 	bl	800eff4 <HAL_GetTick>
 8011b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011b86:	e008      	b.n	8011b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011b88:	f7fd fa34 	bl	800eff4 <HAL_GetTick>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	2b64      	cmp	r3, #100	; 0x64
 8011b94:	d901      	bls.n	8011b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8011b96:	2303      	movs	r3, #3
 8011b98:	e207      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011b9a:	4b5b      	ldr	r3, [pc, #364]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d0f0      	beq.n	8011b88 <HAL_RCC_OscConfig+0xc0>
 8011ba6:	e014      	b.n	8011bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ba8:	f7fd fa24 	bl	800eff4 <HAL_GetTick>
 8011bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011bae:	e008      	b.n	8011bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011bb0:	f7fd fa20 	bl	800eff4 <HAL_GetTick>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	1ad3      	subs	r3, r2, r3
 8011bba:	2b64      	cmp	r3, #100	; 0x64
 8011bbc:	d901      	bls.n	8011bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011bbe:	2303      	movs	r3, #3
 8011bc0:	e1f3      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011bc2:	4b51      	ldr	r3, [pc, #324]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d1f0      	bne.n	8011bb0 <HAL_RCC_OscConfig+0xe8>
 8011bce:	e000      	b.n	8011bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f003 0302 	and.w	r3, r3, #2
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d063      	beq.n	8011ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011bde:	4b4a      	ldr	r3, [pc, #296]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011be0:	689b      	ldr	r3, [r3, #8]
 8011be2:	f003 030c 	and.w	r3, r3, #12
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00b      	beq.n	8011c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011bea:	4b47      	ldr	r3, [pc, #284]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011bec:	689b      	ldr	r3, [r3, #8]
 8011bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8011bf2:	2b08      	cmp	r3, #8
 8011bf4:	d11c      	bne.n	8011c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011bf6:	4b44      	ldr	r3, [pc, #272]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d116      	bne.n	8011c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011c02:	4b41      	ldr	r3, [pc, #260]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f003 0302 	and.w	r3, r3, #2
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d005      	beq.n	8011c1a <HAL_RCC_OscConfig+0x152>
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d001      	beq.n	8011c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011c16:	2301      	movs	r3, #1
 8011c18:	e1c7      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011c1a:	4b3b      	ldr	r3, [pc, #236]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	691b      	ldr	r3, [r3, #16]
 8011c26:	00db      	lsls	r3, r3, #3
 8011c28:	4937      	ldr	r1, [pc, #220]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011c2e:	e03a      	b.n	8011ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	68db      	ldr	r3, [r3, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d020      	beq.n	8011c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011c38:	4b34      	ldr	r3, [pc, #208]	; (8011d0c <HAL_RCC_OscConfig+0x244>)
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c3e:	f7fd f9d9 	bl	800eff4 <HAL_GetTick>
 8011c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c44:	e008      	b.n	8011c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011c46:	f7fd f9d5 	bl	800eff4 <HAL_GetTick>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	1ad3      	subs	r3, r2, r3
 8011c50:	2b02      	cmp	r3, #2
 8011c52:	d901      	bls.n	8011c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011c54:	2303      	movs	r3, #3
 8011c56:	e1a8      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c58:	4b2b      	ldr	r3, [pc, #172]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f003 0302 	and.w	r3, r3, #2
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d0f0      	beq.n	8011c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011c64:	4b28      	ldr	r3, [pc, #160]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	691b      	ldr	r3, [r3, #16]
 8011c70:	00db      	lsls	r3, r3, #3
 8011c72:	4925      	ldr	r1, [pc, #148]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011c74:	4313      	orrs	r3, r2
 8011c76:	600b      	str	r3, [r1, #0]
 8011c78:	e015      	b.n	8011ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011c7a:	4b24      	ldr	r3, [pc, #144]	; (8011d0c <HAL_RCC_OscConfig+0x244>)
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011c80:	f7fd f9b8 	bl	800eff4 <HAL_GetTick>
 8011c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011c86:	e008      	b.n	8011c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011c88:	f7fd f9b4 	bl	800eff4 <HAL_GetTick>
 8011c8c:	4602      	mov	r2, r0
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d901      	bls.n	8011c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8011c96:	2303      	movs	r3, #3
 8011c98:	e187      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011c9a:	4b1b      	ldr	r3, [pc, #108]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f003 0302 	and.w	r3, r3, #2
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d1f0      	bne.n	8011c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	f003 0308 	and.w	r3, r3, #8
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d036      	beq.n	8011d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	695b      	ldr	r3, [r3, #20]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d016      	beq.n	8011ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011cba:	4b15      	ldr	r3, [pc, #84]	; (8011d10 <HAL_RCC_OscConfig+0x248>)
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011cc0:	f7fd f998 	bl	800eff4 <HAL_GetTick>
 8011cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011cc6:	e008      	b.n	8011cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011cc8:	f7fd f994 	bl	800eff4 <HAL_GetTick>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	d901      	bls.n	8011cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011cd6:	2303      	movs	r3, #3
 8011cd8:	e167      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011cda:	4b0b      	ldr	r3, [pc, #44]	; (8011d08 <HAL_RCC_OscConfig+0x240>)
 8011cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cde:	f003 0302 	and.w	r3, r3, #2
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d0f0      	beq.n	8011cc8 <HAL_RCC_OscConfig+0x200>
 8011ce6:	e01b      	b.n	8011d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011ce8:	4b09      	ldr	r3, [pc, #36]	; (8011d10 <HAL_RCC_OscConfig+0x248>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011cee:	f7fd f981 	bl	800eff4 <HAL_GetTick>
 8011cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011cf4:	e00e      	b.n	8011d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011cf6:	f7fd f97d 	bl	800eff4 <HAL_GetTick>
 8011cfa:	4602      	mov	r2, r0
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	1ad3      	subs	r3, r2, r3
 8011d00:	2b02      	cmp	r3, #2
 8011d02:	d907      	bls.n	8011d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011d04:	2303      	movs	r3, #3
 8011d06:	e150      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
 8011d08:	40023800 	.word	0x40023800
 8011d0c:	42470000 	.word	0x42470000
 8011d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011d14:	4b88      	ldr	r3, [pc, #544]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d18:	f003 0302 	and.w	r3, r3, #2
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d1ea      	bne.n	8011cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f003 0304 	and.w	r3, r3, #4
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 8097 	beq.w	8011e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011d32:	4b81      	ldr	r3, [pc, #516]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d10f      	bne.n	8011d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011d3e:	2300      	movs	r3, #0
 8011d40:	60bb      	str	r3, [r7, #8]
 8011d42:	4b7d      	ldr	r3, [pc, #500]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d46:	4a7c      	ldr	r2, [pc, #496]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8011d4e:	4b7a      	ldr	r3, [pc, #488]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d56:	60bb      	str	r3, [r7, #8]
 8011d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011d5e:	4b77      	ldr	r3, [pc, #476]	; (8011f3c <HAL_RCC_OscConfig+0x474>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d118      	bne.n	8011d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011d6a:	4b74      	ldr	r3, [pc, #464]	; (8011f3c <HAL_RCC_OscConfig+0x474>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4a73      	ldr	r2, [pc, #460]	; (8011f3c <HAL_RCC_OscConfig+0x474>)
 8011d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011d76:	f7fd f93d 	bl	800eff4 <HAL_GetTick>
 8011d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011d7c:	e008      	b.n	8011d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011d7e:	f7fd f939 	bl	800eff4 <HAL_GetTick>
 8011d82:	4602      	mov	r2, r0
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	1ad3      	subs	r3, r2, r3
 8011d88:	2b02      	cmp	r3, #2
 8011d8a:	d901      	bls.n	8011d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011d8c:	2303      	movs	r3, #3
 8011d8e:	e10c      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011d90:	4b6a      	ldr	r3, [pc, #424]	; (8011f3c <HAL_RCC_OscConfig+0x474>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d0f0      	beq.n	8011d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	2b01      	cmp	r3, #1
 8011da2:	d106      	bne.n	8011db2 <HAL_RCC_OscConfig+0x2ea>
 8011da4:	4b64      	ldr	r3, [pc, #400]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011da8:	4a63      	ldr	r2, [pc, #396]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011daa:	f043 0301 	orr.w	r3, r3, #1
 8011dae:	6713      	str	r3, [r2, #112]	; 0x70
 8011db0:	e01c      	b.n	8011dec <HAL_RCC_OscConfig+0x324>
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	689b      	ldr	r3, [r3, #8]
 8011db6:	2b05      	cmp	r3, #5
 8011db8:	d10c      	bne.n	8011dd4 <HAL_RCC_OscConfig+0x30c>
 8011dba:	4b5f      	ldr	r3, [pc, #380]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dbe:	4a5e      	ldr	r2, [pc, #376]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011dc0:	f043 0304 	orr.w	r3, r3, #4
 8011dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8011dc6:	4b5c      	ldr	r3, [pc, #368]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dca:	4a5b      	ldr	r2, [pc, #364]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011dcc:	f043 0301 	orr.w	r3, r3, #1
 8011dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8011dd2:	e00b      	b.n	8011dec <HAL_RCC_OscConfig+0x324>
 8011dd4:	4b58      	ldr	r3, [pc, #352]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dd8:	4a57      	ldr	r2, [pc, #348]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011dda:	f023 0301 	bic.w	r3, r3, #1
 8011dde:	6713      	str	r3, [r2, #112]	; 0x70
 8011de0:	4b55      	ldr	r3, [pc, #340]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011de4:	4a54      	ldr	r2, [pc, #336]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011de6:	f023 0304 	bic.w	r3, r3, #4
 8011dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	689b      	ldr	r3, [r3, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d015      	beq.n	8011e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011df4:	f7fd f8fe 	bl	800eff4 <HAL_GetTick>
 8011df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011dfa:	e00a      	b.n	8011e12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011dfc:	f7fd f8fa 	bl	800eff4 <HAL_GetTick>
 8011e00:	4602      	mov	r2, r0
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d901      	bls.n	8011e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011e0e:	2303      	movs	r3, #3
 8011e10:	e0cb      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011e12:	4b49      	ldr	r3, [pc, #292]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e16:	f003 0302 	and.w	r3, r3, #2
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d0ee      	beq.n	8011dfc <HAL_RCC_OscConfig+0x334>
 8011e1e:	e014      	b.n	8011e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011e20:	f7fd f8e8 	bl	800eff4 <HAL_GetTick>
 8011e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011e26:	e00a      	b.n	8011e3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011e28:	f7fd f8e4 	bl	800eff4 <HAL_GetTick>
 8011e2c:	4602      	mov	r2, r0
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e36:	4293      	cmp	r3, r2
 8011e38:	d901      	bls.n	8011e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011e3a:	2303      	movs	r3, #3
 8011e3c:	e0b5      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011e3e:	4b3e      	ldr	r3, [pc, #248]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e42:	f003 0302 	and.w	r3, r3, #2
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d1ee      	bne.n	8011e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011e4a:	7dfb      	ldrb	r3, [r7, #23]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d105      	bne.n	8011e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011e50:	4b39      	ldr	r3, [pc, #228]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e54:	4a38      	ldr	r2, [pc, #224]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	699b      	ldr	r3, [r3, #24]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	f000 80a1 	beq.w	8011fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011e66:	4b34      	ldr	r3, [pc, #208]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011e68:	689b      	ldr	r3, [r3, #8]
 8011e6a:	f003 030c 	and.w	r3, r3, #12
 8011e6e:	2b08      	cmp	r3, #8
 8011e70:	d05c      	beq.n	8011f2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	699b      	ldr	r3, [r3, #24]
 8011e76:	2b02      	cmp	r3, #2
 8011e78:	d141      	bne.n	8011efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011e7a:	4b31      	ldr	r3, [pc, #196]	; (8011f40 <HAL_RCC_OscConfig+0x478>)
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011e80:	f7fd f8b8 	bl	800eff4 <HAL_GetTick>
 8011e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011e86:	e008      	b.n	8011e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011e88:	f7fd f8b4 	bl	800eff4 <HAL_GetTick>
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	2b02      	cmp	r3, #2
 8011e94:	d901      	bls.n	8011e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011e96:	2303      	movs	r3, #3
 8011e98:	e087      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011e9a:	4b27      	ldr	r3, [pc, #156]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1f0      	bne.n	8011e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	69da      	ldr	r2, [r3, #28]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6a1b      	ldr	r3, [r3, #32]
 8011eae:	431a      	orrs	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb4:	019b      	lsls	r3, r3, #6
 8011eb6:	431a      	orrs	r2, r3
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ebc:	085b      	lsrs	r3, r3, #1
 8011ebe:	3b01      	subs	r3, #1
 8011ec0:	041b      	lsls	r3, r3, #16
 8011ec2:	431a      	orrs	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec8:	061b      	lsls	r3, r3, #24
 8011eca:	491b      	ldr	r1, [pc, #108]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011ed0:	4b1b      	ldr	r3, [pc, #108]	; (8011f40 <HAL_RCC_OscConfig+0x478>)
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ed6:	f7fd f88d 	bl	800eff4 <HAL_GetTick>
 8011eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011edc:	e008      	b.n	8011ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ede:	f7fd f889 	bl	800eff4 <HAL_GetTick>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	2b02      	cmp	r3, #2
 8011eea:	d901      	bls.n	8011ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011eec:	2303      	movs	r3, #3
 8011eee:	e05c      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011ef0:	4b11      	ldr	r3, [pc, #68]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d0f0      	beq.n	8011ede <HAL_RCC_OscConfig+0x416>
 8011efc:	e054      	b.n	8011fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011efe:	4b10      	ldr	r3, [pc, #64]	; (8011f40 <HAL_RCC_OscConfig+0x478>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011f04:	f7fd f876 	bl	800eff4 <HAL_GetTick>
 8011f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011f0a:	e008      	b.n	8011f1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011f0c:	f7fd f872 	bl	800eff4 <HAL_GetTick>
 8011f10:	4602      	mov	r2, r0
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	1ad3      	subs	r3, r2, r3
 8011f16:	2b02      	cmp	r3, #2
 8011f18:	d901      	bls.n	8011f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011f1a:	2303      	movs	r3, #3
 8011f1c:	e045      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011f1e:	4b06      	ldr	r3, [pc, #24]	; (8011f38 <HAL_RCC_OscConfig+0x470>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d1f0      	bne.n	8011f0c <HAL_RCC_OscConfig+0x444>
 8011f2a:	e03d      	b.n	8011fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	699b      	ldr	r3, [r3, #24]
 8011f30:	2b01      	cmp	r3, #1
 8011f32:	d107      	bne.n	8011f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011f34:	2301      	movs	r3, #1
 8011f36:	e038      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
 8011f38:	40023800 	.word	0x40023800
 8011f3c:	40007000 	.word	0x40007000
 8011f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011f44:	4b1b      	ldr	r3, [pc, #108]	; (8011fb4 <HAL_RCC_OscConfig+0x4ec>)
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	699b      	ldr	r3, [r3, #24]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d028      	beq.n	8011fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d121      	bne.n	8011fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d11a      	bne.n	8011fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011f74:	4013      	ands	r3, r2
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d111      	bne.n	8011fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f8a:	085b      	lsrs	r3, r3, #1
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d107      	bne.n	8011fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d001      	beq.n	8011fa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	e000      	b.n	8011faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3718      	adds	r7, #24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	40023800 	.word	0x40023800

08011fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d101      	bne.n	8011fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011fc8:	2301      	movs	r3, #1
 8011fca:	e0cc      	b.n	8012166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011fcc:	4b68      	ldr	r3, [pc, #416]	; (8012170 <HAL_RCC_ClockConfig+0x1b8>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	f003 0307 	and.w	r3, r3, #7
 8011fd4:	683a      	ldr	r2, [r7, #0]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d90c      	bls.n	8011ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011fda:	4b65      	ldr	r3, [pc, #404]	; (8012170 <HAL_RCC_ClockConfig+0x1b8>)
 8011fdc:	683a      	ldr	r2, [r7, #0]
 8011fde:	b2d2      	uxtb	r2, r2
 8011fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011fe2:	4b63      	ldr	r3, [pc, #396]	; (8012170 <HAL_RCC_ClockConfig+0x1b8>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	f003 0307 	and.w	r3, r3, #7
 8011fea:	683a      	ldr	r2, [r7, #0]
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d001      	beq.n	8011ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	e0b8      	b.n	8012166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f003 0302 	and.w	r3, r3, #2
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d020      	beq.n	8012042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f003 0304 	and.w	r3, r3, #4
 8012008:	2b00      	cmp	r3, #0
 801200a:	d005      	beq.n	8012018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801200c:	4b59      	ldr	r3, [pc, #356]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	4a58      	ldr	r2, [pc, #352]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f003 0308 	and.w	r3, r3, #8
 8012020:	2b00      	cmp	r3, #0
 8012022:	d005      	beq.n	8012030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012024:	4b53      	ldr	r3, [pc, #332]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012026:	689b      	ldr	r3, [r3, #8]
 8012028:	4a52      	ldr	r2, [pc, #328]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 801202a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801202e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012030:	4b50      	ldr	r3, [pc, #320]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012032:	689b      	ldr	r3, [r3, #8]
 8012034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	689b      	ldr	r3, [r3, #8]
 801203c:	494d      	ldr	r1, [pc, #308]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 801203e:	4313      	orrs	r3, r2
 8012040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f003 0301 	and.w	r3, r3, #1
 801204a:	2b00      	cmp	r3, #0
 801204c:	d044      	beq.n	80120d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	2b01      	cmp	r3, #1
 8012054:	d107      	bne.n	8012066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012056:	4b47      	ldr	r3, [pc, #284]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801205e:	2b00      	cmp	r3, #0
 8012060:	d119      	bne.n	8012096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012062:	2301      	movs	r3, #1
 8012064:	e07f      	b.n	8012166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	2b02      	cmp	r3, #2
 801206c:	d003      	beq.n	8012076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012072:	2b03      	cmp	r3, #3
 8012074:	d107      	bne.n	8012086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012076:	4b3f      	ldr	r3, [pc, #252]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801207e:	2b00      	cmp	r3, #0
 8012080:	d109      	bne.n	8012096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012082:	2301      	movs	r3, #1
 8012084:	e06f      	b.n	8012166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012086:	4b3b      	ldr	r3, [pc, #236]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f003 0302 	and.w	r3, r3, #2
 801208e:	2b00      	cmp	r3, #0
 8012090:	d101      	bne.n	8012096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012092:	2301      	movs	r3, #1
 8012094:	e067      	b.n	8012166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012096:	4b37      	ldr	r3, [pc, #220]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	f023 0203 	bic.w	r2, r3, #3
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	685b      	ldr	r3, [r3, #4]
 80120a2:	4934      	ldr	r1, [pc, #208]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 80120a4:	4313      	orrs	r3, r2
 80120a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80120a8:	f7fc ffa4 	bl	800eff4 <HAL_GetTick>
 80120ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80120ae:	e00a      	b.n	80120c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80120b0:	f7fc ffa0 	bl	800eff4 <HAL_GetTick>
 80120b4:	4602      	mov	r2, r0
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	1ad3      	subs	r3, r2, r3
 80120ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80120be:	4293      	cmp	r3, r2
 80120c0:	d901      	bls.n	80120c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80120c2:	2303      	movs	r3, #3
 80120c4:	e04f      	b.n	8012166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80120c6:	4b2b      	ldr	r3, [pc, #172]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 80120c8:	689b      	ldr	r3, [r3, #8]
 80120ca:	f003 020c 	and.w	r2, r3, #12
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d1eb      	bne.n	80120b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80120d8:	4b25      	ldr	r3, [pc, #148]	; (8012170 <HAL_RCC_ClockConfig+0x1b8>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f003 0307 	and.w	r3, r3, #7
 80120e0:	683a      	ldr	r2, [r7, #0]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d20c      	bcs.n	8012100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80120e6:	4b22      	ldr	r3, [pc, #136]	; (8012170 <HAL_RCC_ClockConfig+0x1b8>)
 80120e8:	683a      	ldr	r2, [r7, #0]
 80120ea:	b2d2      	uxtb	r2, r2
 80120ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80120ee:	4b20      	ldr	r3, [pc, #128]	; (8012170 <HAL_RCC_ClockConfig+0x1b8>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f003 0307 	and.w	r3, r3, #7
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d001      	beq.n	8012100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80120fc:	2301      	movs	r3, #1
 80120fe:	e032      	b.n	8012166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f003 0304 	and.w	r3, r3, #4
 8012108:	2b00      	cmp	r3, #0
 801210a:	d008      	beq.n	801211e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801210c:	4b19      	ldr	r3, [pc, #100]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	4916      	ldr	r1, [pc, #88]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 801211a:	4313      	orrs	r3, r2
 801211c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f003 0308 	and.w	r3, r3, #8
 8012126:	2b00      	cmp	r3, #0
 8012128:	d009      	beq.n	801213e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801212a:	4b12      	ldr	r3, [pc, #72]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 801212c:	689b      	ldr	r3, [r3, #8]
 801212e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	691b      	ldr	r3, [r3, #16]
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	490e      	ldr	r1, [pc, #56]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 801213a:	4313      	orrs	r3, r2
 801213c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801213e:	f000 f821 	bl	8012184 <HAL_RCC_GetSysClockFreq>
 8012142:	4602      	mov	r2, r0
 8012144:	4b0b      	ldr	r3, [pc, #44]	; (8012174 <HAL_RCC_ClockConfig+0x1bc>)
 8012146:	689b      	ldr	r3, [r3, #8]
 8012148:	091b      	lsrs	r3, r3, #4
 801214a:	f003 030f 	and.w	r3, r3, #15
 801214e:	490a      	ldr	r1, [pc, #40]	; (8012178 <HAL_RCC_ClockConfig+0x1c0>)
 8012150:	5ccb      	ldrb	r3, [r1, r3]
 8012152:	fa22 f303 	lsr.w	r3, r2, r3
 8012156:	4a09      	ldr	r2, [pc, #36]	; (801217c <HAL_RCC_ClockConfig+0x1c4>)
 8012158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801215a:	4b09      	ldr	r3, [pc, #36]	; (8012180 <HAL_RCC_ClockConfig+0x1c8>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	4618      	mov	r0, r3
 8012160:	f7fc ff04 	bl	800ef6c <HAL_InitTick>

  return HAL_OK;
 8012164:	2300      	movs	r3, #0
}
 8012166:	4618      	mov	r0, r3
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	40023c00 	.word	0x40023c00
 8012174:	40023800 	.word	0x40023800
 8012178:	08024cb4 	.word	0x08024cb4
 801217c:	20000c44 	.word	0x20000c44
 8012180:	20000c48 	.word	0x20000c48

08012184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012188:	b094      	sub	sp, #80	; 0x50
 801218a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801218c:	2300      	movs	r3, #0
 801218e:	647b      	str	r3, [r7, #68]	; 0x44
 8012190:	2300      	movs	r3, #0
 8012192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012194:	2300      	movs	r3, #0
 8012196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8012198:	2300      	movs	r3, #0
 801219a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801219c:	4b79      	ldr	r3, [pc, #484]	; (8012384 <HAL_RCC_GetSysClockFreq+0x200>)
 801219e:	689b      	ldr	r3, [r3, #8]
 80121a0:	f003 030c 	and.w	r3, r3, #12
 80121a4:	2b08      	cmp	r3, #8
 80121a6:	d00d      	beq.n	80121c4 <HAL_RCC_GetSysClockFreq+0x40>
 80121a8:	2b08      	cmp	r3, #8
 80121aa:	f200 80e1 	bhi.w	8012370 <HAL_RCC_GetSysClockFreq+0x1ec>
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <HAL_RCC_GetSysClockFreq+0x34>
 80121b2:	2b04      	cmp	r3, #4
 80121b4:	d003      	beq.n	80121be <HAL_RCC_GetSysClockFreq+0x3a>
 80121b6:	e0db      	b.n	8012370 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80121b8:	4b73      	ldr	r3, [pc, #460]	; (8012388 <HAL_RCC_GetSysClockFreq+0x204>)
 80121ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80121bc:	e0db      	b.n	8012376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80121be:	4b73      	ldr	r3, [pc, #460]	; (801238c <HAL_RCC_GetSysClockFreq+0x208>)
 80121c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80121c2:	e0d8      	b.n	8012376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80121c4:	4b6f      	ldr	r3, [pc, #444]	; (8012384 <HAL_RCC_GetSysClockFreq+0x200>)
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80121ce:	4b6d      	ldr	r3, [pc, #436]	; (8012384 <HAL_RCC_GetSysClockFreq+0x200>)
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d063      	beq.n	80122a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80121da:	4b6a      	ldr	r3, [pc, #424]	; (8012384 <HAL_RCC_GetSysClockFreq+0x200>)
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	099b      	lsrs	r3, r3, #6
 80121e0:	2200      	movs	r2, #0
 80121e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80121e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80121e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121ec:	633b      	str	r3, [r7, #48]	; 0x30
 80121ee:	2300      	movs	r3, #0
 80121f0:	637b      	str	r3, [r7, #52]	; 0x34
 80121f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80121f6:	4622      	mov	r2, r4
 80121f8:	462b      	mov	r3, r5
 80121fa:	f04f 0000 	mov.w	r0, #0
 80121fe:	f04f 0100 	mov.w	r1, #0
 8012202:	0159      	lsls	r1, r3, #5
 8012204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012208:	0150      	lsls	r0, r2, #5
 801220a:	4602      	mov	r2, r0
 801220c:	460b      	mov	r3, r1
 801220e:	4621      	mov	r1, r4
 8012210:	1a51      	subs	r1, r2, r1
 8012212:	6139      	str	r1, [r7, #16]
 8012214:	4629      	mov	r1, r5
 8012216:	eb63 0301 	sbc.w	r3, r3, r1
 801221a:	617b      	str	r3, [r7, #20]
 801221c:	f04f 0200 	mov.w	r2, #0
 8012220:	f04f 0300 	mov.w	r3, #0
 8012224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012228:	4659      	mov	r1, fp
 801222a:	018b      	lsls	r3, r1, #6
 801222c:	4651      	mov	r1, sl
 801222e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8012232:	4651      	mov	r1, sl
 8012234:	018a      	lsls	r2, r1, #6
 8012236:	4651      	mov	r1, sl
 8012238:	ebb2 0801 	subs.w	r8, r2, r1
 801223c:	4659      	mov	r1, fp
 801223e:	eb63 0901 	sbc.w	r9, r3, r1
 8012242:	f04f 0200 	mov.w	r2, #0
 8012246:	f04f 0300 	mov.w	r3, #0
 801224a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801224e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012256:	4690      	mov	r8, r2
 8012258:	4699      	mov	r9, r3
 801225a:	4623      	mov	r3, r4
 801225c:	eb18 0303 	adds.w	r3, r8, r3
 8012260:	60bb      	str	r3, [r7, #8]
 8012262:	462b      	mov	r3, r5
 8012264:	eb49 0303 	adc.w	r3, r9, r3
 8012268:	60fb      	str	r3, [r7, #12]
 801226a:	f04f 0200 	mov.w	r2, #0
 801226e:	f04f 0300 	mov.w	r3, #0
 8012272:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012276:	4629      	mov	r1, r5
 8012278:	024b      	lsls	r3, r1, #9
 801227a:	4621      	mov	r1, r4
 801227c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8012280:	4621      	mov	r1, r4
 8012282:	024a      	lsls	r2, r1, #9
 8012284:	4610      	mov	r0, r2
 8012286:	4619      	mov	r1, r3
 8012288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801228a:	2200      	movs	r2, #0
 801228c:	62bb      	str	r3, [r7, #40]	; 0x28
 801228e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012294:	f7ee fce8 	bl	8000c68 <__aeabi_uldivmod>
 8012298:	4602      	mov	r2, r0
 801229a:	460b      	mov	r3, r1
 801229c:	4613      	mov	r3, r2
 801229e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80122a0:	e058      	b.n	8012354 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80122a2:	4b38      	ldr	r3, [pc, #224]	; (8012384 <HAL_RCC_GetSysClockFreq+0x200>)
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	099b      	lsrs	r3, r3, #6
 80122a8:	2200      	movs	r2, #0
 80122aa:	4618      	mov	r0, r3
 80122ac:	4611      	mov	r1, r2
 80122ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80122b2:	623b      	str	r3, [r7, #32]
 80122b4:	2300      	movs	r3, #0
 80122b6:	627b      	str	r3, [r7, #36]	; 0x24
 80122b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80122bc:	4642      	mov	r2, r8
 80122be:	464b      	mov	r3, r9
 80122c0:	f04f 0000 	mov.w	r0, #0
 80122c4:	f04f 0100 	mov.w	r1, #0
 80122c8:	0159      	lsls	r1, r3, #5
 80122ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80122ce:	0150      	lsls	r0, r2, #5
 80122d0:	4602      	mov	r2, r0
 80122d2:	460b      	mov	r3, r1
 80122d4:	4641      	mov	r1, r8
 80122d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80122da:	4649      	mov	r1, r9
 80122dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80122e0:	f04f 0200 	mov.w	r2, #0
 80122e4:	f04f 0300 	mov.w	r3, #0
 80122e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80122ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80122f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80122f4:	ebb2 040a 	subs.w	r4, r2, sl
 80122f8:	eb63 050b 	sbc.w	r5, r3, fp
 80122fc:	f04f 0200 	mov.w	r2, #0
 8012300:	f04f 0300 	mov.w	r3, #0
 8012304:	00eb      	lsls	r3, r5, #3
 8012306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801230a:	00e2      	lsls	r2, r4, #3
 801230c:	4614      	mov	r4, r2
 801230e:	461d      	mov	r5, r3
 8012310:	4643      	mov	r3, r8
 8012312:	18e3      	adds	r3, r4, r3
 8012314:	603b      	str	r3, [r7, #0]
 8012316:	464b      	mov	r3, r9
 8012318:	eb45 0303 	adc.w	r3, r5, r3
 801231c:	607b      	str	r3, [r7, #4]
 801231e:	f04f 0200 	mov.w	r2, #0
 8012322:	f04f 0300 	mov.w	r3, #0
 8012326:	e9d7 4500 	ldrd	r4, r5, [r7]
 801232a:	4629      	mov	r1, r5
 801232c:	028b      	lsls	r3, r1, #10
 801232e:	4621      	mov	r1, r4
 8012330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012334:	4621      	mov	r1, r4
 8012336:	028a      	lsls	r2, r1, #10
 8012338:	4610      	mov	r0, r2
 801233a:	4619      	mov	r1, r3
 801233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801233e:	2200      	movs	r2, #0
 8012340:	61bb      	str	r3, [r7, #24]
 8012342:	61fa      	str	r2, [r7, #28]
 8012344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012348:	f7ee fc8e 	bl	8000c68 <__aeabi_uldivmod>
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	4613      	mov	r3, r2
 8012352:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012354:	4b0b      	ldr	r3, [pc, #44]	; (8012384 <HAL_RCC_GetSysClockFreq+0x200>)
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	0c1b      	lsrs	r3, r3, #16
 801235a:	f003 0303 	and.w	r3, r3, #3
 801235e:	3301      	adds	r3, #1
 8012360:	005b      	lsls	r3, r3, #1
 8012362:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8012364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012368:	fbb2 f3f3 	udiv	r3, r2, r3
 801236c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801236e:	e002      	b.n	8012376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012370:	4b05      	ldr	r3, [pc, #20]	; (8012388 <HAL_RCC_GetSysClockFreq+0x204>)
 8012372:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8012378:	4618      	mov	r0, r3
 801237a:	3750      	adds	r7, #80	; 0x50
 801237c:	46bd      	mov	sp, r7
 801237e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012382:	bf00      	nop
 8012384:	40023800 	.word	0x40023800
 8012388:	00f42400 	.word	0x00f42400
 801238c:	007a1200 	.word	0x007a1200

08012390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012390:	b480      	push	{r7}
 8012392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012394:	4b03      	ldr	r3, [pc, #12]	; (80123a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8012396:	681b      	ldr	r3, [r3, #0]
}
 8012398:	4618      	mov	r0, r3
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr
 80123a2:	bf00      	nop
 80123a4:	20000c44 	.word	0x20000c44

080123a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80123ac:	f7ff fff0 	bl	8012390 <HAL_RCC_GetHCLKFreq>
 80123b0:	4602      	mov	r2, r0
 80123b2:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80123b4:	689b      	ldr	r3, [r3, #8]
 80123b6:	0a9b      	lsrs	r3, r3, #10
 80123b8:	f003 0307 	and.w	r3, r3, #7
 80123bc:	4903      	ldr	r1, [pc, #12]	; (80123cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80123be:	5ccb      	ldrb	r3, [r1, r3]
 80123c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	40023800 	.word	0x40023800
 80123cc:	08024cc4 	.word	0x08024cc4

080123d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80123d4:	f7ff ffdc 	bl	8012390 <HAL_RCC_GetHCLKFreq>
 80123d8:	4602      	mov	r2, r0
 80123da:	4b05      	ldr	r3, [pc, #20]	; (80123f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80123dc:	689b      	ldr	r3, [r3, #8]
 80123de:	0b5b      	lsrs	r3, r3, #13
 80123e0:	f003 0307 	and.w	r3, r3, #7
 80123e4:	4903      	ldr	r1, [pc, #12]	; (80123f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80123e6:	5ccb      	ldrb	r3, [r1, r3]
 80123e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	40023800 	.word	0x40023800
 80123f4:	08024cc4 	.word	0x08024cc4

080123f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d101      	bne.n	801240a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012406:	2301      	movs	r3, #1
 8012408:	e041      	b.n	801248e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012410:	b2db      	uxtb	r3, r3
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2200      	movs	r2, #0
 801241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f7fc fa8a 	bl	800e938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2202      	movs	r2, #2
 8012428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	3304      	adds	r3, #4
 8012434:	4619      	mov	r1, r3
 8012436:	4610      	mov	r0, r2
 8012438:	f000 fd0a 	bl	8012e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2201      	movs	r2, #1
 8012440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2201      	movs	r2, #1
 8012448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2201      	movs	r2, #1
 8012450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2201      	movs	r2, #1
 8012458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2201      	movs	r2, #1
 8012460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2201      	movs	r2, #1
 8012468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2201      	movs	r2, #1
 8012470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2201      	movs	r2, #1
 8012478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2201      	movs	r2, #1
 8012480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2201      	movs	r2, #1
 8012488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801248c:	2300      	movs	r3, #0
}
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
	...

08012498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012498:	b480      	push	{r7}
 801249a:	b085      	sub	sp, #20
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d001      	beq.n	80124b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80124ac:	2301      	movs	r3, #1
 80124ae:	e04e      	b.n	801254e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2202      	movs	r2, #2
 80124b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	68da      	ldr	r2, [r3, #12]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	f042 0201 	orr.w	r2, r2, #1
 80124c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4a23      	ldr	r2, [pc, #140]	; (801255c <HAL_TIM_Base_Start_IT+0xc4>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d022      	beq.n	8012518 <HAL_TIM_Base_Start_IT+0x80>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124da:	d01d      	beq.n	8012518 <HAL_TIM_Base_Start_IT+0x80>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	4a1f      	ldr	r2, [pc, #124]	; (8012560 <HAL_TIM_Base_Start_IT+0xc8>)
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d018      	beq.n	8012518 <HAL_TIM_Base_Start_IT+0x80>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a1e      	ldr	r2, [pc, #120]	; (8012564 <HAL_TIM_Base_Start_IT+0xcc>)
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d013      	beq.n	8012518 <HAL_TIM_Base_Start_IT+0x80>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4a1c      	ldr	r2, [pc, #112]	; (8012568 <HAL_TIM_Base_Start_IT+0xd0>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d00e      	beq.n	8012518 <HAL_TIM_Base_Start_IT+0x80>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	4a1b      	ldr	r2, [pc, #108]	; (801256c <HAL_TIM_Base_Start_IT+0xd4>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d009      	beq.n	8012518 <HAL_TIM_Base_Start_IT+0x80>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4a19      	ldr	r2, [pc, #100]	; (8012570 <HAL_TIM_Base_Start_IT+0xd8>)
 801250a:	4293      	cmp	r3, r2
 801250c:	d004      	beq.n	8012518 <HAL_TIM_Base_Start_IT+0x80>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	4a18      	ldr	r2, [pc, #96]	; (8012574 <HAL_TIM_Base_Start_IT+0xdc>)
 8012514:	4293      	cmp	r3, r2
 8012516:	d111      	bne.n	801253c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	689b      	ldr	r3, [r3, #8]
 801251e:	f003 0307 	and.w	r3, r3, #7
 8012522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b06      	cmp	r3, #6
 8012528:	d010      	beq.n	801254c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f042 0201 	orr.w	r2, r2, #1
 8012538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801253a:	e007      	b.n	801254c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f042 0201 	orr.w	r2, r2, #1
 801254a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801254c:	2300      	movs	r3, #0
}
 801254e:	4618      	mov	r0, r3
 8012550:	3714      	adds	r7, #20
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	40010000 	.word	0x40010000
 8012560:	40000400 	.word	0x40000400
 8012564:	40000800 	.word	0x40000800
 8012568:	40000c00 	.word	0x40000c00
 801256c:	40010400 	.word	0x40010400
 8012570:	40014000 	.word	0x40014000
 8012574:	40001800 	.word	0x40001800

08012578 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012578:	b480      	push	{r7}
 801257a:	b083      	sub	sp, #12
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	68da      	ldr	r2, [r3, #12]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f022 0201 	bic.w	r2, r2, #1
 801258e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	6a1a      	ldr	r2, [r3, #32]
 8012596:	f241 1311 	movw	r3, #4369	; 0x1111
 801259a:	4013      	ands	r3, r2
 801259c:	2b00      	cmp	r3, #0
 801259e:	d10f      	bne.n	80125c0 <HAL_TIM_Base_Stop_IT+0x48>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	6a1a      	ldr	r2, [r3, #32]
 80125a6:	f240 4344 	movw	r3, #1092	; 0x444
 80125aa:	4013      	ands	r3, r2
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d107      	bne.n	80125c0 <HAL_TIM_Base_Stop_IT+0x48>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	681a      	ldr	r2, [r3, #0]
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	f022 0201 	bic.w	r2, r2, #1
 80125be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2201      	movs	r2, #1
 80125c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80125c8:	2300      	movs	r3, #0
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	370c      	adds	r7, #12
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr

080125d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b082      	sub	sp, #8
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d101      	bne.n	80125e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80125e4:	2301      	movs	r3, #1
 80125e6:	e041      	b.n	801266c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d106      	bne.n	8012602 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2200      	movs	r2, #0
 80125f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f000 f839 	bl	8012674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2202      	movs	r2, #2
 8012606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681a      	ldr	r2, [r3, #0]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	3304      	adds	r3, #4
 8012612:	4619      	mov	r1, r3
 8012614:	4610      	mov	r0, r2
 8012616:	f000 fc1b 	bl	8012e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2201      	movs	r2, #1
 801261e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2201      	movs	r2, #1
 8012626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2201      	movs	r2, #1
 801262e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2201      	movs	r2, #1
 8012636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2201      	movs	r2, #1
 801263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2201      	movs	r2, #1
 8012646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	2201      	movs	r2, #1
 801264e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2201      	movs	r2, #1
 8012656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2201      	movs	r2, #1
 801265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2201      	movs	r2, #1
 8012666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801266a:	2300      	movs	r3, #0
}
 801266c:	4618      	mov	r0, r3
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801267c:	bf00      	nop
 801267e:	370c      	adds	r7, #12
 8012680:	46bd      	mov	sp, r7
 8012682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012686:	4770      	bx	lr

08012688 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d109      	bne.n	80126ac <HAL_TIM_PWM_Start+0x24>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	bf14      	ite	ne
 80126a4:	2301      	movne	r3, #1
 80126a6:	2300      	moveq	r3, #0
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	e022      	b.n	80126f2 <HAL_TIM_PWM_Start+0x6a>
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	2b04      	cmp	r3, #4
 80126b0:	d109      	bne.n	80126c6 <HAL_TIM_PWM_Start+0x3e>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	bf14      	ite	ne
 80126be:	2301      	movne	r3, #1
 80126c0:	2300      	moveq	r3, #0
 80126c2:	b2db      	uxtb	r3, r3
 80126c4:	e015      	b.n	80126f2 <HAL_TIM_PWM_Start+0x6a>
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	2b08      	cmp	r3, #8
 80126ca:	d109      	bne.n	80126e0 <HAL_TIM_PWM_Start+0x58>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	2b01      	cmp	r3, #1
 80126d6:	bf14      	ite	ne
 80126d8:	2301      	movne	r3, #1
 80126da:	2300      	moveq	r3, #0
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	e008      	b.n	80126f2 <HAL_TIM_PWM_Start+0x6a>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	bf14      	ite	ne
 80126ec:	2301      	movne	r3, #1
 80126ee:	2300      	moveq	r3, #0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d001      	beq.n	80126fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80126f6:	2301      	movs	r3, #1
 80126f8:	e07c      	b.n	80127f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d104      	bne.n	801270a <HAL_TIM_PWM_Start+0x82>
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2202      	movs	r2, #2
 8012704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012708:	e013      	b.n	8012732 <HAL_TIM_PWM_Start+0xaa>
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	2b04      	cmp	r3, #4
 801270e:	d104      	bne.n	801271a <HAL_TIM_PWM_Start+0x92>
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2202      	movs	r2, #2
 8012714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012718:	e00b      	b.n	8012732 <HAL_TIM_PWM_Start+0xaa>
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	2b08      	cmp	r3, #8
 801271e:	d104      	bne.n	801272a <HAL_TIM_PWM_Start+0xa2>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2202      	movs	r2, #2
 8012724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012728:	e003      	b.n	8012732 <HAL_TIM_PWM_Start+0xaa>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2202      	movs	r2, #2
 801272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2201      	movs	r2, #1
 8012738:	6839      	ldr	r1, [r7, #0]
 801273a:	4618      	mov	r0, r3
 801273c:	f000 fe7e 	bl	801343c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a2d      	ldr	r2, [pc, #180]	; (80127fc <HAL_TIM_PWM_Start+0x174>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d004      	beq.n	8012754 <HAL_TIM_PWM_Start+0xcc>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4a2c      	ldr	r2, [pc, #176]	; (8012800 <HAL_TIM_PWM_Start+0x178>)
 8012750:	4293      	cmp	r3, r2
 8012752:	d101      	bne.n	8012758 <HAL_TIM_PWM_Start+0xd0>
 8012754:	2301      	movs	r3, #1
 8012756:	e000      	b.n	801275a <HAL_TIM_PWM_Start+0xd2>
 8012758:	2300      	movs	r3, #0
 801275a:	2b00      	cmp	r3, #0
 801275c:	d007      	beq.n	801276e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801276c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a22      	ldr	r2, [pc, #136]	; (80127fc <HAL_TIM_PWM_Start+0x174>)
 8012774:	4293      	cmp	r3, r2
 8012776:	d022      	beq.n	80127be <HAL_TIM_PWM_Start+0x136>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012780:	d01d      	beq.n	80127be <HAL_TIM_PWM_Start+0x136>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	4a1f      	ldr	r2, [pc, #124]	; (8012804 <HAL_TIM_PWM_Start+0x17c>)
 8012788:	4293      	cmp	r3, r2
 801278a:	d018      	beq.n	80127be <HAL_TIM_PWM_Start+0x136>
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	4a1d      	ldr	r2, [pc, #116]	; (8012808 <HAL_TIM_PWM_Start+0x180>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d013      	beq.n	80127be <HAL_TIM_PWM_Start+0x136>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4a1c      	ldr	r2, [pc, #112]	; (801280c <HAL_TIM_PWM_Start+0x184>)
 801279c:	4293      	cmp	r3, r2
 801279e:	d00e      	beq.n	80127be <HAL_TIM_PWM_Start+0x136>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a16      	ldr	r2, [pc, #88]	; (8012800 <HAL_TIM_PWM_Start+0x178>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d009      	beq.n	80127be <HAL_TIM_PWM_Start+0x136>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	4a18      	ldr	r2, [pc, #96]	; (8012810 <HAL_TIM_PWM_Start+0x188>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d004      	beq.n	80127be <HAL_TIM_PWM_Start+0x136>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a16      	ldr	r2, [pc, #88]	; (8012814 <HAL_TIM_PWM_Start+0x18c>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d111      	bne.n	80127e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	f003 0307 	and.w	r3, r3, #7
 80127c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2b06      	cmp	r3, #6
 80127ce:	d010      	beq.n	80127f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	681a      	ldr	r2, [r3, #0]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	f042 0201 	orr.w	r2, r2, #1
 80127de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127e0:	e007      	b.n	80127f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	f042 0201 	orr.w	r2, r2, #1
 80127f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80127f2:	2300      	movs	r3, #0
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3710      	adds	r7, #16
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	40010000 	.word	0x40010000
 8012800:	40010400 	.word	0x40010400
 8012804:	40000400 	.word	0x40000400
 8012808:	40000800 	.word	0x40000800
 801280c:	40000c00 	.word	0x40000c00
 8012810:	40014000 	.word	0x40014000
 8012814:	40001800 	.word	0x40001800

08012818 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2200      	movs	r2, #0
 8012828:	6839      	ldr	r1, [r7, #0]
 801282a:	4618      	mov	r0, r3
 801282c:	f000 fe06 	bl	801343c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	4a2e      	ldr	r2, [pc, #184]	; (80128f0 <HAL_TIM_PWM_Stop+0xd8>)
 8012836:	4293      	cmp	r3, r2
 8012838:	d004      	beq.n	8012844 <HAL_TIM_PWM_Stop+0x2c>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4a2d      	ldr	r2, [pc, #180]	; (80128f4 <HAL_TIM_PWM_Stop+0xdc>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d101      	bne.n	8012848 <HAL_TIM_PWM_Stop+0x30>
 8012844:	2301      	movs	r3, #1
 8012846:	e000      	b.n	801284a <HAL_TIM_PWM_Stop+0x32>
 8012848:	2300      	movs	r3, #0
 801284a:	2b00      	cmp	r3, #0
 801284c:	d017      	beq.n	801287e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	6a1a      	ldr	r2, [r3, #32]
 8012854:	f241 1311 	movw	r3, #4369	; 0x1111
 8012858:	4013      	ands	r3, r2
 801285a:	2b00      	cmp	r3, #0
 801285c:	d10f      	bne.n	801287e <HAL_TIM_PWM_Stop+0x66>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	6a1a      	ldr	r2, [r3, #32]
 8012864:	f240 4344 	movw	r3, #1092	; 0x444
 8012868:	4013      	ands	r3, r2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d107      	bne.n	801287e <HAL_TIM_PWM_Stop+0x66>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801287c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	6a1a      	ldr	r2, [r3, #32]
 8012884:	f241 1311 	movw	r3, #4369	; 0x1111
 8012888:	4013      	ands	r3, r2
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10f      	bne.n	80128ae <HAL_TIM_PWM_Stop+0x96>
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	6a1a      	ldr	r2, [r3, #32]
 8012894:	f240 4344 	movw	r3, #1092	; 0x444
 8012898:	4013      	ands	r3, r2
 801289a:	2b00      	cmp	r3, #0
 801289c:	d107      	bne.n	80128ae <HAL_TIM_PWM_Stop+0x96>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f022 0201 	bic.w	r2, r2, #1
 80128ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d104      	bne.n	80128be <HAL_TIM_PWM_Stop+0xa6>
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2201      	movs	r2, #1
 80128b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80128bc:	e013      	b.n	80128e6 <HAL_TIM_PWM_Stop+0xce>
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	2b04      	cmp	r3, #4
 80128c2:	d104      	bne.n	80128ce <HAL_TIM_PWM_Stop+0xb6>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2201      	movs	r2, #1
 80128c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80128cc:	e00b      	b.n	80128e6 <HAL_TIM_PWM_Stop+0xce>
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	2b08      	cmp	r3, #8
 80128d2:	d104      	bne.n	80128de <HAL_TIM_PWM_Stop+0xc6>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2201      	movs	r2, #1
 80128d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80128dc:	e003      	b.n	80128e6 <HAL_TIM_PWM_Stop+0xce>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2201      	movs	r2, #1
 80128e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3708      	adds	r7, #8
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	40010000 	.word	0x40010000
 80128f4:	40010400 	.word	0x40010400

080128f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	691b      	ldr	r3, [r3, #16]
 801290e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	f003 0302 	and.w	r3, r3, #2
 8012916:	2b00      	cmp	r3, #0
 8012918:	d020      	beq.n	801295c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f003 0302 	and.w	r3, r3, #2
 8012920:	2b00      	cmp	r3, #0
 8012922:	d01b      	beq.n	801295c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f06f 0202 	mvn.w	r2, #2
 801292c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2201      	movs	r2, #1
 8012932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	699b      	ldr	r3, [r3, #24]
 801293a:	f003 0303 	and.w	r3, r3, #3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d003      	beq.n	801294a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 fa65 	bl	8012e12 <HAL_TIM_IC_CaptureCallback>
 8012948:	e005      	b.n	8012956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 fa57 	bl	8012dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 fa68 	bl	8012e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2200      	movs	r2, #0
 801295a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	f003 0304 	and.w	r3, r3, #4
 8012962:	2b00      	cmp	r3, #0
 8012964:	d020      	beq.n	80129a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	f003 0304 	and.w	r3, r3, #4
 801296c:	2b00      	cmp	r3, #0
 801296e:	d01b      	beq.n	80129a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	f06f 0204 	mvn.w	r2, #4
 8012978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2202      	movs	r2, #2
 801297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	699b      	ldr	r3, [r3, #24]
 8012986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801298a:	2b00      	cmp	r3, #0
 801298c:	d003      	beq.n	8012996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f000 fa3f 	bl	8012e12 <HAL_TIM_IC_CaptureCallback>
 8012994:	e005      	b.n	80129a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f000 fa31 	bl	8012dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 fa42 	bl	8012e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2200      	movs	r2, #0
 80129a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	f003 0308 	and.w	r3, r3, #8
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d020      	beq.n	80129f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f003 0308 	and.w	r3, r3, #8
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d01b      	beq.n	80129f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f06f 0208 	mvn.w	r2, #8
 80129c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2204      	movs	r2, #4
 80129ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	69db      	ldr	r3, [r3, #28]
 80129d2:	f003 0303 	and.w	r3, r3, #3
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d003      	beq.n	80129e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 fa19 	bl	8012e12 <HAL_TIM_IC_CaptureCallback>
 80129e0:	e005      	b.n	80129ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 fa0b 	bl	8012dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f000 fa1c 	bl	8012e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2200      	movs	r2, #0
 80129f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	f003 0310 	and.w	r3, r3, #16
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d020      	beq.n	8012a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	f003 0310 	and.w	r3, r3, #16
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d01b      	beq.n	8012a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f06f 0210 	mvn.w	r2, #16
 8012a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2208      	movs	r2, #8
 8012a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	69db      	ldr	r3, [r3, #28]
 8012a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d003      	beq.n	8012a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f000 f9f3 	bl	8012e12 <HAL_TIM_IC_CaptureCallback>
 8012a2c:	e005      	b.n	8012a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 f9e5 	bl	8012dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f000 f9f6 	bl	8012e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	f003 0301 	and.w	r3, r3, #1
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d00c      	beq.n	8012a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d007      	beq.n	8012a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f06f 0201 	mvn.w	r2, #1
 8012a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f000 f9c3 	bl	8012dea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d00c      	beq.n	8012a88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d007      	beq.n	8012a88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 fd86 	bl	8013594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00c      	beq.n	8012aac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d007      	beq.n	8012aac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f000 f9c7 	bl	8012e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	f003 0320 	and.w	r3, r3, #32
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d00c      	beq.n	8012ad0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	f003 0320 	and.w	r3, r3, #32
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d007      	beq.n	8012ad0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	f06f 0220 	mvn.w	r2, #32
 8012ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 fd58 	bl	8013580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012ad0:	bf00      	nop
 8012ad2:	3710      	adds	r7, #16
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b086      	sub	sp, #24
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	60f8      	str	r0, [r7, #12]
 8012ae0:	60b9      	str	r1, [r7, #8]
 8012ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	d101      	bne.n	8012af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012af2:	2302      	movs	r3, #2
 8012af4:	e0ae      	b.n	8012c54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	2201      	movs	r2, #1
 8012afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2b0c      	cmp	r3, #12
 8012b02:	f200 809f 	bhi.w	8012c44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8012b06:	a201      	add	r2, pc, #4	; (adr r2, 8012b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b0c:	08012b41 	.word	0x08012b41
 8012b10:	08012c45 	.word	0x08012c45
 8012b14:	08012c45 	.word	0x08012c45
 8012b18:	08012c45 	.word	0x08012c45
 8012b1c:	08012b81 	.word	0x08012b81
 8012b20:	08012c45 	.word	0x08012c45
 8012b24:	08012c45 	.word	0x08012c45
 8012b28:	08012c45 	.word	0x08012c45
 8012b2c:	08012bc3 	.word	0x08012bc3
 8012b30:	08012c45 	.word	0x08012c45
 8012b34:	08012c45 	.word	0x08012c45
 8012b38:	08012c45 	.word	0x08012c45
 8012b3c:	08012c03 	.word	0x08012c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	68b9      	ldr	r1, [r7, #8]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f000 fa2e 	bl	8012fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	699a      	ldr	r2, [r3, #24]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f042 0208 	orr.w	r2, r2, #8
 8012b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	699a      	ldr	r2, [r3, #24]
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	f022 0204 	bic.w	r2, r2, #4
 8012b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	6999      	ldr	r1, [r3, #24]
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	691a      	ldr	r2, [r3, #16]
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	430a      	orrs	r2, r1
 8012b7c:	619a      	str	r2, [r3, #24]
      break;
 8012b7e:	e064      	b.n	8012c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	68b9      	ldr	r1, [r7, #8]
 8012b86:	4618      	mov	r0, r3
 8012b88:	f000 fa7e 	bl	8013088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	699a      	ldr	r2, [r3, #24]
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	699a      	ldr	r2, [r3, #24]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	6999      	ldr	r1, [r3, #24]
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	691b      	ldr	r3, [r3, #16]
 8012bb6:	021a      	lsls	r2, r3, #8
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	430a      	orrs	r2, r1
 8012bbe:	619a      	str	r2, [r3, #24]
      break;
 8012bc0:	e043      	b.n	8012c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	68b9      	ldr	r1, [r7, #8]
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f000 fad3 	bl	8013174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	69da      	ldr	r2, [r3, #28]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	f042 0208 	orr.w	r2, r2, #8
 8012bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	69da      	ldr	r2, [r3, #28]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f022 0204 	bic.w	r2, r2, #4
 8012bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	69d9      	ldr	r1, [r3, #28]
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	691a      	ldr	r2, [r3, #16]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	430a      	orrs	r2, r1
 8012bfe:	61da      	str	r2, [r3, #28]
      break;
 8012c00:	e023      	b.n	8012c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	68b9      	ldr	r1, [r7, #8]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f000 fb27 	bl	801325c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	69da      	ldr	r2, [r3, #28]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	69da      	ldr	r2, [r3, #28]
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	69d9      	ldr	r1, [r3, #28]
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	691b      	ldr	r3, [r3, #16]
 8012c38:	021a      	lsls	r2, r3, #8
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	430a      	orrs	r2, r1
 8012c40:	61da      	str	r2, [r3, #28]
      break;
 8012c42:	e002      	b.n	8012c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8012c44:	2301      	movs	r3, #1
 8012c46:	75fb      	strb	r3, [r7, #23]
      break;
 8012c48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3718      	adds	r7, #24
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012c66:	2300      	movs	r3, #0
 8012c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d101      	bne.n	8012c78 <HAL_TIM_ConfigClockSource+0x1c>
 8012c74:	2302      	movs	r3, #2
 8012c76:	e0b4      	b.n	8012de2 <HAL_TIM_ConfigClockSource+0x186>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2202      	movs	r2, #2
 8012c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8012c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012c9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68ba      	ldr	r2, [r7, #8]
 8012ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012cb0:	d03e      	beq.n	8012d30 <HAL_TIM_ConfigClockSource+0xd4>
 8012cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012cb6:	f200 8087 	bhi.w	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cbe:	f000 8086 	beq.w	8012dce <HAL_TIM_ConfigClockSource+0x172>
 8012cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cc6:	d87f      	bhi.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012cc8:	2b70      	cmp	r3, #112	; 0x70
 8012cca:	d01a      	beq.n	8012d02 <HAL_TIM_ConfigClockSource+0xa6>
 8012ccc:	2b70      	cmp	r3, #112	; 0x70
 8012cce:	d87b      	bhi.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012cd0:	2b60      	cmp	r3, #96	; 0x60
 8012cd2:	d050      	beq.n	8012d76 <HAL_TIM_ConfigClockSource+0x11a>
 8012cd4:	2b60      	cmp	r3, #96	; 0x60
 8012cd6:	d877      	bhi.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012cd8:	2b50      	cmp	r3, #80	; 0x50
 8012cda:	d03c      	beq.n	8012d56 <HAL_TIM_ConfigClockSource+0xfa>
 8012cdc:	2b50      	cmp	r3, #80	; 0x50
 8012cde:	d873      	bhi.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012ce0:	2b40      	cmp	r3, #64	; 0x40
 8012ce2:	d058      	beq.n	8012d96 <HAL_TIM_ConfigClockSource+0x13a>
 8012ce4:	2b40      	cmp	r3, #64	; 0x40
 8012ce6:	d86f      	bhi.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012ce8:	2b30      	cmp	r3, #48	; 0x30
 8012cea:	d064      	beq.n	8012db6 <HAL_TIM_ConfigClockSource+0x15a>
 8012cec:	2b30      	cmp	r3, #48	; 0x30
 8012cee:	d86b      	bhi.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012cf0:	2b20      	cmp	r3, #32
 8012cf2:	d060      	beq.n	8012db6 <HAL_TIM_ConfigClockSource+0x15a>
 8012cf4:	2b20      	cmp	r3, #32
 8012cf6:	d867      	bhi.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d05c      	beq.n	8012db6 <HAL_TIM_ConfigClockSource+0x15a>
 8012cfc:	2b10      	cmp	r3, #16
 8012cfe:	d05a      	beq.n	8012db6 <HAL_TIM_ConfigClockSource+0x15a>
 8012d00:	e062      	b.n	8012dc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012d12:	f000 fb73 	bl	80133fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	689b      	ldr	r3, [r3, #8]
 8012d1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012d24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	68ba      	ldr	r2, [r7, #8]
 8012d2c:	609a      	str	r2, [r3, #8]
      break;
 8012d2e:	e04f      	b.n	8012dd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012d34:	683b      	ldr	r3, [r7, #0]
 8012d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012d40:	f000 fb5c 	bl	80133fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	689a      	ldr	r2, [r3, #8]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012d52:	609a      	str	r2, [r3, #8]
      break;
 8012d54:	e03c      	b.n	8012dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d62:	461a      	mov	r2, r3
 8012d64:	f000 fad0 	bl	8013308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	2150      	movs	r1, #80	; 0x50
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f000 fb29 	bl	80133c6 <TIM_ITRx_SetConfig>
      break;
 8012d74:	e02c      	b.n	8012dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012d82:	461a      	mov	r2, r3
 8012d84:	f000 faef 	bl	8013366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2160      	movs	r1, #96	; 0x60
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f000 fb19 	bl	80133c6 <TIM_ITRx_SetConfig>
      break;
 8012d94:	e01c      	b.n	8012dd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012da2:	461a      	mov	r2, r3
 8012da4:	f000 fab0 	bl	8013308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	2140      	movs	r1, #64	; 0x40
 8012dae:	4618      	mov	r0, r3
 8012db0:	f000 fb09 	bl	80133c6 <TIM_ITRx_SetConfig>
      break;
 8012db4:	e00c      	b.n	8012dd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681a      	ldr	r2, [r3, #0]
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	4610      	mov	r0, r2
 8012dc2:	f000 fb00 	bl	80133c6 <TIM_ITRx_SetConfig>
      break;
 8012dc6:	e003      	b.n	8012dd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	73fb      	strb	r3, [r7, #15]
      break;
 8012dcc:	e000      	b.n	8012dd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8012dce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3710      	adds	r7, #16
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}

08012dea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012dea:	b480      	push	{r7}
 8012dec:	b083      	sub	sp, #12
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8012df2:	bf00      	nop
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012dfe:	b480      	push	{r7}
 8012e00:	b083      	sub	sp, #12
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012e06:	bf00      	nop
 8012e08:	370c      	adds	r7, #12
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr

08012e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012e12:	b480      	push	{r7}
 8012e14:	b083      	sub	sp, #12
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012e1a:	bf00      	nop
 8012e1c:	370c      	adds	r7, #12
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr

08012e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012e26:	b480      	push	{r7}
 8012e28:	b083      	sub	sp, #12
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012e2e:	bf00      	nop
 8012e30:	370c      	adds	r7, #12
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr

08012e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012e3a:	b480      	push	{r7}
 8012e3c:	b083      	sub	sp, #12
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012e42:	bf00      	nop
 8012e44:	370c      	adds	r7, #12
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
	...

08012e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b085      	sub	sp, #20
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4a46      	ldr	r2, [pc, #280]	; (8012f7c <TIM_Base_SetConfig+0x12c>)
 8012e64:	4293      	cmp	r3, r2
 8012e66:	d013      	beq.n	8012e90 <TIM_Base_SetConfig+0x40>
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e6e:	d00f      	beq.n	8012e90 <TIM_Base_SetConfig+0x40>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	4a43      	ldr	r2, [pc, #268]	; (8012f80 <TIM_Base_SetConfig+0x130>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d00b      	beq.n	8012e90 <TIM_Base_SetConfig+0x40>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	4a42      	ldr	r2, [pc, #264]	; (8012f84 <TIM_Base_SetConfig+0x134>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d007      	beq.n	8012e90 <TIM_Base_SetConfig+0x40>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	4a41      	ldr	r2, [pc, #260]	; (8012f88 <TIM_Base_SetConfig+0x138>)
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d003      	beq.n	8012e90 <TIM_Base_SetConfig+0x40>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4a40      	ldr	r2, [pc, #256]	; (8012f8c <TIM_Base_SetConfig+0x13c>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d108      	bne.n	8012ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	68fa      	ldr	r2, [r7, #12]
 8012e9e:	4313      	orrs	r3, r2
 8012ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	4a35      	ldr	r2, [pc, #212]	; (8012f7c <TIM_Base_SetConfig+0x12c>)
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d02b      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012eb0:	d027      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	4a32      	ldr	r2, [pc, #200]	; (8012f80 <TIM_Base_SetConfig+0x130>)
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d023      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	4a31      	ldr	r2, [pc, #196]	; (8012f84 <TIM_Base_SetConfig+0x134>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d01f      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4a30      	ldr	r2, [pc, #192]	; (8012f88 <TIM_Base_SetConfig+0x138>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d01b      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4a2f      	ldr	r2, [pc, #188]	; (8012f8c <TIM_Base_SetConfig+0x13c>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d017      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4a2e      	ldr	r2, [pc, #184]	; (8012f90 <TIM_Base_SetConfig+0x140>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d013      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	4a2d      	ldr	r2, [pc, #180]	; (8012f94 <TIM_Base_SetConfig+0x144>)
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d00f      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4a2c      	ldr	r2, [pc, #176]	; (8012f98 <TIM_Base_SetConfig+0x148>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d00b      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4a2b      	ldr	r2, [pc, #172]	; (8012f9c <TIM_Base_SetConfig+0x14c>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d007      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	4a2a      	ldr	r2, [pc, #168]	; (8012fa0 <TIM_Base_SetConfig+0x150>)
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d003      	beq.n	8012f02 <TIM_Base_SetConfig+0xb2>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	4a29      	ldr	r2, [pc, #164]	; (8012fa4 <TIM_Base_SetConfig+0x154>)
 8012efe:	4293      	cmp	r3, r2
 8012f00:	d108      	bne.n	8012f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	68db      	ldr	r3, [r3, #12]
 8012f0e:	68fa      	ldr	r2, [r7, #12]
 8012f10:	4313      	orrs	r3, r2
 8012f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	695b      	ldr	r3, [r3, #20]
 8012f1e:	4313      	orrs	r3, r2
 8012f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	68fa      	ldr	r2, [r7, #12]
 8012f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	689a      	ldr	r2, [r3, #8]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	681a      	ldr	r2, [r3, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	4a10      	ldr	r2, [pc, #64]	; (8012f7c <TIM_Base_SetConfig+0x12c>)
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d003      	beq.n	8012f48 <TIM_Base_SetConfig+0xf8>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4a12      	ldr	r2, [pc, #72]	; (8012f8c <TIM_Base_SetConfig+0x13c>)
 8012f44:	4293      	cmp	r3, r2
 8012f46:	d103      	bne.n	8012f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	691a      	ldr	r2, [r3, #16]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2201      	movs	r2, #1
 8012f54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	691b      	ldr	r3, [r3, #16]
 8012f5a:	f003 0301 	and.w	r3, r3, #1
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d105      	bne.n	8012f6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	691b      	ldr	r3, [r3, #16]
 8012f66:	f023 0201 	bic.w	r2, r3, #1
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	611a      	str	r2, [r3, #16]
  }
}
 8012f6e:	bf00      	nop
 8012f70:	3714      	adds	r7, #20
 8012f72:	46bd      	mov	sp, r7
 8012f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f78:	4770      	bx	lr
 8012f7a:	bf00      	nop
 8012f7c:	40010000 	.word	0x40010000
 8012f80:	40000400 	.word	0x40000400
 8012f84:	40000800 	.word	0x40000800
 8012f88:	40000c00 	.word	0x40000c00
 8012f8c:	40010400 	.word	0x40010400
 8012f90:	40014000 	.word	0x40014000
 8012f94:	40014400 	.word	0x40014400
 8012f98:	40014800 	.word	0x40014800
 8012f9c:	40001800 	.word	0x40001800
 8012fa0:	40001c00 	.word	0x40001c00
 8012fa4:	40002000 	.word	0x40002000

08012fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b087      	sub	sp, #28
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6a1b      	ldr	r3, [r3, #32]
 8012fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6a1b      	ldr	r3, [r3, #32]
 8012fbc:	f023 0201 	bic.w	r2, r3, #1
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	699b      	ldr	r3, [r3, #24]
 8012fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	f023 0303 	bic.w	r3, r3, #3
 8012fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	68fa      	ldr	r2, [r7, #12]
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	f023 0302 	bic.w	r3, r3, #2
 8012ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	689b      	ldr	r3, [r3, #8]
 8012ff6:	697a      	ldr	r2, [r7, #20]
 8012ff8:	4313      	orrs	r3, r2
 8012ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	4a20      	ldr	r2, [pc, #128]	; (8013080 <TIM_OC1_SetConfig+0xd8>)
 8013000:	4293      	cmp	r3, r2
 8013002:	d003      	beq.n	801300c <TIM_OC1_SetConfig+0x64>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	4a1f      	ldr	r2, [pc, #124]	; (8013084 <TIM_OC1_SetConfig+0xdc>)
 8013008:	4293      	cmp	r3, r2
 801300a:	d10c      	bne.n	8013026 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	f023 0308 	bic.w	r3, r3, #8
 8013012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	697a      	ldr	r2, [r7, #20]
 801301a:	4313      	orrs	r3, r2
 801301c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	f023 0304 	bic.w	r3, r3, #4
 8013024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	4a15      	ldr	r2, [pc, #84]	; (8013080 <TIM_OC1_SetConfig+0xd8>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d003      	beq.n	8013036 <TIM_OC1_SetConfig+0x8e>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	4a14      	ldr	r2, [pc, #80]	; (8013084 <TIM_OC1_SetConfig+0xdc>)
 8013032:	4293      	cmp	r3, r2
 8013034:	d111      	bne.n	801305a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801303c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	695b      	ldr	r3, [r3, #20]
 801304a:	693a      	ldr	r2, [r7, #16]
 801304c:	4313      	orrs	r3, r2
 801304e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	699b      	ldr	r3, [r3, #24]
 8013054:	693a      	ldr	r2, [r7, #16]
 8013056:	4313      	orrs	r3, r2
 8013058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	693a      	ldr	r2, [r7, #16]
 801305e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	68fa      	ldr	r2, [r7, #12]
 8013064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	685a      	ldr	r2, [r3, #4]
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	697a      	ldr	r2, [r7, #20]
 8013072:	621a      	str	r2, [r3, #32]
}
 8013074:	bf00      	nop
 8013076:	371c      	adds	r7, #28
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr
 8013080:	40010000 	.word	0x40010000
 8013084:	40010400 	.word	0x40010400

08013088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013088:	b480      	push	{r7}
 801308a:	b087      	sub	sp, #28
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	6a1b      	ldr	r3, [r3, #32]
 8013096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6a1b      	ldr	r3, [r3, #32]
 801309c:	f023 0210 	bic.w	r2, r3, #16
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	699b      	ldr	r3, [r3, #24]
 80130ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80130be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	021b      	lsls	r3, r3, #8
 80130c6:	68fa      	ldr	r2, [r7, #12]
 80130c8:	4313      	orrs	r3, r2
 80130ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	f023 0320 	bic.w	r3, r3, #32
 80130d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	689b      	ldr	r3, [r3, #8]
 80130d8:	011b      	lsls	r3, r3, #4
 80130da:	697a      	ldr	r2, [r7, #20]
 80130dc:	4313      	orrs	r3, r2
 80130de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	4a22      	ldr	r2, [pc, #136]	; (801316c <TIM_OC2_SetConfig+0xe4>)
 80130e4:	4293      	cmp	r3, r2
 80130e6:	d003      	beq.n	80130f0 <TIM_OC2_SetConfig+0x68>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	4a21      	ldr	r2, [pc, #132]	; (8013170 <TIM_OC2_SetConfig+0xe8>)
 80130ec:	4293      	cmp	r3, r2
 80130ee:	d10d      	bne.n	801310c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	011b      	lsls	r3, r3, #4
 80130fe:	697a      	ldr	r2, [r7, #20]
 8013100:	4313      	orrs	r3, r2
 8013102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801310a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	4a17      	ldr	r2, [pc, #92]	; (801316c <TIM_OC2_SetConfig+0xe4>)
 8013110:	4293      	cmp	r3, r2
 8013112:	d003      	beq.n	801311c <TIM_OC2_SetConfig+0x94>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	4a16      	ldr	r2, [pc, #88]	; (8013170 <TIM_OC2_SetConfig+0xe8>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d113      	bne.n	8013144 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801311c:	693b      	ldr	r3, [r7, #16]
 801311e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801312a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	695b      	ldr	r3, [r3, #20]
 8013130:	009b      	lsls	r3, r3, #2
 8013132:	693a      	ldr	r2, [r7, #16]
 8013134:	4313      	orrs	r3, r2
 8013136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	699b      	ldr	r3, [r3, #24]
 801313c:	009b      	lsls	r3, r3, #2
 801313e:	693a      	ldr	r2, [r7, #16]
 8013140:	4313      	orrs	r3, r2
 8013142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	693a      	ldr	r2, [r7, #16]
 8013148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	685a      	ldr	r2, [r3, #4]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	697a      	ldr	r2, [r7, #20]
 801315c:	621a      	str	r2, [r3, #32]
}
 801315e:	bf00      	nop
 8013160:	371c      	adds	r7, #28
 8013162:	46bd      	mov	sp, r7
 8013164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013168:	4770      	bx	lr
 801316a:	bf00      	nop
 801316c:	40010000 	.word	0x40010000
 8013170:	40010400 	.word	0x40010400

08013174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013174:	b480      	push	{r7}
 8013176:	b087      	sub	sp, #28
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6a1b      	ldr	r3, [r3, #32]
 8013182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6a1b      	ldr	r3, [r3, #32]
 8013188:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	69db      	ldr	r3, [r3, #28]
 801319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	f023 0303 	bic.w	r3, r3, #3
 80131aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	4313      	orrs	r3, r2
 80131b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80131bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	689b      	ldr	r3, [r3, #8]
 80131c2:	021b      	lsls	r3, r3, #8
 80131c4:	697a      	ldr	r2, [r7, #20]
 80131c6:	4313      	orrs	r3, r2
 80131c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	4a21      	ldr	r2, [pc, #132]	; (8013254 <TIM_OC3_SetConfig+0xe0>)
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d003      	beq.n	80131da <TIM_OC3_SetConfig+0x66>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	4a20      	ldr	r2, [pc, #128]	; (8013258 <TIM_OC3_SetConfig+0xe4>)
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d10d      	bne.n	80131f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80131e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	68db      	ldr	r3, [r3, #12]
 80131e6:	021b      	lsls	r3, r3, #8
 80131e8:	697a      	ldr	r2, [r7, #20]
 80131ea:	4313      	orrs	r3, r2
 80131ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80131f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	4a16      	ldr	r2, [pc, #88]	; (8013254 <TIM_OC3_SetConfig+0xe0>)
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d003      	beq.n	8013206 <TIM_OC3_SetConfig+0x92>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	4a15      	ldr	r2, [pc, #84]	; (8013258 <TIM_OC3_SetConfig+0xe4>)
 8013202:	4293      	cmp	r3, r2
 8013204:	d113      	bne.n	801322e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801320c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	695b      	ldr	r3, [r3, #20]
 801321a:	011b      	lsls	r3, r3, #4
 801321c:	693a      	ldr	r2, [r7, #16]
 801321e:	4313      	orrs	r3, r2
 8013220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	699b      	ldr	r3, [r3, #24]
 8013226:	011b      	lsls	r3, r3, #4
 8013228:	693a      	ldr	r2, [r7, #16]
 801322a:	4313      	orrs	r3, r2
 801322c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	693a      	ldr	r2, [r7, #16]
 8013232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	685a      	ldr	r2, [r3, #4]
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	697a      	ldr	r2, [r7, #20]
 8013246:	621a      	str	r2, [r3, #32]
}
 8013248:	bf00      	nop
 801324a:	371c      	adds	r7, #28
 801324c:	46bd      	mov	sp, r7
 801324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013252:	4770      	bx	lr
 8013254:	40010000 	.word	0x40010000
 8013258:	40010400 	.word	0x40010400

0801325c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801325c:	b480      	push	{r7}
 801325e:	b087      	sub	sp, #28
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6a1b      	ldr	r3, [r3, #32]
 801326a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	6a1b      	ldr	r3, [r3, #32]
 8013270:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	69db      	ldr	r3, [r3, #28]
 8013282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	021b      	lsls	r3, r3, #8
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	4313      	orrs	r3, r2
 801329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80132a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	689b      	ldr	r3, [r3, #8]
 80132ac:	031b      	lsls	r3, r3, #12
 80132ae:	693a      	ldr	r2, [r7, #16]
 80132b0:	4313      	orrs	r3, r2
 80132b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	4a12      	ldr	r2, [pc, #72]	; (8013300 <TIM_OC4_SetConfig+0xa4>)
 80132b8:	4293      	cmp	r3, r2
 80132ba:	d003      	beq.n	80132c4 <TIM_OC4_SetConfig+0x68>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	4a11      	ldr	r2, [pc, #68]	; (8013304 <TIM_OC4_SetConfig+0xa8>)
 80132c0:	4293      	cmp	r3, r2
 80132c2:	d109      	bne.n	80132d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80132ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	695b      	ldr	r3, [r3, #20]
 80132d0:	019b      	lsls	r3, r3, #6
 80132d2:	697a      	ldr	r2, [r7, #20]
 80132d4:	4313      	orrs	r3, r2
 80132d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	697a      	ldr	r2, [r7, #20]
 80132dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	68fa      	ldr	r2, [r7, #12]
 80132e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	685a      	ldr	r2, [r3, #4]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	693a      	ldr	r2, [r7, #16]
 80132f0:	621a      	str	r2, [r3, #32]
}
 80132f2:	bf00      	nop
 80132f4:	371c      	adds	r7, #28
 80132f6:	46bd      	mov	sp, r7
 80132f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fc:	4770      	bx	lr
 80132fe:	bf00      	nop
 8013300:	40010000 	.word	0x40010000
 8013304:	40010400 	.word	0x40010400

08013308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013308:	b480      	push	{r7}
 801330a:	b087      	sub	sp, #28
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	6a1b      	ldr	r3, [r3, #32]
 8013318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	6a1b      	ldr	r3, [r3, #32]
 801331e:	f023 0201 	bic.w	r2, r3, #1
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	011b      	lsls	r3, r3, #4
 8013338:	693a      	ldr	r2, [r7, #16]
 801333a:	4313      	orrs	r3, r2
 801333c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801333e:	697b      	ldr	r3, [r7, #20]
 8013340:	f023 030a 	bic.w	r3, r3, #10
 8013344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013346:	697a      	ldr	r2, [r7, #20]
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	4313      	orrs	r3, r2
 801334c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	693a      	ldr	r2, [r7, #16]
 8013352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	697a      	ldr	r2, [r7, #20]
 8013358:	621a      	str	r2, [r3, #32]
}
 801335a:	bf00      	nop
 801335c:	371c      	adds	r7, #28
 801335e:	46bd      	mov	sp, r7
 8013360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013364:	4770      	bx	lr

08013366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013366:	b480      	push	{r7}
 8013368:	b087      	sub	sp, #28
 801336a:	af00      	add	r7, sp, #0
 801336c:	60f8      	str	r0, [r7, #12]
 801336e:	60b9      	str	r1, [r7, #8]
 8013370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	6a1b      	ldr	r3, [r3, #32]
 8013376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	6a1b      	ldr	r3, [r3, #32]
 801337c:	f023 0210 	bic.w	r2, r3, #16
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	699b      	ldr	r3, [r3, #24]
 8013388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013390:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	031b      	lsls	r3, r3, #12
 8013396:	693a      	ldr	r2, [r7, #16]
 8013398:	4313      	orrs	r3, r2
 801339a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80133a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	011b      	lsls	r3, r3, #4
 80133a8:	697a      	ldr	r2, [r7, #20]
 80133aa:	4313      	orrs	r3, r2
 80133ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	693a      	ldr	r2, [r7, #16]
 80133b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	697a      	ldr	r2, [r7, #20]
 80133b8:	621a      	str	r2, [r3, #32]
}
 80133ba:	bf00      	nop
 80133bc:	371c      	adds	r7, #28
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr

080133c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80133c6:	b480      	push	{r7}
 80133c8:	b085      	sub	sp, #20
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	6078      	str	r0, [r7, #4]
 80133ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80133de:	683a      	ldr	r2, [r7, #0]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	4313      	orrs	r3, r2
 80133e4:	f043 0307 	orr.w	r3, r3, #7
 80133e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	68fa      	ldr	r2, [r7, #12]
 80133ee:	609a      	str	r2, [r3, #8]
}
 80133f0:	bf00      	nop
 80133f2:	3714      	adds	r7, #20
 80133f4:	46bd      	mov	sp, r7
 80133f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fa:	4770      	bx	lr

080133fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b087      	sub	sp, #28
 8013400:	af00      	add	r7, sp, #0
 8013402:	60f8      	str	r0, [r7, #12]
 8013404:	60b9      	str	r1, [r7, #8]
 8013406:	607a      	str	r2, [r7, #4]
 8013408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	689b      	ldr	r3, [r3, #8]
 801340e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	021a      	lsls	r2, r3, #8
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	431a      	orrs	r2, r3
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	4313      	orrs	r3, r2
 8013424:	697a      	ldr	r2, [r7, #20]
 8013426:	4313      	orrs	r3, r2
 8013428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	697a      	ldr	r2, [r7, #20]
 801342e:	609a      	str	r2, [r3, #8]
}
 8013430:	bf00      	nop
 8013432:	371c      	adds	r7, #28
 8013434:	46bd      	mov	sp, r7
 8013436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343a:	4770      	bx	lr

0801343c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801343c:	b480      	push	{r7}
 801343e:	b087      	sub	sp, #28
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	f003 031f 	and.w	r3, r3, #31
 801344e:	2201      	movs	r2, #1
 8013450:	fa02 f303 	lsl.w	r3, r2, r3
 8013454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	6a1a      	ldr	r2, [r3, #32]
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	43db      	mvns	r3, r3
 801345e:	401a      	ands	r2, r3
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	6a1a      	ldr	r2, [r3, #32]
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	f003 031f 	and.w	r3, r3, #31
 801346e:	6879      	ldr	r1, [r7, #4]
 8013470:	fa01 f303 	lsl.w	r3, r1, r3
 8013474:	431a      	orrs	r2, r3
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	621a      	str	r2, [r3, #32]
}
 801347a:	bf00      	nop
 801347c:	371c      	adds	r7, #28
 801347e:	46bd      	mov	sp, r7
 8013480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013484:	4770      	bx	lr
	...

08013488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013488:	b480      	push	{r7}
 801348a:	b085      	sub	sp, #20
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
 8013490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013498:	2b01      	cmp	r3, #1
 801349a:	d101      	bne.n	80134a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801349c:	2302      	movs	r3, #2
 801349e:	e05a      	b.n	8013556 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2201      	movs	r2, #1
 80134a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2202      	movs	r2, #2
 80134ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	689b      	ldr	r3, [r3, #8]
 80134be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	68fa      	ldr	r2, [r7, #12]
 80134ce:	4313      	orrs	r3, r2
 80134d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	68fa      	ldr	r2, [r7, #12]
 80134d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	4a21      	ldr	r2, [pc, #132]	; (8013564 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d022      	beq.n	801352a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134ec:	d01d      	beq.n	801352a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	4a1d      	ldr	r2, [pc, #116]	; (8013568 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d018      	beq.n	801352a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	4a1b      	ldr	r2, [pc, #108]	; (801356c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80134fe:	4293      	cmp	r3, r2
 8013500:	d013      	beq.n	801352a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	4a1a      	ldr	r2, [pc, #104]	; (8013570 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013508:	4293      	cmp	r3, r2
 801350a:	d00e      	beq.n	801352a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4a18      	ldr	r2, [pc, #96]	; (8013574 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d009      	beq.n	801352a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a17      	ldr	r2, [pc, #92]	; (8013578 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d004      	beq.n	801352a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4a15      	ldr	r2, [pc, #84]	; (801357c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d10c      	bne.n	8013544 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	4313      	orrs	r3, r2
 801353a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	68ba      	ldr	r2, [r7, #8]
 8013542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2201      	movs	r2, #1
 8013548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013554:	2300      	movs	r3, #0
}
 8013556:	4618      	mov	r0, r3
 8013558:	3714      	adds	r7, #20
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr
 8013562:	bf00      	nop
 8013564:	40010000 	.word	0x40010000
 8013568:	40000400 	.word	0x40000400
 801356c:	40000800 	.word	0x40000800
 8013570:	40000c00 	.word	0x40000c00
 8013574:	40010400 	.word	0x40010400
 8013578:	40014000 	.word	0x40014000
 801357c:	40001800 	.word	0x40001800

08013580 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013580:	b480      	push	{r7}
 8013582:	b083      	sub	sp, #12
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013588:	bf00      	nop
 801358a:	370c      	adds	r7, #12
 801358c:	46bd      	mov	sp, r7
 801358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013592:	4770      	bx	lr

08013594 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013594:	b480      	push	{r7}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801359c:	bf00      	nop
 801359e:	370c      	adds	r7, #12
 80135a0:	46bd      	mov	sp, r7
 80135a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a6:	4770      	bx	lr

080135a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b082      	sub	sp, #8
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d101      	bne.n	80135ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80135b6:	2301      	movs	r3, #1
 80135b8:	e042      	b.n	8013640 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d106      	bne.n	80135d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2200      	movs	r2, #0
 80135ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7fb fa2a 	bl	800ea28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2224      	movs	r2, #36	; 0x24
 80135d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	68da      	ldr	r2, [r3, #12]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80135ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f000 fdcb 	bl	8014188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	691a      	ldr	r2, [r3, #16]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	695a      	ldr	r2, [r3, #20]
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	68da      	ldr	r2, [r3, #12]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2200      	movs	r2, #0
 8013626:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2220      	movs	r2, #32
 801362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2220      	movs	r2, #32
 8013634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2200      	movs	r2, #0
 801363c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801363e:	2300      	movs	r3, #0
}
 8013640:	4618      	mov	r0, r3
 8013642:	3708      	adds	r7, #8
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b08c      	sub	sp, #48	; 0x30
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	60b9      	str	r1, [r7, #8]
 8013652:	4613      	mov	r3, r2
 8013654:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801365c:	b2db      	uxtb	r3, r3
 801365e:	2b20      	cmp	r3, #32
 8013660:	d156      	bne.n	8013710 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d002      	beq.n	801366e <HAL_UART_Transmit_DMA+0x26>
 8013668:	88fb      	ldrh	r3, [r7, #6]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d101      	bne.n	8013672 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801366e:	2301      	movs	r3, #1
 8013670:	e04f      	b.n	8013712 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8013672:	68ba      	ldr	r2, [r7, #8]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	88fa      	ldrh	r2, [r7, #6]
 801367c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	88fa      	ldrh	r2, [r7, #6]
 8013682:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2200      	movs	r2, #0
 8013688:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	2221      	movs	r2, #33	; 0x21
 801368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013696:	4a21      	ldr	r2, [pc, #132]	; (801371c <HAL_UART_Transmit_DMA+0xd4>)
 8013698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801369e:	4a20      	ldr	r2, [pc, #128]	; (8013720 <HAL_UART_Transmit_DMA+0xd8>)
 80136a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136a6:	4a1f      	ldr	r2, [pc, #124]	; (8013724 <HAL_UART_Transmit_DMA+0xdc>)
 80136a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136ae:	2200      	movs	r2, #0
 80136b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80136b2:	f107 0308 	add.w	r3, r7, #8
 80136b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80136bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136be:	6819      	ldr	r1, [r3, #0]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	3304      	adds	r3, #4
 80136c6:	461a      	mov	r2, r3
 80136c8:	88fb      	ldrh	r3, [r7, #6]
 80136ca:	f7fc fa95 	bl	800fbf8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80136d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	3314      	adds	r3, #20
 80136de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	e853 3f00 	ldrex	r3, [r3]
 80136e6:	617b      	str	r3, [r7, #20]
   return(result);
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	3314      	adds	r3, #20
 80136f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136f8:	627a      	str	r2, [r7, #36]	; 0x24
 80136fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136fc:	6a39      	ldr	r1, [r7, #32]
 80136fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013700:	e841 2300 	strex	r3, r2, [r1]
 8013704:	61fb      	str	r3, [r7, #28]
   return(result);
 8013706:	69fb      	ldr	r3, [r7, #28]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d1e5      	bne.n	80136d8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 801370c:	2300      	movs	r3, #0
 801370e:	e000      	b.n	8013712 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8013710:	2302      	movs	r3, #2
  }
}
 8013712:	4618      	mov	r0, r3
 8013714:	3730      	adds	r7, #48	; 0x30
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	08013cb5 	.word	0x08013cb5
 8013720:	08013d4f 	.word	0x08013d4f
 8013724:	08013d6b 	.word	0x08013d6b

08013728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b0ba      	sub	sp, #232	; 0xe8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	695b      	ldr	r3, [r3, #20]
 801374a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 801374e:	2300      	movs	r3, #0
 8013750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8013754:	2300      	movs	r3, #0
 8013756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801375e:	f003 030f 	and.w	r3, r3, #15
 8013762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8013766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801376a:	2b00      	cmp	r3, #0
 801376c:	d10f      	bne.n	801378e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013772:	f003 0320 	and.w	r3, r3, #32
 8013776:	2b00      	cmp	r3, #0
 8013778:	d009      	beq.n	801378e <HAL_UART_IRQHandler+0x66>
 801377a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801377e:	f003 0320 	and.w	r3, r3, #32
 8013782:	2b00      	cmp	r3, #0
 8013784:	d003      	beq.n	801378e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f000 fc40 	bl	801400c <UART_Receive_IT>
      return;
 801378c:	e25b      	b.n	8013c46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801378e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013792:	2b00      	cmp	r3, #0
 8013794:	f000 80de 	beq.w	8013954 <HAL_UART_IRQHandler+0x22c>
 8013798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801379c:	f003 0301 	and.w	r3, r3, #1
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d106      	bne.n	80137b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80137a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80137a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	f000 80d1 	beq.w	8013954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80137b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137b6:	f003 0301 	and.w	r3, r3, #1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00b      	beq.n	80137d6 <HAL_UART_IRQHandler+0xae>
 80137be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80137c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d005      	beq.n	80137d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137ce:	f043 0201 	orr.w	r2, r3, #1
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80137d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137da:	f003 0304 	and.w	r3, r3, #4
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00b      	beq.n	80137fa <HAL_UART_IRQHandler+0xd2>
 80137e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80137e6:	f003 0301 	and.w	r3, r3, #1
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d005      	beq.n	80137fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137f2:	f043 0202 	orr.w	r2, r3, #2
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80137fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137fe:	f003 0302 	and.w	r3, r3, #2
 8013802:	2b00      	cmp	r3, #0
 8013804:	d00b      	beq.n	801381e <HAL_UART_IRQHandler+0xf6>
 8013806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801380a:	f003 0301 	and.w	r3, r3, #1
 801380e:	2b00      	cmp	r3, #0
 8013810:	d005      	beq.n	801381e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013816:	f043 0204 	orr.w	r2, r3, #4
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013822:	f003 0308 	and.w	r3, r3, #8
 8013826:	2b00      	cmp	r3, #0
 8013828:	d011      	beq.n	801384e <HAL_UART_IRQHandler+0x126>
 801382a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801382e:	f003 0320 	and.w	r3, r3, #32
 8013832:	2b00      	cmp	r3, #0
 8013834:	d105      	bne.n	8013842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8013836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801383a:	f003 0301 	and.w	r3, r3, #1
 801383e:	2b00      	cmp	r3, #0
 8013840:	d005      	beq.n	801384e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013846:	f043 0208 	orr.w	r2, r3, #8
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013852:	2b00      	cmp	r3, #0
 8013854:	f000 81f2 	beq.w	8013c3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8013858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801385c:	f003 0320 	and.w	r3, r3, #32
 8013860:	2b00      	cmp	r3, #0
 8013862:	d008      	beq.n	8013876 <HAL_UART_IRQHandler+0x14e>
 8013864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013868:	f003 0320 	and.w	r3, r3, #32
 801386c:	2b00      	cmp	r3, #0
 801386e:	d002      	beq.n	8013876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 fbcb 	bl	801400c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	695b      	ldr	r3, [r3, #20]
 801387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013880:	2b40      	cmp	r3, #64	; 0x40
 8013882:	bf0c      	ite	eq
 8013884:	2301      	moveq	r3, #1
 8013886:	2300      	movne	r3, #0
 8013888:	b2db      	uxtb	r3, r3
 801388a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013892:	f003 0308 	and.w	r3, r3, #8
 8013896:	2b00      	cmp	r3, #0
 8013898:	d103      	bne.n	80138a2 <HAL_UART_IRQHandler+0x17a>
 801389a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d04f      	beq.n	8013942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80138a2:	6878      	ldr	r0, [r7, #4]
 80138a4:	f000 fad3 	bl	8013e4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	695b      	ldr	r3, [r3, #20]
 80138ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138b2:	2b40      	cmp	r3, #64	; 0x40
 80138b4:	d141      	bne.n	801393a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	3314      	adds	r3, #20
 80138bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80138c4:	e853 3f00 	ldrex	r3, [r3]
 80138c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80138cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80138d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	3314      	adds	r3, #20
 80138de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80138e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80138e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80138ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80138f2:	e841 2300 	strex	r3, r2, [r1]
 80138f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80138fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d1d9      	bne.n	80138b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013906:	2b00      	cmp	r3, #0
 8013908:	d013      	beq.n	8013932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801390e:	4a7e      	ldr	r2, [pc, #504]	; (8013b08 <HAL_UART_IRQHandler+0x3e0>)
 8013910:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013916:	4618      	mov	r0, r3
 8013918:	f7fc fa36 	bl	800fd88 <HAL_DMA_Abort_IT>
 801391c:	4603      	mov	r3, r0
 801391e:	2b00      	cmp	r3, #0
 8013920:	d016      	beq.n	8013950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801392c:	4610      	mov	r0, r2
 801392e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013930:	e00e      	b.n	8013950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f000 f9a8 	bl	8013c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013938:	e00a      	b.n	8013950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f000 f9a4 	bl	8013c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013940:	e006      	b.n	8013950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f000 f9a0 	bl	8013c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2200      	movs	r2, #0
 801394c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 801394e:	e175      	b.n	8013c3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013950:	bf00      	nop
    return;
 8013952:	e173      	b.n	8013c3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013958:	2b01      	cmp	r3, #1
 801395a:	f040 814f 	bne.w	8013bfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013962:	f003 0310 	and.w	r3, r3, #16
 8013966:	2b00      	cmp	r3, #0
 8013968:	f000 8148 	beq.w	8013bfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 801396c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013970:	f003 0310 	and.w	r3, r3, #16
 8013974:	2b00      	cmp	r3, #0
 8013976:	f000 8141 	beq.w	8013bfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 801397a:	2300      	movs	r3, #0
 801397c:	60bb      	str	r3, [r7, #8]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	60bb      	str	r3, [r7, #8]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	60bb      	str	r3, [r7, #8]
 801398e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	695b      	ldr	r3, [r3, #20]
 8013996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801399a:	2b40      	cmp	r3, #64	; 0x40
 801399c:	f040 80b6 	bne.w	8013b0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80139ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	f000 8145 	beq.w	8013c40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80139ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80139be:	429a      	cmp	r2, r3
 80139c0:	f080 813e 	bcs.w	8013c40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80139ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139d0:	69db      	ldr	r3, [r3, #28]
 80139d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80139d6:	f000 8088 	beq.w	8013aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	330c      	adds	r3, #12
 80139e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80139e8:	e853 3f00 	ldrex	r3, [r3]
 80139ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80139f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80139f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	330c      	adds	r3, #12
 8013a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013a06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013a16:	e841 2300 	strex	r3, r2, [r1]
 8013a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8013a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1d9      	bne.n	80139da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	3314      	adds	r3, #20
 8013a2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013a30:	e853 3f00 	ldrex	r3, [r3]
 8013a34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013a38:	f023 0301 	bic.w	r3, r3, #1
 8013a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	3314      	adds	r3, #20
 8013a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013a4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013a56:	e841 2300 	strex	r3, r2, [r1]
 8013a5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013a5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d1e1      	bne.n	8013a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	3314      	adds	r3, #20
 8013a68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013a6c:	e853 3f00 	ldrex	r3, [r3]
 8013a70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013a72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	3314      	adds	r3, #20
 8013a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013a86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8013a88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013a8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013a8e:	e841 2300 	strex	r3, r2, [r1]
 8013a92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d1e3      	bne.n	8013a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2220      	movs	r2, #32
 8013a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	330c      	adds	r3, #12
 8013aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ab2:	e853 3f00 	ldrex	r3, [r3]
 8013ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013aba:	f023 0310 	bic.w	r3, r3, #16
 8013abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	330c      	adds	r3, #12
 8013ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8013acc:	65ba      	str	r2, [r7, #88]	; 0x58
 8013ace:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ad4:	e841 2300 	strex	r3, r2, [r1]
 8013ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d1e3      	bne.n	8013aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fc f8df 	bl	800fca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2202      	movs	r2, #2
 8013aee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	1ad3      	subs	r3, r2, r3
 8013afc:	b29b      	uxth	r3, r3
 8013afe:	4619      	mov	r1, r3
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f000 f8cb 	bl	8013c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8013b06:	e09b      	b.n	8013c40 <HAL_UART_IRQHandler+0x518>
 8013b08:	08013f15 	.word	0x08013f15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8013b20:	b29b      	uxth	r3, r3
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	f000 808e 	beq.w	8013c44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8013b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f000 8089 	beq.w	8013c44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	330c      	adds	r3, #12
 8013b38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b3c:	e853 3f00 	ldrex	r3, [r3]
 8013b40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	330c      	adds	r3, #12
 8013b52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8013b56:	647a      	str	r2, [r7, #68]	; 0x44
 8013b58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b5e:	e841 2300 	strex	r3, r2, [r1]
 8013b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d1e3      	bne.n	8013b32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	3314      	adds	r3, #20
 8013b70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b74:	e853 3f00 	ldrex	r3, [r3]
 8013b78:	623b      	str	r3, [r7, #32]
   return(result);
 8013b7a:	6a3b      	ldr	r3, [r7, #32]
 8013b7c:	f023 0301 	bic.w	r3, r3, #1
 8013b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	3314      	adds	r3, #20
 8013b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013b8e:	633a      	str	r2, [r7, #48]	; 0x30
 8013b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b96:	e841 2300 	strex	r3, r2, [r1]
 8013b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d1e3      	bne.n	8013b6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2220      	movs	r2, #32
 8013ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2200      	movs	r2, #0
 8013bae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	330c      	adds	r3, #12
 8013bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	e853 3f00 	ldrex	r3, [r3]
 8013bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f023 0310 	bic.w	r3, r3, #16
 8013bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	330c      	adds	r3, #12
 8013bd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013bd4:	61fa      	str	r2, [r7, #28]
 8013bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd8:	69b9      	ldr	r1, [r7, #24]
 8013bda:	69fa      	ldr	r2, [r7, #28]
 8013bdc:	e841 2300 	strex	r3, r2, [r1]
 8013be0:	617b      	str	r3, [r7, #20]
   return(result);
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d1e3      	bne.n	8013bb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	2202      	movs	r2, #2
 8013bec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f000 f851 	bl	8013c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8013bfa:	e023      	b.n	8013c44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d009      	beq.n	8013c1c <HAL_UART_IRQHandler+0x4f4>
 8013c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d003      	beq.n	8013c1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f000 f991 	bl	8013f3c <UART_Transmit_IT>
    return;
 8013c1a:	e014      	b.n	8013c46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d00e      	beq.n	8013c46 <HAL_UART_IRQHandler+0x51e>
 8013c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d008      	beq.n	8013c46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f000 f9d1 	bl	8013fdc <UART_EndTransmit_IT>
    return;
 8013c3a:	e004      	b.n	8013c46 <HAL_UART_IRQHandler+0x51e>
    return;
 8013c3c:	bf00      	nop
 8013c3e:	e002      	b.n	8013c46 <HAL_UART_IRQHandler+0x51e>
      return;
 8013c40:	bf00      	nop
 8013c42:	e000      	b.n	8013c46 <HAL_UART_IRQHandler+0x51e>
      return;
 8013c44:	bf00      	nop
  }
}
 8013c46:	37e8      	adds	r7, #232	; 0xe8
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}

08013c4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8013c54:	bf00      	nop
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr

08013c60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8013c68:	bf00      	nop
 8013c6a:	370c      	adds	r7, #12
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8013c7c:	bf00      	nop
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8013c90:	bf00      	nop
 8013c92:	370c      	adds	r7, #12
 8013c94:	46bd      	mov	sp, r7
 8013c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9a:	4770      	bx	lr

08013c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b083      	sub	sp, #12
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013ca8:	bf00      	nop
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr

08013cb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b090      	sub	sp, #64	; 0x40
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d137      	bne.n	8013d40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8013cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	3314      	adds	r3, #20
 8013cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	e853 3f00 	ldrex	r3, [r3]
 8013ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8013ce6:	6a3b      	ldr	r3, [r7, #32]
 8013ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8013cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	3314      	adds	r3, #20
 8013cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8013cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cfe:	e841 2300 	strex	r3, r2, [r1]
 8013d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d1e5      	bne.n	8013cd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	330c      	adds	r3, #12
 8013d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	e853 3f00 	ldrex	r3, [r3]
 8013d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d20:	637b      	str	r3, [r7, #52]	; 0x34
 8013d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	330c      	adds	r3, #12
 8013d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d2a:	61fa      	str	r2, [r7, #28]
 8013d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d2e:	69b9      	ldr	r1, [r7, #24]
 8013d30:	69fa      	ldr	r2, [r7, #28]
 8013d32:	e841 2300 	strex	r3, r2, [r1]
 8013d36:	617b      	str	r3, [r7, #20]
   return(result);
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d1e5      	bne.n	8013d0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013d3e:	e002      	b.n	8013d46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8013d40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013d42:	f7ff ff83 	bl	8013c4c <HAL_UART_TxCpltCallback>
}
 8013d46:	bf00      	nop
 8013d48:	3740      	adds	r7, #64	; 0x40
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}

08013d4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013d4e:	b580      	push	{r7, lr}
 8013d50:	b084      	sub	sp, #16
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f7ff ff7f 	bl	8013c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013d62:	bf00      	nop
 8013d64:	3710      	adds	r7, #16
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b084      	sub	sp, #16
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8013d72:	2300      	movs	r3, #0
 8013d74:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d7a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	695b      	ldr	r3, [r3, #20]
 8013d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013d86:	2b80      	cmp	r3, #128	; 0x80
 8013d88:	bf0c      	ite	eq
 8013d8a:	2301      	moveq	r3, #1
 8013d8c:	2300      	movne	r3, #0
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8013d92:	68bb      	ldr	r3, [r7, #8]
 8013d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	2b21      	cmp	r3, #33	; 0x21
 8013d9c:	d108      	bne.n	8013db0 <UART_DMAError+0x46>
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d005      	beq.n	8013db0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	2200      	movs	r2, #0
 8013da8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8013daa:	68b8      	ldr	r0, [r7, #8]
 8013dac:	f000 f827 	bl	8013dfe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	695b      	ldr	r3, [r3, #20]
 8013db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013dba:	2b40      	cmp	r3, #64	; 0x40
 8013dbc:	bf0c      	ite	eq
 8013dbe:	2301      	moveq	r3, #1
 8013dc0:	2300      	movne	r3, #0
 8013dc2:	b2db      	uxtb	r3, r3
 8013dc4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	2b22      	cmp	r3, #34	; 0x22
 8013dd0:	d108      	bne.n	8013de4 <UART_DMAError+0x7a>
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8013dd8:	68bb      	ldr	r3, [r7, #8]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8013dde:	68b8      	ldr	r0, [r7, #8]
 8013de0:	f000 f835 	bl	8013e4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013de8:	f043 0210 	orr.w	r2, r3, #16
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013df0:	68b8      	ldr	r0, [r7, #8]
 8013df2:	f7ff ff49 	bl	8013c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013df6:	bf00      	nop
 8013df8:	3710      	adds	r7, #16
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013dfe:	b480      	push	{r7}
 8013e00:	b089      	sub	sp, #36	; 0x24
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	330c      	adds	r3, #12
 8013e0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	e853 3f00 	ldrex	r3, [r3]
 8013e14:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8013e1c:	61fb      	str	r3, [r7, #28]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	330c      	adds	r3, #12
 8013e24:	69fa      	ldr	r2, [r7, #28]
 8013e26:	61ba      	str	r2, [r7, #24]
 8013e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e2a:	6979      	ldr	r1, [r7, #20]
 8013e2c:	69ba      	ldr	r2, [r7, #24]
 8013e2e:	e841 2300 	strex	r3, r2, [r1]
 8013e32:	613b      	str	r3, [r7, #16]
   return(result);
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1e5      	bne.n	8013e06 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2220      	movs	r2, #32
 8013e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8013e42:	bf00      	nop
 8013e44:	3724      	adds	r7, #36	; 0x24
 8013e46:	46bd      	mov	sp, r7
 8013e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4c:	4770      	bx	lr

08013e4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013e4e:	b480      	push	{r7}
 8013e50:	b095      	sub	sp, #84	; 0x54
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	330c      	adds	r3, #12
 8013e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e60:	e853 3f00 	ldrex	r3, [r3]
 8013e64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	330c      	adds	r3, #12
 8013e74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013e76:	643a      	str	r2, [r7, #64]	; 0x40
 8013e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e7e:	e841 2300 	strex	r3, r2, [r1]
 8013e82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d1e5      	bne.n	8013e56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	3314      	adds	r3, #20
 8013e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e92:	6a3b      	ldr	r3, [r7, #32]
 8013e94:	e853 3f00 	ldrex	r3, [r3]
 8013e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e9a:	69fb      	ldr	r3, [r7, #28]
 8013e9c:	f023 0301 	bic.w	r3, r3, #1
 8013ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	3314      	adds	r3, #20
 8013ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013eac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eb2:	e841 2300 	strex	r3, r2, [r1]
 8013eb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d1e5      	bne.n	8013e8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ec2:	2b01      	cmp	r3, #1
 8013ec4:	d119      	bne.n	8013efa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	330c      	adds	r3, #12
 8013ecc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	e853 3f00 	ldrex	r3, [r3]
 8013ed4:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	f023 0310 	bic.w	r3, r3, #16
 8013edc:	647b      	str	r3, [r7, #68]	; 0x44
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	330c      	adds	r3, #12
 8013ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ee6:	61ba      	str	r2, [r7, #24]
 8013ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eea:	6979      	ldr	r1, [r7, #20]
 8013eec:	69ba      	ldr	r2, [r7, #24]
 8013eee:	e841 2300 	strex	r3, r2, [r1]
 8013ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d1e5      	bne.n	8013ec6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2220      	movs	r2, #32
 8013efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	2200      	movs	r2, #0
 8013f06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8013f08:	bf00      	nop
 8013f0a:	3754      	adds	r7, #84	; 0x54
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b084      	sub	sp, #16
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2200      	movs	r2, #0
 8013f26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013f2e:	68f8      	ldr	r0, [r7, #12]
 8013f30:	f7ff feaa 	bl	8013c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013f34:	bf00      	nop
 8013f36:	3710      	adds	r7, #16
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8013f3c:	b480      	push	{r7}
 8013f3e:	b085      	sub	sp, #20
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013f4a:	b2db      	uxtb	r3, r3
 8013f4c:	2b21      	cmp	r3, #33	; 0x21
 8013f4e:	d13e      	bne.n	8013fce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f58:	d114      	bne.n	8013f84 <UART_Transmit_IT+0x48>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	691b      	ldr	r3, [r3, #16]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d110      	bne.n	8013f84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6a1b      	ldr	r3, [r3, #32]
 8013f66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	881b      	ldrh	r3, [r3, #0]
 8013f6c:	461a      	mov	r2, r3
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013f76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	6a1b      	ldr	r3, [r3, #32]
 8013f7c:	1c9a      	adds	r2, r3, #2
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	621a      	str	r2, [r3, #32]
 8013f82:	e008      	b.n	8013f96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6a1b      	ldr	r3, [r3, #32]
 8013f88:	1c59      	adds	r1, r3, #1
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	6211      	str	r1, [r2, #32]
 8013f8e:	781a      	ldrb	r2, [r3, #0]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	3b01      	subs	r3, #1
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d10f      	bne.n	8013fca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	68da      	ldr	r2, [r3, #12]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013fb8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681b      	ldr	r3, [r3, #0]
 8013fbe:	68da      	ldr	r2, [r3, #12]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013fc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	e000      	b.n	8013fd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013fce:	2302      	movs	r3, #2
  }
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3714      	adds	r7, #20
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fda:	4770      	bx	lr

08013fdc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b082      	sub	sp, #8
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	68da      	ldr	r2, [r3, #12]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ff2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2220      	movs	r2, #32
 8013ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7ff fe25 	bl	8013c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8014002:	2300      	movs	r3, #0
}
 8014004:	4618      	mov	r0, r3
 8014006:	3708      	adds	r7, #8
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}

0801400c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b08c      	sub	sp, #48	; 0x30
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801401a:	b2db      	uxtb	r3, r3
 801401c:	2b22      	cmp	r3, #34	; 0x22
 801401e:	f040 80ae 	bne.w	801417e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	689b      	ldr	r3, [r3, #8]
 8014026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801402a:	d117      	bne.n	801405c <UART_Receive_IT+0x50>
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	691b      	ldr	r3, [r3, #16]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d113      	bne.n	801405c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8014034:	2300      	movs	r3, #0
 8014036:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801403c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	b29b      	uxth	r3, r3
 8014046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801404a:	b29a      	uxth	r2, r3
 801404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014054:	1c9a      	adds	r2, r3, #2
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	629a      	str	r2, [r3, #40]	; 0x28
 801405a:	e026      	b.n	80140aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014060:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8014062:	2300      	movs	r3, #0
 8014064:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	689b      	ldr	r3, [r3, #8]
 801406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801406e:	d007      	beq.n	8014080 <UART_Receive_IT+0x74>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	689b      	ldr	r3, [r3, #8]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d10a      	bne.n	801408e <UART_Receive_IT+0x82>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	691b      	ldr	r3, [r3, #16]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d106      	bne.n	801408e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	b2da      	uxtb	r2, r3
 8014088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801408a:	701a      	strb	r2, [r3, #0]
 801408c:	e008      	b.n	80140a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	b2db      	uxtb	r3, r3
 8014096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801409a:	b2da      	uxtb	r2, r3
 801409c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801409e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a4:	1c5a      	adds	r2, r3, #1
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	3b01      	subs	r3, #1
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	4619      	mov	r1, r3
 80140b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d15d      	bne.n	801417a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	68da      	ldr	r2, [r3, #12]
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f022 0220 	bic.w	r2, r2, #32
 80140cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	68da      	ldr	r2, [r3, #12]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80140dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	695a      	ldr	r2, [r3, #20]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f022 0201 	bic.w	r2, r2, #1
 80140ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2220      	movs	r2, #32
 80140f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2200      	movs	r2, #0
 80140fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014100:	2b01      	cmp	r3, #1
 8014102:	d135      	bne.n	8014170 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	2200      	movs	r2, #0
 8014108:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	330c      	adds	r3, #12
 8014110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	e853 3f00 	ldrex	r3, [r3]
 8014118:	613b      	str	r3, [r7, #16]
   return(result);
 801411a:	693b      	ldr	r3, [r7, #16]
 801411c:	f023 0310 	bic.w	r3, r3, #16
 8014120:	627b      	str	r3, [r7, #36]	; 0x24
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	330c      	adds	r3, #12
 8014128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801412a:	623a      	str	r2, [r7, #32]
 801412c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801412e:	69f9      	ldr	r1, [r7, #28]
 8014130:	6a3a      	ldr	r2, [r7, #32]
 8014132:	e841 2300 	strex	r3, r2, [r1]
 8014136:	61bb      	str	r3, [r7, #24]
   return(result);
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d1e5      	bne.n	801410a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	f003 0310 	and.w	r3, r3, #16
 8014148:	2b10      	cmp	r3, #16
 801414a:	d10a      	bne.n	8014162 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801414c:	2300      	movs	r3, #0
 801414e:	60fb      	str	r3, [r7, #12]
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	60fb      	str	r3, [r7, #12]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	60fb      	str	r3, [r7, #12]
 8014160:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8014166:	4619      	mov	r1, r3
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f7ff fd97 	bl	8013c9c <HAL_UARTEx_RxEventCallback>
 801416e:	e002      	b.n	8014176 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7ff fd7f 	bl	8013c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8014176:	2300      	movs	r3, #0
 8014178:	e002      	b.n	8014180 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 801417a:	2300      	movs	r3, #0
 801417c:	e000      	b.n	8014180 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801417e:	2302      	movs	r3, #2
  }
}
 8014180:	4618      	mov	r0, r3
 8014182:	3730      	adds	r7, #48	; 0x30
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801418c:	b0c0      	sub	sp, #256	; 0x100
 801418e:	af00      	add	r7, sp, #0
 8014190:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	691b      	ldr	r3, [r3, #16]
 801419c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80141a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141a4:	68d9      	ldr	r1, [r3, #12]
 80141a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	ea40 0301 	orr.w	r3, r0, r1
 80141b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80141b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141b6:	689a      	ldr	r2, [r3, #8]
 80141b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141bc:	691b      	ldr	r3, [r3, #16]
 80141be:	431a      	orrs	r2, r3
 80141c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141c4:	695b      	ldr	r3, [r3, #20]
 80141c6:	431a      	orrs	r2, r3
 80141c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141cc:	69db      	ldr	r3, [r3, #28]
 80141ce:	4313      	orrs	r3, r2
 80141d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80141d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	68db      	ldr	r3, [r3, #12]
 80141dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80141e0:	f021 010c 	bic.w	r1, r1, #12
 80141e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80141ee:	430b      	orrs	r3, r1
 80141f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80141f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	695b      	ldr	r3, [r3, #20]
 80141fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80141fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014202:	6999      	ldr	r1, [r3, #24]
 8014204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	ea40 0301 	orr.w	r3, r0, r1
 801420e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014214:	681a      	ldr	r2, [r3, #0]
 8014216:	4b8f      	ldr	r3, [pc, #572]	; (8014454 <UART_SetConfig+0x2cc>)
 8014218:	429a      	cmp	r2, r3
 801421a:	d005      	beq.n	8014228 <UART_SetConfig+0xa0>
 801421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	4b8d      	ldr	r3, [pc, #564]	; (8014458 <UART_SetConfig+0x2d0>)
 8014224:	429a      	cmp	r2, r3
 8014226:	d104      	bne.n	8014232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014228:	f7fe f8d2 	bl	80123d0 <HAL_RCC_GetPCLK2Freq>
 801422c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8014230:	e003      	b.n	801423a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014232:	f7fe f8b9 	bl	80123a8 <HAL_RCC_GetPCLK1Freq>
 8014236:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801423e:	69db      	ldr	r3, [r3, #28]
 8014240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014244:	f040 810c 	bne.w	8014460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801424c:	2200      	movs	r2, #0
 801424e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014252:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8014256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801425a:	4622      	mov	r2, r4
 801425c:	462b      	mov	r3, r5
 801425e:	1891      	adds	r1, r2, r2
 8014260:	65b9      	str	r1, [r7, #88]	; 0x58
 8014262:	415b      	adcs	r3, r3
 8014264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801426a:	4621      	mov	r1, r4
 801426c:	eb12 0801 	adds.w	r8, r2, r1
 8014270:	4629      	mov	r1, r5
 8014272:	eb43 0901 	adc.w	r9, r3, r1
 8014276:	f04f 0200 	mov.w	r2, #0
 801427a:	f04f 0300 	mov.w	r3, #0
 801427e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8014282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8014286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801428a:	4690      	mov	r8, r2
 801428c:	4699      	mov	r9, r3
 801428e:	4623      	mov	r3, r4
 8014290:	eb18 0303 	adds.w	r3, r8, r3
 8014294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014298:	462b      	mov	r3, r5
 801429a:	eb49 0303 	adc.w	r3, r9, r3
 801429e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80142a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	2200      	movs	r2, #0
 80142aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80142ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80142b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80142b6:	460b      	mov	r3, r1
 80142b8:	18db      	adds	r3, r3, r3
 80142ba:	653b      	str	r3, [r7, #80]	; 0x50
 80142bc:	4613      	mov	r3, r2
 80142be:	eb42 0303 	adc.w	r3, r2, r3
 80142c2:	657b      	str	r3, [r7, #84]	; 0x54
 80142c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80142c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80142cc:	f7ec fccc 	bl	8000c68 <__aeabi_uldivmod>
 80142d0:	4602      	mov	r2, r0
 80142d2:	460b      	mov	r3, r1
 80142d4:	4b61      	ldr	r3, [pc, #388]	; (801445c <UART_SetConfig+0x2d4>)
 80142d6:	fba3 2302 	umull	r2, r3, r3, r2
 80142da:	095b      	lsrs	r3, r3, #5
 80142dc:	011c      	lsls	r4, r3, #4
 80142de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80142e2:	2200      	movs	r2, #0
 80142e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80142e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80142ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80142f0:	4642      	mov	r2, r8
 80142f2:	464b      	mov	r3, r9
 80142f4:	1891      	adds	r1, r2, r2
 80142f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80142f8:	415b      	adcs	r3, r3
 80142fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80142fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8014300:	4641      	mov	r1, r8
 8014302:	eb12 0a01 	adds.w	sl, r2, r1
 8014306:	4649      	mov	r1, r9
 8014308:	eb43 0b01 	adc.w	fp, r3, r1
 801430c:	f04f 0200 	mov.w	r2, #0
 8014310:	f04f 0300 	mov.w	r3, #0
 8014314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801431c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014320:	4692      	mov	sl, r2
 8014322:	469b      	mov	fp, r3
 8014324:	4643      	mov	r3, r8
 8014326:	eb1a 0303 	adds.w	r3, sl, r3
 801432a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801432e:	464b      	mov	r3, r9
 8014330:	eb4b 0303 	adc.w	r3, fp, r3
 8014334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801433c:	685b      	ldr	r3, [r3, #4]
 801433e:	2200      	movs	r2, #0
 8014340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8014348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801434c:	460b      	mov	r3, r1
 801434e:	18db      	adds	r3, r3, r3
 8014350:	643b      	str	r3, [r7, #64]	; 0x40
 8014352:	4613      	mov	r3, r2
 8014354:	eb42 0303 	adc.w	r3, r2, r3
 8014358:	647b      	str	r3, [r7, #68]	; 0x44
 801435a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801435e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8014362:	f7ec fc81 	bl	8000c68 <__aeabi_uldivmod>
 8014366:	4602      	mov	r2, r0
 8014368:	460b      	mov	r3, r1
 801436a:	4611      	mov	r1, r2
 801436c:	4b3b      	ldr	r3, [pc, #236]	; (801445c <UART_SetConfig+0x2d4>)
 801436e:	fba3 2301 	umull	r2, r3, r3, r1
 8014372:	095b      	lsrs	r3, r3, #5
 8014374:	2264      	movs	r2, #100	; 0x64
 8014376:	fb02 f303 	mul.w	r3, r2, r3
 801437a:	1acb      	subs	r3, r1, r3
 801437c:	00db      	lsls	r3, r3, #3
 801437e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8014382:	4b36      	ldr	r3, [pc, #216]	; (801445c <UART_SetConfig+0x2d4>)
 8014384:	fba3 2302 	umull	r2, r3, r3, r2
 8014388:	095b      	lsrs	r3, r3, #5
 801438a:	005b      	lsls	r3, r3, #1
 801438c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014390:	441c      	add	r4, r3
 8014392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014396:	2200      	movs	r2, #0
 8014398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801439c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80143a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80143a4:	4642      	mov	r2, r8
 80143a6:	464b      	mov	r3, r9
 80143a8:	1891      	adds	r1, r2, r2
 80143aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80143ac:	415b      	adcs	r3, r3
 80143ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80143b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80143b4:	4641      	mov	r1, r8
 80143b6:	1851      	adds	r1, r2, r1
 80143b8:	6339      	str	r1, [r7, #48]	; 0x30
 80143ba:	4649      	mov	r1, r9
 80143bc:	414b      	adcs	r3, r1
 80143be:	637b      	str	r3, [r7, #52]	; 0x34
 80143c0:	f04f 0200 	mov.w	r2, #0
 80143c4:	f04f 0300 	mov.w	r3, #0
 80143c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80143cc:	4659      	mov	r1, fp
 80143ce:	00cb      	lsls	r3, r1, #3
 80143d0:	4651      	mov	r1, sl
 80143d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80143d6:	4651      	mov	r1, sl
 80143d8:	00ca      	lsls	r2, r1, #3
 80143da:	4610      	mov	r0, r2
 80143dc:	4619      	mov	r1, r3
 80143de:	4603      	mov	r3, r0
 80143e0:	4642      	mov	r2, r8
 80143e2:	189b      	adds	r3, r3, r2
 80143e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80143e8:	464b      	mov	r3, r9
 80143ea:	460a      	mov	r2, r1
 80143ec:	eb42 0303 	adc.w	r3, r2, r3
 80143f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80143f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	2200      	movs	r2, #0
 80143fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014400:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8014404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8014408:	460b      	mov	r3, r1
 801440a:	18db      	adds	r3, r3, r3
 801440c:	62bb      	str	r3, [r7, #40]	; 0x28
 801440e:	4613      	mov	r3, r2
 8014410:	eb42 0303 	adc.w	r3, r2, r3
 8014414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801441a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801441e:	f7ec fc23 	bl	8000c68 <__aeabi_uldivmod>
 8014422:	4602      	mov	r2, r0
 8014424:	460b      	mov	r3, r1
 8014426:	4b0d      	ldr	r3, [pc, #52]	; (801445c <UART_SetConfig+0x2d4>)
 8014428:	fba3 1302 	umull	r1, r3, r3, r2
 801442c:	095b      	lsrs	r3, r3, #5
 801442e:	2164      	movs	r1, #100	; 0x64
 8014430:	fb01 f303 	mul.w	r3, r1, r3
 8014434:	1ad3      	subs	r3, r2, r3
 8014436:	00db      	lsls	r3, r3, #3
 8014438:	3332      	adds	r3, #50	; 0x32
 801443a:	4a08      	ldr	r2, [pc, #32]	; (801445c <UART_SetConfig+0x2d4>)
 801443c:	fba2 2303 	umull	r2, r3, r2, r3
 8014440:	095b      	lsrs	r3, r3, #5
 8014442:	f003 0207 	and.w	r2, r3, #7
 8014446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4422      	add	r2, r4
 801444e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8014450:	e106      	b.n	8014660 <UART_SetConfig+0x4d8>
 8014452:	bf00      	nop
 8014454:	40011000 	.word	0x40011000
 8014458:	40011400 	.word	0x40011400
 801445c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8014460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014464:	2200      	movs	r2, #0
 8014466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801446a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801446e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8014472:	4642      	mov	r2, r8
 8014474:	464b      	mov	r3, r9
 8014476:	1891      	adds	r1, r2, r2
 8014478:	6239      	str	r1, [r7, #32]
 801447a:	415b      	adcs	r3, r3
 801447c:	627b      	str	r3, [r7, #36]	; 0x24
 801447e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8014482:	4641      	mov	r1, r8
 8014484:	1854      	adds	r4, r2, r1
 8014486:	4649      	mov	r1, r9
 8014488:	eb43 0501 	adc.w	r5, r3, r1
 801448c:	f04f 0200 	mov.w	r2, #0
 8014490:	f04f 0300 	mov.w	r3, #0
 8014494:	00eb      	lsls	r3, r5, #3
 8014496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801449a:	00e2      	lsls	r2, r4, #3
 801449c:	4614      	mov	r4, r2
 801449e:	461d      	mov	r5, r3
 80144a0:	4643      	mov	r3, r8
 80144a2:	18e3      	adds	r3, r4, r3
 80144a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80144a8:	464b      	mov	r3, r9
 80144aa:	eb45 0303 	adc.w	r3, r5, r3
 80144ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80144b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	2200      	movs	r2, #0
 80144ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80144be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80144c2:	f04f 0200 	mov.w	r2, #0
 80144c6:	f04f 0300 	mov.w	r3, #0
 80144ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80144ce:	4629      	mov	r1, r5
 80144d0:	008b      	lsls	r3, r1, #2
 80144d2:	4621      	mov	r1, r4
 80144d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80144d8:	4621      	mov	r1, r4
 80144da:	008a      	lsls	r2, r1, #2
 80144dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80144e0:	f7ec fbc2 	bl	8000c68 <__aeabi_uldivmod>
 80144e4:	4602      	mov	r2, r0
 80144e6:	460b      	mov	r3, r1
 80144e8:	4b60      	ldr	r3, [pc, #384]	; (801466c <UART_SetConfig+0x4e4>)
 80144ea:	fba3 2302 	umull	r2, r3, r3, r2
 80144ee:	095b      	lsrs	r3, r3, #5
 80144f0:	011c      	lsls	r4, r3, #4
 80144f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80144f6:	2200      	movs	r2, #0
 80144f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80144fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8014500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8014504:	4642      	mov	r2, r8
 8014506:	464b      	mov	r3, r9
 8014508:	1891      	adds	r1, r2, r2
 801450a:	61b9      	str	r1, [r7, #24]
 801450c:	415b      	adcs	r3, r3
 801450e:	61fb      	str	r3, [r7, #28]
 8014510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8014514:	4641      	mov	r1, r8
 8014516:	1851      	adds	r1, r2, r1
 8014518:	6139      	str	r1, [r7, #16]
 801451a:	4649      	mov	r1, r9
 801451c:	414b      	adcs	r3, r1
 801451e:	617b      	str	r3, [r7, #20]
 8014520:	f04f 0200 	mov.w	r2, #0
 8014524:	f04f 0300 	mov.w	r3, #0
 8014528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801452c:	4659      	mov	r1, fp
 801452e:	00cb      	lsls	r3, r1, #3
 8014530:	4651      	mov	r1, sl
 8014532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014536:	4651      	mov	r1, sl
 8014538:	00ca      	lsls	r2, r1, #3
 801453a:	4610      	mov	r0, r2
 801453c:	4619      	mov	r1, r3
 801453e:	4603      	mov	r3, r0
 8014540:	4642      	mov	r2, r8
 8014542:	189b      	adds	r3, r3, r2
 8014544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014548:	464b      	mov	r3, r9
 801454a:	460a      	mov	r2, r1
 801454c:	eb42 0303 	adc.w	r3, r2, r3
 8014550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	2200      	movs	r2, #0
 801455c:	67bb      	str	r3, [r7, #120]	; 0x78
 801455e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014560:	f04f 0200 	mov.w	r2, #0
 8014564:	f04f 0300 	mov.w	r3, #0
 8014568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801456c:	4649      	mov	r1, r9
 801456e:	008b      	lsls	r3, r1, #2
 8014570:	4641      	mov	r1, r8
 8014572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014576:	4641      	mov	r1, r8
 8014578:	008a      	lsls	r2, r1, #2
 801457a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801457e:	f7ec fb73 	bl	8000c68 <__aeabi_uldivmod>
 8014582:	4602      	mov	r2, r0
 8014584:	460b      	mov	r3, r1
 8014586:	4611      	mov	r1, r2
 8014588:	4b38      	ldr	r3, [pc, #224]	; (801466c <UART_SetConfig+0x4e4>)
 801458a:	fba3 2301 	umull	r2, r3, r3, r1
 801458e:	095b      	lsrs	r3, r3, #5
 8014590:	2264      	movs	r2, #100	; 0x64
 8014592:	fb02 f303 	mul.w	r3, r2, r3
 8014596:	1acb      	subs	r3, r1, r3
 8014598:	011b      	lsls	r3, r3, #4
 801459a:	3332      	adds	r3, #50	; 0x32
 801459c:	4a33      	ldr	r2, [pc, #204]	; (801466c <UART_SetConfig+0x4e4>)
 801459e:	fba2 2303 	umull	r2, r3, r2, r3
 80145a2:	095b      	lsrs	r3, r3, #5
 80145a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145a8:	441c      	add	r4, r3
 80145aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80145ae:	2200      	movs	r2, #0
 80145b0:	673b      	str	r3, [r7, #112]	; 0x70
 80145b2:	677a      	str	r2, [r7, #116]	; 0x74
 80145b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80145b8:	4642      	mov	r2, r8
 80145ba:	464b      	mov	r3, r9
 80145bc:	1891      	adds	r1, r2, r2
 80145be:	60b9      	str	r1, [r7, #8]
 80145c0:	415b      	adcs	r3, r3
 80145c2:	60fb      	str	r3, [r7, #12]
 80145c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80145c8:	4641      	mov	r1, r8
 80145ca:	1851      	adds	r1, r2, r1
 80145cc:	6039      	str	r1, [r7, #0]
 80145ce:	4649      	mov	r1, r9
 80145d0:	414b      	adcs	r3, r1
 80145d2:	607b      	str	r3, [r7, #4]
 80145d4:	f04f 0200 	mov.w	r2, #0
 80145d8:	f04f 0300 	mov.w	r3, #0
 80145dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80145e0:	4659      	mov	r1, fp
 80145e2:	00cb      	lsls	r3, r1, #3
 80145e4:	4651      	mov	r1, sl
 80145e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80145ea:	4651      	mov	r1, sl
 80145ec:	00ca      	lsls	r2, r1, #3
 80145ee:	4610      	mov	r0, r2
 80145f0:	4619      	mov	r1, r3
 80145f2:	4603      	mov	r3, r0
 80145f4:	4642      	mov	r2, r8
 80145f6:	189b      	adds	r3, r3, r2
 80145f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80145fa:	464b      	mov	r3, r9
 80145fc:	460a      	mov	r2, r1
 80145fe:	eb42 0303 	adc.w	r3, r2, r3
 8014602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	663b      	str	r3, [r7, #96]	; 0x60
 801460e:	667a      	str	r2, [r7, #100]	; 0x64
 8014610:	f04f 0200 	mov.w	r2, #0
 8014614:	f04f 0300 	mov.w	r3, #0
 8014618:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801461c:	4649      	mov	r1, r9
 801461e:	008b      	lsls	r3, r1, #2
 8014620:	4641      	mov	r1, r8
 8014622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014626:	4641      	mov	r1, r8
 8014628:	008a      	lsls	r2, r1, #2
 801462a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801462e:	f7ec fb1b 	bl	8000c68 <__aeabi_uldivmod>
 8014632:	4602      	mov	r2, r0
 8014634:	460b      	mov	r3, r1
 8014636:	4b0d      	ldr	r3, [pc, #52]	; (801466c <UART_SetConfig+0x4e4>)
 8014638:	fba3 1302 	umull	r1, r3, r3, r2
 801463c:	095b      	lsrs	r3, r3, #5
 801463e:	2164      	movs	r1, #100	; 0x64
 8014640:	fb01 f303 	mul.w	r3, r1, r3
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	011b      	lsls	r3, r3, #4
 8014648:	3332      	adds	r3, #50	; 0x32
 801464a:	4a08      	ldr	r2, [pc, #32]	; (801466c <UART_SetConfig+0x4e4>)
 801464c:	fba2 2303 	umull	r2, r3, r2, r3
 8014650:	095b      	lsrs	r3, r3, #5
 8014652:	f003 020f 	and.w	r2, r3, #15
 8014656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	4422      	add	r2, r4
 801465e:	609a      	str	r2, [r3, #8]
}
 8014660:	bf00      	nop
 8014662:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8014666:	46bd      	mov	sp, r7
 8014668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801466c:	51eb851f 	.word	0x51eb851f

08014670 <LL_GPIO_SetPinMode>:
{
 8014670:	b480      	push	{r7}
 8014672:	b08b      	sub	sp, #44	; 0x2c
 8014674:	af00      	add	r7, sp, #0
 8014676:	60f8      	str	r0, [r7, #12]
 8014678:	60b9      	str	r1, [r7, #8]
 801467a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	681a      	ldr	r2, [r3, #0]
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	fa93 f3a3 	rbit	r3, r3
 801468a:	613b      	str	r3, [r7, #16]
  return result;
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d101      	bne.n	801469a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8014696:	2320      	movs	r3, #32
 8014698:	e003      	b.n	80146a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801469a:	69bb      	ldr	r3, [r7, #24]
 801469c:	fab3 f383 	clz	r3, r3
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	2103      	movs	r1, #3
 80146a6:	fa01 f303 	lsl.w	r3, r1, r3
 80146aa:	43db      	mvns	r3, r3
 80146ac:	401a      	ands	r2, r3
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	fa93 f3a3 	rbit	r3, r3
 80146b8:	61fb      	str	r3, [r7, #28]
  return result;
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80146be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d101      	bne.n	80146c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80146c4:	2320      	movs	r3, #32
 80146c6:	e003      	b.n	80146d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80146c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ca:	fab3 f383 	clz	r3, r3
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	005b      	lsls	r3, r3, #1
 80146d2:	6879      	ldr	r1, [r7, #4]
 80146d4:	fa01 f303 	lsl.w	r3, r1, r3
 80146d8:	431a      	orrs	r2, r3
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	601a      	str	r2, [r3, #0]
}
 80146de:	bf00      	nop
 80146e0:	372c      	adds	r7, #44	; 0x2c
 80146e2:	46bd      	mov	sp, r7
 80146e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e8:	4770      	bx	lr

080146ea <LL_GPIO_SetPinOutputType>:
{
 80146ea:	b480      	push	{r7}
 80146ec:	b085      	sub	sp, #20
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	60f8      	str	r0, [r7, #12]
 80146f2:	60b9      	str	r1, [r7, #8]
 80146f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	685a      	ldr	r2, [r3, #4]
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	43db      	mvns	r3, r3
 80146fe:	401a      	ands	r2, r3
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	6879      	ldr	r1, [r7, #4]
 8014704:	fb01 f303 	mul.w	r3, r1, r3
 8014708:	431a      	orrs	r2, r3
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	605a      	str	r2, [r3, #4]
}
 801470e:	bf00      	nop
 8014710:	3714      	adds	r7, #20
 8014712:	46bd      	mov	sp, r7
 8014714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014718:	4770      	bx	lr

0801471a <LL_GPIO_SetPinSpeed>:
{
 801471a:	b480      	push	{r7}
 801471c:	b08b      	sub	sp, #44	; 0x2c
 801471e:	af00      	add	r7, sp, #0
 8014720:	60f8      	str	r0, [r7, #12]
 8014722:	60b9      	str	r1, [r7, #8]
 8014724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	689a      	ldr	r2, [r3, #8]
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	fa93 f3a3 	rbit	r3, r3
 8014734:	613b      	str	r3, [r7, #16]
  return result;
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d101      	bne.n	8014744 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8014740:	2320      	movs	r3, #32
 8014742:	e003      	b.n	801474c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8014744:	69bb      	ldr	r3, [r7, #24]
 8014746:	fab3 f383 	clz	r3, r3
 801474a:	b2db      	uxtb	r3, r3
 801474c:	005b      	lsls	r3, r3, #1
 801474e:	2103      	movs	r1, #3
 8014750:	fa01 f303 	lsl.w	r3, r1, r3
 8014754:	43db      	mvns	r3, r3
 8014756:	401a      	ands	r2, r3
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801475c:	6a3b      	ldr	r3, [r7, #32]
 801475e:	fa93 f3a3 	rbit	r3, r3
 8014762:	61fb      	str	r3, [r7, #28]
  return result;
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8014768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476a:	2b00      	cmp	r3, #0
 801476c:	d101      	bne.n	8014772 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801476e:	2320      	movs	r3, #32
 8014770:	e003      	b.n	801477a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8014772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014774:	fab3 f383 	clz	r3, r3
 8014778:	b2db      	uxtb	r3, r3
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	6879      	ldr	r1, [r7, #4]
 801477e:	fa01 f303 	lsl.w	r3, r1, r3
 8014782:	431a      	orrs	r2, r3
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	609a      	str	r2, [r3, #8]
}
 8014788:	bf00      	nop
 801478a:	372c      	adds	r7, #44	; 0x2c
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr

08014794 <LL_GPIO_SetPinPull>:
{
 8014794:	b480      	push	{r7}
 8014796:	b08b      	sub	sp, #44	; 0x2c
 8014798:	af00      	add	r7, sp, #0
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	68da      	ldr	r2, [r3, #12]
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	fa93 f3a3 	rbit	r3, r3
 80147ae:	613b      	str	r3, [r7, #16]
  return result;
 80147b0:	693b      	ldr	r3, [r7, #16]
 80147b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80147b4:	69bb      	ldr	r3, [r7, #24]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d101      	bne.n	80147be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80147ba:	2320      	movs	r3, #32
 80147bc:	e003      	b.n	80147c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	fab3 f383 	clz	r3, r3
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	2103      	movs	r1, #3
 80147ca:	fa01 f303 	lsl.w	r3, r1, r3
 80147ce:	43db      	mvns	r3, r3
 80147d0:	401a      	ands	r2, r3
 80147d2:	68bb      	ldr	r3, [r7, #8]
 80147d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80147d6:	6a3b      	ldr	r3, [r7, #32]
 80147d8:	fa93 f3a3 	rbit	r3, r3
 80147dc:	61fb      	str	r3, [r7, #28]
  return result;
 80147de:	69fb      	ldr	r3, [r7, #28]
 80147e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80147e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d101      	bne.n	80147ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80147e8:	2320      	movs	r3, #32
 80147ea:	e003      	b.n	80147f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80147ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ee:	fab3 f383 	clz	r3, r3
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	005b      	lsls	r3, r3, #1
 80147f6:	6879      	ldr	r1, [r7, #4]
 80147f8:	fa01 f303 	lsl.w	r3, r1, r3
 80147fc:	431a      	orrs	r2, r3
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	60da      	str	r2, [r3, #12]
}
 8014802:	bf00      	nop
 8014804:	372c      	adds	r7, #44	; 0x2c
 8014806:	46bd      	mov	sp, r7
 8014808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480c:	4770      	bx	lr

0801480e <LL_GPIO_SetAFPin_0_7>:
{
 801480e:	b480      	push	{r7}
 8014810:	b08b      	sub	sp, #44	; 0x2c
 8014812:	af00      	add	r7, sp, #0
 8014814:	60f8      	str	r0, [r7, #12]
 8014816:	60b9      	str	r1, [r7, #8]
 8014818:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	6a1a      	ldr	r2, [r3, #32]
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	fa93 f3a3 	rbit	r3, r3
 8014828:	613b      	str	r3, [r7, #16]
  return result;
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801482e:	69bb      	ldr	r3, [r7, #24]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d101      	bne.n	8014838 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8014834:	2320      	movs	r3, #32
 8014836:	e003      	b.n	8014840 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	fab3 f383 	clz	r3, r3
 801483e:	b2db      	uxtb	r3, r3
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	210f      	movs	r1, #15
 8014844:	fa01 f303 	lsl.w	r3, r1, r3
 8014848:	43db      	mvns	r3, r3
 801484a:	401a      	ands	r2, r3
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014850:	6a3b      	ldr	r3, [r7, #32]
 8014852:	fa93 f3a3 	rbit	r3, r3
 8014856:	61fb      	str	r3, [r7, #28]
  return result;
 8014858:	69fb      	ldr	r3, [r7, #28]
 801485a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485e:	2b00      	cmp	r3, #0
 8014860:	d101      	bne.n	8014866 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8014862:	2320      	movs	r3, #32
 8014864:	e003      	b.n	801486e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8014866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014868:	fab3 f383 	clz	r3, r3
 801486c:	b2db      	uxtb	r3, r3
 801486e:	009b      	lsls	r3, r3, #2
 8014870:	6879      	ldr	r1, [r7, #4]
 8014872:	fa01 f303 	lsl.w	r3, r1, r3
 8014876:	431a      	orrs	r2, r3
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	621a      	str	r2, [r3, #32]
}
 801487c:	bf00      	nop
 801487e:	372c      	adds	r7, #44	; 0x2c
 8014880:	46bd      	mov	sp, r7
 8014882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014886:	4770      	bx	lr

08014888 <LL_GPIO_SetAFPin_8_15>:
{
 8014888:	b480      	push	{r7}
 801488a:	b08b      	sub	sp, #44	; 0x2c
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	60b9      	str	r1, [r7, #8]
 8014892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	0a1b      	lsrs	r3, r3, #8
 801489c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	fa93 f3a3 	rbit	r3, r3
 80148a4:	613b      	str	r3, [r7, #16]
  return result;
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80148aa:	69bb      	ldr	r3, [r7, #24]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d101      	bne.n	80148b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80148b0:	2320      	movs	r3, #32
 80148b2:	e003      	b.n	80148bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	fab3 f383 	clz	r3, r3
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	009b      	lsls	r3, r3, #2
 80148be:	210f      	movs	r1, #15
 80148c0:	fa01 f303 	lsl.w	r3, r1, r3
 80148c4:	43db      	mvns	r3, r3
 80148c6:	401a      	ands	r2, r3
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	0a1b      	lsrs	r3, r3, #8
 80148cc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80148ce:	6a3b      	ldr	r3, [r7, #32]
 80148d0:	fa93 f3a3 	rbit	r3, r3
 80148d4:	61fb      	str	r3, [r7, #28]
  return result;
 80148d6:	69fb      	ldr	r3, [r7, #28]
 80148d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80148da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d101      	bne.n	80148e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80148e0:	2320      	movs	r3, #32
 80148e2:	e003      	b.n	80148ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80148e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e6:	fab3 f383 	clz	r3, r3
 80148ea:	b2db      	uxtb	r3, r3
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	6879      	ldr	r1, [r7, #4]
 80148f0:	fa01 f303 	lsl.w	r3, r1, r3
 80148f4:	431a      	orrs	r2, r3
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80148fa:	bf00      	nop
 80148fc:	372c      	adds	r7, #44	; 0x2c
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr

08014906 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8014906:	b580      	push	{r7, lr}
 8014908:	b08a      	sub	sp, #40	; 0x28
 801490a:	af00      	add	r7, sp, #0
 801490c:	6078      	str	r0, [r7, #4]
 801490e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8014910:	2300      	movs	r3, #0
 8014912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8014914:	2300      	movs	r3, #0
 8014916:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801491e:	69bb      	ldr	r3, [r7, #24]
 8014920:	fa93 f3a3 	rbit	r3, r3
 8014924:	617b      	str	r3, [r7, #20]
  return result;
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d101      	bne.n	8014934 <LL_GPIO_Init+0x2e>
    return 32U;
 8014930:	2320      	movs	r3, #32
 8014932:	e003      	b.n	801493c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8014934:	69fb      	ldr	r3, [r7, #28]
 8014936:	fab3 f383 	clz	r3, r3
 801493a:	b2db      	uxtb	r3, r3
 801493c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801493e:	e057      	b.n	80149f0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	681a      	ldr	r2, [r3, #0]
 8014944:	2101      	movs	r1, #1
 8014946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014948:	fa01 f303 	lsl.w	r3, r1, r3
 801494c:	4013      	ands	r3, r2
 801494e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8014950:	6a3b      	ldr	r3, [r7, #32]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d049      	beq.n	80149ea <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	2b01      	cmp	r3, #1
 801495c:	d003      	beq.n	8014966 <LL_GPIO_Init+0x60>
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	2b02      	cmp	r3, #2
 8014964:	d10d      	bne.n	8014982 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	689b      	ldr	r3, [r3, #8]
 801496a:	461a      	mov	r2, r3
 801496c:	6a39      	ldr	r1, [r7, #32]
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7ff fed3 	bl	801471a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	68db      	ldr	r3, [r3, #12]
 8014978:	461a      	mov	r2, r3
 801497a:	6a39      	ldr	r1, [r7, #32]
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f7ff feb4 	bl	80146ea <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	691b      	ldr	r3, [r3, #16]
 8014986:	461a      	mov	r2, r3
 8014988:	6a39      	ldr	r1, [r7, #32]
 801498a:	6878      	ldr	r0, [r7, #4]
 801498c:	f7ff ff02 	bl	8014794 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	2b02      	cmp	r3, #2
 8014996:	d121      	bne.n	80149dc <LL_GPIO_Init+0xd6>
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	fa93 f3a3 	rbit	r3, r3
 80149a2:	60bb      	str	r3, [r7, #8]
  return result;
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d101      	bne.n	80149b2 <LL_GPIO_Init+0xac>
    return 32U;
 80149ae:	2320      	movs	r3, #32
 80149b0:	e003      	b.n	80149ba <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80149b2:	693b      	ldr	r3, [r7, #16]
 80149b4:	fab3 f383 	clz	r3, r3
 80149b8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80149ba:	2b07      	cmp	r3, #7
 80149bc:	d807      	bhi.n	80149ce <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	695b      	ldr	r3, [r3, #20]
 80149c2:	461a      	mov	r2, r3
 80149c4:	6a39      	ldr	r1, [r7, #32]
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f7ff ff21 	bl	801480e <LL_GPIO_SetAFPin_0_7>
 80149cc:	e006      	b.n	80149dc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	695b      	ldr	r3, [r3, #20]
 80149d2:	461a      	mov	r2, r3
 80149d4:	6a39      	ldr	r1, [r7, #32]
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	f7ff ff56 	bl	8014888 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	685b      	ldr	r3, [r3, #4]
 80149e0:	461a      	mov	r2, r3
 80149e2:	6a39      	ldr	r1, [r7, #32]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f7ff fe43 	bl	8014670 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80149ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ec:	3301      	adds	r3, #1
 80149ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f6:	fa22 f303 	lsr.w	r3, r2, r3
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d1a0      	bne.n	8014940 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80149fe:	2300      	movs	r3, #0
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3728      	adds	r7, #40	; 0x28
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}

08014a08 <LL_SPI_IsEnabled>:
{
 8014a08:	b480      	push	{r7}
 8014a0a:	b083      	sub	sp, #12
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a18:	2b40      	cmp	r3, #64	; 0x40
 8014a1a:	d101      	bne.n	8014a20 <LL_SPI_IsEnabled+0x18>
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	e000      	b.n	8014a22 <LL_SPI_IsEnabled+0x1a>
 8014a20:	2300      	movs	r3, #0
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	370c      	adds	r7, #12
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr

08014a2e <LL_SPI_SetCRCPolynomial>:
{
 8014a2e:	b480      	push	{r7}
 8014a30:	b083      	sub	sp, #12
 8014a32:	af00      	add	r7, sp, #0
 8014a34:	6078      	str	r0, [r7, #4]
 8014a36:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	611a      	str	r2, [r3, #16]
}
 8014a42:	bf00      	nop
 8014a44:	370c      	adds	r7, #12
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr

08014a4e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8014a4e:	b580      	push	{r7, lr}
 8014a50:	b084      	sub	sp, #16
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
 8014a56:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f7ff ffd3 	bl	8014a08 <LL_SPI_IsEnabled>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d139      	bne.n	8014adc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014a70:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8014a74:	683a      	ldr	r2, [r7, #0]
 8014a76:	6811      	ldr	r1, [r2, #0]
 8014a78:	683a      	ldr	r2, [r7, #0]
 8014a7a:	6852      	ldr	r2, [r2, #4]
 8014a7c:	4311      	orrs	r1, r2
 8014a7e:	683a      	ldr	r2, [r7, #0]
 8014a80:	6892      	ldr	r2, [r2, #8]
 8014a82:	4311      	orrs	r1, r2
 8014a84:	683a      	ldr	r2, [r7, #0]
 8014a86:	68d2      	ldr	r2, [r2, #12]
 8014a88:	4311      	orrs	r1, r2
 8014a8a:	683a      	ldr	r2, [r7, #0]
 8014a8c:	6912      	ldr	r2, [r2, #16]
 8014a8e:	4311      	orrs	r1, r2
 8014a90:	683a      	ldr	r2, [r7, #0]
 8014a92:	6952      	ldr	r2, [r2, #20]
 8014a94:	4311      	orrs	r1, r2
 8014a96:	683a      	ldr	r2, [r7, #0]
 8014a98:	6992      	ldr	r2, [r2, #24]
 8014a9a:	4311      	orrs	r1, r2
 8014a9c:	683a      	ldr	r2, [r7, #0]
 8014a9e:	69d2      	ldr	r2, [r2, #28]
 8014aa0:	4311      	orrs	r1, r2
 8014aa2:	683a      	ldr	r2, [r7, #0]
 8014aa4:	6a12      	ldr	r2, [r2, #32]
 8014aa6:	430a      	orrs	r2, r1
 8014aa8:	431a      	orrs	r2, r3
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	f023 0204 	bic.w	r2, r3, #4
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	695b      	ldr	r3, [r3, #20]
 8014aba:	0c1b      	lsrs	r3, r3, #16
 8014abc:	431a      	orrs	r2, r3
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	6a1b      	ldr	r3, [r3, #32]
 8014ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014aca:	d105      	bne.n	8014ad8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ad0:	4619      	mov	r1, r3
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f7ff ffab 	bl	8014a2e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	69db      	ldr	r3, [r3, #28]
 8014ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	61da      	str	r2, [r3, #28]
  return status;
 8014ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3710      	adds	r7, #16
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}

08014af2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014af2:	b084      	sub	sp, #16
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b084      	sub	sp, #16
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	f107 001c 	add.w	r0, r7, #28
 8014b00:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014b04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d123      	bne.n	8014b54 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8014b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014b34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d105      	bne.n	8014b48 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f001 fae3 	bl	8016114 <USB_CoreReset>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	73fb      	strb	r3, [r7, #15]
 8014b52:	e01b      	b.n	8014b8c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	68db      	ldr	r3, [r3, #12]
 8014b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	f001 fad7 	bl	8016114 <USB_CoreReset>
 8014b66:	4603      	mov	r3, r0
 8014b68:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014b6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d106      	bne.n	8014b80 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8014b7e:	e005      	b.n	8014b8c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8014b8c:	7fbb      	ldrb	r3, [r7, #30]
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d10b      	bne.n	8014baa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	689b      	ldr	r3, [r3, #8]
 8014b96:	f043 0206 	orr.w	r2, r3, #6
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	689b      	ldr	r3, [r3, #8]
 8014ba2:	f043 0220 	orr.w	r2, r3, #32
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014bb6:	b004      	add	sp, #16
 8014bb8:	4770      	bx	lr
	...

08014bbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	b087      	sub	sp, #28
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	60f8      	str	r0, [r7, #12]
 8014bc4:	60b9      	str	r1, [r7, #8]
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014bca:	79fb      	ldrb	r3, [r7, #7]
 8014bcc:	2b02      	cmp	r3, #2
 8014bce:	d165      	bne.n	8014c9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	4a41      	ldr	r2, [pc, #260]	; (8014cd8 <USB_SetTurnaroundTime+0x11c>)
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	d906      	bls.n	8014be6 <USB_SetTurnaroundTime+0x2a>
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	4a40      	ldr	r2, [pc, #256]	; (8014cdc <USB_SetTurnaroundTime+0x120>)
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	d202      	bcs.n	8014be6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014be0:	230f      	movs	r3, #15
 8014be2:	617b      	str	r3, [r7, #20]
 8014be4:	e062      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	4a3c      	ldr	r2, [pc, #240]	; (8014cdc <USB_SetTurnaroundTime+0x120>)
 8014bea:	4293      	cmp	r3, r2
 8014bec:	d306      	bcc.n	8014bfc <USB_SetTurnaroundTime+0x40>
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	4a3b      	ldr	r2, [pc, #236]	; (8014ce0 <USB_SetTurnaroundTime+0x124>)
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	d202      	bcs.n	8014bfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014bf6:	230e      	movs	r3, #14
 8014bf8:	617b      	str	r3, [r7, #20]
 8014bfa:	e057      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	4a38      	ldr	r2, [pc, #224]	; (8014ce0 <USB_SetTurnaroundTime+0x124>)
 8014c00:	4293      	cmp	r3, r2
 8014c02:	d306      	bcc.n	8014c12 <USB_SetTurnaroundTime+0x56>
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	4a37      	ldr	r2, [pc, #220]	; (8014ce4 <USB_SetTurnaroundTime+0x128>)
 8014c08:	4293      	cmp	r3, r2
 8014c0a:	d202      	bcs.n	8014c12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014c0c:	230d      	movs	r3, #13
 8014c0e:	617b      	str	r3, [r7, #20]
 8014c10:	e04c      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	4a33      	ldr	r2, [pc, #204]	; (8014ce4 <USB_SetTurnaroundTime+0x128>)
 8014c16:	4293      	cmp	r3, r2
 8014c18:	d306      	bcc.n	8014c28 <USB_SetTurnaroundTime+0x6c>
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	4a32      	ldr	r2, [pc, #200]	; (8014ce8 <USB_SetTurnaroundTime+0x12c>)
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d802      	bhi.n	8014c28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014c22:	230c      	movs	r3, #12
 8014c24:	617b      	str	r3, [r7, #20]
 8014c26:	e041      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	4a2f      	ldr	r2, [pc, #188]	; (8014ce8 <USB_SetTurnaroundTime+0x12c>)
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	d906      	bls.n	8014c3e <USB_SetTurnaroundTime+0x82>
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	4a2e      	ldr	r2, [pc, #184]	; (8014cec <USB_SetTurnaroundTime+0x130>)
 8014c34:	4293      	cmp	r3, r2
 8014c36:	d802      	bhi.n	8014c3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014c38:	230b      	movs	r3, #11
 8014c3a:	617b      	str	r3, [r7, #20]
 8014c3c:	e036      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	4a2a      	ldr	r2, [pc, #168]	; (8014cec <USB_SetTurnaroundTime+0x130>)
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d906      	bls.n	8014c54 <USB_SetTurnaroundTime+0x98>
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	4a29      	ldr	r2, [pc, #164]	; (8014cf0 <USB_SetTurnaroundTime+0x134>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d802      	bhi.n	8014c54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014c4e:	230a      	movs	r3, #10
 8014c50:	617b      	str	r3, [r7, #20]
 8014c52:	e02b      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	4a26      	ldr	r2, [pc, #152]	; (8014cf0 <USB_SetTurnaroundTime+0x134>)
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d906      	bls.n	8014c6a <USB_SetTurnaroundTime+0xae>
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	4a25      	ldr	r2, [pc, #148]	; (8014cf4 <USB_SetTurnaroundTime+0x138>)
 8014c60:	4293      	cmp	r3, r2
 8014c62:	d202      	bcs.n	8014c6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014c64:	2309      	movs	r3, #9
 8014c66:	617b      	str	r3, [r7, #20]
 8014c68:	e020      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	4a21      	ldr	r2, [pc, #132]	; (8014cf4 <USB_SetTurnaroundTime+0x138>)
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	d306      	bcc.n	8014c80 <USB_SetTurnaroundTime+0xc4>
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	4a20      	ldr	r2, [pc, #128]	; (8014cf8 <USB_SetTurnaroundTime+0x13c>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d802      	bhi.n	8014c80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014c7a:	2308      	movs	r3, #8
 8014c7c:	617b      	str	r3, [r7, #20]
 8014c7e:	e015      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	4a1d      	ldr	r2, [pc, #116]	; (8014cf8 <USB_SetTurnaroundTime+0x13c>)
 8014c84:	4293      	cmp	r3, r2
 8014c86:	d906      	bls.n	8014c96 <USB_SetTurnaroundTime+0xda>
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	4a1c      	ldr	r2, [pc, #112]	; (8014cfc <USB_SetTurnaroundTime+0x140>)
 8014c8c:	4293      	cmp	r3, r2
 8014c8e:	d202      	bcs.n	8014c96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014c90:	2307      	movs	r3, #7
 8014c92:	617b      	str	r3, [r7, #20]
 8014c94:	e00a      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014c96:	2306      	movs	r3, #6
 8014c98:	617b      	str	r3, [r7, #20]
 8014c9a:	e007      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8014c9c:	79fb      	ldrb	r3, [r7, #7]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d102      	bne.n	8014ca8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014ca2:	2309      	movs	r3, #9
 8014ca4:	617b      	str	r3, [r7, #20]
 8014ca6:	e001      	b.n	8014cac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014ca8:	2309      	movs	r3, #9
 8014caa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	68db      	ldr	r3, [r3, #12]
 8014cb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	68da      	ldr	r2, [r3, #12]
 8014cbc:	697b      	ldr	r3, [r7, #20]
 8014cbe:	029b      	lsls	r3, r3, #10
 8014cc0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014cc4:	431a      	orrs	r2, r3
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014cca:	2300      	movs	r3, #0
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	371c      	adds	r7, #28
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr
 8014cd8:	00d8acbf 	.word	0x00d8acbf
 8014cdc:	00e4e1c0 	.word	0x00e4e1c0
 8014ce0:	00f42400 	.word	0x00f42400
 8014ce4:	01067380 	.word	0x01067380
 8014ce8:	011a499f 	.word	0x011a499f
 8014cec:	01312cff 	.word	0x01312cff
 8014cf0:	014ca43f 	.word	0x014ca43f
 8014cf4:	016e3600 	.word	0x016e3600
 8014cf8:	01a6ab1f 	.word	0x01a6ab1f
 8014cfc:	01e84800 	.word	0x01e84800

08014d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	f043 0201 	orr.w	r2, r3, #1
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014d14:	2300      	movs	r3, #0
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	370c      	adds	r7, #12
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d20:	4770      	bx	lr

08014d22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d22:	b480      	push	{r7}
 8014d24:	b083      	sub	sp, #12
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	689b      	ldr	r3, [r3, #8]
 8014d2e:	f023 0201 	bic.w	r2, r3, #1
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014d36:	2300      	movs	r3, #0
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	370c      	adds	r7, #12
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d42:	4770      	bx	lr

08014d44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014d50:	2300      	movs	r3, #0
 8014d52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	68db      	ldr	r3, [r3, #12]
 8014d58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014d60:	78fb      	ldrb	r3, [r7, #3]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d115      	bne.n	8014d92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	68db      	ldr	r3, [r3, #12]
 8014d6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014d72:	200a      	movs	r0, #10
 8014d74:	f7fa f94a 	bl	800f00c <HAL_Delay>
      ms += 10U;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	330a      	adds	r3, #10
 8014d7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f001 f939 	bl	8015ff6 <USB_GetMode>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b01      	cmp	r3, #1
 8014d88:	d01e      	beq.n	8014dc8 <USB_SetCurrentMode+0x84>
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2bc7      	cmp	r3, #199	; 0xc7
 8014d8e:	d9f0      	bls.n	8014d72 <USB_SetCurrentMode+0x2e>
 8014d90:	e01a      	b.n	8014dc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014d92:	78fb      	ldrb	r3, [r7, #3]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d115      	bne.n	8014dc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014da4:	200a      	movs	r0, #10
 8014da6:	f7fa f931 	bl	800f00c <HAL_Delay>
      ms += 10U;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	330a      	adds	r3, #10
 8014dae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f001 f920 	bl	8015ff6 <USB_GetMode>
 8014db6:	4603      	mov	r3, r0
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d005      	beq.n	8014dc8 <USB_SetCurrentMode+0x84>
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2bc7      	cmp	r3, #199	; 0xc7
 8014dc0:	d9f0      	bls.n	8014da4 <USB_SetCurrentMode+0x60>
 8014dc2:	e001      	b.n	8014dc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	e005      	b.n	8014dd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	2bc8      	cmp	r3, #200	; 0xc8
 8014dcc:	d101      	bne.n	8014dd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014dce:	2301      	movs	r3, #1
 8014dd0:	e000      	b.n	8014dd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014dd2:	2300      	movs	r3, #0
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3710      	adds	r7, #16
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014ddc:	b084      	sub	sp, #16
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b086      	sub	sp, #24
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
 8014de6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014dee:	2300      	movs	r3, #0
 8014df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014df6:	2300      	movs	r3, #0
 8014df8:	613b      	str	r3, [r7, #16]
 8014dfa:	e009      	b.n	8014e10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014dfc:	687a      	ldr	r2, [r7, #4]
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	3340      	adds	r3, #64	; 0x40
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	4413      	add	r3, r2
 8014e06:	2200      	movs	r2, #0
 8014e08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	613b      	str	r3, [r7, #16]
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	2b0e      	cmp	r3, #14
 8014e14:	d9f2      	bls.n	8014dfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014e16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d11c      	bne.n	8014e58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	68fa      	ldr	r2, [r7, #12]
 8014e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e2c:	f043 0302 	orr.w	r3, r3, #2
 8014e30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e42:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e4e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	639a      	str	r2, [r3, #56]	; 0x38
 8014e56:	e00b      	b.n	8014e70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e68:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e76:	461a      	mov	r2, r3
 8014e78:	2300      	movs	r3, #0
 8014e7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014e7c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d10d      	bne.n	8014ea0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d104      	bne.n	8014e96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f000 f968 	bl	8015164 <USB_SetDevSpeed>
 8014e94:	e008      	b.n	8014ea8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8014e96:	2101      	movs	r1, #1
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f000 f963 	bl	8015164 <USB_SetDevSpeed>
 8014e9e:	e003      	b.n	8014ea8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014ea0:	2103      	movs	r1, #3
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f000 f95e 	bl	8015164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014ea8:	2110      	movs	r1, #16
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 f8fa 	bl	80150a4 <USB_FlushTxFifo>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d001      	beq.n	8014eba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f000 f924 	bl	8015108 <USB_FlushRxFifo>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d001      	beq.n	8014eca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014edc:	461a      	mov	r2, r3
 8014ede:	2300      	movs	r3, #0
 8014ee0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ee8:	461a      	mov	r2, r3
 8014eea:	2300      	movs	r3, #0
 8014eec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014eee:	2300      	movs	r3, #0
 8014ef0:	613b      	str	r3, [r7, #16]
 8014ef2:	e043      	b.n	8014f7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	015a      	lsls	r2, r3, #5
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	4413      	add	r3, r2
 8014efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f0a:	d118      	bne.n	8014f3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d10a      	bne.n	8014f28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	015a      	lsls	r2, r3, #5
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	4413      	add	r3, r2
 8014f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f1e:	461a      	mov	r2, r3
 8014f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014f24:	6013      	str	r3, [r2, #0]
 8014f26:	e013      	b.n	8014f50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	015a      	lsls	r2, r3, #5
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	4413      	add	r3, r2
 8014f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f34:	461a      	mov	r2, r3
 8014f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014f3a:	6013      	str	r3, [r2, #0]
 8014f3c:	e008      	b.n	8014f50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	015a      	lsls	r2, r3, #5
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	4413      	add	r3, r2
 8014f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	015a      	lsls	r2, r3, #5
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	4413      	add	r3, r2
 8014f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f5c:	461a      	mov	r2, r3
 8014f5e:	2300      	movs	r3, #0
 8014f60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	015a      	lsls	r2, r3, #5
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	4413      	add	r3, r2
 8014f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f6e:	461a      	mov	r2, r3
 8014f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014f76:	693b      	ldr	r3, [r7, #16]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	613b      	str	r3, [r7, #16]
 8014f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014f80:	461a      	mov	r2, r3
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	4293      	cmp	r3, r2
 8014f86:	d3b5      	bcc.n	8014ef4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014f88:	2300      	movs	r3, #0
 8014f8a:	613b      	str	r3, [r7, #16]
 8014f8c:	e043      	b.n	8015016 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	015a      	lsls	r2, r3, #5
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	4413      	add	r3, r2
 8014f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014fa4:	d118      	bne.n	8014fd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d10a      	bne.n	8014fc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	015a      	lsls	r2, r3, #5
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	4413      	add	r3, r2
 8014fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fb8:	461a      	mov	r2, r3
 8014fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014fbe:	6013      	str	r3, [r2, #0]
 8014fc0:	e013      	b.n	8014fea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	015a      	lsls	r2, r3, #5
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	4413      	add	r3, r2
 8014fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fce:	461a      	mov	r2, r3
 8014fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014fd4:	6013      	str	r3, [r2, #0]
 8014fd6:	e008      	b.n	8014fea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	015a      	lsls	r2, r3, #5
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	4413      	add	r3, r2
 8014fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fe4:	461a      	mov	r2, r3
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	015a      	lsls	r2, r3, #5
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ff6:	461a      	mov	r2, r3
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	015a      	lsls	r2, r3, #5
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	4413      	add	r3, r2
 8015004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015008:	461a      	mov	r2, r3
 801500a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801500e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	3301      	adds	r3, #1
 8015014:	613b      	str	r3, [r7, #16]
 8015016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801501a:	461a      	mov	r2, r3
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	4293      	cmp	r3, r2
 8015020:	d3b5      	bcc.n	8014f8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015028:	691b      	ldr	r3, [r3, #16]
 801502a:	68fa      	ldr	r2, [r7, #12]
 801502c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015034:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	2200      	movs	r2, #0
 801503a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015042:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8015044:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015048:	2b00      	cmp	r3, #0
 801504a:	d105      	bne.n	8015058 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	699b      	ldr	r3, [r3, #24]
 8015050:	f043 0210 	orr.w	r2, r3, #16
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	699a      	ldr	r2, [r3, #24]
 801505c:	4b10      	ldr	r3, [pc, #64]	; (80150a0 <USB_DevInit+0x2c4>)
 801505e:	4313      	orrs	r3, r2
 8015060:	687a      	ldr	r2, [r7, #4]
 8015062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015064:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8015068:	2b00      	cmp	r3, #0
 801506a:	d005      	beq.n	8015078 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	699b      	ldr	r3, [r3, #24]
 8015070:	f043 0208 	orr.w	r2, r3, #8
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015078:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801507c:	2b01      	cmp	r3, #1
 801507e:	d107      	bne.n	8015090 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	699b      	ldr	r3, [r3, #24]
 8015084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015088:	f043 0304 	orr.w	r3, r3, #4
 801508c:	687a      	ldr	r2, [r7, #4]
 801508e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8015090:	7dfb      	ldrb	r3, [r7, #23]
}
 8015092:	4618      	mov	r0, r3
 8015094:	3718      	adds	r7, #24
 8015096:	46bd      	mov	sp, r7
 8015098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801509c:	b004      	add	sp, #16
 801509e:	4770      	bx	lr
 80150a0:	803c3800 	.word	0x803c3800

080150a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80150a4:	b480      	push	{r7}
 80150a6:	b085      	sub	sp, #20
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80150ae:	2300      	movs	r3, #0
 80150b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	3301      	adds	r3, #1
 80150b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80150be:	d901      	bls.n	80150c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80150c0:	2303      	movs	r3, #3
 80150c2:	e01b      	b.n	80150fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	691b      	ldr	r3, [r3, #16]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	daf2      	bge.n	80150b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80150cc:	2300      	movs	r3, #0
 80150ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	019b      	lsls	r3, r3, #6
 80150d4:	f043 0220 	orr.w	r2, r3, #32
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	3301      	adds	r3, #1
 80150e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80150e8:	d901      	bls.n	80150ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80150ea:	2303      	movs	r3, #3
 80150ec:	e006      	b.n	80150fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	691b      	ldr	r3, [r3, #16]
 80150f2:	f003 0320 	and.w	r3, r3, #32
 80150f6:	2b20      	cmp	r3, #32
 80150f8:	d0f0      	beq.n	80150dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80150fa:	2300      	movs	r3, #0
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3714      	adds	r7, #20
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr

08015108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8015108:	b480      	push	{r7}
 801510a:	b085      	sub	sp, #20
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015110:	2300      	movs	r3, #0
 8015112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	3301      	adds	r3, #1
 8015118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8015120:	d901      	bls.n	8015126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015122:	2303      	movs	r3, #3
 8015124:	e018      	b.n	8015158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	691b      	ldr	r3, [r3, #16]
 801512a:	2b00      	cmp	r3, #0
 801512c:	daf2      	bge.n	8015114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801512e:	2300      	movs	r3, #0
 8015130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	2210      	movs	r2, #16
 8015136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	3301      	adds	r3, #1
 801513c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8015144:	d901      	bls.n	801514a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8015146:	2303      	movs	r3, #3
 8015148:	e006      	b.n	8015158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	691b      	ldr	r3, [r3, #16]
 801514e:	f003 0310 	and.w	r3, r3, #16
 8015152:	2b10      	cmp	r3, #16
 8015154:	d0f0      	beq.n	8015138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015156:	2300      	movs	r3, #0
}
 8015158:	4618      	mov	r0, r3
 801515a:	3714      	adds	r7, #20
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr

08015164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015164:	b480      	push	{r7}
 8015166:	b085      	sub	sp, #20
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	460b      	mov	r3, r1
 801516e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	78fb      	ldrb	r3, [r7, #3]
 801517e:	68f9      	ldr	r1, [r7, #12]
 8015180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015184:	4313      	orrs	r3, r2
 8015186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8015188:	2300      	movs	r3, #0
}
 801518a:	4618      	mov	r0, r3
 801518c:	3714      	adds	r7, #20
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr

08015196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8015196:	b480      	push	{r7}
 8015198:	b087      	sub	sp, #28
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151a8:	689b      	ldr	r3, [r3, #8]
 80151aa:	f003 0306 	and.w	r3, r3, #6
 80151ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d102      	bne.n	80151bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80151b6:	2300      	movs	r3, #0
 80151b8:	75fb      	strb	r3, [r7, #23]
 80151ba:	e00a      	b.n	80151d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	2b02      	cmp	r3, #2
 80151c0:	d002      	beq.n	80151c8 <USB_GetDevSpeed+0x32>
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	2b06      	cmp	r3, #6
 80151c6:	d102      	bne.n	80151ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80151c8:	2302      	movs	r3, #2
 80151ca:	75fb      	strb	r3, [r7, #23]
 80151cc:	e001      	b.n	80151d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80151ce:	230f      	movs	r3, #15
 80151d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80151d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	371c      	adds	r7, #28
 80151d8:	46bd      	mov	sp, r7
 80151da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151de:	4770      	bx	lr

080151e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80151e0:	b480      	push	{r7}
 80151e2:	b085      	sub	sp, #20
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	785b      	ldrb	r3, [r3, #1]
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d13a      	bne.n	8015272 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015202:	69da      	ldr	r2, [r3, #28]
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	f003 030f 	and.w	r3, r3, #15
 801520c:	2101      	movs	r1, #1
 801520e:	fa01 f303 	lsl.w	r3, r1, r3
 8015212:	b29b      	uxth	r3, r3
 8015214:	68f9      	ldr	r1, [r7, #12]
 8015216:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801521a:	4313      	orrs	r3, r2
 801521c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	015a      	lsls	r2, r3, #5
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	4413      	add	r3, r2
 8015226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015230:	2b00      	cmp	r3, #0
 8015232:	d155      	bne.n	80152e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	015a      	lsls	r2, r3, #5
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	4413      	add	r3, r2
 801523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015240:	681a      	ldr	r2, [r3, #0]
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	689b      	ldr	r3, [r3, #8]
 8015246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	791b      	ldrb	r3, [r3, #4]
 801524e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	059b      	lsls	r3, r3, #22
 8015256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015258:	4313      	orrs	r3, r2
 801525a:	68ba      	ldr	r2, [r7, #8]
 801525c:	0151      	lsls	r1, r2, #5
 801525e:	68fa      	ldr	r2, [r7, #12]
 8015260:	440a      	add	r2, r1
 8015262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801526a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801526e:	6013      	str	r3, [r2, #0]
 8015270:	e036      	b.n	80152e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015278:	69da      	ldr	r2, [r3, #28]
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	f003 030f 	and.w	r3, r3, #15
 8015282:	2101      	movs	r1, #1
 8015284:	fa01 f303 	lsl.w	r3, r1, r3
 8015288:	041b      	lsls	r3, r3, #16
 801528a:	68f9      	ldr	r1, [r7, #12]
 801528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015290:	4313      	orrs	r3, r2
 8015292:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	015a      	lsls	r2, r3, #5
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	4413      	add	r3, r2
 801529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152a0:	681b      	ldr	r3, [r3, #0]
 80152a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d11a      	bne.n	80152e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	015a      	lsls	r2, r3, #5
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	4413      	add	r3, r2
 80152b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	689b      	ldr	r3, [r3, #8]
 80152bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	791b      	ldrb	r3, [r3, #4]
 80152c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80152c6:	430b      	orrs	r3, r1
 80152c8:	4313      	orrs	r3, r2
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	0151      	lsls	r1, r2, #5
 80152ce:	68fa      	ldr	r2, [r7, #12]
 80152d0:	440a      	add	r2, r1
 80152d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80152d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80152da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80152de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80152e0:	2300      	movs	r3, #0
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3714      	adds	r7, #20
 80152e6:	46bd      	mov	sp, r7
 80152e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ec:	4770      	bx	lr
	...

080152f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80152f0:	b480      	push	{r7}
 80152f2:	b085      	sub	sp, #20
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	785b      	ldrb	r3, [r3, #1]
 8015308:	2b01      	cmp	r3, #1
 801530a:	d161      	bne.n	80153d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	015a      	lsls	r2, r3, #5
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	4413      	add	r3, r2
 8015314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801531e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015322:	d11f      	bne.n	8015364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	015a      	lsls	r2, r3, #5
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	4413      	add	r3, r2
 801532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	68ba      	ldr	r2, [r7, #8]
 8015334:	0151      	lsls	r1, r2, #5
 8015336:	68fa      	ldr	r2, [r7, #12]
 8015338:	440a      	add	r2, r1
 801533a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801533e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	015a      	lsls	r2, r3, #5
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	4413      	add	r3, r2
 801534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	68ba      	ldr	r2, [r7, #8]
 8015354:	0151      	lsls	r1, r2, #5
 8015356:	68fa      	ldr	r2, [r7, #12]
 8015358:	440a      	add	r2, r1
 801535a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801535e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801536a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	f003 030f 	and.w	r3, r3, #15
 8015374:	2101      	movs	r1, #1
 8015376:	fa01 f303 	lsl.w	r3, r1, r3
 801537a:	b29b      	uxth	r3, r3
 801537c:	43db      	mvns	r3, r3
 801537e:	68f9      	ldr	r1, [r7, #12]
 8015380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015384:	4013      	ands	r3, r2
 8015386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801538e:	69da      	ldr	r2, [r3, #28]
 8015390:	683b      	ldr	r3, [r7, #0]
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	f003 030f 	and.w	r3, r3, #15
 8015398:	2101      	movs	r1, #1
 801539a:	fa01 f303 	lsl.w	r3, r1, r3
 801539e:	b29b      	uxth	r3, r3
 80153a0:	43db      	mvns	r3, r3
 80153a2:	68f9      	ldr	r1, [r7, #12]
 80153a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80153a8:	4013      	ands	r3, r2
 80153aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	015a      	lsls	r2, r3, #5
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	4413      	add	r3, r2
 80153b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153b8:	681a      	ldr	r2, [r3, #0]
 80153ba:	68bb      	ldr	r3, [r7, #8]
 80153bc:	0159      	lsls	r1, r3, #5
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	440b      	add	r3, r1
 80153c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80153c6:	4619      	mov	r1, r3
 80153c8:	4b35      	ldr	r3, [pc, #212]	; (80154a0 <USB_DeactivateEndpoint+0x1b0>)
 80153ca:	4013      	ands	r3, r2
 80153cc:	600b      	str	r3, [r1, #0]
 80153ce:	e060      	b.n	8015492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	015a      	lsls	r2, r3, #5
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	4413      	add	r3, r2
 80153d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80153e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80153e6:	d11f      	bne.n	8015428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	015a      	lsls	r2, r3, #5
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	4413      	add	r3, r2
 80153f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	68ba      	ldr	r2, [r7, #8]
 80153f8:	0151      	lsls	r1, r2, #5
 80153fa:	68fa      	ldr	r2, [r7, #12]
 80153fc:	440a      	add	r2, r1
 80153fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	015a      	lsls	r2, r3, #5
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	4413      	add	r3, r2
 8015410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	68ba      	ldr	r2, [r7, #8]
 8015418:	0151      	lsls	r1, r2, #5
 801541a:	68fa      	ldr	r2, [r7, #12]
 801541c:	440a      	add	r2, r1
 801541e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801542e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	f003 030f 	and.w	r3, r3, #15
 8015438:	2101      	movs	r1, #1
 801543a:	fa01 f303 	lsl.w	r3, r1, r3
 801543e:	041b      	lsls	r3, r3, #16
 8015440:	43db      	mvns	r3, r3
 8015442:	68f9      	ldr	r1, [r7, #12]
 8015444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015448:	4013      	ands	r3, r2
 801544a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015452:	69da      	ldr	r2, [r3, #28]
 8015454:	683b      	ldr	r3, [r7, #0]
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	f003 030f 	and.w	r3, r3, #15
 801545c:	2101      	movs	r1, #1
 801545e:	fa01 f303 	lsl.w	r3, r1, r3
 8015462:	041b      	lsls	r3, r3, #16
 8015464:	43db      	mvns	r3, r3
 8015466:	68f9      	ldr	r1, [r7, #12]
 8015468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801546c:	4013      	ands	r3, r2
 801546e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	015a      	lsls	r2, r3, #5
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	4413      	add	r3, r2
 8015478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	0159      	lsls	r1, r3, #5
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	440b      	add	r3, r1
 8015486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801548a:	4619      	mov	r1, r3
 801548c:	4b05      	ldr	r3, [pc, #20]	; (80154a4 <USB_DeactivateEndpoint+0x1b4>)
 801548e:	4013      	ands	r3, r2
 8015490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015492:	2300      	movs	r3, #0
}
 8015494:	4618      	mov	r0, r3
 8015496:	3714      	adds	r7, #20
 8015498:	46bd      	mov	sp, r7
 801549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549e:	4770      	bx	lr
 80154a0:	ec337800 	.word	0xec337800
 80154a4:	eff37800 	.word	0xeff37800

080154a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b08a      	sub	sp, #40	; 0x28
 80154ac:	af02      	add	r7, sp, #8
 80154ae:	60f8      	str	r0, [r7, #12]
 80154b0:	60b9      	str	r1, [r7, #8]
 80154b2:	4613      	mov	r3, r2
 80154b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80154ba:	68bb      	ldr	r3, [r7, #8]
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	785b      	ldrb	r3, [r3, #1]
 80154c4:	2b01      	cmp	r3, #1
 80154c6:	f040 817a 	bne.w	80157be <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	691b      	ldr	r3, [r3, #16]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d132      	bne.n	8015538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	015a      	lsls	r2, r3, #5
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	4413      	add	r3, r2
 80154da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154de:	691b      	ldr	r3, [r3, #16]
 80154e0:	69ba      	ldr	r2, [r7, #24]
 80154e2:	0151      	lsls	r1, r2, #5
 80154e4:	69fa      	ldr	r2, [r7, #28]
 80154e6:	440a      	add	r2, r1
 80154e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80154ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80154f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80154f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	015a      	lsls	r2, r3, #5
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	4413      	add	r3, r2
 80154fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015502:	691b      	ldr	r3, [r3, #16]
 8015504:	69ba      	ldr	r2, [r7, #24]
 8015506:	0151      	lsls	r1, r2, #5
 8015508:	69fa      	ldr	r2, [r7, #28]
 801550a:	440a      	add	r2, r1
 801550c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015510:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015516:	69bb      	ldr	r3, [r7, #24]
 8015518:	015a      	lsls	r2, r3, #5
 801551a:	69fb      	ldr	r3, [r7, #28]
 801551c:	4413      	add	r3, r2
 801551e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015522:	691b      	ldr	r3, [r3, #16]
 8015524:	69ba      	ldr	r2, [r7, #24]
 8015526:	0151      	lsls	r1, r2, #5
 8015528:	69fa      	ldr	r2, [r7, #28]
 801552a:	440a      	add	r2, r1
 801552c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015530:	0cdb      	lsrs	r3, r3, #19
 8015532:	04db      	lsls	r3, r3, #19
 8015534:	6113      	str	r3, [r2, #16]
 8015536:	e092      	b.n	801565e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015538:	69bb      	ldr	r3, [r7, #24]
 801553a:	015a      	lsls	r2, r3, #5
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	4413      	add	r3, r2
 8015540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015544:	691b      	ldr	r3, [r3, #16]
 8015546:	69ba      	ldr	r2, [r7, #24]
 8015548:	0151      	lsls	r1, r2, #5
 801554a:	69fa      	ldr	r2, [r7, #28]
 801554c:	440a      	add	r2, r1
 801554e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015552:	0cdb      	lsrs	r3, r3, #19
 8015554:	04db      	lsls	r3, r3, #19
 8015556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	015a      	lsls	r2, r3, #5
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	4413      	add	r3, r2
 8015560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015564:	691b      	ldr	r3, [r3, #16]
 8015566:	69ba      	ldr	r2, [r7, #24]
 8015568:	0151      	lsls	r1, r2, #5
 801556a:	69fa      	ldr	r2, [r7, #28]
 801556c:	440a      	add	r2, r1
 801556e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015572:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015576:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801557a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 801557c:	69bb      	ldr	r3, [r7, #24]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d11a      	bne.n	80155b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	691a      	ldr	r2, [r3, #16]
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	689b      	ldr	r3, [r3, #8]
 801558a:	429a      	cmp	r2, r3
 801558c:	d903      	bls.n	8015596 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	689a      	ldr	r2, [r3, #8]
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015596:	69bb      	ldr	r3, [r7, #24]
 8015598:	015a      	lsls	r2, r3, #5
 801559a:	69fb      	ldr	r3, [r7, #28]
 801559c:	4413      	add	r3, r2
 801559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155a2:	691b      	ldr	r3, [r3, #16]
 80155a4:	69ba      	ldr	r2, [r7, #24]
 80155a6:	0151      	lsls	r1, r2, #5
 80155a8:	69fa      	ldr	r2, [r7, #28]
 80155aa:	440a      	add	r2, r1
 80155ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80155b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80155b4:	6113      	str	r3, [r2, #16]
 80155b6:	e01b      	b.n	80155f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80155b8:	69bb      	ldr	r3, [r7, #24]
 80155ba:	015a      	lsls	r2, r3, #5
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	4413      	add	r3, r2
 80155c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	6919      	ldr	r1, [r3, #16]
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	689b      	ldr	r3, [r3, #8]
 80155ce:	440b      	add	r3, r1
 80155d0:	1e59      	subs	r1, r3, #1
 80155d2:	68bb      	ldr	r3, [r7, #8]
 80155d4:	689b      	ldr	r3, [r3, #8]
 80155d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80155da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80155dc:	4ba2      	ldr	r3, [pc, #648]	; (8015868 <USB_EPStartXfer+0x3c0>)
 80155de:	400b      	ands	r3, r1
 80155e0:	69b9      	ldr	r1, [r7, #24]
 80155e2:	0148      	lsls	r0, r1, #5
 80155e4:	69f9      	ldr	r1, [r7, #28]
 80155e6:	4401      	add	r1, r0
 80155e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80155ec:	4313      	orrs	r3, r2
 80155ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80155f0:	69bb      	ldr	r3, [r7, #24]
 80155f2:	015a      	lsls	r2, r3, #5
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	4413      	add	r3, r2
 80155f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155fc:	691a      	ldr	r2, [r3, #16]
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	691b      	ldr	r3, [r3, #16]
 8015602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015606:	69b9      	ldr	r1, [r7, #24]
 8015608:	0148      	lsls	r0, r1, #5
 801560a:	69f9      	ldr	r1, [r7, #28]
 801560c:	4401      	add	r1, r0
 801560e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015612:	4313      	orrs	r3, r2
 8015614:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	791b      	ldrb	r3, [r3, #4]
 801561a:	2b01      	cmp	r3, #1
 801561c:	d11f      	bne.n	801565e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	015a      	lsls	r2, r3, #5
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	4413      	add	r3, r2
 8015626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801562a:	691b      	ldr	r3, [r3, #16]
 801562c:	69ba      	ldr	r2, [r7, #24]
 801562e:	0151      	lsls	r1, r2, #5
 8015630:	69fa      	ldr	r2, [r7, #28]
 8015632:	440a      	add	r2, r1
 8015634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015638:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801563c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	015a      	lsls	r2, r3, #5
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	4413      	add	r3, r2
 8015646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801564a:	691b      	ldr	r3, [r3, #16]
 801564c:	69ba      	ldr	r2, [r7, #24]
 801564e:	0151      	lsls	r1, r2, #5
 8015650:	69fa      	ldr	r2, [r7, #28]
 8015652:	440a      	add	r2, r1
 8015654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015658:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801565c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801565e:	79fb      	ldrb	r3, [r7, #7]
 8015660:	2b01      	cmp	r3, #1
 8015662:	d14b      	bne.n	80156fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	69db      	ldr	r3, [r3, #28]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d009      	beq.n	8015680 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801566c:	69bb      	ldr	r3, [r7, #24]
 801566e:	015a      	lsls	r2, r3, #5
 8015670:	69fb      	ldr	r3, [r7, #28]
 8015672:	4413      	add	r3, r2
 8015674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015678:	461a      	mov	r2, r3
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	69db      	ldr	r3, [r3, #28]
 801567e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	791b      	ldrb	r3, [r3, #4]
 8015684:	2b01      	cmp	r3, #1
 8015686:	d128      	bne.n	80156da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015688:	69fb      	ldr	r3, [r7, #28]
 801568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801568e:	689b      	ldr	r3, [r3, #8]
 8015690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015694:	2b00      	cmp	r3, #0
 8015696:	d110      	bne.n	80156ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015698:	69bb      	ldr	r3, [r7, #24]
 801569a:	015a      	lsls	r2, r3, #5
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	4413      	add	r3, r2
 80156a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	69ba      	ldr	r2, [r7, #24]
 80156a8:	0151      	lsls	r1, r2, #5
 80156aa:	69fa      	ldr	r2, [r7, #28]
 80156ac:	440a      	add	r2, r1
 80156ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80156b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80156b6:	6013      	str	r3, [r2, #0]
 80156b8:	e00f      	b.n	80156da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80156ba:	69bb      	ldr	r3, [r7, #24]
 80156bc:	015a      	lsls	r2, r3, #5
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	4413      	add	r3, r2
 80156c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	69ba      	ldr	r2, [r7, #24]
 80156ca:	0151      	lsls	r1, r2, #5
 80156cc:	69fa      	ldr	r2, [r7, #28]
 80156ce:	440a      	add	r2, r1
 80156d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80156d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80156d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80156da:	69bb      	ldr	r3, [r7, #24]
 80156dc:	015a      	lsls	r2, r3, #5
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	4413      	add	r3, r2
 80156e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	69ba      	ldr	r2, [r7, #24]
 80156ea:	0151      	lsls	r1, r2, #5
 80156ec:	69fa      	ldr	r2, [r7, #28]
 80156ee:	440a      	add	r2, r1
 80156f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80156f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80156f8:	6013      	str	r3, [r2, #0]
 80156fa:	e165      	b.n	80159c8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80156fc:	69bb      	ldr	r3, [r7, #24]
 80156fe:	015a      	lsls	r2, r3, #5
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	4413      	add	r3, r2
 8015704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	69ba      	ldr	r2, [r7, #24]
 801570c:	0151      	lsls	r1, r2, #5
 801570e:	69fa      	ldr	r2, [r7, #28]
 8015710:	440a      	add	r2, r1
 8015712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801571a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	791b      	ldrb	r3, [r3, #4]
 8015720:	2b01      	cmp	r3, #1
 8015722:	d015      	beq.n	8015750 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	691b      	ldr	r3, [r3, #16]
 8015728:	2b00      	cmp	r3, #0
 801572a:	f000 814d 	beq.w	80159c8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	f003 030f 	and.w	r3, r3, #15
 801573e:	2101      	movs	r1, #1
 8015740:	fa01 f303 	lsl.w	r3, r1, r3
 8015744:	69f9      	ldr	r1, [r7, #28]
 8015746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801574a:	4313      	orrs	r3, r2
 801574c:	634b      	str	r3, [r1, #52]	; 0x34
 801574e:	e13b      	b.n	80159c8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015756:	689b      	ldr	r3, [r3, #8]
 8015758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801575c:	2b00      	cmp	r3, #0
 801575e:	d110      	bne.n	8015782 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015760:	69bb      	ldr	r3, [r7, #24]
 8015762:	015a      	lsls	r2, r3, #5
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	4413      	add	r3, r2
 8015768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	69ba      	ldr	r2, [r7, #24]
 8015770:	0151      	lsls	r1, r2, #5
 8015772:	69fa      	ldr	r2, [r7, #28]
 8015774:	440a      	add	r2, r1
 8015776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801577a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801577e:	6013      	str	r3, [r2, #0]
 8015780:	e00f      	b.n	80157a2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	015a      	lsls	r2, r3, #5
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	4413      	add	r3, r2
 801578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	69ba      	ldr	r2, [r7, #24]
 8015792:	0151      	lsls	r1, r2, #5
 8015794:	69fa      	ldr	r2, [r7, #28]
 8015796:	440a      	add	r2, r1
 8015798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801579c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80157a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	68d9      	ldr	r1, [r3, #12]
 80157a6:	68bb      	ldr	r3, [r7, #8]
 80157a8:	781a      	ldrb	r2, [r3, #0]
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	691b      	ldr	r3, [r3, #16]
 80157ae:	b298      	uxth	r0, r3
 80157b0:	79fb      	ldrb	r3, [r7, #7]
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	4603      	mov	r3, r0
 80157b6:	68f8      	ldr	r0, [r7, #12]
 80157b8:	f000 f9b8 	bl	8015b2c <USB_WritePacket>
 80157bc:	e104      	b.n	80159c8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	015a      	lsls	r2, r3, #5
 80157c2:	69fb      	ldr	r3, [r7, #28]
 80157c4:	4413      	add	r3, r2
 80157c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80157ca:	691b      	ldr	r3, [r3, #16]
 80157cc:	69ba      	ldr	r2, [r7, #24]
 80157ce:	0151      	lsls	r1, r2, #5
 80157d0:	69fa      	ldr	r2, [r7, #28]
 80157d2:	440a      	add	r2, r1
 80157d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80157d8:	0cdb      	lsrs	r3, r3, #19
 80157da:	04db      	lsls	r3, r3, #19
 80157dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	015a      	lsls	r2, r3, #5
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	4413      	add	r3, r2
 80157e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80157ea:	691b      	ldr	r3, [r3, #16]
 80157ec:	69ba      	ldr	r2, [r7, #24]
 80157ee:	0151      	lsls	r1, r2, #5
 80157f0:	69fa      	ldr	r2, [r7, #28]
 80157f2:	440a      	add	r2, r1
 80157f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80157f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80157fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015800:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d131      	bne.n	801586c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	691b      	ldr	r3, [r3, #16]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d003      	beq.n	8015818 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	689a      	ldr	r2, [r3, #8]
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	689a      	ldr	r2, [r3, #8]
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015820:	69bb      	ldr	r3, [r7, #24]
 8015822:	015a      	lsls	r2, r3, #5
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	4413      	add	r3, r2
 8015828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801582c:	691a      	ldr	r2, [r3, #16]
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	6a1b      	ldr	r3, [r3, #32]
 8015832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015836:	69b9      	ldr	r1, [r7, #24]
 8015838:	0148      	lsls	r0, r1, #5
 801583a:	69f9      	ldr	r1, [r7, #28]
 801583c:	4401      	add	r1, r0
 801583e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015842:	4313      	orrs	r3, r2
 8015844:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015846:	69bb      	ldr	r3, [r7, #24]
 8015848:	015a      	lsls	r2, r3, #5
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	4413      	add	r3, r2
 801584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015852:	691b      	ldr	r3, [r3, #16]
 8015854:	69ba      	ldr	r2, [r7, #24]
 8015856:	0151      	lsls	r1, r2, #5
 8015858:	69fa      	ldr	r2, [r7, #28]
 801585a:	440a      	add	r2, r1
 801585c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015864:	6113      	str	r3, [r2, #16]
 8015866:	e061      	b.n	801592c <USB_EPStartXfer+0x484>
 8015868:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	691b      	ldr	r3, [r3, #16]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d123      	bne.n	80158bc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015874:	69bb      	ldr	r3, [r7, #24]
 8015876:	015a      	lsls	r2, r3, #5
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	4413      	add	r3, r2
 801587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015880:	691a      	ldr	r2, [r3, #16]
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	689b      	ldr	r3, [r3, #8]
 8015886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801588a:	69b9      	ldr	r1, [r7, #24]
 801588c:	0148      	lsls	r0, r1, #5
 801588e:	69f9      	ldr	r1, [r7, #28]
 8015890:	4401      	add	r1, r0
 8015892:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015896:	4313      	orrs	r3, r2
 8015898:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	015a      	lsls	r2, r3, #5
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	4413      	add	r3, r2
 80158a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158a6:	691b      	ldr	r3, [r3, #16]
 80158a8:	69ba      	ldr	r2, [r7, #24]
 80158aa:	0151      	lsls	r1, r2, #5
 80158ac:	69fa      	ldr	r2, [r7, #28]
 80158ae:	440a      	add	r2, r1
 80158b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80158b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80158b8:	6113      	str	r3, [r2, #16]
 80158ba:	e037      	b.n	801592c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	691a      	ldr	r2, [r3, #16]
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	689b      	ldr	r3, [r3, #8]
 80158c4:	4413      	add	r3, r2
 80158c6:	1e5a      	subs	r2, r3, #1
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	689b      	ldr	r3, [r3, #8]
 80158cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80158d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	689b      	ldr	r3, [r3, #8]
 80158d6:	8afa      	ldrh	r2, [r7, #22]
 80158d8:	fb03 f202 	mul.w	r2, r3, r2
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80158e0:	69bb      	ldr	r3, [r7, #24]
 80158e2:	015a      	lsls	r2, r3, #5
 80158e4:	69fb      	ldr	r3, [r7, #28]
 80158e6:	4413      	add	r3, r2
 80158e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80158ec:	691a      	ldr	r2, [r3, #16]
 80158ee:	8afb      	ldrh	r3, [r7, #22]
 80158f0:	04d9      	lsls	r1, r3, #19
 80158f2:	4b38      	ldr	r3, [pc, #224]	; (80159d4 <USB_EPStartXfer+0x52c>)
 80158f4:	400b      	ands	r3, r1
 80158f6:	69b9      	ldr	r1, [r7, #24]
 80158f8:	0148      	lsls	r0, r1, #5
 80158fa:	69f9      	ldr	r1, [r7, #28]
 80158fc:	4401      	add	r1, r0
 80158fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015902:	4313      	orrs	r3, r2
 8015904:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015906:	69bb      	ldr	r3, [r7, #24]
 8015908:	015a      	lsls	r2, r3, #5
 801590a:	69fb      	ldr	r3, [r7, #28]
 801590c:	4413      	add	r3, r2
 801590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015912:	691a      	ldr	r2, [r3, #16]
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	6a1b      	ldr	r3, [r3, #32]
 8015918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801591c:	69b9      	ldr	r1, [r7, #24]
 801591e:	0148      	lsls	r0, r1, #5
 8015920:	69f9      	ldr	r1, [r7, #28]
 8015922:	4401      	add	r1, r0
 8015924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015928:	4313      	orrs	r3, r2
 801592a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801592c:	79fb      	ldrb	r3, [r7, #7]
 801592e:	2b01      	cmp	r3, #1
 8015930:	d10d      	bne.n	801594e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015932:	68bb      	ldr	r3, [r7, #8]
 8015934:	68db      	ldr	r3, [r3, #12]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d009      	beq.n	801594e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801593a:	68bb      	ldr	r3, [r7, #8]
 801593c:	68d9      	ldr	r1, [r3, #12]
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	015a      	lsls	r2, r3, #5
 8015942:	69fb      	ldr	r3, [r7, #28]
 8015944:	4413      	add	r3, r2
 8015946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801594a:	460a      	mov	r2, r1
 801594c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	791b      	ldrb	r3, [r3, #4]
 8015952:	2b01      	cmp	r3, #1
 8015954:	d128      	bne.n	80159a8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015956:	69fb      	ldr	r3, [r7, #28]
 8015958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801595c:	689b      	ldr	r3, [r3, #8]
 801595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015962:	2b00      	cmp	r3, #0
 8015964:	d110      	bne.n	8015988 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015966:	69bb      	ldr	r3, [r7, #24]
 8015968:	015a      	lsls	r2, r3, #5
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	4413      	add	r3, r2
 801596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	69ba      	ldr	r2, [r7, #24]
 8015976:	0151      	lsls	r1, r2, #5
 8015978:	69fa      	ldr	r2, [r7, #28]
 801597a:	440a      	add	r2, r1
 801597c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015984:	6013      	str	r3, [r2, #0]
 8015986:	e00f      	b.n	80159a8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	015a      	lsls	r2, r3, #5
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	4413      	add	r3, r2
 8015990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	69ba      	ldr	r2, [r7, #24]
 8015998:	0151      	lsls	r1, r2, #5
 801599a:	69fa      	ldr	r2, [r7, #28]
 801599c:	440a      	add	r2, r1
 801599e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80159a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80159a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80159a8:	69bb      	ldr	r3, [r7, #24]
 80159aa:	015a      	lsls	r2, r3, #5
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	4413      	add	r3, r2
 80159b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	69ba      	ldr	r2, [r7, #24]
 80159b8:	0151      	lsls	r1, r2, #5
 80159ba:	69fa      	ldr	r2, [r7, #28]
 80159bc:	440a      	add	r2, r1
 80159be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80159c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80159c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80159c8:	2300      	movs	r3, #0
}
 80159ca:	4618      	mov	r0, r3
 80159cc:	3720      	adds	r7, #32
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	bf00      	nop
 80159d4:	1ff80000 	.word	0x1ff80000

080159d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80159d8:	b480      	push	{r7}
 80159da:	b087      	sub	sp, #28
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80159e2:	2300      	movs	r3, #0
 80159e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80159e6:	2300      	movs	r3, #0
 80159e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	785b      	ldrb	r3, [r3, #1]
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d14a      	bne.n	8015a8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	015a      	lsls	r2, r3, #5
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	4413      	add	r3, r2
 8015a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a0e:	f040 8086 	bne.w	8015b1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	015a      	lsls	r2, r3, #5
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	4413      	add	r3, r2
 8015a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	683a      	ldr	r2, [r7, #0]
 8015a24:	7812      	ldrb	r2, [r2, #0]
 8015a26:	0151      	lsls	r1, r2, #5
 8015a28:	693a      	ldr	r2, [r7, #16]
 8015a2a:	440a      	add	r2, r1
 8015a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015a30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015a34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	781b      	ldrb	r3, [r3, #0]
 8015a3a:	015a      	lsls	r2, r3, #5
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	4413      	add	r3, r2
 8015a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	683a      	ldr	r2, [r7, #0]
 8015a48:	7812      	ldrb	r2, [r2, #0]
 8015a4a:	0151      	lsls	r1, r2, #5
 8015a4c:	693a      	ldr	r2, [r7, #16]
 8015a4e:	440a      	add	r2, r1
 8015a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015a54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015a58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f242 7210 	movw	r2, #10000	; 0x2710
 8015a66:	4293      	cmp	r3, r2
 8015a68:	d902      	bls.n	8015a70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8015a6e:	e056      	b.n	8015b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	015a      	lsls	r2, r3, #5
 8015a76:	693b      	ldr	r3, [r7, #16]
 8015a78:	4413      	add	r3, r2
 8015a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015a84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a88:	d0e7      	beq.n	8015a5a <USB_EPStopXfer+0x82>
 8015a8a:	e048      	b.n	8015b1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	015a      	lsls	r2, r3, #5
 8015a92:	693b      	ldr	r3, [r7, #16]
 8015a94:	4413      	add	r3, r2
 8015a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015aa4:	d13b      	bne.n	8015b1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	015a      	lsls	r2, r3, #5
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	4413      	add	r3, r2
 8015ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	683a      	ldr	r2, [r7, #0]
 8015ab8:	7812      	ldrb	r2, [r2, #0]
 8015aba:	0151      	lsls	r1, r2, #5
 8015abc:	693a      	ldr	r2, [r7, #16]
 8015abe:	440a      	add	r2, r1
 8015ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ac4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015ac8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	015a      	lsls	r2, r3, #5
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	4413      	add	r3, r2
 8015ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	683a      	ldr	r2, [r7, #0]
 8015adc:	7812      	ldrb	r2, [r2, #0]
 8015ade:	0151      	lsls	r1, r2, #5
 8015ae0:	693a      	ldr	r2, [r7, #16]
 8015ae2:	440a      	add	r2, r1
 8015ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015aec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	3301      	adds	r3, #1
 8015af2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f242 7210 	movw	r2, #10000	; 0x2710
 8015afa:	4293      	cmp	r3, r2
 8015afc:	d902      	bls.n	8015b04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8015afe:	2301      	movs	r3, #1
 8015b00:	75fb      	strb	r3, [r7, #23]
          break;
 8015b02:	e00c      	b.n	8015b1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	015a      	lsls	r2, r3, #5
 8015b0a:	693b      	ldr	r3, [r7, #16]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015b1c:	d0e7      	beq.n	8015aee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	371c      	adds	r7, #28
 8015b24:	46bd      	mov	sp, r7
 8015b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2a:	4770      	bx	lr

08015b2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015b2c:	b480      	push	{r7}
 8015b2e:	b089      	sub	sp, #36	; 0x24
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	60f8      	str	r0, [r7, #12]
 8015b34:	60b9      	str	r1, [r7, #8]
 8015b36:	4611      	mov	r1, r2
 8015b38:	461a      	mov	r2, r3
 8015b3a:	460b      	mov	r3, r1
 8015b3c:	71fb      	strb	r3, [r7, #7]
 8015b3e:	4613      	mov	r3, r2
 8015b40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8015b4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d123      	bne.n	8015b9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8015b52:	88bb      	ldrh	r3, [r7, #4]
 8015b54:	3303      	adds	r3, #3
 8015b56:	089b      	lsrs	r3, r3, #2
 8015b58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	61bb      	str	r3, [r7, #24]
 8015b5e:	e018      	b.n	8015b92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015b60:	79fb      	ldrb	r3, [r7, #7]
 8015b62:	031a      	lsls	r2, r3, #12
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	4413      	add	r3, r2
 8015b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	69fb      	ldr	r3, [r7, #28]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8015b74:	69fb      	ldr	r3, [r7, #28]
 8015b76:	3301      	adds	r3, #1
 8015b78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	3301      	adds	r3, #1
 8015b7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015b80:	69fb      	ldr	r3, [r7, #28]
 8015b82:	3301      	adds	r3, #1
 8015b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	3301      	adds	r3, #1
 8015b8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015b8c:	69bb      	ldr	r3, [r7, #24]
 8015b8e:	3301      	adds	r3, #1
 8015b90:	61bb      	str	r3, [r7, #24]
 8015b92:	69ba      	ldr	r2, [r7, #24]
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d3e2      	bcc.n	8015b60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015b9a:	2300      	movs	r3, #0
}
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	3724      	adds	r7, #36	; 0x24
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba6:	4770      	bx	lr

08015ba8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015ba8:	b480      	push	{r7}
 8015baa:	b08b      	sub	sp, #44	; 0x2c
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	60f8      	str	r0, [r7, #12]
 8015bb0:	60b9      	str	r1, [r7, #8]
 8015bb2:	4613      	mov	r3, r2
 8015bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015bbe:	88fb      	ldrh	r3, [r7, #6]
 8015bc0:	089b      	lsrs	r3, r3, #2
 8015bc2:	b29b      	uxth	r3, r3
 8015bc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015bc6:	88fb      	ldrh	r3, [r7, #6]
 8015bc8:	f003 0303 	and.w	r3, r3, #3
 8015bcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015bce:	2300      	movs	r3, #0
 8015bd0:	623b      	str	r3, [r7, #32]
 8015bd2:	e014      	b.n	8015bfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015bd4:	69bb      	ldr	r3, [r7, #24]
 8015bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bda:	681a      	ldr	r2, [r3, #0]
 8015bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8015be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be2:	3301      	adds	r3, #1
 8015be4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be8:	3301      	adds	r3, #1
 8015bea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bee:	3301      	adds	r3, #1
 8015bf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015bf8:	6a3b      	ldr	r3, [r7, #32]
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	623b      	str	r3, [r7, #32]
 8015bfe:	6a3a      	ldr	r2, [r7, #32]
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d3e6      	bcc.n	8015bd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015c06:	8bfb      	ldrh	r3, [r7, #30]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d01e      	beq.n	8015c4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015c10:	69bb      	ldr	r3, [r7, #24]
 8015c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c16:	461a      	mov	r2, r3
 8015c18:	f107 0310 	add.w	r3, r7, #16
 8015c1c:	6812      	ldr	r2, [r2, #0]
 8015c1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015c20:	693a      	ldr	r2, [r7, #16]
 8015c22:	6a3b      	ldr	r3, [r7, #32]
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	00db      	lsls	r3, r3, #3
 8015c28:	fa22 f303 	lsr.w	r3, r2, r3
 8015c2c:	b2da      	uxtb	r2, r3
 8015c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c30:	701a      	strb	r2, [r3, #0]
      i++;
 8015c32:	6a3b      	ldr	r3, [r7, #32]
 8015c34:	3301      	adds	r3, #1
 8015c36:	623b      	str	r3, [r7, #32]
      pDest++;
 8015c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c3a:	3301      	adds	r3, #1
 8015c3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8015c3e:	8bfb      	ldrh	r3, [r7, #30]
 8015c40:	3b01      	subs	r3, #1
 8015c42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015c44:	8bfb      	ldrh	r3, [r7, #30]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d1ea      	bne.n	8015c20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	372c      	adds	r7, #44	; 0x2c
 8015c50:	46bd      	mov	sp, r7
 8015c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c56:	4770      	bx	lr

08015c58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015c58:	b480      	push	{r7}
 8015c5a:	b085      	sub	sp, #20
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
 8015c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	781b      	ldrb	r3, [r3, #0]
 8015c6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	785b      	ldrb	r3, [r3, #1]
 8015c70:	2b01      	cmp	r3, #1
 8015c72:	d12c      	bne.n	8015cce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015c74:	68bb      	ldr	r3, [r7, #8]
 8015c76:	015a      	lsls	r2, r3, #5
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	4413      	add	r3, r2
 8015c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	db12      	blt.n	8015cac <USB_EPSetStall+0x54>
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d00f      	beq.n	8015cac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	015a      	lsls	r2, r3, #5
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	4413      	add	r3, r2
 8015c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	68ba      	ldr	r2, [r7, #8]
 8015c9c:	0151      	lsls	r1, r2, #5
 8015c9e:	68fa      	ldr	r2, [r7, #12]
 8015ca0:	440a      	add	r2, r1
 8015ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015ca6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015caa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	015a      	lsls	r2, r3, #5
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	68ba      	ldr	r2, [r7, #8]
 8015cbc:	0151      	lsls	r1, r2, #5
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	440a      	add	r2, r1
 8015cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015cca:	6013      	str	r3, [r2, #0]
 8015ccc:	e02b      	b.n	8015d26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	015a      	lsls	r2, r3, #5
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	4413      	add	r3, r2
 8015cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	db12      	blt.n	8015d06 <USB_EPSetStall+0xae>
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00f      	beq.n	8015d06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	015a      	lsls	r2, r3, #5
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	4413      	add	r3, r2
 8015cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	68ba      	ldr	r2, [r7, #8]
 8015cf6:	0151      	lsls	r1, r2, #5
 8015cf8:	68fa      	ldr	r2, [r7, #12]
 8015cfa:	440a      	add	r2, r1
 8015cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015d04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	015a      	lsls	r2, r3, #5
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	4413      	add	r3, r2
 8015d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	68ba      	ldr	r2, [r7, #8]
 8015d16:	0151      	lsls	r1, r2, #5
 8015d18:	68fa      	ldr	r2, [r7, #12]
 8015d1a:	440a      	add	r2, r1
 8015d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015d24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015d26:	2300      	movs	r3, #0
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3714      	adds	r7, #20
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d32:	4770      	bx	lr

08015d34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b085      	sub	sp, #20
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	781b      	ldrb	r3, [r3, #0]
 8015d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	785b      	ldrb	r3, [r3, #1]
 8015d4c:	2b01      	cmp	r3, #1
 8015d4e:	d128      	bne.n	8015da2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	015a      	lsls	r2, r3, #5
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	4413      	add	r3, r2
 8015d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	68ba      	ldr	r2, [r7, #8]
 8015d60:	0151      	lsls	r1, r2, #5
 8015d62:	68fa      	ldr	r2, [r7, #12]
 8015d64:	440a      	add	r2, r1
 8015d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015d6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	791b      	ldrb	r3, [r3, #4]
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d003      	beq.n	8015d80 <USB_EPClearStall+0x4c>
 8015d78:	683b      	ldr	r3, [r7, #0]
 8015d7a:	791b      	ldrb	r3, [r3, #4]
 8015d7c:	2b02      	cmp	r3, #2
 8015d7e:	d138      	bne.n	8015df2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	015a      	lsls	r2, r3, #5
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	4413      	add	r3, r2
 8015d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	68ba      	ldr	r2, [r7, #8]
 8015d90:	0151      	lsls	r1, r2, #5
 8015d92:	68fa      	ldr	r2, [r7, #12]
 8015d94:	440a      	add	r2, r1
 8015d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015d9e:	6013      	str	r3, [r2, #0]
 8015da0:	e027      	b.n	8015df2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015da2:	68bb      	ldr	r3, [r7, #8]
 8015da4:	015a      	lsls	r2, r3, #5
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	4413      	add	r3, r2
 8015daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	0151      	lsls	r1, r2, #5
 8015db4:	68fa      	ldr	r2, [r7, #12]
 8015db6:	440a      	add	r2, r1
 8015db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015dbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015dc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015dc2:	683b      	ldr	r3, [r7, #0]
 8015dc4:	791b      	ldrb	r3, [r3, #4]
 8015dc6:	2b03      	cmp	r3, #3
 8015dc8:	d003      	beq.n	8015dd2 <USB_EPClearStall+0x9e>
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	791b      	ldrb	r3, [r3, #4]
 8015dce:	2b02      	cmp	r3, #2
 8015dd0:	d10f      	bne.n	8015df2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	015a      	lsls	r2, r3, #5
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	4413      	add	r3, r2
 8015dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	68ba      	ldr	r2, [r7, #8]
 8015de2:	0151      	lsls	r1, r2, #5
 8015de4:	68fa      	ldr	r2, [r7, #12]
 8015de6:	440a      	add	r2, r1
 8015de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015df0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015df2:	2300      	movs	r3, #0
}
 8015df4:	4618      	mov	r0, r3
 8015df6:	3714      	adds	r7, #20
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfe:	4770      	bx	lr

08015e00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015e00:	b480      	push	{r7}
 8015e02:	b085      	sub	sp, #20
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	460b      	mov	r3, r1
 8015e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	68fa      	ldr	r2, [r7, #12]
 8015e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015e1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8015e22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e2a:	681a      	ldr	r2, [r3, #0]
 8015e2c:	78fb      	ldrb	r3, [r7, #3]
 8015e2e:	011b      	lsls	r3, r3, #4
 8015e30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8015e34:	68f9      	ldr	r1, [r7, #12]
 8015e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015e3a:	4313      	orrs	r3, r2
 8015e3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015e3e:	2300      	movs	r3, #0
}
 8015e40:	4618      	mov	r0, r3
 8015e42:	3714      	adds	r7, #20
 8015e44:	46bd      	mov	sp, r7
 8015e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4a:	4770      	bx	lr

08015e4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b085      	sub	sp, #20
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	68fa      	ldr	r2, [r7, #12]
 8015e62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015e66:	f023 0303 	bic.w	r3, r3, #3
 8015e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015e7a:	f023 0302 	bic.w	r3, r3, #2
 8015e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015e80:	2300      	movs	r3, #0
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3714      	adds	r7, #20
 8015e86:	46bd      	mov	sp, r7
 8015e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8c:	4770      	bx	lr

08015e8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015e8e:	b480      	push	{r7}
 8015e90:	b085      	sub	sp, #20
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	68fa      	ldr	r2, [r7, #12]
 8015ea4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015ea8:	f023 0303 	bic.w	r3, r3, #3
 8015eac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	68fa      	ldr	r2, [r7, #12]
 8015eb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015ebc:	f043 0302 	orr.w	r3, r3, #2
 8015ec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015ec2:	2300      	movs	r3, #0
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3714      	adds	r7, #20
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ece:	4770      	bx	lr

08015ed0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b085      	sub	sp, #20
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	695b      	ldr	r3, [r3, #20]
 8015edc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	699b      	ldr	r3, [r3, #24]
 8015ee2:	68fa      	ldr	r2, [r7, #12]
 8015ee4:	4013      	ands	r3, r2
 8015ee6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3714      	adds	r7, #20
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef4:	4770      	bx	lr

08015ef6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015ef6:	b480      	push	{r7}
 8015ef8:	b085      	sub	sp, #20
 8015efa:	af00      	add	r7, sp, #0
 8015efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f08:	699b      	ldr	r3, [r3, #24]
 8015f0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f12:	69db      	ldr	r3, [r3, #28]
 8015f14:	68ba      	ldr	r2, [r7, #8]
 8015f16:	4013      	ands	r3, r2
 8015f18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	0c1b      	lsrs	r3, r3, #16
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3714      	adds	r7, #20
 8015f22:	46bd      	mov	sp, r7
 8015f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f28:	4770      	bx	lr

08015f2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015f2a:	b480      	push	{r7}
 8015f2c:	b085      	sub	sp, #20
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f3c:	699b      	ldr	r3, [r3, #24]
 8015f3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f46:	69db      	ldr	r3, [r3, #28]
 8015f48:	68ba      	ldr	r2, [r7, #8]
 8015f4a:	4013      	ands	r3, r2
 8015f4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	b29b      	uxth	r3, r3
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3714      	adds	r7, #20
 8015f56:	46bd      	mov	sp, r7
 8015f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5c:	4770      	bx	lr

08015f5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015f5e:	b480      	push	{r7}
 8015f60:	b085      	sub	sp, #20
 8015f62:	af00      	add	r7, sp, #0
 8015f64:	6078      	str	r0, [r7, #4]
 8015f66:	460b      	mov	r3, r1
 8015f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8015f6e:	78fb      	ldrb	r3, [r7, #3]
 8015f70:	015a      	lsls	r2, r3, #5
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	4413      	add	r3, r2
 8015f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f7a:	689b      	ldr	r3, [r3, #8]
 8015f7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f84:	695b      	ldr	r3, [r3, #20]
 8015f86:	68ba      	ldr	r2, [r7, #8]
 8015f88:	4013      	ands	r3, r2
 8015f8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015f8c:	68bb      	ldr	r3, [r7, #8]
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	3714      	adds	r7, #20
 8015f92:	46bd      	mov	sp, r7
 8015f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f98:	4770      	bx	lr

08015f9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015f9a:	b480      	push	{r7}
 8015f9c:	b087      	sub	sp, #28
 8015f9e:	af00      	add	r7, sp, #0
 8015fa0:	6078      	str	r0, [r7, #4]
 8015fa2:	460b      	mov	r3, r1
 8015fa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fb0:	691b      	ldr	r3, [r3, #16]
 8015fb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015fbe:	78fb      	ldrb	r3, [r7, #3]
 8015fc0:	f003 030f 	and.w	r3, r3, #15
 8015fc4:	68fa      	ldr	r2, [r7, #12]
 8015fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8015fca:	01db      	lsls	r3, r3, #7
 8015fcc:	b2db      	uxtb	r3, r3
 8015fce:	693a      	ldr	r2, [r7, #16]
 8015fd0:	4313      	orrs	r3, r2
 8015fd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015fd4:	78fb      	ldrb	r3, [r7, #3]
 8015fd6:	015a      	lsls	r2, r3, #5
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	4413      	add	r3, r2
 8015fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fe0:	689b      	ldr	r3, [r3, #8]
 8015fe2:	693a      	ldr	r2, [r7, #16]
 8015fe4:	4013      	ands	r3, r2
 8015fe6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015fe8:	68bb      	ldr	r3, [r7, #8]
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	371c      	adds	r7, #28
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff4:	4770      	bx	lr

08015ff6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015ff6:	b480      	push	{r7}
 8015ff8:	b083      	sub	sp, #12
 8015ffa:	af00      	add	r7, sp, #0
 8015ffc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	695b      	ldr	r3, [r3, #20]
 8016002:	f003 0301 	and.w	r3, r3, #1
}
 8016006:	4618      	mov	r0, r3
 8016008:	370c      	adds	r7, #12
 801600a:	46bd      	mov	sp, r7
 801600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016010:	4770      	bx	lr

08016012 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8016012:	b480      	push	{r7}
 8016014:	b085      	sub	sp, #20
 8016016:	af00      	add	r7, sp, #0
 8016018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	68fa      	ldr	r2, [r7, #12]
 8016028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801602c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8016030:	f023 0307 	bic.w	r3, r3, #7
 8016034:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	68fa      	ldr	r2, [r7, #12]
 8016040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016048:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801604a:	2300      	movs	r3, #0
}
 801604c:	4618      	mov	r0, r3
 801604e:	3714      	adds	r7, #20
 8016050:	46bd      	mov	sp, r7
 8016052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016056:	4770      	bx	lr

08016058 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8016058:	b480      	push	{r7}
 801605a:	b087      	sub	sp, #28
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	460b      	mov	r3, r1
 8016062:	607a      	str	r2, [r7, #4]
 8016064:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	333c      	adds	r3, #60	; 0x3c
 801606e:	3304      	adds	r3, #4
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	4a26      	ldr	r2, [pc, #152]	; (8016110 <USB_EP0_OutStart+0xb8>)
 8016078:	4293      	cmp	r3, r2
 801607a:	d90a      	bls.n	8016092 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801608c:	d101      	bne.n	8016092 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801608e:	2300      	movs	r3, #0
 8016090:	e037      	b.n	8016102 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016098:	461a      	mov	r2, r3
 801609a:	2300      	movs	r3, #0
 801609c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160a4:	691b      	ldr	r3, [r3, #16]
 80160a6:	697a      	ldr	r2, [r7, #20]
 80160a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80160ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80160b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160b8:	691b      	ldr	r3, [r3, #16]
 80160ba:	697a      	ldr	r2, [r7, #20]
 80160bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80160c0:	f043 0318 	orr.w	r3, r3, #24
 80160c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160cc:	691b      	ldr	r3, [r3, #16]
 80160ce:	697a      	ldr	r2, [r7, #20]
 80160d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80160d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80160d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80160da:	7afb      	ldrb	r3, [r7, #11]
 80160dc:	2b01      	cmp	r3, #1
 80160de:	d10f      	bne.n	8016100 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160e6:	461a      	mov	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80160ec:	697b      	ldr	r3, [r7, #20]
 80160ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	697a      	ldr	r2, [r7, #20]
 80160f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80160fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80160fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016100:	2300      	movs	r3, #0
}
 8016102:	4618      	mov	r0, r3
 8016104:	371c      	adds	r7, #28
 8016106:	46bd      	mov	sp, r7
 8016108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610c:	4770      	bx	lr
 801610e:	bf00      	nop
 8016110:	4f54300a 	.word	0x4f54300a

08016114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016114:	b480      	push	{r7}
 8016116:	b085      	sub	sp, #20
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801611c:	2300      	movs	r3, #0
 801611e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	3301      	adds	r3, #1
 8016124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 801612c:	d901      	bls.n	8016132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801612e:	2303      	movs	r3, #3
 8016130:	e01b      	b.n	801616a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	691b      	ldr	r3, [r3, #16]
 8016136:	2b00      	cmp	r3, #0
 8016138:	daf2      	bge.n	8016120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801613a:	2300      	movs	r3, #0
 801613c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	691b      	ldr	r3, [r3, #16]
 8016142:	f043 0201 	orr.w	r2, r3, #1
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	3301      	adds	r3, #1
 801614e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8016156:	d901      	bls.n	801615c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016158:	2303      	movs	r3, #3
 801615a:	e006      	b.n	801616a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	691b      	ldr	r3, [r3, #16]
 8016160:	f003 0301 	and.w	r3, r3, #1
 8016164:	2b01      	cmp	r3, #1
 8016166:	d0f0      	beq.n	801614a <USB_CoreReset+0x36>

  return HAL_OK;
 8016168:	2300      	movs	r3, #0
}
 801616a:	4618      	mov	r0, r3
 801616c:	3714      	adds	r7, #20
 801616e:	46bd      	mov	sp, r7
 8016170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016174:	4770      	bx	lr
	...

08016178 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	460b      	mov	r3, r1
 8016182:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016184:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8016188:	f005 fff6 	bl	801c178 <USBD_static_malloc>
 801618c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d109      	bne.n	80161a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	32b0      	adds	r2, #176	; 0xb0
 801619e:	2100      	movs	r1, #0
 80161a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80161a4:	2302      	movs	r3, #2
 80161a6:	e0d4      	b.n	8016352 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80161a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80161ac:	2100      	movs	r1, #0
 80161ae:	68f8      	ldr	r0, [r7, #12]
 80161b0:	f006 ff02 	bl	801cfb8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	32b0      	adds	r2, #176	; 0xb0
 80161be:	68f9      	ldr	r1, [r7, #12]
 80161c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	32b0      	adds	r2, #176	; 0xb0
 80161ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	7c1b      	ldrb	r3, [r3, #16]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d138      	bne.n	8016252 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80161e0:	4b5e      	ldr	r3, [pc, #376]	; (801635c <USBD_CDC_Init+0x1e4>)
 80161e2:	7819      	ldrb	r1, [r3, #0]
 80161e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80161e8:	2202      	movs	r2, #2
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f005 fea1 	bl	801bf32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80161f0:	4b5a      	ldr	r3, [pc, #360]	; (801635c <USBD_CDC_Init+0x1e4>)
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	f003 020f 	and.w	r2, r3, #15
 80161f8:	6879      	ldr	r1, [r7, #4]
 80161fa:	4613      	mov	r3, r2
 80161fc:	009b      	lsls	r3, r3, #2
 80161fe:	4413      	add	r3, r2
 8016200:	009b      	lsls	r3, r3, #2
 8016202:	440b      	add	r3, r1
 8016204:	3324      	adds	r3, #36	; 0x24
 8016206:	2201      	movs	r2, #1
 8016208:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801620a:	4b55      	ldr	r3, [pc, #340]	; (8016360 <USBD_CDC_Init+0x1e8>)
 801620c:	7819      	ldrb	r1, [r3, #0]
 801620e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016212:	2202      	movs	r2, #2
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f005 fe8c 	bl	801bf32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801621a:	4b51      	ldr	r3, [pc, #324]	; (8016360 <USBD_CDC_Init+0x1e8>)
 801621c:	781b      	ldrb	r3, [r3, #0]
 801621e:	f003 020f 	and.w	r2, r3, #15
 8016222:	6879      	ldr	r1, [r7, #4]
 8016224:	4613      	mov	r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	4413      	add	r3, r2
 801622a:	009b      	lsls	r3, r3, #2
 801622c:	440b      	add	r3, r1
 801622e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016232:	2201      	movs	r2, #1
 8016234:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016236:	4b4b      	ldr	r3, [pc, #300]	; (8016364 <USBD_CDC_Init+0x1ec>)
 8016238:	781b      	ldrb	r3, [r3, #0]
 801623a:	f003 020f 	and.w	r2, r3, #15
 801623e:	6879      	ldr	r1, [r7, #4]
 8016240:	4613      	mov	r3, r2
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	4413      	add	r3, r2
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	440b      	add	r3, r1
 801624a:	3326      	adds	r3, #38	; 0x26
 801624c:	2210      	movs	r2, #16
 801624e:	801a      	strh	r2, [r3, #0]
 8016250:	e035      	b.n	80162be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016252:	4b42      	ldr	r3, [pc, #264]	; (801635c <USBD_CDC_Init+0x1e4>)
 8016254:	7819      	ldrb	r1, [r3, #0]
 8016256:	2340      	movs	r3, #64	; 0x40
 8016258:	2202      	movs	r2, #2
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f005 fe69 	bl	801bf32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016260:	4b3e      	ldr	r3, [pc, #248]	; (801635c <USBD_CDC_Init+0x1e4>)
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	f003 020f 	and.w	r2, r3, #15
 8016268:	6879      	ldr	r1, [r7, #4]
 801626a:	4613      	mov	r3, r2
 801626c:	009b      	lsls	r3, r3, #2
 801626e:	4413      	add	r3, r2
 8016270:	009b      	lsls	r3, r3, #2
 8016272:	440b      	add	r3, r1
 8016274:	3324      	adds	r3, #36	; 0x24
 8016276:	2201      	movs	r2, #1
 8016278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801627a:	4b39      	ldr	r3, [pc, #228]	; (8016360 <USBD_CDC_Init+0x1e8>)
 801627c:	7819      	ldrb	r1, [r3, #0]
 801627e:	2340      	movs	r3, #64	; 0x40
 8016280:	2202      	movs	r2, #2
 8016282:	6878      	ldr	r0, [r7, #4]
 8016284:	f005 fe55 	bl	801bf32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8016288:	4b35      	ldr	r3, [pc, #212]	; (8016360 <USBD_CDC_Init+0x1e8>)
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	f003 020f 	and.w	r2, r3, #15
 8016290:	6879      	ldr	r1, [r7, #4]
 8016292:	4613      	mov	r3, r2
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	4413      	add	r3, r2
 8016298:	009b      	lsls	r3, r3, #2
 801629a:	440b      	add	r3, r1
 801629c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80162a0:	2201      	movs	r2, #1
 80162a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80162a4:	4b2f      	ldr	r3, [pc, #188]	; (8016364 <USBD_CDC_Init+0x1ec>)
 80162a6:	781b      	ldrb	r3, [r3, #0]
 80162a8:	f003 020f 	and.w	r2, r3, #15
 80162ac:	6879      	ldr	r1, [r7, #4]
 80162ae:	4613      	mov	r3, r2
 80162b0:	009b      	lsls	r3, r3, #2
 80162b2:	4413      	add	r3, r2
 80162b4:	009b      	lsls	r3, r3, #2
 80162b6:	440b      	add	r3, r1
 80162b8:	3326      	adds	r3, #38	; 0x26
 80162ba:	2210      	movs	r2, #16
 80162bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80162be:	4b29      	ldr	r3, [pc, #164]	; (8016364 <USBD_CDC_Init+0x1ec>)
 80162c0:	7819      	ldrb	r1, [r3, #0]
 80162c2:	2308      	movs	r3, #8
 80162c4:	2203      	movs	r2, #3
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f005 fe33 	bl	801bf32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80162cc:	4b25      	ldr	r3, [pc, #148]	; (8016364 <USBD_CDC_Init+0x1ec>)
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	f003 020f 	and.w	r2, r3, #15
 80162d4:	6879      	ldr	r1, [r7, #4]
 80162d6:	4613      	mov	r3, r2
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	4413      	add	r3, r2
 80162dc:	009b      	lsls	r3, r3, #2
 80162de:	440b      	add	r3, r1
 80162e0:	3324      	adds	r3, #36	; 0x24
 80162e2:	2201      	movs	r2, #1
 80162e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	2200      	movs	r2, #0
 80162ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	33b0      	adds	r3, #176	; 0xb0
 80162f8:	009b      	lsls	r3, r3, #2
 80162fa:	4413      	add	r3, r2
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	2200      	movs	r2, #0
 8016306:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2200      	movs	r2, #0
 801630e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8016318:	2b00      	cmp	r3, #0
 801631a:	d101      	bne.n	8016320 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801631c:	2302      	movs	r3, #2
 801631e:	e018      	b.n	8016352 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	7c1b      	ldrb	r3, [r3, #16]
 8016324:	2b00      	cmp	r3, #0
 8016326:	d10a      	bne.n	801633e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016328:	4b0d      	ldr	r3, [pc, #52]	; (8016360 <USBD_CDC_Init+0x1e8>)
 801632a:	7819      	ldrb	r1, [r3, #0]
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f005 feea 	bl	801c110 <USBD_LL_PrepareReceive>
 801633c:	e008      	b.n	8016350 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801633e:	4b08      	ldr	r3, [pc, #32]	; (8016360 <USBD_CDC_Init+0x1e8>)
 8016340:	7819      	ldrb	r1, [r3, #0]
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016348:	2340      	movs	r3, #64	; 0x40
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f005 fee0 	bl	801c110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016350:	2300      	movs	r3, #0
}
 8016352:	4618      	mov	r0, r3
 8016354:	3710      	adds	r7, #16
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
 801635a:	bf00      	nop
 801635c:	20000cd7 	.word	0x20000cd7
 8016360:	20000cd8 	.word	0x20000cd8
 8016364:	20000cd9 	.word	0x20000cd9

08016368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	460b      	mov	r3, r1
 8016372:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8016374:	4b3a      	ldr	r3, [pc, #232]	; (8016460 <USBD_CDC_DeInit+0xf8>)
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	4619      	mov	r1, r3
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f005 fdff 	bl	801bf7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8016380:	4b37      	ldr	r3, [pc, #220]	; (8016460 <USBD_CDC_DeInit+0xf8>)
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	f003 020f 	and.w	r2, r3, #15
 8016388:	6879      	ldr	r1, [r7, #4]
 801638a:	4613      	mov	r3, r2
 801638c:	009b      	lsls	r3, r3, #2
 801638e:	4413      	add	r3, r2
 8016390:	009b      	lsls	r3, r3, #2
 8016392:	440b      	add	r3, r1
 8016394:	3324      	adds	r3, #36	; 0x24
 8016396:	2200      	movs	r2, #0
 8016398:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801639a:	4b32      	ldr	r3, [pc, #200]	; (8016464 <USBD_CDC_DeInit+0xfc>)
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	4619      	mov	r1, r3
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f005 fdec 	bl	801bf7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80163a6:	4b2f      	ldr	r3, [pc, #188]	; (8016464 <USBD_CDC_DeInit+0xfc>)
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	f003 020f 	and.w	r2, r3, #15
 80163ae:	6879      	ldr	r1, [r7, #4]
 80163b0:	4613      	mov	r3, r2
 80163b2:	009b      	lsls	r3, r3, #2
 80163b4:	4413      	add	r3, r2
 80163b6:	009b      	lsls	r3, r3, #2
 80163b8:	440b      	add	r3, r1
 80163ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80163be:	2200      	movs	r2, #0
 80163c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80163c2:	4b29      	ldr	r3, [pc, #164]	; (8016468 <USBD_CDC_DeInit+0x100>)
 80163c4:	781b      	ldrb	r3, [r3, #0]
 80163c6:	4619      	mov	r1, r3
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f005 fdd8 	bl	801bf7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80163ce:	4b26      	ldr	r3, [pc, #152]	; (8016468 <USBD_CDC_DeInit+0x100>)
 80163d0:	781b      	ldrb	r3, [r3, #0]
 80163d2:	f003 020f 	and.w	r2, r3, #15
 80163d6:	6879      	ldr	r1, [r7, #4]
 80163d8:	4613      	mov	r3, r2
 80163da:	009b      	lsls	r3, r3, #2
 80163dc:	4413      	add	r3, r2
 80163de:	009b      	lsls	r3, r3, #2
 80163e0:	440b      	add	r3, r1
 80163e2:	3324      	adds	r3, #36	; 0x24
 80163e4:	2200      	movs	r2, #0
 80163e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80163e8:	4b1f      	ldr	r3, [pc, #124]	; (8016468 <USBD_CDC_DeInit+0x100>)
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	f003 020f 	and.w	r2, r3, #15
 80163f0:	6879      	ldr	r1, [r7, #4]
 80163f2:	4613      	mov	r3, r2
 80163f4:	009b      	lsls	r3, r3, #2
 80163f6:	4413      	add	r3, r2
 80163f8:	009b      	lsls	r3, r3, #2
 80163fa:	440b      	add	r3, r1
 80163fc:	3326      	adds	r3, #38	; 0x26
 80163fe:	2200      	movs	r2, #0
 8016400:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	32b0      	adds	r2, #176	; 0xb0
 801640c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d01f      	beq.n	8016454 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801641a:	687a      	ldr	r2, [r7, #4]
 801641c:	33b0      	adds	r3, #176	; 0xb0
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	4413      	add	r3, r2
 8016422:	685b      	ldr	r3, [r3, #4]
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	32b0      	adds	r2, #176	; 0xb0
 8016432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016436:	4618      	mov	r0, r3
 8016438:	f005 feac 	bl	801c194 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	32b0      	adds	r2, #176	; 0xb0
 8016446:	2100      	movs	r1, #0
 8016448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2200      	movs	r2, #0
 8016450:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016454:	2300      	movs	r3, #0
}
 8016456:	4618      	mov	r0, r3
 8016458:	3708      	adds	r7, #8
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	20000cd7 	.word	0x20000cd7
 8016464:	20000cd8 	.word	0x20000cd8
 8016468:	20000cd9 	.word	0x20000cd9

0801646c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b086      	sub	sp, #24
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
 8016474:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	32b0      	adds	r2, #176	; 0xb0
 8016480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016484:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016486:	2300      	movs	r3, #0
 8016488:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801648a:	2300      	movs	r3, #0
 801648c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801648e:	2300      	movs	r3, #0
 8016490:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016492:	693b      	ldr	r3, [r7, #16]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d101      	bne.n	801649c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8016498:	2303      	movs	r3, #3
 801649a:	e0bf      	b.n	801661c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801649c:	683b      	ldr	r3, [r7, #0]
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d050      	beq.n	801654a <USBD_CDC_Setup+0xde>
 80164a8:	2b20      	cmp	r3, #32
 80164aa:	f040 80af 	bne.w	801660c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	88db      	ldrh	r3, [r3, #6]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d03a      	beq.n	801652c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	b25b      	sxtb	r3, r3
 80164bc:	2b00      	cmp	r3, #0
 80164be:	da1b      	bge.n	80164f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80164c6:	687a      	ldr	r2, [r7, #4]
 80164c8:	33b0      	adds	r3, #176	; 0xb0
 80164ca:	009b      	lsls	r3, r3, #2
 80164cc:	4413      	add	r3, r2
 80164ce:	685b      	ldr	r3, [r3, #4]
 80164d0:	689b      	ldr	r3, [r3, #8]
 80164d2:	683a      	ldr	r2, [r7, #0]
 80164d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80164d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80164d8:	683a      	ldr	r2, [r7, #0]
 80164da:	88d2      	ldrh	r2, [r2, #6]
 80164dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80164de:	683b      	ldr	r3, [r7, #0]
 80164e0:	88db      	ldrh	r3, [r3, #6]
 80164e2:	2b07      	cmp	r3, #7
 80164e4:	bf28      	it	cs
 80164e6:	2307      	movcs	r3, #7
 80164e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	89fa      	ldrh	r2, [r7, #14]
 80164ee:	4619      	mov	r1, r3
 80164f0:	6878      	ldr	r0, [r7, #4]
 80164f2:	f001 fd49 	bl	8017f88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80164f6:	e090      	b.n	801661a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	785a      	ldrb	r2, [r3, #1]
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	88db      	ldrh	r3, [r3, #6]
 8016506:	2b3f      	cmp	r3, #63	; 0x3f
 8016508:	d803      	bhi.n	8016512 <USBD_CDC_Setup+0xa6>
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	88db      	ldrh	r3, [r3, #6]
 801650e:	b2da      	uxtb	r2, r3
 8016510:	e000      	b.n	8016514 <USBD_CDC_Setup+0xa8>
 8016512:	2240      	movs	r2, #64	; 0x40
 8016514:	693b      	ldr	r3, [r7, #16]
 8016516:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801651a:	6939      	ldr	r1, [r7, #16]
 801651c:	693b      	ldr	r3, [r7, #16]
 801651e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8016522:	461a      	mov	r2, r3
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f001 fd5b 	bl	8017fe0 <USBD_CtlPrepareRx>
      break;
 801652a:	e076      	b.n	801661a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016532:	687a      	ldr	r2, [r7, #4]
 8016534:	33b0      	adds	r3, #176	; 0xb0
 8016536:	009b      	lsls	r3, r3, #2
 8016538:	4413      	add	r3, r2
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	689b      	ldr	r3, [r3, #8]
 801653e:	683a      	ldr	r2, [r7, #0]
 8016540:	7850      	ldrb	r0, [r2, #1]
 8016542:	2200      	movs	r2, #0
 8016544:	6839      	ldr	r1, [r7, #0]
 8016546:	4798      	blx	r3
      break;
 8016548:	e067      	b.n	801661a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	785b      	ldrb	r3, [r3, #1]
 801654e:	2b0b      	cmp	r3, #11
 8016550:	d851      	bhi.n	80165f6 <USBD_CDC_Setup+0x18a>
 8016552:	a201      	add	r2, pc, #4	; (adr r2, 8016558 <USBD_CDC_Setup+0xec>)
 8016554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016558:	08016589 	.word	0x08016589
 801655c:	08016605 	.word	0x08016605
 8016560:	080165f7 	.word	0x080165f7
 8016564:	080165f7 	.word	0x080165f7
 8016568:	080165f7 	.word	0x080165f7
 801656c:	080165f7 	.word	0x080165f7
 8016570:	080165f7 	.word	0x080165f7
 8016574:	080165f7 	.word	0x080165f7
 8016578:	080165f7 	.word	0x080165f7
 801657c:	080165f7 	.word	0x080165f7
 8016580:	080165b3 	.word	0x080165b3
 8016584:	080165dd 	.word	0x080165dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801658e:	b2db      	uxtb	r3, r3
 8016590:	2b03      	cmp	r3, #3
 8016592:	d107      	bne.n	80165a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016594:	f107 030a 	add.w	r3, r7, #10
 8016598:	2202      	movs	r2, #2
 801659a:	4619      	mov	r1, r3
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f001 fcf3 	bl	8017f88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80165a2:	e032      	b.n	801660a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80165a4:	6839      	ldr	r1, [r7, #0]
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f001 fc7d 	bl	8017ea6 <USBD_CtlError>
            ret = USBD_FAIL;
 80165ac:	2303      	movs	r3, #3
 80165ae:	75fb      	strb	r3, [r7, #23]
          break;
 80165b0:	e02b      	b.n	801660a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165b8:	b2db      	uxtb	r3, r3
 80165ba:	2b03      	cmp	r3, #3
 80165bc:	d107      	bne.n	80165ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80165be:	f107 030d 	add.w	r3, r7, #13
 80165c2:	2201      	movs	r2, #1
 80165c4:	4619      	mov	r1, r3
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f001 fcde 	bl	8017f88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80165cc:	e01d      	b.n	801660a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80165ce:	6839      	ldr	r1, [r7, #0]
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f001 fc68 	bl	8017ea6 <USBD_CtlError>
            ret = USBD_FAIL;
 80165d6:	2303      	movs	r3, #3
 80165d8:	75fb      	strb	r3, [r7, #23]
          break;
 80165da:	e016      	b.n	801660a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	2b03      	cmp	r3, #3
 80165e6:	d00f      	beq.n	8016608 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80165e8:	6839      	ldr	r1, [r7, #0]
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f001 fc5b 	bl	8017ea6 <USBD_CtlError>
            ret = USBD_FAIL;
 80165f0:	2303      	movs	r3, #3
 80165f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80165f4:	e008      	b.n	8016608 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80165f6:	6839      	ldr	r1, [r7, #0]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f001 fc54 	bl	8017ea6 <USBD_CtlError>
          ret = USBD_FAIL;
 80165fe:	2303      	movs	r3, #3
 8016600:	75fb      	strb	r3, [r7, #23]
          break;
 8016602:	e002      	b.n	801660a <USBD_CDC_Setup+0x19e>
          break;
 8016604:	bf00      	nop
 8016606:	e008      	b.n	801661a <USBD_CDC_Setup+0x1ae>
          break;
 8016608:	bf00      	nop
      }
      break;
 801660a:	e006      	b.n	801661a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801660c:	6839      	ldr	r1, [r7, #0]
 801660e:	6878      	ldr	r0, [r7, #4]
 8016610:	f001 fc49 	bl	8017ea6 <USBD_CtlError>
      ret = USBD_FAIL;
 8016614:	2303      	movs	r3, #3
 8016616:	75fb      	strb	r3, [r7, #23]
      break;
 8016618:	bf00      	nop
  }

  return (uint8_t)ret;
 801661a:	7dfb      	ldrb	r3, [r7, #23]
}
 801661c:	4618      	mov	r0, r3
 801661e:	3718      	adds	r7, #24
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	460b      	mov	r3, r1
 801662e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016636:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	32b0      	adds	r2, #176	; 0xb0
 8016642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d101      	bne.n	801664e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801664a:	2303      	movs	r3, #3
 801664c:	e065      	b.n	801671a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	32b0      	adds	r2, #176	; 0xb0
 8016658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801665c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801665e:	78fb      	ldrb	r3, [r7, #3]
 8016660:	f003 020f 	and.w	r2, r3, #15
 8016664:	6879      	ldr	r1, [r7, #4]
 8016666:	4613      	mov	r3, r2
 8016668:	009b      	lsls	r3, r3, #2
 801666a:	4413      	add	r3, r2
 801666c:	009b      	lsls	r3, r3, #2
 801666e:	440b      	add	r3, r1
 8016670:	3318      	adds	r3, #24
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d02f      	beq.n	80166d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016678:	78fb      	ldrb	r3, [r7, #3]
 801667a:	f003 020f 	and.w	r2, r3, #15
 801667e:	6879      	ldr	r1, [r7, #4]
 8016680:	4613      	mov	r3, r2
 8016682:	009b      	lsls	r3, r3, #2
 8016684:	4413      	add	r3, r2
 8016686:	009b      	lsls	r3, r3, #2
 8016688:	440b      	add	r3, r1
 801668a:	3318      	adds	r3, #24
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	78fb      	ldrb	r3, [r7, #3]
 8016690:	f003 010f 	and.w	r1, r3, #15
 8016694:	68f8      	ldr	r0, [r7, #12]
 8016696:	460b      	mov	r3, r1
 8016698:	00db      	lsls	r3, r3, #3
 801669a:	440b      	add	r3, r1
 801669c:	009b      	lsls	r3, r3, #2
 801669e:	4403      	add	r3, r0
 80166a0:	331c      	adds	r3, #28
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80166a8:	fb01 f303 	mul.w	r3, r1, r3
 80166ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d112      	bne.n	80166d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80166b2:	78fb      	ldrb	r3, [r7, #3]
 80166b4:	f003 020f 	and.w	r2, r3, #15
 80166b8:	6879      	ldr	r1, [r7, #4]
 80166ba:	4613      	mov	r3, r2
 80166bc:	009b      	lsls	r3, r3, #2
 80166be:	4413      	add	r3, r2
 80166c0:	009b      	lsls	r3, r3, #2
 80166c2:	440b      	add	r3, r1
 80166c4:	3318      	adds	r3, #24
 80166c6:	2200      	movs	r2, #0
 80166c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80166ca:	78f9      	ldrb	r1, [r7, #3]
 80166cc:	2300      	movs	r3, #0
 80166ce:	2200      	movs	r2, #0
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f005 fcfc 	bl	801c0ce <USBD_LL_Transmit>
 80166d6:	e01f      	b.n	8016718 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80166d8:	68bb      	ldr	r3, [r7, #8]
 80166da:	2200      	movs	r2, #0
 80166dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80166e6:	687a      	ldr	r2, [r7, #4]
 80166e8:	33b0      	adds	r3, #176	; 0xb0
 80166ea:	009b      	lsls	r3, r3, #2
 80166ec:	4413      	add	r3, r2
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	691b      	ldr	r3, [r3, #16]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d010      	beq.n	8016718 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	33b0      	adds	r3, #176	; 0xb0
 8016700:	009b      	lsls	r3, r3, #2
 8016702:	4413      	add	r3, r2
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	691b      	ldr	r3, [r3, #16]
 8016708:	68ba      	ldr	r2, [r7, #8]
 801670a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801670e:	68ba      	ldr	r2, [r7, #8]
 8016710:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8016714:	78fa      	ldrb	r2, [r7, #3]
 8016716:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016718:	2300      	movs	r3, #0
}
 801671a:	4618      	mov	r0, r3
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}

08016722 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016722:	b580      	push	{r7, lr}
 8016724:	b084      	sub	sp, #16
 8016726:	af00      	add	r7, sp, #0
 8016728:	6078      	str	r0, [r7, #4]
 801672a:	460b      	mov	r3, r1
 801672c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	32b0      	adds	r2, #176	; 0xb0
 8016738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801673c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	32b0      	adds	r2, #176	; 0xb0
 8016748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d101      	bne.n	8016754 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016750:	2303      	movs	r3, #3
 8016752:	e01a      	b.n	801678a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016754:	78fb      	ldrb	r3, [r7, #3]
 8016756:	4619      	mov	r1, r3
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f005 fcfa 	bl	801c152 <USBD_LL_GetRxDataSize>
 801675e:	4602      	mov	r2, r0
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	33b0      	adds	r3, #176	; 0xb0
 8016770:	009b      	lsls	r3, r3, #2
 8016772:	4413      	add	r3, r2
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	68db      	ldr	r3, [r3, #12]
 8016778:	68fa      	ldr	r2, [r7, #12]
 801677a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801677e:	68fa      	ldr	r2, [r7, #12]
 8016780:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016784:	4611      	mov	r1, r2
 8016786:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016788:	2300      	movs	r3, #0
}
 801678a:	4618      	mov	r0, r3
 801678c:	3710      	adds	r7, #16
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016792:	b580      	push	{r7, lr}
 8016794:	b084      	sub	sp, #16
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	32b0      	adds	r2, #176	; 0xb0
 80167a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d101      	bne.n	80167b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80167b0:	2303      	movs	r3, #3
 80167b2:	e025      	b.n	8016800 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80167ba:	687a      	ldr	r2, [r7, #4]
 80167bc:	33b0      	adds	r3, #176	; 0xb0
 80167be:	009b      	lsls	r3, r3, #2
 80167c0:	4413      	add	r3, r2
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d01a      	beq.n	80167fe <USBD_CDC_EP0_RxReady+0x6c>
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80167ce:	2bff      	cmp	r3, #255	; 0xff
 80167d0:	d015      	beq.n	80167fe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80167d8:	687a      	ldr	r2, [r7, #4]
 80167da:	33b0      	adds	r3, #176	; 0xb0
 80167dc:	009b      	lsls	r3, r3, #2
 80167de:	4413      	add	r3, r2
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	689b      	ldr	r3, [r3, #8]
 80167e4:	68fa      	ldr	r2, [r7, #12]
 80167e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80167ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80167ec:	68fa      	ldr	r2, [r7, #12]
 80167ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80167f2:	b292      	uxth	r2, r2
 80167f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	22ff      	movs	r2, #255	; 0xff
 80167fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80167fe:	2300      	movs	r3, #0
}
 8016800:	4618      	mov	r0, r3
 8016802:	3710      	adds	r7, #16
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b086      	sub	sp, #24
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016810:	2182      	movs	r1, #130	; 0x82
 8016812:	4818      	ldr	r0, [pc, #96]	; (8016874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016814:	f000 fd0f 	bl	8017236 <USBD_GetEpDesc>
 8016818:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801681a:	2101      	movs	r1, #1
 801681c:	4815      	ldr	r0, [pc, #84]	; (8016874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801681e:	f000 fd0a 	bl	8017236 <USBD_GetEpDesc>
 8016822:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016824:	2181      	movs	r1, #129	; 0x81
 8016826:	4813      	ldr	r0, [pc, #76]	; (8016874 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016828:	f000 fd05 	bl	8017236 <USBD_GetEpDesc>
 801682c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d002      	beq.n	801683a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016834:	697b      	ldr	r3, [r7, #20]
 8016836:	2210      	movs	r2, #16
 8016838:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801683a:	693b      	ldr	r3, [r7, #16]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d006      	beq.n	801684e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	2200      	movs	r2, #0
 8016844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016848:	711a      	strb	r2, [r3, #4]
 801684a:	2200      	movs	r2, #0
 801684c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d006      	beq.n	8016862 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2200      	movs	r2, #0
 8016858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801685c:	711a      	strb	r2, [r3, #4]
 801685e:	2200      	movs	r2, #0
 8016860:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2243      	movs	r2, #67	; 0x43
 8016866:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016868:	4b02      	ldr	r3, [pc, #8]	; (8016874 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801686a:	4618      	mov	r0, r3
 801686c:	3718      	adds	r7, #24
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}
 8016872:	bf00      	nop
 8016874:	20000c94 	.word	0x20000c94

08016878 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b086      	sub	sp, #24
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016880:	2182      	movs	r1, #130	; 0x82
 8016882:	4818      	ldr	r0, [pc, #96]	; (80168e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016884:	f000 fcd7 	bl	8017236 <USBD_GetEpDesc>
 8016888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801688a:	2101      	movs	r1, #1
 801688c:	4815      	ldr	r0, [pc, #84]	; (80168e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801688e:	f000 fcd2 	bl	8017236 <USBD_GetEpDesc>
 8016892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016894:	2181      	movs	r1, #129	; 0x81
 8016896:	4813      	ldr	r0, [pc, #76]	; (80168e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016898:	f000 fccd 	bl	8017236 <USBD_GetEpDesc>
 801689c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801689e:	697b      	ldr	r3, [r7, #20]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d002      	beq.n	80168aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	2210      	movs	r2, #16
 80168a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80168aa:	693b      	ldr	r3, [r7, #16]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d006      	beq.n	80168be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	2200      	movs	r2, #0
 80168b4:	711a      	strb	r2, [r3, #4]
 80168b6:	2200      	movs	r2, #0
 80168b8:	f042 0202 	orr.w	r2, r2, #2
 80168bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d006      	beq.n	80168d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	2200      	movs	r2, #0
 80168c8:	711a      	strb	r2, [r3, #4]
 80168ca:	2200      	movs	r2, #0
 80168cc:	f042 0202 	orr.w	r2, r2, #2
 80168d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	2243      	movs	r2, #67	; 0x43
 80168d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80168d8:	4b02      	ldr	r3, [pc, #8]	; (80168e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80168da:	4618      	mov	r0, r3
 80168dc:	3718      	adds	r7, #24
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	20000c94 	.word	0x20000c94

080168e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b086      	sub	sp, #24
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80168f0:	2182      	movs	r1, #130	; 0x82
 80168f2:	4818      	ldr	r0, [pc, #96]	; (8016954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80168f4:	f000 fc9f 	bl	8017236 <USBD_GetEpDesc>
 80168f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80168fa:	2101      	movs	r1, #1
 80168fc:	4815      	ldr	r0, [pc, #84]	; (8016954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80168fe:	f000 fc9a 	bl	8017236 <USBD_GetEpDesc>
 8016902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016904:	2181      	movs	r1, #129	; 0x81
 8016906:	4813      	ldr	r0, [pc, #76]	; (8016954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016908:	f000 fc95 	bl	8017236 <USBD_GetEpDesc>
 801690c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d002      	beq.n	801691a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	2210      	movs	r2, #16
 8016918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801691a:	693b      	ldr	r3, [r7, #16]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d006      	beq.n	801692e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016920:	693b      	ldr	r3, [r7, #16]
 8016922:	2200      	movs	r2, #0
 8016924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016928:	711a      	strb	r2, [r3, #4]
 801692a:	2200      	movs	r2, #0
 801692c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d006      	beq.n	8016942 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	2200      	movs	r2, #0
 8016938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801693c:	711a      	strb	r2, [r3, #4]
 801693e:	2200      	movs	r2, #0
 8016940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2243      	movs	r2, #67	; 0x43
 8016946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016948:	4b02      	ldr	r3, [pc, #8]	; (8016954 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801694a:	4618      	mov	r0, r3
 801694c:	3718      	adds	r7, #24
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	20000c94 	.word	0x20000c94

08016958 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	220a      	movs	r2, #10
 8016964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016966:	4b03      	ldr	r3, [pc, #12]	; (8016974 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016968:	4618      	mov	r0, r3
 801696a:	370c      	adds	r7, #12
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr
 8016974:	20000c50 	.word	0x20000c50

08016978 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016978:	b480      	push	{r7}
 801697a:	b083      	sub	sp, #12
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d101      	bne.n	801698c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016988:	2303      	movs	r3, #3
 801698a:	e009      	b.n	80169a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8016992:	687a      	ldr	r2, [r7, #4]
 8016994:	33b0      	adds	r3, #176	; 0xb0
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	4413      	add	r3, r2
 801699a:	683a      	ldr	r2, [r7, #0]
 801699c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801699e:	2300      	movs	r3, #0
}
 80169a0:	4618      	mov	r0, r3
 80169a2:	370c      	adds	r7, #12
 80169a4:	46bd      	mov	sp, r7
 80169a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169aa:	4770      	bx	lr

080169ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80169ac:	b480      	push	{r7}
 80169ae:	b087      	sub	sp, #28
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	60b9      	str	r1, [r7, #8]
 80169b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	32b0      	adds	r2, #176	; 0xb0
 80169c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80169c8:	697b      	ldr	r3, [r7, #20]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d101      	bne.n	80169d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80169ce:	2303      	movs	r3, #3
 80169d0:	e008      	b.n	80169e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	68ba      	ldr	r2, [r7, #8]
 80169d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	687a      	ldr	r2, [r7, #4]
 80169de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80169e2:	2300      	movs	r3, #0
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	371c      	adds	r7, #28
 80169e8:	46bd      	mov	sp, r7
 80169ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ee:	4770      	bx	lr

080169f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80169f0:	b480      	push	{r7}
 80169f2:	b085      	sub	sp, #20
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	32b0      	adds	r2, #176	; 0xb0
 8016a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d101      	bne.n	8016a14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016a10:	2303      	movs	r3, #3
 8016a12:	e004      	b.n	8016a1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	683a      	ldr	r2, [r7, #0]
 8016a18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016a1c:	2300      	movs	r3, #0
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3714      	adds	r7, #20
 8016a22:	46bd      	mov	sp, r7
 8016a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a28:	4770      	bx	lr
	...

08016a2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	32b0      	adds	r2, #176	; 0xb0
 8016a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	32b0      	adds	r2, #176	; 0xb0
 8016a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d101      	bne.n	8016a5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016a56:	2303      	movs	r3, #3
 8016a58:	e018      	b.n	8016a8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	7c1b      	ldrb	r3, [r3, #16]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d10a      	bne.n	8016a78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016a62:	4b0c      	ldr	r3, [pc, #48]	; (8016a94 <USBD_CDC_ReceivePacket+0x68>)
 8016a64:	7819      	ldrb	r1, [r3, #0]
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f005 fb4d 	bl	801c110 <USBD_LL_PrepareReceive>
 8016a76:	e008      	b.n	8016a8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016a78:	4b06      	ldr	r3, [pc, #24]	; (8016a94 <USBD_CDC_ReceivePacket+0x68>)
 8016a7a:	7819      	ldrb	r1, [r3, #0]
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016a82:	2340      	movs	r3, #64	; 0x40
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f005 fb43 	bl	801c110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016a8a:	2300      	movs	r3, #0
}
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}
 8016a94:	20000cd8 	.word	0x20000cd8

08016a98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b086      	sub	sp, #24
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	60f8      	str	r0, [r7, #12]
 8016aa0:	60b9      	str	r1, [r7, #8]
 8016aa2:	4613      	mov	r3, r2
 8016aa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d101      	bne.n	8016ab0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016aac:	2303      	movs	r3, #3
 8016aae:	e01f      	b.n	8016af0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	2200      	movs	r2, #0
 8016abc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016ac8:	68bb      	ldr	r3, [r7, #8]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d003      	beq.n	8016ad6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	68ba      	ldr	r2, [r7, #8]
 8016ad2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	2201      	movs	r2, #1
 8016ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	79fa      	ldrb	r2, [r7, #7]
 8016ae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016ae4:	68f8      	ldr	r0, [r7, #12]
 8016ae6:	f005 f9bd 	bl	801be64 <USBD_LL_Init>
 8016aea:	4603      	mov	r3, r0
 8016aec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8016af0:	4618      	mov	r0, r3
 8016af2:	3718      	adds	r7, #24
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}

08016af8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b084      	sub	sp, #16
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b02:	2300      	movs	r3, #0
 8016b04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016b06:	683b      	ldr	r3, [r7, #0]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d101      	bne.n	8016b10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016b0c:	2303      	movs	r3, #3
 8016b0e:	e025      	b.n	8016b5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	683a      	ldr	r2, [r7, #0]
 8016b14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	32ae      	adds	r2, #174	; 0xae
 8016b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d00f      	beq.n	8016b4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	32ae      	adds	r2, #174	; 0xae
 8016b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b3c:	f107 020e 	add.w	r2, r7, #14
 8016b40:	4610      	mov	r0, r2
 8016b42:	4798      	blx	r3
 8016b44:	4602      	mov	r2, r0
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8016b52:	1c5a      	adds	r2, r3, #1
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8016b5a:	2300      	movs	r3, #0
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3710      	adds	r7, #16
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}

08016b64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b082      	sub	sp, #8
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016b6c:	6878      	ldr	r0, [r7, #4]
 8016b6e:	f005 f9c5 	bl	801befc <USBD_LL_Start>
 8016b72:	4603      	mov	r3, r0
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3708      	adds	r7, #8
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}

08016b7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016b84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016b86:	4618      	mov	r0, r3
 8016b88:	370c      	adds	r7, #12
 8016b8a:	46bd      	mov	sp, r7
 8016b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b90:	4770      	bx	lr

08016b92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016b92:	b580      	push	{r7, lr}
 8016b94:	b084      	sub	sp, #16
 8016b96:	af00      	add	r7, sp, #0
 8016b98:	6078      	str	r0, [r7, #4]
 8016b9a:	460b      	mov	r3, r1
 8016b9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d009      	beq.n	8016bc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	78fa      	ldrb	r2, [r7, #3]
 8016bb6:	4611      	mov	r1, r2
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	4798      	blx	r3
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016bca:	b580      	push	{r7, lr}
 8016bcc:	b084      	sub	sp, #16
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
 8016bd2:	460b      	mov	r3, r1
 8016bd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016be0:	685b      	ldr	r3, [r3, #4]
 8016be2:	78fa      	ldrb	r2, [r7, #3]
 8016be4:	4611      	mov	r1, r2
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	4798      	blx	r3
 8016bea:	4603      	mov	r3, r0
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d001      	beq.n	8016bf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016bf0:	2303      	movs	r3, #3
 8016bf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
 8016c06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c0e:	6839      	ldr	r1, [r7, #0]
 8016c10:	4618      	mov	r0, r3
 8016c12:	f001 f90e 	bl	8017e32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2201      	movs	r2, #1
 8016c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8016c24:	461a      	mov	r2, r3
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016c32:	f003 031f 	and.w	r3, r3, #31
 8016c36:	2b02      	cmp	r3, #2
 8016c38:	d01a      	beq.n	8016c70 <USBD_LL_SetupStage+0x72>
 8016c3a:	2b02      	cmp	r3, #2
 8016c3c:	d822      	bhi.n	8016c84 <USBD_LL_SetupStage+0x86>
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d002      	beq.n	8016c48 <USBD_LL_SetupStage+0x4a>
 8016c42:	2b01      	cmp	r3, #1
 8016c44:	d00a      	beq.n	8016c5c <USBD_LL_SetupStage+0x5e>
 8016c46:	e01d      	b.n	8016c84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c4e:	4619      	mov	r1, r3
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f000 fb65 	bl	8017320 <USBD_StdDevReq>
 8016c56:	4603      	mov	r3, r0
 8016c58:	73fb      	strb	r3, [r7, #15]
      break;
 8016c5a:	e020      	b.n	8016c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c62:	4619      	mov	r1, r3
 8016c64:	6878      	ldr	r0, [r7, #4]
 8016c66:	f000 fbcd 	bl	8017404 <USBD_StdItfReq>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8016c6e:	e016      	b.n	8016c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016c76:	4619      	mov	r1, r3
 8016c78:	6878      	ldr	r0, [r7, #4]
 8016c7a:	f000 fc2f 	bl	80174dc <USBD_StdEPReq>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	73fb      	strb	r3, [r7, #15]
      break;
 8016c82:	e00c      	b.n	8016c9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016c8e:	b2db      	uxtb	r3, r3
 8016c90:	4619      	mov	r1, r3
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f005 f992 	bl	801bfbc <USBD_LL_StallEP>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8016c9c:	bf00      	nop
  }

  return ret;
 8016c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3710      	adds	r7, #16
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}

08016ca8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b086      	sub	sp, #24
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	60f8      	str	r0, [r7, #12]
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	607a      	str	r2, [r7, #4]
 8016cb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016cba:	7afb      	ldrb	r3, [r7, #11]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d16e      	bne.n	8016d9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016cc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016cce:	2b03      	cmp	r3, #3
 8016cd0:	f040 8098 	bne.w	8016e04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016cd4:	693b      	ldr	r3, [r7, #16]
 8016cd6:	689a      	ldr	r2, [r3, #8]
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	68db      	ldr	r3, [r3, #12]
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d913      	bls.n	8016d08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016ce0:	693b      	ldr	r3, [r7, #16]
 8016ce2:	689a      	ldr	r2, [r3, #8]
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	1ad2      	subs	r2, r2, r3
 8016cea:	693b      	ldr	r3, [r7, #16]
 8016cec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8016cee:	693b      	ldr	r3, [r7, #16]
 8016cf0:	68da      	ldr	r2, [r3, #12]
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	689b      	ldr	r3, [r3, #8]
 8016cf6:	4293      	cmp	r3, r2
 8016cf8:	bf28      	it	cs
 8016cfa:	4613      	movcs	r3, r2
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	6879      	ldr	r1, [r7, #4]
 8016d00:	68f8      	ldr	r0, [r7, #12]
 8016d02:	f001 f98a 	bl	801801a <USBD_CtlContinueRx>
 8016d06:	e07d      	b.n	8016e04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016d0e:	f003 031f 	and.w	r3, r3, #31
 8016d12:	2b02      	cmp	r3, #2
 8016d14:	d014      	beq.n	8016d40 <USBD_LL_DataOutStage+0x98>
 8016d16:	2b02      	cmp	r3, #2
 8016d18:	d81d      	bhi.n	8016d56 <USBD_LL_DataOutStage+0xae>
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d002      	beq.n	8016d24 <USBD_LL_DataOutStage+0x7c>
 8016d1e:	2b01      	cmp	r3, #1
 8016d20:	d003      	beq.n	8016d2a <USBD_LL_DataOutStage+0x82>
 8016d22:	e018      	b.n	8016d56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016d24:	2300      	movs	r3, #0
 8016d26:	75bb      	strb	r3, [r7, #22]
            break;
 8016d28:	e018      	b.n	8016d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	4619      	mov	r1, r3
 8016d34:	68f8      	ldr	r0, [r7, #12]
 8016d36:	f000 fa64 	bl	8017202 <USBD_CoreFindIF>
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	75bb      	strb	r3, [r7, #22]
            break;
 8016d3e:	e00d      	b.n	8016d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	4619      	mov	r1, r3
 8016d4a:	68f8      	ldr	r0, [r7, #12]
 8016d4c:	f000 fa66 	bl	801721c <USBD_CoreFindEP>
 8016d50:	4603      	mov	r3, r0
 8016d52:	75bb      	strb	r3, [r7, #22]
            break;
 8016d54:	e002      	b.n	8016d5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016d56:	2300      	movs	r3, #0
 8016d58:	75bb      	strb	r3, [r7, #22]
            break;
 8016d5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016d5c:	7dbb      	ldrb	r3, [r7, #22]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d119      	bne.n	8016d96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d68:	b2db      	uxtb	r3, r3
 8016d6a:	2b03      	cmp	r3, #3
 8016d6c:	d113      	bne.n	8016d96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8016d6e:	7dba      	ldrb	r2, [r7, #22]
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	32ae      	adds	r2, #174	; 0xae
 8016d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d78:	691b      	ldr	r3, [r3, #16]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d00b      	beq.n	8016d96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8016d7e:	7dba      	ldrb	r2, [r7, #22]
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016d86:	7dba      	ldrb	r2, [r7, #22]
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	32ae      	adds	r2, #174	; 0xae
 8016d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d90:	691b      	ldr	r3, [r3, #16]
 8016d92:	68f8      	ldr	r0, [r7, #12]
 8016d94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016d96:	68f8      	ldr	r0, [r7, #12]
 8016d98:	f001 f950 	bl	801803c <USBD_CtlSendStatus>
 8016d9c:	e032      	b.n	8016e04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8016d9e:	7afb      	ldrb	r3, [r7, #11]
 8016da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016da4:	b2db      	uxtb	r3, r3
 8016da6:	4619      	mov	r1, r3
 8016da8:	68f8      	ldr	r0, [r7, #12]
 8016daa:	f000 fa37 	bl	801721c <USBD_CoreFindEP>
 8016dae:	4603      	mov	r3, r0
 8016db0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016db2:	7dbb      	ldrb	r3, [r7, #22]
 8016db4:	2bff      	cmp	r3, #255	; 0xff
 8016db6:	d025      	beq.n	8016e04 <USBD_LL_DataOutStage+0x15c>
 8016db8:	7dbb      	ldrb	r3, [r7, #22]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d122      	bne.n	8016e04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016dc4:	b2db      	uxtb	r3, r3
 8016dc6:	2b03      	cmp	r3, #3
 8016dc8:	d117      	bne.n	8016dfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016dca:	7dba      	ldrb	r2, [r7, #22]
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	32ae      	adds	r2, #174	; 0xae
 8016dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dd4:	699b      	ldr	r3, [r3, #24]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d00f      	beq.n	8016dfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016dda:	7dba      	ldrb	r2, [r7, #22]
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016de2:	7dba      	ldrb	r2, [r7, #22]
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	32ae      	adds	r2, #174	; 0xae
 8016de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016dec:	699b      	ldr	r3, [r3, #24]
 8016dee:	7afa      	ldrb	r2, [r7, #11]
 8016df0:	4611      	mov	r1, r2
 8016df2:	68f8      	ldr	r0, [r7, #12]
 8016df4:	4798      	blx	r3
 8016df6:	4603      	mov	r3, r0
 8016df8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8016dfa:	7dfb      	ldrb	r3, [r7, #23]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d001      	beq.n	8016e04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016e00:	7dfb      	ldrb	r3, [r7, #23]
 8016e02:	e000      	b.n	8016e06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016e04:	2300      	movs	r3, #0
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	3718      	adds	r7, #24
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}

08016e0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016e0e:	b580      	push	{r7, lr}
 8016e10:	b086      	sub	sp, #24
 8016e12:	af00      	add	r7, sp, #0
 8016e14:	60f8      	str	r0, [r7, #12]
 8016e16:	460b      	mov	r3, r1
 8016e18:	607a      	str	r2, [r7, #4]
 8016e1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8016e1c:	7afb      	ldrb	r3, [r7, #11]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d16f      	bne.n	8016f02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	3314      	adds	r3, #20
 8016e26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016e2e:	2b02      	cmp	r3, #2
 8016e30:	d15a      	bne.n	8016ee8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016e32:	693b      	ldr	r3, [r7, #16]
 8016e34:	689a      	ldr	r2, [r3, #8]
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d914      	bls.n	8016e68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016e3e:	693b      	ldr	r3, [r7, #16]
 8016e40:	689a      	ldr	r2, [r3, #8]
 8016e42:	693b      	ldr	r3, [r7, #16]
 8016e44:	68db      	ldr	r3, [r3, #12]
 8016e46:	1ad2      	subs	r2, r2, r3
 8016e48:	693b      	ldr	r3, [r7, #16]
 8016e4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	689b      	ldr	r3, [r3, #8]
 8016e50:	461a      	mov	r2, r3
 8016e52:	6879      	ldr	r1, [r7, #4]
 8016e54:	68f8      	ldr	r0, [r7, #12]
 8016e56:	f001 f8b2 	bl	8017fbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	2100      	movs	r1, #0
 8016e60:	68f8      	ldr	r0, [r7, #12]
 8016e62:	f005 f955 	bl	801c110 <USBD_LL_PrepareReceive>
 8016e66:	e03f      	b.n	8016ee8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	68da      	ldr	r2, [r3, #12]
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	689b      	ldr	r3, [r3, #8]
 8016e70:	429a      	cmp	r2, r3
 8016e72:	d11c      	bne.n	8016eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	685a      	ldr	r2, [r3, #4]
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016e7c:	429a      	cmp	r2, r3
 8016e7e:	d316      	bcc.n	8016eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	685a      	ldr	r2, [r3, #4]
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d20f      	bcs.n	8016eae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016e8e:	2200      	movs	r2, #0
 8016e90:	2100      	movs	r1, #0
 8016e92:	68f8      	ldr	r0, [r7, #12]
 8016e94:	f001 f893 	bl	8017fbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	2100      	movs	r1, #0
 8016ea6:	68f8      	ldr	r0, [r7, #12]
 8016ea8:	f005 f932 	bl	801c110 <USBD_LL_PrepareReceive>
 8016eac:	e01c      	b.n	8016ee8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016eb4:	b2db      	uxtb	r3, r3
 8016eb6:	2b03      	cmp	r3, #3
 8016eb8:	d10f      	bne.n	8016eda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ec0:	68db      	ldr	r3, [r3, #12]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d009      	beq.n	8016eda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ed4:	68db      	ldr	r3, [r3, #12]
 8016ed6:	68f8      	ldr	r0, [r7, #12]
 8016ed8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016eda:	2180      	movs	r1, #128	; 0x80
 8016edc:	68f8      	ldr	r0, [r7, #12]
 8016ede:	f005 f86d 	bl	801bfbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016ee2:	68f8      	ldr	r0, [r7, #12]
 8016ee4:	f001 f8bd 	bl	8018062 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d03a      	beq.n	8016f68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f7ff fe42 	bl	8016b7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	2200      	movs	r2, #0
 8016efc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016f00:	e032      	b.n	8016f68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016f02:	7afb      	ldrb	r3, [r7, #11]
 8016f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016f08:	b2db      	uxtb	r3, r3
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	68f8      	ldr	r0, [r7, #12]
 8016f0e:	f000 f985 	bl	801721c <USBD_CoreFindEP>
 8016f12:	4603      	mov	r3, r0
 8016f14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016f16:	7dfb      	ldrb	r3, [r7, #23]
 8016f18:	2bff      	cmp	r3, #255	; 0xff
 8016f1a:	d025      	beq.n	8016f68 <USBD_LL_DataInStage+0x15a>
 8016f1c:	7dfb      	ldrb	r3, [r7, #23]
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d122      	bne.n	8016f68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	2b03      	cmp	r3, #3
 8016f2c:	d11c      	bne.n	8016f68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8016f2e:	7dfa      	ldrb	r2, [r7, #23]
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	32ae      	adds	r2, #174	; 0xae
 8016f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f38:	695b      	ldr	r3, [r3, #20]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d014      	beq.n	8016f68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8016f3e:	7dfa      	ldrb	r2, [r7, #23]
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016f46:	7dfa      	ldrb	r2, [r7, #23]
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	32ae      	adds	r2, #174	; 0xae
 8016f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f50:	695b      	ldr	r3, [r3, #20]
 8016f52:	7afa      	ldrb	r2, [r7, #11]
 8016f54:	4611      	mov	r1, r2
 8016f56:	68f8      	ldr	r0, [r7, #12]
 8016f58:	4798      	blx	r3
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016f5e:	7dbb      	ldrb	r3, [r7, #22]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d001      	beq.n	8016f68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016f64:	7dbb      	ldrb	r3, [r7, #22]
 8016f66:	e000      	b.n	8016f6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016f68:	2300      	movs	r3, #0
}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	3718      	adds	r7, #24
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}

08016f72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016f72:	b580      	push	{r7, lr}
 8016f74:	b084      	sub	sp, #16
 8016f76:	af00      	add	r7, sp, #0
 8016f78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	2201      	movs	r2, #1
 8016f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2200      	movs	r2, #0
 8016f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	2200      	movs	r2, #0
 8016f92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	2200      	movs	r2, #0
 8016f98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d014      	beq.n	8016fd8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fb4:	685b      	ldr	r3, [r3, #4]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d00e      	beq.n	8016fd8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	6852      	ldr	r2, [r2, #4]
 8016fc6:	b2d2      	uxtb	r2, r2
 8016fc8:	4611      	mov	r1, r2
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	4798      	blx	r3
 8016fce:	4603      	mov	r3, r0
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	d001      	beq.n	8016fd8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016fd4:	2303      	movs	r3, #3
 8016fd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016fd8:	2340      	movs	r3, #64	; 0x40
 8016fda:	2200      	movs	r2, #0
 8016fdc:	2100      	movs	r1, #0
 8016fde:	6878      	ldr	r0, [r7, #4]
 8016fe0:	f004 ffa7 	bl	801bf32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	2201      	movs	r2, #1
 8016fe8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2240      	movs	r2, #64	; 0x40
 8016ff0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016ff4:	2340      	movs	r3, #64	; 0x40
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	2180      	movs	r1, #128	; 0x80
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f004 ff99 	bl	801bf32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2201      	movs	r2, #1
 8017004:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2240      	movs	r2, #64	; 0x40
 801700a:	621a      	str	r2, [r3, #32]

  return ret;
 801700c:	7bfb      	ldrb	r3, [r7, #15]
}
 801700e:	4618      	mov	r0, r3
 8017010:	3710      	adds	r7, #16
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}

08017016 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8017016:	b480      	push	{r7}
 8017018:	b083      	sub	sp, #12
 801701a:	af00      	add	r7, sp, #0
 801701c:	6078      	str	r0, [r7, #4]
 801701e:	460b      	mov	r3, r1
 8017020:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	78fa      	ldrb	r2, [r7, #3]
 8017026:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8017028:	2300      	movs	r3, #0
}
 801702a:	4618      	mov	r0, r3
 801702c:	370c      	adds	r7, #12
 801702e:	46bd      	mov	sp, r7
 8017030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017034:	4770      	bx	lr

08017036 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8017036:	b480      	push	{r7}
 8017038:	b083      	sub	sp, #12
 801703a:	af00      	add	r7, sp, #0
 801703c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017044:	b2db      	uxtb	r3, r3
 8017046:	2b04      	cmp	r3, #4
 8017048:	d006      	beq.n	8017058 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017050:	b2da      	uxtb	r2, r3
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2204      	movs	r2, #4
 801705c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8017060:	2300      	movs	r3, #0
}
 8017062:	4618      	mov	r0, r3
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr

0801706e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801706e:	b480      	push	{r7}
 8017070:	b083      	sub	sp, #12
 8017072:	af00      	add	r7, sp, #0
 8017074:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801707c:	b2db      	uxtb	r3, r3
 801707e:	2b04      	cmp	r3, #4
 8017080:	d106      	bne.n	8017090 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8017088:	b2da      	uxtb	r2, r3
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8017090:	2300      	movs	r3, #0
}
 8017092:	4618      	mov	r0, r3
 8017094:	370c      	adds	r7, #12
 8017096:	46bd      	mov	sp, r7
 8017098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801709c:	4770      	bx	lr

0801709e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801709e:	b580      	push	{r7, lr}
 80170a0:	b082      	sub	sp, #8
 80170a2:	af00      	add	r7, sp, #0
 80170a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170ac:	b2db      	uxtb	r3, r3
 80170ae:	2b03      	cmp	r3, #3
 80170b0:	d110      	bne.n	80170d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d00b      	beq.n	80170d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170c2:	69db      	ldr	r3, [r3, #28]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d005      	beq.n	80170d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170ce:	69db      	ldr	r3, [r3, #28]
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80170d4:	2300      	movs	r3, #0
}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3708      	adds	r7, #8
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}

080170de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80170de:	b580      	push	{r7, lr}
 80170e0:	b082      	sub	sp, #8
 80170e2:	af00      	add	r7, sp, #0
 80170e4:	6078      	str	r0, [r7, #4]
 80170e6:	460b      	mov	r3, r1
 80170e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	32ae      	adds	r2, #174	; 0xae
 80170f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d101      	bne.n	8017100 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80170fc:	2303      	movs	r3, #3
 80170fe:	e01c      	b.n	801713a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017106:	b2db      	uxtb	r3, r3
 8017108:	2b03      	cmp	r3, #3
 801710a:	d115      	bne.n	8017138 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	32ae      	adds	r2, #174	; 0xae
 8017116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801711a:	6a1b      	ldr	r3, [r3, #32]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d00b      	beq.n	8017138 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	32ae      	adds	r2, #174	; 0xae
 801712a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801712e:	6a1b      	ldr	r3, [r3, #32]
 8017130:	78fa      	ldrb	r2, [r7, #3]
 8017132:	4611      	mov	r1, r2
 8017134:	6878      	ldr	r0, [r7, #4]
 8017136:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017138:	2300      	movs	r3, #0
}
 801713a:	4618      	mov	r0, r3
 801713c:	3708      	adds	r7, #8
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}

08017142 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017142:	b580      	push	{r7, lr}
 8017144:	b082      	sub	sp, #8
 8017146:	af00      	add	r7, sp, #0
 8017148:	6078      	str	r0, [r7, #4]
 801714a:	460b      	mov	r3, r1
 801714c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	32ae      	adds	r2, #174	; 0xae
 8017158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d101      	bne.n	8017164 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8017160:	2303      	movs	r3, #3
 8017162:	e01c      	b.n	801719e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801716a:	b2db      	uxtb	r3, r3
 801716c:	2b03      	cmp	r3, #3
 801716e:	d115      	bne.n	801719c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	32ae      	adds	r2, #174	; 0xae
 801717a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017180:	2b00      	cmp	r3, #0
 8017182:	d00b      	beq.n	801719c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	32ae      	adds	r2, #174	; 0xae
 801718e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017194:	78fa      	ldrb	r2, [r7, #3]
 8017196:	4611      	mov	r1, r2
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801719c:	2300      	movs	r3, #0
}
 801719e:	4618      	mov	r0, r3
 80171a0:	3708      	adds	r7, #8
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd80      	pop	{r7, pc}

080171a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80171a6:	b480      	push	{r7}
 80171a8:	b083      	sub	sp, #12
 80171aa:	af00      	add	r7, sp, #0
 80171ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80171ae:	2300      	movs	r3, #0
}
 80171b0:	4618      	mov	r0, r3
 80171b2:	370c      	adds	r7, #12
 80171b4:	46bd      	mov	sp, r7
 80171b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ba:	4770      	bx	lr

080171bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b084      	sub	sp, #16
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80171c4:	2300      	movs	r3, #0
 80171c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	2201      	movs	r2, #1
 80171cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d00e      	beq.n	80171f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	687a      	ldr	r2, [r7, #4]
 80171e4:	6852      	ldr	r2, [r2, #4]
 80171e6:	b2d2      	uxtb	r2, r2
 80171e8:	4611      	mov	r1, r2
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	4798      	blx	r3
 80171ee:	4603      	mov	r3, r0
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d001      	beq.n	80171f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80171f4:	2303      	movs	r3, #3
 80171f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80171f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	3710      	adds	r7, #16
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}

08017202 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017202:	b480      	push	{r7}
 8017204:	b083      	sub	sp, #12
 8017206:	af00      	add	r7, sp, #0
 8017208:	6078      	str	r0, [r7, #4]
 801720a:	460b      	mov	r3, r1
 801720c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801720e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8017210:	4618      	mov	r0, r3
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	460b      	mov	r3, r1
 8017226:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8017228:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801722a:	4618      	mov	r0, r3
 801722c:	370c      	adds	r7, #12
 801722e:	46bd      	mov	sp, r7
 8017230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017234:	4770      	bx	lr

08017236 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8017236:	b580      	push	{r7, lr}
 8017238:	b086      	sub	sp, #24
 801723a:	af00      	add	r7, sp, #0
 801723c:	6078      	str	r0, [r7, #4]
 801723e:	460b      	mov	r3, r1
 8017240:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801724a:	2300      	movs	r3, #0
 801724c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	885b      	ldrh	r3, [r3, #2]
 8017252:	b29a      	uxth	r2, r3
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	b29b      	uxth	r3, r3
 801725a:	429a      	cmp	r2, r3
 801725c:	d920      	bls.n	80172a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	b29b      	uxth	r3, r3
 8017264:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8017266:	e013      	b.n	8017290 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017268:	f107 030a 	add.w	r3, r7, #10
 801726c:	4619      	mov	r1, r3
 801726e:	6978      	ldr	r0, [r7, #20]
 8017270:	f000 f81b 	bl	80172aa <USBD_GetNextDesc>
 8017274:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	785b      	ldrb	r3, [r3, #1]
 801727a:	2b05      	cmp	r3, #5
 801727c:	d108      	bne.n	8017290 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8017282:	693b      	ldr	r3, [r7, #16]
 8017284:	789b      	ldrb	r3, [r3, #2]
 8017286:	78fa      	ldrb	r2, [r7, #3]
 8017288:	429a      	cmp	r2, r3
 801728a:	d008      	beq.n	801729e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801728c:	2300      	movs	r3, #0
 801728e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	885b      	ldrh	r3, [r3, #2]
 8017294:	b29a      	uxth	r2, r3
 8017296:	897b      	ldrh	r3, [r7, #10]
 8017298:	429a      	cmp	r2, r3
 801729a:	d8e5      	bhi.n	8017268 <USBD_GetEpDesc+0x32>
 801729c:	e000      	b.n	80172a0 <USBD_GetEpDesc+0x6a>
          break;
 801729e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80172a0:	693b      	ldr	r3, [r7, #16]
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3718      	adds	r7, #24
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}

080172aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80172aa:	b480      	push	{r7}
 80172ac:	b085      	sub	sp, #20
 80172ae:	af00      	add	r7, sp, #0
 80172b0:	6078      	str	r0, [r7, #4]
 80172b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	881a      	ldrh	r2, [r3, #0]
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	781b      	ldrb	r3, [r3, #0]
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	4413      	add	r3, r2
 80172c4:	b29a      	uxth	r2, r3
 80172c6:	683b      	ldr	r3, [r7, #0]
 80172c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	461a      	mov	r2, r3
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	4413      	add	r3, r2
 80172d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80172d6:	68fb      	ldr	r3, [r7, #12]
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3714      	adds	r7, #20
 80172dc:	46bd      	mov	sp, r7
 80172de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e2:	4770      	bx	lr

080172e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80172e4:	b480      	push	{r7}
 80172e6:	b087      	sub	sp, #28
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80172f0:	697b      	ldr	r3, [r7, #20]
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	3301      	adds	r3, #1
 80172fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017302:	8a3b      	ldrh	r3, [r7, #16]
 8017304:	021b      	lsls	r3, r3, #8
 8017306:	b21a      	sxth	r2, r3
 8017308:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801730c:	4313      	orrs	r3, r2
 801730e:	b21b      	sxth	r3, r3
 8017310:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8017312:	89fb      	ldrh	r3, [r7, #14]
}
 8017314:	4618      	mov	r0, r3
 8017316:	371c      	adds	r7, #28
 8017318:	46bd      	mov	sp, r7
 801731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731e:	4770      	bx	lr

08017320 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b084      	sub	sp, #16
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801732a:	2300      	movs	r3, #0
 801732c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	781b      	ldrb	r3, [r3, #0]
 8017332:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017336:	2b40      	cmp	r3, #64	; 0x40
 8017338:	d005      	beq.n	8017346 <USBD_StdDevReq+0x26>
 801733a:	2b40      	cmp	r3, #64	; 0x40
 801733c:	d857      	bhi.n	80173ee <USBD_StdDevReq+0xce>
 801733e:	2b00      	cmp	r3, #0
 8017340:	d00f      	beq.n	8017362 <USBD_StdDevReq+0x42>
 8017342:	2b20      	cmp	r3, #32
 8017344:	d153      	bne.n	80173ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	32ae      	adds	r2, #174	; 0xae
 8017350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017354:	689b      	ldr	r3, [r3, #8]
 8017356:	6839      	ldr	r1, [r7, #0]
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	4798      	blx	r3
 801735c:	4603      	mov	r3, r0
 801735e:	73fb      	strb	r3, [r7, #15]
      break;
 8017360:	e04a      	b.n	80173f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017362:	683b      	ldr	r3, [r7, #0]
 8017364:	785b      	ldrb	r3, [r3, #1]
 8017366:	2b09      	cmp	r3, #9
 8017368:	d83b      	bhi.n	80173e2 <USBD_StdDevReq+0xc2>
 801736a:	a201      	add	r2, pc, #4	; (adr r2, 8017370 <USBD_StdDevReq+0x50>)
 801736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017370:	080173c5 	.word	0x080173c5
 8017374:	080173d9 	.word	0x080173d9
 8017378:	080173e3 	.word	0x080173e3
 801737c:	080173cf 	.word	0x080173cf
 8017380:	080173e3 	.word	0x080173e3
 8017384:	080173a3 	.word	0x080173a3
 8017388:	08017399 	.word	0x08017399
 801738c:	080173e3 	.word	0x080173e3
 8017390:	080173bb 	.word	0x080173bb
 8017394:	080173ad 	.word	0x080173ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017398:	6839      	ldr	r1, [r7, #0]
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f000 fa3c 	bl	8017818 <USBD_GetDescriptor>
          break;
 80173a0:	e024      	b.n	80173ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80173a2:	6839      	ldr	r1, [r7, #0]
 80173a4:	6878      	ldr	r0, [r7, #4]
 80173a6:	f000 fba1 	bl	8017aec <USBD_SetAddress>
          break;
 80173aa:	e01f      	b.n	80173ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80173ac:	6839      	ldr	r1, [r7, #0]
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 fbe0 	bl	8017b74 <USBD_SetConfig>
 80173b4:	4603      	mov	r3, r0
 80173b6:	73fb      	strb	r3, [r7, #15]
          break;
 80173b8:	e018      	b.n	80173ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80173ba:	6839      	ldr	r1, [r7, #0]
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	f000 fc83 	bl	8017cc8 <USBD_GetConfig>
          break;
 80173c2:	e013      	b.n	80173ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80173c4:	6839      	ldr	r1, [r7, #0]
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	f000 fcb4 	bl	8017d34 <USBD_GetStatus>
          break;
 80173cc:	e00e      	b.n	80173ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80173ce:	6839      	ldr	r1, [r7, #0]
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f000 fce3 	bl	8017d9c <USBD_SetFeature>
          break;
 80173d6:	e009      	b.n	80173ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80173d8:	6839      	ldr	r1, [r7, #0]
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f000 fd07 	bl	8017dee <USBD_ClrFeature>
          break;
 80173e0:	e004      	b.n	80173ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80173e2:	6839      	ldr	r1, [r7, #0]
 80173e4:	6878      	ldr	r0, [r7, #4]
 80173e6:	f000 fd5e 	bl	8017ea6 <USBD_CtlError>
          break;
 80173ea:	bf00      	nop
      }
      break;
 80173ec:	e004      	b.n	80173f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80173ee:	6839      	ldr	r1, [r7, #0]
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f000 fd58 	bl	8017ea6 <USBD_CtlError>
      break;
 80173f6:	bf00      	nop
  }

  return ret;
 80173f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3710      	adds	r7, #16
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
 8017402:	bf00      	nop

08017404 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b084      	sub	sp, #16
 8017408:	af00      	add	r7, sp, #0
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801740e:	2300      	movs	r3, #0
 8017410:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801741a:	2b40      	cmp	r3, #64	; 0x40
 801741c:	d005      	beq.n	801742a <USBD_StdItfReq+0x26>
 801741e:	2b40      	cmp	r3, #64	; 0x40
 8017420:	d852      	bhi.n	80174c8 <USBD_StdItfReq+0xc4>
 8017422:	2b00      	cmp	r3, #0
 8017424:	d001      	beq.n	801742a <USBD_StdItfReq+0x26>
 8017426:	2b20      	cmp	r3, #32
 8017428:	d14e      	bne.n	80174c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017430:	b2db      	uxtb	r3, r3
 8017432:	3b01      	subs	r3, #1
 8017434:	2b02      	cmp	r3, #2
 8017436:	d840      	bhi.n	80174ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	889b      	ldrh	r3, [r3, #4]
 801743c:	b2db      	uxtb	r3, r3
 801743e:	2b01      	cmp	r3, #1
 8017440:	d836      	bhi.n	80174b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	889b      	ldrh	r3, [r3, #4]
 8017446:	b2db      	uxtb	r3, r3
 8017448:	4619      	mov	r1, r3
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f7ff fed9 	bl	8017202 <USBD_CoreFindIF>
 8017450:	4603      	mov	r3, r0
 8017452:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017454:	7bbb      	ldrb	r3, [r7, #14]
 8017456:	2bff      	cmp	r3, #255	; 0xff
 8017458:	d01d      	beq.n	8017496 <USBD_StdItfReq+0x92>
 801745a:	7bbb      	ldrb	r3, [r7, #14]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d11a      	bne.n	8017496 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8017460:	7bba      	ldrb	r2, [r7, #14]
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	32ae      	adds	r2, #174	; 0xae
 8017466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801746a:	689b      	ldr	r3, [r3, #8]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d00f      	beq.n	8017490 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8017470:	7bba      	ldrb	r2, [r7, #14]
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017478:	7bba      	ldrb	r2, [r7, #14]
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	32ae      	adds	r2, #174	; 0xae
 801747e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017482:	689b      	ldr	r3, [r3, #8]
 8017484:	6839      	ldr	r1, [r7, #0]
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	4798      	blx	r3
 801748a:	4603      	mov	r3, r0
 801748c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801748e:	e004      	b.n	801749a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8017490:	2303      	movs	r3, #3
 8017492:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017494:	e001      	b.n	801749a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8017496:	2303      	movs	r3, #3
 8017498:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801749a:	683b      	ldr	r3, [r7, #0]
 801749c:	88db      	ldrh	r3, [r3, #6]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d110      	bne.n	80174c4 <USBD_StdItfReq+0xc0>
 80174a2:	7bfb      	ldrb	r3, [r7, #15]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d10d      	bne.n	80174c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	f000 fdc7 	bl	801803c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80174ae:	e009      	b.n	80174c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80174b0:	6839      	ldr	r1, [r7, #0]
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f000 fcf7 	bl	8017ea6 <USBD_CtlError>
          break;
 80174b8:	e004      	b.n	80174c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80174ba:	6839      	ldr	r1, [r7, #0]
 80174bc:	6878      	ldr	r0, [r7, #4]
 80174be:	f000 fcf2 	bl	8017ea6 <USBD_CtlError>
          break;
 80174c2:	e000      	b.n	80174c6 <USBD_StdItfReq+0xc2>
          break;
 80174c4:	bf00      	nop
      }
      break;
 80174c6:	e004      	b.n	80174d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80174c8:	6839      	ldr	r1, [r7, #0]
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f000 fceb 	bl	8017ea6 <USBD_CtlError>
      break;
 80174d0:	bf00      	nop
  }

  return ret;
 80174d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3710      	adds	r7, #16
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b084      	sub	sp, #16
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80174e6:	2300      	movs	r3, #0
 80174e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80174ea:	683b      	ldr	r3, [r7, #0]
 80174ec:	889b      	ldrh	r3, [r3, #4]
 80174ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80174f0:	683b      	ldr	r3, [r7, #0]
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80174f8:	2b40      	cmp	r3, #64	; 0x40
 80174fa:	d007      	beq.n	801750c <USBD_StdEPReq+0x30>
 80174fc:	2b40      	cmp	r3, #64	; 0x40
 80174fe:	f200 817f 	bhi.w	8017800 <USBD_StdEPReq+0x324>
 8017502:	2b00      	cmp	r3, #0
 8017504:	d02a      	beq.n	801755c <USBD_StdEPReq+0x80>
 8017506:	2b20      	cmp	r3, #32
 8017508:	f040 817a 	bne.w	8017800 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801750c:	7bbb      	ldrb	r3, [r7, #14]
 801750e:	4619      	mov	r1, r3
 8017510:	6878      	ldr	r0, [r7, #4]
 8017512:	f7ff fe83 	bl	801721c <USBD_CoreFindEP>
 8017516:	4603      	mov	r3, r0
 8017518:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801751a:	7b7b      	ldrb	r3, [r7, #13]
 801751c:	2bff      	cmp	r3, #255	; 0xff
 801751e:	f000 8174 	beq.w	801780a <USBD_StdEPReq+0x32e>
 8017522:	7b7b      	ldrb	r3, [r7, #13]
 8017524:	2b00      	cmp	r3, #0
 8017526:	f040 8170 	bne.w	801780a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801752a:	7b7a      	ldrb	r2, [r7, #13]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8017532:	7b7a      	ldrb	r2, [r7, #13]
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	32ae      	adds	r2, #174	; 0xae
 8017538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801753c:	689b      	ldr	r3, [r3, #8]
 801753e:	2b00      	cmp	r3, #0
 8017540:	f000 8163 	beq.w	801780a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017544:	7b7a      	ldrb	r2, [r7, #13]
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	32ae      	adds	r2, #174	; 0xae
 801754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801754e:	689b      	ldr	r3, [r3, #8]
 8017550:	6839      	ldr	r1, [r7, #0]
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	4798      	blx	r3
 8017556:	4603      	mov	r3, r0
 8017558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801755a:	e156      	b.n	801780a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	785b      	ldrb	r3, [r3, #1]
 8017560:	2b03      	cmp	r3, #3
 8017562:	d008      	beq.n	8017576 <USBD_StdEPReq+0x9a>
 8017564:	2b03      	cmp	r3, #3
 8017566:	f300 8145 	bgt.w	80177f4 <USBD_StdEPReq+0x318>
 801756a:	2b00      	cmp	r3, #0
 801756c:	f000 809b 	beq.w	80176a6 <USBD_StdEPReq+0x1ca>
 8017570:	2b01      	cmp	r3, #1
 8017572:	d03c      	beq.n	80175ee <USBD_StdEPReq+0x112>
 8017574:	e13e      	b.n	80177f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801757c:	b2db      	uxtb	r3, r3
 801757e:	2b02      	cmp	r3, #2
 8017580:	d002      	beq.n	8017588 <USBD_StdEPReq+0xac>
 8017582:	2b03      	cmp	r3, #3
 8017584:	d016      	beq.n	80175b4 <USBD_StdEPReq+0xd8>
 8017586:	e02c      	b.n	80175e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017588:	7bbb      	ldrb	r3, [r7, #14]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d00d      	beq.n	80175aa <USBD_StdEPReq+0xce>
 801758e:	7bbb      	ldrb	r3, [r7, #14]
 8017590:	2b80      	cmp	r3, #128	; 0x80
 8017592:	d00a      	beq.n	80175aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017594:	7bbb      	ldrb	r3, [r7, #14]
 8017596:	4619      	mov	r1, r3
 8017598:	6878      	ldr	r0, [r7, #4]
 801759a:	f004 fd0f 	bl	801bfbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801759e:	2180      	movs	r1, #128	; 0x80
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f004 fd0b 	bl	801bfbc <USBD_LL_StallEP>
 80175a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80175a8:	e020      	b.n	80175ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80175aa:	6839      	ldr	r1, [r7, #0]
 80175ac:	6878      	ldr	r0, [r7, #4]
 80175ae:	f000 fc7a 	bl	8017ea6 <USBD_CtlError>
              break;
 80175b2:	e01b      	b.n	80175ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	885b      	ldrh	r3, [r3, #2]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d10e      	bne.n	80175da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80175bc:	7bbb      	ldrb	r3, [r7, #14]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d00b      	beq.n	80175da <USBD_StdEPReq+0xfe>
 80175c2:	7bbb      	ldrb	r3, [r7, #14]
 80175c4:	2b80      	cmp	r3, #128	; 0x80
 80175c6:	d008      	beq.n	80175da <USBD_StdEPReq+0xfe>
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	88db      	ldrh	r3, [r3, #6]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d104      	bne.n	80175da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80175d0:	7bbb      	ldrb	r3, [r7, #14]
 80175d2:	4619      	mov	r1, r3
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f004 fcf1 	bl	801bfbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f000 fd2e 	bl	801803c <USBD_CtlSendStatus>

              break;
 80175e0:	e004      	b.n	80175ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80175e2:	6839      	ldr	r1, [r7, #0]
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f000 fc5e 	bl	8017ea6 <USBD_CtlError>
              break;
 80175ea:	bf00      	nop
          }
          break;
 80175ec:	e107      	b.n	80177fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	2b02      	cmp	r3, #2
 80175f8:	d002      	beq.n	8017600 <USBD_StdEPReq+0x124>
 80175fa:	2b03      	cmp	r3, #3
 80175fc:	d016      	beq.n	801762c <USBD_StdEPReq+0x150>
 80175fe:	e04b      	b.n	8017698 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017600:	7bbb      	ldrb	r3, [r7, #14]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d00d      	beq.n	8017622 <USBD_StdEPReq+0x146>
 8017606:	7bbb      	ldrb	r3, [r7, #14]
 8017608:	2b80      	cmp	r3, #128	; 0x80
 801760a:	d00a      	beq.n	8017622 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801760c:	7bbb      	ldrb	r3, [r7, #14]
 801760e:	4619      	mov	r1, r3
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f004 fcd3 	bl	801bfbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017616:	2180      	movs	r1, #128	; 0x80
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f004 fccf 	bl	801bfbc <USBD_LL_StallEP>
 801761e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017620:	e040      	b.n	80176a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017622:	6839      	ldr	r1, [r7, #0]
 8017624:	6878      	ldr	r0, [r7, #4]
 8017626:	f000 fc3e 	bl	8017ea6 <USBD_CtlError>
              break;
 801762a:	e03b      	b.n	80176a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	885b      	ldrh	r3, [r3, #2]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d136      	bne.n	80176a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017634:	7bbb      	ldrb	r3, [r7, #14]
 8017636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801763a:	2b00      	cmp	r3, #0
 801763c:	d004      	beq.n	8017648 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801763e:	7bbb      	ldrb	r3, [r7, #14]
 8017640:	4619      	mov	r1, r3
 8017642:	6878      	ldr	r0, [r7, #4]
 8017644:	f004 fcd9 	bl	801bffa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f000 fcf7 	bl	801803c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801764e:	7bbb      	ldrb	r3, [r7, #14]
 8017650:	4619      	mov	r1, r3
 8017652:	6878      	ldr	r0, [r7, #4]
 8017654:	f7ff fde2 	bl	801721c <USBD_CoreFindEP>
 8017658:	4603      	mov	r3, r0
 801765a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801765c:	7b7b      	ldrb	r3, [r7, #13]
 801765e:	2bff      	cmp	r3, #255	; 0xff
 8017660:	d01f      	beq.n	80176a2 <USBD_StdEPReq+0x1c6>
 8017662:	7b7b      	ldrb	r3, [r7, #13]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d11c      	bne.n	80176a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017668:	7b7a      	ldrb	r2, [r7, #13]
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017670:	7b7a      	ldrb	r2, [r7, #13]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	32ae      	adds	r2, #174	; 0xae
 8017676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801767a:	689b      	ldr	r3, [r3, #8]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d010      	beq.n	80176a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017680:	7b7a      	ldrb	r2, [r7, #13]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	32ae      	adds	r2, #174	; 0xae
 8017686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801768a:	689b      	ldr	r3, [r3, #8]
 801768c:	6839      	ldr	r1, [r7, #0]
 801768e:	6878      	ldr	r0, [r7, #4]
 8017690:	4798      	blx	r3
 8017692:	4603      	mov	r3, r0
 8017694:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8017696:	e004      	b.n	80176a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017698:	6839      	ldr	r1, [r7, #0]
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f000 fc03 	bl	8017ea6 <USBD_CtlError>
              break;
 80176a0:	e000      	b.n	80176a4 <USBD_StdEPReq+0x1c8>
              break;
 80176a2:	bf00      	nop
          }
          break;
 80176a4:	e0ab      	b.n	80177fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80176ac:	b2db      	uxtb	r3, r3
 80176ae:	2b02      	cmp	r3, #2
 80176b0:	d002      	beq.n	80176b8 <USBD_StdEPReq+0x1dc>
 80176b2:	2b03      	cmp	r3, #3
 80176b4:	d032      	beq.n	801771c <USBD_StdEPReq+0x240>
 80176b6:	e097      	b.n	80177e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80176b8:	7bbb      	ldrb	r3, [r7, #14]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d007      	beq.n	80176ce <USBD_StdEPReq+0x1f2>
 80176be:	7bbb      	ldrb	r3, [r7, #14]
 80176c0:	2b80      	cmp	r3, #128	; 0x80
 80176c2:	d004      	beq.n	80176ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80176c4:	6839      	ldr	r1, [r7, #0]
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f000 fbed 	bl	8017ea6 <USBD_CtlError>
                break;
 80176cc:	e091      	b.n	80177f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80176ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	da0b      	bge.n	80176ee <USBD_StdEPReq+0x212>
 80176d6:	7bbb      	ldrb	r3, [r7, #14]
 80176d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80176dc:	4613      	mov	r3, r2
 80176de:	009b      	lsls	r3, r3, #2
 80176e0:	4413      	add	r3, r2
 80176e2:	009b      	lsls	r3, r3, #2
 80176e4:	3310      	adds	r3, #16
 80176e6:	687a      	ldr	r2, [r7, #4]
 80176e8:	4413      	add	r3, r2
 80176ea:	3304      	adds	r3, #4
 80176ec:	e00b      	b.n	8017706 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80176ee:	7bbb      	ldrb	r3, [r7, #14]
 80176f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80176f4:	4613      	mov	r3, r2
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	4413      	add	r3, r2
 80176fa:	009b      	lsls	r3, r3, #2
 80176fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017700:	687a      	ldr	r2, [r7, #4]
 8017702:	4413      	add	r3, r2
 8017704:	3304      	adds	r3, #4
 8017706:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	2200      	movs	r2, #0
 801770c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801770e:	68bb      	ldr	r3, [r7, #8]
 8017710:	2202      	movs	r2, #2
 8017712:	4619      	mov	r1, r3
 8017714:	6878      	ldr	r0, [r7, #4]
 8017716:	f000 fc37 	bl	8017f88 <USBD_CtlSendData>
              break;
 801771a:	e06a      	b.n	80177f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801771c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017720:	2b00      	cmp	r3, #0
 8017722:	da11      	bge.n	8017748 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017724:	7bbb      	ldrb	r3, [r7, #14]
 8017726:	f003 020f 	and.w	r2, r3, #15
 801772a:	6879      	ldr	r1, [r7, #4]
 801772c:	4613      	mov	r3, r2
 801772e:	009b      	lsls	r3, r3, #2
 8017730:	4413      	add	r3, r2
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	440b      	add	r3, r1
 8017736:	3324      	adds	r3, #36	; 0x24
 8017738:	881b      	ldrh	r3, [r3, #0]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d117      	bne.n	801776e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801773e:	6839      	ldr	r1, [r7, #0]
 8017740:	6878      	ldr	r0, [r7, #4]
 8017742:	f000 fbb0 	bl	8017ea6 <USBD_CtlError>
                  break;
 8017746:	e054      	b.n	80177f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017748:	7bbb      	ldrb	r3, [r7, #14]
 801774a:	f003 020f 	and.w	r2, r3, #15
 801774e:	6879      	ldr	r1, [r7, #4]
 8017750:	4613      	mov	r3, r2
 8017752:	009b      	lsls	r3, r3, #2
 8017754:	4413      	add	r3, r2
 8017756:	009b      	lsls	r3, r3, #2
 8017758:	440b      	add	r3, r1
 801775a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801775e:	881b      	ldrh	r3, [r3, #0]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d104      	bne.n	801776e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017764:	6839      	ldr	r1, [r7, #0]
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f000 fb9d 	bl	8017ea6 <USBD_CtlError>
                  break;
 801776c:	e041      	b.n	80177f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801776e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017772:	2b00      	cmp	r3, #0
 8017774:	da0b      	bge.n	801778e <USBD_StdEPReq+0x2b2>
 8017776:	7bbb      	ldrb	r3, [r7, #14]
 8017778:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801777c:	4613      	mov	r3, r2
 801777e:	009b      	lsls	r3, r3, #2
 8017780:	4413      	add	r3, r2
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	3310      	adds	r3, #16
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	4413      	add	r3, r2
 801778a:	3304      	adds	r3, #4
 801778c:	e00b      	b.n	80177a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801778e:	7bbb      	ldrb	r3, [r7, #14]
 8017790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017794:	4613      	mov	r3, r2
 8017796:	009b      	lsls	r3, r3, #2
 8017798:	4413      	add	r3, r2
 801779a:	009b      	lsls	r3, r3, #2
 801779c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	4413      	add	r3, r2
 80177a4:	3304      	adds	r3, #4
 80177a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80177a8:	7bbb      	ldrb	r3, [r7, #14]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d002      	beq.n	80177b4 <USBD_StdEPReq+0x2d8>
 80177ae:	7bbb      	ldrb	r3, [r7, #14]
 80177b0:	2b80      	cmp	r3, #128	; 0x80
 80177b2:	d103      	bne.n	80177bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80177b4:	68bb      	ldr	r3, [r7, #8]
 80177b6:	2200      	movs	r2, #0
 80177b8:	601a      	str	r2, [r3, #0]
 80177ba:	e00e      	b.n	80177da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80177bc:	7bbb      	ldrb	r3, [r7, #14]
 80177be:	4619      	mov	r1, r3
 80177c0:	6878      	ldr	r0, [r7, #4]
 80177c2:	f004 fc39 	bl	801c038 <USBD_LL_IsStallEP>
 80177c6:	4603      	mov	r3, r0
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d003      	beq.n	80177d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80177cc:	68bb      	ldr	r3, [r7, #8]
 80177ce:	2201      	movs	r2, #1
 80177d0:	601a      	str	r2, [r3, #0]
 80177d2:	e002      	b.n	80177da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	2200      	movs	r2, #0
 80177d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	2202      	movs	r2, #2
 80177de:	4619      	mov	r1, r3
 80177e0:	6878      	ldr	r0, [r7, #4]
 80177e2:	f000 fbd1 	bl	8017f88 <USBD_CtlSendData>
              break;
 80177e6:	e004      	b.n	80177f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80177e8:	6839      	ldr	r1, [r7, #0]
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f000 fb5b 	bl	8017ea6 <USBD_CtlError>
              break;
 80177f0:	bf00      	nop
          }
          break;
 80177f2:	e004      	b.n	80177fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80177f4:	6839      	ldr	r1, [r7, #0]
 80177f6:	6878      	ldr	r0, [r7, #4]
 80177f8:	f000 fb55 	bl	8017ea6 <USBD_CtlError>
          break;
 80177fc:	bf00      	nop
      }
      break;
 80177fe:	e005      	b.n	801780c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017800:	6839      	ldr	r1, [r7, #0]
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f000 fb4f 	bl	8017ea6 <USBD_CtlError>
      break;
 8017808:	e000      	b.n	801780c <USBD_StdEPReq+0x330>
      break;
 801780a:	bf00      	nop
  }

  return ret;
 801780c:	7bfb      	ldrb	r3, [r7, #15]
}
 801780e:	4618      	mov	r0, r3
 8017810:	3710      	adds	r7, #16
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
	...

08017818 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b084      	sub	sp, #16
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
 8017820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017822:	2300      	movs	r3, #0
 8017824:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017826:	2300      	movs	r3, #0
 8017828:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801782a:	2300      	movs	r3, #0
 801782c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	885b      	ldrh	r3, [r3, #2]
 8017832:	0a1b      	lsrs	r3, r3, #8
 8017834:	b29b      	uxth	r3, r3
 8017836:	3b01      	subs	r3, #1
 8017838:	2b06      	cmp	r3, #6
 801783a:	f200 8128 	bhi.w	8017a8e <USBD_GetDescriptor+0x276>
 801783e:	a201      	add	r2, pc, #4	; (adr r2, 8017844 <USBD_GetDescriptor+0x2c>)
 8017840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017844:	08017861 	.word	0x08017861
 8017848:	08017879 	.word	0x08017879
 801784c:	080178b9 	.word	0x080178b9
 8017850:	08017a8f 	.word	0x08017a8f
 8017854:	08017a8f 	.word	0x08017a8f
 8017858:	08017a2f 	.word	0x08017a2f
 801785c:	08017a5b 	.word	0x08017a5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	687a      	ldr	r2, [r7, #4]
 801786a:	7c12      	ldrb	r2, [r2, #16]
 801786c:	f107 0108 	add.w	r1, r7, #8
 8017870:	4610      	mov	r0, r2
 8017872:	4798      	blx	r3
 8017874:	60f8      	str	r0, [r7, #12]
      break;
 8017876:	e112      	b.n	8017a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	7c1b      	ldrb	r3, [r3, #16]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d10d      	bne.n	801789c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017888:	f107 0208 	add.w	r2, r7, #8
 801788c:	4610      	mov	r0, r2
 801788e:	4798      	blx	r3
 8017890:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	3301      	adds	r3, #1
 8017896:	2202      	movs	r2, #2
 8017898:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801789a:	e100      	b.n	8017a9e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80178a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178a4:	f107 0208 	add.w	r2, r7, #8
 80178a8:	4610      	mov	r0, r2
 80178aa:	4798      	blx	r3
 80178ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	3301      	adds	r3, #1
 80178b2:	2202      	movs	r2, #2
 80178b4:	701a      	strb	r2, [r3, #0]
      break;
 80178b6:	e0f2      	b.n	8017a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80178b8:	683b      	ldr	r3, [r7, #0]
 80178ba:	885b      	ldrh	r3, [r3, #2]
 80178bc:	b2db      	uxtb	r3, r3
 80178be:	2b05      	cmp	r3, #5
 80178c0:	f200 80ac 	bhi.w	8017a1c <USBD_GetDescriptor+0x204>
 80178c4:	a201      	add	r2, pc, #4	; (adr r2, 80178cc <USBD_GetDescriptor+0xb4>)
 80178c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178ca:	bf00      	nop
 80178cc:	080178e5 	.word	0x080178e5
 80178d0:	08017919 	.word	0x08017919
 80178d4:	0801794d 	.word	0x0801794d
 80178d8:	08017981 	.word	0x08017981
 80178dc:	080179b5 	.word	0x080179b5
 80178e0:	080179e9 	.word	0x080179e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80178ea:	685b      	ldr	r3, [r3, #4]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d00b      	beq.n	8017908 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	687a      	ldr	r2, [r7, #4]
 80178fa:	7c12      	ldrb	r2, [r2, #16]
 80178fc:	f107 0108 	add.w	r1, r7, #8
 8017900:	4610      	mov	r0, r2
 8017902:	4798      	blx	r3
 8017904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017906:	e091      	b.n	8017a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017908:	6839      	ldr	r1, [r7, #0]
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f000 facb 	bl	8017ea6 <USBD_CtlError>
            err++;
 8017910:	7afb      	ldrb	r3, [r7, #11]
 8017912:	3301      	adds	r3, #1
 8017914:	72fb      	strb	r3, [r7, #11]
          break;
 8017916:	e089      	b.n	8017a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801791e:	689b      	ldr	r3, [r3, #8]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d00b      	beq.n	801793c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801792a:	689b      	ldr	r3, [r3, #8]
 801792c:	687a      	ldr	r2, [r7, #4]
 801792e:	7c12      	ldrb	r2, [r2, #16]
 8017930:	f107 0108 	add.w	r1, r7, #8
 8017934:	4610      	mov	r0, r2
 8017936:	4798      	blx	r3
 8017938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801793a:	e077      	b.n	8017a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801793c:	6839      	ldr	r1, [r7, #0]
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f000 fab1 	bl	8017ea6 <USBD_CtlError>
            err++;
 8017944:	7afb      	ldrb	r3, [r7, #11]
 8017946:	3301      	adds	r3, #1
 8017948:	72fb      	strb	r3, [r7, #11]
          break;
 801794a:	e06f      	b.n	8017a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017952:	68db      	ldr	r3, [r3, #12]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d00b      	beq.n	8017970 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801795e:	68db      	ldr	r3, [r3, #12]
 8017960:	687a      	ldr	r2, [r7, #4]
 8017962:	7c12      	ldrb	r2, [r2, #16]
 8017964:	f107 0108 	add.w	r1, r7, #8
 8017968:	4610      	mov	r0, r2
 801796a:	4798      	blx	r3
 801796c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801796e:	e05d      	b.n	8017a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017970:	6839      	ldr	r1, [r7, #0]
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	f000 fa97 	bl	8017ea6 <USBD_CtlError>
            err++;
 8017978:	7afb      	ldrb	r3, [r7, #11]
 801797a:	3301      	adds	r3, #1
 801797c:	72fb      	strb	r3, [r7, #11]
          break;
 801797e:	e055      	b.n	8017a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017986:	691b      	ldr	r3, [r3, #16]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d00b      	beq.n	80179a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017992:	691b      	ldr	r3, [r3, #16]
 8017994:	687a      	ldr	r2, [r7, #4]
 8017996:	7c12      	ldrb	r2, [r2, #16]
 8017998:	f107 0108 	add.w	r1, r7, #8
 801799c:	4610      	mov	r0, r2
 801799e:	4798      	blx	r3
 80179a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80179a2:	e043      	b.n	8017a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80179a4:	6839      	ldr	r1, [r7, #0]
 80179a6:	6878      	ldr	r0, [r7, #4]
 80179a8:	f000 fa7d 	bl	8017ea6 <USBD_CtlError>
            err++;
 80179ac:	7afb      	ldrb	r3, [r7, #11]
 80179ae:	3301      	adds	r3, #1
 80179b0:	72fb      	strb	r3, [r7, #11]
          break;
 80179b2:	e03b      	b.n	8017a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179ba:	695b      	ldr	r3, [r3, #20]
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d00b      	beq.n	80179d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179c6:	695b      	ldr	r3, [r3, #20]
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	7c12      	ldrb	r2, [r2, #16]
 80179cc:	f107 0108 	add.w	r1, r7, #8
 80179d0:	4610      	mov	r0, r2
 80179d2:	4798      	blx	r3
 80179d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80179d6:	e029      	b.n	8017a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80179d8:	6839      	ldr	r1, [r7, #0]
 80179da:	6878      	ldr	r0, [r7, #4]
 80179dc:	f000 fa63 	bl	8017ea6 <USBD_CtlError>
            err++;
 80179e0:	7afb      	ldrb	r3, [r7, #11]
 80179e2:	3301      	adds	r3, #1
 80179e4:	72fb      	strb	r3, [r7, #11]
          break;
 80179e6:	e021      	b.n	8017a2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179ee:	699b      	ldr	r3, [r3, #24]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d00b      	beq.n	8017a0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80179fa:	699b      	ldr	r3, [r3, #24]
 80179fc:	687a      	ldr	r2, [r7, #4]
 80179fe:	7c12      	ldrb	r2, [r2, #16]
 8017a00:	f107 0108 	add.w	r1, r7, #8
 8017a04:	4610      	mov	r0, r2
 8017a06:	4798      	blx	r3
 8017a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017a0a:	e00f      	b.n	8017a2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8017a0c:	6839      	ldr	r1, [r7, #0]
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f000 fa49 	bl	8017ea6 <USBD_CtlError>
            err++;
 8017a14:	7afb      	ldrb	r3, [r7, #11]
 8017a16:	3301      	adds	r3, #1
 8017a18:	72fb      	strb	r3, [r7, #11]
          break;
 8017a1a:	e007      	b.n	8017a2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017a1c:	6839      	ldr	r1, [r7, #0]
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f000 fa41 	bl	8017ea6 <USBD_CtlError>
          err++;
 8017a24:	7afb      	ldrb	r3, [r7, #11]
 8017a26:	3301      	adds	r3, #1
 8017a28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017a2a:	bf00      	nop
      }
      break;
 8017a2c:	e037      	b.n	8017a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	7c1b      	ldrb	r3, [r3, #16]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d109      	bne.n	8017a4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a3e:	f107 0208 	add.w	r2, r7, #8
 8017a42:	4610      	mov	r0, r2
 8017a44:	4798      	blx	r3
 8017a46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017a48:	e029      	b.n	8017a9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017a4a:	6839      	ldr	r1, [r7, #0]
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	f000 fa2a 	bl	8017ea6 <USBD_CtlError>
        err++;
 8017a52:	7afb      	ldrb	r3, [r7, #11]
 8017a54:	3301      	adds	r3, #1
 8017a56:	72fb      	strb	r3, [r7, #11]
      break;
 8017a58:	e021      	b.n	8017a9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	7c1b      	ldrb	r3, [r3, #16]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d10d      	bne.n	8017a7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a6a:	f107 0208 	add.w	r2, r7, #8
 8017a6e:	4610      	mov	r0, r2
 8017a70:	4798      	blx	r3
 8017a72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	3301      	adds	r3, #1
 8017a78:	2207      	movs	r2, #7
 8017a7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017a7c:	e00f      	b.n	8017a9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8017a7e:	6839      	ldr	r1, [r7, #0]
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f000 fa10 	bl	8017ea6 <USBD_CtlError>
        err++;
 8017a86:	7afb      	ldrb	r3, [r7, #11]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8017a8c:	e007      	b.n	8017a9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8017a8e:	6839      	ldr	r1, [r7, #0]
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f000 fa08 	bl	8017ea6 <USBD_CtlError>
      err++;
 8017a96:	7afb      	ldrb	r3, [r7, #11]
 8017a98:	3301      	adds	r3, #1
 8017a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8017a9c:	bf00      	nop
  }

  if (err != 0U)
 8017a9e:	7afb      	ldrb	r3, [r7, #11]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d11e      	bne.n	8017ae2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8017aa4:	683b      	ldr	r3, [r7, #0]
 8017aa6:	88db      	ldrh	r3, [r3, #6]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d016      	beq.n	8017ada <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8017aac:	893b      	ldrh	r3, [r7, #8]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d00e      	beq.n	8017ad0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	88da      	ldrh	r2, [r3, #6]
 8017ab6:	893b      	ldrh	r3, [r7, #8]
 8017ab8:	4293      	cmp	r3, r2
 8017aba:	bf28      	it	cs
 8017abc:	4613      	movcs	r3, r2
 8017abe:	b29b      	uxth	r3, r3
 8017ac0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017ac2:	893b      	ldrh	r3, [r7, #8]
 8017ac4:	461a      	mov	r2, r3
 8017ac6:	68f9      	ldr	r1, [r7, #12]
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	f000 fa5d 	bl	8017f88 <USBD_CtlSendData>
 8017ace:	e009      	b.n	8017ae4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017ad0:	6839      	ldr	r1, [r7, #0]
 8017ad2:	6878      	ldr	r0, [r7, #4]
 8017ad4:	f000 f9e7 	bl	8017ea6 <USBD_CtlError>
 8017ad8:	e004      	b.n	8017ae4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017ada:	6878      	ldr	r0, [r7, #4]
 8017adc:	f000 faae 	bl	801803c <USBD_CtlSendStatus>
 8017ae0:	e000      	b.n	8017ae4 <USBD_GetDescriptor+0x2cc>
    return;
 8017ae2:	bf00      	nop
  }
}
 8017ae4:	3710      	adds	r7, #16
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd80      	pop	{r7, pc}
 8017aea:	bf00      	nop

08017aec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b084      	sub	sp, #16
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
 8017af4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	889b      	ldrh	r3, [r3, #4]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d131      	bne.n	8017b62 <USBD_SetAddress+0x76>
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	88db      	ldrh	r3, [r3, #6]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d12d      	bne.n	8017b62 <USBD_SetAddress+0x76>
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	885b      	ldrh	r3, [r3, #2]
 8017b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8017b0c:	d829      	bhi.n	8017b62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	885b      	ldrh	r3, [r3, #2]
 8017b12:	b2db      	uxtb	r3, r3
 8017b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017b20:	b2db      	uxtb	r3, r3
 8017b22:	2b03      	cmp	r3, #3
 8017b24:	d104      	bne.n	8017b30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017b26:	6839      	ldr	r1, [r7, #0]
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f000 f9bc 	bl	8017ea6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017b2e:	e01d      	b.n	8017b6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	7bfa      	ldrb	r2, [r7, #15]
 8017b34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017b38:	7bfb      	ldrb	r3, [r7, #15]
 8017b3a:	4619      	mov	r1, r3
 8017b3c:	6878      	ldr	r0, [r7, #4]
 8017b3e:	f004 faa7 	bl	801c090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017b42:	6878      	ldr	r0, [r7, #4]
 8017b44:	f000 fa7a 	bl	801803c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017b48:	7bfb      	ldrb	r3, [r7, #15]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d004      	beq.n	8017b58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2202      	movs	r2, #2
 8017b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017b56:	e009      	b.n	8017b6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2201      	movs	r2, #1
 8017b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017b60:	e004      	b.n	8017b6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017b62:	6839      	ldr	r1, [r7, #0]
 8017b64:	6878      	ldr	r0, [r7, #4]
 8017b66:	f000 f99e 	bl	8017ea6 <USBD_CtlError>
  }
}
 8017b6a:	bf00      	nop
 8017b6c:	bf00      	nop
 8017b6e:	3710      	adds	r7, #16
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b084      	sub	sp, #16
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
 8017b7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017b7e:	2300      	movs	r3, #0
 8017b80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	885b      	ldrh	r3, [r3, #2]
 8017b86:	b2da      	uxtb	r2, r3
 8017b88:	4b4e      	ldr	r3, [pc, #312]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017b8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017b8c:	4b4d      	ldr	r3, [pc, #308]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017b8e:	781b      	ldrb	r3, [r3, #0]
 8017b90:	2b01      	cmp	r3, #1
 8017b92:	d905      	bls.n	8017ba0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017b94:	6839      	ldr	r1, [r7, #0]
 8017b96:	6878      	ldr	r0, [r7, #4]
 8017b98:	f000 f985 	bl	8017ea6 <USBD_CtlError>
    return USBD_FAIL;
 8017b9c:	2303      	movs	r3, #3
 8017b9e:	e08c      	b.n	8017cba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017ba6:	b2db      	uxtb	r3, r3
 8017ba8:	2b02      	cmp	r3, #2
 8017baa:	d002      	beq.n	8017bb2 <USBD_SetConfig+0x3e>
 8017bac:	2b03      	cmp	r3, #3
 8017bae:	d029      	beq.n	8017c04 <USBD_SetConfig+0x90>
 8017bb0:	e075      	b.n	8017c9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017bb2:	4b44      	ldr	r3, [pc, #272]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017bb4:	781b      	ldrb	r3, [r3, #0]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d020      	beq.n	8017bfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8017bba:	4b42      	ldr	r3, [pc, #264]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017bbc:	781b      	ldrb	r3, [r3, #0]
 8017bbe:	461a      	mov	r2, r3
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017bc4:	4b3f      	ldr	r3, [pc, #252]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017bc6:	781b      	ldrb	r3, [r3, #0]
 8017bc8:	4619      	mov	r1, r3
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f7fe ffe1 	bl	8016b92 <USBD_SetClassConfig>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017bd4:	7bfb      	ldrb	r3, [r7, #15]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d008      	beq.n	8017bec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8017bda:	6839      	ldr	r1, [r7, #0]
 8017bdc:	6878      	ldr	r0, [r7, #4]
 8017bde:	f000 f962 	bl	8017ea6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	2202      	movs	r2, #2
 8017be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017bea:	e065      	b.n	8017cb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017bec:	6878      	ldr	r0, [r7, #4]
 8017bee:	f000 fa25 	bl	801803c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	2203      	movs	r2, #3
 8017bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017bfa:	e05d      	b.n	8017cb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f000 fa1d 	bl	801803c <USBD_CtlSendStatus>
      break;
 8017c02:	e059      	b.n	8017cb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017c04:	4b2f      	ldr	r3, [pc, #188]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d112      	bne.n	8017c32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	2202      	movs	r2, #2
 8017c10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017c14:	4b2b      	ldr	r3, [pc, #172]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017c16:	781b      	ldrb	r3, [r3, #0]
 8017c18:	461a      	mov	r2, r3
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017c1e:	4b29      	ldr	r3, [pc, #164]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017c20:	781b      	ldrb	r3, [r3, #0]
 8017c22:	4619      	mov	r1, r3
 8017c24:	6878      	ldr	r0, [r7, #4]
 8017c26:	f7fe ffd0 	bl	8016bca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f000 fa06 	bl	801803c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017c30:	e042      	b.n	8017cb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017c32:	4b24      	ldr	r3, [pc, #144]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017c34:	781b      	ldrb	r3, [r3, #0]
 8017c36:	461a      	mov	r2, r3
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	685b      	ldr	r3, [r3, #4]
 8017c3c:	429a      	cmp	r2, r3
 8017c3e:	d02a      	beq.n	8017c96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	685b      	ldr	r3, [r3, #4]
 8017c44:	b2db      	uxtb	r3, r3
 8017c46:	4619      	mov	r1, r3
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	f7fe ffbe 	bl	8016bca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017c4e:	4b1d      	ldr	r3, [pc, #116]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017c50:	781b      	ldrb	r3, [r3, #0]
 8017c52:	461a      	mov	r2, r3
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017c58:	4b1a      	ldr	r3, [pc, #104]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017c5a:	781b      	ldrb	r3, [r3, #0]
 8017c5c:	4619      	mov	r1, r3
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	f7fe ff97 	bl	8016b92 <USBD_SetClassConfig>
 8017c64:	4603      	mov	r3, r0
 8017c66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017c68:	7bfb      	ldrb	r3, [r7, #15]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d00f      	beq.n	8017c8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8017c6e:	6839      	ldr	r1, [r7, #0]
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f000 f918 	bl	8017ea6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	b2db      	uxtb	r3, r3
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	6878      	ldr	r0, [r7, #4]
 8017c80:	f7fe ffa3 	bl	8016bca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2202      	movs	r2, #2
 8017c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017c8c:	e014      	b.n	8017cb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f000 f9d4 	bl	801803c <USBD_CtlSendStatus>
      break;
 8017c94:	e010      	b.n	8017cb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f000 f9d0 	bl	801803c <USBD_CtlSendStatus>
      break;
 8017c9c:	e00c      	b.n	8017cb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8017c9e:	6839      	ldr	r1, [r7, #0]
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	f000 f900 	bl	8017ea6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017ca6:	4b07      	ldr	r3, [pc, #28]	; (8017cc4 <USBD_SetConfig+0x150>)
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	4619      	mov	r1, r3
 8017cac:	6878      	ldr	r0, [r7, #4]
 8017cae:	f7fe ff8c 	bl	8016bca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017cb2:	2303      	movs	r3, #3
 8017cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8017cb6:	bf00      	nop
  }

  return ret;
 8017cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cba:	4618      	mov	r0, r3
 8017cbc:	3710      	adds	r7, #16
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	2000a308 	.word	0x2000a308

08017cc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b082      	sub	sp, #8
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
 8017cd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	88db      	ldrh	r3, [r3, #6]
 8017cd6:	2b01      	cmp	r3, #1
 8017cd8:	d004      	beq.n	8017ce4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017cda:	6839      	ldr	r1, [r7, #0]
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f000 f8e2 	bl	8017ea6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017ce2:	e023      	b.n	8017d2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017cea:	b2db      	uxtb	r3, r3
 8017cec:	2b02      	cmp	r3, #2
 8017cee:	dc02      	bgt.n	8017cf6 <USBD_GetConfig+0x2e>
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	dc03      	bgt.n	8017cfc <USBD_GetConfig+0x34>
 8017cf4:	e015      	b.n	8017d22 <USBD_GetConfig+0x5a>
 8017cf6:	2b03      	cmp	r3, #3
 8017cf8:	d00b      	beq.n	8017d12 <USBD_GetConfig+0x4a>
 8017cfa:	e012      	b.n	8017d22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2200      	movs	r2, #0
 8017d00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	3308      	adds	r3, #8
 8017d06:	2201      	movs	r2, #1
 8017d08:	4619      	mov	r1, r3
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f000 f93c 	bl	8017f88 <USBD_CtlSendData>
        break;
 8017d10:	e00c      	b.n	8017d2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	3304      	adds	r3, #4
 8017d16:	2201      	movs	r2, #1
 8017d18:	4619      	mov	r1, r3
 8017d1a:	6878      	ldr	r0, [r7, #4]
 8017d1c:	f000 f934 	bl	8017f88 <USBD_CtlSendData>
        break;
 8017d20:	e004      	b.n	8017d2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017d22:	6839      	ldr	r1, [r7, #0]
 8017d24:	6878      	ldr	r0, [r7, #4]
 8017d26:	f000 f8be 	bl	8017ea6 <USBD_CtlError>
        break;
 8017d2a:	bf00      	nop
}
 8017d2c:	bf00      	nop
 8017d2e:	3708      	adds	r7, #8
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b082      	sub	sp, #8
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
 8017d3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	3b01      	subs	r3, #1
 8017d48:	2b02      	cmp	r3, #2
 8017d4a:	d81e      	bhi.n	8017d8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	88db      	ldrh	r3, [r3, #6]
 8017d50:	2b02      	cmp	r3, #2
 8017d52:	d004      	beq.n	8017d5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017d54:	6839      	ldr	r1, [r7, #0]
 8017d56:	6878      	ldr	r0, [r7, #4]
 8017d58:	f000 f8a5 	bl	8017ea6 <USBD_CtlError>
        break;
 8017d5c:	e01a      	b.n	8017d94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2201      	movs	r2, #1
 8017d62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d005      	beq.n	8017d7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	68db      	ldr	r3, [r3, #12]
 8017d72:	f043 0202 	orr.w	r2, r3, #2
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	330c      	adds	r3, #12
 8017d7e:	2202      	movs	r2, #2
 8017d80:	4619      	mov	r1, r3
 8017d82:	6878      	ldr	r0, [r7, #4]
 8017d84:	f000 f900 	bl	8017f88 <USBD_CtlSendData>
      break;
 8017d88:	e004      	b.n	8017d94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017d8a:	6839      	ldr	r1, [r7, #0]
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f000 f88a 	bl	8017ea6 <USBD_CtlError>
      break;
 8017d92:	bf00      	nop
  }
}
 8017d94:	bf00      	nop
 8017d96:	3708      	adds	r7, #8
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
 8017da4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	885b      	ldrh	r3, [r3, #2]
 8017daa:	2b01      	cmp	r3, #1
 8017dac:	d107      	bne.n	8017dbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2201      	movs	r2, #1
 8017db2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f000 f940 	bl	801803c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8017dbc:	e013      	b.n	8017de6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	885b      	ldrh	r3, [r3, #2]
 8017dc2:	2b02      	cmp	r3, #2
 8017dc4:	d10b      	bne.n	8017dde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8017dc6:	683b      	ldr	r3, [r7, #0]
 8017dc8:	889b      	ldrh	r3, [r3, #4]
 8017dca:	0a1b      	lsrs	r3, r3, #8
 8017dcc:	b29b      	uxth	r3, r3
 8017dce:	b2da      	uxtb	r2, r3
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	f000 f930 	bl	801803c <USBD_CtlSendStatus>
}
 8017ddc:	e003      	b.n	8017de6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8017dde:	6839      	ldr	r1, [r7, #0]
 8017de0:	6878      	ldr	r0, [r7, #4]
 8017de2:	f000 f860 	bl	8017ea6 <USBD_CtlError>
}
 8017de6:	bf00      	nop
 8017de8:	3708      	adds	r7, #8
 8017dea:	46bd      	mov	sp, r7
 8017dec:	bd80      	pop	{r7, pc}

08017dee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017dee:	b580      	push	{r7, lr}
 8017df0:	b082      	sub	sp, #8
 8017df2:	af00      	add	r7, sp, #0
 8017df4:	6078      	str	r0, [r7, #4]
 8017df6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017dfe:	b2db      	uxtb	r3, r3
 8017e00:	3b01      	subs	r3, #1
 8017e02:	2b02      	cmp	r3, #2
 8017e04:	d80b      	bhi.n	8017e1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017e06:	683b      	ldr	r3, [r7, #0]
 8017e08:	885b      	ldrh	r3, [r3, #2]
 8017e0a:	2b01      	cmp	r3, #1
 8017e0c:	d10c      	bne.n	8017e28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2200      	movs	r2, #0
 8017e12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f000 f910 	bl	801803c <USBD_CtlSendStatus>
      }
      break;
 8017e1c:	e004      	b.n	8017e28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017e1e:	6839      	ldr	r1, [r7, #0]
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f000 f840 	bl	8017ea6 <USBD_CtlError>
      break;
 8017e26:	e000      	b.n	8017e2a <USBD_ClrFeature+0x3c>
      break;
 8017e28:	bf00      	nop
  }
}
 8017e2a:	bf00      	nop
 8017e2c:	3708      	adds	r7, #8
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	bd80      	pop	{r7, pc}

08017e32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017e32:	b580      	push	{r7, lr}
 8017e34:	b084      	sub	sp, #16
 8017e36:	af00      	add	r7, sp, #0
 8017e38:	6078      	str	r0, [r7, #4]
 8017e3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017e3c:	683b      	ldr	r3, [r7, #0]
 8017e3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	781a      	ldrb	r2, [r3, #0]
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	3301      	adds	r3, #1
 8017e4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	781a      	ldrb	r2, [r3, #0]
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	3301      	adds	r3, #1
 8017e5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017e5c:	68f8      	ldr	r0, [r7, #12]
 8017e5e:	f7ff fa41 	bl	80172e4 <SWAPBYTE>
 8017e62:	4603      	mov	r3, r0
 8017e64:	461a      	mov	r2, r3
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	3301      	adds	r3, #1
 8017e6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	3301      	adds	r3, #1
 8017e74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017e76:	68f8      	ldr	r0, [r7, #12]
 8017e78:	f7ff fa34 	bl	80172e4 <SWAPBYTE>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	461a      	mov	r2, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	3301      	adds	r3, #1
 8017e88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	3301      	adds	r3, #1
 8017e8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017e90:	68f8      	ldr	r0, [r7, #12]
 8017e92:	f7ff fa27 	bl	80172e4 <SWAPBYTE>
 8017e96:	4603      	mov	r3, r0
 8017e98:	461a      	mov	r2, r3
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	80da      	strh	r2, [r3, #6]
}
 8017e9e:	bf00      	nop
 8017ea0:	3710      	adds	r7, #16
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}

08017ea6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017ea6:	b580      	push	{r7, lr}
 8017ea8:	b082      	sub	sp, #8
 8017eaa:	af00      	add	r7, sp, #0
 8017eac:	6078      	str	r0, [r7, #4]
 8017eae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8017eb0:	2180      	movs	r1, #128	; 0x80
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f004 f882 	bl	801bfbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017eb8:	2100      	movs	r1, #0
 8017eba:	6878      	ldr	r0, [r7, #4]
 8017ebc:	f004 f87e 	bl	801bfbc <USBD_LL_StallEP>
}
 8017ec0:	bf00      	nop
 8017ec2:	3708      	adds	r7, #8
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd80      	pop	{r7, pc}

08017ec8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017ec8:	b580      	push	{r7, lr}
 8017eca:	b086      	sub	sp, #24
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	60f8      	str	r0, [r7, #12]
 8017ed0:	60b9      	str	r1, [r7, #8]
 8017ed2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d036      	beq.n	8017f4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017ee2:	6938      	ldr	r0, [r7, #16]
 8017ee4:	f000 f836 	bl	8017f54 <USBD_GetLen>
 8017ee8:	4603      	mov	r3, r0
 8017eea:	3301      	adds	r3, #1
 8017eec:	b29b      	uxth	r3, r3
 8017eee:	005b      	lsls	r3, r3, #1
 8017ef0:	b29a      	uxth	r2, r3
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017ef6:	7dfb      	ldrb	r3, [r7, #23]
 8017ef8:	68ba      	ldr	r2, [r7, #8]
 8017efa:	4413      	add	r3, r2
 8017efc:	687a      	ldr	r2, [r7, #4]
 8017efe:	7812      	ldrb	r2, [r2, #0]
 8017f00:	701a      	strb	r2, [r3, #0]
  idx++;
 8017f02:	7dfb      	ldrb	r3, [r7, #23]
 8017f04:	3301      	adds	r3, #1
 8017f06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017f08:	7dfb      	ldrb	r3, [r7, #23]
 8017f0a:	68ba      	ldr	r2, [r7, #8]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	2203      	movs	r2, #3
 8017f10:	701a      	strb	r2, [r3, #0]
  idx++;
 8017f12:	7dfb      	ldrb	r3, [r7, #23]
 8017f14:	3301      	adds	r3, #1
 8017f16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017f18:	e013      	b.n	8017f42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017f1a:	7dfb      	ldrb	r3, [r7, #23]
 8017f1c:	68ba      	ldr	r2, [r7, #8]
 8017f1e:	4413      	add	r3, r2
 8017f20:	693a      	ldr	r2, [r7, #16]
 8017f22:	7812      	ldrb	r2, [r2, #0]
 8017f24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	3301      	adds	r3, #1
 8017f2a:	613b      	str	r3, [r7, #16]
    idx++;
 8017f2c:	7dfb      	ldrb	r3, [r7, #23]
 8017f2e:	3301      	adds	r3, #1
 8017f30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017f32:	7dfb      	ldrb	r3, [r7, #23]
 8017f34:	68ba      	ldr	r2, [r7, #8]
 8017f36:	4413      	add	r3, r2
 8017f38:	2200      	movs	r2, #0
 8017f3a:	701a      	strb	r2, [r3, #0]
    idx++;
 8017f3c:	7dfb      	ldrb	r3, [r7, #23]
 8017f3e:	3301      	adds	r3, #1
 8017f40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017f42:	693b      	ldr	r3, [r7, #16]
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d1e7      	bne.n	8017f1a <USBD_GetString+0x52>
 8017f4a:	e000      	b.n	8017f4e <USBD_GetString+0x86>
    return;
 8017f4c:	bf00      	nop
  }
}
 8017f4e:	3718      	adds	r7, #24
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}

08017f54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017f54:	b480      	push	{r7}
 8017f56:	b085      	sub	sp, #20
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017f64:	e005      	b.n	8017f72 <USBD_GetLen+0x1e>
  {
    len++;
 8017f66:	7bfb      	ldrb	r3, [r7, #15]
 8017f68:	3301      	adds	r3, #1
 8017f6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	3301      	adds	r3, #1
 8017f70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017f72:	68bb      	ldr	r3, [r7, #8]
 8017f74:	781b      	ldrb	r3, [r3, #0]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d1f5      	bne.n	8017f66 <USBD_GetLen+0x12>
  }

  return len;
 8017f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3714      	adds	r7, #20
 8017f80:	46bd      	mov	sp, r7
 8017f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f86:	4770      	bx	lr

08017f88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	b084      	sub	sp, #16
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	2202      	movs	r2, #2
 8017f98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	687a      	ldr	r2, [r7, #4]
 8017fa0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	687a      	ldr	r2, [r7, #4]
 8017fa6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	68ba      	ldr	r2, [r7, #8]
 8017fac:	2100      	movs	r1, #0
 8017fae:	68f8      	ldr	r0, [r7, #12]
 8017fb0:	f004 f88d 	bl	801c0ce <USBD_LL_Transmit>

  return USBD_OK;
 8017fb4:	2300      	movs	r3, #0
}
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}

08017fbe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017fbe:	b580      	push	{r7, lr}
 8017fc0:	b084      	sub	sp, #16
 8017fc2:	af00      	add	r7, sp, #0
 8017fc4:	60f8      	str	r0, [r7, #12]
 8017fc6:	60b9      	str	r1, [r7, #8]
 8017fc8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	68ba      	ldr	r2, [r7, #8]
 8017fce:	2100      	movs	r1, #0
 8017fd0:	68f8      	ldr	r0, [r7, #12]
 8017fd2:	f004 f87c 	bl	801c0ce <USBD_LL_Transmit>

  return USBD_OK;
 8017fd6:	2300      	movs	r3, #0
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	3710      	adds	r7, #16
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b084      	sub	sp, #16
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	60f8      	str	r0, [r7, #12]
 8017fe8:	60b9      	str	r1, [r7, #8]
 8017fea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	2203      	movs	r2, #3
 8017ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	687a      	ldr	r2, [r7, #4]
 8017ff8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	687a      	ldr	r2, [r7, #4]
 8018000:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	68ba      	ldr	r2, [r7, #8]
 8018008:	2100      	movs	r1, #0
 801800a:	68f8      	ldr	r0, [r7, #12]
 801800c:	f004 f880 	bl	801c110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018010:	2300      	movs	r3, #0
}
 8018012:	4618      	mov	r0, r3
 8018014:	3710      	adds	r7, #16
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}

0801801a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801801a:	b580      	push	{r7, lr}
 801801c:	b084      	sub	sp, #16
 801801e:	af00      	add	r7, sp, #0
 8018020:	60f8      	str	r0, [r7, #12]
 8018022:	60b9      	str	r1, [r7, #8]
 8018024:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	68ba      	ldr	r2, [r7, #8]
 801802a:	2100      	movs	r1, #0
 801802c:	68f8      	ldr	r0, [r7, #12]
 801802e:	f004 f86f 	bl	801c110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018032:	2300      	movs	r3, #0
}
 8018034:	4618      	mov	r0, r3
 8018036:	3710      	adds	r7, #16
 8018038:	46bd      	mov	sp, r7
 801803a:	bd80      	pop	{r7, pc}

0801803c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2204      	movs	r2, #4
 8018048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801804c:	2300      	movs	r3, #0
 801804e:	2200      	movs	r2, #0
 8018050:	2100      	movs	r1, #0
 8018052:	6878      	ldr	r0, [r7, #4]
 8018054:	f004 f83b 	bl	801c0ce <USBD_LL_Transmit>

  return USBD_OK;
 8018058:	2300      	movs	r3, #0
}
 801805a:	4618      	mov	r0, r3
 801805c:	3708      	adds	r7, #8
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}

08018062 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018062:	b580      	push	{r7, lr}
 8018064:	b082      	sub	sp, #8
 8018066:	af00      	add	r7, sp, #0
 8018068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2205      	movs	r2, #5
 801806e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018072:	2300      	movs	r3, #0
 8018074:	2200      	movs	r2, #0
 8018076:	2100      	movs	r1, #0
 8018078:	6878      	ldr	r0, [r7, #4]
 801807a:	f004 f849 	bl	801c110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801807e:	2300      	movs	r3, #0
}
 8018080:	4618      	mov	r0, r3
 8018082:	3708      	adds	r7, #8
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}

08018088 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8018088:	b480      	push	{r7}
 801808a:	b085      	sub	sp, #20
 801808c:	af00      	add	r7, sp, #0
 801808e:	4603      	mov	r3, r0
 8018090:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018092:	2300      	movs	r3, #0
 8018094:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8018096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801809a:	2b84      	cmp	r3, #132	; 0x84
 801809c:	d005      	beq.n	80180aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801809e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	4413      	add	r3, r2
 80180a6:	3303      	adds	r3, #3
 80180a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80180aa:	68fb      	ldr	r3, [r7, #12]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3714      	adds	r7, #20
 80180b0:	46bd      	mov	sp, r7
 80180b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b6:	4770      	bx	lr

080180b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80180bc:	f001 fae8 	bl	8019690 <vTaskStartScheduler>
  
  return osOK;
 80180c0:	2300      	movs	r3, #0
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	bd80      	pop	{r7, pc}

080180c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80180c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180c8:	b089      	sub	sp, #36	; 0x24
 80180ca:	af04      	add	r7, sp, #16
 80180cc:	6078      	str	r0, [r7, #4]
 80180ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	695b      	ldr	r3, [r3, #20]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d020      	beq.n	801811a <osThreadCreate+0x54>
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	699b      	ldr	r3, [r3, #24]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d01c      	beq.n	801811a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	685c      	ldr	r4, [r3, #4]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	691e      	ldr	r6, [r3, #16]
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7ff ffc8 	bl	8018088 <makeFreeRtosPriority>
 80180f8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	695b      	ldr	r3, [r3, #20]
 80180fe:	687a      	ldr	r2, [r7, #4]
 8018100:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018102:	9202      	str	r2, [sp, #8]
 8018104:	9301      	str	r3, [sp, #4]
 8018106:	9100      	str	r1, [sp, #0]
 8018108:	683b      	ldr	r3, [r7, #0]
 801810a:	4632      	mov	r2, r6
 801810c:	4629      	mov	r1, r5
 801810e:	4620      	mov	r0, r4
 8018110:	f001 f86c 	bl	80191ec <xTaskCreateStatic>
 8018114:	4603      	mov	r3, r0
 8018116:	60fb      	str	r3, [r7, #12]
 8018118:	e01c      	b.n	8018154 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	685c      	ldr	r4, [r3, #4]
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018126:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801812e:	4618      	mov	r0, r3
 8018130:	f7ff ffaa 	bl	8018088 <makeFreeRtosPriority>
 8018134:	4602      	mov	r2, r0
 8018136:	f107 030c 	add.w	r3, r7, #12
 801813a:	9301      	str	r3, [sp, #4]
 801813c:	9200      	str	r2, [sp, #0]
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	4632      	mov	r2, r6
 8018142:	4629      	mov	r1, r5
 8018144:	4620      	mov	r0, r4
 8018146:	f001 f8a7 	bl	8019298 <xTaskCreate>
 801814a:	4603      	mov	r3, r0
 801814c:	2b01      	cmp	r3, #1
 801814e:	d001      	beq.n	8018154 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8018150:	2300      	movs	r3, #0
 8018152:	e000      	b.n	8018156 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8018154:	68fb      	ldr	r3, [r7, #12]
}
 8018156:	4618      	mov	r0, r3
 8018158:	3714      	adds	r7, #20
 801815a:	46bd      	mov	sp, r7
 801815c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018160 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b084      	sub	sp, #16
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	4a09      	ldr	r2, [pc, #36]	; (8018190 <osDelay+0x30>)
 801816c:	fba2 2303 	umull	r2, r3, r2, r3
 8018170:	099b      	lsrs	r3, r3, #6
 8018172:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d001      	beq.n	801817e <osDelay+0x1e>
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	e000      	b.n	8018180 <osDelay+0x20>
 801817e:	2301      	movs	r3, #1
 8018180:	4618      	mov	r0, r3
 8018182:	f001 f9eb 	bl	801955c <vTaskDelay>
  
  return osOK;
 8018186:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018188:	4618      	mov	r0, r3
 801818a:	3710      	adds	r7, #16
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}
 8018190:	10624dd3 	.word	0x10624dd3

08018194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	f103 0208 	add.w	r2, r3, #8
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80181ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f103 0208 	add.w	r2, r3, #8
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	f103 0208 	add.w	r2, r3, #8
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	2200      	movs	r2, #0
 80181c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80181c8:	bf00      	nop
 80181ca:	370c      	adds	r7, #12
 80181cc:	46bd      	mov	sp, r7
 80181ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d2:	4770      	bx	lr

080181d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80181d4:	b480      	push	{r7}
 80181d6:	b083      	sub	sp, #12
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	2200      	movs	r2, #0
 80181e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80181e2:	bf00      	nop
 80181e4:	370c      	adds	r7, #12
 80181e6:	46bd      	mov	sp, r7
 80181e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ec:	4770      	bx	lr

080181ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80181ee:	b480      	push	{r7}
 80181f0:	b085      	sub	sp, #20
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	6078      	str	r0, [r7, #4]
 80181f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	68fa      	ldr	r2, [r7, #12]
 8018202:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	689a      	ldr	r2, [r3, #8]
 8018208:	683b      	ldr	r3, [r7, #0]
 801820a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	689b      	ldr	r3, [r3, #8]
 8018210:	683a      	ldr	r2, [r7, #0]
 8018212:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	683a      	ldr	r2, [r7, #0]
 8018218:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	687a      	ldr	r2, [r7, #4]
 801821e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	1c5a      	adds	r2, r3, #1
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	601a      	str	r2, [r3, #0]
}
 801822a:	bf00      	nop
 801822c:	3714      	adds	r7, #20
 801822e:	46bd      	mov	sp, r7
 8018230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018234:	4770      	bx	lr

08018236 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018236:	b480      	push	{r7}
 8018238:	b085      	sub	sp, #20
 801823a:	af00      	add	r7, sp, #0
 801823c:	6078      	str	r0, [r7, #4]
 801823e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018240:	683b      	ldr	r3, [r7, #0]
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018246:	68bb      	ldr	r3, [r7, #8]
 8018248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801824c:	d103      	bne.n	8018256 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	691b      	ldr	r3, [r3, #16]
 8018252:	60fb      	str	r3, [r7, #12]
 8018254:	e00c      	b.n	8018270 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	3308      	adds	r3, #8
 801825a:	60fb      	str	r3, [r7, #12]
 801825c:	e002      	b.n	8018264 <vListInsert+0x2e>
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	685b      	ldr	r3, [r3, #4]
 8018262:	60fb      	str	r3, [r7, #12]
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	68ba      	ldr	r2, [r7, #8]
 801826c:	429a      	cmp	r2, r3
 801826e:	d2f6      	bcs.n	801825e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	685a      	ldr	r2, [r3, #4]
 8018274:	683b      	ldr	r3, [r7, #0]
 8018276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	683a      	ldr	r2, [r7, #0]
 801827e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	68fa      	ldr	r2, [r7, #12]
 8018284:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	683a      	ldr	r2, [r7, #0]
 801828a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801828c:	683b      	ldr	r3, [r7, #0]
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	1c5a      	adds	r2, r3, #1
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	601a      	str	r2, [r3, #0]
}
 801829c:	bf00      	nop
 801829e:	3714      	adds	r7, #20
 80182a0:	46bd      	mov	sp, r7
 80182a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a6:	4770      	bx	lr

080182a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80182a8:	b480      	push	{r7}
 80182aa:	b085      	sub	sp, #20
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	691b      	ldr	r3, [r3, #16]
 80182b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	687a      	ldr	r2, [r7, #4]
 80182bc:	6892      	ldr	r2, [r2, #8]
 80182be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	689b      	ldr	r3, [r3, #8]
 80182c4:	687a      	ldr	r2, [r7, #4]
 80182c6:	6852      	ldr	r2, [r2, #4]
 80182c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	685b      	ldr	r3, [r3, #4]
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	429a      	cmp	r2, r3
 80182d2:	d103      	bne.n	80182dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	689a      	ldr	r2, [r3, #8]
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2200      	movs	r2, #0
 80182e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	1e5a      	subs	r2, r3, #1
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	681b      	ldr	r3, [r3, #0]
}
 80182f0:	4618      	mov	r0, r3
 80182f2:	3714      	adds	r7, #20
 80182f4:	46bd      	mov	sp, r7
 80182f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182fa:	4770      	bx	lr

080182fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b084      	sub	sp, #16
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d105      	bne.n	801831c <xQueueGenericReset+0x20>
 8018310:	f240 1203 	movw	r2, #259	; 0x103
 8018314:	492a      	ldr	r1, [pc, #168]	; (80183c0 <xQueueGenericReset+0xc4>)
 8018316:	482b      	ldr	r0, [pc, #172]	; (80183c4 <xQueueGenericReset+0xc8>)
 8018318:	f7f2 fabc 	bl	800a894 <assertFail>

	taskENTER_CRITICAL();
 801831c:	f002 ff90 	bl	801b240 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018328:	68f9      	ldr	r1, [r7, #12]
 801832a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801832c:	fb01 f303 	mul.w	r3, r1, r3
 8018330:	441a      	add	r2, r3
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	2200      	movs	r2, #0
 801833a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	681a      	ldr	r2, [r3, #0]
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	681a      	ldr	r2, [r3, #0]
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801834c:	3b01      	subs	r3, #1
 801834e:	68f9      	ldr	r1, [r7, #12]
 8018350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018352:	fb01 f303 	mul.w	r3, r1, r3
 8018356:	441a      	add	r2, r3
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	22ff      	movs	r2, #255	; 0xff
 8018360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	22ff      	movs	r2, #255	; 0xff
 8018368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d114      	bne.n	801839c <xQueueGenericReset+0xa0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	691b      	ldr	r3, [r3, #16]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d01a      	beq.n	80183b0 <xQueueGenericReset+0xb4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	3310      	adds	r3, #16
 801837e:	4618      	mov	r0, r3
 8018380:	f001 fd16 	bl	8019db0 <xTaskRemoveFromEventList>
 8018384:	4603      	mov	r3, r0
 8018386:	2b00      	cmp	r3, #0
 8018388:	d012      	beq.n	80183b0 <xQueueGenericReset+0xb4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801838a:	4b0f      	ldr	r3, [pc, #60]	; (80183c8 <xQueueGenericReset+0xcc>)
 801838c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018390:	601a      	str	r2, [r3, #0]
 8018392:	f3bf 8f4f 	dsb	sy
 8018396:	f3bf 8f6f 	isb	sy
 801839a:	e009      	b.n	80183b0 <xQueueGenericReset+0xb4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	3310      	adds	r3, #16
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7ff fef7 	bl	8018194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	3324      	adds	r3, #36	; 0x24
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7ff fef2 	bl	8018194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80183b0:	f002 ff74 	bl	801b29c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80183b4:	2301      	movs	r3, #1
}
 80183b6:	4618      	mov	r0, r3
 80183b8:	3710      	adds	r7, #16
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bd80      	pop	{r7, pc}
 80183be:	bf00      	nop
 80183c0:	08023f00 	.word	0x08023f00
 80183c4:	08023f34 	.word	0x08023f34
 80183c8:	e000ed04 	.word	0xe000ed04

080183cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b088      	sub	sp, #32
 80183d0:	af02      	add	r7, sp, #8
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
 80183d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d105      	bne.n	80183ec <xQueueGenericCreateStatic+0x20>
 80183e0:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80183e4:	4929      	ldr	r1, [pc, #164]	; (801848c <xQueueGenericCreateStatic+0xc0>)
 80183e6:	482a      	ldr	r0, [pc, #168]	; (8018490 <xQueueGenericCreateStatic+0xc4>)
 80183e8:	f7f2 fa54 	bl	800a894 <assertFail>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d105      	bne.n	80183fe <xQueueGenericCreateStatic+0x32>
 80183f2:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80183f6:	4925      	ldr	r1, [pc, #148]	; (801848c <xQueueGenericCreateStatic+0xc0>)
 80183f8:	4826      	ldr	r0, [pc, #152]	; (8018494 <xQueueGenericCreateStatic+0xc8>)
 80183fa:	f7f2 fa4b 	bl	800a894 <assertFail>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d002      	beq.n	801840a <xQueueGenericCreateStatic+0x3e>
 8018404:	68bb      	ldr	r3, [r7, #8]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d001      	beq.n	801840e <xQueueGenericCreateStatic+0x42>
 801840a:	2301      	movs	r3, #1
 801840c:	e000      	b.n	8018410 <xQueueGenericCreateStatic+0x44>
 801840e:	2300      	movs	r3, #0
 8018410:	2b00      	cmp	r3, #0
 8018412:	d105      	bne.n	8018420 <xQueueGenericCreateStatic+0x54>
 8018414:	f44f 72a1 	mov.w	r2, #322	; 0x142
 8018418:	491c      	ldr	r1, [pc, #112]	; (801848c <xQueueGenericCreateStatic+0xc0>)
 801841a:	481f      	ldr	r0, [pc, #124]	; (8018498 <xQueueGenericCreateStatic+0xcc>)
 801841c:	f7f2 fa3a 	bl	800a894 <assertFail>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d102      	bne.n	801842c <xQueueGenericCreateStatic+0x60>
 8018426:	68bb      	ldr	r3, [r7, #8]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d101      	bne.n	8018430 <xQueueGenericCreateStatic+0x64>
 801842c:	2301      	movs	r3, #1
 801842e:	e000      	b.n	8018432 <xQueueGenericCreateStatic+0x66>
 8018430:	2300      	movs	r3, #0
 8018432:	2b00      	cmp	r3, #0
 8018434:	d105      	bne.n	8018442 <xQueueGenericCreateStatic+0x76>
 8018436:	f240 1243 	movw	r2, #323	; 0x143
 801843a:	4914      	ldr	r1, [pc, #80]	; (801848c <xQueueGenericCreateStatic+0xc0>)
 801843c:	4817      	ldr	r0, [pc, #92]	; (801849c <xQueueGenericCreateStatic+0xd0>)
 801843e:	f7f2 fa29 	bl	800a894 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018442:	2350      	movs	r3, #80	; 0x50
 8018444:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	2b50      	cmp	r3, #80	; 0x50
 801844a:	d005      	beq.n	8018458 <xQueueGenericCreateStatic+0x8c>
 801844c:	f240 124b 	movw	r2, #331	; 0x14b
 8018450:	490e      	ldr	r1, [pc, #56]	; (801848c <xQueueGenericCreateStatic+0xc0>)
 8018452:	4813      	ldr	r0, [pc, #76]	; (80184a0 <xQueueGenericCreateStatic+0xd4>)
 8018454:	f7f2 fa1e 	bl	800a894 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018458:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801845a:	683b      	ldr	r3, [r7, #0]
 801845c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 801845e:	697b      	ldr	r3, [r7, #20]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d00d      	beq.n	8018480 <xQueueGenericCreateStatic+0xb4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018464:	697b      	ldr	r3, [r7, #20]
 8018466:	2201      	movs	r2, #1
 8018468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801846c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	9300      	str	r3, [sp, #0]
 8018474:	4613      	mov	r3, r2
 8018476:	687a      	ldr	r2, [r7, #4]
 8018478:	68b9      	ldr	r1, [r7, #8]
 801847a:	68f8      	ldr	r0, [r7, #12]
 801847c:	f000 f84c 	bl	8018518 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018480:	697b      	ldr	r3, [r7, #20]
	}
 8018482:	4618      	mov	r0, r3
 8018484:	3718      	adds	r7, #24
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}
 801848a:	bf00      	nop
 801848c:	08023f00 	.word	0x08023f00
 8018490:	08023f3c 	.word	0x08023f3c
 8018494:	08023f60 	.word	0x08023f60
 8018498:	08023f78 	.word	0x08023f78
 801849c:	08023fb0 	.word	0x08023fb0
 80184a0:	08023fe8 	.word	0x08023fe8

080184a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80184a4:	b580      	push	{r7, lr}
 80184a6:	b08a      	sub	sp, #40	; 0x28
 80184a8:	af02      	add	r7, sp, #8
 80184aa:	60f8      	str	r0, [r7, #12]
 80184ac:	60b9      	str	r1, [r7, #8]
 80184ae:	4613      	mov	r3, r2
 80184b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d105      	bne.n	80184c4 <xQueueGenericCreate+0x20>
 80184b8:	f44f 72bb 	mov.w	r2, #374	; 0x176
 80184bc:	4914      	ldr	r1, [pc, #80]	; (8018510 <xQueueGenericCreate+0x6c>)
 80184be:	4815      	ldr	r0, [pc, #84]	; (8018514 <xQueueGenericCreate+0x70>)
 80184c0:	f7f2 f9e8 	bl	800a894 <assertFail>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	68ba      	ldr	r2, [r7, #8]
 80184c8:	fb02 f303 	mul.w	r3, r2, r3
 80184cc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80184ce:	69fb      	ldr	r3, [r7, #28]
 80184d0:	3350      	adds	r3, #80	; 0x50
 80184d2:	4618      	mov	r0, r3
 80184d4:	f002 ffc4 	bl	801b460 <pvPortMalloc>
 80184d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80184da:	69bb      	ldr	r3, [r7, #24]
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d011      	beq.n	8018504 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80184e0:	69bb      	ldr	r3, [r7, #24]
 80184e2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	3350      	adds	r3, #80	; 0x50
 80184e8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80184ea:	69bb      	ldr	r3, [r7, #24]
 80184ec:	2200      	movs	r2, #0
 80184ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80184f2:	79fa      	ldrb	r2, [r7, #7]
 80184f4:	69bb      	ldr	r3, [r7, #24]
 80184f6:	9300      	str	r3, [sp, #0]
 80184f8:	4613      	mov	r3, r2
 80184fa:	697a      	ldr	r2, [r7, #20]
 80184fc:	68b9      	ldr	r1, [r7, #8]
 80184fe:	68f8      	ldr	r0, [r7, #12]
 8018500:	f000 f80a 	bl	8018518 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018504:	69bb      	ldr	r3, [r7, #24]
	}
 8018506:	4618      	mov	r0, r3
 8018508:	3720      	adds	r7, #32
 801850a:	46bd      	mov	sp, r7
 801850c:	bd80      	pop	{r7, pc}
 801850e:	bf00      	nop
 8018510:	08023f00 	.word	0x08023f00
 8018514:	08023f3c 	.word	0x08023f3c

08018518 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b084      	sub	sp, #16
 801851c:	af00      	add	r7, sp, #0
 801851e:	60f8      	str	r0, [r7, #12]
 8018520:	60b9      	str	r1, [r7, #8]
 8018522:	607a      	str	r2, [r7, #4]
 8018524:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018526:	68bb      	ldr	r3, [r7, #8]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d103      	bne.n	8018534 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801852c:	69bb      	ldr	r3, [r7, #24]
 801852e:	69ba      	ldr	r2, [r7, #24]
 8018530:	601a      	str	r2, [r3, #0]
 8018532:	e002      	b.n	801853a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018534:	69bb      	ldr	r3, [r7, #24]
 8018536:	687a      	ldr	r2, [r7, #4]
 8018538:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801853a:	69bb      	ldr	r3, [r7, #24]
 801853c:	68fa      	ldr	r2, [r7, #12]
 801853e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018540:	69bb      	ldr	r3, [r7, #24]
 8018542:	68ba      	ldr	r2, [r7, #8]
 8018544:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018546:	2101      	movs	r1, #1
 8018548:	69b8      	ldr	r0, [r7, #24]
 801854a:	f7ff fed7 	bl	80182fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801854e:	69bb      	ldr	r3, [r7, #24]
 8018550:	78fa      	ldrb	r2, [r7, #3]
 8018552:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018556:	bf00      	nop
 8018558:	3710      	adds	r7, #16
 801855a:	46bd      	mov	sp, r7
 801855c:	bd80      	pop	{r7, pc}

0801855e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801855e:	b580      	push	{r7, lr}
 8018560:	b082      	sub	sp, #8
 8018562:	af00      	add	r7, sp, #0
 8018564:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d00e      	beq.n	801858a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2200      	movs	r2, #0
 8018570:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2200      	movs	r2, #0
 8018576:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2200      	movs	r2, #0
 801857c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801857e:	2300      	movs	r3, #0
 8018580:	2200      	movs	r2, #0
 8018582:	2100      	movs	r1, #0
 8018584:	6878      	ldr	r0, [r7, #4]
 8018586:	f000 f837 	bl	80185f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801858a:	bf00      	nop
 801858c:	3708      	adds	r7, #8
 801858e:	46bd      	mov	sp, r7
 8018590:	bd80      	pop	{r7, pc}

08018592 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8018592:	b580      	push	{r7, lr}
 8018594:	b086      	sub	sp, #24
 8018596:	af00      	add	r7, sp, #0
 8018598:	4603      	mov	r3, r0
 801859a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801859c:	2301      	movs	r3, #1
 801859e:	617b      	str	r3, [r7, #20]
 80185a0:	2300      	movs	r3, #0
 80185a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80185a4:	79fb      	ldrb	r3, [r7, #7]
 80185a6:	461a      	mov	r2, r3
 80185a8:	6939      	ldr	r1, [r7, #16]
 80185aa:	6978      	ldr	r0, [r7, #20]
 80185ac:	f7ff ff7a 	bl	80184a4 <xQueueGenericCreate>
 80185b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80185b2:	68f8      	ldr	r0, [r7, #12]
 80185b4:	f7ff ffd3 	bl	801855e <prvInitialiseMutex>

		return xNewQueue;
 80185b8:	68fb      	ldr	r3, [r7, #12]
	}
 80185ba:	4618      	mov	r0, r3
 80185bc:	3718      	adds	r7, #24
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}

080185c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80185c2:	b580      	push	{r7, lr}
 80185c4:	b088      	sub	sp, #32
 80185c6:	af02      	add	r7, sp, #8
 80185c8:	4603      	mov	r3, r0
 80185ca:	6039      	str	r1, [r7, #0]
 80185cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80185ce:	2301      	movs	r3, #1
 80185d0:	617b      	str	r3, [r7, #20]
 80185d2:	2300      	movs	r3, #0
 80185d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80185d6:	79fb      	ldrb	r3, [r7, #7]
 80185d8:	9300      	str	r3, [sp, #0]
 80185da:	683b      	ldr	r3, [r7, #0]
 80185dc:	2200      	movs	r2, #0
 80185de:	6939      	ldr	r1, [r7, #16]
 80185e0:	6978      	ldr	r0, [r7, #20]
 80185e2:	f7ff fef3 	bl	80183cc <xQueueGenericCreateStatic>
 80185e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80185e8:	68f8      	ldr	r0, [r7, #12]
 80185ea:	f7ff ffb8 	bl	801855e <prvInitialiseMutex>

		return xNewQueue;
 80185ee:	68fb      	ldr	r3, [r7, #12]
	}
 80185f0:	4618      	mov	r0, r3
 80185f2:	3718      	adds	r7, #24
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}

080185f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b08a      	sub	sp, #40	; 0x28
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	60f8      	str	r0, [r7, #12]
 8018600:	60b9      	str	r1, [r7, #8]
 8018602:	607a      	str	r2, [r7, #4]
 8018604:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018606:	2300      	movs	r3, #0
 8018608:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 801860e:	6a3b      	ldr	r3, [r7, #32]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d105      	bne.n	8018620 <xQueueGenericSend+0x28>
 8018614:	f240 22ea 	movw	r2, #746	; 0x2ea
 8018618:	4977      	ldr	r1, [pc, #476]	; (80187f8 <xQueueGenericSend+0x200>)
 801861a:	4878      	ldr	r0, [pc, #480]	; (80187fc <xQueueGenericSend+0x204>)
 801861c:	f7f2 f93a 	bl	800a894 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d103      	bne.n	801862e <xQueueGenericSend+0x36>
 8018626:	6a3b      	ldr	r3, [r7, #32]
 8018628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801862a:	2b00      	cmp	r3, #0
 801862c:	d101      	bne.n	8018632 <xQueueGenericSend+0x3a>
 801862e:	2301      	movs	r3, #1
 8018630:	e000      	b.n	8018634 <xQueueGenericSend+0x3c>
 8018632:	2300      	movs	r3, #0
 8018634:	2b00      	cmp	r3, #0
 8018636:	d105      	bne.n	8018644 <xQueueGenericSend+0x4c>
 8018638:	f240 22eb 	movw	r2, #747	; 0x2eb
 801863c:	496e      	ldr	r1, [pc, #440]	; (80187f8 <xQueueGenericSend+0x200>)
 801863e:	4870      	ldr	r0, [pc, #448]	; (8018800 <xQueueGenericSend+0x208>)
 8018640:	f7f2 f928 	bl	800a894 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018644:	683b      	ldr	r3, [r7, #0]
 8018646:	2b02      	cmp	r3, #2
 8018648:	d103      	bne.n	8018652 <xQueueGenericSend+0x5a>
 801864a:	6a3b      	ldr	r3, [r7, #32]
 801864c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801864e:	2b01      	cmp	r3, #1
 8018650:	d101      	bne.n	8018656 <xQueueGenericSend+0x5e>
 8018652:	2301      	movs	r3, #1
 8018654:	e000      	b.n	8018658 <xQueueGenericSend+0x60>
 8018656:	2300      	movs	r3, #0
 8018658:	2b00      	cmp	r3, #0
 801865a:	d105      	bne.n	8018668 <xQueueGenericSend+0x70>
 801865c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8018660:	4965      	ldr	r1, [pc, #404]	; (80187f8 <xQueueGenericSend+0x200>)
 8018662:	4868      	ldr	r0, [pc, #416]	; (8018804 <xQueueGenericSend+0x20c>)
 8018664:	f7f2 f916 	bl	800a894 <assertFail>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018668:	f001 fe34 	bl	801a2d4 <xTaskGetSchedulerState>
 801866c:	4603      	mov	r3, r0
 801866e:	2b00      	cmp	r3, #0
 8018670:	d102      	bne.n	8018678 <xQueueGenericSend+0x80>
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	2b00      	cmp	r3, #0
 8018676:	d101      	bne.n	801867c <xQueueGenericSend+0x84>
 8018678:	2301      	movs	r3, #1
 801867a:	e000      	b.n	801867e <xQueueGenericSend+0x86>
 801867c:	2300      	movs	r3, #0
 801867e:	2b00      	cmp	r3, #0
 8018680:	d105      	bne.n	801868e <xQueueGenericSend+0x96>
 8018682:	f240 22ef 	movw	r2, #751	; 0x2ef
 8018686:	495c      	ldr	r1, [pc, #368]	; (80187f8 <xQueueGenericSend+0x200>)
 8018688:	485f      	ldr	r0, [pc, #380]	; (8018808 <xQueueGenericSend+0x210>)
 801868a:	f7f2 f903 	bl	800a894 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801868e:	f002 fdd7 	bl	801b240 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018692:	6a3b      	ldr	r3, [r7, #32]
 8018694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018696:	6a3b      	ldr	r3, [r7, #32]
 8018698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801869a:	429a      	cmp	r2, r3
 801869c:	d302      	bcc.n	80186a4 <xQueueGenericSend+0xac>
 801869e:	683b      	ldr	r3, [r7, #0]
 80186a0:	2b02      	cmp	r3, #2
 80186a2:	d12f      	bne.n	8018704 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
 80186a4:	6a3b      	ldr	r3, [r7, #32]
 80186a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80186a8:	4a58      	ldr	r2, [pc, #352]	; (801880c <xQueueGenericSend+0x214>)
 80186aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80186ae:	6013      	str	r3, [r2, #0]
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80186b0:	683a      	ldr	r2, [r7, #0]
 80186b2:	68b9      	ldr	r1, [r7, #8]
 80186b4:	6a38      	ldr	r0, [r7, #32]
 80186b6:	f000 fc2b 	bl	8018f10 <prvCopyDataToQueue>
 80186ba:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80186bc:	6a3b      	ldr	r3, [r7, #32]
 80186be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d010      	beq.n	80186e6 <xQueueGenericSend+0xee>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80186c4:	6a3b      	ldr	r3, [r7, #32]
 80186c6:	3324      	adds	r3, #36	; 0x24
 80186c8:	4618      	mov	r0, r3
 80186ca:	f001 fb71 	bl	8019db0 <xTaskRemoveFromEventList>
 80186ce:	4603      	mov	r3, r0
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d013      	beq.n	80186fc <xQueueGenericSend+0x104>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80186d4:	4b4e      	ldr	r3, [pc, #312]	; (8018810 <xQueueGenericSend+0x218>)
 80186d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186da:	601a      	str	r2, [r3, #0]
 80186dc:	f3bf 8f4f 	dsb	sy
 80186e0:	f3bf 8f6f 	isb	sy
 80186e4:	e00a      	b.n	80186fc <xQueueGenericSend+0x104>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80186e6:	69fb      	ldr	r3, [r7, #28]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d007      	beq.n	80186fc <xQueueGenericSend+0x104>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80186ec:	4b48      	ldr	r3, [pc, #288]	; (8018810 <xQueueGenericSend+0x218>)
 80186ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186f2:	601a      	str	r2, [r3, #0]
 80186f4:	f3bf 8f4f 	dsb	sy
 80186f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80186fc:	f002 fdce 	bl	801b29c <vPortExitCritical>
				return pdPASS;
 8018700:	2301      	movs	r3, #1
 8018702:	e075      	b.n	80187f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d109      	bne.n	801871e <xQueueGenericSend+0x126>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801870a:	f002 fdc7 	bl	801b29c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 801870e:	6a3b      	ldr	r3, [r7, #32]
 8018710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018712:	4a3e      	ldr	r2, [pc, #248]	; (801880c <xQueueGenericSend+0x214>)
 8018714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018718:	6013      	str	r3, [r2, #0]
					return errQUEUE_FULL;
 801871a:	2300      	movs	r3, #0
 801871c:	e068      	b.n	80187f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018720:	2b00      	cmp	r3, #0
 8018722:	d106      	bne.n	8018732 <xQueueGenericSend+0x13a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018724:	f107 0314 	add.w	r3, r7, #20
 8018728:	4618      	mov	r0, r3
 801872a:	f001 fba3 	bl	8019e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801872e:	2301      	movs	r3, #1
 8018730:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018732:	f002 fdb3 	bl	801b29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018736:	f001 f825 	bl	8019784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801873a:	f002 fd81 	bl	801b240 <vPortEnterCritical>
 801873e:	6a3b      	ldr	r3, [r7, #32]
 8018740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018744:	b25b      	sxtb	r3, r3
 8018746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801874a:	d103      	bne.n	8018754 <xQueueGenericSend+0x15c>
 801874c:	6a3b      	ldr	r3, [r7, #32]
 801874e:	2200      	movs	r2, #0
 8018750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018754:	6a3b      	ldr	r3, [r7, #32]
 8018756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801875a:	b25b      	sxtb	r3, r3
 801875c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018760:	d103      	bne.n	801876a <xQueueGenericSend+0x172>
 8018762:	6a3b      	ldr	r3, [r7, #32]
 8018764:	2200      	movs	r2, #0
 8018766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801876a:	f002 fd97 	bl	801b29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801876e:	1d3a      	adds	r2, r7, #4
 8018770:	f107 0314 	add.w	r3, r7, #20
 8018774:	4611      	mov	r1, r2
 8018776:	4618      	mov	r0, r3
 8018778:	f001 fb92 	bl	8019ea0 <xTaskCheckForTimeOut>
 801877c:	4603      	mov	r3, r0
 801877e:	2b00      	cmp	r3, #0
 8018780:	d12a      	bne.n	80187d8 <xQueueGenericSend+0x1e0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018782:	6a38      	ldr	r0, [r7, #32]
 8018784:	f000 fcbc 	bl	8019100 <prvIsQueueFull>
 8018788:	4603      	mov	r3, r0
 801878a:	2b00      	cmp	r3, #0
 801878c:	d01e      	beq.n	80187cc <xQueueGenericSend+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 801878e:	6a3b      	ldr	r3, [r7, #32]
 8018790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018792:	4a1e      	ldr	r2, [pc, #120]	; (801880c <xQueueGenericSend+0x214>)
 8018794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018798:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801879a:	6a3b      	ldr	r3, [r7, #32]
 801879c:	3310      	adds	r3, #16
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	4611      	mov	r1, r2
 80187a2:	4618      	mov	r0, r3
 80187a4:	f001 fab6 	bl	8019d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80187a8:	6a38      	ldr	r0, [r7, #32]
 80187aa:	f000 fc41 	bl	8019030 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80187ae:	f000 fff7 	bl	80197a0 <xTaskResumeAll>
 80187b2:	4603      	mov	r3, r0
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	f47f af6a 	bne.w	801868e <xQueueGenericSend+0x96>
				{
					portYIELD_WITHIN_API();
 80187ba:	4b15      	ldr	r3, [pc, #84]	; (8018810 <xQueueGenericSend+0x218>)
 80187bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187c0:	601a      	str	r2, [r3, #0]
 80187c2:	f3bf 8f4f 	dsb	sy
 80187c6:	f3bf 8f6f 	isb	sy
 80187ca:	e760      	b.n	801868e <xQueueGenericSend+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80187cc:	6a38      	ldr	r0, [r7, #32]
 80187ce:	f000 fc2f 	bl	8019030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80187d2:	f000 ffe5 	bl	80197a0 <xTaskResumeAll>
 80187d6:	e75a      	b.n	801868e <xQueueGenericSend+0x96>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80187d8:	6a38      	ldr	r0, [r7, #32]
 80187da:	f000 fc29 	bl	8019030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80187de:	f000 ffdf 	bl	80197a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80187e2:	6a3b      	ldr	r3, [r7, #32]
 80187e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80187e6:	4a09      	ldr	r2, [pc, #36]	; (801880c <xQueueGenericSend+0x214>)
 80187e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80187ec:	6013      	str	r3, [r2, #0]
			return errQUEUE_FULL;
 80187ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80187f0:	4618      	mov	r0, r3
 80187f2:	3728      	adds	r7, #40	; 0x28
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}
 80187f8:	08023f00 	.word	0x08023f00
 80187fc:	08023f34 	.word	0x08023f34
 8018800:	08024004 	.word	0x08024004
 8018804:	08024054 	.word	0x08024054
 8018808:	0802409c 	.word	0x0802409c
 801880c:	e000000c 	.word	0xe000000c
 8018810:	e000ed04 	.word	0xe000ed04

08018814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b08c      	sub	sp, #48	; 0x30
 8018818:	af00      	add	r7, sp, #0
 801881a:	60f8      	str	r0, [r7, #12]
 801881c:	60b9      	str	r1, [r7, #8]
 801881e:	607a      	str	r2, [r7, #4]
 8018820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8018826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018828:	2b00      	cmp	r3, #0
 801882a:	d105      	bne.n	8018838 <xQueueGenericSendFromISR+0x24>
 801882c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8018830:	493e      	ldr	r1, [pc, #248]	; (801892c <xQueueGenericSendFromISR+0x118>)
 8018832:	483f      	ldr	r0, [pc, #252]	; (8018930 <xQueueGenericSendFromISR+0x11c>)
 8018834:	f7f2 f82e 	bl	800a894 <assertFail>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d103      	bne.n	8018846 <xQueueGenericSendFromISR+0x32>
 801883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018842:	2b00      	cmp	r3, #0
 8018844:	d101      	bne.n	801884a <xQueueGenericSendFromISR+0x36>
 8018846:	2301      	movs	r3, #1
 8018848:	e000      	b.n	801884c <xQueueGenericSendFromISR+0x38>
 801884a:	2300      	movs	r3, #0
 801884c:	2b00      	cmp	r3, #0
 801884e:	d105      	bne.n	801885c <xQueueGenericSendFromISR+0x48>
 8018850:	f240 32bd 	movw	r2, #957	; 0x3bd
 8018854:	4935      	ldr	r1, [pc, #212]	; (801892c <xQueueGenericSendFromISR+0x118>)
 8018856:	4837      	ldr	r0, [pc, #220]	; (8018934 <xQueueGenericSendFromISR+0x120>)
 8018858:	f7f2 f81c 	bl	800a894 <assertFail>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	2b02      	cmp	r3, #2
 8018860:	d103      	bne.n	801886a <xQueueGenericSendFromISR+0x56>
 8018862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018866:	2b01      	cmp	r3, #1
 8018868:	d101      	bne.n	801886e <xQueueGenericSendFromISR+0x5a>
 801886a:	2301      	movs	r3, #1
 801886c:	e000      	b.n	8018870 <xQueueGenericSendFromISR+0x5c>
 801886e:	2300      	movs	r3, #0
 8018870:	2b00      	cmp	r3, #0
 8018872:	d105      	bne.n	8018880 <xQueueGenericSendFromISR+0x6c>
 8018874:	f240 32be 	movw	r2, #958	; 0x3be
 8018878:	492c      	ldr	r1, [pc, #176]	; (801892c <xQueueGenericSendFromISR+0x118>)
 801887a:	482f      	ldr	r0, [pc, #188]	; (8018938 <xQueueGenericSendFromISR+0x124>)
 801887c:	f7f2 f80a 	bl	800a894 <assertFail>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018880:	f002 fdb4 	bl	801b3ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018884:	f3ef 8211 	mrs	r2, BASEPRI
 8018888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801888c:	f383 8811 	msr	BASEPRI, r3
 8018890:	f3bf 8f6f 	isb	sy
 8018894:	f3bf 8f4f 	dsb	sy
 8018898:	61ba      	str	r2, [r7, #24]
 801889a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801889c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801889e:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80188a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80188a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d302      	bcc.n	80188b2 <xQueueGenericSendFromISR+0x9e>
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	2b02      	cmp	r3, #2
 80188b0:	d12f      	bne.n	8018912 <xQueueGenericSendFromISR+0xfe>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80188b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80188b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80188bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188c0:	61fb      	str	r3, [r7, #28]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80188c2:	683a      	ldr	r2, [r7, #0]
 80188c4:	68b9      	ldr	r1, [r7, #8]
 80188c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80188c8:	f000 fb22 	bl	8018f10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80188cc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80188d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80188d4:	d112      	bne.n	80188fc <xQueueGenericSendFromISR+0xe8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80188d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d016      	beq.n	801890c <xQueueGenericSendFromISR+0xf8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80188de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188e0:	3324      	adds	r3, #36	; 0x24
 80188e2:	4618      	mov	r0, r3
 80188e4:	f001 fa64 	bl	8019db0 <xTaskRemoveFromEventList>
 80188e8:	4603      	mov	r3, r0
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d00e      	beq.n	801890c <xQueueGenericSendFromISR+0xf8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d00b      	beq.n	801890c <xQueueGenericSendFromISR+0xf8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2201      	movs	r2, #1
 80188f8:	601a      	str	r2, [r3, #0]
 80188fa:	e007      	b.n	801890c <xQueueGenericSendFromISR+0xf8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80188fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018900:	3301      	adds	r3, #1
 8018902:	b2db      	uxtb	r3, r3
 8018904:	b25a      	sxtb	r2, r3
 8018906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801890c:	2301      	movs	r3, #1
 801890e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8018910:	e001      	b.n	8018916 <xQueueGenericSendFromISR+0x102>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018912:	2300      	movs	r3, #0
 8018914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018918:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801891a:	693b      	ldr	r3, [r7, #16]
 801891c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8018920:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8018924:	4618      	mov	r0, r3
 8018926:	3730      	adds	r7, #48	; 0x30
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}
 801892c:	08023f00 	.word	0x08023f00
 8018930:	08023f34 	.word	0x08023f34
 8018934:	08024004 	.word	0x08024004
 8018938:	08024054 	.word	0x08024054

0801893c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b08a      	sub	sp, #40	; 0x28
 8018940:	af00      	add	r7, sp, #0
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018948:	2300      	movs	r3, #0
 801894a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018950:	6a3b      	ldr	r3, [r7, #32]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d105      	bne.n	8018962 <xQueueReceive+0x26>
 8018956:	f240 5204 	movw	r2, #1284	; 0x504
 801895a:	4962      	ldr	r1, [pc, #392]	; (8018ae4 <xQueueReceive+0x1a8>)
 801895c:	4862      	ldr	r0, [pc, #392]	; (8018ae8 <xQueueReceive+0x1ac>)
 801895e:	f7f1 ff99 	bl	800a894 <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018962:	68bb      	ldr	r3, [r7, #8]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d103      	bne.n	8018970 <xQueueReceive+0x34>
 8018968:	6a3b      	ldr	r3, [r7, #32]
 801896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801896c:	2b00      	cmp	r3, #0
 801896e:	d101      	bne.n	8018974 <xQueueReceive+0x38>
 8018970:	2301      	movs	r3, #1
 8018972:	e000      	b.n	8018976 <xQueueReceive+0x3a>
 8018974:	2300      	movs	r3, #0
 8018976:	2b00      	cmp	r3, #0
 8018978:	d105      	bne.n	8018986 <xQueueReceive+0x4a>
 801897a:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 801897e:	4959      	ldr	r1, [pc, #356]	; (8018ae4 <xQueueReceive+0x1a8>)
 8018980:	485a      	ldr	r0, [pc, #360]	; (8018aec <xQueueReceive+0x1b0>)
 8018982:	f7f1 ff87 	bl	800a894 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018986:	f001 fca5 	bl	801a2d4 <xTaskGetSchedulerState>
 801898a:	4603      	mov	r3, r0
 801898c:	2b00      	cmp	r3, #0
 801898e:	d102      	bne.n	8018996 <xQueueReceive+0x5a>
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d101      	bne.n	801899a <xQueueReceive+0x5e>
 8018996:	2301      	movs	r3, #1
 8018998:	e000      	b.n	801899c <xQueueReceive+0x60>
 801899a:	2300      	movs	r3, #0
 801899c:	2b00      	cmp	r3, #0
 801899e:	d105      	bne.n	80189ac <xQueueReceive+0x70>
 80189a0:	f240 520d 	movw	r2, #1293	; 0x50d
 80189a4:	494f      	ldr	r1, [pc, #316]	; (8018ae4 <xQueueReceive+0x1a8>)
 80189a6:	4852      	ldr	r0, [pc, #328]	; (8018af0 <xQueueReceive+0x1b4>)
 80189a8:	f7f1 ff74 	bl	800a894 <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80189ac:	f002 fc48 	bl	801b240 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80189b0:	6a3b      	ldr	r3, [r7, #32]
 80189b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189b4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80189b6:	69fb      	ldr	r3, [r7, #28]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d01f      	beq.n	80189fc <xQueueReceive+0xc0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80189bc:	68b9      	ldr	r1, [r7, #8]
 80189be:	6a38      	ldr	r0, [r7, #32]
 80189c0:	f000 fb10 	bl	8018fe4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80189c4:	69fb      	ldr	r3, [r7, #28]
 80189c6:	1e5a      	subs	r2, r3, #1
 80189c8:	6a3b      	ldr	r3, [r7, #32]
 80189ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80189cc:	6a3b      	ldr	r3, [r7, #32]
 80189ce:	691b      	ldr	r3, [r3, #16]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d00f      	beq.n	80189f4 <xQueueReceive+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80189d4:	6a3b      	ldr	r3, [r7, #32]
 80189d6:	3310      	adds	r3, #16
 80189d8:	4618      	mov	r0, r3
 80189da:	f001 f9e9 	bl	8019db0 <xTaskRemoveFromEventList>
 80189de:	4603      	mov	r3, r0
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d007      	beq.n	80189f4 <xQueueReceive+0xb8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80189e4:	4b43      	ldr	r3, [pc, #268]	; (8018af4 <xQueueReceive+0x1b8>)
 80189e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189ea:	601a      	str	r2, [r3, #0]
 80189ec:	f3bf 8f4f 	dsb	sy
 80189f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80189f4:	f002 fc52 	bl	801b29c <vPortExitCritical>
				return pdPASS;
 80189f8:	2301      	movs	r3, #1
 80189fa:	e06f      	b.n	8018adc <xQueueReceive+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d103      	bne.n	8018a0a <xQueueReceive+0xce>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018a02:	f002 fc4b 	bl	801b29c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018a06:	2300      	movs	r3, #0
 8018a08:	e068      	b.n	8018adc <xQueueReceive+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d106      	bne.n	8018a1e <xQueueReceive+0xe2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018a10:	f107 0314 	add.w	r3, r7, #20
 8018a14:	4618      	mov	r0, r3
 8018a16:	f001 fa2d 	bl	8019e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018a1e:	f002 fc3d 	bl	801b29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018a22:	f000 feaf 	bl	8019784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018a26:	f002 fc0b 	bl	801b240 <vPortEnterCritical>
 8018a2a:	6a3b      	ldr	r3, [r7, #32]
 8018a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018a30:	b25b      	sxtb	r3, r3
 8018a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a36:	d103      	bne.n	8018a40 <xQueueReceive+0x104>
 8018a38:	6a3b      	ldr	r3, [r7, #32]
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018a40:	6a3b      	ldr	r3, [r7, #32]
 8018a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018a46:	b25b      	sxtb	r3, r3
 8018a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a4c:	d103      	bne.n	8018a56 <xQueueReceive+0x11a>
 8018a4e:	6a3b      	ldr	r3, [r7, #32]
 8018a50:	2200      	movs	r2, #0
 8018a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018a56:	f002 fc21 	bl	801b29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018a5a:	1d3a      	adds	r2, r7, #4
 8018a5c:	f107 0314 	add.w	r3, r7, #20
 8018a60:	4611      	mov	r1, r2
 8018a62:	4618      	mov	r0, r3
 8018a64:	f001 fa1c 	bl	8019ea0 <xTaskCheckForTimeOut>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d129      	bne.n	8018ac2 <xQueueReceive+0x186>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018a6e:	6a38      	ldr	r0, [r7, #32]
 8018a70:	f000 fb30 	bl	80190d4 <prvIsQueueEmpty>
 8018a74:	4603      	mov	r3, r0
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d01d      	beq.n	8018ab6 <xQueueReceive+0x17a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8018a7a:	6a3b      	ldr	r3, [r7, #32]
 8018a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018a7e:	4a1e      	ldr	r2, [pc, #120]	; (8018af8 <xQueueReceive+0x1bc>)
 8018a80:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8018a84:	6013      	str	r3, [r2, #0]
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018a86:	6a3b      	ldr	r3, [r7, #32]
 8018a88:	3324      	adds	r3, #36	; 0x24
 8018a8a:	687a      	ldr	r2, [r7, #4]
 8018a8c:	4611      	mov	r1, r2
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f001 f940 	bl	8019d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018a94:	6a38      	ldr	r0, [r7, #32]
 8018a96:	f000 facb 	bl	8019030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018a9a:	f000 fe81 	bl	80197a0 <xTaskResumeAll>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d183      	bne.n	80189ac <xQueueReceive+0x70>
				{
					portYIELD_WITHIN_API();
 8018aa4:	4b13      	ldr	r3, [pc, #76]	; (8018af4 <xQueueReceive+0x1b8>)
 8018aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018aaa:	601a      	str	r2, [r3, #0]
 8018aac:	f3bf 8f4f 	dsb	sy
 8018ab0:	f3bf 8f6f 	isb	sy
 8018ab4:	e77a      	b.n	80189ac <xQueueReceive+0x70>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8018ab6:	6a38      	ldr	r0, [r7, #32]
 8018ab8:	f000 faba 	bl	8019030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018abc:	f000 fe70 	bl	80197a0 <xTaskResumeAll>
 8018ac0:	e774      	b.n	80189ac <xQueueReceive+0x70>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018ac2:	6a38      	ldr	r0, [r7, #32]
 8018ac4:	f000 fab4 	bl	8019030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018ac8:	f000 fe6a 	bl	80197a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018acc:	6a38      	ldr	r0, [r7, #32]
 8018ace:	f000 fb01 	bl	80190d4 <prvIsQueueEmpty>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	f43f af69 	beq.w	80189ac <xQueueReceive+0x70>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018ada:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018adc:	4618      	mov	r0, r3
 8018ade:	3728      	adds	r7, #40	; 0x28
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}
 8018ae4:	08023f00 	.word	0x08023f00
 8018ae8:	08024178 	.word	0x08024178
 8018aec:	08024184 	.word	0x08024184
 8018af0:	0802409c 	.word	0x0802409c
 8018af4:	e000ed04 	.word	0xe000ed04
 8018af8:	e000000c 	.word	0xe000000c

08018afc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018afc:	b580      	push	{r7, lr}
 8018afe:	b08a      	sub	sp, #40	; 0x28
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
 8018b04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8018b06:	2300      	movs	r3, #0
 8018b08:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018b12:	69fb      	ldr	r3, [r7, #28]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d105      	bne.n	8018b24 <xQueueSemaphoreTake+0x28>
 8018b18:	f240 5295 	movw	r2, #1429	; 0x595
 8018b1c:	4975      	ldr	r1, [pc, #468]	; (8018cf4 <xQueueSemaphoreTake+0x1f8>)
 8018b1e:	4876      	ldr	r0, [pc, #472]	; (8018cf8 <xQueueSemaphoreTake+0x1fc>)
 8018b20:	f7f1 feb8 	bl	800a894 <assertFail>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018b24:	69fb      	ldr	r3, [r7, #28]
 8018b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d005      	beq.n	8018b38 <xQueueSemaphoreTake+0x3c>
 8018b2c:	f240 5299 	movw	r2, #1433	; 0x599
 8018b30:	4970      	ldr	r1, [pc, #448]	; (8018cf4 <xQueueSemaphoreTake+0x1f8>)
 8018b32:	4872      	ldr	r0, [pc, #456]	; (8018cfc <xQueueSemaphoreTake+0x200>)
 8018b34:	f7f1 feae 	bl	800a894 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018b38:	f001 fbcc 	bl	801a2d4 <xTaskGetSchedulerState>
 8018b3c:	4603      	mov	r3, r0
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d102      	bne.n	8018b48 <xQueueSemaphoreTake+0x4c>
 8018b42:	683b      	ldr	r3, [r7, #0]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d101      	bne.n	8018b4c <xQueueSemaphoreTake+0x50>
 8018b48:	2301      	movs	r3, #1
 8018b4a:	e000      	b.n	8018b4e <xQueueSemaphoreTake+0x52>
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d105      	bne.n	8018b5e <xQueueSemaphoreTake+0x62>
 8018b52:	f240 529e 	movw	r2, #1438	; 0x59e
 8018b56:	4967      	ldr	r1, [pc, #412]	; (8018cf4 <xQueueSemaphoreTake+0x1f8>)
 8018b58:	4869      	ldr	r0, [pc, #420]	; (8018d00 <xQueueSemaphoreTake+0x204>)
 8018b5a:	f7f1 fe9b 	bl	800a894 <assertFail>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018b5e:	f002 fb6f 	bl	801b240 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018b62:	69fb      	ldr	r3, [r7, #28]
 8018b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b66:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8018b68:	69bb      	ldr	r3, [r7, #24]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d024      	beq.n	8018bb8 <xQueueSemaphoreTake+0xbc>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8018b6e:	69bb      	ldr	r3, [r7, #24]
 8018b70:	1e5a      	subs	r2, r3, #1
 8018b72:	69fb      	ldr	r3, [r7, #28]
 8018b74:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018b76:	69fb      	ldr	r3, [r7, #28]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d104      	bne.n	8018b88 <xQueueSemaphoreTake+0x8c>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8018b7e:	f001 fd49 	bl	801a614 <pvTaskIncrementMutexHeldCount>
 8018b82:	4602      	mov	r2, r0
 8018b84:	69fb      	ldr	r3, [r7, #28]
 8018b86:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	691b      	ldr	r3, [r3, #16]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d00f      	beq.n	8018bb0 <xQueueSemaphoreTake+0xb4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018b90:	69fb      	ldr	r3, [r7, #28]
 8018b92:	3310      	adds	r3, #16
 8018b94:	4618      	mov	r0, r3
 8018b96:	f001 f90b 	bl	8019db0 <xTaskRemoveFromEventList>
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d007      	beq.n	8018bb0 <xQueueSemaphoreTake+0xb4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018ba0:	4b58      	ldr	r3, [pc, #352]	; (8018d04 <xQueueSemaphoreTake+0x208>)
 8018ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ba6:	601a      	str	r2, [r3, #0]
 8018ba8:	f3bf 8f4f 	dsb	sy
 8018bac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018bb0:	f002 fb74 	bl	801b29c <vPortExitCritical>
				return pdPASS;
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	e098      	b.n	8018cea <xQueueSemaphoreTake+0x1ee>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d10c      	bne.n	8018bd8 <xQueueSemaphoreTake+0xdc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8018bbe:	6a3b      	ldr	r3, [r7, #32]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d005      	beq.n	8018bd0 <xQueueSemaphoreTake+0xd4>
 8018bc4:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8018bc8:	494a      	ldr	r1, [pc, #296]	; (8018cf4 <xQueueSemaphoreTake+0x1f8>)
 8018bca:	484f      	ldr	r0, [pc, #316]	; (8018d08 <xQueueSemaphoreTake+0x20c>)
 8018bcc:	f7f1 fe62 	bl	800a894 <assertFail>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018bd0:	f002 fb64 	bl	801b29c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	e088      	b.n	8018cea <xQueueSemaphoreTake+0x1ee>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d106      	bne.n	8018bec <xQueueSemaphoreTake+0xf0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018bde:	f107 030c 	add.w	r3, r7, #12
 8018be2:	4618      	mov	r0, r3
 8018be4:	f001 f946 	bl	8019e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018be8:	2301      	movs	r3, #1
 8018bea:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018bec:	f002 fb56 	bl	801b29c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018bf0:	f000 fdc8 	bl	8019784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018bf4:	f002 fb24 	bl	801b240 <vPortEnterCritical>
 8018bf8:	69fb      	ldr	r3, [r7, #28]
 8018bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018bfe:	b25b      	sxtb	r3, r3
 8018c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c04:	d103      	bne.n	8018c0e <xQueueSemaphoreTake+0x112>
 8018c06:	69fb      	ldr	r3, [r7, #28]
 8018c08:	2200      	movs	r2, #0
 8018c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018c0e:	69fb      	ldr	r3, [r7, #28]
 8018c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018c14:	b25b      	sxtb	r3, r3
 8018c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c1a:	d103      	bne.n	8018c24 <xQueueSemaphoreTake+0x128>
 8018c1c:	69fb      	ldr	r3, [r7, #28]
 8018c1e:	2200      	movs	r2, #0
 8018c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018c24:	f002 fb3a 	bl	801b29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018c28:	463a      	mov	r2, r7
 8018c2a:	f107 030c 	add.w	r3, r7, #12
 8018c2e:	4611      	mov	r1, r2
 8018c30:	4618      	mov	r0, r3
 8018c32:	f001 f935 	bl	8019ea0 <xTaskCheckForTimeOut>
 8018c36:	4603      	mov	r3, r0
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d138      	bne.n	8018cae <xQueueSemaphoreTake+0x1b2>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018c3c:	69f8      	ldr	r0, [r7, #28]
 8018c3e:	f000 fa49 	bl	80190d4 <prvIsQueueEmpty>
 8018c42:	4603      	mov	r3, r0
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d02c      	beq.n	8018ca2 <xQueueSemaphoreTake+0x1a6>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8018c48:	69fb      	ldr	r3, [r7, #28]
 8018c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c4c:	4a2f      	ldr	r2, [pc, #188]	; (8018d0c <xQueueSemaphoreTake+0x210>)
 8018c4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8018c52:	6013      	str	r3, [r2, #0]

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018c54:	69fb      	ldr	r3, [r7, #28]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d109      	bne.n	8018c70 <xQueueSemaphoreTake+0x174>
					{
						taskENTER_CRITICAL();
 8018c5c:	f002 faf0 	bl	801b240 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018c60:	69fb      	ldr	r3, [r7, #28]
 8018c62:	689b      	ldr	r3, [r3, #8]
 8018c64:	4618      	mov	r0, r3
 8018c66:	f001 fb53 	bl	801a310 <xTaskPriorityInherit>
 8018c6a:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8018c6c:	f002 fb16 	bl	801b29c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018c70:	69fb      	ldr	r3, [r7, #28]
 8018c72:	3324      	adds	r3, #36	; 0x24
 8018c74:	683a      	ldr	r2, [r7, #0]
 8018c76:	4611      	mov	r1, r2
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f001 f84b 	bl	8019d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018c7e:	69f8      	ldr	r0, [r7, #28]
 8018c80:	f000 f9d6 	bl	8019030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018c84:	f000 fd8c 	bl	80197a0 <xTaskResumeAll>
 8018c88:	4603      	mov	r3, r0
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	f47f af67 	bne.w	8018b5e <xQueueSemaphoreTake+0x62>
				{
					portYIELD_WITHIN_API();
 8018c90:	4b1c      	ldr	r3, [pc, #112]	; (8018d04 <xQueueSemaphoreTake+0x208>)
 8018c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c96:	601a      	str	r2, [r3, #0]
 8018c98:	f3bf 8f4f 	dsb	sy
 8018c9c:	f3bf 8f6f 	isb	sy
 8018ca0:	e75d      	b.n	8018b5e <xQueueSemaphoreTake+0x62>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8018ca2:	69f8      	ldr	r0, [r7, #28]
 8018ca4:	f000 f9c4 	bl	8019030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018ca8:	f000 fd7a 	bl	80197a0 <xTaskResumeAll>
 8018cac:	e757      	b.n	8018b5e <xQueueSemaphoreTake+0x62>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8018cae:	69f8      	ldr	r0, [r7, #28]
 8018cb0:	f000 f9be 	bl	8019030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018cb4:	f000 fd74 	bl	80197a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018cb8:	69f8      	ldr	r0, [r7, #28]
 8018cba:	f000 fa0b 	bl	80190d4 <prvIsQueueEmpty>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f43f af4c 	beq.w	8018b5e <xQueueSemaphoreTake+0x62>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8018cc6:	6a3b      	ldr	r3, [r7, #32]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d00d      	beq.n	8018ce8 <xQueueSemaphoreTake+0x1ec>
					{
						taskENTER_CRITICAL();
 8018ccc:	f002 fab8 	bl	801b240 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018cd0:	69f8      	ldr	r0, [r7, #28]
 8018cd2:	f000 f905 	bl	8018ee0 <prvGetDisinheritPriorityAfterTimeout>
 8018cd6:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8018cd8:	69fb      	ldr	r3, [r7, #28]
 8018cda:	689b      	ldr	r3, [r3, #8]
 8018cdc:	6979      	ldr	r1, [r7, #20]
 8018cde:	4618      	mov	r0, r3
 8018ce0:	f001 fc0e 	bl	801a500 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018ce4:	f002 fada 	bl	801b29c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018cea:	4618      	mov	r0, r3
 8018cec:	3728      	adds	r7, #40	; 0x28
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	bd80      	pop	{r7, pc}
 8018cf2:	bf00      	nop
 8018cf4:	08023f00 	.word	0x08023f00
 8018cf8:	08024178 	.word	0x08024178
 8018cfc:	080240f4 	.word	0x080240f4
 8018d00:	0802409c 	.word	0x0802409c
 8018d04:	e000ed04 	.word	0xe000ed04
 8018d08:	080241d8 	.word	0x080241d8
 8018d0c:	e000000c 	.word	0xe000000c

08018d10 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b08a      	sub	sp, #40	; 0x28
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	60f8      	str	r0, [r7, #12]
 8018d18:	60b9      	str	r1, [r7, #8]
 8018d1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018d24:	6a3b      	ldr	r3, [r7, #32]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d105      	bne.n	8018d36 <xQueuePeek+0x26>
 8018d2a:	f240 626c 	movw	r2, #1644	; 0x66c
 8018d2e:	4960      	ldr	r1, [pc, #384]	; (8018eb0 <xQueuePeek+0x1a0>)
 8018d30:	4860      	ldr	r0, [pc, #384]	; (8018eb4 <xQueuePeek+0x1a4>)
 8018d32:	f7f1 fdaf 	bl	800a894 <assertFail>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d103      	bne.n	8018d44 <xQueuePeek+0x34>
 8018d3c:	6a3b      	ldr	r3, [r7, #32]
 8018d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d101      	bne.n	8018d48 <xQueuePeek+0x38>
 8018d44:	2301      	movs	r3, #1
 8018d46:	e000      	b.n	8018d4a <xQueuePeek+0x3a>
 8018d48:	2300      	movs	r3, #0
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d105      	bne.n	8018d5a <xQueuePeek+0x4a>
 8018d4e:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8018d52:	4957      	ldr	r1, [pc, #348]	; (8018eb0 <xQueuePeek+0x1a0>)
 8018d54:	4858      	ldr	r0, [pc, #352]	; (8018eb8 <xQueuePeek+0x1a8>)
 8018d56:	f7f1 fd9d 	bl	800a894 <assertFail>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018d5a:	f001 fabb 	bl	801a2d4 <xTaskGetSchedulerState>
 8018d5e:	4603      	mov	r3, r0
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d102      	bne.n	8018d6a <xQueuePeek+0x5a>
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d101      	bne.n	8018d6e <xQueuePeek+0x5e>
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	e000      	b.n	8018d70 <xQueuePeek+0x60>
 8018d6e:	2300      	movs	r3, #0
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d105      	bne.n	8018d80 <xQueuePeek+0x70>
 8018d74:	f240 6275 	movw	r2, #1653	; 0x675
 8018d78:	494d      	ldr	r1, [pc, #308]	; (8018eb0 <xQueuePeek+0x1a0>)
 8018d7a:	4850      	ldr	r0, [pc, #320]	; (8018ebc <xQueuePeek+0x1ac>)
 8018d7c:	f7f1 fd8a 	bl	800a894 <assertFail>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018d80:	f002 fa5e 	bl	801b240 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018d84:	6a3b      	ldr	r3, [r7, #32]
 8018d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d88:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018d8a:	69fb      	ldr	r3, [r7, #28]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d021      	beq.n	8018dd4 <xQueuePeek+0xc4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8018d90:	6a3b      	ldr	r3, [r7, #32]
 8018d92:	68db      	ldr	r3, [r3, #12]
 8018d94:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018d96:	68b9      	ldr	r1, [r7, #8]
 8018d98:	6a38      	ldr	r0, [r7, #32]
 8018d9a:	f000 f923 	bl	8018fe4 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8018d9e:	6a3b      	ldr	r3, [r7, #32]
 8018da0:	69ba      	ldr	r2, [r7, #24]
 8018da2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018da4:	6a3b      	ldr	r3, [r7, #32]
 8018da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d00f      	beq.n	8018dcc <xQueuePeek+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018dac:	6a3b      	ldr	r3, [r7, #32]
 8018dae:	3324      	adds	r3, #36	; 0x24
 8018db0:	4618      	mov	r0, r3
 8018db2:	f000 fffd 	bl	8019db0 <xTaskRemoveFromEventList>
 8018db6:	4603      	mov	r3, r0
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d007      	beq.n	8018dcc <xQueuePeek+0xbc>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8018dbc:	4b40      	ldr	r3, [pc, #256]	; (8018ec0 <xQueuePeek+0x1b0>)
 8018dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dc2:	601a      	str	r2, [r3, #0]
 8018dc4:	f3bf 8f4f 	dsb	sy
 8018dc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018dcc:	f002 fa66 	bl	801b29c <vPortExitCritical>
				return pdPASS;
 8018dd0:	2301      	movs	r3, #1
 8018dd2:	e069      	b.n	8018ea8 <xQueuePeek+0x198>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d103      	bne.n	8018de2 <xQueuePeek+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018dda:	f002 fa5f 	bl	801b29c <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018dde:	2300      	movs	r3, #0
 8018de0:	e062      	b.n	8018ea8 <xQueuePeek+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d106      	bne.n	8018df6 <xQueuePeek+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018de8:	f107 0310 	add.w	r3, r7, #16
 8018dec:	4618      	mov	r0, r3
 8018dee:	f001 f841 	bl	8019e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018df2:	2301      	movs	r3, #1
 8018df4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018df6:	f002 fa51 	bl	801b29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018dfa:	f000 fcc3 	bl	8019784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018dfe:	f002 fa1f 	bl	801b240 <vPortEnterCritical>
 8018e02:	6a3b      	ldr	r3, [r7, #32]
 8018e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018e08:	b25b      	sxtb	r3, r3
 8018e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e0e:	d103      	bne.n	8018e18 <xQueuePeek+0x108>
 8018e10:	6a3b      	ldr	r3, [r7, #32]
 8018e12:	2200      	movs	r2, #0
 8018e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018e18:	6a3b      	ldr	r3, [r7, #32]
 8018e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018e1e:	b25b      	sxtb	r3, r3
 8018e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e24:	d103      	bne.n	8018e2e <xQueuePeek+0x11e>
 8018e26:	6a3b      	ldr	r3, [r7, #32]
 8018e28:	2200      	movs	r2, #0
 8018e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018e2e:	f002 fa35 	bl	801b29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018e32:	1d3a      	adds	r2, r7, #4
 8018e34:	f107 0310 	add.w	r3, r7, #16
 8018e38:	4611      	mov	r1, r2
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	f001 f830 	bl	8019ea0 <xTaskCheckForTimeOut>
 8018e40:	4603      	mov	r3, r0
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d123      	bne.n	8018e8e <xQueuePeek+0x17e>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018e46:	6a38      	ldr	r0, [r7, #32]
 8018e48:	f000 f944 	bl	80190d4 <prvIsQueueEmpty>
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d017      	beq.n	8018e82 <xQueuePeek+0x172>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8018e52:	6a3b      	ldr	r3, [r7, #32]
 8018e54:	3324      	adds	r3, #36	; 0x24
 8018e56:	687a      	ldr	r2, [r7, #4]
 8018e58:	4611      	mov	r1, r2
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f000 ff5a 	bl	8019d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018e60:	6a38      	ldr	r0, [r7, #32]
 8018e62:	f000 f8e5 	bl	8019030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018e66:	f000 fc9b 	bl	80197a0 <xTaskResumeAll>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d187      	bne.n	8018d80 <xQueuePeek+0x70>
				{
					portYIELD_WITHIN_API();
 8018e70:	4b13      	ldr	r3, [pc, #76]	; (8018ec0 <xQueuePeek+0x1b0>)
 8018e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e76:	601a      	str	r2, [r3, #0]
 8018e78:	f3bf 8f4f 	dsb	sy
 8018e7c:	f3bf 8f6f 	isb	sy
 8018e80:	e77e      	b.n	8018d80 <xQueuePeek+0x70>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8018e82:	6a38      	ldr	r0, [r7, #32]
 8018e84:	f000 f8d4 	bl	8019030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018e88:	f000 fc8a 	bl	80197a0 <xTaskResumeAll>
 8018e8c:	e778      	b.n	8018d80 <xQueuePeek+0x70>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8018e8e:	6a38      	ldr	r0, [r7, #32]
 8018e90:	f000 f8ce 	bl	8019030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018e94:	f000 fc84 	bl	80197a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018e98:	6a38      	ldr	r0, [r7, #32]
 8018e9a:	f000 f91b 	bl	80190d4 <prvIsQueueEmpty>
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	f43f af6d 	beq.w	8018d80 <xQueuePeek+0x70>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018ea6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	3728      	adds	r7, #40	; 0x28
 8018eac:	46bd      	mov	sp, r7
 8018eae:	bd80      	pop	{r7, pc}
 8018eb0:	08023f00 	.word	0x08023f00
 8018eb4:	08024178 	.word	0x08024178
 8018eb8:	08024184 	.word	0x08024184
 8018ebc:	0802409c 	.word	0x0802409c
 8018ec0:	e000ed04 	.word	0xe000ed04

08018ec4 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8018ec4:	b480      	push	{r7}
 8018ec6:	b083      	sub	sp, #12
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	683a      	ldr	r2, [r7, #0]
 8018ed2:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8018ed4:	bf00      	nop
 8018ed6:	370c      	adds	r7, #12
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ede:	4770      	bx	lr

08018ee0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b085      	sub	sp, #20
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d006      	beq.n	8018efe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	f1c3 0314 	rsb	r3, r3, #20
 8018efa:	60fb      	str	r3, [r7, #12]
 8018efc:	e001      	b.n	8018f02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018efe:	2300      	movs	r3, #0
 8018f00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018f02:	68fb      	ldr	r3, [r7, #12]
	}
 8018f04:	4618      	mov	r0, r3
 8018f06:	3714      	adds	r7, #20
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0e:	4770      	bx	lr

08018f10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b086      	sub	sp, #24
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	60f8      	str	r0, [r7, #12]
 8018f18:	60b9      	str	r1, [r7, #8]
 8018f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d10d      	bne.n	8018f4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d14d      	bne.n	8018fd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	689b      	ldr	r3, [r3, #8]
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f001 fa5e 	bl	801a3fc <xTaskPriorityDisinherit>
 8018f40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	2200      	movs	r2, #0
 8018f46:	609a      	str	r2, [r3, #8]
 8018f48:	e043      	b.n	8018fd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d119      	bne.n	8018f84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	6858      	ldr	r0, [r3, #4]
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f58:	461a      	mov	r2, r3
 8018f5a:	68b9      	ldr	r1, [r7, #8]
 8018f5c:	f004 f931 	bl	801d1c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	685a      	ldr	r2, [r3, #4]
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f68:	441a      	add	r2, r3
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	685a      	ldr	r2, [r3, #4]
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	689b      	ldr	r3, [r3, #8]
 8018f76:	429a      	cmp	r2, r3
 8018f78:	d32b      	bcc.n	8018fd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018f7a:	68fb      	ldr	r3, [r7, #12]
 8018f7c:	681a      	ldr	r2, [r3, #0]
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	605a      	str	r2, [r3, #4]
 8018f82:	e026      	b.n	8018fd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	68d8      	ldr	r0, [r3, #12]
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	68b9      	ldr	r1, [r7, #8]
 8018f90:	f004 f917 	bl	801d1c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	68da      	ldr	r2, [r3, #12]
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f9c:	425b      	negs	r3, r3
 8018f9e:	441a      	add	r2, r3
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	68da      	ldr	r2, [r3, #12]
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d207      	bcs.n	8018fc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	689a      	ldr	r2, [r3, #8]
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018fb8:	425b      	negs	r3, r3
 8018fba:	441a      	add	r2, r3
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	2b02      	cmp	r3, #2
 8018fc4:	d105      	bne.n	8018fd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d002      	beq.n	8018fd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018fcc:	693b      	ldr	r3, [r7, #16]
 8018fce:	3b01      	subs	r3, #1
 8018fd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	1c5a      	adds	r2, r3, #1
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018fda:	697b      	ldr	r3, [r7, #20]
}
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3718      	adds	r7, #24
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}

08018fe4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b082      	sub	sp, #8
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
 8018fec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d018      	beq.n	8019028 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	68da      	ldr	r2, [r3, #12]
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ffe:	441a      	add	r2, r3
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	68da      	ldr	r2, [r3, #12]
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	689b      	ldr	r3, [r3, #8]
 801900c:	429a      	cmp	r2, r3
 801900e:	d303      	bcc.n	8019018 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681a      	ldr	r2, [r3, #0]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	68d9      	ldr	r1, [r3, #12]
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019020:	461a      	mov	r2, r3
 8019022:	6838      	ldr	r0, [r7, #0]
 8019024:	f004 f8cd 	bl	801d1c2 <memcpy>
	}
}
 8019028:	bf00      	nop
 801902a:	3708      	adds	r7, #8
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}

08019030 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b084      	sub	sp, #16
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019038:	f002 f902 	bl	801b240 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019042:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019044:	e011      	b.n	801906a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801904a:	2b00      	cmp	r3, #0
 801904c:	d012      	beq.n	8019074 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	3324      	adds	r3, #36	; 0x24
 8019052:	4618      	mov	r0, r3
 8019054:	f000 feac 	bl	8019db0 <xTaskRemoveFromEventList>
 8019058:	4603      	mov	r3, r0
 801905a:	2b00      	cmp	r3, #0
 801905c:	d001      	beq.n	8019062 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801905e:	f000 ff7d 	bl	8019f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019062:	7bfb      	ldrb	r3, [r7, #15]
 8019064:	3b01      	subs	r3, #1
 8019066:	b2db      	uxtb	r3, r3
 8019068:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801906a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801906e:	2b00      	cmp	r3, #0
 8019070:	dce9      	bgt.n	8019046 <prvUnlockQueue+0x16>
 8019072:	e000      	b.n	8019076 <prvUnlockQueue+0x46>
					break;
 8019074:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	22ff      	movs	r2, #255	; 0xff
 801907a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801907e:	f002 f90d 	bl	801b29c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019082:	f002 f8dd 	bl	801b240 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801908c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801908e:	e011      	b.n	80190b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	691b      	ldr	r3, [r3, #16]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d012      	beq.n	80190be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	3310      	adds	r3, #16
 801909c:	4618      	mov	r0, r3
 801909e:	f000 fe87 	bl	8019db0 <xTaskRemoveFromEventList>
 80190a2:	4603      	mov	r3, r0
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d001      	beq.n	80190ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80190a8:	f000 ff58 	bl	8019f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80190ac:	7bbb      	ldrb	r3, [r7, #14]
 80190ae:	3b01      	subs	r3, #1
 80190b0:	b2db      	uxtb	r3, r3
 80190b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80190b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	dce9      	bgt.n	8019090 <prvUnlockQueue+0x60>
 80190bc:	e000      	b.n	80190c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80190be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	22ff      	movs	r2, #255	; 0xff
 80190c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80190c8:	f002 f8e8 	bl	801b29c <vPortExitCritical>
}
 80190cc:	bf00      	nop
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80190dc:	f002 f8b0 	bl	801b240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d102      	bne.n	80190ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80190e8:	2301      	movs	r3, #1
 80190ea:	60fb      	str	r3, [r7, #12]
 80190ec:	e001      	b.n	80190f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80190ee:	2300      	movs	r3, #0
 80190f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80190f2:	f002 f8d3 	bl	801b29c <vPortExitCritical>

	return xReturn;
 80190f6:	68fb      	ldr	r3, [r7, #12]
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3710      	adds	r7, #16
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}

08019100 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b084      	sub	sp, #16
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019108:	f002 f89a 	bl	801b240 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019114:	429a      	cmp	r2, r3
 8019116:	d102      	bne.n	801911e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019118:	2301      	movs	r3, #1
 801911a:	60fb      	str	r3, [r7, #12]
 801911c:	e001      	b.n	8019122 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801911e:	2300      	movs	r3, #0
 8019120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019122:	f002 f8bb 	bl	801b29c <vPortExitCritical>

	return xReturn;
 8019126:	68fb      	ldr	r3, [r7, #12]
}
 8019128:	4618      	mov	r0, r3
 801912a:	3710      	adds	r7, #16
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8019130:	b480      	push	{r7}
 8019132:	b085      	sub	sp, #20
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801913a:	2300      	movs	r3, #0
 801913c:	60fb      	str	r3, [r7, #12]
 801913e:	e014      	b.n	801916a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8019140:	4a0f      	ldr	r2, [pc, #60]	; (8019180 <vQueueAddToRegistry+0x50>)
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d10b      	bne.n	8019164 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801914c:	490c      	ldr	r1, [pc, #48]	; (8019180 <vQueueAddToRegistry+0x50>)
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	683a      	ldr	r2, [r7, #0]
 8019152:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019156:	4a0a      	ldr	r2, [pc, #40]	; (8019180 <vQueueAddToRegistry+0x50>)
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	00db      	lsls	r3, r3, #3
 801915c:	4413      	add	r3, r2
 801915e:	687a      	ldr	r2, [r7, #4]
 8019160:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8019162:	e006      	b.n	8019172 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	3301      	adds	r3, #1
 8019168:	60fb      	str	r3, [r7, #12]
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	2b09      	cmp	r3, #9
 801916e:	d9e7      	bls.n	8019140 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8019170:	bf00      	nop
 8019172:	bf00      	nop
 8019174:	3714      	adds	r7, #20
 8019176:	46bd      	mov	sp, r7
 8019178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917c:	4770      	bx	lr
 801917e:	bf00      	nop
 8019180:	2000a30c 	.word	0x2000a30c

08019184 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019184:	b580      	push	{r7, lr}
 8019186:	b086      	sub	sp, #24
 8019188:	af00      	add	r7, sp, #0
 801918a:	60f8      	str	r0, [r7, #12]
 801918c:	60b9      	str	r1, [r7, #8]
 801918e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8019194:	f002 f854 	bl	801b240 <vPortEnterCritical>
 8019198:	697b      	ldr	r3, [r7, #20]
 801919a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801919e:	b25b      	sxtb	r3, r3
 80191a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80191a4:	d103      	bne.n	80191ae <vQueueWaitForMessageRestricted+0x2a>
 80191a6:	697b      	ldr	r3, [r7, #20]
 80191a8:	2200      	movs	r2, #0
 80191aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80191b4:	b25b      	sxtb	r3, r3
 80191b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80191ba:	d103      	bne.n	80191c4 <vQueueWaitForMessageRestricted+0x40>
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	2200      	movs	r2, #0
 80191c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80191c4:	f002 f86a 	bl	801b29c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d106      	bne.n	80191de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80191d0:	697b      	ldr	r3, [r7, #20]
 80191d2:	3324      	adds	r3, #36	; 0x24
 80191d4:	687a      	ldr	r2, [r7, #4]
 80191d6:	68b9      	ldr	r1, [r7, #8]
 80191d8:	4618      	mov	r0, r3
 80191da:	f000 fdbf 	bl	8019d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80191de:	6978      	ldr	r0, [r7, #20]
 80191e0:	f7ff ff26 	bl	8019030 <prvUnlockQueue>
	}
 80191e4:	bf00      	nop
 80191e6:	3718      	adds	r7, #24
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b08c      	sub	sp, #48	; 0x30
 80191f0:	af04      	add	r7, sp, #16
 80191f2:	60f8      	str	r0, [r7, #12]
 80191f4:	60b9      	str	r1, [r7, #8]
 80191f6:	607a      	str	r2, [r7, #4]
 80191f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80191fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d105      	bne.n	801920c <xTaskCreateStatic+0x20>
 8019200:	f44f 7214 	mov.w	r2, #592	; 0x250
 8019204:	4920      	ldr	r1, [pc, #128]	; (8019288 <xTaskCreateStatic+0x9c>)
 8019206:	4821      	ldr	r0, [pc, #132]	; (801928c <xTaskCreateStatic+0xa0>)
 8019208:	f7f1 fb44 	bl	800a894 <assertFail>
		configASSERT( pxTaskBuffer != NULL );
 801920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801920e:	2b00      	cmp	r3, #0
 8019210:	d105      	bne.n	801921e <xTaskCreateStatic+0x32>
 8019212:	f240 2251 	movw	r2, #593	; 0x251
 8019216:	491c      	ldr	r1, [pc, #112]	; (8019288 <xTaskCreateStatic+0x9c>)
 8019218:	481d      	ldr	r0, [pc, #116]	; (8019290 <xTaskCreateStatic+0xa4>)
 801921a:	f7f1 fb3b 	bl	800a894 <assertFail>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801921e:	23b8      	movs	r3, #184	; 0xb8
 8019220:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019222:	697b      	ldr	r3, [r7, #20]
 8019224:	2bb8      	cmp	r3, #184	; 0xb8
 8019226:	d005      	beq.n	8019234 <xTaskCreateStatic+0x48>
 8019228:	f240 2259 	movw	r2, #601	; 0x259
 801922c:	4916      	ldr	r1, [pc, #88]	; (8019288 <xTaskCreateStatic+0x9c>)
 801922e:	4819      	ldr	r0, [pc, #100]	; (8019294 <xTaskCreateStatic+0xa8>)
 8019230:	f7f1 fb30 	bl	800a894 <assertFail>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8019234:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019238:	2b00      	cmp	r3, #0
 801923a:	d01e      	beq.n	801927a <xTaskCreateStatic+0x8e>
 801923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801923e:	2b00      	cmp	r3, #0
 8019240:	d01b      	beq.n	801927a <xTaskCreateStatic+0x8e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019244:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019246:	69fb      	ldr	r3, [r7, #28]
 8019248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801924a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801924c:	69fb      	ldr	r3, [r7, #28]
 801924e:	2202      	movs	r2, #2
 8019250:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8019254:	2300      	movs	r3, #0
 8019256:	9303      	str	r3, [sp, #12]
 8019258:	69fb      	ldr	r3, [r7, #28]
 801925a:	9302      	str	r3, [sp, #8]
 801925c:	f107 0318 	add.w	r3, r7, #24
 8019260:	9301      	str	r3, [sp, #4]
 8019262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019264:	9300      	str	r3, [sp, #0]
 8019266:	683b      	ldr	r3, [r7, #0]
 8019268:	687a      	ldr	r2, [r7, #4]
 801926a:	68b9      	ldr	r1, [r7, #8]
 801926c:	68f8      	ldr	r0, [r7, #12]
 801926e:	f000 f859 	bl	8019324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019272:	69f8      	ldr	r0, [r7, #28]
 8019274:	f000 f904 	bl	8019480 <prvAddNewTaskToReadyList>
 8019278:	e001      	b.n	801927e <xTaskCreateStatic+0x92>
		}
		else
		{
			xReturn = NULL;
 801927a:	2300      	movs	r3, #0
 801927c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801927e:	69bb      	ldr	r3, [r7, #24]
	}
 8019280:	4618      	mov	r0, r3
 8019282:	3720      	adds	r7, #32
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}
 8019288:	08024268 	.word	0x08024268
 801928c:	0802429c 	.word	0x0802429c
 8019290:	080242b4 	.word	0x080242b4
 8019294:	080242cc 	.word	0x080242cc

08019298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019298:	b580      	push	{r7, lr}
 801929a:	b08c      	sub	sp, #48	; 0x30
 801929c:	af04      	add	r7, sp, #16
 801929e:	60f8      	str	r0, [r7, #12]
 80192a0:	60b9      	str	r1, [r7, #8]
 80192a2:	603b      	str	r3, [r7, #0]
 80192a4:	4613      	mov	r3, r2
 80192a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80192a8:	88fb      	ldrh	r3, [r7, #6]
 80192aa:	009b      	lsls	r3, r3, #2
 80192ac:	4618      	mov	r0, r3
 80192ae:	f002 f8d7 	bl	801b460 <pvPortMalloc>
 80192b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d00e      	beq.n	80192d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80192ba:	20b8      	movs	r0, #184	; 0xb8
 80192bc:	f002 f8d0 	bl	801b460 <pvPortMalloc>
 80192c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80192c2:	69fb      	ldr	r3, [r7, #28]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d003      	beq.n	80192d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80192c8:	69fb      	ldr	r3, [r7, #28]
 80192ca:	697a      	ldr	r2, [r7, #20]
 80192cc:	631a      	str	r2, [r3, #48]	; 0x30
 80192ce:	e005      	b.n	80192dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80192d0:	6978      	ldr	r0, [r7, #20]
 80192d2:	f002 f987 	bl	801b5e4 <vPortFree>
 80192d6:	e001      	b.n	80192dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80192d8:	2300      	movs	r3, #0
 80192da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80192dc:	69fb      	ldr	r3, [r7, #28]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d017      	beq.n	8019312 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80192e2:	69fb      	ldr	r3, [r7, #28]
 80192e4:	2200      	movs	r2, #0
 80192e6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80192ea:	88fa      	ldrh	r2, [r7, #6]
 80192ec:	2300      	movs	r3, #0
 80192ee:	9303      	str	r3, [sp, #12]
 80192f0:	69fb      	ldr	r3, [r7, #28]
 80192f2:	9302      	str	r3, [sp, #8]
 80192f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192f6:	9301      	str	r3, [sp, #4]
 80192f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192fa:	9300      	str	r3, [sp, #0]
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	68b9      	ldr	r1, [r7, #8]
 8019300:	68f8      	ldr	r0, [r7, #12]
 8019302:	f000 f80f 	bl	8019324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019306:	69f8      	ldr	r0, [r7, #28]
 8019308:	f000 f8ba 	bl	8019480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801930c:	2301      	movs	r3, #1
 801930e:	61bb      	str	r3, [r7, #24]
 8019310:	e002      	b.n	8019318 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019316:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019318:	69bb      	ldr	r3, [r7, #24]
	}
 801931a:	4618      	mov	r0, r3
 801931c:	3720      	adds	r7, #32
 801931e:	46bd      	mov	sp, r7
 8019320:	bd80      	pop	{r7, pc}
	...

08019324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8019324:	b580      	push	{r7, lr}
 8019326:	b086      	sub	sp, #24
 8019328:	af00      	add	r7, sp, #0
 801932a:	60f8      	str	r0, [r7, #12]
 801932c:	60b9      	str	r1, [r7, #8]
 801932e:	607a      	str	r2, [r7, #4]
 8019330:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8019332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019334:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	009b      	lsls	r3, r3, #2
 801933a:	461a      	mov	r2, r3
 801933c:	21a5      	movs	r1, #165	; 0xa5
 801933e:	f003 fe3b 	bl	801cfb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8019342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801934c:	3b01      	subs	r3, #1
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	4413      	add	r3, r2
 8019352:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8019354:	693b      	ldr	r3, [r7, #16]
 8019356:	f023 0307 	bic.w	r3, r3, #7
 801935a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801935c:	693b      	ldr	r3, [r7, #16]
 801935e:	f003 0307 	and.w	r3, r3, #7
 8019362:	2b00      	cmp	r3, #0
 8019364:	d005      	beq.n	8019372 <prvInitialiseNewTask+0x4e>
 8019366:	f44f 7259 	mov.w	r2, #868	; 0x364
 801936a:	4940      	ldr	r1, [pc, #256]	; (801946c <prvInitialiseNewTask+0x148>)
 801936c:	4840      	ldr	r0, [pc, #256]	; (8019470 <prvInitialiseNewTask+0x14c>)
 801936e:	f7f1 fa91 	bl	800a894 <assertFail>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8019372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019374:	693a      	ldr	r2, [r7, #16]
 8019376:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d01f      	beq.n	80193be <prvInitialiseNewTask+0x9a>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801937e:	2300      	movs	r3, #0
 8019380:	617b      	str	r3, [r7, #20]
 8019382:	e012      	b.n	80193aa <prvInitialiseNewTask+0x86>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019384:	68ba      	ldr	r2, [r7, #8]
 8019386:	697b      	ldr	r3, [r7, #20]
 8019388:	4413      	add	r3, r2
 801938a:	7819      	ldrb	r1, [r3, #0]
 801938c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	4413      	add	r3, r2
 8019392:	3334      	adds	r3, #52	; 0x34
 8019394:	460a      	mov	r2, r1
 8019396:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019398:	68ba      	ldr	r2, [r7, #8]
 801939a:	697b      	ldr	r3, [r7, #20]
 801939c:	4413      	add	r3, r2
 801939e:	781b      	ldrb	r3, [r3, #0]
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d006      	beq.n	80193b2 <prvInitialiseNewTask+0x8e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80193a4:	697b      	ldr	r3, [r7, #20]
 80193a6:	3301      	adds	r3, #1
 80193a8:	617b      	str	r3, [r7, #20]
 80193aa:	697b      	ldr	r3, [r7, #20]
 80193ac:	2b0f      	cmp	r3, #15
 80193ae:	d9e9      	bls.n	8019384 <prvInitialiseNewTask+0x60>
 80193b0:	e000      	b.n	80193b4 <prvInitialiseNewTask+0x90>
			{
				break;
 80193b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80193b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193b6:	2200      	movs	r2, #0
 80193b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80193bc:	e003      	b.n	80193c6 <prvInitialiseNewTask+0xa2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80193be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c0:	2200      	movs	r2, #0
 80193c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80193c6:	6a3b      	ldr	r3, [r7, #32]
 80193c8:	2b13      	cmp	r3, #19
 80193ca:	d901      	bls.n	80193d0 <prvInitialiseNewTask+0xac>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80193cc:	2313      	movs	r3, #19
 80193ce:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80193d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d2:	6a3a      	ldr	r2, [r7, #32]
 80193d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80193d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d8:	6a3a      	ldr	r2, [r7, #32]
 80193da:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80193dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193de:	2200      	movs	r2, #0
 80193e0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80193e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e4:	3304      	adds	r3, #4
 80193e6:	4618      	mov	r0, r3
 80193e8:	f7fe fef4 	bl	80181d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80193ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ee:	3318      	adds	r3, #24
 80193f0:	4618      	mov	r0, r3
 80193f2:	f7fe feef 	bl	80181d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80193f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80193fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80193fc:	6a3b      	ldr	r3, [r7, #32]
 80193fe:	f1c3 0214 	rsb	r2, r3, #20
 8019402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019404:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801940a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801940e:	2200      	movs	r2, #0
 8019410:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8019412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019414:	2200      	movs	r2, #0
 8019416:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801941a:	2200      	movs	r2, #0
 801941c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019422:	2200      	movs	r2, #0
 8019424:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8019428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801942a:	3360      	adds	r3, #96	; 0x60
 801942c:	224c      	movs	r2, #76	; 0x4c
 801942e:	2100      	movs	r1, #0
 8019430:	4618      	mov	r0, r3
 8019432:	f003 fdc1 	bl	801cfb8 <memset>
 8019436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019438:	4a0e      	ldr	r2, [pc, #56]	; (8019474 <prvInitialiseNewTask+0x150>)
 801943a:	665a      	str	r2, [r3, #100]	; 0x64
 801943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801943e:	4a0e      	ldr	r2, [pc, #56]	; (8019478 <prvInitialiseNewTask+0x154>)
 8019440:	669a      	str	r2, [r3, #104]	; 0x68
 8019442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019444:	4a0d      	ldr	r2, [pc, #52]	; (801947c <prvInitialiseNewTask+0x158>)
 8019446:	66da      	str	r2, [r3, #108]	; 0x6c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019448:	683a      	ldr	r2, [r7, #0]
 801944a:	68f9      	ldr	r1, [r7, #12]
 801944c:	6938      	ldr	r0, [r7, #16]
 801944e:	f001 fdc9 	bl	801afe4 <pxPortInitialiseStack>
 8019452:	4602      	mov	r2, r0
 8019454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019456:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801945a:	2b00      	cmp	r3, #0
 801945c:	d002      	beq.n	8019464 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019462:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019464:	bf00      	nop
 8019466:	3718      	adds	r7, #24
 8019468:	46bd      	mov	sp, r7
 801946a:	bd80      	pop	{r7, pc}
 801946c:	08024268 	.word	0x08024268
 8019470:	080242e8 	.word	0x080242e8
 8019474:	2000ff6c 	.word	0x2000ff6c
 8019478:	2000ffd4 	.word	0x2000ffd4
 801947c:	2001003c 	.word	0x2001003c

08019480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b082      	sub	sp, #8
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019488:	f001 feda 	bl	801b240 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801948c:	4b2c      	ldr	r3, [pc, #176]	; (8019540 <prvAddNewTaskToReadyList+0xc0>)
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	3301      	adds	r3, #1
 8019492:	4a2b      	ldr	r2, [pc, #172]	; (8019540 <prvAddNewTaskToReadyList+0xc0>)
 8019494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019496:	4b2b      	ldr	r3, [pc, #172]	; (8019544 <prvAddNewTaskToReadyList+0xc4>)
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d109      	bne.n	80194b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801949e:	4a29      	ldr	r2, [pc, #164]	; (8019544 <prvAddNewTaskToReadyList+0xc4>)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80194a4:	4b26      	ldr	r3, [pc, #152]	; (8019540 <prvAddNewTaskToReadyList+0xc0>)
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	2b01      	cmp	r3, #1
 80194aa:	d110      	bne.n	80194ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80194ac:	f000 fd7c 	bl	8019fa8 <prvInitialiseTaskLists>
 80194b0:	e00d      	b.n	80194ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80194b2:	4b25      	ldr	r3, [pc, #148]	; (8019548 <prvAddNewTaskToReadyList+0xc8>)
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d109      	bne.n	80194ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80194ba:	4b22      	ldr	r3, [pc, #136]	; (8019544 <prvAddNewTaskToReadyList+0xc4>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d802      	bhi.n	80194ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80194c8:	4a1e      	ldr	r2, [pc, #120]	; (8019544 <prvAddNewTaskToReadyList+0xc4>)
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80194ce:	4b1f      	ldr	r3, [pc, #124]	; (801954c <prvAddNewTaskToReadyList+0xcc>)
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	3301      	adds	r3, #1
 80194d4:	4a1d      	ldr	r2, [pc, #116]	; (801954c <prvAddNewTaskToReadyList+0xcc>)
 80194d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80194d8:	4b1c      	ldr	r3, [pc, #112]	; (801954c <prvAddNewTaskToReadyList+0xcc>)
 80194da:	681a      	ldr	r2, [r3, #0]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194e4:	2201      	movs	r2, #1
 80194e6:	409a      	lsls	r2, r3
 80194e8:	4b19      	ldr	r3, [pc, #100]	; (8019550 <prvAddNewTaskToReadyList+0xd0>)
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	4313      	orrs	r3, r2
 80194ee:	4a18      	ldr	r2, [pc, #96]	; (8019550 <prvAddNewTaskToReadyList+0xd0>)
 80194f0:	6013      	str	r3, [r2, #0]
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194f6:	4613      	mov	r3, r2
 80194f8:	009b      	lsls	r3, r3, #2
 80194fa:	4413      	add	r3, r2
 80194fc:	009b      	lsls	r3, r3, #2
 80194fe:	4a15      	ldr	r2, [pc, #84]	; (8019554 <prvAddNewTaskToReadyList+0xd4>)
 8019500:	441a      	add	r2, r3
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	3304      	adds	r3, #4
 8019506:	4619      	mov	r1, r3
 8019508:	4610      	mov	r0, r2
 801950a:	f7fe fe70 	bl	80181ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801950e:	f001 fec5 	bl	801b29c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019512:	4b0d      	ldr	r3, [pc, #52]	; (8019548 <prvAddNewTaskToReadyList+0xc8>)
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d00e      	beq.n	8019538 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801951a:	4b0a      	ldr	r3, [pc, #40]	; (8019544 <prvAddNewTaskToReadyList+0xc4>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019524:	429a      	cmp	r2, r3
 8019526:	d207      	bcs.n	8019538 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019528:	4b0b      	ldr	r3, [pc, #44]	; (8019558 <prvAddNewTaskToReadyList+0xd8>)
 801952a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801952e:	601a      	str	r2, [r3, #0]
 8019530:	f3bf 8f4f 	dsb	sy
 8019534:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019538:	bf00      	nop
 801953a:	3708      	adds	r7, #8
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}
 8019540:	2000a564 	.word	0x2000a564
 8019544:	2000a35c 	.word	0x2000a35c
 8019548:	2000a570 	.word	0x2000a570
 801954c:	2000a580 	.word	0x2000a580
 8019550:	2000a56c 	.word	0x2000a56c
 8019554:	2000a360 	.word	0x2000a360
 8019558:	e000ed04 	.word	0xe000ed04

0801955c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801955c:	b580      	push	{r7, lr}
 801955e:	b084      	sub	sp, #16
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019564:	2300      	movs	r3, #0
 8019566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	2b00      	cmp	r3, #0
 801956c:	d012      	beq.n	8019594 <vTaskDelay+0x38>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801956e:	4b11      	ldr	r3, [pc, #68]	; (80195b4 <vTaskDelay+0x58>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d005      	beq.n	8019582 <vTaskDelay+0x26>
 8019576:	f240 5244 	movw	r2, #1348	; 0x544
 801957a:	490f      	ldr	r1, [pc, #60]	; (80195b8 <vTaskDelay+0x5c>)
 801957c:	480f      	ldr	r0, [pc, #60]	; (80195bc <vTaskDelay+0x60>)
 801957e:	f7f1 f989 	bl	800a894 <assertFail>
			vTaskSuspendAll();
 8019582:	f000 f8ff 	bl	8019784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019586:	2100      	movs	r1, #0
 8019588:	6878      	ldr	r0, [r7, #4]
 801958a:	f001 f8c9 	bl	801a720 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801958e:	f000 f907 	bl	80197a0 <xTaskResumeAll>
 8019592:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d107      	bne.n	80195aa <vTaskDelay+0x4e>
		{
			portYIELD_WITHIN_API();
 801959a:	4b09      	ldr	r3, [pc, #36]	; (80195c0 <vTaskDelay+0x64>)
 801959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80195a0:	601a      	str	r2, [r3, #0]
 80195a2:	f3bf 8f4f 	dsb	sy
 80195a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80195aa:	bf00      	nop
 80195ac:	3710      	adds	r7, #16
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}
 80195b2:	bf00      	nop
 80195b4:	2000a58c 	.word	0x2000a58c
 80195b8:	08024268 	.word	0x08024268
 80195bc:	08024354 	.word	0x08024354
 80195c0:	e000ed04 	.word	0xe000ed04

080195c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	b088      	sub	sp, #32
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80195d0:	69bb      	ldr	r3, [r7, #24]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d105      	bne.n	80195e2 <eTaskGetState+0x1e>
 80195d6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80195da:	4926      	ldr	r1, [pc, #152]	; (8019674 <eTaskGetState+0xb0>)
 80195dc:	4826      	ldr	r0, [pc, #152]	; (8019678 <eTaskGetState+0xb4>)
 80195de:	f7f1 f959 	bl	800a894 <assertFail>

		if( pxTCB == pxCurrentTCB )
 80195e2:	4b26      	ldr	r3, [pc, #152]	; (801967c <eTaskGetState+0xb8>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	69ba      	ldr	r2, [r7, #24]
 80195e8:	429a      	cmp	r2, r3
 80195ea:	d102      	bne.n	80195f2 <eTaskGetState+0x2e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80195ec:	2300      	movs	r3, #0
 80195ee:	77fb      	strb	r3, [r7, #31]
 80195f0:	e03a      	b.n	8019668 <eTaskGetState+0xa4>
		}
		else
		{
			taskENTER_CRITICAL();
 80195f2:	f001 fe25 	bl	801b240 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80195f6:	69bb      	ldr	r3, [r7, #24]
 80195f8:	695b      	ldr	r3, [r3, #20]
 80195fa:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80195fc:	4b20      	ldr	r3, [pc, #128]	; (8019680 <eTaskGetState+0xbc>)
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8019602:	4b20      	ldr	r3, [pc, #128]	; (8019684 <eTaskGetState+0xc0>)
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8019608:	f001 fe48 	bl	801b29c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801960c:	697a      	ldr	r2, [r7, #20]
 801960e:	693b      	ldr	r3, [r7, #16]
 8019610:	429a      	cmp	r2, r3
 8019612:	d003      	beq.n	801961c <eTaskGetState+0x58>
 8019614:	697a      	ldr	r2, [r7, #20]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	429a      	cmp	r2, r3
 801961a:	d102      	bne.n	8019622 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801961c:	2302      	movs	r3, #2
 801961e:	77fb      	strb	r3, [r7, #31]
 8019620:	e022      	b.n	8019668 <eTaskGetState+0xa4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	4a18      	ldr	r2, [pc, #96]	; (8019688 <eTaskGetState+0xc4>)
 8019626:	4293      	cmp	r3, r2
 8019628:	d112      	bne.n	8019650 <eTaskGetState+0x8c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801962a:	69bb      	ldr	r3, [r7, #24]
 801962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801962e:	2b00      	cmp	r3, #0
 8019630:	d10b      	bne.n	801964a <eTaskGetState+0x86>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019632:	69bb      	ldr	r3, [r7, #24]
 8019634:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8019638:	b2db      	uxtb	r3, r3
 801963a:	2b01      	cmp	r3, #1
 801963c:	d102      	bne.n	8019644 <eTaskGetState+0x80>
							{
								eReturn = eBlocked;
 801963e:	2302      	movs	r3, #2
 8019640:	77fb      	strb	r3, [r7, #31]
 8019642:	e011      	b.n	8019668 <eTaskGetState+0xa4>
							}
							else
							{
								eReturn = eSuspended;
 8019644:	2303      	movs	r3, #3
 8019646:	77fb      	strb	r3, [r7, #31]
 8019648:	e00e      	b.n	8019668 <eTaskGetState+0xa4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801964a:	2302      	movs	r3, #2
 801964c:	77fb      	strb	r3, [r7, #31]
 801964e:	e00b      	b.n	8019668 <eTaskGetState+0xa4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	4a0e      	ldr	r2, [pc, #56]	; (801968c <eTaskGetState+0xc8>)
 8019654:	4293      	cmp	r3, r2
 8019656:	d002      	beq.n	801965e <eTaskGetState+0x9a>
 8019658:	697b      	ldr	r3, [r7, #20]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d102      	bne.n	8019664 <eTaskGetState+0xa0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801965e:	2304      	movs	r3, #4
 8019660:	77fb      	strb	r3, [r7, #31]
 8019662:	e001      	b.n	8019668 <eTaskGetState+0xa4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8019664:	2301      	movs	r3, #1
 8019666:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8019668:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801966a:	4618      	mov	r0, r3
 801966c:	3720      	adds	r7, #32
 801966e:	46bd      	mov	sp, r7
 8019670:	bd80      	pop	{r7, pc}
 8019672:	bf00      	nop
 8019674:	08024268 	.word	0x08024268
 8019678:	0802439c 	.word	0x0802439c
 801967c:	2000a35c 	.word	0x2000a35c
 8019680:	2000a518 	.word	0x2000a518
 8019684:	2000a51c 	.word	0x2000a51c
 8019688:	2000a54c 	.word	0x2000a54c
 801968c:	2000a534 	.word	0x2000a534

08019690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b08a      	sub	sp, #40	; 0x28
 8019694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019696:	2300      	movs	r3, #0
 8019698:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801969a:	2300      	movs	r3, #0
 801969c:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801969e:	1d3a      	adds	r2, r7, #4
 80196a0:	f107 0108 	add.w	r1, r7, #8
 80196a4:	f107 030c 	add.w	r3, r7, #12
 80196a8:	4618      	mov	r0, r3
 80196aa:	f7f4 fb8f 	bl	800ddcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80196ae:	6879      	ldr	r1, [r7, #4]
 80196b0:	68bb      	ldr	r3, [r7, #8]
 80196b2:	68fa      	ldr	r2, [r7, #12]
 80196b4:	9202      	str	r2, [sp, #8]
 80196b6:	9301      	str	r3, [sp, #4]
 80196b8:	2300      	movs	r3, #0
 80196ba:	9300      	str	r3, [sp, #0]
 80196bc:	2300      	movs	r3, #0
 80196be:	460a      	mov	r2, r1
 80196c0:	4925      	ldr	r1, [pc, #148]	; (8019758 <vTaskStartScheduler+0xc8>)
 80196c2:	4826      	ldr	r0, [pc, #152]	; (801975c <vTaskStartScheduler+0xcc>)
 80196c4:	f7ff fd92 	bl	80191ec <xTaskCreateStatic>
 80196c8:	4603      	mov	r3, r0
 80196ca:	4a25      	ldr	r2, [pc, #148]	; (8019760 <vTaskStartScheduler+0xd0>)
 80196cc:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80196ce:	4b24      	ldr	r3, [pc, #144]	; (8019760 <vTaskStartScheduler+0xd0>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d002      	beq.n	80196dc <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 80196d6:	2301      	movs	r3, #1
 80196d8:	617b      	str	r3, [r7, #20]
 80196da:	e001      	b.n	80196e0 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 80196dc:	2300      	movs	r3, #0
 80196de:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80196e0:	697b      	ldr	r3, [r7, #20]
 80196e2:	2b01      	cmp	r3, #1
 80196e4:	d102      	bne.n	80196ec <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80196e6:	f001 f881 	bl	801a7ec <xTimerCreateTimerTask>
 80196ea:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	2b01      	cmp	r3, #1
 80196f0:	d123      	bne.n	801973a <vTaskStartScheduler+0xaa>
	__asm volatile
 80196f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196f6:	f383 8811 	msr	BASEPRI, r3
 80196fa:	f3bf 8f6f 	isb	sy
 80196fe:	f3bf 8f4f 	dsb	sy
 8019702:	613b      	str	r3, [r7, #16]
}
 8019704:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019706:	4b17      	ldr	r3, [pc, #92]	; (8019764 <vTaskStartScheduler+0xd4>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	3360      	adds	r3, #96	; 0x60
 801970c:	4a16      	ldr	r2, [pc, #88]	; (8019768 <vTaskStartScheduler+0xd8>)
 801970e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019710:	4b16      	ldr	r3, [pc, #88]	; (801976c <vTaskStartScheduler+0xdc>)
 8019712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019716:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019718:	4b15      	ldr	r3, [pc, #84]	; (8019770 <vTaskStartScheduler+0xe0>)
 801971a:	2201      	movs	r2, #1
 801971c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801971e:	4b15      	ldr	r3, [pc, #84]	; (8019774 <vTaskStartScheduler+0xe4>)
 8019720:	2200      	movs	r2, #0
 8019722:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8019724:	f7f4 fb38 	bl	800dd98 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8019728:	4b0e      	ldr	r3, [pc, #56]	; (8019764 <vTaskStartScheduler+0xd4>)
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	3334      	adds	r3, #52	; 0x34
 801972e:	4a12      	ldr	r2, [pc, #72]	; (8019778 <vTaskStartScheduler+0xe8>)
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	6013      	str	r3, [r2, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019734:	f001 fcdc 	bl	801b0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019738:	e009      	b.n	801974e <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019740:	d105      	bne.n	801974e <vTaskStartScheduler+0xbe>
 8019742:	f640 022a 	movw	r2, #2090	; 0x82a
 8019746:	490d      	ldr	r1, [pc, #52]	; (801977c <vTaskStartScheduler+0xec>)
 8019748:	480d      	ldr	r0, [pc, #52]	; (8019780 <vTaskStartScheduler+0xf0>)
 801974a:	f7f1 f8a3 	bl	800a894 <assertFail>
}
 801974e:	bf00      	nop
 8019750:	3718      	adds	r7, #24
 8019752:	46bd      	mov	sp, r7
 8019754:	bd80      	pop	{r7, pc}
 8019756:	bf00      	nop
 8019758:	080243e8 	.word	0x080243e8
 801975c:	08019f75 	.word	0x08019f75
 8019760:	2000a588 	.word	0x2000a588
 8019764:	2000a35c 	.word	0x2000a35c
 8019768:	20000d9c 	.word	0x20000d9c
 801976c:	2000a584 	.word	0x2000a584
 8019770:	2000a570 	.word	0x2000a570
 8019774:	2000a568 	.word	0x2000a568
 8019778:	e0000004 	.word	0xe0000004
 801977c:	08024268 	.word	0x08024268
 8019780:	080243f0 	.word	0x080243f0

08019784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019784:	b480      	push	{r7}
 8019786:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019788:	4b04      	ldr	r3, [pc, #16]	; (801979c <vTaskSuspendAll+0x18>)
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	3301      	adds	r3, #1
 801978e:	4a03      	ldr	r2, [pc, #12]	; (801979c <vTaskSuspendAll+0x18>)
 8019790:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019792:	bf00      	nop
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr
 801979c:	2000a58c 	.word	0x2000a58c

080197a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80197a6:	2300      	movs	r3, #0
 80197a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80197aa:	2300      	movs	r3, #0
 80197ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80197ae:	4b3f      	ldr	r3, [pc, #252]	; (80198ac <xTaskResumeAll+0x10c>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	d105      	bne.n	80197c2 <xTaskResumeAll+0x22>
 80197b6:	f640 0299 	movw	r2, #2201	; 0x899
 80197ba:	493d      	ldr	r1, [pc, #244]	; (80198b0 <xTaskResumeAll+0x110>)
 80197bc:	483d      	ldr	r0, [pc, #244]	; (80198b4 <xTaskResumeAll+0x114>)
 80197be:	f7f1 f869 	bl	800a894 <assertFail>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80197c2:	f001 fd3d 	bl	801b240 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80197c6:	4b39      	ldr	r3, [pc, #228]	; (80198ac <xTaskResumeAll+0x10c>)
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	3b01      	subs	r3, #1
 80197cc:	4a37      	ldr	r2, [pc, #220]	; (80198ac <xTaskResumeAll+0x10c>)
 80197ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80197d0:	4b36      	ldr	r3, [pc, #216]	; (80198ac <xTaskResumeAll+0x10c>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d161      	bne.n	801989c <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80197d8:	4b37      	ldr	r3, [pc, #220]	; (80198b8 <xTaskResumeAll+0x118>)
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d05d      	beq.n	801989c <xTaskResumeAll+0xfc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80197e0:	e02e      	b.n	8019840 <xTaskResumeAll+0xa0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80197e2:	4b36      	ldr	r3, [pc, #216]	; (80198bc <xTaskResumeAll+0x11c>)
 80197e4:	68db      	ldr	r3, [r3, #12]
 80197e6:	68db      	ldr	r3, [r3, #12]
 80197e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	3318      	adds	r3, #24
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7fe fd5a 	bl	80182a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	3304      	adds	r3, #4
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7fe fd55 	bl	80182a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019802:	2201      	movs	r2, #1
 8019804:	409a      	lsls	r2, r3
 8019806:	4b2e      	ldr	r3, [pc, #184]	; (80198c0 <xTaskResumeAll+0x120>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	4313      	orrs	r3, r2
 801980c:	4a2c      	ldr	r2, [pc, #176]	; (80198c0 <xTaskResumeAll+0x120>)
 801980e:	6013      	str	r3, [r2, #0]
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019814:	4613      	mov	r3, r2
 8019816:	009b      	lsls	r3, r3, #2
 8019818:	4413      	add	r3, r2
 801981a:	009b      	lsls	r3, r3, #2
 801981c:	4a29      	ldr	r2, [pc, #164]	; (80198c4 <xTaskResumeAll+0x124>)
 801981e:	441a      	add	r2, r3
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	3304      	adds	r3, #4
 8019824:	4619      	mov	r1, r3
 8019826:	4610      	mov	r0, r2
 8019828:	f7fe fce1 	bl	80181ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019830:	4b25      	ldr	r3, [pc, #148]	; (80198c8 <xTaskResumeAll+0x128>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019836:	429a      	cmp	r2, r3
 8019838:	d302      	bcc.n	8019840 <xTaskResumeAll+0xa0>
					{
						xYieldPending = pdTRUE;
 801983a:	4b24      	ldr	r3, [pc, #144]	; (80198cc <xTaskResumeAll+0x12c>)
 801983c:	2201      	movs	r2, #1
 801983e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019840:	4b1e      	ldr	r3, [pc, #120]	; (80198bc <xTaskResumeAll+0x11c>)
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d1cc      	bne.n	80197e2 <xTaskResumeAll+0x42>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019848:	68fb      	ldr	r3, [r7, #12]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d001      	beq.n	8019852 <xTaskResumeAll+0xb2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801984e:	f000 fd21 	bl	801a294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019852:	4b1f      	ldr	r3, [pc, #124]	; (80198d0 <xTaskResumeAll+0x130>)
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d010      	beq.n	8019880 <xTaskResumeAll+0xe0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801985e:	f000 f8db 	bl	8019a18 <xTaskIncrementTick>
 8019862:	4603      	mov	r3, r0
 8019864:	2b00      	cmp	r3, #0
 8019866:	d002      	beq.n	801986e <xTaskResumeAll+0xce>
							{
								xYieldPending = pdTRUE;
 8019868:	4b18      	ldr	r3, [pc, #96]	; (80198cc <xTaskResumeAll+0x12c>)
 801986a:	2201      	movs	r2, #1
 801986c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	3b01      	subs	r3, #1
 8019872:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d1f1      	bne.n	801985e <xTaskResumeAll+0xbe>

						xPendedTicks = 0;
 801987a:	4b15      	ldr	r3, [pc, #84]	; (80198d0 <xTaskResumeAll+0x130>)
 801987c:	2200      	movs	r2, #0
 801987e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019880:	4b12      	ldr	r3, [pc, #72]	; (80198cc <xTaskResumeAll+0x12c>)
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	2b00      	cmp	r3, #0
 8019886:	d009      	beq.n	801989c <xTaskResumeAll+0xfc>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019888:	2301      	movs	r3, #1
 801988a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801988c:	4b11      	ldr	r3, [pc, #68]	; (80198d4 <xTaskResumeAll+0x134>)
 801988e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019892:	601a      	str	r2, [r3, #0]
 8019894:	f3bf 8f4f 	dsb	sy
 8019898:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801989c:	f001 fcfe 	bl	801b29c <vPortExitCritical>

	return xAlreadyYielded;
 80198a0:	68bb      	ldr	r3, [r7, #8]
}
 80198a2:	4618      	mov	r0, r3
 80198a4:	3710      	adds	r7, #16
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}
 80198aa:	bf00      	nop
 80198ac:	2000a58c 	.word	0x2000a58c
 80198b0:	08024268 	.word	0x08024268
 80198b4:	08024424 	.word	0x08024424
 80198b8:	2000a564 	.word	0x2000a564
 80198bc:	2000a520 	.word	0x2000a520
 80198c0:	2000a56c 	.word	0x2000a56c
 80198c4:	2000a360 	.word	0x2000a360
 80198c8:	2000a35c 	.word	0x2000a35c
 80198cc:	2000a578 	.word	0x2000a578
 80198d0:	2000a574 	.word	0x2000a574
 80198d4:	e000ed04 	.word	0xe000ed04

080198d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80198d8:	b480      	push	{r7}
 80198da:	b083      	sub	sp, #12
 80198dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80198de:	4b05      	ldr	r3, [pc, #20]	; (80198f4 <xTaskGetTickCount+0x1c>)
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80198e4:	687b      	ldr	r3, [r7, #4]
}
 80198e6:	4618      	mov	r0, r3
 80198e8:	370c      	adds	r7, #12
 80198ea:	46bd      	mov	sp, r7
 80198ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f0:	4770      	bx	lr
 80198f2:	bf00      	nop
 80198f4:	2000a568 	.word	0x2000a568

080198f8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b086      	sub	sp, #24
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	60f8      	str	r0, [r7, #12]
 8019900:	60b9      	str	r1, [r7, #8]
 8019902:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8019904:	2300      	movs	r3, #0
 8019906:	617b      	str	r3, [r7, #20]
 8019908:	2314      	movs	r3, #20
 801990a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 801990c:	f7ff ff3a 	bl	8019784 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8019910:	4b3b      	ldr	r3, [pc, #236]	; (8019a00 <uxTaskGetSystemState+0x108>)
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	68ba      	ldr	r2, [r7, #8]
 8019916:	429a      	cmp	r2, r3
 8019918:	d36a      	bcc.n	80199f0 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 801991a:	693b      	ldr	r3, [r7, #16]
 801991c:	3b01      	subs	r3, #1
 801991e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8019920:	697a      	ldr	r2, [r7, #20]
 8019922:	4613      	mov	r3, r2
 8019924:	00db      	lsls	r3, r3, #3
 8019926:	4413      	add	r3, r2
 8019928:	009b      	lsls	r3, r3, #2
 801992a:	461a      	mov	r2, r3
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	1898      	adds	r0, r3, r2
 8019930:	693a      	ldr	r2, [r7, #16]
 8019932:	4613      	mov	r3, r2
 8019934:	009b      	lsls	r3, r3, #2
 8019936:	4413      	add	r3, r2
 8019938:	009b      	lsls	r3, r3, #2
 801993a:	4a32      	ldr	r2, [pc, #200]	; (8019a04 <uxTaskGetSystemState+0x10c>)
 801993c:	4413      	add	r3, r2
 801993e:	2201      	movs	r2, #1
 8019940:	4619      	mov	r1, r3
 8019942:	f000 fc05 	bl	801a150 <prvListTasksWithinSingleList>
 8019946:	4602      	mov	r2, r0
 8019948:	697b      	ldr	r3, [r7, #20]
 801994a:	4413      	add	r3, r2
 801994c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801994e:	693b      	ldr	r3, [r7, #16]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d1e2      	bne.n	801991a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8019954:	697a      	ldr	r2, [r7, #20]
 8019956:	4613      	mov	r3, r2
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	4413      	add	r3, r2
 801995c:	009b      	lsls	r3, r3, #2
 801995e:	461a      	mov	r2, r3
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	4413      	add	r3, r2
 8019964:	4a28      	ldr	r2, [pc, #160]	; (8019a08 <uxTaskGetSystemState+0x110>)
 8019966:	6811      	ldr	r1, [r2, #0]
 8019968:	2202      	movs	r2, #2
 801996a:	4618      	mov	r0, r3
 801996c:	f000 fbf0 	bl	801a150 <prvListTasksWithinSingleList>
 8019970:	4602      	mov	r2, r0
 8019972:	697b      	ldr	r3, [r7, #20]
 8019974:	4413      	add	r3, r2
 8019976:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8019978:	697a      	ldr	r2, [r7, #20]
 801997a:	4613      	mov	r3, r2
 801997c:	00db      	lsls	r3, r3, #3
 801997e:	4413      	add	r3, r2
 8019980:	009b      	lsls	r3, r3, #2
 8019982:	461a      	mov	r2, r3
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	4413      	add	r3, r2
 8019988:	4a20      	ldr	r2, [pc, #128]	; (8019a0c <uxTaskGetSystemState+0x114>)
 801998a:	6811      	ldr	r1, [r2, #0]
 801998c:	2202      	movs	r2, #2
 801998e:	4618      	mov	r0, r3
 8019990:	f000 fbde 	bl	801a150 <prvListTasksWithinSingleList>
 8019994:	4602      	mov	r2, r0
 8019996:	697b      	ldr	r3, [r7, #20]
 8019998:	4413      	add	r3, r2
 801999a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 801999c:	697a      	ldr	r2, [r7, #20]
 801999e:	4613      	mov	r3, r2
 80199a0:	00db      	lsls	r3, r3, #3
 80199a2:	4413      	add	r3, r2
 80199a4:	009b      	lsls	r3, r3, #2
 80199a6:	461a      	mov	r2, r3
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	4413      	add	r3, r2
 80199ac:	2204      	movs	r2, #4
 80199ae:	4918      	ldr	r1, [pc, #96]	; (8019a10 <uxTaskGetSystemState+0x118>)
 80199b0:	4618      	mov	r0, r3
 80199b2:	f000 fbcd 	bl	801a150 <prvListTasksWithinSingleList>
 80199b6:	4602      	mov	r2, r0
 80199b8:	697b      	ldr	r3, [r7, #20]
 80199ba:	4413      	add	r3, r2
 80199bc:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80199be:	697a      	ldr	r2, [r7, #20]
 80199c0:	4613      	mov	r3, r2
 80199c2:	00db      	lsls	r3, r3, #3
 80199c4:	4413      	add	r3, r2
 80199c6:	009b      	lsls	r3, r3, #2
 80199c8:	461a      	mov	r2, r3
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	4413      	add	r3, r2
 80199ce:	2203      	movs	r2, #3
 80199d0:	4910      	ldr	r1, [pc, #64]	; (8019a14 <uxTaskGetSystemState+0x11c>)
 80199d2:	4618      	mov	r0, r3
 80199d4:	f000 fbbc 	bl	801a150 <prvListTasksWithinSingleList>
 80199d8:	4602      	mov	r2, r0
 80199da:	697b      	ldr	r3, [r7, #20]
 80199dc:	4413      	add	r3, r2
 80199de:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d004      	beq.n	80199f0 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80199e6:	f7f4 f9de 	bl	800dda6 <getRunTimeCounterValue>
 80199ea:	4602      	mov	r2, r0
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80199f0:	f7ff fed6 	bl	80197a0 <xTaskResumeAll>

		return uxTask;
 80199f4:	697b      	ldr	r3, [r7, #20]
	}
 80199f6:	4618      	mov	r0, r3
 80199f8:	3718      	adds	r7, #24
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	2000a564 	.word	0x2000a564
 8019a04:	2000a360 	.word	0x2000a360
 8019a08:	2000a518 	.word	0x2000a518
 8019a0c:	2000a51c 	.word	0x2000a51c
 8019a10:	2000a534 	.word	0x2000a534
 8019a14:	2000a54c 	.word	0x2000a54c

08019a18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b086      	sub	sp, #24
 8019a1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019a1e:	2300      	movs	r3, #0
 8019a20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
 8019a22:	4a4e      	ldr	r2, [pc, #312]	; (8019b5c <xTaskIncrementTick+0x144>)
 8019a24:	4b4e      	ldr	r3, [pc, #312]	; (8019b60 <xTaskIncrementTick+0x148>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	6013      	str	r3, [r2, #0]
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a2a:	4b4e      	ldr	r3, [pc, #312]	; (8019b64 <xTaskIncrementTick+0x14c>)
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	f040 8089 	bne.w	8019b46 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019a34:	4b4a      	ldr	r3, [pc, #296]	; (8019b60 <xTaskIncrementTick+0x148>)
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	3301      	adds	r3, #1
 8019a3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019a3c:	4a48      	ldr	r2, [pc, #288]	; (8019b60 <xTaskIncrementTick+0x148>)
 8019a3e:	693b      	ldr	r3, [r7, #16]
 8019a40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019a42:	693b      	ldr	r3, [r7, #16]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d11b      	bne.n	8019a80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8019a48:	4b47      	ldr	r3, [pc, #284]	; (8019b68 <xTaskIncrementTick+0x150>)
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	681b      	ldr	r3, [r3, #0]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d005      	beq.n	8019a5e <xTaskIncrementTick+0x46>
 8019a52:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8019a56:	4945      	ldr	r1, [pc, #276]	; (8019b6c <xTaskIncrementTick+0x154>)
 8019a58:	4845      	ldr	r0, [pc, #276]	; (8019b70 <xTaskIncrementTick+0x158>)
 8019a5a:	f7f0 ff1b 	bl	800a894 <assertFail>
 8019a5e:	4b42      	ldr	r3, [pc, #264]	; (8019b68 <xTaskIncrementTick+0x150>)
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	60fb      	str	r3, [r7, #12]
 8019a64:	4b43      	ldr	r3, [pc, #268]	; (8019b74 <xTaskIncrementTick+0x15c>)
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	4a3f      	ldr	r2, [pc, #252]	; (8019b68 <xTaskIncrementTick+0x150>)
 8019a6a:	6013      	str	r3, [r2, #0]
 8019a6c:	4a41      	ldr	r2, [pc, #260]	; (8019b74 <xTaskIncrementTick+0x15c>)
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	6013      	str	r3, [r2, #0]
 8019a72:	4b41      	ldr	r3, [pc, #260]	; (8019b78 <xTaskIncrementTick+0x160>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	3301      	adds	r3, #1
 8019a78:	4a3f      	ldr	r2, [pc, #252]	; (8019b78 <xTaskIncrementTick+0x160>)
 8019a7a:	6013      	str	r3, [r2, #0]
 8019a7c:	f000 fc0a 	bl	801a294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019a80:	4b3e      	ldr	r3, [pc, #248]	; (8019b7c <xTaskIncrementTick+0x164>)
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	693a      	ldr	r2, [r7, #16]
 8019a86:	429a      	cmp	r2, r3
 8019a88:	d348      	bcc.n	8019b1c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019a8a:	4b37      	ldr	r3, [pc, #220]	; (8019b68 <xTaskIncrementTick+0x150>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d104      	bne.n	8019a9e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019a94:	4b39      	ldr	r3, [pc, #228]	; (8019b7c <xTaskIncrementTick+0x164>)
 8019a96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019a9a:	601a      	str	r2, [r3, #0]
					break;
 8019a9c:	e03e      	b.n	8019b1c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019a9e:	4b32      	ldr	r3, [pc, #200]	; (8019b68 <xTaskIncrementTick+0x150>)
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	68db      	ldr	r3, [r3, #12]
 8019aa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	685b      	ldr	r3, [r3, #4]
 8019aac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019aae:	693a      	ldr	r2, [r7, #16]
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	429a      	cmp	r2, r3
 8019ab4:	d203      	bcs.n	8019abe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019ab6:	4a31      	ldr	r2, [pc, #196]	; (8019b7c <xTaskIncrementTick+0x164>)
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019abc:	e02e      	b.n	8019b1c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019abe:	68bb      	ldr	r3, [r7, #8]
 8019ac0:	3304      	adds	r3, #4
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f7fe fbf0 	bl	80182a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d004      	beq.n	8019ada <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	3318      	adds	r3, #24
 8019ad4:	4618      	mov	r0, r3
 8019ad6:	f7fe fbe7 	bl	80182a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ade:	2201      	movs	r2, #1
 8019ae0:	409a      	lsls	r2, r3
 8019ae2:	4b27      	ldr	r3, [pc, #156]	; (8019b80 <xTaskIncrementTick+0x168>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	4313      	orrs	r3, r2
 8019ae8:	4a25      	ldr	r2, [pc, #148]	; (8019b80 <xTaskIncrementTick+0x168>)
 8019aea:	6013      	str	r3, [r2, #0]
 8019aec:	68bb      	ldr	r3, [r7, #8]
 8019aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019af0:	4613      	mov	r3, r2
 8019af2:	009b      	lsls	r3, r3, #2
 8019af4:	4413      	add	r3, r2
 8019af6:	009b      	lsls	r3, r3, #2
 8019af8:	4a22      	ldr	r2, [pc, #136]	; (8019b84 <xTaskIncrementTick+0x16c>)
 8019afa:	441a      	add	r2, r3
 8019afc:	68bb      	ldr	r3, [r7, #8]
 8019afe:	3304      	adds	r3, #4
 8019b00:	4619      	mov	r1, r3
 8019b02:	4610      	mov	r0, r2
 8019b04:	f7fe fb73 	bl	80181ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019b08:	68bb      	ldr	r3, [r7, #8]
 8019b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b0c:	4b1e      	ldr	r3, [pc, #120]	; (8019b88 <xTaskIncrementTick+0x170>)
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b12:	429a      	cmp	r2, r3
 8019b14:	d3b9      	bcc.n	8019a8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8019b16:	2301      	movs	r3, #1
 8019b18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019b1a:	e7b6      	b.n	8019a8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019b1c:	4b1a      	ldr	r3, [pc, #104]	; (8019b88 <xTaskIncrementTick+0x170>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b22:	4918      	ldr	r1, [pc, #96]	; (8019b84 <xTaskIncrementTick+0x16c>)
 8019b24:	4613      	mov	r3, r2
 8019b26:	009b      	lsls	r3, r3, #2
 8019b28:	4413      	add	r3, r2
 8019b2a:	009b      	lsls	r3, r3, #2
 8019b2c:	440b      	add	r3, r1
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	2b01      	cmp	r3, #1
 8019b32:	d901      	bls.n	8019b38 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8019b34:	2301      	movs	r3, #1
 8019b36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8019b38:	4b14      	ldr	r3, [pc, #80]	; (8019b8c <xTaskIncrementTick+0x174>)
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d007      	beq.n	8019b50 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8019b40:	2301      	movs	r3, #1
 8019b42:	617b      	str	r3, [r7, #20]
 8019b44:	e004      	b.n	8019b50 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8019b46:	4b12      	ldr	r3, [pc, #72]	; (8019b90 <xTaskIncrementTick+0x178>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	3301      	adds	r3, #1
 8019b4c:	4a10      	ldr	r2, [pc, #64]	; (8019b90 <xTaskIncrementTick+0x178>)
 8019b4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8019b50:	697b      	ldr	r3, [r7, #20]
}
 8019b52:	4618      	mov	r0, r3
 8019b54:	3718      	adds	r7, #24
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}
 8019b5a:	bf00      	nop
 8019b5c:	e0000008 	.word	0xe0000008
 8019b60:	2000a568 	.word	0x2000a568
 8019b64:	2000a58c 	.word	0x2000a58c
 8019b68:	2000a518 	.word	0x2000a518
 8019b6c:	08024268 	.word	0x08024268
 8019b70:	08024470 	.word	0x08024470
 8019b74:	2000a51c 	.word	0x2000a51c
 8019b78:	2000a57c 	.word	0x2000a57c
 8019b7c:	2000a584 	.word	0x2000a584
 8019b80:	2000a56c 	.word	0x2000a56c
 8019b84:	2000a360 	.word	0x2000a360
 8019b88:	2000a35c 	.word	0x2000a35c
 8019b8c:	2000a578 	.word	0x2000a578
 8019b90:	2000a574 	.word	0x2000a574

08019b94 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8019b94:	b580      	push	{r7, lr}
 8019b96:	b084      	sub	sp, #16
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
 8019b9c:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d103      	bne.n	8019bac <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8019ba4:	4b08      	ldr	r3, [pc, #32]	; (8019bc8 <vTaskSetApplicationTaskTag+0x34>)
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	60fb      	str	r3, [r7, #12]
 8019baa:	e001      	b.n	8019bb0 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = xTask;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8019bb0:	f001 fb46 	bl	801b240 <vPortEnterCritical>
		{
			xTCB->pxTaskTag = pxHookFunction;
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	683a      	ldr	r2, [r7, #0]
 8019bb8:	659a      	str	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8019bba:	f001 fb6f 	bl	801b29c <vPortExitCritical>
	}
 8019bbe:	bf00      	nop
 8019bc0:	3710      	adds	r7, #16
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	bd80      	pop	{r7, pc}
 8019bc6:	bf00      	nop
 8019bc8:	2000a35c 	.word	0x2000a35c

08019bcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b084      	sub	sp, #16
 8019bd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019bd2:	4b44      	ldr	r3, [pc, #272]	; (8019ce4 <vTaskSwitchContext+0x118>)
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d003      	beq.n	8019be2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019bda:	4b43      	ldr	r3, [pc, #268]	; (8019ce8 <vTaskSwitchContext+0x11c>)
 8019bdc:	2201      	movs	r2, #1
 8019bde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019be0:	e07b      	b.n	8019cda <vTaskSwitchContext+0x10e>
		xYieldPending = pdFALSE;
 8019be2:	4b41      	ldr	r3, [pc, #260]	; (8019ce8 <vTaskSwitchContext+0x11c>)
 8019be4:	2200      	movs	r2, #0
 8019be6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8019be8:	f7f4 f8dd 	bl	800dda6 <getRunTimeCounterValue>
 8019bec:	4603      	mov	r3, r0
 8019bee:	4a3f      	ldr	r2, [pc, #252]	; (8019cec <vTaskSwitchContext+0x120>)
 8019bf0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8019bf2:	4b3e      	ldr	r3, [pc, #248]	; (8019cec <vTaskSwitchContext+0x120>)
 8019bf4:	681a      	ldr	r2, [r3, #0]
 8019bf6:	4b3e      	ldr	r3, [pc, #248]	; (8019cf0 <vTaskSwitchContext+0x124>)
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	429a      	cmp	r2, r3
 8019bfc:	d909      	bls.n	8019c12 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8019bfe:	4b3d      	ldr	r3, [pc, #244]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019c04:	4a39      	ldr	r2, [pc, #228]	; (8019cec <vTaskSwitchContext+0x120>)
 8019c06:	6810      	ldr	r0, [r2, #0]
 8019c08:	4a39      	ldr	r2, [pc, #228]	; (8019cf0 <vTaskSwitchContext+0x124>)
 8019c0a:	6812      	ldr	r2, [r2, #0]
 8019c0c:	1a82      	subs	r2, r0, r2
 8019c0e:	440a      	add	r2, r1
 8019c10:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8019c12:	4b36      	ldr	r3, [pc, #216]	; (8019cec <vTaskSwitchContext+0x120>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	4a36      	ldr	r2, [pc, #216]	; (8019cf0 <vTaskSwitchContext+0x124>)
 8019c18:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8019c1a:	4b36      	ldr	r3, [pc, #216]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	681a      	ldr	r2, [r3, #0]
 8019c20:	4b34      	ldr	r3, [pc, #208]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c26:	429a      	cmp	r2, r3
 8019c28:	d808      	bhi.n	8019c3c <vTaskSwitchContext+0x70>
 8019c2a:	4b32      	ldr	r3, [pc, #200]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019c2c:	681a      	ldr	r2, [r3, #0]
 8019c2e:	4b31      	ldr	r3, [pc, #196]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	3334      	adds	r3, #52	; 0x34
 8019c34:	4619      	mov	r1, r3
 8019c36:	4610      	mov	r0, r2
 8019c38:	f7f4 f8bd 	bl	800ddb6 <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 8019c3c:	4b2d      	ldr	r3, [pc, #180]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	4a2d      	ldr	r2, [pc, #180]	; (8019cf8 <vTaskSwitchContext+0x12c>)
 8019c42:	6812      	ldr	r2, [r2, #0]
 8019c44:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c48:	4b2c      	ldr	r3, [pc, #176]	; (8019cfc <vTaskSwitchContext+0x130>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	fab3 f383 	clz	r3, r3
 8019c54:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8019c56:	78fb      	ldrb	r3, [r7, #3]
 8019c58:	f1c3 031f 	rsb	r3, r3, #31
 8019c5c:	60fb      	str	r3, [r7, #12]
 8019c5e:	4928      	ldr	r1, [pc, #160]	; (8019d00 <vTaskSwitchContext+0x134>)
 8019c60:	68fa      	ldr	r2, [r7, #12]
 8019c62:	4613      	mov	r3, r2
 8019c64:	009b      	lsls	r3, r3, #2
 8019c66:	4413      	add	r3, r2
 8019c68:	009b      	lsls	r3, r3, #2
 8019c6a:	440b      	add	r3, r1
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d105      	bne.n	8019c7e <vTaskSwitchContext+0xb2>
 8019c72:	f640 32e1 	movw	r2, #3041	; 0xbe1
 8019c76:	4923      	ldr	r1, [pc, #140]	; (8019d04 <vTaskSwitchContext+0x138>)
 8019c78:	4823      	ldr	r0, [pc, #140]	; (8019d08 <vTaskSwitchContext+0x13c>)
 8019c7a:	f7f0 fe0b 	bl	800a894 <assertFail>
 8019c7e:	68fa      	ldr	r2, [r7, #12]
 8019c80:	4613      	mov	r3, r2
 8019c82:	009b      	lsls	r3, r3, #2
 8019c84:	4413      	add	r3, r2
 8019c86:	009b      	lsls	r3, r3, #2
 8019c88:	4a1d      	ldr	r2, [pc, #116]	; (8019d00 <vTaskSwitchContext+0x134>)
 8019c8a:	4413      	add	r3, r2
 8019c8c:	60bb      	str	r3, [r7, #8]
 8019c8e:	68bb      	ldr	r3, [r7, #8]
 8019c90:	685b      	ldr	r3, [r3, #4]
 8019c92:	685a      	ldr	r2, [r3, #4]
 8019c94:	68bb      	ldr	r3, [r7, #8]
 8019c96:	605a      	str	r2, [r3, #4]
 8019c98:	68bb      	ldr	r3, [r7, #8]
 8019c9a:	685a      	ldr	r2, [r3, #4]
 8019c9c:	68bb      	ldr	r3, [r7, #8]
 8019c9e:	3308      	adds	r3, #8
 8019ca0:	429a      	cmp	r2, r3
 8019ca2:	d104      	bne.n	8019cae <vTaskSwitchContext+0xe2>
 8019ca4:	68bb      	ldr	r3, [r7, #8]
 8019ca6:	685b      	ldr	r3, [r3, #4]
 8019ca8:	685a      	ldr	r2, [r3, #4]
 8019caa:	68bb      	ldr	r3, [r7, #8]
 8019cac:	605a      	str	r2, [r3, #4]
 8019cae:	68bb      	ldr	r3, [r7, #8]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	68db      	ldr	r3, [r3, #12]
 8019cb4:	4a0f      	ldr	r2, [pc, #60]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019cb6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8019cb8:	4b0e      	ldr	r3, [pc, #56]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	3334      	adds	r3, #52	; 0x34
 8019cbe:	4a13      	ldr	r2, [pc, #76]	; (8019d0c <vTaskSwitchContext+0x140>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 8019cc4:	4b0b      	ldr	r3, [pc, #44]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019ccc:	4a0a      	ldr	r2, [pc, #40]	; (8019cf8 <vTaskSwitchContext+0x12c>)
 8019cce:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019cd0:	4b08      	ldr	r3, [pc, #32]	; (8019cf4 <vTaskSwitchContext+0x128>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	3360      	adds	r3, #96	; 0x60
 8019cd6:	4a0e      	ldr	r2, [pc, #56]	; (8019d10 <vTaskSwitchContext+0x144>)
 8019cd8:	6013      	str	r3, [r2, #0]
}
 8019cda:	bf00      	nop
 8019cdc:	3710      	adds	r7, #16
 8019cde:	46bd      	mov	sp, r7
 8019ce0:	bd80      	pop	{r7, pc}
 8019ce2:	bf00      	nop
 8019ce4:	2000a58c 	.word	0x2000a58c
 8019ce8:	2000a578 	.word	0x2000a578
 8019cec:	2000a594 	.word	0x2000a594
 8019cf0:	2000a590 	.word	0x2000a590
 8019cf4:	2000a35c 	.word	0x2000a35c
 8019cf8:	2000a560 	.word	0x2000a560
 8019cfc:	2000a56c 	.word	0x2000a56c
 8019d00:	2000a360 	.word	0x2000a360
 8019d04:	08024268 	.word	0x08024268
 8019d08:	0802449c 	.word	0x0802449c
 8019d0c:	e0000004 	.word	0xe0000004
 8019d10:	20000d9c 	.word	0x20000d9c

08019d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b082      	sub	sp, #8
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
 8019d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d105      	bne.n	8019d30 <vTaskPlaceOnEventList+0x1c>
 8019d24:	f640 32fa 	movw	r2, #3066	; 0xbfa
 8019d28:	4909      	ldr	r1, [pc, #36]	; (8019d50 <vTaskPlaceOnEventList+0x3c>)
 8019d2a:	480a      	ldr	r0, [pc, #40]	; (8019d54 <vTaskPlaceOnEventList+0x40>)
 8019d2c:	f7f0 fdb2 	bl	800a894 <assertFail>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d30:	4b09      	ldr	r3, [pc, #36]	; (8019d58 <vTaskPlaceOnEventList+0x44>)
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	3318      	adds	r3, #24
 8019d36:	4619      	mov	r1, r3
 8019d38:	6878      	ldr	r0, [r7, #4]
 8019d3a:	f7fe fa7c 	bl	8018236 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019d3e:	2101      	movs	r1, #1
 8019d40:	6838      	ldr	r0, [r7, #0]
 8019d42:	f000 fced 	bl	801a720 <prvAddCurrentTaskToDelayedList>
}
 8019d46:	bf00      	nop
 8019d48:	3708      	adds	r7, #8
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	bd80      	pop	{r7, pc}
 8019d4e:	bf00      	nop
 8019d50:	08024268 	.word	0x08024268
 8019d54:	080244e4 	.word	0x080244e4
 8019d58:	2000a35c 	.word	0x2000a35c

08019d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b084      	sub	sp, #16
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	60f8      	str	r0, [r7, #12]
 8019d64:	60b9      	str	r1, [r7, #8]
 8019d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d105      	bne.n	8019d7a <vTaskPlaceOnEventListRestricted+0x1e>
 8019d6e:	f640 4225 	movw	r2, #3109	; 0xc25
 8019d72:	490c      	ldr	r1, [pc, #48]	; (8019da4 <vTaskPlaceOnEventListRestricted+0x48>)
 8019d74:	480c      	ldr	r0, [pc, #48]	; (8019da8 <vTaskPlaceOnEventListRestricted+0x4c>)
 8019d76:	f7f0 fd8d 	bl	800a894 <assertFail>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d7a:	4b0c      	ldr	r3, [pc, #48]	; (8019dac <vTaskPlaceOnEventListRestricted+0x50>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	3318      	adds	r3, #24
 8019d80:	4619      	mov	r1, r3
 8019d82:	68f8      	ldr	r0, [r7, #12]
 8019d84:	f7fe fa33 	bl	80181ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d002      	beq.n	8019d94 <vTaskPlaceOnEventListRestricted+0x38>
		{
			xTicksToWait = portMAX_DELAY;
 8019d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019d94:	6879      	ldr	r1, [r7, #4]
 8019d96:	68b8      	ldr	r0, [r7, #8]
 8019d98:	f000 fcc2 	bl	801a720 <prvAddCurrentTaskToDelayedList>
	}
 8019d9c:	bf00      	nop
 8019d9e:	3710      	adds	r7, #16
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}
 8019da4:	08024268 	.word	0x08024268
 8019da8:	080244e4 	.word	0x080244e4
 8019dac:	2000a35c 	.word	0x2000a35c

08019db0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b084      	sub	sp, #16
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	68db      	ldr	r3, [r3, #12]
 8019dbc:	68db      	ldr	r3, [r3, #12]
 8019dbe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d105      	bne.n	8019dd2 <xTaskRemoveFromEventList+0x22>
 8019dc6:	f640 4255 	movw	r2, #3157	; 0xc55
 8019dca:	4922      	ldr	r1, [pc, #136]	; (8019e54 <xTaskRemoveFromEventList+0xa4>)
 8019dcc:	4822      	ldr	r0, [pc, #136]	; (8019e58 <xTaskRemoveFromEventList+0xa8>)
 8019dce:	f7f0 fd61 	bl	800a894 <assertFail>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019dd2:	68bb      	ldr	r3, [r7, #8]
 8019dd4:	3318      	adds	r3, #24
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	f7fe fa66 	bl	80182a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019ddc:	4b1f      	ldr	r3, [pc, #124]	; (8019e5c <xTaskRemoveFromEventList+0xac>)
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d11c      	bne.n	8019e1e <xTaskRemoveFromEventList+0x6e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	3304      	adds	r3, #4
 8019de8:	4618      	mov	r0, r3
 8019dea:	f7fe fa5d 	bl	80182a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019df2:	2201      	movs	r2, #1
 8019df4:	409a      	lsls	r2, r3
 8019df6:	4b1a      	ldr	r3, [pc, #104]	; (8019e60 <xTaskRemoveFromEventList+0xb0>)
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4313      	orrs	r3, r2
 8019dfc:	4a18      	ldr	r2, [pc, #96]	; (8019e60 <xTaskRemoveFromEventList+0xb0>)
 8019dfe:	6013      	str	r3, [r2, #0]
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e04:	4613      	mov	r3, r2
 8019e06:	009b      	lsls	r3, r3, #2
 8019e08:	4413      	add	r3, r2
 8019e0a:	009b      	lsls	r3, r3, #2
 8019e0c:	4a15      	ldr	r2, [pc, #84]	; (8019e64 <xTaskRemoveFromEventList+0xb4>)
 8019e0e:	441a      	add	r2, r3
 8019e10:	68bb      	ldr	r3, [r7, #8]
 8019e12:	3304      	adds	r3, #4
 8019e14:	4619      	mov	r1, r3
 8019e16:	4610      	mov	r0, r2
 8019e18:	f7fe f9e9 	bl	80181ee <vListInsertEnd>
 8019e1c:	e005      	b.n	8019e2a <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019e1e:	68bb      	ldr	r3, [r7, #8]
 8019e20:	3318      	adds	r3, #24
 8019e22:	4619      	mov	r1, r3
 8019e24:	4810      	ldr	r0, [pc, #64]	; (8019e68 <xTaskRemoveFromEventList+0xb8>)
 8019e26:	f7fe f9e2 	bl	80181ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019e2a:	68bb      	ldr	r3, [r7, #8]
 8019e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e2e:	4b0f      	ldr	r3, [pc, #60]	; (8019e6c <xTaskRemoveFromEventList+0xbc>)
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e34:	429a      	cmp	r2, r3
 8019e36:	d905      	bls.n	8019e44 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019e38:	2301      	movs	r3, #1
 8019e3a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019e3c:	4b0c      	ldr	r3, [pc, #48]	; (8019e70 <xTaskRemoveFromEventList+0xc0>)
 8019e3e:	2201      	movs	r2, #1
 8019e40:	601a      	str	r2, [r3, #0]
 8019e42:	e001      	b.n	8019e48 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8019e44:	2300      	movs	r3, #0
 8019e46:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8019e48:	68fb      	ldr	r3, [r7, #12]
}
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	3710      	adds	r7, #16
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
 8019e52:	bf00      	nop
 8019e54:	08024268 	.word	0x08024268
 8019e58:	0802450c 	.word	0x0802450c
 8019e5c:	2000a58c 	.word	0x2000a58c
 8019e60:	2000a56c 	.word	0x2000a56c
 8019e64:	2000a360 	.word	0x2000a360
 8019e68:	2000a520 	.word	0x2000a520
 8019e6c:	2000a35c 	.word	0x2000a35c
 8019e70:	2000a578 	.word	0x2000a578

08019e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019e74:	b480      	push	{r7}
 8019e76:	b083      	sub	sp, #12
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019e7c:	4b06      	ldr	r3, [pc, #24]	; (8019e98 <vTaskInternalSetTimeOutState+0x24>)
 8019e7e:	681a      	ldr	r2, [r3, #0]
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019e84:	4b05      	ldr	r3, [pc, #20]	; (8019e9c <vTaskInternalSetTimeOutState+0x28>)
 8019e86:	681a      	ldr	r2, [r3, #0]
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	605a      	str	r2, [r3, #4]
}
 8019e8c:	bf00      	nop
 8019e8e:	370c      	adds	r7, #12
 8019e90:	46bd      	mov	sp, r7
 8019e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e96:	4770      	bx	lr
 8019e98:	2000a57c 	.word	0x2000a57c
 8019e9c:	2000a568 	.word	0x2000a568

08019ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b086      	sub	sp, #24
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
 8019ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d105      	bne.n	8019ebc <xTaskCheckForTimeOut+0x1c>
 8019eb0:	f640 42ce 	movw	r2, #3278	; 0xcce
 8019eb4:	4924      	ldr	r1, [pc, #144]	; (8019f48 <xTaskCheckForTimeOut+0xa8>)
 8019eb6:	4825      	ldr	r0, [pc, #148]	; (8019f4c <xTaskCheckForTimeOut+0xac>)
 8019eb8:	f7f0 fcec 	bl	800a894 <assertFail>
	configASSERT( pxTicksToWait );
 8019ebc:	683b      	ldr	r3, [r7, #0]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d105      	bne.n	8019ece <xTaskCheckForTimeOut+0x2e>
 8019ec2:	f640 42cf 	movw	r2, #3279	; 0xccf
 8019ec6:	4920      	ldr	r1, [pc, #128]	; (8019f48 <xTaskCheckForTimeOut+0xa8>)
 8019ec8:	4821      	ldr	r0, [pc, #132]	; (8019f50 <xTaskCheckForTimeOut+0xb0>)
 8019eca:	f7f0 fce3 	bl	800a894 <assertFail>

	taskENTER_CRITICAL();
 8019ece:	f001 f9b7 	bl	801b240 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019ed2:	4b20      	ldr	r3, [pc, #128]	; (8019f54 <xTaskCheckForTimeOut+0xb4>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	685b      	ldr	r3, [r3, #4]
 8019edc:	693a      	ldr	r2, [r7, #16]
 8019ede:	1ad3      	subs	r3, r2, r3
 8019ee0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019ee2:	683b      	ldr	r3, [r7, #0]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019eea:	d102      	bne.n	8019ef2 <xTaskCheckForTimeOut+0x52>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019eec:	2300      	movs	r3, #0
 8019eee:	617b      	str	r3, [r7, #20]
 8019ef0:	e023      	b.n	8019f3a <xTaskCheckForTimeOut+0x9a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	681a      	ldr	r2, [r3, #0]
 8019ef6:	4b18      	ldr	r3, [pc, #96]	; (8019f58 <xTaskCheckForTimeOut+0xb8>)
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	429a      	cmp	r2, r3
 8019efc:	d007      	beq.n	8019f0e <xTaskCheckForTimeOut+0x6e>
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	685b      	ldr	r3, [r3, #4]
 8019f02:	693a      	ldr	r2, [r7, #16]
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d302      	bcc.n	8019f0e <xTaskCheckForTimeOut+0x6e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019f08:	2301      	movs	r3, #1
 8019f0a:	617b      	str	r3, [r7, #20]
 8019f0c:	e015      	b.n	8019f3a <xTaskCheckForTimeOut+0x9a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	68fa      	ldr	r2, [r7, #12]
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d20b      	bcs.n	8019f30 <xTaskCheckForTimeOut+0x90>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	681a      	ldr	r2, [r3, #0]
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	1ad2      	subs	r2, r2, r3
 8019f20:	683b      	ldr	r3, [r7, #0]
 8019f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019f24:	6878      	ldr	r0, [r7, #4]
 8019f26:	f7ff ffa5 	bl	8019e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	617b      	str	r3, [r7, #20]
 8019f2e:	e004      	b.n	8019f3a <xTaskCheckForTimeOut+0x9a>
		}
		else
		{
			*pxTicksToWait = 0;
 8019f30:	683b      	ldr	r3, [r7, #0]
 8019f32:	2200      	movs	r2, #0
 8019f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019f36:	2301      	movs	r3, #1
 8019f38:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8019f3a:	f001 f9af 	bl	801b29c <vPortExitCritical>

	return xReturn;
 8019f3e:	697b      	ldr	r3, [r7, #20]
}
 8019f40:	4618      	mov	r0, r3
 8019f42:	3718      	adds	r7, #24
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bd80      	pop	{r7, pc}
 8019f48:	08024268 	.word	0x08024268
 8019f4c:	0802453c 	.word	0x0802453c
 8019f50:	08024548 	.word	0x08024548
 8019f54:	2000a568 	.word	0x2000a568
 8019f58:	2000a57c 	.word	0x2000a57c

08019f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019f5c:	b480      	push	{r7}
 8019f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019f60:	4b03      	ldr	r3, [pc, #12]	; (8019f70 <vTaskMissedYield+0x14>)
 8019f62:	2201      	movs	r2, #1
 8019f64:	601a      	str	r2, [r3, #0]
}
 8019f66:	bf00      	nop
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6e:	4770      	bx	lr
 8019f70:	2000a578 	.word	0x2000a578

08019f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019f74:	b580      	push	{r7, lr}
 8019f76:	b082      	sub	sp, #8
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019f7c:	f000 f854 	bl	801a028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019f80:	4b07      	ldr	r3, [pc, #28]	; (8019fa0 <prvIdleTask+0x2c>)
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b01      	cmp	r3, #1
 8019f86:	d907      	bls.n	8019f98 <prvIdleTask+0x24>
			{
				taskYIELD();
 8019f88:	4b06      	ldr	r3, [pc, #24]	; (8019fa4 <prvIdleTask+0x30>)
 8019f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019f8e:	601a      	str	r2, [r3, #0]
 8019f90:	f3bf 8f4f 	dsb	sy
 8019f94:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8019f98:	f7f4 ff8c 	bl	800eeb4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8019f9c:	e7ee      	b.n	8019f7c <prvIdleTask+0x8>
 8019f9e:	bf00      	nop
 8019fa0:	2000a360 	.word	0x2000a360
 8019fa4:	e000ed04 	.word	0xe000ed04

08019fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b082      	sub	sp, #8
 8019fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019fae:	2300      	movs	r3, #0
 8019fb0:	607b      	str	r3, [r7, #4]
 8019fb2:	e00c      	b.n	8019fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8019fb4:	687a      	ldr	r2, [r7, #4]
 8019fb6:	4613      	mov	r3, r2
 8019fb8:	009b      	lsls	r3, r3, #2
 8019fba:	4413      	add	r3, r2
 8019fbc:	009b      	lsls	r3, r3, #2
 8019fbe:	4a12      	ldr	r2, [pc, #72]	; (801a008 <prvInitialiseTaskLists+0x60>)
 8019fc0:	4413      	add	r3, r2
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	f7fe f8e6 	bl	8018194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	3301      	adds	r3, #1
 8019fcc:	607b      	str	r3, [r7, #4]
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	2b13      	cmp	r3, #19
 8019fd2:	d9ef      	bls.n	8019fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8019fd4:	480d      	ldr	r0, [pc, #52]	; (801a00c <prvInitialiseTaskLists+0x64>)
 8019fd6:	f7fe f8dd 	bl	8018194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8019fda:	480d      	ldr	r0, [pc, #52]	; (801a010 <prvInitialiseTaskLists+0x68>)
 8019fdc:	f7fe f8da 	bl	8018194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019fe0:	480c      	ldr	r0, [pc, #48]	; (801a014 <prvInitialiseTaskLists+0x6c>)
 8019fe2:	f7fe f8d7 	bl	8018194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8019fe6:	480c      	ldr	r0, [pc, #48]	; (801a018 <prvInitialiseTaskLists+0x70>)
 8019fe8:	f7fe f8d4 	bl	8018194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8019fec:	480b      	ldr	r0, [pc, #44]	; (801a01c <prvInitialiseTaskLists+0x74>)
 8019fee:	f7fe f8d1 	bl	8018194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8019ff2:	4b0b      	ldr	r3, [pc, #44]	; (801a020 <prvInitialiseTaskLists+0x78>)
 8019ff4:	4a05      	ldr	r2, [pc, #20]	; (801a00c <prvInitialiseTaskLists+0x64>)
 8019ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8019ff8:	4b0a      	ldr	r3, [pc, #40]	; (801a024 <prvInitialiseTaskLists+0x7c>)
 8019ffa:	4a05      	ldr	r2, [pc, #20]	; (801a010 <prvInitialiseTaskLists+0x68>)
 8019ffc:	601a      	str	r2, [r3, #0]
}
 8019ffe:	bf00      	nop
 801a000:	3708      	adds	r7, #8
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	2000a360 	.word	0x2000a360
 801a00c:	2000a4f0 	.word	0x2000a4f0
 801a010:	2000a504 	.word	0x2000a504
 801a014:	2000a520 	.word	0x2000a520
 801a018:	2000a534 	.word	0x2000a534
 801a01c:	2000a54c 	.word	0x2000a54c
 801a020:	2000a518 	.word	0x2000a518
 801a024:	2000a51c 	.word	0x2000a51c

0801a028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b082      	sub	sp, #8
 801a02c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a02e:	e019      	b.n	801a064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a030:	f001 f906 	bl	801b240 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a034:	4b10      	ldr	r3, [pc, #64]	; (801a078 <prvCheckTasksWaitingTermination+0x50>)
 801a036:	68db      	ldr	r3, [r3, #12]
 801a038:	68db      	ldr	r3, [r3, #12]
 801a03a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	3304      	adds	r3, #4
 801a040:	4618      	mov	r0, r3
 801a042:	f7fe f931 	bl	80182a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a046:	4b0d      	ldr	r3, [pc, #52]	; (801a07c <prvCheckTasksWaitingTermination+0x54>)
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	3b01      	subs	r3, #1
 801a04c:	4a0b      	ldr	r2, [pc, #44]	; (801a07c <prvCheckTasksWaitingTermination+0x54>)
 801a04e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a050:	4b0b      	ldr	r3, [pc, #44]	; (801a080 <prvCheckTasksWaitingTermination+0x58>)
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	3b01      	subs	r3, #1
 801a056:	4a0a      	ldr	r2, [pc, #40]	; (801a080 <prvCheckTasksWaitingTermination+0x58>)
 801a058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a05a:	f001 f91f 	bl	801b29c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a05e:	6878      	ldr	r0, [r7, #4]
 801a060:	f000 f8e4 	bl	801a22c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a064:	4b06      	ldr	r3, [pc, #24]	; (801a080 <prvCheckTasksWaitingTermination+0x58>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d1e1      	bne.n	801a030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a06c:	bf00      	nop
 801a06e:	bf00      	nop
 801a070:	3708      	adds	r7, #8
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}
 801a076:	bf00      	nop
 801a078:	2000a534 	.word	0x2000a534
 801a07c:	2000a564 	.word	0x2000a564
 801a080:	2000a548 	.word	0x2000a548

0801a084 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 801a084:	b580      	push	{r7, lr}
 801a086:	b086      	sub	sp, #24
 801a088:	af00      	add	r7, sp, #0
 801a08a:	60f8      	str	r0, [r7, #12]
 801a08c:	60b9      	str	r1, [r7, #8]
 801a08e:	607a      	str	r2, [r7, #4]
 801a090:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d102      	bne.n	801a09e <vTaskGetInfo+0x1a>
 801a098:	4b2c      	ldr	r3, [pc, #176]	; (801a14c <vTaskGetInfo+0xc8>)
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	e000      	b.n	801a0a0 <vTaskGetInfo+0x1c>
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 801a0a2:	68bb      	ldr	r3, [r7, #8]
 801a0a4:	697a      	ldr	r2, [r7, #20]
 801a0a6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 801a0a8:	697b      	ldr	r3, [r7, #20]
 801a0aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801a0ae:	68bb      	ldr	r3, [r7, #8]
 801a0b0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 801a0b2:	697b      	ldr	r3, [r7, #20]
 801a0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a0b6:	68bb      	ldr	r3, [r7, #8]
 801a0b8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801a0ba:	697b      	ldr	r3, [r7, #20]
 801a0bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a0be:	68bb      	ldr	r3, [r7, #8]
 801a0c0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 801a0c2:	697b      	ldr	r3, [r7, #20]
 801a0c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801a0ca:	697b      	ldr	r3, [r7, #20]
 801a0cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a0ce:	68bb      	ldr	r3, [r7, #8]
 801a0d0:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 801a0d2:	697b      	ldr	r3, [r7, #20]
 801a0d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a0d6:	68bb      	ldr	r3, [r7, #8]
 801a0d8:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801a0da:	78fb      	ldrb	r3, [r7, #3]
 801a0dc:	2b05      	cmp	r3, #5
 801a0de:	d01a      	beq.n	801a116 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 801a0e0:	4b1a      	ldr	r3, [pc, #104]	; (801a14c <vTaskGetInfo+0xc8>)
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	697a      	ldr	r2, [r7, #20]
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d103      	bne.n	801a0f2 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801a0ea:	68bb      	ldr	r3, [r7, #8]
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	731a      	strb	r2, [r3, #12]
 801a0f0:	e018      	b.n	801a124 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 801a0f2:	68bb      	ldr	r3, [r7, #8]
 801a0f4:	78fa      	ldrb	r2, [r7, #3]
 801a0f6:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 801a0f8:	78fb      	ldrb	r3, [r7, #3]
 801a0fa:	2b03      	cmp	r3, #3
 801a0fc:	d112      	bne.n	801a124 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 801a0fe:	f7ff fb41 	bl	8019784 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a102:	697b      	ldr	r3, [r7, #20]
 801a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a106:	2b00      	cmp	r3, #0
 801a108:	d002      	beq.n	801a110 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	2202      	movs	r2, #2
 801a10e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 801a110:	f7ff fb46 	bl	80197a0 <xTaskResumeAll>
 801a114:	e006      	b.n	801a124 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 801a116:	6978      	ldr	r0, [r7, #20]
 801a118:	f7ff fa54 	bl	80195c4 <eTaskGetState>
 801a11c:	4603      	mov	r3, r0
 801a11e:	461a      	mov	r2, r3
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d009      	beq.n	801a13e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 801a12a:	697b      	ldr	r3, [r7, #20]
 801a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a12e:	4618      	mov	r0, r3
 801a130:	f000 f860 	bl	801a1f4 <prvTaskCheckFreeStackSpace>
 801a134:	4603      	mov	r3, r0
 801a136:	461a      	mov	r2, r3
 801a138:	68bb      	ldr	r3, [r7, #8]
 801a13a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 801a13c:	e002      	b.n	801a144 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 801a13e:	68bb      	ldr	r3, [r7, #8]
 801a140:	2200      	movs	r2, #0
 801a142:	841a      	strh	r2, [r3, #32]
	}
 801a144:	bf00      	nop
 801a146:	3718      	adds	r7, #24
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd80      	pop	{r7, pc}
 801a14c:	2000a35c 	.word	0x2000a35c

0801a150 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 801a150:	b580      	push	{r7, lr}
 801a152:	b08a      	sub	sp, #40	; 0x28
 801a154:	af00      	add	r7, sp, #0
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	60b9      	str	r1, [r7, #8]
 801a15a:	4613      	mov	r3, r2
 801a15c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 801a15e:	2300      	movs	r3, #0
 801a160:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 801a162:	68bb      	ldr	r3, [r7, #8]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d03f      	beq.n	801a1ea <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a16a:	68bb      	ldr	r3, [r7, #8]
 801a16c:	623b      	str	r3, [r7, #32]
 801a16e:	6a3b      	ldr	r3, [r7, #32]
 801a170:	685b      	ldr	r3, [r3, #4]
 801a172:	685a      	ldr	r2, [r3, #4]
 801a174:	6a3b      	ldr	r3, [r7, #32]
 801a176:	605a      	str	r2, [r3, #4]
 801a178:	6a3b      	ldr	r3, [r7, #32]
 801a17a:	685a      	ldr	r2, [r3, #4]
 801a17c:	6a3b      	ldr	r3, [r7, #32]
 801a17e:	3308      	adds	r3, #8
 801a180:	429a      	cmp	r2, r3
 801a182:	d104      	bne.n	801a18e <prvListTasksWithinSingleList+0x3e>
 801a184:	6a3b      	ldr	r3, [r7, #32]
 801a186:	685b      	ldr	r3, [r3, #4]
 801a188:	685a      	ldr	r2, [r3, #4]
 801a18a:	6a3b      	ldr	r3, [r7, #32]
 801a18c:	605a      	str	r2, [r3, #4]
 801a18e:	6a3b      	ldr	r3, [r7, #32]
 801a190:	685b      	ldr	r3, [r3, #4]
 801a192:	68db      	ldr	r3, [r3, #12]
 801a194:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a196:	68bb      	ldr	r3, [r7, #8]
 801a198:	61bb      	str	r3, [r7, #24]
 801a19a:	69bb      	ldr	r3, [r7, #24]
 801a19c:	685b      	ldr	r3, [r3, #4]
 801a19e:	685a      	ldr	r2, [r3, #4]
 801a1a0:	69bb      	ldr	r3, [r7, #24]
 801a1a2:	605a      	str	r2, [r3, #4]
 801a1a4:	69bb      	ldr	r3, [r7, #24]
 801a1a6:	685a      	ldr	r2, [r3, #4]
 801a1a8:	69bb      	ldr	r3, [r7, #24]
 801a1aa:	3308      	adds	r3, #8
 801a1ac:	429a      	cmp	r2, r3
 801a1ae:	d104      	bne.n	801a1ba <prvListTasksWithinSingleList+0x6a>
 801a1b0:	69bb      	ldr	r3, [r7, #24]
 801a1b2:	685b      	ldr	r3, [r3, #4]
 801a1b4:	685a      	ldr	r2, [r3, #4]
 801a1b6:	69bb      	ldr	r3, [r7, #24]
 801a1b8:	605a      	str	r2, [r3, #4]
 801a1ba:	69bb      	ldr	r3, [r7, #24]
 801a1bc:	685b      	ldr	r3, [r3, #4]
 801a1be:	68db      	ldr	r3, [r3, #12]
 801a1c0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 801a1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1c4:	4613      	mov	r3, r2
 801a1c6:	00db      	lsls	r3, r3, #3
 801a1c8:	4413      	add	r3, r2
 801a1ca:	009b      	lsls	r3, r3, #2
 801a1cc:	461a      	mov	r2, r3
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	1899      	adds	r1, r3, r2
 801a1d2:	79fb      	ldrb	r3, [r7, #7]
 801a1d4:	2201      	movs	r2, #1
 801a1d6:	6978      	ldr	r0, [r7, #20]
 801a1d8:	f7ff ff54 	bl	801a084 <vTaskGetInfo>
				uxTask++;
 801a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1de:	3301      	adds	r3, #1
 801a1e0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 801a1e2:	697a      	ldr	r2, [r7, #20]
 801a1e4:	69fb      	ldr	r3, [r7, #28]
 801a1e6:	429a      	cmp	r2, r3
 801a1e8:	d1d5      	bne.n	801a196 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 801a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	3728      	adds	r7, #40	; 0x28
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bd80      	pop	{r7, pc}

0801a1f4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 801a1f4:	b480      	push	{r7}
 801a1f6:	b085      	sub	sp, #20
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801a200:	e005      	b.n	801a20e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	3301      	adds	r3, #1
 801a206:	607b      	str	r3, [r7, #4]
			ulCount++;
 801a208:	68fb      	ldr	r3, [r7, #12]
 801a20a:	3301      	adds	r3, #1
 801a20c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	781b      	ldrb	r3, [r3, #0]
 801a212:	2ba5      	cmp	r3, #165	; 0xa5
 801a214:	d0f5      	beq.n	801a202 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	089b      	lsrs	r3, r3, #2
 801a21a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	b29b      	uxth	r3, r3
	}
 801a220:	4618      	mov	r0, r3
 801a222:	3714      	adds	r7, #20
 801a224:	46bd      	mov	sp, r7
 801a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22a:	4770      	bx	lr

0801a22c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b082      	sub	sp, #8
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	3360      	adds	r3, #96	; 0x60
 801a238:	4618      	mov	r0, r3
 801a23a:	f002 ff09 	bl	801d050 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801a244:	2b00      	cmp	r3, #0
 801a246:	d108      	bne.n	801a25a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a24c:	4618      	mov	r0, r3
 801a24e:	f001 f9c9 	bl	801b5e4 <vPortFree>
				vPortFree( pxTCB );
 801a252:	6878      	ldr	r0, [r7, #4]
 801a254:	f001 f9c6 	bl	801b5e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a258:	e013      	b.n	801a282 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801a260:	2b01      	cmp	r3, #1
 801a262:	d103      	bne.n	801a26c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801a264:	6878      	ldr	r0, [r7, #4]
 801a266:	f001 f9bd 	bl	801b5e4 <vPortFree>
	}
 801a26a:	e00a      	b.n	801a282 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801a272:	2b02      	cmp	r3, #2
 801a274:	d005      	beq.n	801a282 <prvDeleteTCB+0x56>
 801a276:	f640 725d 	movw	r2, #3933	; 0xf5d
 801a27a:	4904      	ldr	r1, [pc, #16]	; (801a28c <prvDeleteTCB+0x60>)
 801a27c:	4804      	ldr	r0, [pc, #16]	; (801a290 <prvDeleteTCB+0x64>)
 801a27e:	f7f0 fb09 	bl	800a894 <assertFail>
	}
 801a282:	bf00      	nop
 801a284:	3708      	adds	r7, #8
 801a286:	46bd      	mov	sp, r7
 801a288:	bd80      	pop	{r7, pc}
 801a28a:	bf00      	nop
 801a28c:	08024268 	.word	0x08024268
 801a290:	08024558 	.word	0x08024558

0801a294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a294:	b480      	push	{r7}
 801a296:	b083      	sub	sp, #12
 801a298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a29a:	4b0c      	ldr	r3, [pc, #48]	; (801a2cc <prvResetNextTaskUnblockTime+0x38>)
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d104      	bne.n	801a2ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a2a4:	4b0a      	ldr	r3, [pc, #40]	; (801a2d0 <prvResetNextTaskUnblockTime+0x3c>)
 801a2a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a2aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a2ac:	e008      	b.n	801a2c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a2ae:	4b07      	ldr	r3, [pc, #28]	; (801a2cc <prvResetNextTaskUnblockTime+0x38>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	68db      	ldr	r3, [r3, #12]
 801a2b4:	68db      	ldr	r3, [r3, #12]
 801a2b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	685b      	ldr	r3, [r3, #4]
 801a2bc:	4a04      	ldr	r2, [pc, #16]	; (801a2d0 <prvResetNextTaskUnblockTime+0x3c>)
 801a2be:	6013      	str	r3, [r2, #0]
}
 801a2c0:	bf00      	nop
 801a2c2:	370c      	adds	r7, #12
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ca:	4770      	bx	lr
 801a2cc:	2000a518 	.word	0x2000a518
 801a2d0:	2000a584 	.word	0x2000a584

0801a2d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a2d4:	b480      	push	{r7}
 801a2d6:	b083      	sub	sp, #12
 801a2d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a2da:	4b0b      	ldr	r3, [pc, #44]	; (801a308 <xTaskGetSchedulerState+0x34>)
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d102      	bne.n	801a2e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a2e2:	2301      	movs	r3, #1
 801a2e4:	607b      	str	r3, [r7, #4]
 801a2e6:	e008      	b.n	801a2fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a2e8:	4b08      	ldr	r3, [pc, #32]	; (801a30c <xTaskGetSchedulerState+0x38>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d102      	bne.n	801a2f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a2f0:	2302      	movs	r3, #2
 801a2f2:	607b      	str	r3, [r7, #4]
 801a2f4:	e001      	b.n	801a2fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a2fa:	687b      	ldr	r3, [r7, #4]
	}
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	370c      	adds	r7, #12
 801a300:	46bd      	mov	sp, r7
 801a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a306:	4770      	bx	lr
 801a308:	2000a570 	.word	0x2000a570
 801a30c:	2000a58c 	.word	0x2000a58c

0801a310 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a310:	b580      	push	{r7, lr}
 801a312:	b084      	sub	sp, #16
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a31c:	2300      	movs	r3, #0
 801a31e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2b00      	cmp	r3, #0
 801a324:	d05e      	beq.n	801a3e4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a326:	68bb      	ldr	r3, [r7, #8]
 801a328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a32a:	4b31      	ldr	r3, [pc, #196]	; (801a3f0 <xTaskPriorityInherit+0xe0>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a330:	429a      	cmp	r2, r3
 801a332:	d24e      	bcs.n	801a3d2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a334:	68bb      	ldr	r3, [r7, #8]
 801a336:	699b      	ldr	r3, [r3, #24]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	db06      	blt.n	801a34a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a33c:	4b2c      	ldr	r3, [pc, #176]	; (801a3f0 <xTaskPriorityInherit+0xe0>)
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a342:	f1c3 0214 	rsb	r2, r3, #20
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a34a:	68bb      	ldr	r3, [r7, #8]
 801a34c:	6959      	ldr	r1, [r3, #20]
 801a34e:	68bb      	ldr	r3, [r7, #8]
 801a350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a352:	4613      	mov	r3, r2
 801a354:	009b      	lsls	r3, r3, #2
 801a356:	4413      	add	r3, r2
 801a358:	009b      	lsls	r3, r3, #2
 801a35a:	4a26      	ldr	r2, [pc, #152]	; (801a3f4 <xTaskPriorityInherit+0xe4>)
 801a35c:	4413      	add	r3, r2
 801a35e:	4299      	cmp	r1, r3
 801a360:	d12f      	bne.n	801a3c2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a362:	68bb      	ldr	r3, [r7, #8]
 801a364:	3304      	adds	r3, #4
 801a366:	4618      	mov	r0, r3
 801a368:	f7fd ff9e 	bl	80182a8 <uxListRemove>
 801a36c:	4603      	mov	r3, r0
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d10a      	bne.n	801a388 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801a372:	68bb      	ldr	r3, [r7, #8]
 801a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a376:	2201      	movs	r2, #1
 801a378:	fa02 f303 	lsl.w	r3, r2, r3
 801a37c:	43da      	mvns	r2, r3
 801a37e:	4b1e      	ldr	r3, [pc, #120]	; (801a3f8 <xTaskPriorityInherit+0xe8>)
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	4013      	ands	r3, r2
 801a384:	4a1c      	ldr	r2, [pc, #112]	; (801a3f8 <xTaskPriorityInherit+0xe8>)
 801a386:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a388:	4b19      	ldr	r3, [pc, #100]	; (801a3f0 <xTaskPriorityInherit+0xe0>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a396:	2201      	movs	r2, #1
 801a398:	409a      	lsls	r2, r3
 801a39a:	4b17      	ldr	r3, [pc, #92]	; (801a3f8 <xTaskPriorityInherit+0xe8>)
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	4313      	orrs	r3, r2
 801a3a0:	4a15      	ldr	r2, [pc, #84]	; (801a3f8 <xTaskPriorityInherit+0xe8>)
 801a3a2:	6013      	str	r3, [r2, #0]
 801a3a4:	68bb      	ldr	r3, [r7, #8]
 801a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	4413      	add	r3, r2
 801a3ae:	009b      	lsls	r3, r3, #2
 801a3b0:	4a10      	ldr	r2, [pc, #64]	; (801a3f4 <xTaskPriorityInherit+0xe4>)
 801a3b2:	441a      	add	r2, r3
 801a3b4:	68bb      	ldr	r3, [r7, #8]
 801a3b6:	3304      	adds	r3, #4
 801a3b8:	4619      	mov	r1, r3
 801a3ba:	4610      	mov	r0, r2
 801a3bc:	f7fd ff17 	bl	80181ee <vListInsertEnd>
 801a3c0:	e004      	b.n	801a3cc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a3c2:	4b0b      	ldr	r3, [pc, #44]	; (801a3f0 <xTaskPriorityInherit+0xe0>)
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3c8:	68bb      	ldr	r3, [r7, #8]
 801a3ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a3cc:	2301      	movs	r3, #1
 801a3ce:	60fb      	str	r3, [r7, #12]
 801a3d0:	e008      	b.n	801a3e4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a3d2:	68bb      	ldr	r3, [r7, #8]
 801a3d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a3d6:	4b06      	ldr	r3, [pc, #24]	; (801a3f0 <xTaskPriorityInherit+0xe0>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3dc:	429a      	cmp	r2, r3
 801a3de:	d201      	bcs.n	801a3e4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a3e4:	68fb      	ldr	r3, [r7, #12]
	}
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	3710      	adds	r7, #16
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}
 801a3ee:	bf00      	nop
 801a3f0:	2000a35c 	.word	0x2000a35c
 801a3f4:	2000a360 	.word	0x2000a360
 801a3f8:	2000a56c 	.word	0x2000a56c

0801a3fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b084      	sub	sp, #16
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a408:	2300      	movs	r3, #0
 801a40a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d064      	beq.n	801a4dc <xTaskPriorityDisinherit+0xe0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a412:	4b35      	ldr	r3, [pc, #212]	; (801a4e8 <xTaskPriorityDisinherit+0xec>)
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	68ba      	ldr	r2, [r7, #8]
 801a418:	429a      	cmp	r2, r3
 801a41a:	d005      	beq.n	801a428 <xTaskPriorityDisinherit+0x2c>
 801a41c:	f241 0213 	movw	r2, #4115	; 0x1013
 801a420:	4932      	ldr	r1, [pc, #200]	; (801a4ec <xTaskPriorityDisinherit+0xf0>)
 801a422:	4833      	ldr	r0, [pc, #204]	; (801a4f0 <xTaskPriorityDisinherit+0xf4>)
 801a424:	f7f0 fa36 	bl	800a894 <assertFail>
			configASSERT( pxTCB->uxMutexesHeld );
 801a428:	68bb      	ldr	r3, [r7, #8]
 801a42a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d105      	bne.n	801a43c <xTaskPriorityDisinherit+0x40>
 801a430:	f241 0214 	movw	r2, #4116	; 0x1014
 801a434:	492d      	ldr	r1, [pc, #180]	; (801a4ec <xTaskPriorityDisinherit+0xf0>)
 801a436:	482f      	ldr	r0, [pc, #188]	; (801a4f4 <xTaskPriorityDisinherit+0xf8>)
 801a438:	f7f0 fa2c 	bl	800a894 <assertFail>
			( pxTCB->uxMutexesHeld )--;
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a440:	1e5a      	subs	r2, r3, #1
 801a442:	68bb      	ldr	r3, [r7, #8]
 801a444:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a446:	68bb      	ldr	r3, [r7, #8]
 801a448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a44a:	68bb      	ldr	r3, [r7, #8]
 801a44c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a44e:	429a      	cmp	r2, r3
 801a450:	d044      	beq.n	801a4dc <xTaskPriorityDisinherit+0xe0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a452:	68bb      	ldr	r3, [r7, #8]
 801a454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a456:	2b00      	cmp	r3, #0
 801a458:	d140      	bne.n	801a4dc <xTaskPriorityDisinherit+0xe0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	3304      	adds	r3, #4
 801a45e:	4618      	mov	r0, r3
 801a460:	f7fd ff22 	bl	80182a8 <uxListRemove>
 801a464:	4603      	mov	r3, r0
 801a466:	2b00      	cmp	r3, #0
 801a468:	d115      	bne.n	801a496 <xTaskPriorityDisinherit+0x9a>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801a46a:	68bb      	ldr	r3, [r7, #8]
 801a46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a46e:	4922      	ldr	r1, [pc, #136]	; (801a4f8 <xTaskPriorityDisinherit+0xfc>)
 801a470:	4613      	mov	r3, r2
 801a472:	009b      	lsls	r3, r3, #2
 801a474:	4413      	add	r3, r2
 801a476:	009b      	lsls	r3, r3, #2
 801a478:	440b      	add	r3, r1
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d10a      	bne.n	801a496 <xTaskPriorityDisinherit+0x9a>
 801a480:	68bb      	ldr	r3, [r7, #8]
 801a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a484:	2201      	movs	r2, #1
 801a486:	fa02 f303 	lsl.w	r3, r2, r3
 801a48a:	43da      	mvns	r2, r3
 801a48c:	4b1b      	ldr	r3, [pc, #108]	; (801a4fc <xTaskPriorityDisinherit+0x100>)
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	4013      	ands	r3, r2
 801a492:	4a1a      	ldr	r2, [pc, #104]	; (801a4fc <xTaskPriorityDisinherit+0x100>)
 801a494:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a496:	68bb      	ldr	r3, [r7, #8]
 801a498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a49a:	68bb      	ldr	r3, [r7, #8]
 801a49c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4a2:	f1c3 0214 	rsb	r2, r3, #20
 801a4a6:	68bb      	ldr	r3, [r7, #8]
 801a4a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a4aa:	68bb      	ldr	r3, [r7, #8]
 801a4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4ae:	2201      	movs	r2, #1
 801a4b0:	409a      	lsls	r2, r3
 801a4b2:	4b12      	ldr	r3, [pc, #72]	; (801a4fc <xTaskPriorityDisinherit+0x100>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	4313      	orrs	r3, r2
 801a4b8:	4a10      	ldr	r2, [pc, #64]	; (801a4fc <xTaskPriorityDisinherit+0x100>)
 801a4ba:	6013      	str	r3, [r2, #0]
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a4c0:	4613      	mov	r3, r2
 801a4c2:	009b      	lsls	r3, r3, #2
 801a4c4:	4413      	add	r3, r2
 801a4c6:	009b      	lsls	r3, r3, #2
 801a4c8:	4a0b      	ldr	r2, [pc, #44]	; (801a4f8 <xTaskPriorityDisinherit+0xfc>)
 801a4ca:	441a      	add	r2, r3
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	3304      	adds	r3, #4
 801a4d0:	4619      	mov	r1, r3
 801a4d2:	4610      	mov	r0, r2
 801a4d4:	f7fd fe8b 	bl	80181ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a4d8:	2301      	movs	r3, #1
 801a4da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a4dc:	68fb      	ldr	r3, [r7, #12]
	}
 801a4de:	4618      	mov	r0, r3
 801a4e0:	3710      	adds	r7, #16
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	bd80      	pop	{r7, pc}
 801a4e6:	bf00      	nop
 801a4e8:	2000a35c 	.word	0x2000a35c
 801a4ec:	08024268 	.word	0x08024268
 801a4f0:	080245a0 	.word	0x080245a0
 801a4f4:	080245b8 	.word	0x080245b8
 801a4f8:	2000a360 	.word	0x2000a360
 801a4fc:	2000a56c 	.word	0x2000a56c

0801a500 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a500:	b580      	push	{r7, lr}
 801a502:	b086      	sub	sp, #24
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
 801a508:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a50e:	2301      	movs	r3, #1
 801a510:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d06d      	beq.n	801a5f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a518:	693b      	ldr	r3, [r7, #16]
 801a51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d105      	bne.n	801a52c <vTaskPriorityDisinheritAfterTimeout+0x2c>
 801a520:	f241 0262 	movw	r2, #4194	; 0x1062
 801a524:	4935      	ldr	r1, [pc, #212]	; (801a5fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a526:	4836      	ldr	r0, [pc, #216]	; (801a600 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801a528:	f7f0 f9b4 	bl	800a894 <assertFail>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a52c:	693b      	ldr	r3, [r7, #16]
 801a52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a530:	683a      	ldr	r2, [r7, #0]
 801a532:	429a      	cmp	r2, r3
 801a534:	d902      	bls.n	801a53c <vTaskPriorityDisinheritAfterTimeout+0x3c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a536:	683b      	ldr	r3, [r7, #0]
 801a538:	617b      	str	r3, [r7, #20]
 801a53a:	e002      	b.n	801a542 <vTaskPriorityDisinheritAfterTimeout+0x42>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a53c:	693b      	ldr	r3, [r7, #16]
 801a53e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a540:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a542:	693b      	ldr	r3, [r7, #16]
 801a544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a546:	697a      	ldr	r2, [r7, #20]
 801a548:	429a      	cmp	r2, r3
 801a54a:	d053      	beq.n	801a5f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a54c:	693b      	ldr	r3, [r7, #16]
 801a54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a550:	68fa      	ldr	r2, [r7, #12]
 801a552:	429a      	cmp	r2, r3
 801a554:	d14e      	bne.n	801a5f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a556:	4b2b      	ldr	r3, [pc, #172]	; (801a604 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	693a      	ldr	r2, [r7, #16]
 801a55c:	429a      	cmp	r2, r3
 801a55e:	d105      	bne.n	801a56c <vTaskPriorityDisinheritAfterTimeout+0x6c>
 801a560:	f241 027d 	movw	r2, #4221	; 0x107d
 801a564:	4925      	ldr	r1, [pc, #148]	; (801a5fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a566:	4828      	ldr	r0, [pc, #160]	; (801a608 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801a568:	f7f0 f994 	bl	800a894 <assertFail>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a56c:	693b      	ldr	r3, [r7, #16]
 801a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a570:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 801a572:	693b      	ldr	r3, [r7, #16]
 801a574:	697a      	ldr	r2, [r7, #20]
 801a576:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a578:	693b      	ldr	r3, [r7, #16]
 801a57a:	699b      	ldr	r3, [r3, #24]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	db04      	blt.n	801a58a <vTaskPriorityDisinheritAfterTimeout+0x8a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a580:	697b      	ldr	r3, [r7, #20]
 801a582:	f1c3 0214 	rsb	r2, r3, #20
 801a586:	693b      	ldr	r3, [r7, #16]
 801a588:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a58a:	693b      	ldr	r3, [r7, #16]
 801a58c:	6959      	ldr	r1, [r3, #20]
 801a58e:	68ba      	ldr	r2, [r7, #8]
 801a590:	4613      	mov	r3, r2
 801a592:	009b      	lsls	r3, r3, #2
 801a594:	4413      	add	r3, r2
 801a596:	009b      	lsls	r3, r3, #2
 801a598:	4a1c      	ldr	r2, [pc, #112]	; (801a60c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801a59a:	4413      	add	r3, r2
 801a59c:	4299      	cmp	r1, r3
 801a59e:	d129      	bne.n	801a5f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a5a0:	693b      	ldr	r3, [r7, #16]
 801a5a2:	3304      	adds	r3, #4
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f7fd fe7f 	bl	80182a8 <uxListRemove>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d10a      	bne.n	801a5c6 <vTaskPriorityDisinheritAfterTimeout+0xc6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5b4:	2201      	movs	r2, #1
 801a5b6:	fa02 f303 	lsl.w	r3, r2, r3
 801a5ba:	43da      	mvns	r2, r3
 801a5bc:	4b14      	ldr	r3, [pc, #80]	; (801a610 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	4013      	ands	r3, r2
 801a5c2:	4a13      	ldr	r2, [pc, #76]	; (801a610 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801a5c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5ca:	2201      	movs	r2, #1
 801a5cc:	409a      	lsls	r2, r3
 801a5ce:	4b10      	ldr	r3, [pc, #64]	; (801a610 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	4313      	orrs	r3, r2
 801a5d4:	4a0e      	ldr	r2, [pc, #56]	; (801a610 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801a5d6:	6013      	str	r3, [r2, #0]
 801a5d8:	693b      	ldr	r3, [r7, #16]
 801a5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a5dc:	4613      	mov	r3, r2
 801a5de:	009b      	lsls	r3, r3, #2
 801a5e0:	4413      	add	r3, r2
 801a5e2:	009b      	lsls	r3, r3, #2
 801a5e4:	4a09      	ldr	r2, [pc, #36]	; (801a60c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801a5e6:	441a      	add	r2, r3
 801a5e8:	693b      	ldr	r3, [r7, #16]
 801a5ea:	3304      	adds	r3, #4
 801a5ec:	4619      	mov	r1, r3
 801a5ee:	4610      	mov	r0, r2
 801a5f0:	f7fd fdfd 	bl	80181ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a5f4:	bf00      	nop
 801a5f6:	3718      	adds	r7, #24
 801a5f8:	46bd      	mov	sp, r7
 801a5fa:	bd80      	pop	{r7, pc}
 801a5fc:	08024268 	.word	0x08024268
 801a600:	080245b8 	.word	0x080245b8
 801a604:	2000a35c 	.word	0x2000a35c
 801a608:	080245d0 	.word	0x080245d0
 801a60c:	2000a360 	.word	0x2000a360
 801a610:	2000a56c 	.word	0x2000a56c

0801a614 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a614:	b480      	push	{r7}
 801a616:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a618:	4b07      	ldr	r3, [pc, #28]	; (801a638 <pvTaskIncrementMutexHeldCount+0x24>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d004      	beq.n	801a62a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a620:	4b05      	ldr	r3, [pc, #20]	; (801a638 <pvTaskIncrementMutexHeldCount+0x24>)
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801a626:	3201      	adds	r2, #1
 801a628:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 801a62a:	4b03      	ldr	r3, [pc, #12]	; (801a638 <pvTaskIncrementMutexHeldCount+0x24>)
 801a62c:	681b      	ldr	r3, [r3, #0]
	}
 801a62e:	4618      	mov	r0, r3
 801a630:	46bd      	mov	sp, r7
 801a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a636:	4770      	bx	lr
 801a638:	2000a35c 	.word	0x2000a35c

0801a63c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b084      	sub	sp, #16
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
 801a644:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801a646:	f000 fdfb 	bl	801b240 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801a64a:	4b20      	ldr	r3, [pc, #128]	; (801a6cc <ulTaskNotifyTake+0x90>)
 801a64c:	681b      	ldr	r3, [r3, #0]
 801a64e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a652:	2b00      	cmp	r3, #0
 801a654:	d113      	bne.n	801a67e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801a656:	4b1d      	ldr	r3, [pc, #116]	; (801a6cc <ulTaskNotifyTake+0x90>)
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	2201      	movs	r2, #1
 801a65c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 801a660:	683b      	ldr	r3, [r7, #0]
 801a662:	2b00      	cmp	r3, #0
 801a664:	d00b      	beq.n	801a67e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a666:	2101      	movs	r1, #1
 801a668:	6838      	ldr	r0, [r7, #0]
 801a66a:	f000 f859 	bl	801a720 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801a66e:	4b18      	ldr	r3, [pc, #96]	; (801a6d0 <ulTaskNotifyTake+0x94>)
 801a670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a674:	601a      	str	r2, [r3, #0]
 801a676:	f3bf 8f4f 	dsb	sy
 801a67a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801a67e:	f000 fe0d 	bl	801b29c <vPortExitCritical>

		taskENTER_CRITICAL();
 801a682:	f000 fddd 	bl	801b240 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801a686:	4b11      	ldr	r3, [pc, #68]	; (801a6cc <ulTaskNotifyTake+0x90>)
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a68e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d00e      	beq.n	801a6b4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	d005      	beq.n	801a6a8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801a69c:	4b0b      	ldr	r3, [pc, #44]	; (801a6cc <ulTaskNotifyTake+0x90>)
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 801a6a6:	e005      	b.n	801a6b4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801a6a8:	4b08      	ldr	r3, [pc, #32]	; (801a6cc <ulTaskNotifyTake+0x90>)
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	68fa      	ldr	r2, [r7, #12]
 801a6ae:	3a01      	subs	r2, #1
 801a6b0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a6b4:	4b05      	ldr	r3, [pc, #20]	; (801a6cc <ulTaskNotifyTake+0x90>)
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 801a6be:	f000 fded 	bl	801b29c <vPortExitCritical>

		return ulReturn;
 801a6c2:	68fb      	ldr	r3, [r7, #12]
	}
 801a6c4:	4618      	mov	r0, r3
 801a6c6:	3710      	adds	r7, #16
 801a6c8:	46bd      	mov	sp, r7
 801a6ca:	bd80      	pop	{r7, pc}
 801a6cc:	2000a35c 	.word	0x2000a35c
 801a6d0:	e000ed04 	.word	0xe000ed04

0801a6d4 <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b084      	sub	sp, #16
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
 801a6dc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d102      	bne.n	801a6ea <ulTaskNotifyValueClear+0x16>
 801a6e4:	4b0d      	ldr	r3, [pc, #52]	; (801a71c <ulTaskNotifyValueClear+0x48>)
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	e000      	b.n	801a6ec <ulTaskNotifyValueClear+0x18>
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 801a6ee:	f000 fda7 	bl	801b240 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801a6f2:	4b0a      	ldr	r3, [pc, #40]	; (801a71c <ulTaskNotifyValueClear+0x48>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801a6fa:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	43db      	mvns	r3, r3
 801a706:	401a      	ands	r2, r3
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 801a70e:	f000 fdc5 	bl	801b29c <vPortExitCritical>

		return ulReturn;
 801a712:	68bb      	ldr	r3, [r7, #8]
	}
 801a714:	4618      	mov	r0, r3
 801a716:	3710      	adds	r7, #16
 801a718:	46bd      	mov	sp, r7
 801a71a:	bd80      	pop	{r7, pc}
 801a71c:	2000a35c 	.word	0x2000a35c

0801a720 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b084      	sub	sp, #16
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
 801a728:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a72a:	4b29      	ldr	r3, [pc, #164]	; (801a7d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a730:	4b28      	ldr	r3, [pc, #160]	; (801a7d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	3304      	adds	r3, #4
 801a736:	4618      	mov	r0, r3
 801a738:	f7fd fdb6 	bl	80182a8 <uxListRemove>
 801a73c:	4603      	mov	r3, r0
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d10b      	bne.n	801a75a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801a742:	4b24      	ldr	r3, [pc, #144]	; (801a7d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a748:	2201      	movs	r2, #1
 801a74a:	fa02 f303 	lsl.w	r3, r2, r3
 801a74e:	43da      	mvns	r2, r3
 801a750:	4b21      	ldr	r3, [pc, #132]	; (801a7d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	4013      	ands	r3, r2
 801a756:	4a20      	ldr	r2, [pc, #128]	; (801a7d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801a758:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a760:	d10a      	bne.n	801a778 <prvAddCurrentTaskToDelayedList+0x58>
 801a762:	683b      	ldr	r3, [r7, #0]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d007      	beq.n	801a778 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a768:	4b1a      	ldr	r3, [pc, #104]	; (801a7d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	3304      	adds	r3, #4
 801a76e:	4619      	mov	r1, r3
 801a770:	481a      	ldr	r0, [pc, #104]	; (801a7dc <prvAddCurrentTaskToDelayedList+0xbc>)
 801a772:	f7fd fd3c 	bl	80181ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a776:	e026      	b.n	801a7c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a778:	68fa      	ldr	r2, [r7, #12]
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	4413      	add	r3, r2
 801a77e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a780:	4b14      	ldr	r3, [pc, #80]	; (801a7d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	68ba      	ldr	r2, [r7, #8]
 801a786:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a788:	68ba      	ldr	r2, [r7, #8]
 801a78a:	68fb      	ldr	r3, [r7, #12]
 801a78c:	429a      	cmp	r2, r3
 801a78e:	d209      	bcs.n	801a7a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a790:	4b13      	ldr	r3, [pc, #76]	; (801a7e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 801a792:	681a      	ldr	r2, [r3, #0]
 801a794:	4b0f      	ldr	r3, [pc, #60]	; (801a7d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	3304      	adds	r3, #4
 801a79a:	4619      	mov	r1, r3
 801a79c:	4610      	mov	r0, r2
 801a79e:	f7fd fd4a 	bl	8018236 <vListInsert>
}
 801a7a2:	e010      	b.n	801a7c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a7a4:	4b0f      	ldr	r3, [pc, #60]	; (801a7e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 801a7a6:	681a      	ldr	r2, [r3, #0]
 801a7a8:	4b0a      	ldr	r3, [pc, #40]	; (801a7d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	3304      	adds	r3, #4
 801a7ae:	4619      	mov	r1, r3
 801a7b0:	4610      	mov	r0, r2
 801a7b2:	f7fd fd40 	bl	8018236 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a7b6:	4b0c      	ldr	r3, [pc, #48]	; (801a7e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	68ba      	ldr	r2, [r7, #8]
 801a7bc:	429a      	cmp	r2, r3
 801a7be:	d202      	bcs.n	801a7c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801a7c0:	4a09      	ldr	r2, [pc, #36]	; (801a7e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 801a7c2:	68bb      	ldr	r3, [r7, #8]
 801a7c4:	6013      	str	r3, [r2, #0]
}
 801a7c6:	bf00      	nop
 801a7c8:	3710      	adds	r7, #16
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd80      	pop	{r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	2000a568 	.word	0x2000a568
 801a7d4:	2000a35c 	.word	0x2000a35c
 801a7d8:	2000a56c 	.word	0x2000a56c
 801a7dc:	2000a54c 	.word	0x2000a54c
 801a7e0:	2000a51c 	.word	0x2000a51c
 801a7e4:	2000a518 	.word	0x2000a518
 801a7e8:	2000a584 	.word	0x2000a584

0801a7ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b088      	sub	sp, #32
 801a7f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801a7f6:	f000 fb95 	bl	801af24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801a7fa:	4b19      	ldr	r3, [pc, #100]	; (801a860 <xTimerCreateTimerTask+0x74>)
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d020      	beq.n	801a844 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a802:	2300      	movs	r3, #0
 801a804:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a806:	2300      	movs	r3, #0
 801a808:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a80a:	463a      	mov	r2, r7
 801a80c:	1d39      	adds	r1, r7, #4
 801a80e:	f107 0308 	add.w	r3, r7, #8
 801a812:	4618      	mov	r0, r3
 801a814:	f7f3 faf4 	bl	800de00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a818:	6839      	ldr	r1, [r7, #0]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	68ba      	ldr	r2, [r7, #8]
 801a81e:	9202      	str	r2, [sp, #8]
 801a820:	9301      	str	r3, [sp, #4]
 801a822:	2301      	movs	r3, #1
 801a824:	9300      	str	r3, [sp, #0]
 801a826:	2300      	movs	r3, #0
 801a828:	460a      	mov	r2, r1
 801a82a:	490e      	ldr	r1, [pc, #56]	; (801a864 <xTimerCreateTimerTask+0x78>)
 801a82c:	480e      	ldr	r0, [pc, #56]	; (801a868 <xTimerCreateTimerTask+0x7c>)
 801a82e:	f7fe fcdd 	bl	80191ec <xTaskCreateStatic>
 801a832:	4603      	mov	r3, r0
 801a834:	4a0d      	ldr	r2, [pc, #52]	; (801a86c <xTimerCreateTimerTask+0x80>)
 801a836:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a838:	4b0c      	ldr	r3, [pc, #48]	; (801a86c <xTimerCreateTimerTask+0x80>)
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d001      	beq.n	801a844 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 801a840:	2301      	movs	r3, #1
 801a842:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d105      	bne.n	801a856 <xTimerCreateTimerTask+0x6a>
 801a84a:	f240 1213 	movw	r2, #275	; 0x113
 801a84e:	4908      	ldr	r1, [pc, #32]	; (801a870 <xTimerCreateTimerTask+0x84>)
 801a850:	4808      	ldr	r0, [pc, #32]	; (801a874 <xTimerCreateTimerTask+0x88>)
 801a852:	f7f0 f81f 	bl	800a894 <assertFail>
	return xReturn;
 801a856:	68fb      	ldr	r3, [r7, #12]
}
 801a858:	4618      	mov	r0, r3
 801a85a:	3710      	adds	r7, #16
 801a85c:	46bd      	mov	sp, r7
 801a85e:	bd80      	pop	{r7, pc}
 801a860:	2000a5c8 	.word	0x2000a5c8
 801a864:	08024680 	.word	0x08024680
 801a868:	0801aad5 	.word	0x0801aad5
 801a86c:	2000a5cc 	.word	0x2000a5cc
 801a870:	08024688 	.word	0x08024688
 801a874:	080246bc 	.word	0x080246bc

0801a878 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801a878:	b580      	push	{r7, lr}
 801a87a:	b088      	sub	sp, #32
 801a87c:	af02      	add	r7, sp, #8
 801a87e:	60f8      	str	r0, [r7, #12]
 801a880:	60b9      	str	r1, [r7, #8]
 801a882:	607a      	str	r2, [r7, #4]
 801a884:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801a886:	202c      	movs	r0, #44	; 0x2c
 801a888:	f000 fdea 	bl	801b460 <pvPortMalloc>
 801a88c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801a88e:	697b      	ldr	r3, [r7, #20]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d00d      	beq.n	801a8b0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	2200      	movs	r2, #0
 801a898:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801a89c:	697b      	ldr	r3, [r7, #20]
 801a89e:	9301      	str	r3, [sp, #4]
 801a8a0:	6a3b      	ldr	r3, [r7, #32]
 801a8a2:	9300      	str	r3, [sp, #0]
 801a8a4:	683b      	ldr	r3, [r7, #0]
 801a8a6:	687a      	ldr	r2, [r7, #4]
 801a8a8:	68b9      	ldr	r1, [r7, #8]
 801a8aa:	68f8      	ldr	r0, [r7, #12]
 801a8ac:	f000 f840 	bl	801a930 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801a8b0:	697b      	ldr	r3, [r7, #20]
	}
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	3718      	adds	r7, #24
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	bd80      	pop	{r7, pc}
	...

0801a8bc <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b088      	sub	sp, #32
 801a8c0:	af02      	add	r7, sp, #8
 801a8c2:	60f8      	str	r0, [r7, #12]
 801a8c4:	60b9      	str	r1, [r7, #8]
 801a8c6:	607a      	str	r2, [r7, #4]
 801a8c8:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801a8ca:	232c      	movs	r3, #44	; 0x2c
 801a8cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801a8ce:	693b      	ldr	r3, [r7, #16]
 801a8d0:	2b2c      	cmp	r3, #44	; 0x2c
 801a8d2:	d005      	beq.n	801a8e0 <xTimerCreateStatic+0x24>
 801a8d4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801a8d8:	4912      	ldr	r1, [pc, #72]	; (801a924 <xTimerCreateStatic+0x68>)
 801a8da:	4813      	ldr	r0, [pc, #76]	; (801a928 <xTimerCreateStatic+0x6c>)
 801a8dc:	f7ef ffda 	bl	800a894 <assertFail>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801a8e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d105      	bne.n	801a8f4 <xTimerCreateStatic+0x38>
 801a8e8:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801a8ec:	490d      	ldr	r1, [pc, #52]	; (801a924 <xTimerCreateStatic+0x68>)
 801a8ee:	480f      	ldr	r0, [pc, #60]	; (801a92c <xTimerCreateStatic+0x70>)
 801a8f0:	f7ef ffd0 	bl	800a894 <assertFail>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8f6:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 801a8f8:	697b      	ldr	r3, [r7, #20]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d00d      	beq.n	801a91a <xTimerCreateStatic+0x5e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801a8fe:	697b      	ldr	r3, [r7, #20]
 801a900:	2202      	movs	r2, #2
 801a902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801a906:	697b      	ldr	r3, [r7, #20]
 801a908:	9301      	str	r3, [sp, #4]
 801a90a:	6a3b      	ldr	r3, [r7, #32]
 801a90c:	9300      	str	r3, [sp, #0]
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	687a      	ldr	r2, [r7, #4]
 801a912:	68b9      	ldr	r1, [r7, #8]
 801a914:	68f8      	ldr	r0, [r7, #12]
 801a916:	f000 f80b 	bl	801a930 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801a91a:	697b      	ldr	r3, [r7, #20]
	}
 801a91c:	4618      	mov	r0, r3
 801a91e:	3718      	adds	r7, #24
 801a920:	46bd      	mov	sp, r7
 801a922:	bd80      	pop	{r7, pc}
 801a924:	08024688 	.word	0x08024688
 801a928:	080246c4 	.word	0x080246c4
 801a92c:	080246e0 	.word	0x080246e0

0801a930 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b084      	sub	sp, #16
 801a934:	af00      	add	r7, sp, #0
 801a936:	60f8      	str	r0, [r7, #12]
 801a938:	60b9      	str	r1, [r7, #8]
 801a93a:	607a      	str	r2, [r7, #4]
 801a93c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801a93e:	68bb      	ldr	r3, [r7, #8]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d105      	bne.n	801a950 <prvInitialiseNewTimer+0x20>
 801a944:	f240 1265 	movw	r2, #357	; 0x165
 801a948:	4914      	ldr	r1, [pc, #80]	; (801a99c <prvInitialiseNewTimer+0x6c>)
 801a94a:	4815      	ldr	r0, [pc, #84]	; (801a9a0 <prvInitialiseNewTimer+0x70>)
 801a94c:	f7ef ffa2 	bl	800a894 <assertFail>

	if( pxNewTimer != NULL )
 801a950:	69fb      	ldr	r3, [r7, #28]
 801a952:	2b00      	cmp	r3, #0
 801a954:	d01e      	beq.n	801a994 <prvInitialiseNewTimer+0x64>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801a956:	f000 fae5 	bl	801af24 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	68fa      	ldr	r2, [r7, #12]
 801a95e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801a960:	69fb      	ldr	r3, [r7, #28]
 801a962:	68ba      	ldr	r2, [r7, #8]
 801a964:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801a966:	69fb      	ldr	r3, [r7, #28]
 801a968:	683a      	ldr	r2, [r7, #0]
 801a96a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801a96c:	69fb      	ldr	r3, [r7, #28]
 801a96e:	69ba      	ldr	r2, [r7, #24]
 801a970:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801a972:	69fb      	ldr	r3, [r7, #28]
 801a974:	3304      	adds	r3, #4
 801a976:	4618      	mov	r0, r3
 801a978:	f7fd fc2c 	bl	80181d4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	d008      	beq.n	801a994 <prvInitialiseNewTimer+0x64>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 801a982:	69fb      	ldr	r3, [r7, #28]
 801a984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a988:	f043 0304 	orr.w	r3, r3, #4
 801a98c:	b2da      	uxtb	r2, r3
 801a98e:	69fb      	ldr	r3, [r7, #28]
 801a990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 801a994:	bf00      	nop
 801a996:	3710      	adds	r7, #16
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}
 801a99c:	08024688 	.word	0x08024688
 801a9a0:	080246f0 	.word	0x080246f0

0801a9a4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b08a      	sub	sp, #40	; 0x28
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	60f8      	str	r0, [r7, #12]
 801a9ac:	60b9      	str	r1, [r7, #8]
 801a9ae:	607a      	str	r2, [r7, #4]
 801a9b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801a9b2:	2300      	movs	r3, #0
 801a9b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d105      	bne.n	801a9c8 <xTimerGenericCommand+0x24>
 801a9bc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801a9c0:	491b      	ldr	r1, [pc, #108]	; (801aa30 <xTimerGenericCommand+0x8c>)
 801a9c2:	481c      	ldr	r0, [pc, #112]	; (801aa34 <xTimerGenericCommand+0x90>)
 801a9c4:	f7ef ff66 	bl	800a894 <assertFail>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801a9c8:	4b1b      	ldr	r3, [pc, #108]	; (801aa38 <xTimerGenericCommand+0x94>)
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d02a      	beq.n	801aa26 <xTimerGenericCommand+0x82>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	2b05      	cmp	r3, #5
 801a9e0:	dc18      	bgt.n	801aa14 <xTimerGenericCommand+0x70>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a9e2:	f7ff fc77 	bl	801a2d4 <xTaskGetSchedulerState>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	2b02      	cmp	r3, #2
 801a9ea:	d109      	bne.n	801aa00 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a9ec:	4b12      	ldr	r3, [pc, #72]	; (801aa38 <xTimerGenericCommand+0x94>)
 801a9ee:	6818      	ldr	r0, [r3, #0]
 801a9f0:	f107 0114 	add.w	r1, r7, #20
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9f8:	f7fd fdfe 	bl	80185f8 <xQueueGenericSend>
 801a9fc:	6278      	str	r0, [r7, #36]	; 0x24
 801a9fe:	e012      	b.n	801aa26 <xTimerGenericCommand+0x82>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801aa00:	4b0d      	ldr	r3, [pc, #52]	; (801aa38 <xTimerGenericCommand+0x94>)
 801aa02:	6818      	ldr	r0, [r3, #0]
 801aa04:	f107 0114 	add.w	r1, r7, #20
 801aa08:	2300      	movs	r3, #0
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	f7fd fdf4 	bl	80185f8 <xQueueGenericSend>
 801aa10:	6278      	str	r0, [r7, #36]	; 0x24
 801aa12:	e008      	b.n	801aa26 <xTimerGenericCommand+0x82>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801aa14:	4b08      	ldr	r3, [pc, #32]	; (801aa38 <xTimerGenericCommand+0x94>)
 801aa16:	6818      	ldr	r0, [r3, #0]
 801aa18:	f107 0114 	add.w	r1, r7, #20
 801aa1c:	2300      	movs	r3, #0
 801aa1e:	683a      	ldr	r2, [r7, #0]
 801aa20:	f7fd fef8 	bl	8018814 <xQueueGenericSendFromISR>
 801aa24:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801aa28:	4618      	mov	r0, r3
 801aa2a:	3728      	adds	r7, #40	; 0x28
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}
 801aa30:	08024688 	.word	0x08024688
 801aa34:	0802470c 	.word	0x0802470c
 801aa38:	2000a5c8 	.word	0x2000a5c8

0801aa3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b086      	sub	sp, #24
 801aa40:	af02      	add	r7, sp, #8
 801aa42:	6078      	str	r0, [r7, #4]
 801aa44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aa46:	4b20      	ldr	r3, [pc, #128]	; (801aac8 <prvProcessExpiredTimer+0x8c>)
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	68db      	ldr	r3, [r3, #12]
 801aa4c:	68db      	ldr	r3, [r3, #12]
 801aa4e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	3304      	adds	r3, #4
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7fd fc27 	bl	80182a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aa60:	f003 0304 	and.w	r3, r3, #4
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d01e      	beq.n	801aaa6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801aa68:	68fb      	ldr	r3, [r7, #12]
 801aa6a:	699a      	ldr	r2, [r3, #24]
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	18d1      	adds	r1, r2, r3
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	683a      	ldr	r2, [r7, #0]
 801aa74:	68f8      	ldr	r0, [r7, #12]
 801aa76:	f000 f8d1 	bl	801ac1c <prvInsertTimerInActiveList>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d01b      	beq.n	801aab8 <prvProcessExpiredTimer+0x7c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aa80:	2300      	movs	r3, #0
 801aa82:	9300      	str	r3, [sp, #0]
 801aa84:	2300      	movs	r3, #0
 801aa86:	687a      	ldr	r2, [r7, #4]
 801aa88:	2100      	movs	r1, #0
 801aa8a:	68f8      	ldr	r0, [r7, #12]
 801aa8c:	f7ff ff8a 	bl	801a9a4 <xTimerGenericCommand>
 801aa90:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d10f      	bne.n	801aab8 <prvProcessExpiredTimer+0x7c>
 801aa98:	f240 2211 	movw	r2, #529	; 0x211
 801aa9c:	490b      	ldr	r1, [pc, #44]	; (801aacc <prvProcessExpiredTimer+0x90>)
 801aa9e:	480c      	ldr	r0, [pc, #48]	; (801aad0 <prvProcessExpiredTimer+0x94>)
 801aaa0:	f7ef fef8 	bl	800a894 <assertFail>
 801aaa4:	e008      	b.n	801aab8 <prvProcessExpiredTimer+0x7c>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aaa6:	68fb      	ldr	r3, [r7, #12]
 801aaa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aaac:	f023 0301 	bic.w	r3, r3, #1
 801aab0:	b2da      	uxtb	r2, r3
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	6a1b      	ldr	r3, [r3, #32]
 801aabc:	68f8      	ldr	r0, [r7, #12]
 801aabe:	4798      	blx	r3
}
 801aac0:	bf00      	nop
 801aac2:	3710      	adds	r7, #16
 801aac4:	46bd      	mov	sp, r7
 801aac6:	bd80      	pop	{r7, pc}
 801aac8:	2000a5c0 	.word	0x2000a5c0
 801aacc:	08024688 	.word	0x08024688
 801aad0:	08024734 	.word	0x08024734

0801aad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b084      	sub	sp, #16
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801aadc:	f107 0308 	add.w	r3, r7, #8
 801aae0:	4618      	mov	r0, r3
 801aae2:	f000 f857 	bl	801ab94 <prvGetNextExpireTime>
 801aae6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801aae8:	68bb      	ldr	r3, [r7, #8]
 801aaea:	4619      	mov	r1, r3
 801aaec:	68f8      	ldr	r0, [r7, #12]
 801aaee:	f000 f803 	bl	801aaf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801aaf2:	f000 f8d5 	bl	801aca0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801aaf6:	e7f1      	b.n	801aadc <prvTimerTask+0x8>

0801aaf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801aaf8:	b580      	push	{r7, lr}
 801aafa:	b084      	sub	sp, #16
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
 801ab00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801ab02:	f7fe fe3f 	bl	8019784 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ab06:	f107 0308 	add.w	r3, r7, #8
 801ab0a:	4618      	mov	r0, r3
 801ab0c:	f000 f866 	bl	801abdc <prvSampleTimeNow>
 801ab10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801ab12:	68bb      	ldr	r3, [r7, #8]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d130      	bne.n	801ab7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801ab18:	683b      	ldr	r3, [r7, #0]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d10a      	bne.n	801ab34 <prvProcessTimerOrBlockTask+0x3c>
 801ab1e:	687a      	ldr	r2, [r7, #4]
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	429a      	cmp	r2, r3
 801ab24:	d806      	bhi.n	801ab34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801ab26:	f7fe fe3b 	bl	80197a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801ab2a:	68f9      	ldr	r1, [r7, #12]
 801ab2c:	6878      	ldr	r0, [r7, #4]
 801ab2e:	f7ff ff85 	bl	801aa3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801ab32:	e024      	b.n	801ab7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801ab34:	683b      	ldr	r3, [r7, #0]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d008      	beq.n	801ab4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801ab3a:	4b13      	ldr	r3, [pc, #76]	; (801ab88 <prvProcessTimerOrBlockTask+0x90>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d101      	bne.n	801ab48 <prvProcessTimerOrBlockTask+0x50>
 801ab44:	2301      	movs	r3, #1
 801ab46:	e000      	b.n	801ab4a <prvProcessTimerOrBlockTask+0x52>
 801ab48:	2300      	movs	r3, #0
 801ab4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801ab4c:	4b0f      	ldr	r3, [pc, #60]	; (801ab8c <prvProcessTimerOrBlockTask+0x94>)
 801ab4e:	6818      	ldr	r0, [r3, #0]
 801ab50:	687a      	ldr	r2, [r7, #4]
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	1ad3      	subs	r3, r2, r3
 801ab56:	683a      	ldr	r2, [r7, #0]
 801ab58:	4619      	mov	r1, r3
 801ab5a:	f7fe fb13 	bl	8019184 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801ab5e:	f7fe fe1f 	bl	80197a0 <xTaskResumeAll>
 801ab62:	4603      	mov	r3, r0
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d10a      	bne.n	801ab7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801ab68:	4b09      	ldr	r3, [pc, #36]	; (801ab90 <prvProcessTimerOrBlockTask+0x98>)
 801ab6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ab6e:	601a      	str	r2, [r3, #0]
 801ab70:	f3bf 8f4f 	dsb	sy
 801ab74:	f3bf 8f6f 	isb	sy
}
 801ab78:	e001      	b.n	801ab7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801ab7a:	f7fe fe11 	bl	80197a0 <xTaskResumeAll>
}
 801ab7e:	bf00      	nop
 801ab80:	3710      	adds	r7, #16
 801ab82:	46bd      	mov	sp, r7
 801ab84:	bd80      	pop	{r7, pc}
 801ab86:	bf00      	nop
 801ab88:	2000a5c4 	.word	0x2000a5c4
 801ab8c:	2000a5c8 	.word	0x2000a5c8
 801ab90:	e000ed04 	.word	0xe000ed04

0801ab94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801ab94:	b480      	push	{r7}
 801ab96:	b085      	sub	sp, #20
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801ab9c:	4b0e      	ldr	r3, [pc, #56]	; (801abd8 <prvGetNextExpireTime+0x44>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d101      	bne.n	801abaa <prvGetNextExpireTime+0x16>
 801aba6:	2201      	movs	r2, #1
 801aba8:	e000      	b.n	801abac <prvGetNextExpireTime+0x18>
 801abaa:	2200      	movs	r2, #0
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d105      	bne.n	801abc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801abb8:	4b07      	ldr	r3, [pc, #28]	; (801abd8 <prvGetNextExpireTime+0x44>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	68db      	ldr	r3, [r3, #12]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	60fb      	str	r3, [r7, #12]
 801abc2:	e001      	b.n	801abc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801abc4:	2300      	movs	r3, #0
 801abc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801abc8:	68fb      	ldr	r3, [r7, #12]
}
 801abca:	4618      	mov	r0, r3
 801abcc:	3714      	adds	r7, #20
 801abce:	46bd      	mov	sp, r7
 801abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abd4:	4770      	bx	lr
 801abd6:	bf00      	nop
 801abd8:	2000a5c0 	.word	0x2000a5c0

0801abdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801abdc:	b580      	push	{r7, lr}
 801abde:	b084      	sub	sp, #16
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801abe4:	f7fe fe78 	bl	80198d8 <xTaskGetTickCount>
 801abe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801abea:	4b0b      	ldr	r3, [pc, #44]	; (801ac18 <prvSampleTimeNow+0x3c>)
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	68fa      	ldr	r2, [r7, #12]
 801abf0:	429a      	cmp	r2, r3
 801abf2:	d205      	bcs.n	801ac00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801abf4:	f000 f932 	bl	801ae5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2201      	movs	r2, #1
 801abfc:	601a      	str	r2, [r3, #0]
 801abfe:	e002      	b.n	801ac06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2200      	movs	r2, #0
 801ac04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801ac06:	4a04      	ldr	r2, [pc, #16]	; (801ac18 <prvSampleTimeNow+0x3c>)
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801ac0c:	68fb      	ldr	r3, [r7, #12]
}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3710      	adds	r7, #16
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}
 801ac16:	bf00      	nop
 801ac18:	2000a5d0 	.word	0x2000a5d0

0801ac1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801ac1c:	b580      	push	{r7, lr}
 801ac1e:	b086      	sub	sp, #24
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	60f8      	str	r0, [r7, #12]
 801ac24:	60b9      	str	r1, [r7, #8]
 801ac26:	607a      	str	r2, [r7, #4]
 801ac28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801ac2a:	2300      	movs	r3, #0
 801ac2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	68ba      	ldr	r2, [r7, #8]
 801ac32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	68fa      	ldr	r2, [r7, #12]
 801ac38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801ac3a:	68ba      	ldr	r2, [r7, #8]
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	429a      	cmp	r2, r3
 801ac40:	d812      	bhi.n	801ac68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ac42:	687a      	ldr	r2, [r7, #4]
 801ac44:	683b      	ldr	r3, [r7, #0]
 801ac46:	1ad2      	subs	r2, r2, r3
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	699b      	ldr	r3, [r3, #24]
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d302      	bcc.n	801ac56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801ac50:	2301      	movs	r3, #1
 801ac52:	617b      	str	r3, [r7, #20]
 801ac54:	e01b      	b.n	801ac8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801ac56:	4b10      	ldr	r3, [pc, #64]	; (801ac98 <prvInsertTimerInActiveList+0x7c>)
 801ac58:	681a      	ldr	r2, [r3, #0]
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	3304      	adds	r3, #4
 801ac5e:	4619      	mov	r1, r3
 801ac60:	4610      	mov	r0, r2
 801ac62:	f7fd fae8 	bl	8018236 <vListInsert>
 801ac66:	e012      	b.n	801ac8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801ac68:	687a      	ldr	r2, [r7, #4]
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	429a      	cmp	r2, r3
 801ac6e:	d206      	bcs.n	801ac7e <prvInsertTimerInActiveList+0x62>
 801ac70:	68ba      	ldr	r2, [r7, #8]
 801ac72:	683b      	ldr	r3, [r7, #0]
 801ac74:	429a      	cmp	r2, r3
 801ac76:	d302      	bcc.n	801ac7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801ac78:	2301      	movs	r3, #1
 801ac7a:	617b      	str	r3, [r7, #20]
 801ac7c:	e007      	b.n	801ac8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ac7e:	4b07      	ldr	r3, [pc, #28]	; (801ac9c <prvInsertTimerInActiveList+0x80>)
 801ac80:	681a      	ldr	r2, [r3, #0]
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	3304      	adds	r3, #4
 801ac86:	4619      	mov	r1, r3
 801ac88:	4610      	mov	r0, r2
 801ac8a:	f7fd fad4 	bl	8018236 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801ac8e:	697b      	ldr	r3, [r7, #20]
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3718      	adds	r7, #24
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	2000a5c4 	.word	0x2000a5c4
 801ac9c:	2000a5c0 	.word	0x2000a5c0

0801aca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b08c      	sub	sp, #48	; 0x30
 801aca4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801aca6:	e0bd      	b.n	801ae24 <prvProcessReceivedCommands+0x184>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801aca8:	68bb      	ldr	r3, [r7, #8]
 801acaa:	2b00      	cmp	r3, #0
 801acac:	da14      	bge.n	801acd8 <prvProcessReceivedCommands+0x38>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801acae:	f107 0308 	add.w	r3, r7, #8
 801acb2:	3304      	adds	r3, #4
 801acb4:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d105      	bne.n	801acc8 <prvProcessReceivedCommands+0x28>
 801acbc:	f240 22f1 	movw	r2, #753	; 0x2f1
 801acc0:	4961      	ldr	r1, [pc, #388]	; (801ae48 <prvProcessReceivedCommands+0x1a8>)
 801acc2:	4862      	ldr	r0, [pc, #392]	; (801ae4c <prvProcessReceivedCommands+0x1ac>)
 801acc4:	f7ef fde6 	bl	800a894 <assertFail>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acce:	6850      	ldr	r0, [r2, #4]
 801acd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acd2:	6892      	ldr	r2, [r2, #8]
 801acd4:	4611      	mov	r1, r2
 801acd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801acd8:	68bb      	ldr	r3, [r7, #8]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	f2c0 80a2 	blt.w	801ae24 <prvProcessReceivedCommands+0x184>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801ace0:	693b      	ldr	r3, [r7, #16]
 801ace2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801ace4:	6a3b      	ldr	r3, [r7, #32]
 801ace6:	695b      	ldr	r3, [r3, #20]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d004      	beq.n	801acf6 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801acec:	6a3b      	ldr	r3, [r7, #32]
 801acee:	3304      	adds	r3, #4
 801acf0:	4618      	mov	r0, r3
 801acf2:	f7fd fad9 	bl	80182a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801acf6:	1d3b      	adds	r3, r7, #4
 801acf8:	4618      	mov	r0, r3
 801acfa:	f7ff ff6f 	bl	801abdc <prvSampleTimeNow>
 801acfe:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	2b09      	cmp	r3, #9
 801ad04:	f200 808d 	bhi.w	801ae22 <prvProcessReceivedCommands+0x182>
 801ad08:	a201      	add	r2, pc, #4	; (adr r2, 801ad10 <prvProcessReceivedCommands+0x70>)
 801ad0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad0e:	bf00      	nop
 801ad10:	0801ad39 	.word	0x0801ad39
 801ad14:	0801ad39 	.word	0x0801ad39
 801ad18:	0801ad39 	.word	0x0801ad39
 801ad1c:	0801ada5 	.word	0x0801ada5
 801ad20:	0801adb9 	.word	0x0801adb9
 801ad24:	0801adf9 	.word	0x0801adf9
 801ad28:	0801ad39 	.word	0x0801ad39
 801ad2c:	0801ad39 	.word	0x0801ad39
 801ad30:	0801ada5 	.word	0x0801ada5
 801ad34:	0801adb9 	.word	0x0801adb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ad38:	6a3b      	ldr	r3, [r7, #32]
 801ad3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad3e:	f043 0301 	orr.w	r3, r3, #1
 801ad42:	b2da      	uxtb	r2, r3
 801ad44:	6a3b      	ldr	r3, [r7, #32]
 801ad46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801ad4a:	68fa      	ldr	r2, [r7, #12]
 801ad4c:	6a3b      	ldr	r3, [r7, #32]
 801ad4e:	699b      	ldr	r3, [r3, #24]
 801ad50:	18d1      	adds	r1, r2, r3
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	69fa      	ldr	r2, [r7, #28]
 801ad56:	6a38      	ldr	r0, [r7, #32]
 801ad58:	f7ff ff60 	bl	801ac1c <prvInsertTimerInActiveList>
 801ad5c:	4603      	mov	r3, r0
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d060      	beq.n	801ae24 <prvProcessReceivedCommands+0x184>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ad62:	6a3b      	ldr	r3, [r7, #32]
 801ad64:	6a1b      	ldr	r3, [r3, #32]
 801ad66:	6a38      	ldr	r0, [r7, #32]
 801ad68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ad6a:	6a3b      	ldr	r3, [r7, #32]
 801ad6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad70:	f003 0304 	and.w	r3, r3, #4
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d055      	beq.n	801ae24 <prvProcessReceivedCommands+0x184>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801ad78:	68fa      	ldr	r2, [r7, #12]
 801ad7a:	6a3b      	ldr	r3, [r7, #32]
 801ad7c:	699b      	ldr	r3, [r3, #24]
 801ad7e:	441a      	add	r2, r3
 801ad80:	2300      	movs	r3, #0
 801ad82:	9300      	str	r3, [sp, #0]
 801ad84:	2300      	movs	r3, #0
 801ad86:	2100      	movs	r1, #0
 801ad88:	6a38      	ldr	r0, [r7, #32]
 801ad8a:	f7ff fe0b 	bl	801a9a4 <xTimerGenericCommand>
 801ad8e:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 801ad90:	69bb      	ldr	r3, [r7, #24]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d146      	bne.n	801ae24 <prvProcessReceivedCommands+0x184>
 801ad96:	f44f 724b 	mov.w	r2, #812	; 0x32c
 801ad9a:	492b      	ldr	r1, [pc, #172]	; (801ae48 <prvProcessReceivedCommands+0x1a8>)
 801ad9c:	482c      	ldr	r0, [pc, #176]	; (801ae50 <prvProcessReceivedCommands+0x1b0>)
 801ad9e:	f7ef fd79 	bl	800a894 <assertFail>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 801ada2:	e03f      	b.n	801ae24 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ada4:	6a3b      	ldr	r3, [r7, #32]
 801ada6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adaa:	f023 0301 	bic.w	r3, r3, #1
 801adae:	b2da      	uxtb	r2, r3
 801adb0:	6a3b      	ldr	r3, [r7, #32]
 801adb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801adb6:	e035      	b.n	801ae24 <prvProcessReceivedCommands+0x184>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801adb8:	6a3b      	ldr	r3, [r7, #32]
 801adba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adbe:	f043 0301 	orr.w	r3, r3, #1
 801adc2:	b2da      	uxtb	r2, r3
 801adc4:	6a3b      	ldr	r3, [r7, #32]
 801adc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801adca:	68fa      	ldr	r2, [r7, #12]
 801adcc:	6a3b      	ldr	r3, [r7, #32]
 801adce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801add0:	6a3b      	ldr	r3, [r7, #32]
 801add2:	699b      	ldr	r3, [r3, #24]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d105      	bne.n	801ade4 <prvProcessReceivedCommands+0x144>
 801add8:	f44f 7251 	mov.w	r2, #836	; 0x344
 801addc:	491a      	ldr	r1, [pc, #104]	; (801ae48 <prvProcessReceivedCommands+0x1a8>)
 801adde:	481d      	ldr	r0, [pc, #116]	; (801ae54 <prvProcessReceivedCommands+0x1b4>)
 801ade0:	f7ef fd58 	bl	800a894 <assertFail>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801ade4:	6a3b      	ldr	r3, [r7, #32]
 801ade6:	699a      	ldr	r2, [r3, #24]
 801ade8:	69fb      	ldr	r3, [r7, #28]
 801adea:	18d1      	adds	r1, r2, r3
 801adec:	69fb      	ldr	r3, [r7, #28]
 801adee:	69fa      	ldr	r2, [r7, #28]
 801adf0:	6a38      	ldr	r0, [r7, #32]
 801adf2:	f7ff ff13 	bl	801ac1c <prvInsertTimerInActiveList>
					break;
 801adf6:	e015      	b.n	801ae24 <prvProcessReceivedCommands+0x184>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801adf8:	6a3b      	ldr	r3, [r7, #32]
 801adfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adfe:	f003 0302 	and.w	r3, r3, #2
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d103      	bne.n	801ae0e <prvProcessReceivedCommands+0x16e>
						{
							vPortFree( pxTimer );
 801ae06:	6a38      	ldr	r0, [r7, #32]
 801ae08:	f000 fbec 	bl	801b5e4 <vPortFree>
 801ae0c:	e00a      	b.n	801ae24 <prvProcessReceivedCommands+0x184>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ae0e:	6a3b      	ldr	r3, [r7, #32]
 801ae10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae14:	f023 0301 	bic.w	r3, r3, #1
 801ae18:	b2da      	uxtb	r2, r3
 801ae1a:	6a3b      	ldr	r3, [r7, #32]
 801ae1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801ae20:	e000      	b.n	801ae24 <prvProcessReceivedCommands+0x184>

				default	:
					/* Don't expect to get here. */
					break;
 801ae22:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ae24:	4b0c      	ldr	r3, [pc, #48]	; (801ae58 <prvProcessReceivedCommands+0x1b8>)
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	f107 0108 	add.w	r1, r7, #8
 801ae2c:	2200      	movs	r2, #0
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f7fd fd84 	bl	801893c <xQueueReceive>
 801ae34:	4603      	mov	r3, r0
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	f47f af36 	bne.w	801aca8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801ae3c:	bf00      	nop
 801ae3e:	bf00      	nop
 801ae40:	3728      	adds	r7, #40	; 0x28
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bd80      	pop	{r7, pc}
 801ae46:	bf00      	nop
 801ae48:	08024688 	.word	0x08024688
 801ae4c:	0802473c 	.word	0x0802473c
 801ae50:	08024734 	.word	0x08024734
 801ae54:	08024748 	.word	0x08024748
 801ae58:	2000a5c8 	.word	0x2000a5c8

0801ae5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b088      	sub	sp, #32
 801ae60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ae62:	e043      	b.n	801aeec <prvSwitchTimerLists+0x90>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ae64:	4b2b      	ldr	r3, [pc, #172]	; (801af14 <prvSwitchTimerLists+0xb8>)
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	68db      	ldr	r3, [r3, #12]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ae6e:	4b29      	ldr	r3, [pc, #164]	; (801af14 <prvSwitchTimerLists+0xb8>)
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	68db      	ldr	r3, [r3, #12]
 801ae74:	68db      	ldr	r3, [r3, #12]
 801ae76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	3304      	adds	r3, #4
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f7fd fa13 	bl	80182a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ae82:	68fb      	ldr	r3, [r7, #12]
 801ae84:	6a1b      	ldr	r3, [r3, #32]
 801ae86:	68f8      	ldr	r0, [r7, #12]
 801ae88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ae8a:	68fb      	ldr	r3, [r7, #12]
 801ae8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae90:	f003 0304 	and.w	r3, r3, #4
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d029      	beq.n	801aeec <prvSwitchTimerLists+0x90>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	699b      	ldr	r3, [r3, #24]
 801ae9c:	693a      	ldr	r2, [r7, #16]
 801ae9e:	4413      	add	r3, r2
 801aea0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801aea2:	68ba      	ldr	r2, [r7, #8]
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	429a      	cmp	r2, r3
 801aea8:	d90e      	bls.n	801aec8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	68ba      	ldr	r2, [r7, #8]
 801aeae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	68fa      	ldr	r2, [r7, #12]
 801aeb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801aeb6:	4b17      	ldr	r3, [pc, #92]	; (801af14 <prvSwitchTimerLists+0xb8>)
 801aeb8:	681a      	ldr	r2, [r3, #0]
 801aeba:	68fb      	ldr	r3, [r7, #12]
 801aebc:	3304      	adds	r3, #4
 801aebe:	4619      	mov	r1, r3
 801aec0:	4610      	mov	r0, r2
 801aec2:	f7fd f9b8 	bl	8018236 <vListInsert>
 801aec6:	e011      	b.n	801aeec <prvSwitchTimerLists+0x90>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aec8:	2300      	movs	r3, #0
 801aeca:	9300      	str	r3, [sp, #0]
 801aecc:	2300      	movs	r3, #0
 801aece:	693a      	ldr	r2, [r7, #16]
 801aed0:	2100      	movs	r1, #0
 801aed2:	68f8      	ldr	r0, [r7, #12]
 801aed4:	f7ff fd66 	bl	801a9a4 <xTimerGenericCommand>
 801aed8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	2b00      	cmp	r3, #0
 801aede:	d105      	bne.n	801aeec <prvSwitchTimerLists+0x90>
 801aee0:	f240 329d 	movw	r2, #925	; 0x39d
 801aee4:	490c      	ldr	r1, [pc, #48]	; (801af18 <prvSwitchTimerLists+0xbc>)
 801aee6:	480d      	ldr	r0, [pc, #52]	; (801af1c <prvSwitchTimerLists+0xc0>)
 801aee8:	f7ef fcd4 	bl	800a894 <assertFail>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801aeec:	4b09      	ldr	r3, [pc, #36]	; (801af14 <prvSwitchTimerLists+0xb8>)
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d1b6      	bne.n	801ae64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801aef6:	4b07      	ldr	r3, [pc, #28]	; (801af14 <prvSwitchTimerLists+0xb8>)
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801aefc:	4b08      	ldr	r3, [pc, #32]	; (801af20 <prvSwitchTimerLists+0xc4>)
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	4a04      	ldr	r2, [pc, #16]	; (801af14 <prvSwitchTimerLists+0xb8>)
 801af02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801af04:	4a06      	ldr	r2, [pc, #24]	; (801af20 <prvSwitchTimerLists+0xc4>)
 801af06:	697b      	ldr	r3, [r7, #20]
 801af08:	6013      	str	r3, [r2, #0]
}
 801af0a:	bf00      	nop
 801af0c:	3718      	adds	r7, #24
 801af0e:	46bd      	mov	sp, r7
 801af10:	bd80      	pop	{r7, pc}
 801af12:	bf00      	nop
 801af14:	2000a5c0 	.word	0x2000a5c0
 801af18:	08024688 	.word	0x08024688
 801af1c:	08024734 	.word	0x08024734
 801af20:	2000a5c4 	.word	0x2000a5c4

0801af24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801af24:	b580      	push	{r7, lr}
 801af26:	b082      	sub	sp, #8
 801af28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801af2a:	f000 f989 	bl	801b240 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801af2e:	4b15      	ldr	r3, [pc, #84]	; (801af84 <prvCheckForValidListAndQueue+0x60>)
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d120      	bne.n	801af78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801af36:	4814      	ldr	r0, [pc, #80]	; (801af88 <prvCheckForValidListAndQueue+0x64>)
 801af38:	f7fd f92c 	bl	8018194 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801af3c:	4813      	ldr	r0, [pc, #76]	; (801af8c <prvCheckForValidListAndQueue+0x68>)
 801af3e:	f7fd f929 	bl	8018194 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801af42:	4b13      	ldr	r3, [pc, #76]	; (801af90 <prvCheckForValidListAndQueue+0x6c>)
 801af44:	4a10      	ldr	r2, [pc, #64]	; (801af88 <prvCheckForValidListAndQueue+0x64>)
 801af46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801af48:	4b12      	ldr	r3, [pc, #72]	; (801af94 <prvCheckForValidListAndQueue+0x70>)
 801af4a:	4a10      	ldr	r2, [pc, #64]	; (801af8c <prvCheckForValidListAndQueue+0x68>)
 801af4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801af4e:	2300      	movs	r3, #0
 801af50:	9300      	str	r3, [sp, #0]
 801af52:	4b11      	ldr	r3, [pc, #68]	; (801af98 <prvCheckForValidListAndQueue+0x74>)
 801af54:	4a11      	ldr	r2, [pc, #68]	; (801af9c <prvCheckForValidListAndQueue+0x78>)
 801af56:	2110      	movs	r1, #16
 801af58:	2014      	movs	r0, #20
 801af5a:	f7fd fa37 	bl	80183cc <xQueueGenericCreateStatic>
 801af5e:	4603      	mov	r3, r0
 801af60:	4a08      	ldr	r2, [pc, #32]	; (801af84 <prvCheckForValidListAndQueue+0x60>)
 801af62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801af64:	4b07      	ldr	r3, [pc, #28]	; (801af84 <prvCheckForValidListAndQueue+0x60>)
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d005      	beq.n	801af78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801af6c:	4b05      	ldr	r3, [pc, #20]	; (801af84 <prvCheckForValidListAndQueue+0x60>)
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	490b      	ldr	r1, [pc, #44]	; (801afa0 <prvCheckForValidListAndQueue+0x7c>)
 801af72:	4618      	mov	r0, r3
 801af74:	f7fe f8dc 	bl	8019130 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801af78:	f000 f990 	bl	801b29c <vPortExitCritical>
}
 801af7c:	bf00      	nop
 801af7e:	46bd      	mov	sp, r7
 801af80:	bd80      	pop	{r7, pc}
 801af82:	bf00      	nop
 801af84:	2000a5c8 	.word	0x2000a5c8
 801af88:	2000a598 	.word	0x2000a598
 801af8c:	2000a5ac 	.word	0x2000a5ac
 801af90:	2000a5c0 	.word	0x2000a5c0
 801af94:	2000a5c4 	.word	0x2000a5c4
 801af98:	2000a714 	.word	0x2000a714
 801af9c:	2000a5d4 	.word	0x2000a5d4
 801afa0:	08024770 	.word	0x08024770

0801afa4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b084      	sub	sp, #16
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d105      	bne.n	801afc2 <pvTimerGetTimerID+0x1e>
 801afb6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801afba:	4908      	ldr	r1, [pc, #32]	; (801afdc <pvTimerGetTimerID+0x38>)
 801afbc:	4808      	ldr	r0, [pc, #32]	; (801afe0 <pvTimerGetTimerID+0x3c>)
 801afbe:	f7ef fc69 	bl	800a894 <assertFail>

	taskENTER_CRITICAL();
 801afc2:	f000 f93d 	bl	801b240 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 801afc6:	68fb      	ldr	r3, [r7, #12]
 801afc8:	69db      	ldr	r3, [r3, #28]
 801afca:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 801afcc:	f000 f966 	bl	801b29c <vPortExitCritical>

	return pvReturn;
 801afd0:	68bb      	ldr	r3, [r7, #8]
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	3710      	adds	r7, #16
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bd80      	pop	{r7, pc}
 801afda:	bf00      	nop
 801afdc:	08024688 	.word	0x08024688
 801afe0:	0802470c 	.word	0x0802470c

0801afe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801afe4:	b480      	push	{r7}
 801afe6:	b085      	sub	sp, #20
 801afe8:	af00      	add	r7, sp, #0
 801afea:	60f8      	str	r0, [r7, #12]
 801afec:	60b9      	str	r1, [r7, #8]
 801afee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	3b04      	subs	r3, #4
 801aff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801affc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	3b04      	subs	r3, #4
 801b002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b004:	68bb      	ldr	r3, [r7, #8]
 801b006:	f023 0201 	bic.w	r2, r3, #1
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	3b04      	subs	r3, #4
 801b012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b014:	4a0c      	ldr	r2, [pc, #48]	; (801b048 <pxPortInitialiseStack+0x64>)
 801b016:	68fb      	ldr	r3, [r7, #12]
 801b018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b01a:	68fb      	ldr	r3, [r7, #12]
 801b01c:	3b14      	subs	r3, #20
 801b01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b020:	687a      	ldr	r2, [r7, #4]
 801b022:	68fb      	ldr	r3, [r7, #12]
 801b024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	3b04      	subs	r3, #4
 801b02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	f06f 0202 	mvn.w	r2, #2
 801b032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	3b20      	subs	r3, #32
 801b038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b03a:	68fb      	ldr	r3, [r7, #12]
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	3714      	adds	r7, #20
 801b040:	46bd      	mov	sp, r7
 801b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b046:	4770      	bx	lr
 801b048:	0801b04d 	.word	0x0801b04d

0801b04c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b082      	sub	sp, #8
 801b050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b052:	2300      	movs	r3, #0
 801b054:	603b      	str	r3, [r7, #0]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b056:	4b0e      	ldr	r3, [pc, #56]	; (801b090 <prvTaskExitError+0x44>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b05e:	d004      	beq.n	801b06a <prvTaskExitError+0x1e>
 801b060:	22e3      	movs	r2, #227	; 0xe3
 801b062:	490c      	ldr	r1, [pc, #48]	; (801b094 <prvTaskExitError+0x48>)
 801b064:	480c      	ldr	r0, [pc, #48]	; (801b098 <prvTaskExitError+0x4c>)
 801b066:	f7ef fc15 	bl	800a894 <assertFail>
	__asm volatile
 801b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b06e:	f383 8811 	msr	BASEPRI, r3
 801b072:	f3bf 8f6f 	isb	sy
 801b076:	f3bf 8f4f 	dsb	sy
 801b07a:	607b      	str	r3, [r7, #4]
}
 801b07c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b07e:	bf00      	nop
 801b080:	683b      	ldr	r3, [r7, #0]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d0fc      	beq.n	801b080 <prvTaskExitError+0x34>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b086:	bf00      	nop
 801b088:	bf00      	nop
 801b08a:	3708      	adds	r7, #8
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bd80      	pop	{r7, pc}
 801b090:	20000cdc 	.word	0x20000cdc
 801b094:	08024784 	.word	0x08024784
 801b098:	080247cc 	.word	0x080247cc
 801b09c:	00000000 	.word	0x00000000

0801b0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b0a0:	4b07      	ldr	r3, [pc, #28]	; (801b0c0 <pxCurrentTCBConst2>)
 801b0a2:	6819      	ldr	r1, [r3, #0]
 801b0a4:	6808      	ldr	r0, [r1, #0]
 801b0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0aa:	f380 8809 	msr	PSP, r0
 801b0ae:	f3bf 8f6f 	isb	sy
 801b0b2:	f04f 0000 	mov.w	r0, #0
 801b0b6:	f380 8811 	msr	BASEPRI, r0
 801b0ba:	4770      	bx	lr
 801b0bc:	f3af 8000 	nop.w

0801b0c0 <pxCurrentTCBConst2>:
 801b0c0:	2000a35c 	.word	0x2000a35c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b0c4:	bf00      	nop
 801b0c6:	bf00      	nop

0801b0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b0c8:	4808      	ldr	r0, [pc, #32]	; (801b0ec <prvPortStartFirstTask+0x24>)
 801b0ca:	6800      	ldr	r0, [r0, #0]
 801b0cc:	6800      	ldr	r0, [r0, #0]
 801b0ce:	f380 8808 	msr	MSP, r0
 801b0d2:	f04f 0000 	mov.w	r0, #0
 801b0d6:	f380 8814 	msr	CONTROL, r0
 801b0da:	b662      	cpsie	i
 801b0dc:	b661      	cpsie	f
 801b0de:	f3bf 8f4f 	dsb	sy
 801b0e2:	f3bf 8f6f 	isb	sy
 801b0e6:	df00      	svc	0
 801b0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b0ea:	bf00      	nop
 801b0ec:	e000ed08 	.word	0xe000ed08

0801b0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b084      	sub	sp, #16
 801b0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b0f6:	4b44      	ldr	r3, [pc, #272]	; (801b208 <xPortStartScheduler+0x118>)
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	4a44      	ldr	r2, [pc, #272]	; (801b20c <xPortStartScheduler+0x11c>)
 801b0fc:	4293      	cmp	r3, r2
 801b0fe:	d105      	bne.n	801b10c <xPortStartScheduler+0x1c>
 801b100:	f44f 7294 	mov.w	r2, #296	; 0x128
 801b104:	4942      	ldr	r1, [pc, #264]	; (801b210 <xPortStartScheduler+0x120>)
 801b106:	4843      	ldr	r0, [pc, #268]	; (801b214 <xPortStartScheduler+0x124>)
 801b108:	f7ef fbc4 	bl	800a894 <assertFail>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b10c:	4b3e      	ldr	r3, [pc, #248]	; (801b208 <xPortStartScheduler+0x118>)
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	4a41      	ldr	r2, [pc, #260]	; (801b218 <xPortStartScheduler+0x128>)
 801b112:	4293      	cmp	r3, r2
 801b114:	d105      	bne.n	801b122 <xPortStartScheduler+0x32>
 801b116:	f240 1229 	movw	r2, #297	; 0x129
 801b11a:	493d      	ldr	r1, [pc, #244]	; (801b210 <xPortStartScheduler+0x120>)
 801b11c:	483f      	ldr	r0, [pc, #252]	; (801b21c <xPortStartScheduler+0x12c>)
 801b11e:	f7ef fbb9 	bl	800a894 <assertFail>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b122:	4b3f      	ldr	r3, [pc, #252]	; (801b220 <xPortStartScheduler+0x130>)
 801b124:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b126:	68fb      	ldr	r3, [r7, #12]
 801b128:	781b      	ldrb	r3, [r3, #0]
 801b12a:	b2db      	uxtb	r3, r3
 801b12c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	22ff      	movs	r2, #255	; 0xff
 801b132:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	781b      	ldrb	r3, [r3, #0]
 801b138:	b2db      	uxtb	r3, r3
 801b13a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b13c:	79fb      	ldrb	r3, [r7, #7]
 801b13e:	b2db      	uxtb	r3, r3
 801b140:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b144:	b2da      	uxtb	r2, r3
 801b146:	4b37      	ldr	r3, [pc, #220]	; (801b224 <xPortStartScheduler+0x134>)
 801b148:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b14a:	4b37      	ldr	r3, [pc, #220]	; (801b228 <xPortStartScheduler+0x138>)
 801b14c:	2207      	movs	r2, #7
 801b14e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b150:	e009      	b.n	801b166 <xPortStartScheduler+0x76>
		{
			ulMaxPRIGROUPValue--;
 801b152:	4b35      	ldr	r3, [pc, #212]	; (801b228 <xPortStartScheduler+0x138>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	3b01      	subs	r3, #1
 801b158:	4a33      	ldr	r2, [pc, #204]	; (801b228 <xPortStartScheduler+0x138>)
 801b15a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b15c:	79fb      	ldrb	r3, [r7, #7]
 801b15e:	b2db      	uxtb	r3, r3
 801b160:	005b      	lsls	r3, r3, #1
 801b162:	b2db      	uxtb	r3, r3
 801b164:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b166:	79fb      	ldrb	r3, [r7, #7]
 801b168:	b2db      	uxtb	r3, r3
 801b16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b16e:	2b80      	cmp	r3, #128	; 0x80
 801b170:	d0ef      	beq.n	801b152 <xPortStartScheduler+0x62>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 801b172:	4b2d      	ldr	r3, [pc, #180]	; (801b228 <xPortStartScheduler+0x138>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	f1c3 0307 	rsb	r3, r3, #7
 801b17a:	2b04      	cmp	r3, #4
 801b17c:	d005      	beq.n	801b18a <xPortStartScheduler+0x9a>
 801b17e:	f240 1251 	movw	r2, #337	; 0x151
 801b182:	4923      	ldr	r1, [pc, #140]	; (801b210 <xPortStartScheduler+0x120>)
 801b184:	4829      	ldr	r0, [pc, #164]	; (801b22c <xPortStartScheduler+0x13c>)
 801b186:	f7ef fb85 	bl	800a894 <assertFail>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b18a:	4b27      	ldr	r3, [pc, #156]	; (801b228 <xPortStartScheduler+0x138>)
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	f1c3 0307 	rsb	r3, r3, #7
 801b192:	2b04      	cmp	r3, #4
 801b194:	d005      	beq.n	801b1a2 <xPortStartScheduler+0xb2>
 801b196:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801b19a:	491d      	ldr	r1, [pc, #116]	; (801b210 <xPortStartScheduler+0x120>)
 801b19c:	4824      	ldr	r0, [pc, #144]	; (801b230 <xPortStartScheduler+0x140>)
 801b19e:	f7ef fb79 	bl	800a894 <assertFail>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b1a2:	4b21      	ldr	r3, [pc, #132]	; (801b228 <xPortStartScheduler+0x138>)
 801b1a4:	681b      	ldr	r3, [r3, #0]
 801b1a6:	021b      	lsls	r3, r3, #8
 801b1a8:	4a1f      	ldr	r2, [pc, #124]	; (801b228 <xPortStartScheduler+0x138>)
 801b1aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b1ac:	4b1e      	ldr	r3, [pc, #120]	; (801b228 <xPortStartScheduler+0x138>)
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b1b4:	4a1c      	ldr	r2, [pc, #112]	; (801b228 <xPortStartScheduler+0x138>)
 801b1b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b1b8:	68bb      	ldr	r3, [r7, #8]
 801b1ba:	b2da      	uxtb	r2, r3
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b1c0:	4b1c      	ldr	r3, [pc, #112]	; (801b234 <xPortStartScheduler+0x144>)
 801b1c2:	681b      	ldr	r3, [r3, #0]
 801b1c4:	4a1b      	ldr	r2, [pc, #108]	; (801b234 <xPortStartScheduler+0x144>)
 801b1c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b1ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b1cc:	4b19      	ldr	r3, [pc, #100]	; (801b234 <xPortStartScheduler+0x144>)
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	4a18      	ldr	r2, [pc, #96]	; (801b234 <xPortStartScheduler+0x144>)
 801b1d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b1d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b1d8:	f000 f8e0 	bl	801b39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b1dc:	4b16      	ldr	r3, [pc, #88]	; (801b238 <xPortStartScheduler+0x148>)
 801b1de:	2200      	movs	r2, #0
 801b1e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b1e2:	f000 f8f9 	bl	801b3d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b1e6:	4b15      	ldr	r3, [pc, #84]	; (801b23c <xPortStartScheduler+0x14c>)
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	4a14      	ldr	r2, [pc, #80]	; (801b23c <xPortStartScheduler+0x14c>)
 801b1ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b1f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b1f2:	f7ff ff69 	bl	801b0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b1f6:	f7fe fce9 	bl	8019bcc <vTaskSwitchContext>
	prvTaskExitError();
 801b1fa:	f7ff ff27 	bl	801b04c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b1fe:	2300      	movs	r3, #0
}
 801b200:	4618      	mov	r0, r3
 801b202:	3710      	adds	r7, #16
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}
 801b208:	e000ed00 	.word	0xe000ed00
 801b20c:	410fc271 	.word	0x410fc271
 801b210:	08024784 	.word	0x08024784
 801b214:	080247e8 	.word	0x080247e8
 801b218:	410fc270 	.word	0x410fc270
 801b21c:	0802480c 	.word	0x0802480c
 801b220:	e000e400 	.word	0xe000e400
 801b224:	2000a764 	.word	0x2000a764
 801b228:	2000a768 	.word	0x2000a768
 801b22c:	08024830 	.word	0x08024830
 801b230:	08024874 	.word	0x08024874
 801b234:	e000ed20 	.word	0xe000ed20
 801b238:	20000cdc 	.word	0x20000cdc
 801b23c:	e000ef34 	.word	0xe000ef34

0801b240 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b240:	b580      	push	{r7, lr}
 801b242:	b082      	sub	sp, #8
 801b244:	af00      	add	r7, sp, #0
	__asm volatile
 801b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b24a:	f383 8811 	msr	BASEPRI, r3
 801b24e:	f3bf 8f6f 	isb	sy
 801b252:	f3bf 8f4f 	dsb	sy
 801b256:	607b      	str	r3, [r7, #4]
}
 801b258:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b25a:	4b0c      	ldr	r3, [pc, #48]	; (801b28c <vPortEnterCritical+0x4c>)
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	3301      	adds	r3, #1
 801b260:	4a0a      	ldr	r2, [pc, #40]	; (801b28c <vPortEnterCritical+0x4c>)
 801b262:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b264:	4b09      	ldr	r3, [pc, #36]	; (801b28c <vPortEnterCritical+0x4c>)
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	2b01      	cmp	r3, #1
 801b26a:	d10a      	bne.n	801b282 <vPortEnterCritical+0x42>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b26c:	4b08      	ldr	r3, [pc, #32]	; (801b290 <vPortEnterCritical+0x50>)
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	b2db      	uxtb	r3, r3
 801b272:	2b00      	cmp	r3, #0
 801b274:	d005      	beq.n	801b282 <vPortEnterCritical+0x42>
 801b276:	f240 129f 	movw	r2, #415	; 0x19f
 801b27a:	4906      	ldr	r1, [pc, #24]	; (801b294 <vPortEnterCritical+0x54>)
 801b27c:	4806      	ldr	r0, [pc, #24]	; (801b298 <vPortEnterCritical+0x58>)
 801b27e:	f7ef fb09 	bl	800a894 <assertFail>
	}
}
 801b282:	bf00      	nop
 801b284:	3708      	adds	r7, #8
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}
 801b28a:	bf00      	nop
 801b28c:	20000cdc 	.word	0x20000cdc
 801b290:	e000ed04 	.word	0xe000ed04
 801b294:	08024784 	.word	0x08024784
 801b298:	080248d4 	.word	0x080248d4

0801b29c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b082      	sub	sp, #8
 801b2a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b2a2:	4b0e      	ldr	r3, [pc, #56]	; (801b2dc <vPortExitCritical+0x40>)
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d105      	bne.n	801b2b6 <vPortExitCritical+0x1a>
 801b2aa:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 801b2ae:	490c      	ldr	r1, [pc, #48]	; (801b2e0 <vPortExitCritical+0x44>)
 801b2b0:	480c      	ldr	r0, [pc, #48]	; (801b2e4 <vPortExitCritical+0x48>)
 801b2b2:	f7ef faef 	bl	800a894 <assertFail>
	uxCriticalNesting--;
 801b2b6:	4b09      	ldr	r3, [pc, #36]	; (801b2dc <vPortExitCritical+0x40>)
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	3b01      	subs	r3, #1
 801b2bc:	4a07      	ldr	r2, [pc, #28]	; (801b2dc <vPortExitCritical+0x40>)
 801b2be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b2c0:	4b06      	ldr	r3, [pc, #24]	; (801b2dc <vPortExitCritical+0x40>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d105      	bne.n	801b2d4 <vPortExitCritical+0x38>
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	607b      	str	r3, [r7, #4]
	__asm volatile
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	f383 8811 	msr	BASEPRI, r3
}
 801b2d2:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b2d4:	bf00      	nop
 801b2d6:	3708      	adds	r7, #8
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	bd80      	pop	{r7, pc}
 801b2dc:	20000cdc 	.word	0x20000cdc
 801b2e0:	08024784 	.word	0x08024784
 801b2e4:	0802490c 	.word	0x0802490c
	...

0801b2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b2f0:	f3ef 8009 	mrs	r0, PSP
 801b2f4:	f3bf 8f6f 	isb	sy
 801b2f8:	4b15      	ldr	r3, [pc, #84]	; (801b350 <pxCurrentTCBConst>)
 801b2fa:	681a      	ldr	r2, [r3, #0]
 801b2fc:	f01e 0f10 	tst.w	lr, #16
 801b300:	bf08      	it	eq
 801b302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b30a:	6010      	str	r0, [r2, #0]
 801b30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b310:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b314:	f380 8811 	msr	BASEPRI, r0
 801b318:	f3bf 8f4f 	dsb	sy
 801b31c:	f3bf 8f6f 	isb	sy
 801b320:	f7fe fc54 	bl	8019bcc <vTaskSwitchContext>
 801b324:	f04f 0000 	mov.w	r0, #0
 801b328:	f380 8811 	msr	BASEPRI, r0
 801b32c:	bc09      	pop	{r0, r3}
 801b32e:	6819      	ldr	r1, [r3, #0]
 801b330:	6808      	ldr	r0, [r1, #0]
 801b332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b336:	f01e 0f10 	tst.w	lr, #16
 801b33a:	bf08      	it	eq
 801b33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b340:	f380 8809 	msr	PSP, r0
 801b344:	f3bf 8f6f 	isb	sy
 801b348:	4770      	bx	lr
 801b34a:	bf00      	nop
 801b34c:	f3af 8000 	nop.w

0801b350 <pxCurrentTCBConst>:
 801b350:	2000a35c 	.word	0x2000a35c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b354:	bf00      	nop
 801b356:	bf00      	nop

0801b358 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b358:	b580      	push	{r7, lr}
 801b35a:	b082      	sub	sp, #8
 801b35c:	af00      	add	r7, sp, #0
	__asm volatile
 801b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b362:	f383 8811 	msr	BASEPRI, r3
 801b366:	f3bf 8f6f 	isb	sy
 801b36a:	f3bf 8f4f 	dsb	sy
 801b36e:	607b      	str	r3, [r7, #4]
}
 801b370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b372:	f7fe fb51 	bl	8019a18 <xTaskIncrementTick>
 801b376:	4603      	mov	r3, r0
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d003      	beq.n	801b384 <tickFreeRTOS+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b37c:	4b06      	ldr	r3, [pc, #24]	; (801b398 <tickFreeRTOS+0x40>)
 801b37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b382:	601a      	str	r2, [r3, #0]
 801b384:	2300      	movs	r3, #0
 801b386:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b388:	683b      	ldr	r3, [r7, #0]
 801b38a:	f383 8811 	msr	BASEPRI, r3
}
 801b38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b390:	bf00      	nop
 801b392:	3708      	adds	r7, #8
 801b394:	46bd      	mov	sp, r7
 801b396:	bd80      	pop	{r7, pc}
 801b398:	e000ed04 	.word	0xe000ed04

0801b39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b39c:	b480      	push	{r7}
 801b39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b3a0:	4b09      	ldr	r3, [pc, #36]	; (801b3c8 <vPortSetupTimerInterrupt+0x2c>)
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b3a6:	4b09      	ldr	r3, [pc, #36]	; (801b3cc <vPortSetupTimerInterrupt+0x30>)
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b3ac:	4b08      	ldr	r3, [pc, #32]	; (801b3d0 <vPortSetupTimerInterrupt+0x34>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	4a08      	ldr	r2, [pc, #32]	; (801b3d4 <vPortSetupTimerInterrupt+0x38>)
 801b3b2:	3b01      	subs	r3, #1
 801b3b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b3b6:	4b04      	ldr	r3, [pc, #16]	; (801b3c8 <vPortSetupTimerInterrupt+0x2c>)
 801b3b8:	2207      	movs	r2, #7
 801b3ba:	601a      	str	r2, [r3, #0]
}
 801b3bc:	bf00      	nop
 801b3be:	46bd      	mov	sp, r7
 801b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3c4:	4770      	bx	lr
 801b3c6:	bf00      	nop
 801b3c8:	e000e010 	.word	0xe000e010
 801b3cc:	e000e018 	.word	0xe000e018
 801b3d0:	20000c44 	.word	0x20000c44
 801b3d4:	e000e014 	.word	0xe000e014

0801b3d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b3d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b3e8 <vPortEnableVFP+0x10>
 801b3dc:	6801      	ldr	r1, [r0, #0]
 801b3de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b3e2:	6001      	str	r1, [r0, #0]
 801b3e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b3e6:	bf00      	nop
 801b3e8:	e000ed88 	.word	0xe000ed88

0801b3ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b082      	sub	sp, #8
 801b3f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b3f2:	f3ef 8305 	mrs	r3, IPSR
 801b3f6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	2b0f      	cmp	r3, #15
 801b3fc:	d90f      	bls.n	801b41e <vPortValidateInterruptPriority+0x32>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b3fe:	4a11      	ldr	r2, [pc, #68]	; (801b444 <vPortValidateInterruptPriority+0x58>)
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	4413      	add	r3, r2
 801b404:	781b      	ldrb	r3, [r3, #0]
 801b406:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b408:	4b0f      	ldr	r3, [pc, #60]	; (801b448 <vPortValidateInterruptPriority+0x5c>)
 801b40a:	781b      	ldrb	r3, [r3, #0]
 801b40c:	78fa      	ldrb	r2, [r7, #3]
 801b40e:	429a      	cmp	r2, r3
 801b410:	d205      	bcs.n	801b41e <vPortValidateInterruptPriority+0x32>
 801b412:	f240 22f2 	movw	r2, #754	; 0x2f2
 801b416:	490d      	ldr	r1, [pc, #52]	; (801b44c <vPortValidateInterruptPriority+0x60>)
 801b418:	480d      	ldr	r0, [pc, #52]	; (801b450 <vPortValidateInterruptPriority+0x64>)
 801b41a:	f7ef fa3b 	bl	800a894 <assertFail>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b41e:	4b0d      	ldr	r3, [pc, #52]	; (801b454 <vPortValidateInterruptPriority+0x68>)
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b426:	4b0c      	ldr	r3, [pc, #48]	; (801b458 <vPortValidateInterruptPriority+0x6c>)
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	429a      	cmp	r2, r3
 801b42c:	d905      	bls.n	801b43a <vPortValidateInterruptPriority+0x4e>
 801b42e:	f240 3202 	movw	r2, #770	; 0x302
 801b432:	4906      	ldr	r1, [pc, #24]	; (801b44c <vPortValidateInterruptPriority+0x60>)
 801b434:	4809      	ldr	r0, [pc, #36]	; (801b45c <vPortValidateInterruptPriority+0x70>)
 801b436:	f7ef fa2d 	bl	800a894 <assertFail>
	}
 801b43a:	bf00      	nop
 801b43c:	3708      	adds	r7, #8
 801b43e:	46bd      	mov	sp, r7
 801b440:	bd80      	pop	{r7, pc}
 801b442:	bf00      	nop
 801b444:	e000e3f0 	.word	0xe000e3f0
 801b448:	2000a764 	.word	0x2000a764
 801b44c:	08024784 	.word	0x08024784
 801b450:	08024920 	.word	0x08024920
 801b454:	e000ed0c 	.word	0xe000ed0c
 801b458:	2000a768 	.word	0x2000a768
 801b45c:	0802494c 	.word	0x0802494c

0801b460 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b086      	sub	sp, #24
 801b464:	af00      	add	r7, sp, #0
 801b466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b468:	2300      	movs	r3, #0
 801b46a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 801b46c:	f7fe f98a 	bl	8019784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b470:	4b52      	ldr	r3, [pc, #328]	; (801b5bc <pvPortMalloc+0x15c>)
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	2b00      	cmp	r3, #0
 801b476:	d101      	bne.n	801b47c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b478:	f000 f912 	bl	801b6a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b47c:	4b50      	ldr	r3, [pc, #320]	; (801b5c0 <pvPortMalloc+0x160>)
 801b47e:	681a      	ldr	r2, [r3, #0]
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	4013      	ands	r3, r2
 801b484:	2b00      	cmp	r3, #0
 801b486:	f040 8087 	bne.w	801b598 <pvPortMalloc+0x138>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d017      	beq.n	801b4c0 <pvPortMalloc+0x60>
			{
				xWantedSize += xHeapStructSize;
 801b490:	2208      	movs	r2, #8
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	4413      	add	r3, r2
 801b496:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	f003 0307 	and.w	r3, r3, #7
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d00e      	beq.n	801b4c0 <pvPortMalloc+0x60>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	f023 0307 	bic.w	r3, r3, #7
 801b4a8:	3308      	adds	r3, #8
 801b4aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	f003 0307 	and.w	r3, r3, #7
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d004      	beq.n	801b4c0 <pvPortMalloc+0x60>
 801b4b6:	2297      	movs	r2, #151	; 0x97
 801b4b8:	4942      	ldr	r1, [pc, #264]	; (801b5c4 <pvPortMalloc+0x164>)
 801b4ba:	4843      	ldr	r0, [pc, #268]	; (801b5c8 <pvPortMalloc+0x168>)
 801b4bc:	f7ef f9ea 	bl	800a894 <assertFail>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d068      	beq.n	801b598 <pvPortMalloc+0x138>
 801b4c6:	4b41      	ldr	r3, [pc, #260]	; (801b5cc <pvPortMalloc+0x16c>)
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	687a      	ldr	r2, [r7, #4]
 801b4cc:	429a      	cmp	r2, r3
 801b4ce:	d863      	bhi.n	801b598 <pvPortMalloc+0x138>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b4d0:	4b3f      	ldr	r3, [pc, #252]	; (801b5d0 <pvPortMalloc+0x170>)
 801b4d2:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 801b4d4:	4b3e      	ldr	r3, [pc, #248]	; (801b5d0 <pvPortMalloc+0x170>)
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b4da:	e004      	b.n	801b4e6 <pvPortMalloc+0x86>
				{
					pxPreviousBlock = pxBlock;
 801b4dc:	697b      	ldr	r3, [r7, #20]
 801b4de:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b4e0:	697b      	ldr	r3, [r7, #20]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b4e6:	697b      	ldr	r3, [r7, #20]
 801b4e8:	685b      	ldr	r3, [r3, #4]
 801b4ea:	687a      	ldr	r2, [r7, #4]
 801b4ec:	429a      	cmp	r2, r3
 801b4ee:	d903      	bls.n	801b4f8 <pvPortMalloc+0x98>
 801b4f0:	697b      	ldr	r3, [r7, #20]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d1f1      	bne.n	801b4dc <pvPortMalloc+0x7c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b4f8:	4b30      	ldr	r3, [pc, #192]	; (801b5bc <pvPortMalloc+0x15c>)
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	697a      	ldr	r2, [r7, #20]
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d04a      	beq.n	801b598 <pvPortMalloc+0x138>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b502:	693b      	ldr	r3, [r7, #16]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	2208      	movs	r2, #8
 801b508:	4413      	add	r3, r2
 801b50a:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b50c:	697b      	ldr	r3, [r7, #20]
 801b50e:	681a      	ldr	r2, [r3, #0]
 801b510:	693b      	ldr	r3, [r7, #16]
 801b512:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b514:	697b      	ldr	r3, [r7, #20]
 801b516:	685a      	ldr	r2, [r3, #4]
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	1ad2      	subs	r2, r2, r3
 801b51c:	2308      	movs	r3, #8
 801b51e:	005b      	lsls	r3, r3, #1
 801b520:	429a      	cmp	r2, r3
 801b522:	d919      	bls.n	801b558 <pvPortMalloc+0xf8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b524:	697a      	ldr	r2, [r7, #20]
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	4413      	add	r3, r2
 801b52a:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	f003 0307 	and.w	r3, r3, #7
 801b532:	2b00      	cmp	r3, #0
 801b534:	d004      	beq.n	801b540 <pvPortMalloc+0xe0>
 801b536:	22c4      	movs	r2, #196	; 0xc4
 801b538:	4922      	ldr	r1, [pc, #136]	; (801b5c4 <pvPortMalloc+0x164>)
 801b53a:	4826      	ldr	r0, [pc, #152]	; (801b5d4 <pvPortMalloc+0x174>)
 801b53c:	f7ef f9aa 	bl	800a894 <assertFail>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b540:	697b      	ldr	r3, [r7, #20]
 801b542:	685a      	ldr	r2, [r3, #4]
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	1ad2      	subs	r2, r2, r3
 801b548:	68bb      	ldr	r3, [r7, #8]
 801b54a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b54c:	697b      	ldr	r3, [r7, #20]
 801b54e:	687a      	ldr	r2, [r7, #4]
 801b550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b552:	68b8      	ldr	r0, [r7, #8]
 801b554:	f000 f906 	bl	801b764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b558:	4b1c      	ldr	r3, [pc, #112]	; (801b5cc <pvPortMalloc+0x16c>)
 801b55a:	681a      	ldr	r2, [r3, #0]
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	685b      	ldr	r3, [r3, #4]
 801b560:	1ad3      	subs	r3, r2, r3
 801b562:	4a1a      	ldr	r2, [pc, #104]	; (801b5cc <pvPortMalloc+0x16c>)
 801b564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b566:	4b19      	ldr	r3, [pc, #100]	; (801b5cc <pvPortMalloc+0x16c>)
 801b568:	681a      	ldr	r2, [r3, #0]
 801b56a:	4b1b      	ldr	r3, [pc, #108]	; (801b5d8 <pvPortMalloc+0x178>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	429a      	cmp	r2, r3
 801b570:	d203      	bcs.n	801b57a <pvPortMalloc+0x11a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b572:	4b16      	ldr	r3, [pc, #88]	; (801b5cc <pvPortMalloc+0x16c>)
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	4a18      	ldr	r2, [pc, #96]	; (801b5d8 <pvPortMalloc+0x178>)
 801b578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b57a:	697b      	ldr	r3, [r7, #20]
 801b57c:	685a      	ldr	r2, [r3, #4]
 801b57e:	4b10      	ldr	r3, [pc, #64]	; (801b5c0 <pvPortMalloc+0x160>)
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	431a      	orrs	r2, r3
 801b584:	697b      	ldr	r3, [r7, #20]
 801b586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b588:	697b      	ldr	r3, [r7, #20]
 801b58a:	2200      	movs	r2, #0
 801b58c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b58e:	4b13      	ldr	r3, [pc, #76]	; (801b5dc <pvPortMalloc+0x17c>)
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	3301      	adds	r3, #1
 801b594:	4a11      	ldr	r2, [pc, #68]	; (801b5dc <pvPortMalloc+0x17c>)
 801b596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b598:	f7fe f902 	bl	80197a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	f003 0307 	and.w	r3, r3, #7
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d005      	beq.n	801b5b2 <pvPortMalloc+0x152>
 801b5a6:	f240 1205 	movw	r2, #261	; 0x105
 801b5aa:	4906      	ldr	r1, [pc, #24]	; (801b5c4 <pvPortMalloc+0x164>)
 801b5ac:	480c      	ldr	r0, [pc, #48]	; (801b5e0 <pvPortMalloc+0x180>)
 801b5ae:	f7ef f971 	bl	800a894 <assertFail>
	return pvReturn;
 801b5b2:	68fb      	ldr	r3, [r7, #12]
}
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	3718      	adds	r7, #24
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	bd80      	pop	{r7, pc}
 801b5bc:	2000e374 	.word	0x2000e374
 801b5c0:	2000e388 	.word	0x2000e388
 801b5c4:	08024990 	.word	0x08024990
 801b5c8:	080249d8 	.word	0x080249d8
 801b5cc:	2000e378 	.word	0x2000e378
 801b5d0:	2000e36c 	.word	0x2000e36c
 801b5d4:	08024a08 	.word	0x08024a08
 801b5d8:	2000e37c 	.word	0x2000e37c
 801b5dc:	2000e380 	.word	0x2000e380
 801b5e0:	08024a4c 	.word	0x08024a4c

0801b5e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b084      	sub	sp, #16
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d043      	beq.n	801b67e <vPortFree+0x9a>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b5f6:	2308      	movs	r3, #8
 801b5f8:	425b      	negs	r3, r3
 801b5fa:	68fa      	ldr	r2, [r7, #12]
 801b5fc:	4413      	add	r3, r2
 801b5fe:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b604:	68bb      	ldr	r3, [r7, #8]
 801b606:	685a      	ldr	r2, [r3, #4]
 801b608:	4b1f      	ldr	r3, [pc, #124]	; (801b688 <vPortFree+0xa4>)
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	4013      	ands	r3, r2
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d105      	bne.n	801b61e <vPortFree+0x3a>
 801b612:	f240 1219 	movw	r2, #281	; 0x119
 801b616:	491d      	ldr	r1, [pc, #116]	; (801b68c <vPortFree+0xa8>)
 801b618:	481d      	ldr	r0, [pc, #116]	; (801b690 <vPortFree+0xac>)
 801b61a:	f7ef f93b 	bl	800a894 <assertFail>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d005      	beq.n	801b632 <vPortFree+0x4e>
 801b626:	f44f 728d 	mov.w	r2, #282	; 0x11a
 801b62a:	4918      	ldr	r1, [pc, #96]	; (801b68c <vPortFree+0xa8>)
 801b62c:	4819      	ldr	r0, [pc, #100]	; (801b694 <vPortFree+0xb0>)
 801b62e:	f7ef f931 	bl	800a894 <assertFail>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	685a      	ldr	r2, [r3, #4]
 801b636:	4b14      	ldr	r3, [pc, #80]	; (801b688 <vPortFree+0xa4>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	4013      	ands	r3, r2
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d01e      	beq.n	801b67e <vPortFree+0x9a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d11a      	bne.n	801b67e <vPortFree+0x9a>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b648:	68bb      	ldr	r3, [r7, #8]
 801b64a:	685a      	ldr	r2, [r3, #4]
 801b64c:	4b0e      	ldr	r3, [pc, #56]	; (801b688 <vPortFree+0xa4>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	43db      	mvns	r3, r3
 801b652:	401a      	ands	r2, r3
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b658:	f7fe f894 	bl	8019784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b65c:	68bb      	ldr	r3, [r7, #8]
 801b65e:	685a      	ldr	r2, [r3, #4]
 801b660:	4b0d      	ldr	r3, [pc, #52]	; (801b698 <vPortFree+0xb4>)
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	4413      	add	r3, r2
 801b666:	4a0c      	ldr	r2, [pc, #48]	; (801b698 <vPortFree+0xb4>)
 801b668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b66a:	68b8      	ldr	r0, [r7, #8]
 801b66c:	f000 f87a 	bl	801b764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b670:	4b0a      	ldr	r3, [pc, #40]	; (801b69c <vPortFree+0xb8>)
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	3301      	adds	r3, #1
 801b676:	4a09      	ldr	r2, [pc, #36]	; (801b69c <vPortFree+0xb8>)
 801b678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b67a:	f7fe f891 	bl	80197a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b67e:	bf00      	nop
 801b680:	3710      	adds	r7, #16
 801b682:	46bd      	mov	sp, r7
 801b684:	bd80      	pop	{r7, pc}
 801b686:	bf00      	nop
 801b688:	2000e388 	.word	0x2000e388
 801b68c:	08024990 	.word	0x08024990
 801b690:	08024a94 	.word	0x08024a94
 801b694:	08024ac8 	.word	0x08024ac8
 801b698:	2000e378 	.word	0x2000e378
 801b69c:	2000e384 	.word	0x2000e384

0801b6a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b6a0:	b480      	push	{r7}
 801b6a2:	b085      	sub	sp, #20
 801b6a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b6a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801b6aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b6ac:	4b27      	ldr	r3, [pc, #156]	; (801b74c <prvHeapInit+0xac>)
 801b6ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b6b0:	68fb      	ldr	r3, [r7, #12]
 801b6b2:	f003 0307 	and.w	r3, r3, #7
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	d00c      	beq.n	801b6d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b6ba:	68fb      	ldr	r3, [r7, #12]
 801b6bc:	3307      	adds	r3, #7
 801b6be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	f023 0307 	bic.w	r3, r3, #7
 801b6c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b6c8:	68ba      	ldr	r2, [r7, #8]
 801b6ca:	68fb      	ldr	r3, [r7, #12]
 801b6cc:	1ad3      	subs	r3, r2, r3
 801b6ce:	4a1f      	ldr	r2, [pc, #124]	; (801b74c <prvHeapInit+0xac>)
 801b6d0:	4413      	add	r3, r2
 801b6d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b6d8:	4a1d      	ldr	r2, [pc, #116]	; (801b750 <prvHeapInit+0xb0>)
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b6de:	4b1c      	ldr	r3, [pc, #112]	; (801b750 <prvHeapInit+0xb0>)
 801b6e0:	2200      	movs	r2, #0
 801b6e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	68ba      	ldr	r2, [r7, #8]
 801b6e8:	4413      	add	r3, r2
 801b6ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b6ec:	2208      	movs	r2, #8
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	1a9b      	subs	r3, r3, r2
 801b6f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b6f4:	68fb      	ldr	r3, [r7, #12]
 801b6f6:	f023 0307 	bic.w	r3, r3, #7
 801b6fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	4a15      	ldr	r2, [pc, #84]	; (801b754 <prvHeapInit+0xb4>)
 801b700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b702:	4b14      	ldr	r3, [pc, #80]	; (801b754 <prvHeapInit+0xb4>)
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	2200      	movs	r2, #0
 801b708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b70a:	4b12      	ldr	r3, [pc, #72]	; (801b754 <prvHeapInit+0xb4>)
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	2200      	movs	r2, #0
 801b710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b716:	683b      	ldr	r3, [r7, #0]
 801b718:	68fa      	ldr	r2, [r7, #12]
 801b71a:	1ad2      	subs	r2, r2, r3
 801b71c:	683b      	ldr	r3, [r7, #0]
 801b71e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b720:	4b0c      	ldr	r3, [pc, #48]	; (801b754 <prvHeapInit+0xb4>)
 801b722:	681a      	ldr	r2, [r3, #0]
 801b724:	683b      	ldr	r3, [r7, #0]
 801b726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b728:	683b      	ldr	r3, [r7, #0]
 801b72a:	685b      	ldr	r3, [r3, #4]
 801b72c:	4a0a      	ldr	r2, [pc, #40]	; (801b758 <prvHeapInit+0xb8>)
 801b72e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b730:	683b      	ldr	r3, [r7, #0]
 801b732:	685b      	ldr	r3, [r3, #4]
 801b734:	4a09      	ldr	r2, [pc, #36]	; (801b75c <prvHeapInit+0xbc>)
 801b736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b738:	4b09      	ldr	r3, [pc, #36]	; (801b760 <prvHeapInit+0xc0>)
 801b73a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b73e:	601a      	str	r2, [r3, #0]
}
 801b740:	bf00      	nop
 801b742:	3714      	adds	r7, #20
 801b744:	46bd      	mov	sp, r7
 801b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b74a:	4770      	bx	lr
 801b74c:	2000a76c 	.word	0x2000a76c
 801b750:	2000e36c 	.word	0x2000e36c
 801b754:	2000e374 	.word	0x2000e374
 801b758:	2000e37c 	.word	0x2000e37c
 801b75c:	2000e378 	.word	0x2000e378
 801b760:	2000e388 	.word	0x2000e388

0801b764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b764:	b480      	push	{r7}
 801b766:	b085      	sub	sp, #20
 801b768:	af00      	add	r7, sp, #0
 801b76a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b76c:	4b28      	ldr	r3, [pc, #160]	; (801b810 <prvInsertBlockIntoFreeList+0xac>)
 801b76e:	60fb      	str	r3, [r7, #12]
 801b770:	e002      	b.n	801b778 <prvInsertBlockIntoFreeList+0x14>
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	60fb      	str	r3, [r7, #12]
 801b778:	68fb      	ldr	r3, [r7, #12]
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	687a      	ldr	r2, [r7, #4]
 801b77e:	429a      	cmp	r2, r3
 801b780:	d8f7      	bhi.n	801b772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b782:	68fb      	ldr	r3, [r7, #12]
 801b784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	685b      	ldr	r3, [r3, #4]
 801b78a:	68ba      	ldr	r2, [r7, #8]
 801b78c:	4413      	add	r3, r2
 801b78e:	687a      	ldr	r2, [r7, #4]
 801b790:	429a      	cmp	r2, r3
 801b792:	d108      	bne.n	801b7a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	685a      	ldr	r2, [r3, #4]
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	685b      	ldr	r3, [r3, #4]
 801b79c:	441a      	add	r2, r3
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	685b      	ldr	r3, [r3, #4]
 801b7ae:	68ba      	ldr	r2, [r7, #8]
 801b7b0:	441a      	add	r2, r3
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d118      	bne.n	801b7ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b7ba:	68fb      	ldr	r3, [r7, #12]
 801b7bc:	681a      	ldr	r2, [r3, #0]
 801b7be:	4b15      	ldr	r3, [pc, #84]	; (801b814 <prvInsertBlockIntoFreeList+0xb0>)
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	429a      	cmp	r2, r3
 801b7c4:	d00d      	beq.n	801b7e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	685a      	ldr	r2, [r3, #4]
 801b7ca:	68fb      	ldr	r3, [r7, #12]
 801b7cc:	681b      	ldr	r3, [r3, #0]
 801b7ce:	685b      	ldr	r3, [r3, #4]
 801b7d0:	441a      	add	r2, r3
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b7d6:	68fb      	ldr	r3, [r7, #12]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	681a      	ldr	r2, [r3, #0]
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	601a      	str	r2, [r3, #0]
 801b7e0:	e008      	b.n	801b7f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b7e2:	4b0c      	ldr	r3, [pc, #48]	; (801b814 <prvInsertBlockIntoFreeList+0xb0>)
 801b7e4:	681a      	ldr	r2, [r3, #0]
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	601a      	str	r2, [r3, #0]
 801b7ea:	e003      	b.n	801b7f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b7ec:	68fb      	ldr	r3, [r7, #12]
 801b7ee:	681a      	ldr	r2, [r3, #0]
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b7f4:	68fa      	ldr	r2, [r7, #12]
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	429a      	cmp	r2, r3
 801b7fa:	d002      	beq.n	801b802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	687a      	ldr	r2, [r7, #4]
 801b800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b802:	bf00      	nop
 801b804:	3714      	adds	r7, #20
 801b806:	46bd      	mov	sp, r7
 801b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b80c:	4770      	bx	lr
 801b80e:	bf00      	nop
 801b810:	2000e36c 	.word	0x2000e36c
 801b814:	2000e374 	.word	0x2000e374

0801b818 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b818:	b580      	push	{r7, lr}
 801b81a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b81c:	2200      	movs	r2, #0
 801b81e:	4912      	ldr	r1, [pc, #72]	; (801b868 <MX_USB_DEVICE_Init+0x50>)
 801b820:	4812      	ldr	r0, [pc, #72]	; (801b86c <MX_USB_DEVICE_Init+0x54>)
 801b822:	f7fb f939 	bl	8016a98 <USBD_Init>
 801b826:	4603      	mov	r3, r0
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d001      	beq.n	801b830 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b82c:	f7f2 ff6e 	bl	800e70c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b830:	490f      	ldr	r1, [pc, #60]	; (801b870 <MX_USB_DEVICE_Init+0x58>)
 801b832:	480e      	ldr	r0, [pc, #56]	; (801b86c <MX_USB_DEVICE_Init+0x54>)
 801b834:	f7fb f960 	bl	8016af8 <USBD_RegisterClass>
 801b838:	4603      	mov	r3, r0
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d001      	beq.n	801b842 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801b83e:	f7f2 ff65 	bl	800e70c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b842:	490c      	ldr	r1, [pc, #48]	; (801b874 <MX_USB_DEVICE_Init+0x5c>)
 801b844:	4809      	ldr	r0, [pc, #36]	; (801b86c <MX_USB_DEVICE_Init+0x54>)
 801b846:	f7fb f897 	bl	8016978 <USBD_CDC_RegisterInterface>
 801b84a:	4603      	mov	r3, r0
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d001      	beq.n	801b854 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801b850:	f7f2 ff5c 	bl	800e70c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b854:	4805      	ldr	r0, [pc, #20]	; (801b86c <MX_USB_DEVICE_Init+0x54>)
 801b856:	f7fb f985 	bl	8016b64 <USBD_Start>
 801b85a:	4603      	mov	r3, r0
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d001      	beq.n	801b864 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801b860:	f7f2 ff54 	bl	800e70c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b864:	bf00      	nop
 801b866:	bd80      	pop	{r7, pc}
 801b868:	20000cf4 	.word	0x20000cf4
 801b86c:	2000e38c 	.word	0x2000e38c
 801b870:	20000c5c 	.word	0x20000c5c
 801b874:	20000ce0 	.word	0x20000ce0

0801b878 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b878:	b580      	push	{r7, lr}
 801b87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b87c:	2200      	movs	r2, #0
 801b87e:	4905      	ldr	r1, [pc, #20]	; (801b894 <CDC_Init_FS+0x1c>)
 801b880:	4805      	ldr	r0, [pc, #20]	; (801b898 <CDC_Init_FS+0x20>)
 801b882:	f7fb f893 	bl	80169ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b886:	4905      	ldr	r1, [pc, #20]	; (801b89c <CDC_Init_FS+0x24>)
 801b888:	4803      	ldr	r0, [pc, #12]	; (801b898 <CDC_Init_FS+0x20>)
 801b88a:	f7fb f8b1 	bl	80169f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b88e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b890:	4618      	mov	r0, r3
 801b892:	bd80      	pop	{r7, pc}
 801b894:	2000ee68 	.word	0x2000ee68
 801b898:	2000e38c 	.word	0x2000e38c
 801b89c:	2000e668 	.word	0x2000e668

0801b8a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b8a0:	b480      	push	{r7}
 801b8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b8a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ae:	4770      	bx	lr

0801b8b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b8b0:	b480      	push	{r7}
 801b8b2:	b083      	sub	sp, #12
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	4603      	mov	r3, r0
 801b8b8:	6039      	str	r1, [r7, #0]
 801b8ba:	71fb      	strb	r3, [r7, #7]
 801b8bc:	4613      	mov	r3, r2
 801b8be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b8c0:	79fb      	ldrb	r3, [r7, #7]
 801b8c2:	2b23      	cmp	r3, #35	; 0x23
 801b8c4:	d84a      	bhi.n	801b95c <CDC_Control_FS+0xac>
 801b8c6:	a201      	add	r2, pc, #4	; (adr r2, 801b8cc <CDC_Control_FS+0x1c>)
 801b8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8cc:	0801b95d 	.word	0x0801b95d
 801b8d0:	0801b95d 	.word	0x0801b95d
 801b8d4:	0801b95d 	.word	0x0801b95d
 801b8d8:	0801b95d 	.word	0x0801b95d
 801b8dc:	0801b95d 	.word	0x0801b95d
 801b8e0:	0801b95d 	.word	0x0801b95d
 801b8e4:	0801b95d 	.word	0x0801b95d
 801b8e8:	0801b95d 	.word	0x0801b95d
 801b8ec:	0801b95d 	.word	0x0801b95d
 801b8f0:	0801b95d 	.word	0x0801b95d
 801b8f4:	0801b95d 	.word	0x0801b95d
 801b8f8:	0801b95d 	.word	0x0801b95d
 801b8fc:	0801b95d 	.word	0x0801b95d
 801b900:	0801b95d 	.word	0x0801b95d
 801b904:	0801b95d 	.word	0x0801b95d
 801b908:	0801b95d 	.word	0x0801b95d
 801b90c:	0801b95d 	.word	0x0801b95d
 801b910:	0801b95d 	.word	0x0801b95d
 801b914:	0801b95d 	.word	0x0801b95d
 801b918:	0801b95d 	.word	0x0801b95d
 801b91c:	0801b95d 	.word	0x0801b95d
 801b920:	0801b95d 	.word	0x0801b95d
 801b924:	0801b95d 	.word	0x0801b95d
 801b928:	0801b95d 	.word	0x0801b95d
 801b92c:	0801b95d 	.word	0x0801b95d
 801b930:	0801b95d 	.word	0x0801b95d
 801b934:	0801b95d 	.word	0x0801b95d
 801b938:	0801b95d 	.word	0x0801b95d
 801b93c:	0801b95d 	.word	0x0801b95d
 801b940:	0801b95d 	.word	0x0801b95d
 801b944:	0801b95d 	.word	0x0801b95d
 801b948:	0801b95d 	.word	0x0801b95d
 801b94c:	0801b95d 	.word	0x0801b95d
 801b950:	0801b95d 	.word	0x0801b95d
 801b954:	0801b95d 	.word	0x0801b95d
 801b958:	0801b95d 	.word	0x0801b95d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b95c:	bf00      	nop
  }

  return (USBD_OK);
 801b95e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b960:	4618      	mov	r0, r3
 801b962:	370c      	adds	r7, #12
 801b964:	46bd      	mov	sp, r7
 801b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b96a:	4770      	bx	lr

0801b96c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b082      	sub	sp, #8
 801b970:	af00      	add	r7, sp, #0
 801b972:	6078      	str	r0, [r7, #4]
 801b974:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b976:	6879      	ldr	r1, [r7, #4]
 801b978:	4805      	ldr	r0, [pc, #20]	; (801b990 <CDC_Receive_FS+0x24>)
 801b97a:	f7fb f839 	bl	80169f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b97e:	4804      	ldr	r0, [pc, #16]	; (801b990 <CDC_Receive_FS+0x24>)
 801b980:	f7fb f854 	bl	8016a2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801b984:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801b986:	4618      	mov	r0, r3
 801b988:	3708      	adds	r7, #8
 801b98a:	46bd      	mov	sp, r7
 801b98c:	bd80      	pop	{r7, pc}
 801b98e:	bf00      	nop
 801b990:	2000e38c 	.word	0x2000e38c

0801b994 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801b994:	b480      	push	{r7}
 801b996:	b087      	sub	sp, #28
 801b998:	af00      	add	r7, sp, #0
 801b99a:	60f8      	str	r0, [r7, #12]
 801b99c:	60b9      	str	r1, [r7, #8]
 801b99e:	4613      	mov	r3, r2
 801b9a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801b9a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b9aa:	4618      	mov	r0, r3
 801b9ac:	371c      	adds	r7, #28
 801b9ae:	46bd      	mov	sp, r7
 801b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b4:	4770      	bx	lr
	...

0801b9b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b9b8:	b480      	push	{r7}
 801b9ba:	b083      	sub	sp, #12
 801b9bc:	af00      	add	r7, sp, #0
 801b9be:	4603      	mov	r3, r0
 801b9c0:	6039      	str	r1, [r7, #0]
 801b9c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b9c4:	683b      	ldr	r3, [r7, #0]
 801b9c6:	2212      	movs	r2, #18
 801b9c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b9ca:	4b03      	ldr	r3, [pc, #12]	; (801b9d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	370c      	adds	r7, #12
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9d6:	4770      	bx	lr
 801b9d8:	20000d10 	.word	0x20000d10

0801b9dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b9dc:	b480      	push	{r7}
 801b9de:	b083      	sub	sp, #12
 801b9e0:	af00      	add	r7, sp, #0
 801b9e2:	4603      	mov	r3, r0
 801b9e4:	6039      	str	r1, [r7, #0]
 801b9e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b9e8:	683b      	ldr	r3, [r7, #0]
 801b9ea:	2204      	movs	r2, #4
 801b9ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b9ee:	4b03      	ldr	r3, [pc, #12]	; (801b9fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	370c      	adds	r7, #12
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9fa:	4770      	bx	lr
 801b9fc:	20000d24 	.word	0x20000d24

0801ba00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba00:	b580      	push	{r7, lr}
 801ba02:	b082      	sub	sp, #8
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	4603      	mov	r3, r0
 801ba08:	6039      	str	r1, [r7, #0]
 801ba0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ba0c:	79fb      	ldrb	r3, [r7, #7]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d105      	bne.n	801ba1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ba12:	683a      	ldr	r2, [r7, #0]
 801ba14:	4907      	ldr	r1, [pc, #28]	; (801ba34 <USBD_FS_ProductStrDescriptor+0x34>)
 801ba16:	4808      	ldr	r0, [pc, #32]	; (801ba38 <USBD_FS_ProductStrDescriptor+0x38>)
 801ba18:	f7fc fa56 	bl	8017ec8 <USBD_GetString>
 801ba1c:	e004      	b.n	801ba28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ba1e:	683a      	ldr	r2, [r7, #0]
 801ba20:	4904      	ldr	r1, [pc, #16]	; (801ba34 <USBD_FS_ProductStrDescriptor+0x34>)
 801ba22:	4805      	ldr	r0, [pc, #20]	; (801ba38 <USBD_FS_ProductStrDescriptor+0x38>)
 801ba24:	f7fc fa50 	bl	8017ec8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ba28:	4b02      	ldr	r3, [pc, #8]	; (801ba34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	3708      	adds	r7, #8
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	bd80      	pop	{r7, pc}
 801ba32:	bf00      	nop
 801ba34:	2000f668 	.word	0x2000f668
 801ba38:	08024ae8 	.word	0x08024ae8

0801ba3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba3c:	b580      	push	{r7, lr}
 801ba3e:	b082      	sub	sp, #8
 801ba40:	af00      	add	r7, sp, #0
 801ba42:	4603      	mov	r3, r0
 801ba44:	6039      	str	r1, [r7, #0]
 801ba46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ba48:	683a      	ldr	r2, [r7, #0]
 801ba4a:	4904      	ldr	r1, [pc, #16]	; (801ba5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801ba4c:	4804      	ldr	r0, [pc, #16]	; (801ba60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ba4e:	f7fc fa3b 	bl	8017ec8 <USBD_GetString>
  return USBD_StrDesc;
 801ba52:	4b02      	ldr	r3, [pc, #8]	; (801ba5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801ba54:	4618      	mov	r0, r3
 801ba56:	3708      	adds	r7, #8
 801ba58:	46bd      	mov	sp, r7
 801ba5a:	bd80      	pop	{r7, pc}
 801ba5c:	2000f668 	.word	0x2000f668
 801ba60:	08024b00 	.word	0x08024b00

0801ba64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b082      	sub	sp, #8
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	4603      	mov	r3, r0
 801ba6c:	6039      	str	r1, [r7, #0]
 801ba6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ba70:	683b      	ldr	r3, [r7, #0]
 801ba72:	221a      	movs	r2, #26
 801ba74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ba76:	f000 f843 	bl	801bb00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ba7a:	4b02      	ldr	r3, [pc, #8]	; (801ba84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801ba7c:	4618      	mov	r0, r3
 801ba7e:	3708      	adds	r7, #8
 801ba80:	46bd      	mov	sp, r7
 801ba82:	bd80      	pop	{r7, pc}
 801ba84:	20000d28 	.word	0x20000d28

0801ba88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b082      	sub	sp, #8
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	4603      	mov	r3, r0
 801ba90:	6039      	str	r1, [r7, #0]
 801ba92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ba94:	79fb      	ldrb	r3, [r7, #7]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d105      	bne.n	801baa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ba9a:	683a      	ldr	r2, [r7, #0]
 801ba9c:	4907      	ldr	r1, [pc, #28]	; (801babc <USBD_FS_ConfigStrDescriptor+0x34>)
 801ba9e:	4808      	ldr	r0, [pc, #32]	; (801bac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801baa0:	f7fc fa12 	bl	8017ec8 <USBD_GetString>
 801baa4:	e004      	b.n	801bab0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801baa6:	683a      	ldr	r2, [r7, #0]
 801baa8:	4904      	ldr	r1, [pc, #16]	; (801babc <USBD_FS_ConfigStrDescriptor+0x34>)
 801baaa:	4805      	ldr	r0, [pc, #20]	; (801bac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801baac:	f7fc fa0c 	bl	8017ec8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bab0:	4b02      	ldr	r3, [pc, #8]	; (801babc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801bab2:	4618      	mov	r0, r3
 801bab4:	3708      	adds	r7, #8
 801bab6:	46bd      	mov	sp, r7
 801bab8:	bd80      	pop	{r7, pc}
 801baba:	bf00      	nop
 801babc:	2000f668 	.word	0x2000f668
 801bac0:	08024b14 	.word	0x08024b14

0801bac4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bac4:	b580      	push	{r7, lr}
 801bac6:	b082      	sub	sp, #8
 801bac8:	af00      	add	r7, sp, #0
 801baca:	4603      	mov	r3, r0
 801bacc:	6039      	str	r1, [r7, #0]
 801bace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801bad0:	79fb      	ldrb	r3, [r7, #7]
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	d105      	bne.n	801bae2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bad6:	683a      	ldr	r2, [r7, #0]
 801bad8:	4907      	ldr	r1, [pc, #28]	; (801baf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bada:	4808      	ldr	r0, [pc, #32]	; (801bafc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801badc:	f7fc f9f4 	bl	8017ec8 <USBD_GetString>
 801bae0:	e004      	b.n	801baec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bae2:	683a      	ldr	r2, [r7, #0]
 801bae4:	4904      	ldr	r1, [pc, #16]	; (801baf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801bae6:	4805      	ldr	r0, [pc, #20]	; (801bafc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801bae8:	f7fc f9ee 	bl	8017ec8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801baec:	4b02      	ldr	r3, [pc, #8]	; (801baf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801baee:	4618      	mov	r0, r3
 801baf0:	3708      	adds	r7, #8
 801baf2:	46bd      	mov	sp, r7
 801baf4:	bd80      	pop	{r7, pc}
 801baf6:	bf00      	nop
 801baf8:	2000f668 	.word	0x2000f668
 801bafc:	08024b20 	.word	0x08024b20

0801bb00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b084      	sub	sp, #16
 801bb04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801bb06:	4b0f      	ldr	r3, [pc, #60]	; (801bb44 <Get_SerialNum+0x44>)
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801bb0c:	4b0e      	ldr	r3, [pc, #56]	; (801bb48 <Get_SerialNum+0x48>)
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801bb12:	4b0e      	ldr	r3, [pc, #56]	; (801bb4c <Get_SerialNum+0x4c>)
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801bb18:	68fa      	ldr	r2, [r7, #12]
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	4413      	add	r3, r2
 801bb1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801bb20:	68fb      	ldr	r3, [r7, #12]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d009      	beq.n	801bb3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801bb26:	2208      	movs	r2, #8
 801bb28:	4909      	ldr	r1, [pc, #36]	; (801bb50 <Get_SerialNum+0x50>)
 801bb2a:	68f8      	ldr	r0, [r7, #12]
 801bb2c:	f000 f814 	bl	801bb58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801bb30:	2204      	movs	r2, #4
 801bb32:	4908      	ldr	r1, [pc, #32]	; (801bb54 <Get_SerialNum+0x54>)
 801bb34:	68b8      	ldr	r0, [r7, #8]
 801bb36:	f000 f80f 	bl	801bb58 <IntToUnicode>
  }
}
 801bb3a:	bf00      	nop
 801bb3c:	3710      	adds	r7, #16
 801bb3e:	46bd      	mov	sp, r7
 801bb40:	bd80      	pop	{r7, pc}
 801bb42:	bf00      	nop
 801bb44:	1fff7a10 	.word	0x1fff7a10
 801bb48:	1fff7a14 	.word	0x1fff7a14
 801bb4c:	1fff7a18 	.word	0x1fff7a18
 801bb50:	20000d2a 	.word	0x20000d2a
 801bb54:	20000d3a 	.word	0x20000d3a

0801bb58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801bb58:	b480      	push	{r7}
 801bb5a:	b087      	sub	sp, #28
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	60f8      	str	r0, [r7, #12]
 801bb60:	60b9      	str	r1, [r7, #8]
 801bb62:	4613      	mov	r3, r2
 801bb64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801bb66:	2300      	movs	r3, #0
 801bb68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801bb6a:	2300      	movs	r3, #0
 801bb6c:	75fb      	strb	r3, [r7, #23]
 801bb6e:	e027      	b.n	801bbc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	0f1b      	lsrs	r3, r3, #28
 801bb74:	2b09      	cmp	r3, #9
 801bb76:	d80b      	bhi.n	801bb90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	0f1b      	lsrs	r3, r3, #28
 801bb7c:	b2da      	uxtb	r2, r3
 801bb7e:	7dfb      	ldrb	r3, [r7, #23]
 801bb80:	005b      	lsls	r3, r3, #1
 801bb82:	4619      	mov	r1, r3
 801bb84:	68bb      	ldr	r3, [r7, #8]
 801bb86:	440b      	add	r3, r1
 801bb88:	3230      	adds	r2, #48	; 0x30
 801bb8a:	b2d2      	uxtb	r2, r2
 801bb8c:	701a      	strb	r2, [r3, #0]
 801bb8e:	e00a      	b.n	801bba6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	0f1b      	lsrs	r3, r3, #28
 801bb94:	b2da      	uxtb	r2, r3
 801bb96:	7dfb      	ldrb	r3, [r7, #23]
 801bb98:	005b      	lsls	r3, r3, #1
 801bb9a:	4619      	mov	r1, r3
 801bb9c:	68bb      	ldr	r3, [r7, #8]
 801bb9e:	440b      	add	r3, r1
 801bba0:	3237      	adds	r2, #55	; 0x37
 801bba2:	b2d2      	uxtb	r2, r2
 801bba4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801bba6:	68fb      	ldr	r3, [r7, #12]
 801bba8:	011b      	lsls	r3, r3, #4
 801bbaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801bbac:	7dfb      	ldrb	r3, [r7, #23]
 801bbae:	005b      	lsls	r3, r3, #1
 801bbb0:	3301      	adds	r3, #1
 801bbb2:	68ba      	ldr	r2, [r7, #8]
 801bbb4:	4413      	add	r3, r2
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801bbba:	7dfb      	ldrb	r3, [r7, #23]
 801bbbc:	3301      	adds	r3, #1
 801bbbe:	75fb      	strb	r3, [r7, #23]
 801bbc0:	7dfa      	ldrb	r2, [r7, #23]
 801bbc2:	79fb      	ldrb	r3, [r7, #7]
 801bbc4:	429a      	cmp	r2, r3
 801bbc6:	d3d3      	bcc.n	801bb70 <IntToUnicode+0x18>
  }
}
 801bbc8:	bf00      	nop
 801bbca:	bf00      	nop
 801bbcc:	371c      	adds	r7, #28
 801bbce:	46bd      	mov	sp, r7
 801bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbd4:	4770      	bx	lr
	...

0801bbd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b08a      	sub	sp, #40	; 0x28
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bbe0:	f107 0314 	add.w	r3, r7, #20
 801bbe4:	2200      	movs	r2, #0
 801bbe6:	601a      	str	r2, [r3, #0]
 801bbe8:	605a      	str	r2, [r3, #4]
 801bbea:	609a      	str	r2, [r3, #8]
 801bbec:	60da      	str	r2, [r3, #12]
 801bbee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801bbf8:	d13a      	bne.n	801bc70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	613b      	str	r3, [r7, #16]
 801bbfe:	4b1e      	ldr	r3, [pc, #120]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc02:	4a1d      	ldr	r2, [pc, #116]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc04:	f043 0301 	orr.w	r3, r3, #1
 801bc08:	6313      	str	r3, [r2, #48]	; 0x30
 801bc0a:	4b1b      	ldr	r3, [pc, #108]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc0e:	f003 0301 	and.w	r3, r3, #1
 801bc12:	613b      	str	r3, [r7, #16]
 801bc14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801bc16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801bc1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801bc1c:	2302      	movs	r3, #2
 801bc1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bc20:	2300      	movs	r3, #0
 801bc22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801bc24:	2303      	movs	r3, #3
 801bc26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801bc28:	230a      	movs	r3, #10
 801bc2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801bc2c:	f107 0314 	add.w	r3, r7, #20
 801bc30:	4619      	mov	r1, r3
 801bc32:	4812      	ldr	r0, [pc, #72]	; (801bc7c <HAL_PCD_MspInit+0xa4>)
 801bc34:	f7f4 fb42 	bl	80102bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801bc38:	4b0f      	ldr	r3, [pc, #60]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc3c:	4a0e      	ldr	r2, [pc, #56]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc42:	6353      	str	r3, [r2, #52]	; 0x34
 801bc44:	2300      	movs	r3, #0
 801bc46:	60fb      	str	r3, [r7, #12]
 801bc48:	4b0b      	ldr	r3, [pc, #44]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc4c:	4a0a      	ldr	r2, [pc, #40]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801bc52:	6453      	str	r3, [r2, #68]	; 0x44
 801bc54:	4b08      	ldr	r3, [pc, #32]	; (801bc78 <HAL_PCD_MspInit+0xa0>)
 801bc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bc5c:	60fb      	str	r3, [r7, #12]
 801bc5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801bc60:	2200      	movs	r2, #0
 801bc62:	2105      	movs	r1, #5
 801bc64:	2043      	movs	r0, #67	; 0x43
 801bc66:	f7f3 fee2 	bl	800fa2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801bc6a:	2043      	movs	r0, #67	; 0x43
 801bc6c:	f7f3 fefb 	bl	800fa66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801bc70:	bf00      	nop
 801bc72:	3728      	adds	r7, #40	; 0x28
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}
 801bc78:	40023800 	.word	0x40023800
 801bc7c:	40020000 	.word	0x40020000

0801bc80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b082      	sub	sp, #8
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 801bc94:	4619      	mov	r1, r3
 801bc96:	4610      	mov	r0, r2
 801bc98:	f7fa ffb1 	bl	8016bfe <USBD_LL_SetupStage>
}
 801bc9c:	bf00      	nop
 801bc9e:	3708      	adds	r7, #8
 801bca0:	46bd      	mov	sp, r7
 801bca2:	bd80      	pop	{r7, pc}

0801bca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b082      	sub	sp, #8
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
 801bcac:	460b      	mov	r3, r1
 801bcae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801bcb6:	78fa      	ldrb	r2, [r7, #3]
 801bcb8:	6879      	ldr	r1, [r7, #4]
 801bcba:	4613      	mov	r3, r2
 801bcbc:	00db      	lsls	r3, r3, #3
 801bcbe:	4413      	add	r3, r2
 801bcc0:	009b      	lsls	r3, r3, #2
 801bcc2:	440b      	add	r3, r1
 801bcc4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801bcc8:	681a      	ldr	r2, [r3, #0]
 801bcca:	78fb      	ldrb	r3, [r7, #3]
 801bccc:	4619      	mov	r1, r3
 801bcce:	f7fa ffeb 	bl	8016ca8 <USBD_LL_DataOutStage>
}
 801bcd2:	bf00      	nop
 801bcd4:	3708      	adds	r7, #8
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd80      	pop	{r7, pc}

0801bcda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bcda:	b580      	push	{r7, lr}
 801bcdc:	b082      	sub	sp, #8
 801bcde:	af00      	add	r7, sp, #0
 801bce0:	6078      	str	r0, [r7, #4]
 801bce2:	460b      	mov	r3, r1
 801bce4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 801bcec:	78fa      	ldrb	r2, [r7, #3]
 801bcee:	6879      	ldr	r1, [r7, #4]
 801bcf0:	4613      	mov	r3, r2
 801bcf2:	00db      	lsls	r3, r3, #3
 801bcf4:	4413      	add	r3, r2
 801bcf6:	009b      	lsls	r3, r3, #2
 801bcf8:	440b      	add	r3, r1
 801bcfa:	3320      	adds	r3, #32
 801bcfc:	681a      	ldr	r2, [r3, #0]
 801bcfe:	78fb      	ldrb	r3, [r7, #3]
 801bd00:	4619      	mov	r1, r3
 801bd02:	f7fb f884 	bl	8016e0e <USBD_LL_DataInStage>
}
 801bd06:	bf00      	nop
 801bd08:	3708      	adds	r7, #8
 801bd0a:	46bd      	mov	sp, r7
 801bd0c:	bd80      	pop	{r7, pc}

0801bd0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd0e:	b580      	push	{r7, lr}
 801bd10:	b082      	sub	sp, #8
 801bd12:	af00      	add	r7, sp, #0
 801bd14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	f7fb f9be 	bl	801709e <USBD_LL_SOF>
}
 801bd22:	bf00      	nop
 801bd24:	3708      	adds	r7, #8
 801bd26:	46bd      	mov	sp, r7
 801bd28:	bd80      	pop	{r7, pc}

0801bd2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd2a:	b580      	push	{r7, lr}
 801bd2c:	b084      	sub	sp, #16
 801bd2e:	af00      	add	r7, sp, #0
 801bd30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bd32:	2301      	movs	r3, #1
 801bd34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	79db      	ldrb	r3, [r3, #7]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d102      	bne.n	801bd44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801bd3e:	2300      	movs	r3, #0
 801bd40:	73fb      	strb	r3, [r7, #15]
 801bd42:	e008      	b.n	801bd56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	79db      	ldrb	r3, [r3, #7]
 801bd48:	2b02      	cmp	r3, #2
 801bd4a:	d102      	bne.n	801bd52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801bd4c:	2301      	movs	r3, #1
 801bd4e:	73fb      	strb	r3, [r7, #15]
 801bd50:	e001      	b.n	801bd56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801bd52:	f7f2 fcdb 	bl	800e70c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801bd5c:	7bfa      	ldrb	r2, [r7, #15]
 801bd5e:	4611      	mov	r1, r2
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7fb f958 	bl	8017016 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801bd6c:	4618      	mov	r0, r3
 801bd6e:	f7fb f900 	bl	8016f72 <USBD_LL_Reset>
}
 801bd72:	bf00      	nop
 801bd74:	3710      	adds	r7, #16
 801bd76:	46bd      	mov	sp, r7
 801bd78:	bd80      	pop	{r7, pc}
	...

0801bd7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b082      	sub	sp, #8
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801bd8a:	4618      	mov	r0, r3
 801bd8c:	f7fb f953 	bl	8017036 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	687a      	ldr	r2, [r7, #4]
 801bd9c:	6812      	ldr	r2, [r2, #0]
 801bd9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801bda2:	f043 0301 	orr.w	r3, r3, #1
 801bda6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	7adb      	ldrb	r3, [r3, #11]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d005      	beq.n	801bdbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bdb0:	4b04      	ldr	r3, [pc, #16]	; (801bdc4 <HAL_PCD_SuspendCallback+0x48>)
 801bdb2:	691b      	ldr	r3, [r3, #16]
 801bdb4:	4a03      	ldr	r2, [pc, #12]	; (801bdc4 <HAL_PCD_SuspendCallback+0x48>)
 801bdb6:	f043 0306 	orr.w	r3, r3, #6
 801bdba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801bdbc:	bf00      	nop
 801bdbe:	3708      	adds	r7, #8
 801bdc0:	46bd      	mov	sp, r7
 801bdc2:	bd80      	pop	{r7, pc}
 801bdc4:	e000ed00 	.word	0xe000ed00

0801bdc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b082      	sub	sp, #8
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801bdd6:	4618      	mov	r0, r3
 801bdd8:	f7fb f949 	bl	801706e <USBD_LL_Resume>
}
 801bddc:	bf00      	nop
 801bdde:	3708      	adds	r7, #8
 801bde0:	46bd      	mov	sp, r7
 801bde2:	bd80      	pop	{r7, pc}

0801bde4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bde4:	b580      	push	{r7, lr}
 801bde6:	b082      	sub	sp, #8
 801bde8:	af00      	add	r7, sp, #0
 801bdea:	6078      	str	r0, [r7, #4]
 801bdec:	460b      	mov	r3, r1
 801bdee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801bdf6:	78fa      	ldrb	r2, [r7, #3]
 801bdf8:	4611      	mov	r1, r2
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	f7fb f9a1 	bl	8017142 <USBD_LL_IsoOUTIncomplete>
}
 801be00:	bf00      	nop
 801be02:	3708      	adds	r7, #8
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}

0801be08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b082      	sub	sp, #8
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
 801be10:	460b      	mov	r3, r1
 801be12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801be1a:	78fa      	ldrb	r2, [r7, #3]
 801be1c:	4611      	mov	r1, r2
 801be1e:	4618      	mov	r0, r3
 801be20:	f7fb f95d 	bl	80170de <USBD_LL_IsoINIncomplete>
}
 801be24:	bf00      	nop
 801be26:	3708      	adds	r7, #8
 801be28:	46bd      	mov	sp, r7
 801be2a:	bd80      	pop	{r7, pc}

0801be2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be2c:	b580      	push	{r7, lr}
 801be2e:	b082      	sub	sp, #8
 801be30:	af00      	add	r7, sp, #0
 801be32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801be3a:	4618      	mov	r0, r3
 801be3c:	f7fb f9b3 	bl	80171a6 <USBD_LL_DevConnected>
}
 801be40:	bf00      	nop
 801be42:	3708      	adds	r7, #8
 801be44:	46bd      	mov	sp, r7
 801be46:	bd80      	pop	{r7, pc}

0801be48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be48:	b580      	push	{r7, lr}
 801be4a:	b082      	sub	sp, #8
 801be4c:	af00      	add	r7, sp, #0
 801be4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 801be56:	4618      	mov	r0, r3
 801be58:	f7fb f9b0 	bl	80171bc <USBD_LL_DevDisconnected>
}
 801be5c:	bf00      	nop
 801be5e:	3708      	adds	r7, #8
 801be60:	46bd      	mov	sp, r7
 801be62:	bd80      	pop	{r7, pc}

0801be64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801be64:	b580      	push	{r7, lr}
 801be66:	b082      	sub	sp, #8
 801be68:	af00      	add	r7, sp, #0
 801be6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	781b      	ldrb	r3, [r3, #0]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d13c      	bne.n	801beee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801be74:	4a20      	ldr	r2, [pc, #128]	; (801bef8 <USBD_LL_Init+0x94>)
 801be76:	687b      	ldr	r3, [r7, #4]
 801be78:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	4a1e      	ldr	r2, [pc, #120]	; (801bef8 <USBD_LL_Init+0x94>)
 801be80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801be84:	4b1c      	ldr	r3, [pc, #112]	; (801bef8 <USBD_LL_Init+0x94>)
 801be86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801be8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801be8c:	4b1a      	ldr	r3, [pc, #104]	; (801bef8 <USBD_LL_Init+0x94>)
 801be8e:	2204      	movs	r2, #4
 801be90:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801be92:	4b19      	ldr	r3, [pc, #100]	; (801bef8 <USBD_LL_Init+0x94>)
 801be94:	2202      	movs	r2, #2
 801be96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801be98:	4b17      	ldr	r3, [pc, #92]	; (801bef8 <USBD_LL_Init+0x94>)
 801be9a:	2200      	movs	r2, #0
 801be9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801be9e:	4b16      	ldr	r3, [pc, #88]	; (801bef8 <USBD_LL_Init+0x94>)
 801bea0:	2202      	movs	r2, #2
 801bea2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801bea4:	4b14      	ldr	r3, [pc, #80]	; (801bef8 <USBD_LL_Init+0x94>)
 801bea6:	2200      	movs	r2, #0
 801bea8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801beaa:	4b13      	ldr	r3, [pc, #76]	; (801bef8 <USBD_LL_Init+0x94>)
 801beac:	2200      	movs	r2, #0
 801beae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801beb0:	4b11      	ldr	r3, [pc, #68]	; (801bef8 <USBD_LL_Init+0x94>)
 801beb2:	2200      	movs	r2, #0
 801beb4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801beb6:	4b10      	ldr	r3, [pc, #64]	; (801bef8 <USBD_LL_Init+0x94>)
 801beb8:	2200      	movs	r2, #0
 801beba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801bebc:	4b0e      	ldr	r3, [pc, #56]	; (801bef8 <USBD_LL_Init+0x94>)
 801bebe:	2200      	movs	r2, #0
 801bec0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801bec2:	480d      	ldr	r0, [pc, #52]	; (801bef8 <USBD_LL_Init+0x94>)
 801bec4:	f7f4 fbaf 	bl	8010626 <HAL_PCD_Init>
 801bec8:	4603      	mov	r3, r0
 801beca:	2b00      	cmp	r3, #0
 801becc:	d001      	beq.n	801bed2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801bece:	f7f2 fc1d 	bl	800e70c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801bed2:	2180      	movs	r1, #128	; 0x80
 801bed4:	4808      	ldr	r0, [pc, #32]	; (801bef8 <USBD_LL_Init+0x94>)
 801bed6:	f7f5 fdda 	bl	8011a8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801beda:	2240      	movs	r2, #64	; 0x40
 801bedc:	2100      	movs	r1, #0
 801bede:	4806      	ldr	r0, [pc, #24]	; (801bef8 <USBD_LL_Init+0x94>)
 801bee0:	f7f5 fd8e 	bl	8011a00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801bee4:	2280      	movs	r2, #128	; 0x80
 801bee6:	2101      	movs	r1, #1
 801bee8:	4803      	ldr	r0, [pc, #12]	; (801bef8 <USBD_LL_Init+0x94>)
 801beea:	f7f5 fd89 	bl	8011a00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801beee:	2300      	movs	r3, #0
}
 801bef0:	4618      	mov	r0, r3
 801bef2:	3708      	adds	r7, #8
 801bef4:	46bd      	mov	sp, r7
 801bef6:	bd80      	pop	{r7, pc}
 801bef8:	2000f868 	.word	0x2000f868

0801befc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b084      	sub	sp, #16
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf04:	2300      	movs	r3, #0
 801bf06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf08:	2300      	movs	r3, #0
 801bf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801bf12:	4618      	mov	r0, r3
 801bf14:	f7f4 fc96 	bl	8010844 <HAL_PCD_Start>
 801bf18:	4603      	mov	r3, r0
 801bf1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf1c:	7bfb      	ldrb	r3, [r7, #15]
 801bf1e:	4618      	mov	r0, r3
 801bf20:	f000 f942 	bl	801c1a8 <USBD_Get_USB_Status>
 801bf24:	4603      	mov	r3, r0
 801bf26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf28:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	3710      	adds	r7, #16
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}

0801bf32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801bf32:	b580      	push	{r7, lr}
 801bf34:	b084      	sub	sp, #16
 801bf36:	af00      	add	r7, sp, #0
 801bf38:	6078      	str	r0, [r7, #4]
 801bf3a:	4608      	mov	r0, r1
 801bf3c:	4611      	mov	r1, r2
 801bf3e:	461a      	mov	r2, r3
 801bf40:	4603      	mov	r3, r0
 801bf42:	70fb      	strb	r3, [r7, #3]
 801bf44:	460b      	mov	r3, r1
 801bf46:	70bb      	strb	r3, [r7, #2]
 801bf48:	4613      	mov	r3, r2
 801bf4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf50:	2300      	movs	r3, #0
 801bf52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801bf5a:	78bb      	ldrb	r3, [r7, #2]
 801bf5c:	883a      	ldrh	r2, [r7, #0]
 801bf5e:	78f9      	ldrb	r1, [r7, #3]
 801bf60:	f7f5 f96a 	bl	8011238 <HAL_PCD_EP_Open>
 801bf64:	4603      	mov	r3, r0
 801bf66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bf68:	7bfb      	ldrb	r3, [r7, #15]
 801bf6a:	4618      	mov	r0, r3
 801bf6c:	f000 f91c 	bl	801c1a8 <USBD_Get_USB_Status>
 801bf70:	4603      	mov	r3, r0
 801bf72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bf74:	7bbb      	ldrb	r3, [r7, #14]
}
 801bf76:	4618      	mov	r0, r3
 801bf78:	3710      	adds	r7, #16
 801bf7a:	46bd      	mov	sp, r7
 801bf7c:	bd80      	pop	{r7, pc}

0801bf7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bf7e:	b580      	push	{r7, lr}
 801bf80:	b084      	sub	sp, #16
 801bf82:	af00      	add	r7, sp, #0
 801bf84:	6078      	str	r0, [r7, #4]
 801bf86:	460b      	mov	r3, r1
 801bf88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bf8a:	2300      	movs	r3, #0
 801bf8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bf8e:	2300      	movs	r3, #0
 801bf90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801bf98:	78fa      	ldrb	r2, [r7, #3]
 801bf9a:	4611      	mov	r1, r2
 801bf9c:	4618      	mov	r0, r3
 801bf9e:	f7f5 f9b3 	bl	8011308 <HAL_PCD_EP_Close>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bfa6:	7bfb      	ldrb	r3, [r7, #15]
 801bfa8:	4618      	mov	r0, r3
 801bfaa:	f000 f8fd 	bl	801c1a8 <USBD_Get_USB_Status>
 801bfae:	4603      	mov	r3, r0
 801bfb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bfb2:	7bbb      	ldrb	r3, [r7, #14]
}
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	3710      	adds	r7, #16
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	bd80      	pop	{r7, pc}

0801bfbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bfbc:	b580      	push	{r7, lr}
 801bfbe:	b084      	sub	sp, #16
 801bfc0:	af00      	add	r7, sp, #0
 801bfc2:	6078      	str	r0, [r7, #4]
 801bfc4:	460b      	mov	r3, r1
 801bfc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bfc8:	2300      	movs	r3, #0
 801bfca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bfcc:	2300      	movs	r3, #0
 801bfce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801bfd6:	78fa      	ldrb	r2, [r7, #3]
 801bfd8:	4611      	mov	r1, r2
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f7f5 fa6b 	bl	80114b6 <HAL_PCD_EP_SetStall>
 801bfe0:	4603      	mov	r3, r0
 801bfe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bfe4:	7bfb      	ldrb	r3, [r7, #15]
 801bfe6:	4618      	mov	r0, r3
 801bfe8:	f000 f8de 	bl	801c1a8 <USBD_Get_USB_Status>
 801bfec:	4603      	mov	r3, r0
 801bfee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801bff0:	7bbb      	ldrb	r3, [r7, #14]
}
 801bff2:	4618      	mov	r0, r3
 801bff4:	3710      	adds	r7, #16
 801bff6:	46bd      	mov	sp, r7
 801bff8:	bd80      	pop	{r7, pc}

0801bffa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bffa:	b580      	push	{r7, lr}
 801bffc:	b084      	sub	sp, #16
 801bffe:	af00      	add	r7, sp, #0
 801c000:	6078      	str	r0, [r7, #4]
 801c002:	460b      	mov	r3, r1
 801c004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c006:	2300      	movs	r3, #0
 801c008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c00a:	2300      	movs	r3, #0
 801c00c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c014:	78fa      	ldrb	r2, [r7, #3]
 801c016:	4611      	mov	r1, r2
 801c018:	4618      	mov	r0, r3
 801c01a:	f7f5 faaf 	bl	801157c <HAL_PCD_EP_ClrStall>
 801c01e:	4603      	mov	r3, r0
 801c020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c022:	7bfb      	ldrb	r3, [r7, #15]
 801c024:	4618      	mov	r0, r3
 801c026:	f000 f8bf 	bl	801c1a8 <USBD_Get_USB_Status>
 801c02a:	4603      	mov	r3, r0
 801c02c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c02e:	7bbb      	ldrb	r3, [r7, #14]
}
 801c030:	4618      	mov	r0, r3
 801c032:	3710      	adds	r7, #16
 801c034:	46bd      	mov	sp, r7
 801c036:	bd80      	pop	{r7, pc}

0801c038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c038:	b480      	push	{r7}
 801c03a:	b085      	sub	sp, #20
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	460b      	mov	r3, r1
 801c042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c04a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c04c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c050:	2b00      	cmp	r3, #0
 801c052:	da0b      	bge.n	801c06c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c054:	78fb      	ldrb	r3, [r7, #3]
 801c056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c05a:	68f9      	ldr	r1, [r7, #12]
 801c05c:	4613      	mov	r3, r2
 801c05e:	00db      	lsls	r3, r3, #3
 801c060:	4413      	add	r3, r2
 801c062:	009b      	lsls	r3, r3, #2
 801c064:	440b      	add	r3, r1
 801c066:	3316      	adds	r3, #22
 801c068:	781b      	ldrb	r3, [r3, #0]
 801c06a:	e00b      	b.n	801c084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c06c:	78fb      	ldrb	r3, [r7, #3]
 801c06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801c072:	68f9      	ldr	r1, [r7, #12]
 801c074:	4613      	mov	r3, r2
 801c076:	00db      	lsls	r3, r3, #3
 801c078:	4413      	add	r3, r2
 801c07a:	009b      	lsls	r3, r3, #2
 801c07c:	440b      	add	r3, r1
 801c07e:	f203 2356 	addw	r3, r3, #598	; 0x256
 801c082:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c084:	4618      	mov	r0, r3
 801c086:	3714      	adds	r7, #20
 801c088:	46bd      	mov	sp, r7
 801c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c08e:	4770      	bx	lr

0801c090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c090:	b580      	push	{r7, lr}
 801c092:	b084      	sub	sp, #16
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
 801c098:	460b      	mov	r3, r1
 801c09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c09c:	2300      	movs	r3, #0
 801c09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c0aa:	78fa      	ldrb	r2, [r7, #3]
 801c0ac:	4611      	mov	r1, r2
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	f7f5 f89e 	bl	80111f0 <HAL_PCD_SetAddress>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c0b8:	7bfb      	ldrb	r3, [r7, #15]
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f000 f874 	bl	801c1a8 <USBD_Get_USB_Status>
 801c0c0:	4603      	mov	r3, r0
 801c0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	3710      	adds	r7, #16
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	bd80      	pop	{r7, pc}

0801c0ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c0ce:	b580      	push	{r7, lr}
 801c0d0:	b086      	sub	sp, #24
 801c0d2:	af00      	add	r7, sp, #0
 801c0d4:	60f8      	str	r0, [r7, #12]
 801c0d6:	607a      	str	r2, [r7, #4]
 801c0d8:	603b      	str	r3, [r7, #0]
 801c0da:	460b      	mov	r3, r1
 801c0dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c0de:	2300      	movs	r3, #0
 801c0e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801c0ec:	7af9      	ldrb	r1, [r7, #11]
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	687a      	ldr	r2, [r7, #4]
 801c0f2:	f7f5 f9a6 	bl	8011442 <HAL_PCD_EP_Transmit>
 801c0f6:	4603      	mov	r3, r0
 801c0f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c0fa:	7dfb      	ldrb	r3, [r7, #23]
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	f000 f853 	bl	801c1a8 <USBD_Get_USB_Status>
 801c102:	4603      	mov	r3, r0
 801c104:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c106:	7dbb      	ldrb	r3, [r7, #22]
}
 801c108:	4618      	mov	r0, r3
 801c10a:	3718      	adds	r7, #24
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}

0801c110 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b086      	sub	sp, #24
 801c114:	af00      	add	r7, sp, #0
 801c116:	60f8      	str	r0, [r7, #12]
 801c118:	607a      	str	r2, [r7, #4]
 801c11a:	603b      	str	r3, [r7, #0]
 801c11c:	460b      	mov	r3, r1
 801c11e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c120:	2300      	movs	r3, #0
 801c122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c124:	2300      	movs	r3, #0
 801c126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801c12e:	7af9      	ldrb	r1, [r7, #11]
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	687a      	ldr	r2, [r7, #4]
 801c134:	f7f5 f932 	bl	801139c <HAL_PCD_EP_Receive>
 801c138:	4603      	mov	r3, r0
 801c13a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c13c:	7dfb      	ldrb	r3, [r7, #23]
 801c13e:	4618      	mov	r0, r3
 801c140:	f000 f832 	bl	801c1a8 <USBD_Get_USB_Status>
 801c144:	4603      	mov	r3, r0
 801c146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801c148:	7dbb      	ldrb	r3, [r7, #22]
}
 801c14a:	4618      	mov	r0, r3
 801c14c:	3718      	adds	r7, #24
 801c14e:	46bd      	mov	sp, r7
 801c150:	bd80      	pop	{r7, pc}

0801c152 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c152:	b580      	push	{r7, lr}
 801c154:	b082      	sub	sp, #8
 801c156:	af00      	add	r7, sp, #0
 801c158:	6078      	str	r0, [r7, #4]
 801c15a:	460b      	mov	r3, r1
 801c15c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801c164:	78fa      	ldrb	r2, [r7, #3]
 801c166:	4611      	mov	r1, r2
 801c168:	4618      	mov	r0, r3
 801c16a:	f7f5 f952 	bl	8011412 <HAL_PCD_EP_GetRxCount>
 801c16e:	4603      	mov	r3, r0
}
 801c170:	4618      	mov	r0, r3
 801c172:	3708      	adds	r7, #8
 801c174:	46bd      	mov	sp, r7
 801c176:	bd80      	pop	{r7, pc}

0801c178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c178:	b480      	push	{r7}
 801c17a:	b083      	sub	sp, #12
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c180:	4b03      	ldr	r3, [pc, #12]	; (801c190 <USBD_static_malloc+0x18>)
}
 801c182:	4618      	mov	r0, r3
 801c184:	370c      	adds	r7, #12
 801c186:	46bd      	mov	sp, r7
 801c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c18c:	4770      	bx	lr
 801c18e:	bf00      	nop
 801c190:	2000fd4c 	.word	0x2000fd4c

0801c194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c194:	b480      	push	{r7}
 801c196:	b083      	sub	sp, #12
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]

}
 801c19c:	bf00      	nop
 801c19e:	370c      	adds	r7, #12
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1a6:	4770      	bx	lr

0801c1a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c1a8:	b480      	push	{r7}
 801c1aa:	b085      	sub	sp, #20
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	4603      	mov	r3, r0
 801c1b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c1b6:	79fb      	ldrb	r3, [r7, #7]
 801c1b8:	2b03      	cmp	r3, #3
 801c1ba:	d817      	bhi.n	801c1ec <USBD_Get_USB_Status+0x44>
 801c1bc:	a201      	add	r2, pc, #4	; (adr r2, 801c1c4 <USBD_Get_USB_Status+0x1c>)
 801c1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1c2:	bf00      	nop
 801c1c4:	0801c1d5 	.word	0x0801c1d5
 801c1c8:	0801c1db 	.word	0x0801c1db
 801c1cc:	0801c1e1 	.word	0x0801c1e1
 801c1d0:	0801c1e7 	.word	0x0801c1e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	73fb      	strb	r3, [r7, #15]
    break;
 801c1d8:	e00b      	b.n	801c1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c1da:	2303      	movs	r3, #3
 801c1dc:	73fb      	strb	r3, [r7, #15]
    break;
 801c1de:	e008      	b.n	801c1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c1e0:	2301      	movs	r3, #1
 801c1e2:	73fb      	strb	r3, [r7, #15]
    break;
 801c1e4:	e005      	b.n	801c1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c1e6:	2303      	movs	r3, #3
 801c1e8:	73fb      	strb	r3, [r7, #15]
    break;
 801c1ea:	e002      	b.n	801c1f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801c1ec:	2303      	movs	r3, #3
 801c1ee:	73fb      	strb	r3, [r7, #15]
    break;
 801c1f0:	bf00      	nop
  }
  return usb_status;
 801c1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 801c1f4:	4618      	mov	r0, r3
 801c1f6:	3714      	adds	r7, #20
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fe:	4770      	bx	lr

0801c200 <__cvt>:
 801c200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c204:	ec55 4b10 	vmov	r4, r5, d0
 801c208:	2d00      	cmp	r5, #0
 801c20a:	460e      	mov	r6, r1
 801c20c:	4619      	mov	r1, r3
 801c20e:	462b      	mov	r3, r5
 801c210:	bfbb      	ittet	lt
 801c212:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c216:	461d      	movlt	r5, r3
 801c218:	2300      	movge	r3, #0
 801c21a:	232d      	movlt	r3, #45	; 0x2d
 801c21c:	700b      	strb	r3, [r1, #0]
 801c21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c220:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c224:	4691      	mov	r9, r2
 801c226:	f023 0820 	bic.w	r8, r3, #32
 801c22a:	bfbc      	itt	lt
 801c22c:	4622      	movlt	r2, r4
 801c22e:	4614      	movlt	r4, r2
 801c230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c234:	d005      	beq.n	801c242 <__cvt+0x42>
 801c236:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c23a:	d100      	bne.n	801c23e <__cvt+0x3e>
 801c23c:	3601      	adds	r6, #1
 801c23e:	2102      	movs	r1, #2
 801c240:	e000      	b.n	801c244 <__cvt+0x44>
 801c242:	2103      	movs	r1, #3
 801c244:	ab03      	add	r3, sp, #12
 801c246:	9301      	str	r3, [sp, #4]
 801c248:	ab02      	add	r3, sp, #8
 801c24a:	9300      	str	r3, [sp, #0]
 801c24c:	ec45 4b10 	vmov	d0, r4, r5
 801c250:	4653      	mov	r3, sl
 801c252:	4632      	mov	r2, r6
 801c254:	f001 f858 	bl	801d308 <_dtoa_r>
 801c258:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c25c:	4607      	mov	r7, r0
 801c25e:	d102      	bne.n	801c266 <__cvt+0x66>
 801c260:	f019 0f01 	tst.w	r9, #1
 801c264:	d022      	beq.n	801c2ac <__cvt+0xac>
 801c266:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c26a:	eb07 0906 	add.w	r9, r7, r6
 801c26e:	d110      	bne.n	801c292 <__cvt+0x92>
 801c270:	783b      	ldrb	r3, [r7, #0]
 801c272:	2b30      	cmp	r3, #48	; 0x30
 801c274:	d10a      	bne.n	801c28c <__cvt+0x8c>
 801c276:	2200      	movs	r2, #0
 801c278:	2300      	movs	r3, #0
 801c27a:	4620      	mov	r0, r4
 801c27c:	4629      	mov	r1, r5
 801c27e:	f7e4 fc33 	bl	8000ae8 <__aeabi_dcmpeq>
 801c282:	b918      	cbnz	r0, 801c28c <__cvt+0x8c>
 801c284:	f1c6 0601 	rsb	r6, r6, #1
 801c288:	f8ca 6000 	str.w	r6, [sl]
 801c28c:	f8da 3000 	ldr.w	r3, [sl]
 801c290:	4499      	add	r9, r3
 801c292:	2200      	movs	r2, #0
 801c294:	2300      	movs	r3, #0
 801c296:	4620      	mov	r0, r4
 801c298:	4629      	mov	r1, r5
 801c29a:	f7e4 fc25 	bl	8000ae8 <__aeabi_dcmpeq>
 801c29e:	b108      	cbz	r0, 801c2a4 <__cvt+0xa4>
 801c2a0:	f8cd 900c 	str.w	r9, [sp, #12]
 801c2a4:	2230      	movs	r2, #48	; 0x30
 801c2a6:	9b03      	ldr	r3, [sp, #12]
 801c2a8:	454b      	cmp	r3, r9
 801c2aa:	d307      	bcc.n	801c2bc <__cvt+0xbc>
 801c2ac:	9b03      	ldr	r3, [sp, #12]
 801c2ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c2b0:	1bdb      	subs	r3, r3, r7
 801c2b2:	4638      	mov	r0, r7
 801c2b4:	6013      	str	r3, [r2, #0]
 801c2b6:	b004      	add	sp, #16
 801c2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2bc:	1c59      	adds	r1, r3, #1
 801c2be:	9103      	str	r1, [sp, #12]
 801c2c0:	701a      	strb	r2, [r3, #0]
 801c2c2:	e7f0      	b.n	801c2a6 <__cvt+0xa6>

0801c2c4 <__exponent>:
 801c2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c2c6:	4603      	mov	r3, r0
 801c2c8:	2900      	cmp	r1, #0
 801c2ca:	bfb8      	it	lt
 801c2cc:	4249      	neglt	r1, r1
 801c2ce:	f803 2b02 	strb.w	r2, [r3], #2
 801c2d2:	bfb4      	ite	lt
 801c2d4:	222d      	movlt	r2, #45	; 0x2d
 801c2d6:	222b      	movge	r2, #43	; 0x2b
 801c2d8:	2909      	cmp	r1, #9
 801c2da:	7042      	strb	r2, [r0, #1]
 801c2dc:	dd2a      	ble.n	801c334 <__exponent+0x70>
 801c2de:	f10d 0207 	add.w	r2, sp, #7
 801c2e2:	4617      	mov	r7, r2
 801c2e4:	260a      	movs	r6, #10
 801c2e6:	4694      	mov	ip, r2
 801c2e8:	fb91 f5f6 	sdiv	r5, r1, r6
 801c2ec:	fb06 1415 	mls	r4, r6, r5, r1
 801c2f0:	3430      	adds	r4, #48	; 0x30
 801c2f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801c2f6:	460c      	mov	r4, r1
 801c2f8:	2c63      	cmp	r4, #99	; 0x63
 801c2fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801c2fe:	4629      	mov	r1, r5
 801c300:	dcf1      	bgt.n	801c2e6 <__exponent+0x22>
 801c302:	3130      	adds	r1, #48	; 0x30
 801c304:	f1ac 0402 	sub.w	r4, ip, #2
 801c308:	f802 1c01 	strb.w	r1, [r2, #-1]
 801c30c:	1c41      	adds	r1, r0, #1
 801c30e:	4622      	mov	r2, r4
 801c310:	42ba      	cmp	r2, r7
 801c312:	d30a      	bcc.n	801c32a <__exponent+0x66>
 801c314:	f10d 0209 	add.w	r2, sp, #9
 801c318:	eba2 020c 	sub.w	r2, r2, ip
 801c31c:	42bc      	cmp	r4, r7
 801c31e:	bf88      	it	hi
 801c320:	2200      	movhi	r2, #0
 801c322:	4413      	add	r3, r2
 801c324:	1a18      	subs	r0, r3, r0
 801c326:	b003      	add	sp, #12
 801c328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c32a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801c32e:	f801 5f01 	strb.w	r5, [r1, #1]!
 801c332:	e7ed      	b.n	801c310 <__exponent+0x4c>
 801c334:	2330      	movs	r3, #48	; 0x30
 801c336:	3130      	adds	r1, #48	; 0x30
 801c338:	7083      	strb	r3, [r0, #2]
 801c33a:	70c1      	strb	r1, [r0, #3]
 801c33c:	1d03      	adds	r3, r0, #4
 801c33e:	e7f1      	b.n	801c324 <__exponent+0x60>

0801c340 <_printf_float>:
 801c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c344:	ed2d 8b02 	vpush	{d8}
 801c348:	b08d      	sub	sp, #52	; 0x34
 801c34a:	460c      	mov	r4, r1
 801c34c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c350:	4616      	mov	r6, r2
 801c352:	461f      	mov	r7, r3
 801c354:	4605      	mov	r5, r0
 801c356:	f000 fe67 	bl	801d028 <_localeconv_r>
 801c35a:	f8d0 a000 	ldr.w	sl, [r0]
 801c35e:	4650      	mov	r0, sl
 801c360:	f7e3 ff96 	bl	8000290 <strlen>
 801c364:	2300      	movs	r3, #0
 801c366:	930a      	str	r3, [sp, #40]	; 0x28
 801c368:	6823      	ldr	r3, [r4, #0]
 801c36a:	9305      	str	r3, [sp, #20]
 801c36c:	f8d8 3000 	ldr.w	r3, [r8]
 801c370:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c374:	3307      	adds	r3, #7
 801c376:	f023 0307 	bic.w	r3, r3, #7
 801c37a:	f103 0208 	add.w	r2, r3, #8
 801c37e:	f8c8 2000 	str.w	r2, [r8]
 801c382:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c386:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c38a:	9307      	str	r3, [sp, #28]
 801c38c:	f8cd 8018 	str.w	r8, [sp, #24]
 801c390:	ee08 0a10 	vmov	s16, r0
 801c394:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801c398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c39c:	4b9e      	ldr	r3, [pc, #632]	; (801c618 <_printf_float+0x2d8>)
 801c39e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c3a2:	f7e4 fbd3 	bl	8000b4c <__aeabi_dcmpun>
 801c3a6:	bb88      	cbnz	r0, 801c40c <_printf_float+0xcc>
 801c3a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c3ac:	4b9a      	ldr	r3, [pc, #616]	; (801c618 <_printf_float+0x2d8>)
 801c3ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c3b2:	f7e4 fbad 	bl	8000b10 <__aeabi_dcmple>
 801c3b6:	bb48      	cbnz	r0, 801c40c <_printf_float+0xcc>
 801c3b8:	2200      	movs	r2, #0
 801c3ba:	2300      	movs	r3, #0
 801c3bc:	4640      	mov	r0, r8
 801c3be:	4649      	mov	r1, r9
 801c3c0:	f7e4 fb9c 	bl	8000afc <__aeabi_dcmplt>
 801c3c4:	b110      	cbz	r0, 801c3cc <_printf_float+0x8c>
 801c3c6:	232d      	movs	r3, #45	; 0x2d
 801c3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c3cc:	4a93      	ldr	r2, [pc, #588]	; (801c61c <_printf_float+0x2dc>)
 801c3ce:	4b94      	ldr	r3, [pc, #592]	; (801c620 <_printf_float+0x2e0>)
 801c3d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c3d4:	bf94      	ite	ls
 801c3d6:	4690      	movls	r8, r2
 801c3d8:	4698      	movhi	r8, r3
 801c3da:	2303      	movs	r3, #3
 801c3dc:	6123      	str	r3, [r4, #16]
 801c3de:	9b05      	ldr	r3, [sp, #20]
 801c3e0:	f023 0304 	bic.w	r3, r3, #4
 801c3e4:	6023      	str	r3, [r4, #0]
 801c3e6:	f04f 0900 	mov.w	r9, #0
 801c3ea:	9700      	str	r7, [sp, #0]
 801c3ec:	4633      	mov	r3, r6
 801c3ee:	aa0b      	add	r2, sp, #44	; 0x2c
 801c3f0:	4621      	mov	r1, r4
 801c3f2:	4628      	mov	r0, r5
 801c3f4:	f000 f9da 	bl	801c7ac <_printf_common>
 801c3f8:	3001      	adds	r0, #1
 801c3fa:	f040 8090 	bne.w	801c51e <_printf_float+0x1de>
 801c3fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c402:	b00d      	add	sp, #52	; 0x34
 801c404:	ecbd 8b02 	vpop	{d8}
 801c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c40c:	4642      	mov	r2, r8
 801c40e:	464b      	mov	r3, r9
 801c410:	4640      	mov	r0, r8
 801c412:	4649      	mov	r1, r9
 801c414:	f7e4 fb9a 	bl	8000b4c <__aeabi_dcmpun>
 801c418:	b140      	cbz	r0, 801c42c <_printf_float+0xec>
 801c41a:	464b      	mov	r3, r9
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	bfbc      	itt	lt
 801c420:	232d      	movlt	r3, #45	; 0x2d
 801c422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c426:	4a7f      	ldr	r2, [pc, #508]	; (801c624 <_printf_float+0x2e4>)
 801c428:	4b7f      	ldr	r3, [pc, #508]	; (801c628 <_printf_float+0x2e8>)
 801c42a:	e7d1      	b.n	801c3d0 <_printf_float+0x90>
 801c42c:	6863      	ldr	r3, [r4, #4]
 801c42e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c432:	9206      	str	r2, [sp, #24]
 801c434:	1c5a      	adds	r2, r3, #1
 801c436:	d13f      	bne.n	801c4b8 <_printf_float+0x178>
 801c438:	2306      	movs	r3, #6
 801c43a:	6063      	str	r3, [r4, #4]
 801c43c:	9b05      	ldr	r3, [sp, #20]
 801c43e:	6861      	ldr	r1, [r4, #4]
 801c440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c444:	2300      	movs	r3, #0
 801c446:	9303      	str	r3, [sp, #12]
 801c448:	ab0a      	add	r3, sp, #40	; 0x28
 801c44a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c44e:	ab09      	add	r3, sp, #36	; 0x24
 801c450:	ec49 8b10 	vmov	d0, r8, r9
 801c454:	9300      	str	r3, [sp, #0]
 801c456:	6022      	str	r2, [r4, #0]
 801c458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c45c:	4628      	mov	r0, r5
 801c45e:	f7ff fecf 	bl	801c200 <__cvt>
 801c462:	9b06      	ldr	r3, [sp, #24]
 801c464:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c466:	2b47      	cmp	r3, #71	; 0x47
 801c468:	4680      	mov	r8, r0
 801c46a:	d108      	bne.n	801c47e <_printf_float+0x13e>
 801c46c:	1cc8      	adds	r0, r1, #3
 801c46e:	db02      	blt.n	801c476 <_printf_float+0x136>
 801c470:	6863      	ldr	r3, [r4, #4]
 801c472:	4299      	cmp	r1, r3
 801c474:	dd41      	ble.n	801c4fa <_printf_float+0x1ba>
 801c476:	f1ab 0302 	sub.w	r3, fp, #2
 801c47a:	fa5f fb83 	uxtb.w	fp, r3
 801c47e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c482:	d820      	bhi.n	801c4c6 <_printf_float+0x186>
 801c484:	3901      	subs	r1, #1
 801c486:	465a      	mov	r2, fp
 801c488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c48c:	9109      	str	r1, [sp, #36]	; 0x24
 801c48e:	f7ff ff19 	bl	801c2c4 <__exponent>
 801c492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c494:	1813      	adds	r3, r2, r0
 801c496:	2a01      	cmp	r2, #1
 801c498:	4681      	mov	r9, r0
 801c49a:	6123      	str	r3, [r4, #16]
 801c49c:	dc02      	bgt.n	801c4a4 <_printf_float+0x164>
 801c49e:	6822      	ldr	r2, [r4, #0]
 801c4a0:	07d2      	lsls	r2, r2, #31
 801c4a2:	d501      	bpl.n	801c4a8 <_printf_float+0x168>
 801c4a4:	3301      	adds	r3, #1
 801c4a6:	6123      	str	r3, [r4, #16]
 801c4a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c4ac:	2b00      	cmp	r3, #0
 801c4ae:	d09c      	beq.n	801c3ea <_printf_float+0xaa>
 801c4b0:	232d      	movs	r3, #45	; 0x2d
 801c4b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c4b6:	e798      	b.n	801c3ea <_printf_float+0xaa>
 801c4b8:	9a06      	ldr	r2, [sp, #24]
 801c4ba:	2a47      	cmp	r2, #71	; 0x47
 801c4bc:	d1be      	bne.n	801c43c <_printf_float+0xfc>
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d1bc      	bne.n	801c43c <_printf_float+0xfc>
 801c4c2:	2301      	movs	r3, #1
 801c4c4:	e7b9      	b.n	801c43a <_printf_float+0xfa>
 801c4c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c4ca:	d118      	bne.n	801c4fe <_printf_float+0x1be>
 801c4cc:	2900      	cmp	r1, #0
 801c4ce:	6863      	ldr	r3, [r4, #4]
 801c4d0:	dd0b      	ble.n	801c4ea <_printf_float+0x1aa>
 801c4d2:	6121      	str	r1, [r4, #16]
 801c4d4:	b913      	cbnz	r3, 801c4dc <_printf_float+0x19c>
 801c4d6:	6822      	ldr	r2, [r4, #0]
 801c4d8:	07d0      	lsls	r0, r2, #31
 801c4da:	d502      	bpl.n	801c4e2 <_printf_float+0x1a2>
 801c4dc:	3301      	adds	r3, #1
 801c4de:	440b      	add	r3, r1
 801c4e0:	6123      	str	r3, [r4, #16]
 801c4e2:	65a1      	str	r1, [r4, #88]	; 0x58
 801c4e4:	f04f 0900 	mov.w	r9, #0
 801c4e8:	e7de      	b.n	801c4a8 <_printf_float+0x168>
 801c4ea:	b913      	cbnz	r3, 801c4f2 <_printf_float+0x1b2>
 801c4ec:	6822      	ldr	r2, [r4, #0]
 801c4ee:	07d2      	lsls	r2, r2, #31
 801c4f0:	d501      	bpl.n	801c4f6 <_printf_float+0x1b6>
 801c4f2:	3302      	adds	r3, #2
 801c4f4:	e7f4      	b.n	801c4e0 <_printf_float+0x1a0>
 801c4f6:	2301      	movs	r3, #1
 801c4f8:	e7f2      	b.n	801c4e0 <_printf_float+0x1a0>
 801c4fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c500:	4299      	cmp	r1, r3
 801c502:	db05      	blt.n	801c510 <_printf_float+0x1d0>
 801c504:	6823      	ldr	r3, [r4, #0]
 801c506:	6121      	str	r1, [r4, #16]
 801c508:	07d8      	lsls	r0, r3, #31
 801c50a:	d5ea      	bpl.n	801c4e2 <_printf_float+0x1a2>
 801c50c:	1c4b      	adds	r3, r1, #1
 801c50e:	e7e7      	b.n	801c4e0 <_printf_float+0x1a0>
 801c510:	2900      	cmp	r1, #0
 801c512:	bfd4      	ite	le
 801c514:	f1c1 0202 	rsble	r2, r1, #2
 801c518:	2201      	movgt	r2, #1
 801c51a:	4413      	add	r3, r2
 801c51c:	e7e0      	b.n	801c4e0 <_printf_float+0x1a0>
 801c51e:	6823      	ldr	r3, [r4, #0]
 801c520:	055a      	lsls	r2, r3, #21
 801c522:	d407      	bmi.n	801c534 <_printf_float+0x1f4>
 801c524:	6923      	ldr	r3, [r4, #16]
 801c526:	4642      	mov	r2, r8
 801c528:	4631      	mov	r1, r6
 801c52a:	4628      	mov	r0, r5
 801c52c:	47b8      	blx	r7
 801c52e:	3001      	adds	r0, #1
 801c530:	d12c      	bne.n	801c58c <_printf_float+0x24c>
 801c532:	e764      	b.n	801c3fe <_printf_float+0xbe>
 801c534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c538:	f240 80e0 	bls.w	801c6fc <_printf_float+0x3bc>
 801c53c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c540:	2200      	movs	r2, #0
 801c542:	2300      	movs	r3, #0
 801c544:	f7e4 fad0 	bl	8000ae8 <__aeabi_dcmpeq>
 801c548:	2800      	cmp	r0, #0
 801c54a:	d034      	beq.n	801c5b6 <_printf_float+0x276>
 801c54c:	4a37      	ldr	r2, [pc, #220]	; (801c62c <_printf_float+0x2ec>)
 801c54e:	2301      	movs	r3, #1
 801c550:	4631      	mov	r1, r6
 801c552:	4628      	mov	r0, r5
 801c554:	47b8      	blx	r7
 801c556:	3001      	adds	r0, #1
 801c558:	f43f af51 	beq.w	801c3fe <_printf_float+0xbe>
 801c55c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c560:	429a      	cmp	r2, r3
 801c562:	db02      	blt.n	801c56a <_printf_float+0x22a>
 801c564:	6823      	ldr	r3, [r4, #0]
 801c566:	07d8      	lsls	r0, r3, #31
 801c568:	d510      	bpl.n	801c58c <_printf_float+0x24c>
 801c56a:	ee18 3a10 	vmov	r3, s16
 801c56e:	4652      	mov	r2, sl
 801c570:	4631      	mov	r1, r6
 801c572:	4628      	mov	r0, r5
 801c574:	47b8      	blx	r7
 801c576:	3001      	adds	r0, #1
 801c578:	f43f af41 	beq.w	801c3fe <_printf_float+0xbe>
 801c57c:	f04f 0800 	mov.w	r8, #0
 801c580:	f104 091a 	add.w	r9, r4, #26
 801c584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c586:	3b01      	subs	r3, #1
 801c588:	4543      	cmp	r3, r8
 801c58a:	dc09      	bgt.n	801c5a0 <_printf_float+0x260>
 801c58c:	6823      	ldr	r3, [r4, #0]
 801c58e:	079b      	lsls	r3, r3, #30
 801c590:	f100 8107 	bmi.w	801c7a2 <_printf_float+0x462>
 801c594:	68e0      	ldr	r0, [r4, #12]
 801c596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c598:	4298      	cmp	r0, r3
 801c59a:	bfb8      	it	lt
 801c59c:	4618      	movlt	r0, r3
 801c59e:	e730      	b.n	801c402 <_printf_float+0xc2>
 801c5a0:	2301      	movs	r3, #1
 801c5a2:	464a      	mov	r2, r9
 801c5a4:	4631      	mov	r1, r6
 801c5a6:	4628      	mov	r0, r5
 801c5a8:	47b8      	blx	r7
 801c5aa:	3001      	adds	r0, #1
 801c5ac:	f43f af27 	beq.w	801c3fe <_printf_float+0xbe>
 801c5b0:	f108 0801 	add.w	r8, r8, #1
 801c5b4:	e7e6      	b.n	801c584 <_printf_float+0x244>
 801c5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	dc39      	bgt.n	801c630 <_printf_float+0x2f0>
 801c5bc:	4a1b      	ldr	r2, [pc, #108]	; (801c62c <_printf_float+0x2ec>)
 801c5be:	2301      	movs	r3, #1
 801c5c0:	4631      	mov	r1, r6
 801c5c2:	4628      	mov	r0, r5
 801c5c4:	47b8      	blx	r7
 801c5c6:	3001      	adds	r0, #1
 801c5c8:	f43f af19 	beq.w	801c3fe <_printf_float+0xbe>
 801c5cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801c5d0:	4313      	orrs	r3, r2
 801c5d2:	d102      	bne.n	801c5da <_printf_float+0x29a>
 801c5d4:	6823      	ldr	r3, [r4, #0]
 801c5d6:	07d9      	lsls	r1, r3, #31
 801c5d8:	d5d8      	bpl.n	801c58c <_printf_float+0x24c>
 801c5da:	ee18 3a10 	vmov	r3, s16
 801c5de:	4652      	mov	r2, sl
 801c5e0:	4631      	mov	r1, r6
 801c5e2:	4628      	mov	r0, r5
 801c5e4:	47b8      	blx	r7
 801c5e6:	3001      	adds	r0, #1
 801c5e8:	f43f af09 	beq.w	801c3fe <_printf_float+0xbe>
 801c5ec:	f04f 0900 	mov.w	r9, #0
 801c5f0:	f104 0a1a 	add.w	sl, r4, #26
 801c5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5f6:	425b      	negs	r3, r3
 801c5f8:	454b      	cmp	r3, r9
 801c5fa:	dc01      	bgt.n	801c600 <_printf_float+0x2c0>
 801c5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5fe:	e792      	b.n	801c526 <_printf_float+0x1e6>
 801c600:	2301      	movs	r3, #1
 801c602:	4652      	mov	r2, sl
 801c604:	4631      	mov	r1, r6
 801c606:	4628      	mov	r0, r5
 801c608:	47b8      	blx	r7
 801c60a:	3001      	adds	r0, #1
 801c60c:	f43f aef7 	beq.w	801c3fe <_printf_float+0xbe>
 801c610:	f109 0901 	add.w	r9, r9, #1
 801c614:	e7ee      	b.n	801c5f4 <_printf_float+0x2b4>
 801c616:	bf00      	nop
 801c618:	7fefffff 	.word	0x7fefffff
 801c61c:	08024dd5 	.word	0x08024dd5
 801c620:	08024dd9 	.word	0x08024dd9
 801c624:	08024ddd 	.word	0x08024ddd
 801c628:	08024de1 	.word	0x08024de1
 801c62c:	08024de5 	.word	0x08024de5
 801c630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c634:	429a      	cmp	r2, r3
 801c636:	bfa8      	it	ge
 801c638:	461a      	movge	r2, r3
 801c63a:	2a00      	cmp	r2, #0
 801c63c:	4691      	mov	r9, r2
 801c63e:	dc37      	bgt.n	801c6b0 <_printf_float+0x370>
 801c640:	f04f 0b00 	mov.w	fp, #0
 801c644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c648:	f104 021a 	add.w	r2, r4, #26
 801c64c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c64e:	9305      	str	r3, [sp, #20]
 801c650:	eba3 0309 	sub.w	r3, r3, r9
 801c654:	455b      	cmp	r3, fp
 801c656:	dc33      	bgt.n	801c6c0 <_printf_float+0x380>
 801c658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c65c:	429a      	cmp	r2, r3
 801c65e:	db3b      	blt.n	801c6d8 <_printf_float+0x398>
 801c660:	6823      	ldr	r3, [r4, #0]
 801c662:	07da      	lsls	r2, r3, #31
 801c664:	d438      	bmi.n	801c6d8 <_printf_float+0x398>
 801c666:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801c66a:	eba2 0903 	sub.w	r9, r2, r3
 801c66e:	9b05      	ldr	r3, [sp, #20]
 801c670:	1ad2      	subs	r2, r2, r3
 801c672:	4591      	cmp	r9, r2
 801c674:	bfa8      	it	ge
 801c676:	4691      	movge	r9, r2
 801c678:	f1b9 0f00 	cmp.w	r9, #0
 801c67c:	dc35      	bgt.n	801c6ea <_printf_float+0x3aa>
 801c67e:	f04f 0800 	mov.w	r8, #0
 801c682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c686:	f104 0a1a 	add.w	sl, r4, #26
 801c68a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c68e:	1a9b      	subs	r3, r3, r2
 801c690:	eba3 0309 	sub.w	r3, r3, r9
 801c694:	4543      	cmp	r3, r8
 801c696:	f77f af79 	ble.w	801c58c <_printf_float+0x24c>
 801c69a:	2301      	movs	r3, #1
 801c69c:	4652      	mov	r2, sl
 801c69e:	4631      	mov	r1, r6
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	47b8      	blx	r7
 801c6a4:	3001      	adds	r0, #1
 801c6a6:	f43f aeaa 	beq.w	801c3fe <_printf_float+0xbe>
 801c6aa:	f108 0801 	add.w	r8, r8, #1
 801c6ae:	e7ec      	b.n	801c68a <_printf_float+0x34a>
 801c6b0:	4613      	mov	r3, r2
 801c6b2:	4631      	mov	r1, r6
 801c6b4:	4642      	mov	r2, r8
 801c6b6:	4628      	mov	r0, r5
 801c6b8:	47b8      	blx	r7
 801c6ba:	3001      	adds	r0, #1
 801c6bc:	d1c0      	bne.n	801c640 <_printf_float+0x300>
 801c6be:	e69e      	b.n	801c3fe <_printf_float+0xbe>
 801c6c0:	2301      	movs	r3, #1
 801c6c2:	4631      	mov	r1, r6
 801c6c4:	4628      	mov	r0, r5
 801c6c6:	9205      	str	r2, [sp, #20]
 801c6c8:	47b8      	blx	r7
 801c6ca:	3001      	adds	r0, #1
 801c6cc:	f43f ae97 	beq.w	801c3fe <_printf_float+0xbe>
 801c6d0:	9a05      	ldr	r2, [sp, #20]
 801c6d2:	f10b 0b01 	add.w	fp, fp, #1
 801c6d6:	e7b9      	b.n	801c64c <_printf_float+0x30c>
 801c6d8:	ee18 3a10 	vmov	r3, s16
 801c6dc:	4652      	mov	r2, sl
 801c6de:	4631      	mov	r1, r6
 801c6e0:	4628      	mov	r0, r5
 801c6e2:	47b8      	blx	r7
 801c6e4:	3001      	adds	r0, #1
 801c6e6:	d1be      	bne.n	801c666 <_printf_float+0x326>
 801c6e8:	e689      	b.n	801c3fe <_printf_float+0xbe>
 801c6ea:	9a05      	ldr	r2, [sp, #20]
 801c6ec:	464b      	mov	r3, r9
 801c6ee:	4442      	add	r2, r8
 801c6f0:	4631      	mov	r1, r6
 801c6f2:	4628      	mov	r0, r5
 801c6f4:	47b8      	blx	r7
 801c6f6:	3001      	adds	r0, #1
 801c6f8:	d1c1      	bne.n	801c67e <_printf_float+0x33e>
 801c6fa:	e680      	b.n	801c3fe <_printf_float+0xbe>
 801c6fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c6fe:	2a01      	cmp	r2, #1
 801c700:	dc01      	bgt.n	801c706 <_printf_float+0x3c6>
 801c702:	07db      	lsls	r3, r3, #31
 801c704:	d53a      	bpl.n	801c77c <_printf_float+0x43c>
 801c706:	2301      	movs	r3, #1
 801c708:	4642      	mov	r2, r8
 801c70a:	4631      	mov	r1, r6
 801c70c:	4628      	mov	r0, r5
 801c70e:	47b8      	blx	r7
 801c710:	3001      	adds	r0, #1
 801c712:	f43f ae74 	beq.w	801c3fe <_printf_float+0xbe>
 801c716:	ee18 3a10 	vmov	r3, s16
 801c71a:	4652      	mov	r2, sl
 801c71c:	4631      	mov	r1, r6
 801c71e:	4628      	mov	r0, r5
 801c720:	47b8      	blx	r7
 801c722:	3001      	adds	r0, #1
 801c724:	f43f ae6b 	beq.w	801c3fe <_printf_float+0xbe>
 801c728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c72c:	2200      	movs	r2, #0
 801c72e:	2300      	movs	r3, #0
 801c730:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801c734:	f7e4 f9d8 	bl	8000ae8 <__aeabi_dcmpeq>
 801c738:	b9d8      	cbnz	r0, 801c772 <_printf_float+0x432>
 801c73a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801c73e:	f108 0201 	add.w	r2, r8, #1
 801c742:	4631      	mov	r1, r6
 801c744:	4628      	mov	r0, r5
 801c746:	47b8      	blx	r7
 801c748:	3001      	adds	r0, #1
 801c74a:	d10e      	bne.n	801c76a <_printf_float+0x42a>
 801c74c:	e657      	b.n	801c3fe <_printf_float+0xbe>
 801c74e:	2301      	movs	r3, #1
 801c750:	4652      	mov	r2, sl
 801c752:	4631      	mov	r1, r6
 801c754:	4628      	mov	r0, r5
 801c756:	47b8      	blx	r7
 801c758:	3001      	adds	r0, #1
 801c75a:	f43f ae50 	beq.w	801c3fe <_printf_float+0xbe>
 801c75e:	f108 0801 	add.w	r8, r8, #1
 801c762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c764:	3b01      	subs	r3, #1
 801c766:	4543      	cmp	r3, r8
 801c768:	dcf1      	bgt.n	801c74e <_printf_float+0x40e>
 801c76a:	464b      	mov	r3, r9
 801c76c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c770:	e6da      	b.n	801c528 <_printf_float+0x1e8>
 801c772:	f04f 0800 	mov.w	r8, #0
 801c776:	f104 0a1a 	add.w	sl, r4, #26
 801c77a:	e7f2      	b.n	801c762 <_printf_float+0x422>
 801c77c:	2301      	movs	r3, #1
 801c77e:	4642      	mov	r2, r8
 801c780:	e7df      	b.n	801c742 <_printf_float+0x402>
 801c782:	2301      	movs	r3, #1
 801c784:	464a      	mov	r2, r9
 801c786:	4631      	mov	r1, r6
 801c788:	4628      	mov	r0, r5
 801c78a:	47b8      	blx	r7
 801c78c:	3001      	adds	r0, #1
 801c78e:	f43f ae36 	beq.w	801c3fe <_printf_float+0xbe>
 801c792:	f108 0801 	add.w	r8, r8, #1
 801c796:	68e3      	ldr	r3, [r4, #12]
 801c798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c79a:	1a5b      	subs	r3, r3, r1
 801c79c:	4543      	cmp	r3, r8
 801c79e:	dcf0      	bgt.n	801c782 <_printf_float+0x442>
 801c7a0:	e6f8      	b.n	801c594 <_printf_float+0x254>
 801c7a2:	f04f 0800 	mov.w	r8, #0
 801c7a6:	f104 0919 	add.w	r9, r4, #25
 801c7aa:	e7f4      	b.n	801c796 <_printf_float+0x456>

0801c7ac <_printf_common>:
 801c7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7b0:	4616      	mov	r6, r2
 801c7b2:	4699      	mov	r9, r3
 801c7b4:	688a      	ldr	r2, [r1, #8]
 801c7b6:	690b      	ldr	r3, [r1, #16]
 801c7b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c7bc:	4293      	cmp	r3, r2
 801c7be:	bfb8      	it	lt
 801c7c0:	4613      	movlt	r3, r2
 801c7c2:	6033      	str	r3, [r6, #0]
 801c7c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c7c8:	4607      	mov	r7, r0
 801c7ca:	460c      	mov	r4, r1
 801c7cc:	b10a      	cbz	r2, 801c7d2 <_printf_common+0x26>
 801c7ce:	3301      	adds	r3, #1
 801c7d0:	6033      	str	r3, [r6, #0]
 801c7d2:	6823      	ldr	r3, [r4, #0]
 801c7d4:	0699      	lsls	r1, r3, #26
 801c7d6:	bf42      	ittt	mi
 801c7d8:	6833      	ldrmi	r3, [r6, #0]
 801c7da:	3302      	addmi	r3, #2
 801c7dc:	6033      	strmi	r3, [r6, #0]
 801c7de:	6825      	ldr	r5, [r4, #0]
 801c7e0:	f015 0506 	ands.w	r5, r5, #6
 801c7e4:	d106      	bne.n	801c7f4 <_printf_common+0x48>
 801c7e6:	f104 0a19 	add.w	sl, r4, #25
 801c7ea:	68e3      	ldr	r3, [r4, #12]
 801c7ec:	6832      	ldr	r2, [r6, #0]
 801c7ee:	1a9b      	subs	r3, r3, r2
 801c7f0:	42ab      	cmp	r3, r5
 801c7f2:	dc26      	bgt.n	801c842 <_printf_common+0x96>
 801c7f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c7f8:	1e13      	subs	r3, r2, #0
 801c7fa:	6822      	ldr	r2, [r4, #0]
 801c7fc:	bf18      	it	ne
 801c7fe:	2301      	movne	r3, #1
 801c800:	0692      	lsls	r2, r2, #26
 801c802:	d42b      	bmi.n	801c85c <_printf_common+0xb0>
 801c804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c808:	4649      	mov	r1, r9
 801c80a:	4638      	mov	r0, r7
 801c80c:	47c0      	blx	r8
 801c80e:	3001      	adds	r0, #1
 801c810:	d01e      	beq.n	801c850 <_printf_common+0xa4>
 801c812:	6823      	ldr	r3, [r4, #0]
 801c814:	6922      	ldr	r2, [r4, #16]
 801c816:	f003 0306 	and.w	r3, r3, #6
 801c81a:	2b04      	cmp	r3, #4
 801c81c:	bf02      	ittt	eq
 801c81e:	68e5      	ldreq	r5, [r4, #12]
 801c820:	6833      	ldreq	r3, [r6, #0]
 801c822:	1aed      	subeq	r5, r5, r3
 801c824:	68a3      	ldr	r3, [r4, #8]
 801c826:	bf0c      	ite	eq
 801c828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c82c:	2500      	movne	r5, #0
 801c82e:	4293      	cmp	r3, r2
 801c830:	bfc4      	itt	gt
 801c832:	1a9b      	subgt	r3, r3, r2
 801c834:	18ed      	addgt	r5, r5, r3
 801c836:	2600      	movs	r6, #0
 801c838:	341a      	adds	r4, #26
 801c83a:	42b5      	cmp	r5, r6
 801c83c:	d11a      	bne.n	801c874 <_printf_common+0xc8>
 801c83e:	2000      	movs	r0, #0
 801c840:	e008      	b.n	801c854 <_printf_common+0xa8>
 801c842:	2301      	movs	r3, #1
 801c844:	4652      	mov	r2, sl
 801c846:	4649      	mov	r1, r9
 801c848:	4638      	mov	r0, r7
 801c84a:	47c0      	blx	r8
 801c84c:	3001      	adds	r0, #1
 801c84e:	d103      	bne.n	801c858 <_printf_common+0xac>
 801c850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c858:	3501      	adds	r5, #1
 801c85a:	e7c6      	b.n	801c7ea <_printf_common+0x3e>
 801c85c:	18e1      	adds	r1, r4, r3
 801c85e:	1c5a      	adds	r2, r3, #1
 801c860:	2030      	movs	r0, #48	; 0x30
 801c862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c866:	4422      	add	r2, r4
 801c868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c86c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c870:	3302      	adds	r3, #2
 801c872:	e7c7      	b.n	801c804 <_printf_common+0x58>
 801c874:	2301      	movs	r3, #1
 801c876:	4622      	mov	r2, r4
 801c878:	4649      	mov	r1, r9
 801c87a:	4638      	mov	r0, r7
 801c87c:	47c0      	blx	r8
 801c87e:	3001      	adds	r0, #1
 801c880:	d0e6      	beq.n	801c850 <_printf_common+0xa4>
 801c882:	3601      	adds	r6, #1
 801c884:	e7d9      	b.n	801c83a <_printf_common+0x8e>
	...

0801c888 <_printf_i>:
 801c888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c88c:	7e0f      	ldrb	r7, [r1, #24]
 801c88e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c890:	2f78      	cmp	r7, #120	; 0x78
 801c892:	4691      	mov	r9, r2
 801c894:	4680      	mov	r8, r0
 801c896:	460c      	mov	r4, r1
 801c898:	469a      	mov	sl, r3
 801c89a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c89e:	d807      	bhi.n	801c8b0 <_printf_i+0x28>
 801c8a0:	2f62      	cmp	r7, #98	; 0x62
 801c8a2:	d80a      	bhi.n	801c8ba <_printf_i+0x32>
 801c8a4:	2f00      	cmp	r7, #0
 801c8a6:	f000 80d4 	beq.w	801ca52 <_printf_i+0x1ca>
 801c8aa:	2f58      	cmp	r7, #88	; 0x58
 801c8ac:	f000 80c0 	beq.w	801ca30 <_printf_i+0x1a8>
 801c8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c8b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c8b8:	e03a      	b.n	801c930 <_printf_i+0xa8>
 801c8ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c8be:	2b15      	cmp	r3, #21
 801c8c0:	d8f6      	bhi.n	801c8b0 <_printf_i+0x28>
 801c8c2:	a101      	add	r1, pc, #4	; (adr r1, 801c8c8 <_printf_i+0x40>)
 801c8c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c8c8:	0801c921 	.word	0x0801c921
 801c8cc:	0801c935 	.word	0x0801c935
 801c8d0:	0801c8b1 	.word	0x0801c8b1
 801c8d4:	0801c8b1 	.word	0x0801c8b1
 801c8d8:	0801c8b1 	.word	0x0801c8b1
 801c8dc:	0801c8b1 	.word	0x0801c8b1
 801c8e0:	0801c935 	.word	0x0801c935
 801c8e4:	0801c8b1 	.word	0x0801c8b1
 801c8e8:	0801c8b1 	.word	0x0801c8b1
 801c8ec:	0801c8b1 	.word	0x0801c8b1
 801c8f0:	0801c8b1 	.word	0x0801c8b1
 801c8f4:	0801ca39 	.word	0x0801ca39
 801c8f8:	0801c961 	.word	0x0801c961
 801c8fc:	0801c9f3 	.word	0x0801c9f3
 801c900:	0801c8b1 	.word	0x0801c8b1
 801c904:	0801c8b1 	.word	0x0801c8b1
 801c908:	0801ca5b 	.word	0x0801ca5b
 801c90c:	0801c8b1 	.word	0x0801c8b1
 801c910:	0801c961 	.word	0x0801c961
 801c914:	0801c8b1 	.word	0x0801c8b1
 801c918:	0801c8b1 	.word	0x0801c8b1
 801c91c:	0801c9fb 	.word	0x0801c9fb
 801c920:	682b      	ldr	r3, [r5, #0]
 801c922:	1d1a      	adds	r2, r3, #4
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	602a      	str	r2, [r5, #0]
 801c928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c92c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c930:	2301      	movs	r3, #1
 801c932:	e09f      	b.n	801ca74 <_printf_i+0x1ec>
 801c934:	6820      	ldr	r0, [r4, #0]
 801c936:	682b      	ldr	r3, [r5, #0]
 801c938:	0607      	lsls	r7, r0, #24
 801c93a:	f103 0104 	add.w	r1, r3, #4
 801c93e:	6029      	str	r1, [r5, #0]
 801c940:	d501      	bpl.n	801c946 <_printf_i+0xbe>
 801c942:	681e      	ldr	r6, [r3, #0]
 801c944:	e003      	b.n	801c94e <_printf_i+0xc6>
 801c946:	0646      	lsls	r6, r0, #25
 801c948:	d5fb      	bpl.n	801c942 <_printf_i+0xba>
 801c94a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c94e:	2e00      	cmp	r6, #0
 801c950:	da03      	bge.n	801c95a <_printf_i+0xd2>
 801c952:	232d      	movs	r3, #45	; 0x2d
 801c954:	4276      	negs	r6, r6
 801c956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c95a:	485a      	ldr	r0, [pc, #360]	; (801cac4 <_printf_i+0x23c>)
 801c95c:	230a      	movs	r3, #10
 801c95e:	e012      	b.n	801c986 <_printf_i+0xfe>
 801c960:	682b      	ldr	r3, [r5, #0]
 801c962:	6820      	ldr	r0, [r4, #0]
 801c964:	1d19      	adds	r1, r3, #4
 801c966:	6029      	str	r1, [r5, #0]
 801c968:	0605      	lsls	r5, r0, #24
 801c96a:	d501      	bpl.n	801c970 <_printf_i+0xe8>
 801c96c:	681e      	ldr	r6, [r3, #0]
 801c96e:	e002      	b.n	801c976 <_printf_i+0xee>
 801c970:	0641      	lsls	r1, r0, #25
 801c972:	d5fb      	bpl.n	801c96c <_printf_i+0xe4>
 801c974:	881e      	ldrh	r6, [r3, #0]
 801c976:	4853      	ldr	r0, [pc, #332]	; (801cac4 <_printf_i+0x23c>)
 801c978:	2f6f      	cmp	r7, #111	; 0x6f
 801c97a:	bf0c      	ite	eq
 801c97c:	2308      	moveq	r3, #8
 801c97e:	230a      	movne	r3, #10
 801c980:	2100      	movs	r1, #0
 801c982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c986:	6865      	ldr	r5, [r4, #4]
 801c988:	60a5      	str	r5, [r4, #8]
 801c98a:	2d00      	cmp	r5, #0
 801c98c:	bfa2      	ittt	ge
 801c98e:	6821      	ldrge	r1, [r4, #0]
 801c990:	f021 0104 	bicge.w	r1, r1, #4
 801c994:	6021      	strge	r1, [r4, #0]
 801c996:	b90e      	cbnz	r6, 801c99c <_printf_i+0x114>
 801c998:	2d00      	cmp	r5, #0
 801c99a:	d04b      	beq.n	801ca34 <_printf_i+0x1ac>
 801c99c:	4615      	mov	r5, r2
 801c99e:	fbb6 f1f3 	udiv	r1, r6, r3
 801c9a2:	fb03 6711 	mls	r7, r3, r1, r6
 801c9a6:	5dc7      	ldrb	r7, [r0, r7]
 801c9a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c9ac:	4637      	mov	r7, r6
 801c9ae:	42bb      	cmp	r3, r7
 801c9b0:	460e      	mov	r6, r1
 801c9b2:	d9f4      	bls.n	801c99e <_printf_i+0x116>
 801c9b4:	2b08      	cmp	r3, #8
 801c9b6:	d10b      	bne.n	801c9d0 <_printf_i+0x148>
 801c9b8:	6823      	ldr	r3, [r4, #0]
 801c9ba:	07de      	lsls	r6, r3, #31
 801c9bc:	d508      	bpl.n	801c9d0 <_printf_i+0x148>
 801c9be:	6923      	ldr	r3, [r4, #16]
 801c9c0:	6861      	ldr	r1, [r4, #4]
 801c9c2:	4299      	cmp	r1, r3
 801c9c4:	bfde      	ittt	le
 801c9c6:	2330      	movle	r3, #48	; 0x30
 801c9c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c9cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c9d0:	1b52      	subs	r2, r2, r5
 801c9d2:	6122      	str	r2, [r4, #16]
 801c9d4:	f8cd a000 	str.w	sl, [sp]
 801c9d8:	464b      	mov	r3, r9
 801c9da:	aa03      	add	r2, sp, #12
 801c9dc:	4621      	mov	r1, r4
 801c9de:	4640      	mov	r0, r8
 801c9e0:	f7ff fee4 	bl	801c7ac <_printf_common>
 801c9e4:	3001      	adds	r0, #1
 801c9e6:	d14a      	bne.n	801ca7e <_printf_i+0x1f6>
 801c9e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c9ec:	b004      	add	sp, #16
 801c9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c9f2:	6823      	ldr	r3, [r4, #0]
 801c9f4:	f043 0320 	orr.w	r3, r3, #32
 801c9f8:	6023      	str	r3, [r4, #0]
 801c9fa:	4833      	ldr	r0, [pc, #204]	; (801cac8 <_printf_i+0x240>)
 801c9fc:	2778      	movs	r7, #120	; 0x78
 801c9fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ca02:	6823      	ldr	r3, [r4, #0]
 801ca04:	6829      	ldr	r1, [r5, #0]
 801ca06:	061f      	lsls	r7, r3, #24
 801ca08:	f851 6b04 	ldr.w	r6, [r1], #4
 801ca0c:	d402      	bmi.n	801ca14 <_printf_i+0x18c>
 801ca0e:	065f      	lsls	r7, r3, #25
 801ca10:	bf48      	it	mi
 801ca12:	b2b6      	uxthmi	r6, r6
 801ca14:	07df      	lsls	r7, r3, #31
 801ca16:	bf48      	it	mi
 801ca18:	f043 0320 	orrmi.w	r3, r3, #32
 801ca1c:	6029      	str	r1, [r5, #0]
 801ca1e:	bf48      	it	mi
 801ca20:	6023      	strmi	r3, [r4, #0]
 801ca22:	b91e      	cbnz	r6, 801ca2c <_printf_i+0x1a4>
 801ca24:	6823      	ldr	r3, [r4, #0]
 801ca26:	f023 0320 	bic.w	r3, r3, #32
 801ca2a:	6023      	str	r3, [r4, #0]
 801ca2c:	2310      	movs	r3, #16
 801ca2e:	e7a7      	b.n	801c980 <_printf_i+0xf8>
 801ca30:	4824      	ldr	r0, [pc, #144]	; (801cac4 <_printf_i+0x23c>)
 801ca32:	e7e4      	b.n	801c9fe <_printf_i+0x176>
 801ca34:	4615      	mov	r5, r2
 801ca36:	e7bd      	b.n	801c9b4 <_printf_i+0x12c>
 801ca38:	682b      	ldr	r3, [r5, #0]
 801ca3a:	6826      	ldr	r6, [r4, #0]
 801ca3c:	6961      	ldr	r1, [r4, #20]
 801ca3e:	1d18      	adds	r0, r3, #4
 801ca40:	6028      	str	r0, [r5, #0]
 801ca42:	0635      	lsls	r5, r6, #24
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	d501      	bpl.n	801ca4c <_printf_i+0x1c4>
 801ca48:	6019      	str	r1, [r3, #0]
 801ca4a:	e002      	b.n	801ca52 <_printf_i+0x1ca>
 801ca4c:	0670      	lsls	r0, r6, #25
 801ca4e:	d5fb      	bpl.n	801ca48 <_printf_i+0x1c0>
 801ca50:	8019      	strh	r1, [r3, #0]
 801ca52:	2300      	movs	r3, #0
 801ca54:	6123      	str	r3, [r4, #16]
 801ca56:	4615      	mov	r5, r2
 801ca58:	e7bc      	b.n	801c9d4 <_printf_i+0x14c>
 801ca5a:	682b      	ldr	r3, [r5, #0]
 801ca5c:	1d1a      	adds	r2, r3, #4
 801ca5e:	602a      	str	r2, [r5, #0]
 801ca60:	681d      	ldr	r5, [r3, #0]
 801ca62:	6862      	ldr	r2, [r4, #4]
 801ca64:	2100      	movs	r1, #0
 801ca66:	4628      	mov	r0, r5
 801ca68:	f7e3 fbc2 	bl	80001f0 <memchr>
 801ca6c:	b108      	cbz	r0, 801ca72 <_printf_i+0x1ea>
 801ca6e:	1b40      	subs	r0, r0, r5
 801ca70:	6060      	str	r0, [r4, #4]
 801ca72:	6863      	ldr	r3, [r4, #4]
 801ca74:	6123      	str	r3, [r4, #16]
 801ca76:	2300      	movs	r3, #0
 801ca78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca7c:	e7aa      	b.n	801c9d4 <_printf_i+0x14c>
 801ca7e:	6923      	ldr	r3, [r4, #16]
 801ca80:	462a      	mov	r2, r5
 801ca82:	4649      	mov	r1, r9
 801ca84:	4640      	mov	r0, r8
 801ca86:	47d0      	blx	sl
 801ca88:	3001      	adds	r0, #1
 801ca8a:	d0ad      	beq.n	801c9e8 <_printf_i+0x160>
 801ca8c:	6823      	ldr	r3, [r4, #0]
 801ca8e:	079b      	lsls	r3, r3, #30
 801ca90:	d413      	bmi.n	801caba <_printf_i+0x232>
 801ca92:	68e0      	ldr	r0, [r4, #12]
 801ca94:	9b03      	ldr	r3, [sp, #12]
 801ca96:	4298      	cmp	r0, r3
 801ca98:	bfb8      	it	lt
 801ca9a:	4618      	movlt	r0, r3
 801ca9c:	e7a6      	b.n	801c9ec <_printf_i+0x164>
 801ca9e:	2301      	movs	r3, #1
 801caa0:	4632      	mov	r2, r6
 801caa2:	4649      	mov	r1, r9
 801caa4:	4640      	mov	r0, r8
 801caa6:	47d0      	blx	sl
 801caa8:	3001      	adds	r0, #1
 801caaa:	d09d      	beq.n	801c9e8 <_printf_i+0x160>
 801caac:	3501      	adds	r5, #1
 801caae:	68e3      	ldr	r3, [r4, #12]
 801cab0:	9903      	ldr	r1, [sp, #12]
 801cab2:	1a5b      	subs	r3, r3, r1
 801cab4:	42ab      	cmp	r3, r5
 801cab6:	dcf2      	bgt.n	801ca9e <_printf_i+0x216>
 801cab8:	e7eb      	b.n	801ca92 <_printf_i+0x20a>
 801caba:	2500      	movs	r5, #0
 801cabc:	f104 0619 	add.w	r6, r4, #25
 801cac0:	e7f5      	b.n	801caae <_printf_i+0x226>
 801cac2:	bf00      	nop
 801cac4:	08024de7 	.word	0x08024de7
 801cac8:	08024df8 	.word	0x08024df8

0801cacc <__sflush_r>:
 801cacc:	898a      	ldrh	r2, [r1, #12]
 801cace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cad2:	4605      	mov	r5, r0
 801cad4:	0710      	lsls	r0, r2, #28
 801cad6:	460c      	mov	r4, r1
 801cad8:	d458      	bmi.n	801cb8c <__sflush_r+0xc0>
 801cada:	684b      	ldr	r3, [r1, #4]
 801cadc:	2b00      	cmp	r3, #0
 801cade:	dc05      	bgt.n	801caec <__sflush_r+0x20>
 801cae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	dc02      	bgt.n	801caec <__sflush_r+0x20>
 801cae6:	2000      	movs	r0, #0
 801cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801caec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801caee:	2e00      	cmp	r6, #0
 801caf0:	d0f9      	beq.n	801cae6 <__sflush_r+0x1a>
 801caf2:	2300      	movs	r3, #0
 801caf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801caf8:	682f      	ldr	r7, [r5, #0]
 801cafa:	6a21      	ldr	r1, [r4, #32]
 801cafc:	602b      	str	r3, [r5, #0]
 801cafe:	d032      	beq.n	801cb66 <__sflush_r+0x9a>
 801cb00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cb02:	89a3      	ldrh	r3, [r4, #12]
 801cb04:	075a      	lsls	r2, r3, #29
 801cb06:	d505      	bpl.n	801cb14 <__sflush_r+0x48>
 801cb08:	6863      	ldr	r3, [r4, #4]
 801cb0a:	1ac0      	subs	r0, r0, r3
 801cb0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cb0e:	b10b      	cbz	r3, 801cb14 <__sflush_r+0x48>
 801cb10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cb12:	1ac0      	subs	r0, r0, r3
 801cb14:	2300      	movs	r3, #0
 801cb16:	4602      	mov	r2, r0
 801cb18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cb1a:	6a21      	ldr	r1, [r4, #32]
 801cb1c:	4628      	mov	r0, r5
 801cb1e:	47b0      	blx	r6
 801cb20:	1c43      	adds	r3, r0, #1
 801cb22:	89a3      	ldrh	r3, [r4, #12]
 801cb24:	d106      	bne.n	801cb34 <__sflush_r+0x68>
 801cb26:	6829      	ldr	r1, [r5, #0]
 801cb28:	291d      	cmp	r1, #29
 801cb2a:	d82b      	bhi.n	801cb84 <__sflush_r+0xb8>
 801cb2c:	4a29      	ldr	r2, [pc, #164]	; (801cbd4 <__sflush_r+0x108>)
 801cb2e:	410a      	asrs	r2, r1
 801cb30:	07d6      	lsls	r6, r2, #31
 801cb32:	d427      	bmi.n	801cb84 <__sflush_r+0xb8>
 801cb34:	2200      	movs	r2, #0
 801cb36:	6062      	str	r2, [r4, #4]
 801cb38:	04d9      	lsls	r1, r3, #19
 801cb3a:	6922      	ldr	r2, [r4, #16]
 801cb3c:	6022      	str	r2, [r4, #0]
 801cb3e:	d504      	bpl.n	801cb4a <__sflush_r+0x7e>
 801cb40:	1c42      	adds	r2, r0, #1
 801cb42:	d101      	bne.n	801cb48 <__sflush_r+0x7c>
 801cb44:	682b      	ldr	r3, [r5, #0]
 801cb46:	b903      	cbnz	r3, 801cb4a <__sflush_r+0x7e>
 801cb48:	6560      	str	r0, [r4, #84]	; 0x54
 801cb4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cb4c:	602f      	str	r7, [r5, #0]
 801cb4e:	2900      	cmp	r1, #0
 801cb50:	d0c9      	beq.n	801cae6 <__sflush_r+0x1a>
 801cb52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cb56:	4299      	cmp	r1, r3
 801cb58:	d002      	beq.n	801cb60 <__sflush_r+0x94>
 801cb5a:	4628      	mov	r0, r5
 801cb5c:	f001 f9c6 	bl	801deec <_free_r>
 801cb60:	2000      	movs	r0, #0
 801cb62:	6360      	str	r0, [r4, #52]	; 0x34
 801cb64:	e7c0      	b.n	801cae8 <__sflush_r+0x1c>
 801cb66:	2301      	movs	r3, #1
 801cb68:	4628      	mov	r0, r5
 801cb6a:	47b0      	blx	r6
 801cb6c:	1c41      	adds	r1, r0, #1
 801cb6e:	d1c8      	bne.n	801cb02 <__sflush_r+0x36>
 801cb70:	682b      	ldr	r3, [r5, #0]
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d0c5      	beq.n	801cb02 <__sflush_r+0x36>
 801cb76:	2b1d      	cmp	r3, #29
 801cb78:	d001      	beq.n	801cb7e <__sflush_r+0xb2>
 801cb7a:	2b16      	cmp	r3, #22
 801cb7c:	d101      	bne.n	801cb82 <__sflush_r+0xb6>
 801cb7e:	602f      	str	r7, [r5, #0]
 801cb80:	e7b1      	b.n	801cae6 <__sflush_r+0x1a>
 801cb82:	89a3      	ldrh	r3, [r4, #12]
 801cb84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb88:	81a3      	strh	r3, [r4, #12]
 801cb8a:	e7ad      	b.n	801cae8 <__sflush_r+0x1c>
 801cb8c:	690f      	ldr	r7, [r1, #16]
 801cb8e:	2f00      	cmp	r7, #0
 801cb90:	d0a9      	beq.n	801cae6 <__sflush_r+0x1a>
 801cb92:	0793      	lsls	r3, r2, #30
 801cb94:	680e      	ldr	r6, [r1, #0]
 801cb96:	bf08      	it	eq
 801cb98:	694b      	ldreq	r3, [r1, #20]
 801cb9a:	600f      	str	r7, [r1, #0]
 801cb9c:	bf18      	it	ne
 801cb9e:	2300      	movne	r3, #0
 801cba0:	eba6 0807 	sub.w	r8, r6, r7
 801cba4:	608b      	str	r3, [r1, #8]
 801cba6:	f1b8 0f00 	cmp.w	r8, #0
 801cbaa:	dd9c      	ble.n	801cae6 <__sflush_r+0x1a>
 801cbac:	6a21      	ldr	r1, [r4, #32]
 801cbae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cbb0:	4643      	mov	r3, r8
 801cbb2:	463a      	mov	r2, r7
 801cbb4:	4628      	mov	r0, r5
 801cbb6:	47b0      	blx	r6
 801cbb8:	2800      	cmp	r0, #0
 801cbba:	dc06      	bgt.n	801cbca <__sflush_r+0xfe>
 801cbbc:	89a3      	ldrh	r3, [r4, #12]
 801cbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cbc2:	81a3      	strh	r3, [r4, #12]
 801cbc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cbc8:	e78e      	b.n	801cae8 <__sflush_r+0x1c>
 801cbca:	4407      	add	r7, r0
 801cbcc:	eba8 0800 	sub.w	r8, r8, r0
 801cbd0:	e7e9      	b.n	801cba6 <__sflush_r+0xda>
 801cbd2:	bf00      	nop
 801cbd4:	dfbffffe 	.word	0xdfbffffe

0801cbd8 <_fflush_r>:
 801cbd8:	b538      	push	{r3, r4, r5, lr}
 801cbda:	690b      	ldr	r3, [r1, #16]
 801cbdc:	4605      	mov	r5, r0
 801cbde:	460c      	mov	r4, r1
 801cbe0:	b913      	cbnz	r3, 801cbe8 <_fflush_r+0x10>
 801cbe2:	2500      	movs	r5, #0
 801cbe4:	4628      	mov	r0, r5
 801cbe6:	bd38      	pop	{r3, r4, r5, pc}
 801cbe8:	b118      	cbz	r0, 801cbf2 <_fflush_r+0x1a>
 801cbea:	6a03      	ldr	r3, [r0, #32]
 801cbec:	b90b      	cbnz	r3, 801cbf2 <_fflush_r+0x1a>
 801cbee:	f000 f8bb 	bl	801cd68 <__sinit>
 801cbf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	d0f3      	beq.n	801cbe2 <_fflush_r+0xa>
 801cbfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cbfc:	07d0      	lsls	r0, r2, #31
 801cbfe:	d404      	bmi.n	801cc0a <_fflush_r+0x32>
 801cc00:	0599      	lsls	r1, r3, #22
 801cc02:	d402      	bmi.n	801cc0a <_fflush_r+0x32>
 801cc04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc06:	f000 fada 	bl	801d1be <__retarget_lock_acquire_recursive>
 801cc0a:	4628      	mov	r0, r5
 801cc0c:	4621      	mov	r1, r4
 801cc0e:	f7ff ff5d 	bl	801cacc <__sflush_r>
 801cc12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cc14:	07da      	lsls	r2, r3, #31
 801cc16:	4605      	mov	r5, r0
 801cc18:	d4e4      	bmi.n	801cbe4 <_fflush_r+0xc>
 801cc1a:	89a3      	ldrh	r3, [r4, #12]
 801cc1c:	059b      	lsls	r3, r3, #22
 801cc1e:	d4e1      	bmi.n	801cbe4 <_fflush_r+0xc>
 801cc20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cc22:	f000 facd 	bl	801d1c0 <__retarget_lock_release_recursive>
 801cc26:	e7dd      	b.n	801cbe4 <_fflush_r+0xc>

0801cc28 <fflush>:
 801cc28:	4601      	mov	r1, r0
 801cc2a:	b920      	cbnz	r0, 801cc36 <fflush+0xe>
 801cc2c:	4a04      	ldr	r2, [pc, #16]	; (801cc40 <fflush+0x18>)
 801cc2e:	4905      	ldr	r1, [pc, #20]	; (801cc44 <fflush+0x1c>)
 801cc30:	4805      	ldr	r0, [pc, #20]	; (801cc48 <fflush+0x20>)
 801cc32:	f000 b8b1 	b.w	801cd98 <_fwalk_sglue>
 801cc36:	4b05      	ldr	r3, [pc, #20]	; (801cc4c <fflush+0x24>)
 801cc38:	6818      	ldr	r0, [r3, #0]
 801cc3a:	f7ff bfcd 	b.w	801cbd8 <_fflush_r>
 801cc3e:	bf00      	nop
 801cc40:	20000d44 	.word	0x20000d44
 801cc44:	0801cbd9 	.word	0x0801cbd9
 801cc48:	20000d50 	.word	0x20000d50
 801cc4c:	20000d9c 	.word	0x20000d9c

0801cc50 <std>:
 801cc50:	2300      	movs	r3, #0
 801cc52:	b510      	push	{r4, lr}
 801cc54:	4604      	mov	r4, r0
 801cc56:	e9c0 3300 	strd	r3, r3, [r0]
 801cc5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cc5e:	6083      	str	r3, [r0, #8]
 801cc60:	8181      	strh	r1, [r0, #12]
 801cc62:	6643      	str	r3, [r0, #100]	; 0x64
 801cc64:	81c2      	strh	r2, [r0, #14]
 801cc66:	6183      	str	r3, [r0, #24]
 801cc68:	4619      	mov	r1, r3
 801cc6a:	2208      	movs	r2, #8
 801cc6c:	305c      	adds	r0, #92	; 0x5c
 801cc6e:	f000 f9a3 	bl	801cfb8 <memset>
 801cc72:	4b0d      	ldr	r3, [pc, #52]	; (801cca8 <std+0x58>)
 801cc74:	6263      	str	r3, [r4, #36]	; 0x24
 801cc76:	4b0d      	ldr	r3, [pc, #52]	; (801ccac <std+0x5c>)
 801cc78:	62a3      	str	r3, [r4, #40]	; 0x28
 801cc7a:	4b0d      	ldr	r3, [pc, #52]	; (801ccb0 <std+0x60>)
 801cc7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cc7e:	4b0d      	ldr	r3, [pc, #52]	; (801ccb4 <std+0x64>)
 801cc80:	6323      	str	r3, [r4, #48]	; 0x30
 801cc82:	4b0d      	ldr	r3, [pc, #52]	; (801ccb8 <std+0x68>)
 801cc84:	6224      	str	r4, [r4, #32]
 801cc86:	429c      	cmp	r4, r3
 801cc88:	d006      	beq.n	801cc98 <std+0x48>
 801cc8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801cc8e:	4294      	cmp	r4, r2
 801cc90:	d002      	beq.n	801cc98 <std+0x48>
 801cc92:	33d0      	adds	r3, #208	; 0xd0
 801cc94:	429c      	cmp	r4, r3
 801cc96:	d105      	bne.n	801cca4 <std+0x54>
 801cc98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cca0:	f000 ba8c 	b.w	801d1bc <__retarget_lock_init_recursive>
 801cca4:	bd10      	pop	{r4, pc}
 801cca6:	bf00      	nop
 801cca8:	0801ce09 	.word	0x0801ce09
 801ccac:	0801ce2b 	.word	0x0801ce2b
 801ccb0:	0801ce63 	.word	0x0801ce63
 801ccb4:	0801ce87 	.word	0x0801ce87
 801ccb8:	2000ff6c 	.word	0x2000ff6c

0801ccbc <stdio_exit_handler>:
 801ccbc:	4a02      	ldr	r2, [pc, #8]	; (801ccc8 <stdio_exit_handler+0xc>)
 801ccbe:	4903      	ldr	r1, [pc, #12]	; (801cccc <stdio_exit_handler+0x10>)
 801ccc0:	4803      	ldr	r0, [pc, #12]	; (801ccd0 <stdio_exit_handler+0x14>)
 801ccc2:	f000 b869 	b.w	801cd98 <_fwalk_sglue>
 801ccc6:	bf00      	nop
 801ccc8:	20000d44 	.word	0x20000d44
 801cccc:	0801cbd9 	.word	0x0801cbd9
 801ccd0:	20000d50 	.word	0x20000d50

0801ccd4 <cleanup_stdio>:
 801ccd4:	6841      	ldr	r1, [r0, #4]
 801ccd6:	4b0c      	ldr	r3, [pc, #48]	; (801cd08 <cleanup_stdio+0x34>)
 801ccd8:	4299      	cmp	r1, r3
 801ccda:	b510      	push	{r4, lr}
 801ccdc:	4604      	mov	r4, r0
 801ccde:	d001      	beq.n	801cce4 <cleanup_stdio+0x10>
 801cce0:	f7ff ff7a 	bl	801cbd8 <_fflush_r>
 801cce4:	68a1      	ldr	r1, [r4, #8]
 801cce6:	4b09      	ldr	r3, [pc, #36]	; (801cd0c <cleanup_stdio+0x38>)
 801cce8:	4299      	cmp	r1, r3
 801ccea:	d002      	beq.n	801ccf2 <cleanup_stdio+0x1e>
 801ccec:	4620      	mov	r0, r4
 801ccee:	f7ff ff73 	bl	801cbd8 <_fflush_r>
 801ccf2:	68e1      	ldr	r1, [r4, #12]
 801ccf4:	4b06      	ldr	r3, [pc, #24]	; (801cd10 <cleanup_stdio+0x3c>)
 801ccf6:	4299      	cmp	r1, r3
 801ccf8:	d004      	beq.n	801cd04 <cleanup_stdio+0x30>
 801ccfa:	4620      	mov	r0, r4
 801ccfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd00:	f7ff bf6a 	b.w	801cbd8 <_fflush_r>
 801cd04:	bd10      	pop	{r4, pc}
 801cd06:	bf00      	nop
 801cd08:	2000ff6c 	.word	0x2000ff6c
 801cd0c:	2000ffd4 	.word	0x2000ffd4
 801cd10:	2001003c 	.word	0x2001003c

0801cd14 <global_stdio_init.part.0>:
 801cd14:	b510      	push	{r4, lr}
 801cd16:	4b0b      	ldr	r3, [pc, #44]	; (801cd44 <global_stdio_init.part.0+0x30>)
 801cd18:	4c0b      	ldr	r4, [pc, #44]	; (801cd48 <global_stdio_init.part.0+0x34>)
 801cd1a:	4a0c      	ldr	r2, [pc, #48]	; (801cd4c <global_stdio_init.part.0+0x38>)
 801cd1c:	601a      	str	r2, [r3, #0]
 801cd1e:	4620      	mov	r0, r4
 801cd20:	2200      	movs	r2, #0
 801cd22:	2104      	movs	r1, #4
 801cd24:	f7ff ff94 	bl	801cc50 <std>
 801cd28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801cd2c:	2201      	movs	r2, #1
 801cd2e:	2109      	movs	r1, #9
 801cd30:	f7ff ff8e 	bl	801cc50 <std>
 801cd34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801cd38:	2202      	movs	r2, #2
 801cd3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd3e:	2112      	movs	r1, #18
 801cd40:	f7ff bf86 	b.w	801cc50 <std>
 801cd44:	200100a4 	.word	0x200100a4
 801cd48:	2000ff6c 	.word	0x2000ff6c
 801cd4c:	0801ccbd 	.word	0x0801ccbd

0801cd50 <__sfp_lock_acquire>:
 801cd50:	4801      	ldr	r0, [pc, #4]	; (801cd58 <__sfp_lock_acquire+0x8>)
 801cd52:	f000 ba34 	b.w	801d1be <__retarget_lock_acquire_recursive>
 801cd56:	bf00      	nop
 801cd58:	200100ad 	.word	0x200100ad

0801cd5c <__sfp_lock_release>:
 801cd5c:	4801      	ldr	r0, [pc, #4]	; (801cd64 <__sfp_lock_release+0x8>)
 801cd5e:	f000 ba2f 	b.w	801d1c0 <__retarget_lock_release_recursive>
 801cd62:	bf00      	nop
 801cd64:	200100ad 	.word	0x200100ad

0801cd68 <__sinit>:
 801cd68:	b510      	push	{r4, lr}
 801cd6a:	4604      	mov	r4, r0
 801cd6c:	f7ff fff0 	bl	801cd50 <__sfp_lock_acquire>
 801cd70:	6a23      	ldr	r3, [r4, #32]
 801cd72:	b11b      	cbz	r3, 801cd7c <__sinit+0x14>
 801cd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd78:	f7ff bff0 	b.w	801cd5c <__sfp_lock_release>
 801cd7c:	4b04      	ldr	r3, [pc, #16]	; (801cd90 <__sinit+0x28>)
 801cd7e:	6223      	str	r3, [r4, #32]
 801cd80:	4b04      	ldr	r3, [pc, #16]	; (801cd94 <__sinit+0x2c>)
 801cd82:	681b      	ldr	r3, [r3, #0]
 801cd84:	2b00      	cmp	r3, #0
 801cd86:	d1f5      	bne.n	801cd74 <__sinit+0xc>
 801cd88:	f7ff ffc4 	bl	801cd14 <global_stdio_init.part.0>
 801cd8c:	e7f2      	b.n	801cd74 <__sinit+0xc>
 801cd8e:	bf00      	nop
 801cd90:	0801ccd5 	.word	0x0801ccd5
 801cd94:	200100a4 	.word	0x200100a4

0801cd98 <_fwalk_sglue>:
 801cd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd9c:	4607      	mov	r7, r0
 801cd9e:	4688      	mov	r8, r1
 801cda0:	4614      	mov	r4, r2
 801cda2:	2600      	movs	r6, #0
 801cda4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cda8:	f1b9 0901 	subs.w	r9, r9, #1
 801cdac:	d505      	bpl.n	801cdba <_fwalk_sglue+0x22>
 801cdae:	6824      	ldr	r4, [r4, #0]
 801cdb0:	2c00      	cmp	r4, #0
 801cdb2:	d1f7      	bne.n	801cda4 <_fwalk_sglue+0xc>
 801cdb4:	4630      	mov	r0, r6
 801cdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdba:	89ab      	ldrh	r3, [r5, #12]
 801cdbc:	2b01      	cmp	r3, #1
 801cdbe:	d907      	bls.n	801cdd0 <_fwalk_sglue+0x38>
 801cdc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cdc4:	3301      	adds	r3, #1
 801cdc6:	d003      	beq.n	801cdd0 <_fwalk_sglue+0x38>
 801cdc8:	4629      	mov	r1, r5
 801cdca:	4638      	mov	r0, r7
 801cdcc:	47c0      	blx	r8
 801cdce:	4306      	orrs	r6, r0
 801cdd0:	3568      	adds	r5, #104	; 0x68
 801cdd2:	e7e9      	b.n	801cda8 <_fwalk_sglue+0x10>

0801cdd4 <iprintf>:
 801cdd4:	b40f      	push	{r0, r1, r2, r3}
 801cdd6:	b507      	push	{r0, r1, r2, lr}
 801cdd8:	4906      	ldr	r1, [pc, #24]	; (801cdf4 <iprintf+0x20>)
 801cdda:	ab04      	add	r3, sp, #16
 801cddc:	6808      	ldr	r0, [r1, #0]
 801cdde:	f853 2b04 	ldr.w	r2, [r3], #4
 801cde2:	6881      	ldr	r1, [r0, #8]
 801cde4:	9301      	str	r3, [sp, #4]
 801cde6:	f001 fd27 	bl	801e838 <_vfiprintf_r>
 801cdea:	b003      	add	sp, #12
 801cdec:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdf0:	b004      	add	sp, #16
 801cdf2:	4770      	bx	lr
 801cdf4:	20000d9c 	.word	0x20000d9c

0801cdf8 <putchar>:
 801cdf8:	4b02      	ldr	r3, [pc, #8]	; (801ce04 <putchar+0xc>)
 801cdfa:	4601      	mov	r1, r0
 801cdfc:	6818      	ldr	r0, [r3, #0]
 801cdfe:	6882      	ldr	r2, [r0, #8]
 801ce00:	f001 be96 	b.w	801eb30 <_putc_r>
 801ce04:	20000d9c 	.word	0x20000d9c

0801ce08 <__sread>:
 801ce08:	b510      	push	{r4, lr}
 801ce0a:	460c      	mov	r4, r1
 801ce0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce10:	f000 f986 	bl	801d120 <_read_r>
 801ce14:	2800      	cmp	r0, #0
 801ce16:	bfab      	itete	ge
 801ce18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ce1a:	89a3      	ldrhlt	r3, [r4, #12]
 801ce1c:	181b      	addge	r3, r3, r0
 801ce1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ce22:	bfac      	ite	ge
 801ce24:	6563      	strge	r3, [r4, #84]	; 0x54
 801ce26:	81a3      	strhlt	r3, [r4, #12]
 801ce28:	bd10      	pop	{r4, pc}

0801ce2a <__swrite>:
 801ce2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce2e:	461f      	mov	r7, r3
 801ce30:	898b      	ldrh	r3, [r1, #12]
 801ce32:	05db      	lsls	r3, r3, #23
 801ce34:	4605      	mov	r5, r0
 801ce36:	460c      	mov	r4, r1
 801ce38:	4616      	mov	r6, r2
 801ce3a:	d505      	bpl.n	801ce48 <__swrite+0x1e>
 801ce3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce40:	2302      	movs	r3, #2
 801ce42:	2200      	movs	r2, #0
 801ce44:	f000 f95a 	bl	801d0fc <_lseek_r>
 801ce48:	89a3      	ldrh	r3, [r4, #12]
 801ce4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ce52:	81a3      	strh	r3, [r4, #12]
 801ce54:	4632      	mov	r2, r6
 801ce56:	463b      	mov	r3, r7
 801ce58:	4628      	mov	r0, r5
 801ce5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce5e:	f000 b971 	b.w	801d144 <_write_r>

0801ce62 <__sseek>:
 801ce62:	b510      	push	{r4, lr}
 801ce64:	460c      	mov	r4, r1
 801ce66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce6a:	f000 f947 	bl	801d0fc <_lseek_r>
 801ce6e:	1c43      	adds	r3, r0, #1
 801ce70:	89a3      	ldrh	r3, [r4, #12]
 801ce72:	bf15      	itete	ne
 801ce74:	6560      	strne	r0, [r4, #84]	; 0x54
 801ce76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ce7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ce7e:	81a3      	strheq	r3, [r4, #12]
 801ce80:	bf18      	it	ne
 801ce82:	81a3      	strhne	r3, [r4, #12]
 801ce84:	bd10      	pop	{r4, pc}

0801ce86 <__sclose>:
 801ce86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce8a:	f000 b8d1 	b.w	801d030 <_close_r>

0801ce8e <__swbuf_r>:
 801ce8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce90:	460e      	mov	r6, r1
 801ce92:	4614      	mov	r4, r2
 801ce94:	4605      	mov	r5, r0
 801ce96:	b118      	cbz	r0, 801cea0 <__swbuf_r+0x12>
 801ce98:	6a03      	ldr	r3, [r0, #32]
 801ce9a:	b90b      	cbnz	r3, 801cea0 <__swbuf_r+0x12>
 801ce9c:	f7ff ff64 	bl	801cd68 <__sinit>
 801cea0:	69a3      	ldr	r3, [r4, #24]
 801cea2:	60a3      	str	r3, [r4, #8]
 801cea4:	89a3      	ldrh	r3, [r4, #12]
 801cea6:	071a      	lsls	r2, r3, #28
 801cea8:	d525      	bpl.n	801cef6 <__swbuf_r+0x68>
 801ceaa:	6923      	ldr	r3, [r4, #16]
 801ceac:	b31b      	cbz	r3, 801cef6 <__swbuf_r+0x68>
 801ceae:	6823      	ldr	r3, [r4, #0]
 801ceb0:	6922      	ldr	r2, [r4, #16]
 801ceb2:	1a98      	subs	r0, r3, r2
 801ceb4:	6963      	ldr	r3, [r4, #20]
 801ceb6:	b2f6      	uxtb	r6, r6
 801ceb8:	4283      	cmp	r3, r0
 801ceba:	4637      	mov	r7, r6
 801cebc:	dc04      	bgt.n	801cec8 <__swbuf_r+0x3a>
 801cebe:	4621      	mov	r1, r4
 801cec0:	4628      	mov	r0, r5
 801cec2:	f7ff fe89 	bl	801cbd8 <_fflush_r>
 801cec6:	b9e0      	cbnz	r0, 801cf02 <__swbuf_r+0x74>
 801cec8:	68a3      	ldr	r3, [r4, #8]
 801ceca:	3b01      	subs	r3, #1
 801cecc:	60a3      	str	r3, [r4, #8]
 801cece:	6823      	ldr	r3, [r4, #0]
 801ced0:	1c5a      	adds	r2, r3, #1
 801ced2:	6022      	str	r2, [r4, #0]
 801ced4:	701e      	strb	r6, [r3, #0]
 801ced6:	6962      	ldr	r2, [r4, #20]
 801ced8:	1c43      	adds	r3, r0, #1
 801ceda:	429a      	cmp	r2, r3
 801cedc:	d004      	beq.n	801cee8 <__swbuf_r+0x5a>
 801cede:	89a3      	ldrh	r3, [r4, #12]
 801cee0:	07db      	lsls	r3, r3, #31
 801cee2:	d506      	bpl.n	801cef2 <__swbuf_r+0x64>
 801cee4:	2e0a      	cmp	r6, #10
 801cee6:	d104      	bne.n	801cef2 <__swbuf_r+0x64>
 801cee8:	4621      	mov	r1, r4
 801ceea:	4628      	mov	r0, r5
 801ceec:	f7ff fe74 	bl	801cbd8 <_fflush_r>
 801cef0:	b938      	cbnz	r0, 801cf02 <__swbuf_r+0x74>
 801cef2:	4638      	mov	r0, r7
 801cef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cef6:	4621      	mov	r1, r4
 801cef8:	4628      	mov	r0, r5
 801cefa:	f000 f805 	bl	801cf08 <__swsetup_r>
 801cefe:	2800      	cmp	r0, #0
 801cf00:	d0d5      	beq.n	801ceae <__swbuf_r+0x20>
 801cf02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801cf06:	e7f4      	b.n	801cef2 <__swbuf_r+0x64>

0801cf08 <__swsetup_r>:
 801cf08:	b538      	push	{r3, r4, r5, lr}
 801cf0a:	4b2a      	ldr	r3, [pc, #168]	; (801cfb4 <__swsetup_r+0xac>)
 801cf0c:	4605      	mov	r5, r0
 801cf0e:	6818      	ldr	r0, [r3, #0]
 801cf10:	460c      	mov	r4, r1
 801cf12:	b118      	cbz	r0, 801cf1c <__swsetup_r+0x14>
 801cf14:	6a03      	ldr	r3, [r0, #32]
 801cf16:	b90b      	cbnz	r3, 801cf1c <__swsetup_r+0x14>
 801cf18:	f7ff ff26 	bl	801cd68 <__sinit>
 801cf1c:	89a3      	ldrh	r3, [r4, #12]
 801cf1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cf22:	0718      	lsls	r0, r3, #28
 801cf24:	d422      	bmi.n	801cf6c <__swsetup_r+0x64>
 801cf26:	06d9      	lsls	r1, r3, #27
 801cf28:	d407      	bmi.n	801cf3a <__swsetup_r+0x32>
 801cf2a:	2309      	movs	r3, #9
 801cf2c:	602b      	str	r3, [r5, #0]
 801cf2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cf32:	81a3      	strh	r3, [r4, #12]
 801cf34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cf38:	e034      	b.n	801cfa4 <__swsetup_r+0x9c>
 801cf3a:	0758      	lsls	r0, r3, #29
 801cf3c:	d512      	bpl.n	801cf64 <__swsetup_r+0x5c>
 801cf3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cf40:	b141      	cbz	r1, 801cf54 <__swsetup_r+0x4c>
 801cf42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cf46:	4299      	cmp	r1, r3
 801cf48:	d002      	beq.n	801cf50 <__swsetup_r+0x48>
 801cf4a:	4628      	mov	r0, r5
 801cf4c:	f000 ffce 	bl	801deec <_free_r>
 801cf50:	2300      	movs	r3, #0
 801cf52:	6363      	str	r3, [r4, #52]	; 0x34
 801cf54:	89a3      	ldrh	r3, [r4, #12]
 801cf56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cf5a:	81a3      	strh	r3, [r4, #12]
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	6063      	str	r3, [r4, #4]
 801cf60:	6923      	ldr	r3, [r4, #16]
 801cf62:	6023      	str	r3, [r4, #0]
 801cf64:	89a3      	ldrh	r3, [r4, #12]
 801cf66:	f043 0308 	orr.w	r3, r3, #8
 801cf6a:	81a3      	strh	r3, [r4, #12]
 801cf6c:	6923      	ldr	r3, [r4, #16]
 801cf6e:	b94b      	cbnz	r3, 801cf84 <__swsetup_r+0x7c>
 801cf70:	89a3      	ldrh	r3, [r4, #12]
 801cf72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cf76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cf7a:	d003      	beq.n	801cf84 <__swsetup_r+0x7c>
 801cf7c:	4621      	mov	r1, r4
 801cf7e:	4628      	mov	r0, r5
 801cf80:	f001 fd9a 	bl	801eab8 <__smakebuf_r>
 801cf84:	89a0      	ldrh	r0, [r4, #12]
 801cf86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cf8a:	f010 0301 	ands.w	r3, r0, #1
 801cf8e:	d00a      	beq.n	801cfa6 <__swsetup_r+0x9e>
 801cf90:	2300      	movs	r3, #0
 801cf92:	60a3      	str	r3, [r4, #8]
 801cf94:	6963      	ldr	r3, [r4, #20]
 801cf96:	425b      	negs	r3, r3
 801cf98:	61a3      	str	r3, [r4, #24]
 801cf9a:	6923      	ldr	r3, [r4, #16]
 801cf9c:	b943      	cbnz	r3, 801cfb0 <__swsetup_r+0xa8>
 801cf9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cfa2:	d1c4      	bne.n	801cf2e <__swsetup_r+0x26>
 801cfa4:	bd38      	pop	{r3, r4, r5, pc}
 801cfa6:	0781      	lsls	r1, r0, #30
 801cfa8:	bf58      	it	pl
 801cfaa:	6963      	ldrpl	r3, [r4, #20]
 801cfac:	60a3      	str	r3, [r4, #8]
 801cfae:	e7f4      	b.n	801cf9a <__swsetup_r+0x92>
 801cfb0:	2000      	movs	r0, #0
 801cfb2:	e7f7      	b.n	801cfa4 <__swsetup_r+0x9c>
 801cfb4:	20000d9c 	.word	0x20000d9c

0801cfb8 <memset>:
 801cfb8:	4402      	add	r2, r0
 801cfba:	4603      	mov	r3, r0
 801cfbc:	4293      	cmp	r3, r2
 801cfbe:	d100      	bne.n	801cfc2 <memset+0xa>
 801cfc0:	4770      	bx	lr
 801cfc2:	f803 1b01 	strb.w	r1, [r3], #1
 801cfc6:	e7f9      	b.n	801cfbc <memset+0x4>

0801cfc8 <strcat>:
 801cfc8:	b510      	push	{r4, lr}
 801cfca:	4602      	mov	r2, r0
 801cfcc:	7814      	ldrb	r4, [r2, #0]
 801cfce:	4613      	mov	r3, r2
 801cfd0:	3201      	adds	r2, #1
 801cfd2:	2c00      	cmp	r4, #0
 801cfd4:	d1fa      	bne.n	801cfcc <strcat+0x4>
 801cfd6:	3b01      	subs	r3, #1
 801cfd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cfdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cfe0:	2a00      	cmp	r2, #0
 801cfe2:	d1f9      	bne.n	801cfd8 <strcat+0x10>
 801cfe4:	bd10      	pop	{r4, pc}

0801cfe6 <strchr>:
 801cfe6:	b2c9      	uxtb	r1, r1
 801cfe8:	4603      	mov	r3, r0
 801cfea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cfee:	b11a      	cbz	r2, 801cff8 <strchr+0x12>
 801cff0:	428a      	cmp	r2, r1
 801cff2:	d1f9      	bne.n	801cfe8 <strchr+0x2>
 801cff4:	4618      	mov	r0, r3
 801cff6:	4770      	bx	lr
 801cff8:	2900      	cmp	r1, #0
 801cffa:	bf18      	it	ne
 801cffc:	2300      	movne	r3, #0
 801cffe:	e7f9      	b.n	801cff4 <strchr+0xe>

0801d000 <strncpy>:
 801d000:	b510      	push	{r4, lr}
 801d002:	3901      	subs	r1, #1
 801d004:	4603      	mov	r3, r0
 801d006:	b132      	cbz	r2, 801d016 <strncpy+0x16>
 801d008:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d00c:	f803 4b01 	strb.w	r4, [r3], #1
 801d010:	3a01      	subs	r2, #1
 801d012:	2c00      	cmp	r4, #0
 801d014:	d1f7      	bne.n	801d006 <strncpy+0x6>
 801d016:	441a      	add	r2, r3
 801d018:	2100      	movs	r1, #0
 801d01a:	4293      	cmp	r3, r2
 801d01c:	d100      	bne.n	801d020 <strncpy+0x20>
 801d01e:	bd10      	pop	{r4, pc}
 801d020:	f803 1b01 	strb.w	r1, [r3], #1
 801d024:	e7f9      	b.n	801d01a <strncpy+0x1a>
	...

0801d028 <_localeconv_r>:
 801d028:	4800      	ldr	r0, [pc, #0]	; (801d02c <_localeconv_r+0x4>)
 801d02a:	4770      	bx	lr
 801d02c:	20000e90 	.word	0x20000e90

0801d030 <_close_r>:
 801d030:	b538      	push	{r3, r4, r5, lr}
 801d032:	4d06      	ldr	r5, [pc, #24]	; (801d04c <_close_r+0x1c>)
 801d034:	2300      	movs	r3, #0
 801d036:	4604      	mov	r4, r0
 801d038:	4608      	mov	r0, r1
 801d03a:	602b      	str	r3, [r5, #0]
 801d03c:	f7f1 febd 	bl	800edba <_close>
 801d040:	1c43      	adds	r3, r0, #1
 801d042:	d102      	bne.n	801d04a <_close_r+0x1a>
 801d044:	682b      	ldr	r3, [r5, #0]
 801d046:	b103      	cbz	r3, 801d04a <_close_r+0x1a>
 801d048:	6023      	str	r3, [r4, #0]
 801d04a:	bd38      	pop	{r3, r4, r5, pc}
 801d04c:	200100a8 	.word	0x200100a8

0801d050 <_reclaim_reent>:
 801d050:	4b29      	ldr	r3, [pc, #164]	; (801d0f8 <_reclaim_reent+0xa8>)
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	4283      	cmp	r3, r0
 801d056:	b570      	push	{r4, r5, r6, lr}
 801d058:	4604      	mov	r4, r0
 801d05a:	d04b      	beq.n	801d0f4 <_reclaim_reent+0xa4>
 801d05c:	69c3      	ldr	r3, [r0, #28]
 801d05e:	b143      	cbz	r3, 801d072 <_reclaim_reent+0x22>
 801d060:	68db      	ldr	r3, [r3, #12]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d144      	bne.n	801d0f0 <_reclaim_reent+0xa0>
 801d066:	69e3      	ldr	r3, [r4, #28]
 801d068:	6819      	ldr	r1, [r3, #0]
 801d06a:	b111      	cbz	r1, 801d072 <_reclaim_reent+0x22>
 801d06c:	4620      	mov	r0, r4
 801d06e:	f000 ff3d 	bl	801deec <_free_r>
 801d072:	6961      	ldr	r1, [r4, #20]
 801d074:	b111      	cbz	r1, 801d07c <_reclaim_reent+0x2c>
 801d076:	4620      	mov	r0, r4
 801d078:	f000 ff38 	bl	801deec <_free_r>
 801d07c:	69e1      	ldr	r1, [r4, #28]
 801d07e:	b111      	cbz	r1, 801d086 <_reclaim_reent+0x36>
 801d080:	4620      	mov	r0, r4
 801d082:	f000 ff33 	bl	801deec <_free_r>
 801d086:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d088:	b111      	cbz	r1, 801d090 <_reclaim_reent+0x40>
 801d08a:	4620      	mov	r0, r4
 801d08c:	f000 ff2e 	bl	801deec <_free_r>
 801d090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d092:	b111      	cbz	r1, 801d09a <_reclaim_reent+0x4a>
 801d094:	4620      	mov	r0, r4
 801d096:	f000 ff29 	bl	801deec <_free_r>
 801d09a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d09c:	b111      	cbz	r1, 801d0a4 <_reclaim_reent+0x54>
 801d09e:	4620      	mov	r0, r4
 801d0a0:	f000 ff24 	bl	801deec <_free_r>
 801d0a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d0a6:	b111      	cbz	r1, 801d0ae <_reclaim_reent+0x5e>
 801d0a8:	4620      	mov	r0, r4
 801d0aa:	f000 ff1f 	bl	801deec <_free_r>
 801d0ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801d0b0:	b111      	cbz	r1, 801d0b8 <_reclaim_reent+0x68>
 801d0b2:	4620      	mov	r0, r4
 801d0b4:	f000 ff1a 	bl	801deec <_free_r>
 801d0b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d0ba:	b111      	cbz	r1, 801d0c2 <_reclaim_reent+0x72>
 801d0bc:	4620      	mov	r0, r4
 801d0be:	f000 ff15 	bl	801deec <_free_r>
 801d0c2:	6a23      	ldr	r3, [r4, #32]
 801d0c4:	b1b3      	cbz	r3, 801d0f4 <_reclaim_reent+0xa4>
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0cc:	4718      	bx	r3
 801d0ce:	5949      	ldr	r1, [r1, r5]
 801d0d0:	b941      	cbnz	r1, 801d0e4 <_reclaim_reent+0x94>
 801d0d2:	3504      	adds	r5, #4
 801d0d4:	69e3      	ldr	r3, [r4, #28]
 801d0d6:	2d80      	cmp	r5, #128	; 0x80
 801d0d8:	68d9      	ldr	r1, [r3, #12]
 801d0da:	d1f8      	bne.n	801d0ce <_reclaim_reent+0x7e>
 801d0dc:	4620      	mov	r0, r4
 801d0de:	f000 ff05 	bl	801deec <_free_r>
 801d0e2:	e7c0      	b.n	801d066 <_reclaim_reent+0x16>
 801d0e4:	680e      	ldr	r6, [r1, #0]
 801d0e6:	4620      	mov	r0, r4
 801d0e8:	f000 ff00 	bl	801deec <_free_r>
 801d0ec:	4631      	mov	r1, r6
 801d0ee:	e7ef      	b.n	801d0d0 <_reclaim_reent+0x80>
 801d0f0:	2500      	movs	r5, #0
 801d0f2:	e7ef      	b.n	801d0d4 <_reclaim_reent+0x84>
 801d0f4:	bd70      	pop	{r4, r5, r6, pc}
 801d0f6:	bf00      	nop
 801d0f8:	20000d9c 	.word	0x20000d9c

0801d0fc <_lseek_r>:
 801d0fc:	b538      	push	{r3, r4, r5, lr}
 801d0fe:	4d07      	ldr	r5, [pc, #28]	; (801d11c <_lseek_r+0x20>)
 801d100:	4604      	mov	r4, r0
 801d102:	4608      	mov	r0, r1
 801d104:	4611      	mov	r1, r2
 801d106:	2200      	movs	r2, #0
 801d108:	602a      	str	r2, [r5, #0]
 801d10a:	461a      	mov	r2, r3
 801d10c:	f7f1 fe7c 	bl	800ee08 <_lseek>
 801d110:	1c43      	adds	r3, r0, #1
 801d112:	d102      	bne.n	801d11a <_lseek_r+0x1e>
 801d114:	682b      	ldr	r3, [r5, #0]
 801d116:	b103      	cbz	r3, 801d11a <_lseek_r+0x1e>
 801d118:	6023      	str	r3, [r4, #0]
 801d11a:	bd38      	pop	{r3, r4, r5, pc}
 801d11c:	200100a8 	.word	0x200100a8

0801d120 <_read_r>:
 801d120:	b538      	push	{r3, r4, r5, lr}
 801d122:	4d07      	ldr	r5, [pc, #28]	; (801d140 <_read_r+0x20>)
 801d124:	4604      	mov	r4, r0
 801d126:	4608      	mov	r0, r1
 801d128:	4611      	mov	r1, r2
 801d12a:	2200      	movs	r2, #0
 801d12c:	602a      	str	r2, [r5, #0]
 801d12e:	461a      	mov	r2, r3
 801d130:	f7f1 fe0a 	bl	800ed48 <_read>
 801d134:	1c43      	adds	r3, r0, #1
 801d136:	d102      	bne.n	801d13e <_read_r+0x1e>
 801d138:	682b      	ldr	r3, [r5, #0]
 801d13a:	b103      	cbz	r3, 801d13e <_read_r+0x1e>
 801d13c:	6023      	str	r3, [r4, #0]
 801d13e:	bd38      	pop	{r3, r4, r5, pc}
 801d140:	200100a8 	.word	0x200100a8

0801d144 <_write_r>:
 801d144:	b538      	push	{r3, r4, r5, lr}
 801d146:	4d07      	ldr	r5, [pc, #28]	; (801d164 <_write_r+0x20>)
 801d148:	4604      	mov	r4, r0
 801d14a:	4608      	mov	r0, r1
 801d14c:	4611      	mov	r1, r2
 801d14e:	2200      	movs	r2, #0
 801d150:	602a      	str	r2, [r5, #0]
 801d152:	461a      	mov	r2, r3
 801d154:	f7f1 fe15 	bl	800ed82 <_write>
 801d158:	1c43      	adds	r3, r0, #1
 801d15a:	d102      	bne.n	801d162 <_write_r+0x1e>
 801d15c:	682b      	ldr	r3, [r5, #0]
 801d15e:	b103      	cbz	r3, 801d162 <_write_r+0x1e>
 801d160:	6023      	str	r3, [r4, #0]
 801d162:	bd38      	pop	{r3, r4, r5, pc}
 801d164:	200100a8 	.word	0x200100a8

0801d168 <__errno>:
 801d168:	4b01      	ldr	r3, [pc, #4]	; (801d170 <__errno+0x8>)
 801d16a:	6818      	ldr	r0, [r3, #0]
 801d16c:	4770      	bx	lr
 801d16e:	bf00      	nop
 801d170:	20000d9c 	.word	0x20000d9c

0801d174 <__libc_init_array>:
 801d174:	b570      	push	{r4, r5, r6, lr}
 801d176:	4d0d      	ldr	r5, [pc, #52]	; (801d1ac <__libc_init_array+0x38>)
 801d178:	4c0d      	ldr	r4, [pc, #52]	; (801d1b0 <__libc_init_array+0x3c>)
 801d17a:	1b64      	subs	r4, r4, r5
 801d17c:	10a4      	asrs	r4, r4, #2
 801d17e:	2600      	movs	r6, #0
 801d180:	42a6      	cmp	r6, r4
 801d182:	d109      	bne.n	801d198 <__libc_init_array+0x24>
 801d184:	4d0b      	ldr	r5, [pc, #44]	; (801d1b4 <__libc_init_array+0x40>)
 801d186:	4c0c      	ldr	r4, [pc, #48]	; (801d1b8 <__libc_init_array+0x44>)
 801d188:	f002 fd70 	bl	801fc6c <_init>
 801d18c:	1b64      	subs	r4, r4, r5
 801d18e:	10a4      	asrs	r4, r4, #2
 801d190:	2600      	movs	r6, #0
 801d192:	42a6      	cmp	r6, r4
 801d194:	d105      	bne.n	801d1a2 <__libc_init_array+0x2e>
 801d196:	bd70      	pop	{r4, r5, r6, pc}
 801d198:	f855 3b04 	ldr.w	r3, [r5], #4
 801d19c:	4798      	blx	r3
 801d19e:	3601      	adds	r6, #1
 801d1a0:	e7ee      	b.n	801d180 <__libc_init_array+0xc>
 801d1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d1a6:	4798      	blx	r3
 801d1a8:	3601      	adds	r6, #1
 801d1aa:	e7f2      	b.n	801d192 <__libc_init_array+0x1e>
 801d1ac:	08025424 	.word	0x08025424
 801d1b0:	08025424 	.word	0x08025424
 801d1b4:	08025424 	.word	0x08025424
 801d1b8:	08025428 	.word	0x08025428

0801d1bc <__retarget_lock_init_recursive>:
 801d1bc:	4770      	bx	lr

0801d1be <__retarget_lock_acquire_recursive>:
 801d1be:	4770      	bx	lr

0801d1c0 <__retarget_lock_release_recursive>:
 801d1c0:	4770      	bx	lr

0801d1c2 <memcpy>:
 801d1c2:	440a      	add	r2, r1
 801d1c4:	4291      	cmp	r1, r2
 801d1c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d1ca:	d100      	bne.n	801d1ce <memcpy+0xc>
 801d1cc:	4770      	bx	lr
 801d1ce:	b510      	push	{r4, lr}
 801d1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d1d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d1d8:	4291      	cmp	r1, r2
 801d1da:	d1f9      	bne.n	801d1d0 <memcpy+0xe>
 801d1dc:	bd10      	pop	{r4, pc}

0801d1de <copysignf>:
 801d1de:	ee10 3a10 	vmov	r3, s0
 801d1e2:	ee10 2a90 	vmov	r2, s1
 801d1e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d1ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801d1ee:	4313      	orrs	r3, r2
 801d1f0:	ee00 3a10 	vmov	s0, r3
 801d1f4:	4770      	bx	lr

0801d1f6 <quorem>:
 801d1f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1fa:	6903      	ldr	r3, [r0, #16]
 801d1fc:	690c      	ldr	r4, [r1, #16]
 801d1fe:	42a3      	cmp	r3, r4
 801d200:	4607      	mov	r7, r0
 801d202:	db7e      	blt.n	801d302 <quorem+0x10c>
 801d204:	3c01      	subs	r4, #1
 801d206:	f101 0814 	add.w	r8, r1, #20
 801d20a:	f100 0514 	add.w	r5, r0, #20
 801d20e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d212:	9301      	str	r3, [sp, #4]
 801d214:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d21c:	3301      	adds	r3, #1
 801d21e:	429a      	cmp	r2, r3
 801d220:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d224:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d228:	fbb2 f6f3 	udiv	r6, r2, r3
 801d22c:	d331      	bcc.n	801d292 <quorem+0x9c>
 801d22e:	f04f 0e00 	mov.w	lr, #0
 801d232:	4640      	mov	r0, r8
 801d234:	46ac      	mov	ip, r5
 801d236:	46f2      	mov	sl, lr
 801d238:	f850 2b04 	ldr.w	r2, [r0], #4
 801d23c:	b293      	uxth	r3, r2
 801d23e:	fb06 e303 	mla	r3, r6, r3, lr
 801d242:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d246:	0c1a      	lsrs	r2, r3, #16
 801d248:	b29b      	uxth	r3, r3
 801d24a:	ebaa 0303 	sub.w	r3, sl, r3
 801d24e:	f8dc a000 	ldr.w	sl, [ip]
 801d252:	fa13 f38a 	uxtah	r3, r3, sl
 801d256:	fb06 220e 	mla	r2, r6, lr, r2
 801d25a:	9300      	str	r3, [sp, #0]
 801d25c:	9b00      	ldr	r3, [sp, #0]
 801d25e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d262:	b292      	uxth	r2, r2
 801d264:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d268:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d26c:	f8bd 3000 	ldrh.w	r3, [sp]
 801d270:	4581      	cmp	r9, r0
 801d272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d276:	f84c 3b04 	str.w	r3, [ip], #4
 801d27a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d27e:	d2db      	bcs.n	801d238 <quorem+0x42>
 801d280:	f855 300b 	ldr.w	r3, [r5, fp]
 801d284:	b92b      	cbnz	r3, 801d292 <quorem+0x9c>
 801d286:	9b01      	ldr	r3, [sp, #4]
 801d288:	3b04      	subs	r3, #4
 801d28a:	429d      	cmp	r5, r3
 801d28c:	461a      	mov	r2, r3
 801d28e:	d32c      	bcc.n	801d2ea <quorem+0xf4>
 801d290:	613c      	str	r4, [r7, #16]
 801d292:	4638      	mov	r0, r7
 801d294:	f001 f9a6 	bl	801e5e4 <__mcmp>
 801d298:	2800      	cmp	r0, #0
 801d29a:	db22      	blt.n	801d2e2 <quorem+0xec>
 801d29c:	3601      	adds	r6, #1
 801d29e:	4629      	mov	r1, r5
 801d2a0:	2000      	movs	r0, #0
 801d2a2:	f858 2b04 	ldr.w	r2, [r8], #4
 801d2a6:	f8d1 c000 	ldr.w	ip, [r1]
 801d2aa:	b293      	uxth	r3, r2
 801d2ac:	1ac3      	subs	r3, r0, r3
 801d2ae:	0c12      	lsrs	r2, r2, #16
 801d2b0:	fa13 f38c 	uxtah	r3, r3, ip
 801d2b4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801d2b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d2bc:	b29b      	uxth	r3, r3
 801d2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d2c2:	45c1      	cmp	r9, r8
 801d2c4:	f841 3b04 	str.w	r3, [r1], #4
 801d2c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d2cc:	d2e9      	bcs.n	801d2a2 <quorem+0xac>
 801d2ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d2d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d2d6:	b922      	cbnz	r2, 801d2e2 <quorem+0xec>
 801d2d8:	3b04      	subs	r3, #4
 801d2da:	429d      	cmp	r5, r3
 801d2dc:	461a      	mov	r2, r3
 801d2de:	d30a      	bcc.n	801d2f6 <quorem+0x100>
 801d2e0:	613c      	str	r4, [r7, #16]
 801d2e2:	4630      	mov	r0, r6
 801d2e4:	b003      	add	sp, #12
 801d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ea:	6812      	ldr	r2, [r2, #0]
 801d2ec:	3b04      	subs	r3, #4
 801d2ee:	2a00      	cmp	r2, #0
 801d2f0:	d1ce      	bne.n	801d290 <quorem+0x9a>
 801d2f2:	3c01      	subs	r4, #1
 801d2f4:	e7c9      	b.n	801d28a <quorem+0x94>
 801d2f6:	6812      	ldr	r2, [r2, #0]
 801d2f8:	3b04      	subs	r3, #4
 801d2fa:	2a00      	cmp	r2, #0
 801d2fc:	d1f0      	bne.n	801d2e0 <quorem+0xea>
 801d2fe:	3c01      	subs	r4, #1
 801d300:	e7eb      	b.n	801d2da <quorem+0xe4>
 801d302:	2000      	movs	r0, #0
 801d304:	e7ee      	b.n	801d2e4 <quorem+0xee>
	...

0801d308 <_dtoa_r>:
 801d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d30c:	ed2d 8b04 	vpush	{d8-d9}
 801d310:	69c5      	ldr	r5, [r0, #28]
 801d312:	b093      	sub	sp, #76	; 0x4c
 801d314:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d318:	ec57 6b10 	vmov	r6, r7, d0
 801d31c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801d320:	9107      	str	r1, [sp, #28]
 801d322:	4604      	mov	r4, r0
 801d324:	920a      	str	r2, [sp, #40]	; 0x28
 801d326:	930d      	str	r3, [sp, #52]	; 0x34
 801d328:	b975      	cbnz	r5, 801d348 <_dtoa_r+0x40>
 801d32a:	2010      	movs	r0, #16
 801d32c:	f000 fe2a 	bl	801df84 <malloc>
 801d330:	4602      	mov	r2, r0
 801d332:	61e0      	str	r0, [r4, #28]
 801d334:	b920      	cbnz	r0, 801d340 <_dtoa_r+0x38>
 801d336:	4bae      	ldr	r3, [pc, #696]	; (801d5f0 <_dtoa_r+0x2e8>)
 801d338:	21ef      	movs	r1, #239	; 0xef
 801d33a:	48ae      	ldr	r0, [pc, #696]	; (801d5f4 <_dtoa_r+0x2ec>)
 801d33c:	f001 fc5e 	bl	801ebfc <__assert_func>
 801d340:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d344:	6005      	str	r5, [r0, #0]
 801d346:	60c5      	str	r5, [r0, #12]
 801d348:	69e3      	ldr	r3, [r4, #28]
 801d34a:	6819      	ldr	r1, [r3, #0]
 801d34c:	b151      	cbz	r1, 801d364 <_dtoa_r+0x5c>
 801d34e:	685a      	ldr	r2, [r3, #4]
 801d350:	604a      	str	r2, [r1, #4]
 801d352:	2301      	movs	r3, #1
 801d354:	4093      	lsls	r3, r2
 801d356:	608b      	str	r3, [r1, #8]
 801d358:	4620      	mov	r0, r4
 801d35a:	f000 ff07 	bl	801e16c <_Bfree>
 801d35e:	69e3      	ldr	r3, [r4, #28]
 801d360:	2200      	movs	r2, #0
 801d362:	601a      	str	r2, [r3, #0]
 801d364:	1e3b      	subs	r3, r7, #0
 801d366:	bfbb      	ittet	lt
 801d368:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d36c:	9303      	strlt	r3, [sp, #12]
 801d36e:	2300      	movge	r3, #0
 801d370:	2201      	movlt	r2, #1
 801d372:	bfac      	ite	ge
 801d374:	f8c8 3000 	strge.w	r3, [r8]
 801d378:	f8c8 2000 	strlt.w	r2, [r8]
 801d37c:	4b9e      	ldr	r3, [pc, #632]	; (801d5f8 <_dtoa_r+0x2f0>)
 801d37e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801d382:	ea33 0308 	bics.w	r3, r3, r8
 801d386:	d11b      	bne.n	801d3c0 <_dtoa_r+0xb8>
 801d388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d38a:	f242 730f 	movw	r3, #9999	; 0x270f
 801d38e:	6013      	str	r3, [r2, #0]
 801d390:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801d394:	4333      	orrs	r3, r6
 801d396:	f000 8593 	beq.w	801dec0 <_dtoa_r+0xbb8>
 801d39a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d39c:	b963      	cbnz	r3, 801d3b8 <_dtoa_r+0xb0>
 801d39e:	4b97      	ldr	r3, [pc, #604]	; (801d5fc <_dtoa_r+0x2f4>)
 801d3a0:	e027      	b.n	801d3f2 <_dtoa_r+0xea>
 801d3a2:	4b97      	ldr	r3, [pc, #604]	; (801d600 <_dtoa_r+0x2f8>)
 801d3a4:	9300      	str	r3, [sp, #0]
 801d3a6:	3308      	adds	r3, #8
 801d3a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d3aa:	6013      	str	r3, [r2, #0]
 801d3ac:	9800      	ldr	r0, [sp, #0]
 801d3ae:	b013      	add	sp, #76	; 0x4c
 801d3b0:	ecbd 8b04 	vpop	{d8-d9}
 801d3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3b8:	4b90      	ldr	r3, [pc, #576]	; (801d5fc <_dtoa_r+0x2f4>)
 801d3ba:	9300      	str	r3, [sp, #0]
 801d3bc:	3303      	adds	r3, #3
 801d3be:	e7f3      	b.n	801d3a8 <_dtoa_r+0xa0>
 801d3c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d3c4:	2200      	movs	r2, #0
 801d3c6:	ec51 0b17 	vmov	r0, r1, d7
 801d3ca:	eeb0 8a47 	vmov.f32	s16, s14
 801d3ce:	eef0 8a67 	vmov.f32	s17, s15
 801d3d2:	2300      	movs	r3, #0
 801d3d4:	f7e3 fb88 	bl	8000ae8 <__aeabi_dcmpeq>
 801d3d8:	4681      	mov	r9, r0
 801d3da:	b160      	cbz	r0, 801d3f6 <_dtoa_r+0xee>
 801d3dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d3de:	2301      	movs	r3, #1
 801d3e0:	6013      	str	r3, [r2, #0]
 801d3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	f000 8568 	beq.w	801deba <_dtoa_r+0xbb2>
 801d3ea:	4b86      	ldr	r3, [pc, #536]	; (801d604 <_dtoa_r+0x2fc>)
 801d3ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d3ee:	6013      	str	r3, [r2, #0]
 801d3f0:	3b01      	subs	r3, #1
 801d3f2:	9300      	str	r3, [sp, #0]
 801d3f4:	e7da      	b.n	801d3ac <_dtoa_r+0xa4>
 801d3f6:	aa10      	add	r2, sp, #64	; 0x40
 801d3f8:	a911      	add	r1, sp, #68	; 0x44
 801d3fa:	4620      	mov	r0, r4
 801d3fc:	eeb0 0a48 	vmov.f32	s0, s16
 801d400:	eef0 0a68 	vmov.f32	s1, s17
 801d404:	f001 f994 	bl	801e730 <__d2b>
 801d408:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801d40c:	4682      	mov	sl, r0
 801d40e:	2d00      	cmp	r5, #0
 801d410:	d07f      	beq.n	801d512 <_dtoa_r+0x20a>
 801d412:	ee18 3a90 	vmov	r3, s17
 801d416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d41a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801d41e:	ec51 0b18 	vmov	r0, r1, d8
 801d422:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d42a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801d42e:	4619      	mov	r1, r3
 801d430:	2200      	movs	r2, #0
 801d432:	4b75      	ldr	r3, [pc, #468]	; (801d608 <_dtoa_r+0x300>)
 801d434:	f7e2 ff38 	bl	80002a8 <__aeabi_dsub>
 801d438:	a367      	add	r3, pc, #412	; (adr r3, 801d5d8 <_dtoa_r+0x2d0>)
 801d43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d43e:	f7e3 f8eb 	bl	8000618 <__aeabi_dmul>
 801d442:	a367      	add	r3, pc, #412	; (adr r3, 801d5e0 <_dtoa_r+0x2d8>)
 801d444:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d448:	f7e2 ff30 	bl	80002ac <__adddf3>
 801d44c:	4606      	mov	r6, r0
 801d44e:	4628      	mov	r0, r5
 801d450:	460f      	mov	r7, r1
 801d452:	f7e3 f877 	bl	8000544 <__aeabi_i2d>
 801d456:	a364      	add	r3, pc, #400	; (adr r3, 801d5e8 <_dtoa_r+0x2e0>)
 801d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d45c:	f7e3 f8dc 	bl	8000618 <__aeabi_dmul>
 801d460:	4602      	mov	r2, r0
 801d462:	460b      	mov	r3, r1
 801d464:	4630      	mov	r0, r6
 801d466:	4639      	mov	r1, r7
 801d468:	f7e2 ff20 	bl	80002ac <__adddf3>
 801d46c:	4606      	mov	r6, r0
 801d46e:	460f      	mov	r7, r1
 801d470:	f7e3 fb82 	bl	8000b78 <__aeabi_d2iz>
 801d474:	2200      	movs	r2, #0
 801d476:	4683      	mov	fp, r0
 801d478:	2300      	movs	r3, #0
 801d47a:	4630      	mov	r0, r6
 801d47c:	4639      	mov	r1, r7
 801d47e:	f7e3 fb3d 	bl	8000afc <__aeabi_dcmplt>
 801d482:	b148      	cbz	r0, 801d498 <_dtoa_r+0x190>
 801d484:	4658      	mov	r0, fp
 801d486:	f7e3 f85d 	bl	8000544 <__aeabi_i2d>
 801d48a:	4632      	mov	r2, r6
 801d48c:	463b      	mov	r3, r7
 801d48e:	f7e3 fb2b 	bl	8000ae8 <__aeabi_dcmpeq>
 801d492:	b908      	cbnz	r0, 801d498 <_dtoa_r+0x190>
 801d494:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801d498:	f1bb 0f16 	cmp.w	fp, #22
 801d49c:	d857      	bhi.n	801d54e <_dtoa_r+0x246>
 801d49e:	4b5b      	ldr	r3, [pc, #364]	; (801d60c <_dtoa_r+0x304>)
 801d4a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4a8:	ec51 0b18 	vmov	r0, r1, d8
 801d4ac:	f7e3 fb26 	bl	8000afc <__aeabi_dcmplt>
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	d04e      	beq.n	801d552 <_dtoa_r+0x24a>
 801d4b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801d4b8:	2300      	movs	r3, #0
 801d4ba:	930c      	str	r3, [sp, #48]	; 0x30
 801d4bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d4be:	1b5b      	subs	r3, r3, r5
 801d4c0:	1e5a      	subs	r2, r3, #1
 801d4c2:	bf45      	ittet	mi
 801d4c4:	f1c3 0301 	rsbmi	r3, r3, #1
 801d4c8:	9305      	strmi	r3, [sp, #20]
 801d4ca:	2300      	movpl	r3, #0
 801d4cc:	2300      	movmi	r3, #0
 801d4ce:	9206      	str	r2, [sp, #24]
 801d4d0:	bf54      	ite	pl
 801d4d2:	9305      	strpl	r3, [sp, #20]
 801d4d4:	9306      	strmi	r3, [sp, #24]
 801d4d6:	f1bb 0f00 	cmp.w	fp, #0
 801d4da:	db3c      	blt.n	801d556 <_dtoa_r+0x24e>
 801d4dc:	9b06      	ldr	r3, [sp, #24]
 801d4de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801d4e2:	445b      	add	r3, fp
 801d4e4:	9306      	str	r3, [sp, #24]
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	9308      	str	r3, [sp, #32]
 801d4ea:	9b07      	ldr	r3, [sp, #28]
 801d4ec:	2b09      	cmp	r3, #9
 801d4ee:	d868      	bhi.n	801d5c2 <_dtoa_r+0x2ba>
 801d4f0:	2b05      	cmp	r3, #5
 801d4f2:	bfc4      	itt	gt
 801d4f4:	3b04      	subgt	r3, #4
 801d4f6:	9307      	strgt	r3, [sp, #28]
 801d4f8:	9b07      	ldr	r3, [sp, #28]
 801d4fa:	f1a3 0302 	sub.w	r3, r3, #2
 801d4fe:	bfcc      	ite	gt
 801d500:	2500      	movgt	r5, #0
 801d502:	2501      	movle	r5, #1
 801d504:	2b03      	cmp	r3, #3
 801d506:	f200 8085 	bhi.w	801d614 <_dtoa_r+0x30c>
 801d50a:	e8df f003 	tbb	[pc, r3]
 801d50e:	3b2e      	.short	0x3b2e
 801d510:	5839      	.short	0x5839
 801d512:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d516:	441d      	add	r5, r3
 801d518:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d51c:	2b20      	cmp	r3, #32
 801d51e:	bfc1      	itttt	gt
 801d520:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d524:	fa08 f803 	lslgt.w	r8, r8, r3
 801d528:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801d52c:	fa26 f303 	lsrgt.w	r3, r6, r3
 801d530:	bfd6      	itet	le
 801d532:	f1c3 0320 	rsble	r3, r3, #32
 801d536:	ea48 0003 	orrgt.w	r0, r8, r3
 801d53a:	fa06 f003 	lslle.w	r0, r6, r3
 801d53e:	f7e2 fff1 	bl	8000524 <__aeabi_ui2d>
 801d542:	2201      	movs	r2, #1
 801d544:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801d548:	3d01      	subs	r5, #1
 801d54a:	920e      	str	r2, [sp, #56]	; 0x38
 801d54c:	e76f      	b.n	801d42e <_dtoa_r+0x126>
 801d54e:	2301      	movs	r3, #1
 801d550:	e7b3      	b.n	801d4ba <_dtoa_r+0x1b2>
 801d552:	900c      	str	r0, [sp, #48]	; 0x30
 801d554:	e7b2      	b.n	801d4bc <_dtoa_r+0x1b4>
 801d556:	9b05      	ldr	r3, [sp, #20]
 801d558:	eba3 030b 	sub.w	r3, r3, fp
 801d55c:	9305      	str	r3, [sp, #20]
 801d55e:	f1cb 0300 	rsb	r3, fp, #0
 801d562:	9308      	str	r3, [sp, #32]
 801d564:	2300      	movs	r3, #0
 801d566:	930b      	str	r3, [sp, #44]	; 0x2c
 801d568:	e7bf      	b.n	801d4ea <_dtoa_r+0x1e2>
 801d56a:	2300      	movs	r3, #0
 801d56c:	9309      	str	r3, [sp, #36]	; 0x24
 801d56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d570:	2b00      	cmp	r3, #0
 801d572:	dc52      	bgt.n	801d61a <_dtoa_r+0x312>
 801d574:	2301      	movs	r3, #1
 801d576:	9301      	str	r3, [sp, #4]
 801d578:	9304      	str	r3, [sp, #16]
 801d57a:	461a      	mov	r2, r3
 801d57c:	920a      	str	r2, [sp, #40]	; 0x28
 801d57e:	e00b      	b.n	801d598 <_dtoa_r+0x290>
 801d580:	2301      	movs	r3, #1
 801d582:	e7f3      	b.n	801d56c <_dtoa_r+0x264>
 801d584:	2300      	movs	r3, #0
 801d586:	9309      	str	r3, [sp, #36]	; 0x24
 801d588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d58a:	445b      	add	r3, fp
 801d58c:	9301      	str	r3, [sp, #4]
 801d58e:	3301      	adds	r3, #1
 801d590:	2b01      	cmp	r3, #1
 801d592:	9304      	str	r3, [sp, #16]
 801d594:	bfb8      	it	lt
 801d596:	2301      	movlt	r3, #1
 801d598:	69e0      	ldr	r0, [r4, #28]
 801d59a:	2100      	movs	r1, #0
 801d59c:	2204      	movs	r2, #4
 801d59e:	f102 0614 	add.w	r6, r2, #20
 801d5a2:	429e      	cmp	r6, r3
 801d5a4:	d93d      	bls.n	801d622 <_dtoa_r+0x31a>
 801d5a6:	6041      	str	r1, [r0, #4]
 801d5a8:	4620      	mov	r0, r4
 801d5aa:	f000 fd9f 	bl	801e0ec <_Balloc>
 801d5ae:	9000      	str	r0, [sp, #0]
 801d5b0:	2800      	cmp	r0, #0
 801d5b2:	d139      	bne.n	801d628 <_dtoa_r+0x320>
 801d5b4:	4b16      	ldr	r3, [pc, #88]	; (801d610 <_dtoa_r+0x308>)
 801d5b6:	4602      	mov	r2, r0
 801d5b8:	f240 11af 	movw	r1, #431	; 0x1af
 801d5bc:	e6bd      	b.n	801d33a <_dtoa_r+0x32>
 801d5be:	2301      	movs	r3, #1
 801d5c0:	e7e1      	b.n	801d586 <_dtoa_r+0x27e>
 801d5c2:	2501      	movs	r5, #1
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	9307      	str	r3, [sp, #28]
 801d5c8:	9509      	str	r5, [sp, #36]	; 0x24
 801d5ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d5ce:	9301      	str	r3, [sp, #4]
 801d5d0:	9304      	str	r3, [sp, #16]
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	2312      	movs	r3, #18
 801d5d6:	e7d1      	b.n	801d57c <_dtoa_r+0x274>
 801d5d8:	636f4361 	.word	0x636f4361
 801d5dc:	3fd287a7 	.word	0x3fd287a7
 801d5e0:	8b60c8b3 	.word	0x8b60c8b3
 801d5e4:	3fc68a28 	.word	0x3fc68a28
 801d5e8:	509f79fb 	.word	0x509f79fb
 801d5ec:	3fd34413 	.word	0x3fd34413
 801d5f0:	08024e16 	.word	0x08024e16
 801d5f4:	08024e2d 	.word	0x08024e2d
 801d5f8:	7ff00000 	.word	0x7ff00000
 801d5fc:	08024e12 	.word	0x08024e12
 801d600:	08024e09 	.word	0x08024e09
 801d604:	08024de6 	.word	0x08024de6
 801d608:	3ff80000 	.word	0x3ff80000
 801d60c:	08024f18 	.word	0x08024f18
 801d610:	08024e85 	.word	0x08024e85
 801d614:	2301      	movs	r3, #1
 801d616:	9309      	str	r3, [sp, #36]	; 0x24
 801d618:	e7d7      	b.n	801d5ca <_dtoa_r+0x2c2>
 801d61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d61c:	9301      	str	r3, [sp, #4]
 801d61e:	9304      	str	r3, [sp, #16]
 801d620:	e7ba      	b.n	801d598 <_dtoa_r+0x290>
 801d622:	3101      	adds	r1, #1
 801d624:	0052      	lsls	r2, r2, #1
 801d626:	e7ba      	b.n	801d59e <_dtoa_r+0x296>
 801d628:	69e3      	ldr	r3, [r4, #28]
 801d62a:	9a00      	ldr	r2, [sp, #0]
 801d62c:	601a      	str	r2, [r3, #0]
 801d62e:	9b04      	ldr	r3, [sp, #16]
 801d630:	2b0e      	cmp	r3, #14
 801d632:	f200 80a8 	bhi.w	801d786 <_dtoa_r+0x47e>
 801d636:	2d00      	cmp	r5, #0
 801d638:	f000 80a5 	beq.w	801d786 <_dtoa_r+0x47e>
 801d63c:	f1bb 0f00 	cmp.w	fp, #0
 801d640:	dd38      	ble.n	801d6b4 <_dtoa_r+0x3ac>
 801d642:	4bc0      	ldr	r3, [pc, #768]	; (801d944 <_dtoa_r+0x63c>)
 801d644:	f00b 020f 	and.w	r2, fp, #15
 801d648:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d64c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801d650:	e9d3 6700 	ldrd	r6, r7, [r3]
 801d654:	ea4f 182b 	mov.w	r8, fp, asr #4
 801d658:	d019      	beq.n	801d68e <_dtoa_r+0x386>
 801d65a:	4bbb      	ldr	r3, [pc, #748]	; (801d948 <_dtoa_r+0x640>)
 801d65c:	ec51 0b18 	vmov	r0, r1, d8
 801d660:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d664:	f7e3 f902 	bl	800086c <__aeabi_ddiv>
 801d668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d66c:	f008 080f 	and.w	r8, r8, #15
 801d670:	2503      	movs	r5, #3
 801d672:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801d948 <_dtoa_r+0x640>
 801d676:	f1b8 0f00 	cmp.w	r8, #0
 801d67a:	d10a      	bne.n	801d692 <_dtoa_r+0x38a>
 801d67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d680:	4632      	mov	r2, r6
 801d682:	463b      	mov	r3, r7
 801d684:	f7e3 f8f2 	bl	800086c <__aeabi_ddiv>
 801d688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d68c:	e02b      	b.n	801d6e6 <_dtoa_r+0x3de>
 801d68e:	2502      	movs	r5, #2
 801d690:	e7ef      	b.n	801d672 <_dtoa_r+0x36a>
 801d692:	f018 0f01 	tst.w	r8, #1
 801d696:	d008      	beq.n	801d6aa <_dtoa_r+0x3a2>
 801d698:	4630      	mov	r0, r6
 801d69a:	4639      	mov	r1, r7
 801d69c:	e9d9 2300 	ldrd	r2, r3, [r9]
 801d6a0:	f7e2 ffba 	bl	8000618 <__aeabi_dmul>
 801d6a4:	3501      	adds	r5, #1
 801d6a6:	4606      	mov	r6, r0
 801d6a8:	460f      	mov	r7, r1
 801d6aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 801d6ae:	f109 0908 	add.w	r9, r9, #8
 801d6b2:	e7e0      	b.n	801d676 <_dtoa_r+0x36e>
 801d6b4:	f000 809f 	beq.w	801d7f6 <_dtoa_r+0x4ee>
 801d6b8:	f1cb 0600 	rsb	r6, fp, #0
 801d6bc:	4ba1      	ldr	r3, [pc, #644]	; (801d944 <_dtoa_r+0x63c>)
 801d6be:	4fa2      	ldr	r7, [pc, #648]	; (801d948 <_dtoa_r+0x640>)
 801d6c0:	f006 020f 	and.w	r2, r6, #15
 801d6c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6cc:	ec51 0b18 	vmov	r0, r1, d8
 801d6d0:	f7e2 ffa2 	bl	8000618 <__aeabi_dmul>
 801d6d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d6d8:	1136      	asrs	r6, r6, #4
 801d6da:	2300      	movs	r3, #0
 801d6dc:	2502      	movs	r5, #2
 801d6de:	2e00      	cmp	r6, #0
 801d6e0:	d17e      	bne.n	801d7e0 <_dtoa_r+0x4d8>
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	d1d0      	bne.n	801d688 <_dtoa_r+0x380>
 801d6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	f000 8084 	beq.w	801d7fa <_dtoa_r+0x4f2>
 801d6f2:	4b96      	ldr	r3, [pc, #600]	; (801d94c <_dtoa_r+0x644>)
 801d6f4:	2200      	movs	r2, #0
 801d6f6:	4640      	mov	r0, r8
 801d6f8:	4649      	mov	r1, r9
 801d6fa:	f7e3 f9ff 	bl	8000afc <__aeabi_dcmplt>
 801d6fe:	2800      	cmp	r0, #0
 801d700:	d07b      	beq.n	801d7fa <_dtoa_r+0x4f2>
 801d702:	9b04      	ldr	r3, [sp, #16]
 801d704:	2b00      	cmp	r3, #0
 801d706:	d078      	beq.n	801d7fa <_dtoa_r+0x4f2>
 801d708:	9b01      	ldr	r3, [sp, #4]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	dd39      	ble.n	801d782 <_dtoa_r+0x47a>
 801d70e:	4b90      	ldr	r3, [pc, #576]	; (801d950 <_dtoa_r+0x648>)
 801d710:	2200      	movs	r2, #0
 801d712:	4640      	mov	r0, r8
 801d714:	4649      	mov	r1, r9
 801d716:	f7e2 ff7f 	bl	8000618 <__aeabi_dmul>
 801d71a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d71e:	9e01      	ldr	r6, [sp, #4]
 801d720:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801d724:	3501      	adds	r5, #1
 801d726:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801d72a:	4628      	mov	r0, r5
 801d72c:	f7e2 ff0a 	bl	8000544 <__aeabi_i2d>
 801d730:	4642      	mov	r2, r8
 801d732:	464b      	mov	r3, r9
 801d734:	f7e2 ff70 	bl	8000618 <__aeabi_dmul>
 801d738:	4b86      	ldr	r3, [pc, #536]	; (801d954 <_dtoa_r+0x64c>)
 801d73a:	2200      	movs	r2, #0
 801d73c:	f7e2 fdb6 	bl	80002ac <__adddf3>
 801d740:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801d744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d748:	9303      	str	r3, [sp, #12]
 801d74a:	2e00      	cmp	r6, #0
 801d74c:	d158      	bne.n	801d800 <_dtoa_r+0x4f8>
 801d74e:	4b82      	ldr	r3, [pc, #520]	; (801d958 <_dtoa_r+0x650>)
 801d750:	2200      	movs	r2, #0
 801d752:	4640      	mov	r0, r8
 801d754:	4649      	mov	r1, r9
 801d756:	f7e2 fda7 	bl	80002a8 <__aeabi_dsub>
 801d75a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d75e:	4680      	mov	r8, r0
 801d760:	4689      	mov	r9, r1
 801d762:	f7e3 f9e9 	bl	8000b38 <__aeabi_dcmpgt>
 801d766:	2800      	cmp	r0, #0
 801d768:	f040 8296 	bne.w	801dc98 <_dtoa_r+0x990>
 801d76c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801d770:	4640      	mov	r0, r8
 801d772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d776:	4649      	mov	r1, r9
 801d778:	f7e3 f9c0 	bl	8000afc <__aeabi_dcmplt>
 801d77c:	2800      	cmp	r0, #0
 801d77e:	f040 8289 	bne.w	801dc94 <_dtoa_r+0x98c>
 801d782:	ed8d 8b02 	vstr	d8, [sp, #8]
 801d786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d788:	2b00      	cmp	r3, #0
 801d78a:	f2c0 814e 	blt.w	801da2a <_dtoa_r+0x722>
 801d78e:	f1bb 0f0e 	cmp.w	fp, #14
 801d792:	f300 814a 	bgt.w	801da2a <_dtoa_r+0x722>
 801d796:	4b6b      	ldr	r3, [pc, #428]	; (801d944 <_dtoa_r+0x63c>)
 801d798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d79c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7a2:	2b00      	cmp	r3, #0
 801d7a4:	f280 80dc 	bge.w	801d960 <_dtoa_r+0x658>
 801d7a8:	9b04      	ldr	r3, [sp, #16]
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	f300 80d8 	bgt.w	801d960 <_dtoa_r+0x658>
 801d7b0:	f040 826f 	bne.w	801dc92 <_dtoa_r+0x98a>
 801d7b4:	4b68      	ldr	r3, [pc, #416]	; (801d958 <_dtoa_r+0x650>)
 801d7b6:	2200      	movs	r2, #0
 801d7b8:	4640      	mov	r0, r8
 801d7ba:	4649      	mov	r1, r9
 801d7bc:	f7e2 ff2c 	bl	8000618 <__aeabi_dmul>
 801d7c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801d7c4:	f7e3 f9ae 	bl	8000b24 <__aeabi_dcmpge>
 801d7c8:	9e04      	ldr	r6, [sp, #16]
 801d7ca:	4637      	mov	r7, r6
 801d7cc:	2800      	cmp	r0, #0
 801d7ce:	f040 8245 	bne.w	801dc5c <_dtoa_r+0x954>
 801d7d2:	9d00      	ldr	r5, [sp, #0]
 801d7d4:	2331      	movs	r3, #49	; 0x31
 801d7d6:	f805 3b01 	strb.w	r3, [r5], #1
 801d7da:	f10b 0b01 	add.w	fp, fp, #1
 801d7de:	e241      	b.n	801dc64 <_dtoa_r+0x95c>
 801d7e0:	07f2      	lsls	r2, r6, #31
 801d7e2:	d505      	bpl.n	801d7f0 <_dtoa_r+0x4e8>
 801d7e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d7e8:	f7e2 ff16 	bl	8000618 <__aeabi_dmul>
 801d7ec:	3501      	adds	r5, #1
 801d7ee:	2301      	movs	r3, #1
 801d7f0:	1076      	asrs	r6, r6, #1
 801d7f2:	3708      	adds	r7, #8
 801d7f4:	e773      	b.n	801d6de <_dtoa_r+0x3d6>
 801d7f6:	2502      	movs	r5, #2
 801d7f8:	e775      	b.n	801d6e6 <_dtoa_r+0x3de>
 801d7fa:	9e04      	ldr	r6, [sp, #16]
 801d7fc:	465f      	mov	r7, fp
 801d7fe:	e792      	b.n	801d726 <_dtoa_r+0x41e>
 801d800:	9900      	ldr	r1, [sp, #0]
 801d802:	4b50      	ldr	r3, [pc, #320]	; (801d944 <_dtoa_r+0x63c>)
 801d804:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d808:	4431      	add	r1, r6
 801d80a:	9102      	str	r1, [sp, #8]
 801d80c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d80e:	eeb0 9a47 	vmov.f32	s18, s14
 801d812:	eef0 9a67 	vmov.f32	s19, s15
 801d816:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d81a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d81e:	2900      	cmp	r1, #0
 801d820:	d044      	beq.n	801d8ac <_dtoa_r+0x5a4>
 801d822:	494e      	ldr	r1, [pc, #312]	; (801d95c <_dtoa_r+0x654>)
 801d824:	2000      	movs	r0, #0
 801d826:	f7e3 f821 	bl	800086c <__aeabi_ddiv>
 801d82a:	ec53 2b19 	vmov	r2, r3, d9
 801d82e:	f7e2 fd3b 	bl	80002a8 <__aeabi_dsub>
 801d832:	9d00      	ldr	r5, [sp, #0]
 801d834:	ec41 0b19 	vmov	d9, r0, r1
 801d838:	4649      	mov	r1, r9
 801d83a:	4640      	mov	r0, r8
 801d83c:	f7e3 f99c 	bl	8000b78 <__aeabi_d2iz>
 801d840:	4606      	mov	r6, r0
 801d842:	f7e2 fe7f 	bl	8000544 <__aeabi_i2d>
 801d846:	4602      	mov	r2, r0
 801d848:	460b      	mov	r3, r1
 801d84a:	4640      	mov	r0, r8
 801d84c:	4649      	mov	r1, r9
 801d84e:	f7e2 fd2b 	bl	80002a8 <__aeabi_dsub>
 801d852:	3630      	adds	r6, #48	; 0x30
 801d854:	f805 6b01 	strb.w	r6, [r5], #1
 801d858:	ec53 2b19 	vmov	r2, r3, d9
 801d85c:	4680      	mov	r8, r0
 801d85e:	4689      	mov	r9, r1
 801d860:	f7e3 f94c 	bl	8000afc <__aeabi_dcmplt>
 801d864:	2800      	cmp	r0, #0
 801d866:	d164      	bne.n	801d932 <_dtoa_r+0x62a>
 801d868:	4642      	mov	r2, r8
 801d86a:	464b      	mov	r3, r9
 801d86c:	4937      	ldr	r1, [pc, #220]	; (801d94c <_dtoa_r+0x644>)
 801d86e:	2000      	movs	r0, #0
 801d870:	f7e2 fd1a 	bl	80002a8 <__aeabi_dsub>
 801d874:	ec53 2b19 	vmov	r2, r3, d9
 801d878:	f7e3 f940 	bl	8000afc <__aeabi_dcmplt>
 801d87c:	2800      	cmp	r0, #0
 801d87e:	f040 80b6 	bne.w	801d9ee <_dtoa_r+0x6e6>
 801d882:	9b02      	ldr	r3, [sp, #8]
 801d884:	429d      	cmp	r5, r3
 801d886:	f43f af7c 	beq.w	801d782 <_dtoa_r+0x47a>
 801d88a:	4b31      	ldr	r3, [pc, #196]	; (801d950 <_dtoa_r+0x648>)
 801d88c:	ec51 0b19 	vmov	r0, r1, d9
 801d890:	2200      	movs	r2, #0
 801d892:	f7e2 fec1 	bl	8000618 <__aeabi_dmul>
 801d896:	4b2e      	ldr	r3, [pc, #184]	; (801d950 <_dtoa_r+0x648>)
 801d898:	ec41 0b19 	vmov	d9, r0, r1
 801d89c:	2200      	movs	r2, #0
 801d89e:	4640      	mov	r0, r8
 801d8a0:	4649      	mov	r1, r9
 801d8a2:	f7e2 feb9 	bl	8000618 <__aeabi_dmul>
 801d8a6:	4680      	mov	r8, r0
 801d8a8:	4689      	mov	r9, r1
 801d8aa:	e7c5      	b.n	801d838 <_dtoa_r+0x530>
 801d8ac:	ec51 0b17 	vmov	r0, r1, d7
 801d8b0:	f7e2 feb2 	bl	8000618 <__aeabi_dmul>
 801d8b4:	9b02      	ldr	r3, [sp, #8]
 801d8b6:	9d00      	ldr	r5, [sp, #0]
 801d8b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801d8ba:	ec41 0b19 	vmov	d9, r0, r1
 801d8be:	4649      	mov	r1, r9
 801d8c0:	4640      	mov	r0, r8
 801d8c2:	f7e3 f959 	bl	8000b78 <__aeabi_d2iz>
 801d8c6:	4606      	mov	r6, r0
 801d8c8:	f7e2 fe3c 	bl	8000544 <__aeabi_i2d>
 801d8cc:	3630      	adds	r6, #48	; 0x30
 801d8ce:	4602      	mov	r2, r0
 801d8d0:	460b      	mov	r3, r1
 801d8d2:	4640      	mov	r0, r8
 801d8d4:	4649      	mov	r1, r9
 801d8d6:	f7e2 fce7 	bl	80002a8 <__aeabi_dsub>
 801d8da:	f805 6b01 	strb.w	r6, [r5], #1
 801d8de:	9b02      	ldr	r3, [sp, #8]
 801d8e0:	429d      	cmp	r5, r3
 801d8e2:	4680      	mov	r8, r0
 801d8e4:	4689      	mov	r9, r1
 801d8e6:	f04f 0200 	mov.w	r2, #0
 801d8ea:	d124      	bne.n	801d936 <_dtoa_r+0x62e>
 801d8ec:	4b1b      	ldr	r3, [pc, #108]	; (801d95c <_dtoa_r+0x654>)
 801d8ee:	ec51 0b19 	vmov	r0, r1, d9
 801d8f2:	f7e2 fcdb 	bl	80002ac <__adddf3>
 801d8f6:	4602      	mov	r2, r0
 801d8f8:	460b      	mov	r3, r1
 801d8fa:	4640      	mov	r0, r8
 801d8fc:	4649      	mov	r1, r9
 801d8fe:	f7e3 f91b 	bl	8000b38 <__aeabi_dcmpgt>
 801d902:	2800      	cmp	r0, #0
 801d904:	d173      	bne.n	801d9ee <_dtoa_r+0x6e6>
 801d906:	ec53 2b19 	vmov	r2, r3, d9
 801d90a:	4914      	ldr	r1, [pc, #80]	; (801d95c <_dtoa_r+0x654>)
 801d90c:	2000      	movs	r0, #0
 801d90e:	f7e2 fccb 	bl	80002a8 <__aeabi_dsub>
 801d912:	4602      	mov	r2, r0
 801d914:	460b      	mov	r3, r1
 801d916:	4640      	mov	r0, r8
 801d918:	4649      	mov	r1, r9
 801d91a:	f7e3 f8ef 	bl	8000afc <__aeabi_dcmplt>
 801d91e:	2800      	cmp	r0, #0
 801d920:	f43f af2f 	beq.w	801d782 <_dtoa_r+0x47a>
 801d924:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d926:	1e6b      	subs	r3, r5, #1
 801d928:	930f      	str	r3, [sp, #60]	; 0x3c
 801d92a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d92e:	2b30      	cmp	r3, #48	; 0x30
 801d930:	d0f8      	beq.n	801d924 <_dtoa_r+0x61c>
 801d932:	46bb      	mov	fp, r7
 801d934:	e04a      	b.n	801d9cc <_dtoa_r+0x6c4>
 801d936:	4b06      	ldr	r3, [pc, #24]	; (801d950 <_dtoa_r+0x648>)
 801d938:	f7e2 fe6e 	bl	8000618 <__aeabi_dmul>
 801d93c:	4680      	mov	r8, r0
 801d93e:	4689      	mov	r9, r1
 801d940:	e7bd      	b.n	801d8be <_dtoa_r+0x5b6>
 801d942:	bf00      	nop
 801d944:	08024f18 	.word	0x08024f18
 801d948:	08024ef0 	.word	0x08024ef0
 801d94c:	3ff00000 	.word	0x3ff00000
 801d950:	40240000 	.word	0x40240000
 801d954:	401c0000 	.word	0x401c0000
 801d958:	40140000 	.word	0x40140000
 801d95c:	3fe00000 	.word	0x3fe00000
 801d960:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801d964:	9d00      	ldr	r5, [sp, #0]
 801d966:	4642      	mov	r2, r8
 801d968:	464b      	mov	r3, r9
 801d96a:	4630      	mov	r0, r6
 801d96c:	4639      	mov	r1, r7
 801d96e:	f7e2 ff7d 	bl	800086c <__aeabi_ddiv>
 801d972:	f7e3 f901 	bl	8000b78 <__aeabi_d2iz>
 801d976:	9001      	str	r0, [sp, #4]
 801d978:	f7e2 fde4 	bl	8000544 <__aeabi_i2d>
 801d97c:	4642      	mov	r2, r8
 801d97e:	464b      	mov	r3, r9
 801d980:	f7e2 fe4a 	bl	8000618 <__aeabi_dmul>
 801d984:	4602      	mov	r2, r0
 801d986:	460b      	mov	r3, r1
 801d988:	4630      	mov	r0, r6
 801d98a:	4639      	mov	r1, r7
 801d98c:	f7e2 fc8c 	bl	80002a8 <__aeabi_dsub>
 801d990:	9e01      	ldr	r6, [sp, #4]
 801d992:	9f04      	ldr	r7, [sp, #16]
 801d994:	3630      	adds	r6, #48	; 0x30
 801d996:	f805 6b01 	strb.w	r6, [r5], #1
 801d99a:	9e00      	ldr	r6, [sp, #0]
 801d99c:	1bae      	subs	r6, r5, r6
 801d99e:	42b7      	cmp	r7, r6
 801d9a0:	4602      	mov	r2, r0
 801d9a2:	460b      	mov	r3, r1
 801d9a4:	d134      	bne.n	801da10 <_dtoa_r+0x708>
 801d9a6:	f7e2 fc81 	bl	80002ac <__adddf3>
 801d9aa:	4642      	mov	r2, r8
 801d9ac:	464b      	mov	r3, r9
 801d9ae:	4606      	mov	r6, r0
 801d9b0:	460f      	mov	r7, r1
 801d9b2:	f7e3 f8c1 	bl	8000b38 <__aeabi_dcmpgt>
 801d9b6:	b9c8      	cbnz	r0, 801d9ec <_dtoa_r+0x6e4>
 801d9b8:	4642      	mov	r2, r8
 801d9ba:	464b      	mov	r3, r9
 801d9bc:	4630      	mov	r0, r6
 801d9be:	4639      	mov	r1, r7
 801d9c0:	f7e3 f892 	bl	8000ae8 <__aeabi_dcmpeq>
 801d9c4:	b110      	cbz	r0, 801d9cc <_dtoa_r+0x6c4>
 801d9c6:	9b01      	ldr	r3, [sp, #4]
 801d9c8:	07db      	lsls	r3, r3, #31
 801d9ca:	d40f      	bmi.n	801d9ec <_dtoa_r+0x6e4>
 801d9cc:	4651      	mov	r1, sl
 801d9ce:	4620      	mov	r0, r4
 801d9d0:	f000 fbcc 	bl	801e16c <_Bfree>
 801d9d4:	2300      	movs	r3, #0
 801d9d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d9d8:	702b      	strb	r3, [r5, #0]
 801d9da:	f10b 0301 	add.w	r3, fp, #1
 801d9de:	6013      	str	r3, [r2, #0]
 801d9e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	f43f ace2 	beq.w	801d3ac <_dtoa_r+0xa4>
 801d9e8:	601d      	str	r5, [r3, #0]
 801d9ea:	e4df      	b.n	801d3ac <_dtoa_r+0xa4>
 801d9ec:	465f      	mov	r7, fp
 801d9ee:	462b      	mov	r3, r5
 801d9f0:	461d      	mov	r5, r3
 801d9f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d9f6:	2a39      	cmp	r2, #57	; 0x39
 801d9f8:	d106      	bne.n	801da08 <_dtoa_r+0x700>
 801d9fa:	9a00      	ldr	r2, [sp, #0]
 801d9fc:	429a      	cmp	r2, r3
 801d9fe:	d1f7      	bne.n	801d9f0 <_dtoa_r+0x6e8>
 801da00:	9900      	ldr	r1, [sp, #0]
 801da02:	2230      	movs	r2, #48	; 0x30
 801da04:	3701      	adds	r7, #1
 801da06:	700a      	strb	r2, [r1, #0]
 801da08:	781a      	ldrb	r2, [r3, #0]
 801da0a:	3201      	adds	r2, #1
 801da0c:	701a      	strb	r2, [r3, #0]
 801da0e:	e790      	b.n	801d932 <_dtoa_r+0x62a>
 801da10:	4ba3      	ldr	r3, [pc, #652]	; (801dca0 <_dtoa_r+0x998>)
 801da12:	2200      	movs	r2, #0
 801da14:	f7e2 fe00 	bl	8000618 <__aeabi_dmul>
 801da18:	2200      	movs	r2, #0
 801da1a:	2300      	movs	r3, #0
 801da1c:	4606      	mov	r6, r0
 801da1e:	460f      	mov	r7, r1
 801da20:	f7e3 f862 	bl	8000ae8 <__aeabi_dcmpeq>
 801da24:	2800      	cmp	r0, #0
 801da26:	d09e      	beq.n	801d966 <_dtoa_r+0x65e>
 801da28:	e7d0      	b.n	801d9cc <_dtoa_r+0x6c4>
 801da2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da2c:	2a00      	cmp	r2, #0
 801da2e:	f000 80ca 	beq.w	801dbc6 <_dtoa_r+0x8be>
 801da32:	9a07      	ldr	r2, [sp, #28]
 801da34:	2a01      	cmp	r2, #1
 801da36:	f300 80ad 	bgt.w	801db94 <_dtoa_r+0x88c>
 801da3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801da3c:	2a00      	cmp	r2, #0
 801da3e:	f000 80a5 	beq.w	801db8c <_dtoa_r+0x884>
 801da42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801da46:	9e08      	ldr	r6, [sp, #32]
 801da48:	9d05      	ldr	r5, [sp, #20]
 801da4a:	9a05      	ldr	r2, [sp, #20]
 801da4c:	441a      	add	r2, r3
 801da4e:	9205      	str	r2, [sp, #20]
 801da50:	9a06      	ldr	r2, [sp, #24]
 801da52:	2101      	movs	r1, #1
 801da54:	441a      	add	r2, r3
 801da56:	4620      	mov	r0, r4
 801da58:	9206      	str	r2, [sp, #24]
 801da5a:	f000 fc3d 	bl	801e2d8 <__i2b>
 801da5e:	4607      	mov	r7, r0
 801da60:	b165      	cbz	r5, 801da7c <_dtoa_r+0x774>
 801da62:	9b06      	ldr	r3, [sp, #24]
 801da64:	2b00      	cmp	r3, #0
 801da66:	dd09      	ble.n	801da7c <_dtoa_r+0x774>
 801da68:	42ab      	cmp	r3, r5
 801da6a:	9a05      	ldr	r2, [sp, #20]
 801da6c:	bfa8      	it	ge
 801da6e:	462b      	movge	r3, r5
 801da70:	1ad2      	subs	r2, r2, r3
 801da72:	9205      	str	r2, [sp, #20]
 801da74:	9a06      	ldr	r2, [sp, #24]
 801da76:	1aed      	subs	r5, r5, r3
 801da78:	1ad3      	subs	r3, r2, r3
 801da7a:	9306      	str	r3, [sp, #24]
 801da7c:	9b08      	ldr	r3, [sp, #32]
 801da7e:	b1f3      	cbz	r3, 801dabe <_dtoa_r+0x7b6>
 801da80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da82:	2b00      	cmp	r3, #0
 801da84:	f000 80a3 	beq.w	801dbce <_dtoa_r+0x8c6>
 801da88:	2e00      	cmp	r6, #0
 801da8a:	dd10      	ble.n	801daae <_dtoa_r+0x7a6>
 801da8c:	4639      	mov	r1, r7
 801da8e:	4632      	mov	r2, r6
 801da90:	4620      	mov	r0, r4
 801da92:	f000 fce1 	bl	801e458 <__pow5mult>
 801da96:	4652      	mov	r2, sl
 801da98:	4601      	mov	r1, r0
 801da9a:	4607      	mov	r7, r0
 801da9c:	4620      	mov	r0, r4
 801da9e:	f000 fc31 	bl	801e304 <__multiply>
 801daa2:	4651      	mov	r1, sl
 801daa4:	4680      	mov	r8, r0
 801daa6:	4620      	mov	r0, r4
 801daa8:	f000 fb60 	bl	801e16c <_Bfree>
 801daac:	46c2      	mov	sl, r8
 801daae:	9b08      	ldr	r3, [sp, #32]
 801dab0:	1b9a      	subs	r2, r3, r6
 801dab2:	d004      	beq.n	801dabe <_dtoa_r+0x7b6>
 801dab4:	4651      	mov	r1, sl
 801dab6:	4620      	mov	r0, r4
 801dab8:	f000 fcce 	bl	801e458 <__pow5mult>
 801dabc:	4682      	mov	sl, r0
 801dabe:	2101      	movs	r1, #1
 801dac0:	4620      	mov	r0, r4
 801dac2:	f000 fc09 	bl	801e2d8 <__i2b>
 801dac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dac8:	2b00      	cmp	r3, #0
 801daca:	4606      	mov	r6, r0
 801dacc:	f340 8081 	ble.w	801dbd2 <_dtoa_r+0x8ca>
 801dad0:	461a      	mov	r2, r3
 801dad2:	4601      	mov	r1, r0
 801dad4:	4620      	mov	r0, r4
 801dad6:	f000 fcbf 	bl	801e458 <__pow5mult>
 801dada:	9b07      	ldr	r3, [sp, #28]
 801dadc:	2b01      	cmp	r3, #1
 801dade:	4606      	mov	r6, r0
 801dae0:	dd7a      	ble.n	801dbd8 <_dtoa_r+0x8d0>
 801dae2:	f04f 0800 	mov.w	r8, #0
 801dae6:	6933      	ldr	r3, [r6, #16]
 801dae8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801daec:	6918      	ldr	r0, [r3, #16]
 801daee:	f000 fba5 	bl	801e23c <__hi0bits>
 801daf2:	f1c0 0020 	rsb	r0, r0, #32
 801daf6:	9b06      	ldr	r3, [sp, #24]
 801daf8:	4418      	add	r0, r3
 801dafa:	f010 001f 	ands.w	r0, r0, #31
 801dafe:	f000 8094 	beq.w	801dc2a <_dtoa_r+0x922>
 801db02:	f1c0 0320 	rsb	r3, r0, #32
 801db06:	2b04      	cmp	r3, #4
 801db08:	f340 8085 	ble.w	801dc16 <_dtoa_r+0x90e>
 801db0c:	9b05      	ldr	r3, [sp, #20]
 801db0e:	f1c0 001c 	rsb	r0, r0, #28
 801db12:	4403      	add	r3, r0
 801db14:	9305      	str	r3, [sp, #20]
 801db16:	9b06      	ldr	r3, [sp, #24]
 801db18:	4403      	add	r3, r0
 801db1a:	4405      	add	r5, r0
 801db1c:	9306      	str	r3, [sp, #24]
 801db1e:	9b05      	ldr	r3, [sp, #20]
 801db20:	2b00      	cmp	r3, #0
 801db22:	dd05      	ble.n	801db30 <_dtoa_r+0x828>
 801db24:	4651      	mov	r1, sl
 801db26:	461a      	mov	r2, r3
 801db28:	4620      	mov	r0, r4
 801db2a:	f000 fcef 	bl	801e50c <__lshift>
 801db2e:	4682      	mov	sl, r0
 801db30:	9b06      	ldr	r3, [sp, #24]
 801db32:	2b00      	cmp	r3, #0
 801db34:	dd05      	ble.n	801db42 <_dtoa_r+0x83a>
 801db36:	4631      	mov	r1, r6
 801db38:	461a      	mov	r2, r3
 801db3a:	4620      	mov	r0, r4
 801db3c:	f000 fce6 	bl	801e50c <__lshift>
 801db40:	4606      	mov	r6, r0
 801db42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db44:	2b00      	cmp	r3, #0
 801db46:	d072      	beq.n	801dc2e <_dtoa_r+0x926>
 801db48:	4631      	mov	r1, r6
 801db4a:	4650      	mov	r0, sl
 801db4c:	f000 fd4a 	bl	801e5e4 <__mcmp>
 801db50:	2800      	cmp	r0, #0
 801db52:	da6c      	bge.n	801dc2e <_dtoa_r+0x926>
 801db54:	2300      	movs	r3, #0
 801db56:	4651      	mov	r1, sl
 801db58:	220a      	movs	r2, #10
 801db5a:	4620      	mov	r0, r4
 801db5c:	f000 fb28 	bl	801e1b0 <__multadd>
 801db60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801db66:	4682      	mov	sl, r0
 801db68:	2b00      	cmp	r3, #0
 801db6a:	f000 81b0 	beq.w	801dece <_dtoa_r+0xbc6>
 801db6e:	2300      	movs	r3, #0
 801db70:	4639      	mov	r1, r7
 801db72:	220a      	movs	r2, #10
 801db74:	4620      	mov	r0, r4
 801db76:	f000 fb1b 	bl	801e1b0 <__multadd>
 801db7a:	9b01      	ldr	r3, [sp, #4]
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	4607      	mov	r7, r0
 801db80:	f300 8096 	bgt.w	801dcb0 <_dtoa_r+0x9a8>
 801db84:	9b07      	ldr	r3, [sp, #28]
 801db86:	2b02      	cmp	r3, #2
 801db88:	dc59      	bgt.n	801dc3e <_dtoa_r+0x936>
 801db8a:	e091      	b.n	801dcb0 <_dtoa_r+0x9a8>
 801db8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801db8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801db92:	e758      	b.n	801da46 <_dtoa_r+0x73e>
 801db94:	9b04      	ldr	r3, [sp, #16]
 801db96:	1e5e      	subs	r6, r3, #1
 801db98:	9b08      	ldr	r3, [sp, #32]
 801db9a:	42b3      	cmp	r3, r6
 801db9c:	bfbf      	itttt	lt
 801db9e:	9b08      	ldrlt	r3, [sp, #32]
 801dba0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801dba2:	9608      	strlt	r6, [sp, #32]
 801dba4:	1af3      	sublt	r3, r6, r3
 801dba6:	bfb4      	ite	lt
 801dba8:	18d2      	addlt	r2, r2, r3
 801dbaa:	1b9e      	subge	r6, r3, r6
 801dbac:	9b04      	ldr	r3, [sp, #16]
 801dbae:	bfbc      	itt	lt
 801dbb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801dbb2:	2600      	movlt	r6, #0
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	bfb7      	itett	lt
 801dbb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801dbbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801dbc0:	1a9d      	sublt	r5, r3, r2
 801dbc2:	2300      	movlt	r3, #0
 801dbc4:	e741      	b.n	801da4a <_dtoa_r+0x742>
 801dbc6:	9e08      	ldr	r6, [sp, #32]
 801dbc8:	9d05      	ldr	r5, [sp, #20]
 801dbca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801dbcc:	e748      	b.n	801da60 <_dtoa_r+0x758>
 801dbce:	9a08      	ldr	r2, [sp, #32]
 801dbd0:	e770      	b.n	801dab4 <_dtoa_r+0x7ac>
 801dbd2:	9b07      	ldr	r3, [sp, #28]
 801dbd4:	2b01      	cmp	r3, #1
 801dbd6:	dc19      	bgt.n	801dc0c <_dtoa_r+0x904>
 801dbd8:	9b02      	ldr	r3, [sp, #8]
 801dbda:	b9bb      	cbnz	r3, 801dc0c <_dtoa_r+0x904>
 801dbdc:	9b03      	ldr	r3, [sp, #12]
 801dbde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dbe2:	b99b      	cbnz	r3, 801dc0c <_dtoa_r+0x904>
 801dbe4:	9b03      	ldr	r3, [sp, #12]
 801dbe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801dbea:	0d1b      	lsrs	r3, r3, #20
 801dbec:	051b      	lsls	r3, r3, #20
 801dbee:	b183      	cbz	r3, 801dc12 <_dtoa_r+0x90a>
 801dbf0:	9b05      	ldr	r3, [sp, #20]
 801dbf2:	3301      	adds	r3, #1
 801dbf4:	9305      	str	r3, [sp, #20]
 801dbf6:	9b06      	ldr	r3, [sp, #24]
 801dbf8:	3301      	adds	r3, #1
 801dbfa:	9306      	str	r3, [sp, #24]
 801dbfc:	f04f 0801 	mov.w	r8, #1
 801dc00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	f47f af6f 	bne.w	801dae6 <_dtoa_r+0x7de>
 801dc08:	2001      	movs	r0, #1
 801dc0a:	e774      	b.n	801daf6 <_dtoa_r+0x7ee>
 801dc0c:	f04f 0800 	mov.w	r8, #0
 801dc10:	e7f6      	b.n	801dc00 <_dtoa_r+0x8f8>
 801dc12:	4698      	mov	r8, r3
 801dc14:	e7f4      	b.n	801dc00 <_dtoa_r+0x8f8>
 801dc16:	d082      	beq.n	801db1e <_dtoa_r+0x816>
 801dc18:	9a05      	ldr	r2, [sp, #20]
 801dc1a:	331c      	adds	r3, #28
 801dc1c:	441a      	add	r2, r3
 801dc1e:	9205      	str	r2, [sp, #20]
 801dc20:	9a06      	ldr	r2, [sp, #24]
 801dc22:	441a      	add	r2, r3
 801dc24:	441d      	add	r5, r3
 801dc26:	9206      	str	r2, [sp, #24]
 801dc28:	e779      	b.n	801db1e <_dtoa_r+0x816>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	e7f4      	b.n	801dc18 <_dtoa_r+0x910>
 801dc2e:	9b04      	ldr	r3, [sp, #16]
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	dc37      	bgt.n	801dca4 <_dtoa_r+0x99c>
 801dc34:	9b07      	ldr	r3, [sp, #28]
 801dc36:	2b02      	cmp	r3, #2
 801dc38:	dd34      	ble.n	801dca4 <_dtoa_r+0x99c>
 801dc3a:	9b04      	ldr	r3, [sp, #16]
 801dc3c:	9301      	str	r3, [sp, #4]
 801dc3e:	9b01      	ldr	r3, [sp, #4]
 801dc40:	b963      	cbnz	r3, 801dc5c <_dtoa_r+0x954>
 801dc42:	4631      	mov	r1, r6
 801dc44:	2205      	movs	r2, #5
 801dc46:	4620      	mov	r0, r4
 801dc48:	f000 fab2 	bl	801e1b0 <__multadd>
 801dc4c:	4601      	mov	r1, r0
 801dc4e:	4606      	mov	r6, r0
 801dc50:	4650      	mov	r0, sl
 801dc52:	f000 fcc7 	bl	801e5e4 <__mcmp>
 801dc56:	2800      	cmp	r0, #0
 801dc58:	f73f adbb 	bgt.w	801d7d2 <_dtoa_r+0x4ca>
 801dc5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc5e:	9d00      	ldr	r5, [sp, #0]
 801dc60:	ea6f 0b03 	mvn.w	fp, r3
 801dc64:	f04f 0800 	mov.w	r8, #0
 801dc68:	4631      	mov	r1, r6
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	f000 fa7e 	bl	801e16c <_Bfree>
 801dc70:	2f00      	cmp	r7, #0
 801dc72:	f43f aeab 	beq.w	801d9cc <_dtoa_r+0x6c4>
 801dc76:	f1b8 0f00 	cmp.w	r8, #0
 801dc7a:	d005      	beq.n	801dc88 <_dtoa_r+0x980>
 801dc7c:	45b8      	cmp	r8, r7
 801dc7e:	d003      	beq.n	801dc88 <_dtoa_r+0x980>
 801dc80:	4641      	mov	r1, r8
 801dc82:	4620      	mov	r0, r4
 801dc84:	f000 fa72 	bl	801e16c <_Bfree>
 801dc88:	4639      	mov	r1, r7
 801dc8a:	4620      	mov	r0, r4
 801dc8c:	f000 fa6e 	bl	801e16c <_Bfree>
 801dc90:	e69c      	b.n	801d9cc <_dtoa_r+0x6c4>
 801dc92:	2600      	movs	r6, #0
 801dc94:	4637      	mov	r7, r6
 801dc96:	e7e1      	b.n	801dc5c <_dtoa_r+0x954>
 801dc98:	46bb      	mov	fp, r7
 801dc9a:	4637      	mov	r7, r6
 801dc9c:	e599      	b.n	801d7d2 <_dtoa_r+0x4ca>
 801dc9e:	bf00      	nop
 801dca0:	40240000 	.word	0x40240000
 801dca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	f000 80c8 	beq.w	801de3c <_dtoa_r+0xb34>
 801dcac:	9b04      	ldr	r3, [sp, #16]
 801dcae:	9301      	str	r3, [sp, #4]
 801dcb0:	2d00      	cmp	r5, #0
 801dcb2:	dd05      	ble.n	801dcc0 <_dtoa_r+0x9b8>
 801dcb4:	4639      	mov	r1, r7
 801dcb6:	462a      	mov	r2, r5
 801dcb8:	4620      	mov	r0, r4
 801dcba:	f000 fc27 	bl	801e50c <__lshift>
 801dcbe:	4607      	mov	r7, r0
 801dcc0:	f1b8 0f00 	cmp.w	r8, #0
 801dcc4:	d05b      	beq.n	801dd7e <_dtoa_r+0xa76>
 801dcc6:	6879      	ldr	r1, [r7, #4]
 801dcc8:	4620      	mov	r0, r4
 801dcca:	f000 fa0f 	bl	801e0ec <_Balloc>
 801dcce:	4605      	mov	r5, r0
 801dcd0:	b928      	cbnz	r0, 801dcde <_dtoa_r+0x9d6>
 801dcd2:	4b83      	ldr	r3, [pc, #524]	; (801dee0 <_dtoa_r+0xbd8>)
 801dcd4:	4602      	mov	r2, r0
 801dcd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801dcda:	f7ff bb2e 	b.w	801d33a <_dtoa_r+0x32>
 801dcde:	693a      	ldr	r2, [r7, #16]
 801dce0:	3202      	adds	r2, #2
 801dce2:	0092      	lsls	r2, r2, #2
 801dce4:	f107 010c 	add.w	r1, r7, #12
 801dce8:	300c      	adds	r0, #12
 801dcea:	f7ff fa6a 	bl	801d1c2 <memcpy>
 801dcee:	2201      	movs	r2, #1
 801dcf0:	4629      	mov	r1, r5
 801dcf2:	4620      	mov	r0, r4
 801dcf4:	f000 fc0a 	bl	801e50c <__lshift>
 801dcf8:	9b00      	ldr	r3, [sp, #0]
 801dcfa:	3301      	adds	r3, #1
 801dcfc:	9304      	str	r3, [sp, #16]
 801dcfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd02:	4413      	add	r3, r2
 801dd04:	9308      	str	r3, [sp, #32]
 801dd06:	9b02      	ldr	r3, [sp, #8]
 801dd08:	f003 0301 	and.w	r3, r3, #1
 801dd0c:	46b8      	mov	r8, r7
 801dd0e:	9306      	str	r3, [sp, #24]
 801dd10:	4607      	mov	r7, r0
 801dd12:	9b04      	ldr	r3, [sp, #16]
 801dd14:	4631      	mov	r1, r6
 801dd16:	3b01      	subs	r3, #1
 801dd18:	4650      	mov	r0, sl
 801dd1a:	9301      	str	r3, [sp, #4]
 801dd1c:	f7ff fa6b 	bl	801d1f6 <quorem>
 801dd20:	4641      	mov	r1, r8
 801dd22:	9002      	str	r0, [sp, #8]
 801dd24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801dd28:	4650      	mov	r0, sl
 801dd2a:	f000 fc5b 	bl	801e5e4 <__mcmp>
 801dd2e:	463a      	mov	r2, r7
 801dd30:	9005      	str	r0, [sp, #20]
 801dd32:	4631      	mov	r1, r6
 801dd34:	4620      	mov	r0, r4
 801dd36:	f000 fc71 	bl	801e61c <__mdiff>
 801dd3a:	68c2      	ldr	r2, [r0, #12]
 801dd3c:	4605      	mov	r5, r0
 801dd3e:	bb02      	cbnz	r2, 801dd82 <_dtoa_r+0xa7a>
 801dd40:	4601      	mov	r1, r0
 801dd42:	4650      	mov	r0, sl
 801dd44:	f000 fc4e 	bl	801e5e4 <__mcmp>
 801dd48:	4602      	mov	r2, r0
 801dd4a:	4629      	mov	r1, r5
 801dd4c:	4620      	mov	r0, r4
 801dd4e:	9209      	str	r2, [sp, #36]	; 0x24
 801dd50:	f000 fa0c 	bl	801e16c <_Bfree>
 801dd54:	9b07      	ldr	r3, [sp, #28]
 801dd56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd58:	9d04      	ldr	r5, [sp, #16]
 801dd5a:	ea43 0102 	orr.w	r1, r3, r2
 801dd5e:	9b06      	ldr	r3, [sp, #24]
 801dd60:	4319      	orrs	r1, r3
 801dd62:	d110      	bne.n	801dd86 <_dtoa_r+0xa7e>
 801dd64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801dd68:	d029      	beq.n	801ddbe <_dtoa_r+0xab6>
 801dd6a:	9b05      	ldr	r3, [sp, #20]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	dd02      	ble.n	801dd76 <_dtoa_r+0xa6e>
 801dd70:	9b02      	ldr	r3, [sp, #8]
 801dd72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801dd76:	9b01      	ldr	r3, [sp, #4]
 801dd78:	f883 9000 	strb.w	r9, [r3]
 801dd7c:	e774      	b.n	801dc68 <_dtoa_r+0x960>
 801dd7e:	4638      	mov	r0, r7
 801dd80:	e7ba      	b.n	801dcf8 <_dtoa_r+0x9f0>
 801dd82:	2201      	movs	r2, #1
 801dd84:	e7e1      	b.n	801dd4a <_dtoa_r+0xa42>
 801dd86:	9b05      	ldr	r3, [sp, #20]
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	db04      	blt.n	801dd96 <_dtoa_r+0xa8e>
 801dd8c:	9907      	ldr	r1, [sp, #28]
 801dd8e:	430b      	orrs	r3, r1
 801dd90:	9906      	ldr	r1, [sp, #24]
 801dd92:	430b      	orrs	r3, r1
 801dd94:	d120      	bne.n	801ddd8 <_dtoa_r+0xad0>
 801dd96:	2a00      	cmp	r2, #0
 801dd98:	dded      	ble.n	801dd76 <_dtoa_r+0xa6e>
 801dd9a:	4651      	mov	r1, sl
 801dd9c:	2201      	movs	r2, #1
 801dd9e:	4620      	mov	r0, r4
 801dda0:	f000 fbb4 	bl	801e50c <__lshift>
 801dda4:	4631      	mov	r1, r6
 801dda6:	4682      	mov	sl, r0
 801dda8:	f000 fc1c 	bl	801e5e4 <__mcmp>
 801ddac:	2800      	cmp	r0, #0
 801ddae:	dc03      	bgt.n	801ddb8 <_dtoa_r+0xab0>
 801ddb0:	d1e1      	bne.n	801dd76 <_dtoa_r+0xa6e>
 801ddb2:	f019 0f01 	tst.w	r9, #1
 801ddb6:	d0de      	beq.n	801dd76 <_dtoa_r+0xa6e>
 801ddb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ddbc:	d1d8      	bne.n	801dd70 <_dtoa_r+0xa68>
 801ddbe:	9a01      	ldr	r2, [sp, #4]
 801ddc0:	2339      	movs	r3, #57	; 0x39
 801ddc2:	7013      	strb	r3, [r2, #0]
 801ddc4:	462b      	mov	r3, r5
 801ddc6:	461d      	mov	r5, r3
 801ddc8:	3b01      	subs	r3, #1
 801ddca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ddce:	2a39      	cmp	r2, #57	; 0x39
 801ddd0:	d06c      	beq.n	801deac <_dtoa_r+0xba4>
 801ddd2:	3201      	adds	r2, #1
 801ddd4:	701a      	strb	r2, [r3, #0]
 801ddd6:	e747      	b.n	801dc68 <_dtoa_r+0x960>
 801ddd8:	2a00      	cmp	r2, #0
 801ddda:	dd07      	ble.n	801ddec <_dtoa_r+0xae4>
 801dddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801dde0:	d0ed      	beq.n	801ddbe <_dtoa_r+0xab6>
 801dde2:	9a01      	ldr	r2, [sp, #4]
 801dde4:	f109 0301 	add.w	r3, r9, #1
 801dde8:	7013      	strb	r3, [r2, #0]
 801ddea:	e73d      	b.n	801dc68 <_dtoa_r+0x960>
 801ddec:	9b04      	ldr	r3, [sp, #16]
 801ddee:	9a08      	ldr	r2, [sp, #32]
 801ddf0:	f803 9c01 	strb.w	r9, [r3, #-1]
 801ddf4:	4293      	cmp	r3, r2
 801ddf6:	d043      	beq.n	801de80 <_dtoa_r+0xb78>
 801ddf8:	4651      	mov	r1, sl
 801ddfa:	2300      	movs	r3, #0
 801ddfc:	220a      	movs	r2, #10
 801ddfe:	4620      	mov	r0, r4
 801de00:	f000 f9d6 	bl	801e1b0 <__multadd>
 801de04:	45b8      	cmp	r8, r7
 801de06:	4682      	mov	sl, r0
 801de08:	f04f 0300 	mov.w	r3, #0
 801de0c:	f04f 020a 	mov.w	r2, #10
 801de10:	4641      	mov	r1, r8
 801de12:	4620      	mov	r0, r4
 801de14:	d107      	bne.n	801de26 <_dtoa_r+0xb1e>
 801de16:	f000 f9cb 	bl	801e1b0 <__multadd>
 801de1a:	4680      	mov	r8, r0
 801de1c:	4607      	mov	r7, r0
 801de1e:	9b04      	ldr	r3, [sp, #16]
 801de20:	3301      	adds	r3, #1
 801de22:	9304      	str	r3, [sp, #16]
 801de24:	e775      	b.n	801dd12 <_dtoa_r+0xa0a>
 801de26:	f000 f9c3 	bl	801e1b0 <__multadd>
 801de2a:	4639      	mov	r1, r7
 801de2c:	4680      	mov	r8, r0
 801de2e:	2300      	movs	r3, #0
 801de30:	220a      	movs	r2, #10
 801de32:	4620      	mov	r0, r4
 801de34:	f000 f9bc 	bl	801e1b0 <__multadd>
 801de38:	4607      	mov	r7, r0
 801de3a:	e7f0      	b.n	801de1e <_dtoa_r+0xb16>
 801de3c:	9b04      	ldr	r3, [sp, #16]
 801de3e:	9301      	str	r3, [sp, #4]
 801de40:	9d00      	ldr	r5, [sp, #0]
 801de42:	4631      	mov	r1, r6
 801de44:	4650      	mov	r0, sl
 801de46:	f7ff f9d6 	bl	801d1f6 <quorem>
 801de4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801de4e:	9b00      	ldr	r3, [sp, #0]
 801de50:	f805 9b01 	strb.w	r9, [r5], #1
 801de54:	1aea      	subs	r2, r5, r3
 801de56:	9b01      	ldr	r3, [sp, #4]
 801de58:	4293      	cmp	r3, r2
 801de5a:	dd07      	ble.n	801de6c <_dtoa_r+0xb64>
 801de5c:	4651      	mov	r1, sl
 801de5e:	2300      	movs	r3, #0
 801de60:	220a      	movs	r2, #10
 801de62:	4620      	mov	r0, r4
 801de64:	f000 f9a4 	bl	801e1b0 <__multadd>
 801de68:	4682      	mov	sl, r0
 801de6a:	e7ea      	b.n	801de42 <_dtoa_r+0xb3a>
 801de6c:	9b01      	ldr	r3, [sp, #4]
 801de6e:	2b00      	cmp	r3, #0
 801de70:	bfc8      	it	gt
 801de72:	461d      	movgt	r5, r3
 801de74:	9b00      	ldr	r3, [sp, #0]
 801de76:	bfd8      	it	le
 801de78:	2501      	movle	r5, #1
 801de7a:	441d      	add	r5, r3
 801de7c:	f04f 0800 	mov.w	r8, #0
 801de80:	4651      	mov	r1, sl
 801de82:	2201      	movs	r2, #1
 801de84:	4620      	mov	r0, r4
 801de86:	f000 fb41 	bl	801e50c <__lshift>
 801de8a:	4631      	mov	r1, r6
 801de8c:	4682      	mov	sl, r0
 801de8e:	f000 fba9 	bl	801e5e4 <__mcmp>
 801de92:	2800      	cmp	r0, #0
 801de94:	dc96      	bgt.n	801ddc4 <_dtoa_r+0xabc>
 801de96:	d102      	bne.n	801de9e <_dtoa_r+0xb96>
 801de98:	f019 0f01 	tst.w	r9, #1
 801de9c:	d192      	bne.n	801ddc4 <_dtoa_r+0xabc>
 801de9e:	462b      	mov	r3, r5
 801dea0:	461d      	mov	r5, r3
 801dea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dea6:	2a30      	cmp	r2, #48	; 0x30
 801dea8:	d0fa      	beq.n	801dea0 <_dtoa_r+0xb98>
 801deaa:	e6dd      	b.n	801dc68 <_dtoa_r+0x960>
 801deac:	9a00      	ldr	r2, [sp, #0]
 801deae:	429a      	cmp	r2, r3
 801deb0:	d189      	bne.n	801ddc6 <_dtoa_r+0xabe>
 801deb2:	f10b 0b01 	add.w	fp, fp, #1
 801deb6:	2331      	movs	r3, #49	; 0x31
 801deb8:	e796      	b.n	801dde8 <_dtoa_r+0xae0>
 801deba:	4b0a      	ldr	r3, [pc, #40]	; (801dee4 <_dtoa_r+0xbdc>)
 801debc:	f7ff ba99 	b.w	801d3f2 <_dtoa_r+0xea>
 801dec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	f47f aa6d 	bne.w	801d3a2 <_dtoa_r+0x9a>
 801dec8:	4b07      	ldr	r3, [pc, #28]	; (801dee8 <_dtoa_r+0xbe0>)
 801deca:	f7ff ba92 	b.w	801d3f2 <_dtoa_r+0xea>
 801dece:	9b01      	ldr	r3, [sp, #4]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	dcb5      	bgt.n	801de40 <_dtoa_r+0xb38>
 801ded4:	9b07      	ldr	r3, [sp, #28]
 801ded6:	2b02      	cmp	r3, #2
 801ded8:	f73f aeb1 	bgt.w	801dc3e <_dtoa_r+0x936>
 801dedc:	e7b0      	b.n	801de40 <_dtoa_r+0xb38>
 801dede:	bf00      	nop
 801dee0:	08024e85 	.word	0x08024e85
 801dee4:	08024de5 	.word	0x08024de5
 801dee8:	08024e09 	.word	0x08024e09

0801deec <_free_r>:
 801deec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801deee:	2900      	cmp	r1, #0
 801def0:	d044      	beq.n	801df7c <_free_r+0x90>
 801def2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801def6:	9001      	str	r0, [sp, #4]
 801def8:	2b00      	cmp	r3, #0
 801defa:	f1a1 0404 	sub.w	r4, r1, #4
 801defe:	bfb8      	it	lt
 801df00:	18e4      	addlt	r4, r4, r3
 801df02:	f000 f8e7 	bl	801e0d4 <__malloc_lock>
 801df06:	4a1e      	ldr	r2, [pc, #120]	; (801df80 <_free_r+0x94>)
 801df08:	9801      	ldr	r0, [sp, #4]
 801df0a:	6813      	ldr	r3, [r2, #0]
 801df0c:	b933      	cbnz	r3, 801df1c <_free_r+0x30>
 801df0e:	6063      	str	r3, [r4, #4]
 801df10:	6014      	str	r4, [r2, #0]
 801df12:	b003      	add	sp, #12
 801df14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df18:	f000 b8e2 	b.w	801e0e0 <__malloc_unlock>
 801df1c:	42a3      	cmp	r3, r4
 801df1e:	d908      	bls.n	801df32 <_free_r+0x46>
 801df20:	6825      	ldr	r5, [r4, #0]
 801df22:	1961      	adds	r1, r4, r5
 801df24:	428b      	cmp	r3, r1
 801df26:	bf01      	itttt	eq
 801df28:	6819      	ldreq	r1, [r3, #0]
 801df2a:	685b      	ldreq	r3, [r3, #4]
 801df2c:	1949      	addeq	r1, r1, r5
 801df2e:	6021      	streq	r1, [r4, #0]
 801df30:	e7ed      	b.n	801df0e <_free_r+0x22>
 801df32:	461a      	mov	r2, r3
 801df34:	685b      	ldr	r3, [r3, #4]
 801df36:	b10b      	cbz	r3, 801df3c <_free_r+0x50>
 801df38:	42a3      	cmp	r3, r4
 801df3a:	d9fa      	bls.n	801df32 <_free_r+0x46>
 801df3c:	6811      	ldr	r1, [r2, #0]
 801df3e:	1855      	adds	r5, r2, r1
 801df40:	42a5      	cmp	r5, r4
 801df42:	d10b      	bne.n	801df5c <_free_r+0x70>
 801df44:	6824      	ldr	r4, [r4, #0]
 801df46:	4421      	add	r1, r4
 801df48:	1854      	adds	r4, r2, r1
 801df4a:	42a3      	cmp	r3, r4
 801df4c:	6011      	str	r1, [r2, #0]
 801df4e:	d1e0      	bne.n	801df12 <_free_r+0x26>
 801df50:	681c      	ldr	r4, [r3, #0]
 801df52:	685b      	ldr	r3, [r3, #4]
 801df54:	6053      	str	r3, [r2, #4]
 801df56:	440c      	add	r4, r1
 801df58:	6014      	str	r4, [r2, #0]
 801df5a:	e7da      	b.n	801df12 <_free_r+0x26>
 801df5c:	d902      	bls.n	801df64 <_free_r+0x78>
 801df5e:	230c      	movs	r3, #12
 801df60:	6003      	str	r3, [r0, #0]
 801df62:	e7d6      	b.n	801df12 <_free_r+0x26>
 801df64:	6825      	ldr	r5, [r4, #0]
 801df66:	1961      	adds	r1, r4, r5
 801df68:	428b      	cmp	r3, r1
 801df6a:	bf04      	itt	eq
 801df6c:	6819      	ldreq	r1, [r3, #0]
 801df6e:	685b      	ldreq	r3, [r3, #4]
 801df70:	6063      	str	r3, [r4, #4]
 801df72:	bf04      	itt	eq
 801df74:	1949      	addeq	r1, r1, r5
 801df76:	6021      	streq	r1, [r4, #0]
 801df78:	6054      	str	r4, [r2, #4]
 801df7a:	e7ca      	b.n	801df12 <_free_r+0x26>
 801df7c:	b003      	add	sp, #12
 801df7e:	bd30      	pop	{r4, r5, pc}
 801df80:	200100b0 	.word	0x200100b0

0801df84 <malloc>:
 801df84:	4b02      	ldr	r3, [pc, #8]	; (801df90 <malloc+0xc>)
 801df86:	4601      	mov	r1, r0
 801df88:	6818      	ldr	r0, [r3, #0]
 801df8a:	f000 b823 	b.w	801dfd4 <_malloc_r>
 801df8e:	bf00      	nop
 801df90:	20000d9c 	.word	0x20000d9c

0801df94 <sbrk_aligned>:
 801df94:	b570      	push	{r4, r5, r6, lr}
 801df96:	4e0e      	ldr	r6, [pc, #56]	; (801dfd0 <sbrk_aligned+0x3c>)
 801df98:	460c      	mov	r4, r1
 801df9a:	6831      	ldr	r1, [r6, #0]
 801df9c:	4605      	mov	r5, r0
 801df9e:	b911      	cbnz	r1, 801dfa6 <sbrk_aligned+0x12>
 801dfa0:	f000 fe1c 	bl	801ebdc <_sbrk_r>
 801dfa4:	6030      	str	r0, [r6, #0]
 801dfa6:	4621      	mov	r1, r4
 801dfa8:	4628      	mov	r0, r5
 801dfaa:	f000 fe17 	bl	801ebdc <_sbrk_r>
 801dfae:	1c43      	adds	r3, r0, #1
 801dfb0:	d00a      	beq.n	801dfc8 <sbrk_aligned+0x34>
 801dfb2:	1cc4      	adds	r4, r0, #3
 801dfb4:	f024 0403 	bic.w	r4, r4, #3
 801dfb8:	42a0      	cmp	r0, r4
 801dfba:	d007      	beq.n	801dfcc <sbrk_aligned+0x38>
 801dfbc:	1a21      	subs	r1, r4, r0
 801dfbe:	4628      	mov	r0, r5
 801dfc0:	f000 fe0c 	bl	801ebdc <_sbrk_r>
 801dfc4:	3001      	adds	r0, #1
 801dfc6:	d101      	bne.n	801dfcc <sbrk_aligned+0x38>
 801dfc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801dfcc:	4620      	mov	r0, r4
 801dfce:	bd70      	pop	{r4, r5, r6, pc}
 801dfd0:	200100b4 	.word	0x200100b4

0801dfd4 <_malloc_r>:
 801dfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfd8:	1ccd      	adds	r5, r1, #3
 801dfda:	f025 0503 	bic.w	r5, r5, #3
 801dfde:	3508      	adds	r5, #8
 801dfe0:	2d0c      	cmp	r5, #12
 801dfe2:	bf38      	it	cc
 801dfe4:	250c      	movcc	r5, #12
 801dfe6:	2d00      	cmp	r5, #0
 801dfe8:	4607      	mov	r7, r0
 801dfea:	db01      	blt.n	801dff0 <_malloc_r+0x1c>
 801dfec:	42a9      	cmp	r1, r5
 801dfee:	d905      	bls.n	801dffc <_malloc_r+0x28>
 801dff0:	230c      	movs	r3, #12
 801dff2:	603b      	str	r3, [r7, #0]
 801dff4:	2600      	movs	r6, #0
 801dff6:	4630      	mov	r0, r6
 801dff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e0d0 <_malloc_r+0xfc>
 801e000:	f000 f868 	bl	801e0d4 <__malloc_lock>
 801e004:	f8d8 3000 	ldr.w	r3, [r8]
 801e008:	461c      	mov	r4, r3
 801e00a:	bb5c      	cbnz	r4, 801e064 <_malloc_r+0x90>
 801e00c:	4629      	mov	r1, r5
 801e00e:	4638      	mov	r0, r7
 801e010:	f7ff ffc0 	bl	801df94 <sbrk_aligned>
 801e014:	1c43      	adds	r3, r0, #1
 801e016:	4604      	mov	r4, r0
 801e018:	d155      	bne.n	801e0c6 <_malloc_r+0xf2>
 801e01a:	f8d8 4000 	ldr.w	r4, [r8]
 801e01e:	4626      	mov	r6, r4
 801e020:	2e00      	cmp	r6, #0
 801e022:	d145      	bne.n	801e0b0 <_malloc_r+0xdc>
 801e024:	2c00      	cmp	r4, #0
 801e026:	d048      	beq.n	801e0ba <_malloc_r+0xe6>
 801e028:	6823      	ldr	r3, [r4, #0]
 801e02a:	4631      	mov	r1, r6
 801e02c:	4638      	mov	r0, r7
 801e02e:	eb04 0903 	add.w	r9, r4, r3
 801e032:	f000 fdd3 	bl	801ebdc <_sbrk_r>
 801e036:	4581      	cmp	r9, r0
 801e038:	d13f      	bne.n	801e0ba <_malloc_r+0xe6>
 801e03a:	6821      	ldr	r1, [r4, #0]
 801e03c:	1a6d      	subs	r5, r5, r1
 801e03e:	4629      	mov	r1, r5
 801e040:	4638      	mov	r0, r7
 801e042:	f7ff ffa7 	bl	801df94 <sbrk_aligned>
 801e046:	3001      	adds	r0, #1
 801e048:	d037      	beq.n	801e0ba <_malloc_r+0xe6>
 801e04a:	6823      	ldr	r3, [r4, #0]
 801e04c:	442b      	add	r3, r5
 801e04e:	6023      	str	r3, [r4, #0]
 801e050:	f8d8 3000 	ldr.w	r3, [r8]
 801e054:	2b00      	cmp	r3, #0
 801e056:	d038      	beq.n	801e0ca <_malloc_r+0xf6>
 801e058:	685a      	ldr	r2, [r3, #4]
 801e05a:	42a2      	cmp	r2, r4
 801e05c:	d12b      	bne.n	801e0b6 <_malloc_r+0xe2>
 801e05e:	2200      	movs	r2, #0
 801e060:	605a      	str	r2, [r3, #4]
 801e062:	e00f      	b.n	801e084 <_malloc_r+0xb0>
 801e064:	6822      	ldr	r2, [r4, #0]
 801e066:	1b52      	subs	r2, r2, r5
 801e068:	d41f      	bmi.n	801e0aa <_malloc_r+0xd6>
 801e06a:	2a0b      	cmp	r2, #11
 801e06c:	d917      	bls.n	801e09e <_malloc_r+0xca>
 801e06e:	1961      	adds	r1, r4, r5
 801e070:	42a3      	cmp	r3, r4
 801e072:	6025      	str	r5, [r4, #0]
 801e074:	bf18      	it	ne
 801e076:	6059      	strne	r1, [r3, #4]
 801e078:	6863      	ldr	r3, [r4, #4]
 801e07a:	bf08      	it	eq
 801e07c:	f8c8 1000 	streq.w	r1, [r8]
 801e080:	5162      	str	r2, [r4, r5]
 801e082:	604b      	str	r3, [r1, #4]
 801e084:	4638      	mov	r0, r7
 801e086:	f104 060b 	add.w	r6, r4, #11
 801e08a:	f000 f829 	bl	801e0e0 <__malloc_unlock>
 801e08e:	f026 0607 	bic.w	r6, r6, #7
 801e092:	1d23      	adds	r3, r4, #4
 801e094:	1af2      	subs	r2, r6, r3
 801e096:	d0ae      	beq.n	801dff6 <_malloc_r+0x22>
 801e098:	1b9b      	subs	r3, r3, r6
 801e09a:	50a3      	str	r3, [r4, r2]
 801e09c:	e7ab      	b.n	801dff6 <_malloc_r+0x22>
 801e09e:	42a3      	cmp	r3, r4
 801e0a0:	6862      	ldr	r2, [r4, #4]
 801e0a2:	d1dd      	bne.n	801e060 <_malloc_r+0x8c>
 801e0a4:	f8c8 2000 	str.w	r2, [r8]
 801e0a8:	e7ec      	b.n	801e084 <_malloc_r+0xb0>
 801e0aa:	4623      	mov	r3, r4
 801e0ac:	6864      	ldr	r4, [r4, #4]
 801e0ae:	e7ac      	b.n	801e00a <_malloc_r+0x36>
 801e0b0:	4634      	mov	r4, r6
 801e0b2:	6876      	ldr	r6, [r6, #4]
 801e0b4:	e7b4      	b.n	801e020 <_malloc_r+0x4c>
 801e0b6:	4613      	mov	r3, r2
 801e0b8:	e7cc      	b.n	801e054 <_malloc_r+0x80>
 801e0ba:	230c      	movs	r3, #12
 801e0bc:	603b      	str	r3, [r7, #0]
 801e0be:	4638      	mov	r0, r7
 801e0c0:	f000 f80e 	bl	801e0e0 <__malloc_unlock>
 801e0c4:	e797      	b.n	801dff6 <_malloc_r+0x22>
 801e0c6:	6025      	str	r5, [r4, #0]
 801e0c8:	e7dc      	b.n	801e084 <_malloc_r+0xb0>
 801e0ca:	605b      	str	r3, [r3, #4]
 801e0cc:	deff      	udf	#255	; 0xff
 801e0ce:	bf00      	nop
 801e0d0:	200100b0 	.word	0x200100b0

0801e0d4 <__malloc_lock>:
 801e0d4:	4801      	ldr	r0, [pc, #4]	; (801e0dc <__malloc_lock+0x8>)
 801e0d6:	f7ff b872 	b.w	801d1be <__retarget_lock_acquire_recursive>
 801e0da:	bf00      	nop
 801e0dc:	200100ac 	.word	0x200100ac

0801e0e0 <__malloc_unlock>:
 801e0e0:	4801      	ldr	r0, [pc, #4]	; (801e0e8 <__malloc_unlock+0x8>)
 801e0e2:	f7ff b86d 	b.w	801d1c0 <__retarget_lock_release_recursive>
 801e0e6:	bf00      	nop
 801e0e8:	200100ac 	.word	0x200100ac

0801e0ec <_Balloc>:
 801e0ec:	b570      	push	{r4, r5, r6, lr}
 801e0ee:	69c6      	ldr	r6, [r0, #28]
 801e0f0:	4604      	mov	r4, r0
 801e0f2:	460d      	mov	r5, r1
 801e0f4:	b976      	cbnz	r6, 801e114 <_Balloc+0x28>
 801e0f6:	2010      	movs	r0, #16
 801e0f8:	f7ff ff44 	bl	801df84 <malloc>
 801e0fc:	4602      	mov	r2, r0
 801e0fe:	61e0      	str	r0, [r4, #28]
 801e100:	b920      	cbnz	r0, 801e10c <_Balloc+0x20>
 801e102:	4b18      	ldr	r3, [pc, #96]	; (801e164 <_Balloc+0x78>)
 801e104:	4818      	ldr	r0, [pc, #96]	; (801e168 <_Balloc+0x7c>)
 801e106:	216b      	movs	r1, #107	; 0x6b
 801e108:	f000 fd78 	bl	801ebfc <__assert_func>
 801e10c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e110:	6006      	str	r6, [r0, #0]
 801e112:	60c6      	str	r6, [r0, #12]
 801e114:	69e6      	ldr	r6, [r4, #28]
 801e116:	68f3      	ldr	r3, [r6, #12]
 801e118:	b183      	cbz	r3, 801e13c <_Balloc+0x50>
 801e11a:	69e3      	ldr	r3, [r4, #28]
 801e11c:	68db      	ldr	r3, [r3, #12]
 801e11e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e122:	b9b8      	cbnz	r0, 801e154 <_Balloc+0x68>
 801e124:	2101      	movs	r1, #1
 801e126:	fa01 f605 	lsl.w	r6, r1, r5
 801e12a:	1d72      	adds	r2, r6, #5
 801e12c:	0092      	lsls	r2, r2, #2
 801e12e:	4620      	mov	r0, r4
 801e130:	f000 fd82 	bl	801ec38 <_calloc_r>
 801e134:	b160      	cbz	r0, 801e150 <_Balloc+0x64>
 801e136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e13a:	e00e      	b.n	801e15a <_Balloc+0x6e>
 801e13c:	2221      	movs	r2, #33	; 0x21
 801e13e:	2104      	movs	r1, #4
 801e140:	4620      	mov	r0, r4
 801e142:	f000 fd79 	bl	801ec38 <_calloc_r>
 801e146:	69e3      	ldr	r3, [r4, #28]
 801e148:	60f0      	str	r0, [r6, #12]
 801e14a:	68db      	ldr	r3, [r3, #12]
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d1e4      	bne.n	801e11a <_Balloc+0x2e>
 801e150:	2000      	movs	r0, #0
 801e152:	bd70      	pop	{r4, r5, r6, pc}
 801e154:	6802      	ldr	r2, [r0, #0]
 801e156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e15a:	2300      	movs	r3, #0
 801e15c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e160:	e7f7      	b.n	801e152 <_Balloc+0x66>
 801e162:	bf00      	nop
 801e164:	08024e16 	.word	0x08024e16
 801e168:	08024e96 	.word	0x08024e96

0801e16c <_Bfree>:
 801e16c:	b570      	push	{r4, r5, r6, lr}
 801e16e:	69c6      	ldr	r6, [r0, #28]
 801e170:	4605      	mov	r5, r0
 801e172:	460c      	mov	r4, r1
 801e174:	b976      	cbnz	r6, 801e194 <_Bfree+0x28>
 801e176:	2010      	movs	r0, #16
 801e178:	f7ff ff04 	bl	801df84 <malloc>
 801e17c:	4602      	mov	r2, r0
 801e17e:	61e8      	str	r0, [r5, #28]
 801e180:	b920      	cbnz	r0, 801e18c <_Bfree+0x20>
 801e182:	4b09      	ldr	r3, [pc, #36]	; (801e1a8 <_Bfree+0x3c>)
 801e184:	4809      	ldr	r0, [pc, #36]	; (801e1ac <_Bfree+0x40>)
 801e186:	218f      	movs	r1, #143	; 0x8f
 801e188:	f000 fd38 	bl	801ebfc <__assert_func>
 801e18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e190:	6006      	str	r6, [r0, #0]
 801e192:	60c6      	str	r6, [r0, #12]
 801e194:	b13c      	cbz	r4, 801e1a6 <_Bfree+0x3a>
 801e196:	69eb      	ldr	r3, [r5, #28]
 801e198:	6862      	ldr	r2, [r4, #4]
 801e19a:	68db      	ldr	r3, [r3, #12]
 801e19c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e1a0:	6021      	str	r1, [r4, #0]
 801e1a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e1a6:	bd70      	pop	{r4, r5, r6, pc}
 801e1a8:	08024e16 	.word	0x08024e16
 801e1ac:	08024e96 	.word	0x08024e96

0801e1b0 <__multadd>:
 801e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1b4:	690d      	ldr	r5, [r1, #16]
 801e1b6:	4607      	mov	r7, r0
 801e1b8:	460c      	mov	r4, r1
 801e1ba:	461e      	mov	r6, r3
 801e1bc:	f101 0c14 	add.w	ip, r1, #20
 801e1c0:	2000      	movs	r0, #0
 801e1c2:	f8dc 3000 	ldr.w	r3, [ip]
 801e1c6:	b299      	uxth	r1, r3
 801e1c8:	fb02 6101 	mla	r1, r2, r1, r6
 801e1cc:	0c1e      	lsrs	r6, r3, #16
 801e1ce:	0c0b      	lsrs	r3, r1, #16
 801e1d0:	fb02 3306 	mla	r3, r2, r6, r3
 801e1d4:	b289      	uxth	r1, r1
 801e1d6:	3001      	adds	r0, #1
 801e1d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e1dc:	4285      	cmp	r5, r0
 801e1de:	f84c 1b04 	str.w	r1, [ip], #4
 801e1e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e1e6:	dcec      	bgt.n	801e1c2 <__multadd+0x12>
 801e1e8:	b30e      	cbz	r6, 801e22e <__multadd+0x7e>
 801e1ea:	68a3      	ldr	r3, [r4, #8]
 801e1ec:	42ab      	cmp	r3, r5
 801e1ee:	dc19      	bgt.n	801e224 <__multadd+0x74>
 801e1f0:	6861      	ldr	r1, [r4, #4]
 801e1f2:	4638      	mov	r0, r7
 801e1f4:	3101      	adds	r1, #1
 801e1f6:	f7ff ff79 	bl	801e0ec <_Balloc>
 801e1fa:	4680      	mov	r8, r0
 801e1fc:	b928      	cbnz	r0, 801e20a <__multadd+0x5a>
 801e1fe:	4602      	mov	r2, r0
 801e200:	4b0c      	ldr	r3, [pc, #48]	; (801e234 <__multadd+0x84>)
 801e202:	480d      	ldr	r0, [pc, #52]	; (801e238 <__multadd+0x88>)
 801e204:	21ba      	movs	r1, #186	; 0xba
 801e206:	f000 fcf9 	bl	801ebfc <__assert_func>
 801e20a:	6922      	ldr	r2, [r4, #16]
 801e20c:	3202      	adds	r2, #2
 801e20e:	f104 010c 	add.w	r1, r4, #12
 801e212:	0092      	lsls	r2, r2, #2
 801e214:	300c      	adds	r0, #12
 801e216:	f7fe ffd4 	bl	801d1c2 <memcpy>
 801e21a:	4621      	mov	r1, r4
 801e21c:	4638      	mov	r0, r7
 801e21e:	f7ff ffa5 	bl	801e16c <_Bfree>
 801e222:	4644      	mov	r4, r8
 801e224:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e228:	3501      	adds	r5, #1
 801e22a:	615e      	str	r6, [r3, #20]
 801e22c:	6125      	str	r5, [r4, #16]
 801e22e:	4620      	mov	r0, r4
 801e230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e234:	08024e85 	.word	0x08024e85
 801e238:	08024e96 	.word	0x08024e96

0801e23c <__hi0bits>:
 801e23c:	0c03      	lsrs	r3, r0, #16
 801e23e:	041b      	lsls	r3, r3, #16
 801e240:	b9d3      	cbnz	r3, 801e278 <__hi0bits+0x3c>
 801e242:	0400      	lsls	r0, r0, #16
 801e244:	2310      	movs	r3, #16
 801e246:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e24a:	bf04      	itt	eq
 801e24c:	0200      	lsleq	r0, r0, #8
 801e24e:	3308      	addeq	r3, #8
 801e250:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e254:	bf04      	itt	eq
 801e256:	0100      	lsleq	r0, r0, #4
 801e258:	3304      	addeq	r3, #4
 801e25a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e25e:	bf04      	itt	eq
 801e260:	0080      	lsleq	r0, r0, #2
 801e262:	3302      	addeq	r3, #2
 801e264:	2800      	cmp	r0, #0
 801e266:	db05      	blt.n	801e274 <__hi0bits+0x38>
 801e268:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e26c:	f103 0301 	add.w	r3, r3, #1
 801e270:	bf08      	it	eq
 801e272:	2320      	moveq	r3, #32
 801e274:	4618      	mov	r0, r3
 801e276:	4770      	bx	lr
 801e278:	2300      	movs	r3, #0
 801e27a:	e7e4      	b.n	801e246 <__hi0bits+0xa>

0801e27c <__lo0bits>:
 801e27c:	6803      	ldr	r3, [r0, #0]
 801e27e:	f013 0207 	ands.w	r2, r3, #7
 801e282:	d00c      	beq.n	801e29e <__lo0bits+0x22>
 801e284:	07d9      	lsls	r1, r3, #31
 801e286:	d422      	bmi.n	801e2ce <__lo0bits+0x52>
 801e288:	079a      	lsls	r2, r3, #30
 801e28a:	bf49      	itett	mi
 801e28c:	085b      	lsrmi	r3, r3, #1
 801e28e:	089b      	lsrpl	r3, r3, #2
 801e290:	6003      	strmi	r3, [r0, #0]
 801e292:	2201      	movmi	r2, #1
 801e294:	bf5c      	itt	pl
 801e296:	6003      	strpl	r3, [r0, #0]
 801e298:	2202      	movpl	r2, #2
 801e29a:	4610      	mov	r0, r2
 801e29c:	4770      	bx	lr
 801e29e:	b299      	uxth	r1, r3
 801e2a0:	b909      	cbnz	r1, 801e2a6 <__lo0bits+0x2a>
 801e2a2:	0c1b      	lsrs	r3, r3, #16
 801e2a4:	2210      	movs	r2, #16
 801e2a6:	b2d9      	uxtb	r1, r3
 801e2a8:	b909      	cbnz	r1, 801e2ae <__lo0bits+0x32>
 801e2aa:	3208      	adds	r2, #8
 801e2ac:	0a1b      	lsrs	r3, r3, #8
 801e2ae:	0719      	lsls	r1, r3, #28
 801e2b0:	bf04      	itt	eq
 801e2b2:	091b      	lsreq	r3, r3, #4
 801e2b4:	3204      	addeq	r2, #4
 801e2b6:	0799      	lsls	r1, r3, #30
 801e2b8:	bf04      	itt	eq
 801e2ba:	089b      	lsreq	r3, r3, #2
 801e2bc:	3202      	addeq	r2, #2
 801e2be:	07d9      	lsls	r1, r3, #31
 801e2c0:	d403      	bmi.n	801e2ca <__lo0bits+0x4e>
 801e2c2:	085b      	lsrs	r3, r3, #1
 801e2c4:	f102 0201 	add.w	r2, r2, #1
 801e2c8:	d003      	beq.n	801e2d2 <__lo0bits+0x56>
 801e2ca:	6003      	str	r3, [r0, #0]
 801e2cc:	e7e5      	b.n	801e29a <__lo0bits+0x1e>
 801e2ce:	2200      	movs	r2, #0
 801e2d0:	e7e3      	b.n	801e29a <__lo0bits+0x1e>
 801e2d2:	2220      	movs	r2, #32
 801e2d4:	e7e1      	b.n	801e29a <__lo0bits+0x1e>
	...

0801e2d8 <__i2b>:
 801e2d8:	b510      	push	{r4, lr}
 801e2da:	460c      	mov	r4, r1
 801e2dc:	2101      	movs	r1, #1
 801e2de:	f7ff ff05 	bl	801e0ec <_Balloc>
 801e2e2:	4602      	mov	r2, r0
 801e2e4:	b928      	cbnz	r0, 801e2f2 <__i2b+0x1a>
 801e2e6:	4b05      	ldr	r3, [pc, #20]	; (801e2fc <__i2b+0x24>)
 801e2e8:	4805      	ldr	r0, [pc, #20]	; (801e300 <__i2b+0x28>)
 801e2ea:	f240 1145 	movw	r1, #325	; 0x145
 801e2ee:	f000 fc85 	bl	801ebfc <__assert_func>
 801e2f2:	2301      	movs	r3, #1
 801e2f4:	6144      	str	r4, [r0, #20]
 801e2f6:	6103      	str	r3, [r0, #16]
 801e2f8:	bd10      	pop	{r4, pc}
 801e2fa:	bf00      	nop
 801e2fc:	08024e85 	.word	0x08024e85
 801e300:	08024e96 	.word	0x08024e96

0801e304 <__multiply>:
 801e304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e308:	4691      	mov	r9, r2
 801e30a:	690a      	ldr	r2, [r1, #16]
 801e30c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e310:	429a      	cmp	r2, r3
 801e312:	bfb8      	it	lt
 801e314:	460b      	movlt	r3, r1
 801e316:	460c      	mov	r4, r1
 801e318:	bfbc      	itt	lt
 801e31a:	464c      	movlt	r4, r9
 801e31c:	4699      	movlt	r9, r3
 801e31e:	6927      	ldr	r7, [r4, #16]
 801e320:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801e324:	68a3      	ldr	r3, [r4, #8]
 801e326:	6861      	ldr	r1, [r4, #4]
 801e328:	eb07 060a 	add.w	r6, r7, sl
 801e32c:	42b3      	cmp	r3, r6
 801e32e:	b085      	sub	sp, #20
 801e330:	bfb8      	it	lt
 801e332:	3101      	addlt	r1, #1
 801e334:	f7ff feda 	bl	801e0ec <_Balloc>
 801e338:	b930      	cbnz	r0, 801e348 <__multiply+0x44>
 801e33a:	4602      	mov	r2, r0
 801e33c:	4b44      	ldr	r3, [pc, #272]	; (801e450 <__multiply+0x14c>)
 801e33e:	4845      	ldr	r0, [pc, #276]	; (801e454 <__multiply+0x150>)
 801e340:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801e344:	f000 fc5a 	bl	801ebfc <__assert_func>
 801e348:	f100 0514 	add.w	r5, r0, #20
 801e34c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e350:	462b      	mov	r3, r5
 801e352:	2200      	movs	r2, #0
 801e354:	4543      	cmp	r3, r8
 801e356:	d321      	bcc.n	801e39c <__multiply+0x98>
 801e358:	f104 0314 	add.w	r3, r4, #20
 801e35c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801e360:	f109 0314 	add.w	r3, r9, #20
 801e364:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801e368:	9202      	str	r2, [sp, #8]
 801e36a:	1b3a      	subs	r2, r7, r4
 801e36c:	3a15      	subs	r2, #21
 801e36e:	f022 0203 	bic.w	r2, r2, #3
 801e372:	3204      	adds	r2, #4
 801e374:	f104 0115 	add.w	r1, r4, #21
 801e378:	428f      	cmp	r7, r1
 801e37a:	bf38      	it	cc
 801e37c:	2204      	movcc	r2, #4
 801e37e:	9201      	str	r2, [sp, #4]
 801e380:	9a02      	ldr	r2, [sp, #8]
 801e382:	9303      	str	r3, [sp, #12]
 801e384:	429a      	cmp	r2, r3
 801e386:	d80c      	bhi.n	801e3a2 <__multiply+0x9e>
 801e388:	2e00      	cmp	r6, #0
 801e38a:	dd03      	ble.n	801e394 <__multiply+0x90>
 801e38c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e390:	2b00      	cmp	r3, #0
 801e392:	d05b      	beq.n	801e44c <__multiply+0x148>
 801e394:	6106      	str	r6, [r0, #16]
 801e396:	b005      	add	sp, #20
 801e398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e39c:	f843 2b04 	str.w	r2, [r3], #4
 801e3a0:	e7d8      	b.n	801e354 <__multiply+0x50>
 801e3a2:	f8b3 a000 	ldrh.w	sl, [r3]
 801e3a6:	f1ba 0f00 	cmp.w	sl, #0
 801e3aa:	d024      	beq.n	801e3f6 <__multiply+0xf2>
 801e3ac:	f104 0e14 	add.w	lr, r4, #20
 801e3b0:	46a9      	mov	r9, r5
 801e3b2:	f04f 0c00 	mov.w	ip, #0
 801e3b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e3ba:	f8d9 1000 	ldr.w	r1, [r9]
 801e3be:	fa1f fb82 	uxth.w	fp, r2
 801e3c2:	b289      	uxth	r1, r1
 801e3c4:	fb0a 110b 	mla	r1, sl, fp, r1
 801e3c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e3cc:	f8d9 2000 	ldr.w	r2, [r9]
 801e3d0:	4461      	add	r1, ip
 801e3d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e3d6:	fb0a c20b 	mla	r2, sl, fp, ip
 801e3da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e3de:	b289      	uxth	r1, r1
 801e3e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e3e4:	4577      	cmp	r7, lr
 801e3e6:	f849 1b04 	str.w	r1, [r9], #4
 801e3ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e3ee:	d8e2      	bhi.n	801e3b6 <__multiply+0xb2>
 801e3f0:	9a01      	ldr	r2, [sp, #4]
 801e3f2:	f845 c002 	str.w	ip, [r5, r2]
 801e3f6:	9a03      	ldr	r2, [sp, #12]
 801e3f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e3fc:	3304      	adds	r3, #4
 801e3fe:	f1b9 0f00 	cmp.w	r9, #0
 801e402:	d021      	beq.n	801e448 <__multiply+0x144>
 801e404:	6829      	ldr	r1, [r5, #0]
 801e406:	f104 0c14 	add.w	ip, r4, #20
 801e40a:	46ae      	mov	lr, r5
 801e40c:	f04f 0a00 	mov.w	sl, #0
 801e410:	f8bc b000 	ldrh.w	fp, [ip]
 801e414:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e418:	fb09 220b 	mla	r2, r9, fp, r2
 801e41c:	4452      	add	r2, sl
 801e41e:	b289      	uxth	r1, r1
 801e420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e424:	f84e 1b04 	str.w	r1, [lr], #4
 801e428:	f85c 1b04 	ldr.w	r1, [ip], #4
 801e42c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e430:	f8be 1000 	ldrh.w	r1, [lr]
 801e434:	fb09 110a 	mla	r1, r9, sl, r1
 801e438:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801e43c:	4567      	cmp	r7, ip
 801e43e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e442:	d8e5      	bhi.n	801e410 <__multiply+0x10c>
 801e444:	9a01      	ldr	r2, [sp, #4]
 801e446:	50a9      	str	r1, [r5, r2]
 801e448:	3504      	adds	r5, #4
 801e44a:	e799      	b.n	801e380 <__multiply+0x7c>
 801e44c:	3e01      	subs	r6, #1
 801e44e:	e79b      	b.n	801e388 <__multiply+0x84>
 801e450:	08024e85 	.word	0x08024e85
 801e454:	08024e96 	.word	0x08024e96

0801e458 <__pow5mult>:
 801e458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e45c:	4615      	mov	r5, r2
 801e45e:	f012 0203 	ands.w	r2, r2, #3
 801e462:	4606      	mov	r6, r0
 801e464:	460f      	mov	r7, r1
 801e466:	d007      	beq.n	801e478 <__pow5mult+0x20>
 801e468:	4c25      	ldr	r4, [pc, #148]	; (801e500 <__pow5mult+0xa8>)
 801e46a:	3a01      	subs	r2, #1
 801e46c:	2300      	movs	r3, #0
 801e46e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e472:	f7ff fe9d 	bl	801e1b0 <__multadd>
 801e476:	4607      	mov	r7, r0
 801e478:	10ad      	asrs	r5, r5, #2
 801e47a:	d03d      	beq.n	801e4f8 <__pow5mult+0xa0>
 801e47c:	69f4      	ldr	r4, [r6, #28]
 801e47e:	b97c      	cbnz	r4, 801e4a0 <__pow5mult+0x48>
 801e480:	2010      	movs	r0, #16
 801e482:	f7ff fd7f 	bl	801df84 <malloc>
 801e486:	4602      	mov	r2, r0
 801e488:	61f0      	str	r0, [r6, #28]
 801e48a:	b928      	cbnz	r0, 801e498 <__pow5mult+0x40>
 801e48c:	4b1d      	ldr	r3, [pc, #116]	; (801e504 <__pow5mult+0xac>)
 801e48e:	481e      	ldr	r0, [pc, #120]	; (801e508 <__pow5mult+0xb0>)
 801e490:	f240 11b3 	movw	r1, #435	; 0x1b3
 801e494:	f000 fbb2 	bl	801ebfc <__assert_func>
 801e498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e49c:	6004      	str	r4, [r0, #0]
 801e49e:	60c4      	str	r4, [r0, #12]
 801e4a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801e4a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e4a8:	b94c      	cbnz	r4, 801e4be <__pow5mult+0x66>
 801e4aa:	f240 2171 	movw	r1, #625	; 0x271
 801e4ae:	4630      	mov	r0, r6
 801e4b0:	f7ff ff12 	bl	801e2d8 <__i2b>
 801e4b4:	2300      	movs	r3, #0
 801e4b6:	f8c8 0008 	str.w	r0, [r8, #8]
 801e4ba:	4604      	mov	r4, r0
 801e4bc:	6003      	str	r3, [r0, #0]
 801e4be:	f04f 0900 	mov.w	r9, #0
 801e4c2:	07eb      	lsls	r3, r5, #31
 801e4c4:	d50a      	bpl.n	801e4dc <__pow5mult+0x84>
 801e4c6:	4639      	mov	r1, r7
 801e4c8:	4622      	mov	r2, r4
 801e4ca:	4630      	mov	r0, r6
 801e4cc:	f7ff ff1a 	bl	801e304 <__multiply>
 801e4d0:	4639      	mov	r1, r7
 801e4d2:	4680      	mov	r8, r0
 801e4d4:	4630      	mov	r0, r6
 801e4d6:	f7ff fe49 	bl	801e16c <_Bfree>
 801e4da:	4647      	mov	r7, r8
 801e4dc:	106d      	asrs	r5, r5, #1
 801e4de:	d00b      	beq.n	801e4f8 <__pow5mult+0xa0>
 801e4e0:	6820      	ldr	r0, [r4, #0]
 801e4e2:	b938      	cbnz	r0, 801e4f4 <__pow5mult+0x9c>
 801e4e4:	4622      	mov	r2, r4
 801e4e6:	4621      	mov	r1, r4
 801e4e8:	4630      	mov	r0, r6
 801e4ea:	f7ff ff0b 	bl	801e304 <__multiply>
 801e4ee:	6020      	str	r0, [r4, #0]
 801e4f0:	f8c0 9000 	str.w	r9, [r0]
 801e4f4:	4604      	mov	r4, r0
 801e4f6:	e7e4      	b.n	801e4c2 <__pow5mult+0x6a>
 801e4f8:	4638      	mov	r0, r7
 801e4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e4fe:	bf00      	nop
 801e500:	08024fe0 	.word	0x08024fe0
 801e504:	08024e16 	.word	0x08024e16
 801e508:	08024e96 	.word	0x08024e96

0801e50c <__lshift>:
 801e50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e510:	460c      	mov	r4, r1
 801e512:	6849      	ldr	r1, [r1, #4]
 801e514:	6923      	ldr	r3, [r4, #16]
 801e516:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e51a:	68a3      	ldr	r3, [r4, #8]
 801e51c:	4607      	mov	r7, r0
 801e51e:	4691      	mov	r9, r2
 801e520:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e524:	f108 0601 	add.w	r6, r8, #1
 801e528:	42b3      	cmp	r3, r6
 801e52a:	db0b      	blt.n	801e544 <__lshift+0x38>
 801e52c:	4638      	mov	r0, r7
 801e52e:	f7ff fddd 	bl	801e0ec <_Balloc>
 801e532:	4605      	mov	r5, r0
 801e534:	b948      	cbnz	r0, 801e54a <__lshift+0x3e>
 801e536:	4602      	mov	r2, r0
 801e538:	4b28      	ldr	r3, [pc, #160]	; (801e5dc <__lshift+0xd0>)
 801e53a:	4829      	ldr	r0, [pc, #164]	; (801e5e0 <__lshift+0xd4>)
 801e53c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801e540:	f000 fb5c 	bl	801ebfc <__assert_func>
 801e544:	3101      	adds	r1, #1
 801e546:	005b      	lsls	r3, r3, #1
 801e548:	e7ee      	b.n	801e528 <__lshift+0x1c>
 801e54a:	2300      	movs	r3, #0
 801e54c:	f100 0114 	add.w	r1, r0, #20
 801e550:	f100 0210 	add.w	r2, r0, #16
 801e554:	4618      	mov	r0, r3
 801e556:	4553      	cmp	r3, sl
 801e558:	db33      	blt.n	801e5c2 <__lshift+0xb6>
 801e55a:	6920      	ldr	r0, [r4, #16]
 801e55c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e560:	f104 0314 	add.w	r3, r4, #20
 801e564:	f019 091f 	ands.w	r9, r9, #31
 801e568:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e56c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e570:	d02b      	beq.n	801e5ca <__lshift+0xbe>
 801e572:	f1c9 0e20 	rsb	lr, r9, #32
 801e576:	468a      	mov	sl, r1
 801e578:	2200      	movs	r2, #0
 801e57a:	6818      	ldr	r0, [r3, #0]
 801e57c:	fa00 f009 	lsl.w	r0, r0, r9
 801e580:	4310      	orrs	r0, r2
 801e582:	f84a 0b04 	str.w	r0, [sl], #4
 801e586:	f853 2b04 	ldr.w	r2, [r3], #4
 801e58a:	459c      	cmp	ip, r3
 801e58c:	fa22 f20e 	lsr.w	r2, r2, lr
 801e590:	d8f3      	bhi.n	801e57a <__lshift+0x6e>
 801e592:	ebac 0304 	sub.w	r3, ip, r4
 801e596:	3b15      	subs	r3, #21
 801e598:	f023 0303 	bic.w	r3, r3, #3
 801e59c:	3304      	adds	r3, #4
 801e59e:	f104 0015 	add.w	r0, r4, #21
 801e5a2:	4584      	cmp	ip, r0
 801e5a4:	bf38      	it	cc
 801e5a6:	2304      	movcc	r3, #4
 801e5a8:	50ca      	str	r2, [r1, r3]
 801e5aa:	b10a      	cbz	r2, 801e5b0 <__lshift+0xa4>
 801e5ac:	f108 0602 	add.w	r6, r8, #2
 801e5b0:	3e01      	subs	r6, #1
 801e5b2:	4638      	mov	r0, r7
 801e5b4:	612e      	str	r6, [r5, #16]
 801e5b6:	4621      	mov	r1, r4
 801e5b8:	f7ff fdd8 	bl	801e16c <_Bfree>
 801e5bc:	4628      	mov	r0, r5
 801e5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5c2:	f842 0f04 	str.w	r0, [r2, #4]!
 801e5c6:	3301      	adds	r3, #1
 801e5c8:	e7c5      	b.n	801e556 <__lshift+0x4a>
 801e5ca:	3904      	subs	r1, #4
 801e5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801e5d0:	f841 2f04 	str.w	r2, [r1, #4]!
 801e5d4:	459c      	cmp	ip, r3
 801e5d6:	d8f9      	bhi.n	801e5cc <__lshift+0xc0>
 801e5d8:	e7ea      	b.n	801e5b0 <__lshift+0xa4>
 801e5da:	bf00      	nop
 801e5dc:	08024e85 	.word	0x08024e85
 801e5e0:	08024e96 	.word	0x08024e96

0801e5e4 <__mcmp>:
 801e5e4:	b530      	push	{r4, r5, lr}
 801e5e6:	6902      	ldr	r2, [r0, #16]
 801e5e8:	690c      	ldr	r4, [r1, #16]
 801e5ea:	1b12      	subs	r2, r2, r4
 801e5ec:	d10e      	bne.n	801e60c <__mcmp+0x28>
 801e5ee:	f100 0314 	add.w	r3, r0, #20
 801e5f2:	3114      	adds	r1, #20
 801e5f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e5f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e5fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e604:	42a5      	cmp	r5, r4
 801e606:	d003      	beq.n	801e610 <__mcmp+0x2c>
 801e608:	d305      	bcc.n	801e616 <__mcmp+0x32>
 801e60a:	2201      	movs	r2, #1
 801e60c:	4610      	mov	r0, r2
 801e60e:	bd30      	pop	{r4, r5, pc}
 801e610:	4283      	cmp	r3, r0
 801e612:	d3f3      	bcc.n	801e5fc <__mcmp+0x18>
 801e614:	e7fa      	b.n	801e60c <__mcmp+0x28>
 801e616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e61a:	e7f7      	b.n	801e60c <__mcmp+0x28>

0801e61c <__mdiff>:
 801e61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e620:	460c      	mov	r4, r1
 801e622:	4606      	mov	r6, r0
 801e624:	4611      	mov	r1, r2
 801e626:	4620      	mov	r0, r4
 801e628:	4690      	mov	r8, r2
 801e62a:	f7ff ffdb 	bl	801e5e4 <__mcmp>
 801e62e:	1e05      	subs	r5, r0, #0
 801e630:	d110      	bne.n	801e654 <__mdiff+0x38>
 801e632:	4629      	mov	r1, r5
 801e634:	4630      	mov	r0, r6
 801e636:	f7ff fd59 	bl	801e0ec <_Balloc>
 801e63a:	b930      	cbnz	r0, 801e64a <__mdiff+0x2e>
 801e63c:	4b3a      	ldr	r3, [pc, #232]	; (801e728 <__mdiff+0x10c>)
 801e63e:	4602      	mov	r2, r0
 801e640:	f240 2137 	movw	r1, #567	; 0x237
 801e644:	4839      	ldr	r0, [pc, #228]	; (801e72c <__mdiff+0x110>)
 801e646:	f000 fad9 	bl	801ebfc <__assert_func>
 801e64a:	2301      	movs	r3, #1
 801e64c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e654:	bfa4      	itt	ge
 801e656:	4643      	movge	r3, r8
 801e658:	46a0      	movge	r8, r4
 801e65a:	4630      	mov	r0, r6
 801e65c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e660:	bfa6      	itte	ge
 801e662:	461c      	movge	r4, r3
 801e664:	2500      	movge	r5, #0
 801e666:	2501      	movlt	r5, #1
 801e668:	f7ff fd40 	bl	801e0ec <_Balloc>
 801e66c:	b920      	cbnz	r0, 801e678 <__mdiff+0x5c>
 801e66e:	4b2e      	ldr	r3, [pc, #184]	; (801e728 <__mdiff+0x10c>)
 801e670:	4602      	mov	r2, r0
 801e672:	f240 2145 	movw	r1, #581	; 0x245
 801e676:	e7e5      	b.n	801e644 <__mdiff+0x28>
 801e678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e67c:	6926      	ldr	r6, [r4, #16]
 801e67e:	60c5      	str	r5, [r0, #12]
 801e680:	f104 0914 	add.w	r9, r4, #20
 801e684:	f108 0514 	add.w	r5, r8, #20
 801e688:	f100 0e14 	add.w	lr, r0, #20
 801e68c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e694:	f108 0210 	add.w	r2, r8, #16
 801e698:	46f2      	mov	sl, lr
 801e69a:	2100      	movs	r1, #0
 801e69c:	f859 3b04 	ldr.w	r3, [r9], #4
 801e6a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e6a4:	fa11 f88b 	uxtah	r8, r1, fp
 801e6a8:	b299      	uxth	r1, r3
 801e6aa:	0c1b      	lsrs	r3, r3, #16
 801e6ac:	eba8 0801 	sub.w	r8, r8, r1
 801e6b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e6b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e6b8:	fa1f f888 	uxth.w	r8, r8
 801e6bc:	1419      	asrs	r1, r3, #16
 801e6be:	454e      	cmp	r6, r9
 801e6c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e6c4:	f84a 3b04 	str.w	r3, [sl], #4
 801e6c8:	d8e8      	bhi.n	801e69c <__mdiff+0x80>
 801e6ca:	1b33      	subs	r3, r6, r4
 801e6cc:	3b15      	subs	r3, #21
 801e6ce:	f023 0303 	bic.w	r3, r3, #3
 801e6d2:	3304      	adds	r3, #4
 801e6d4:	3415      	adds	r4, #21
 801e6d6:	42a6      	cmp	r6, r4
 801e6d8:	bf38      	it	cc
 801e6da:	2304      	movcc	r3, #4
 801e6dc:	441d      	add	r5, r3
 801e6de:	4473      	add	r3, lr
 801e6e0:	469e      	mov	lr, r3
 801e6e2:	462e      	mov	r6, r5
 801e6e4:	4566      	cmp	r6, ip
 801e6e6:	d30e      	bcc.n	801e706 <__mdiff+0xea>
 801e6e8:	f10c 0203 	add.w	r2, ip, #3
 801e6ec:	1b52      	subs	r2, r2, r5
 801e6ee:	f022 0203 	bic.w	r2, r2, #3
 801e6f2:	3d03      	subs	r5, #3
 801e6f4:	45ac      	cmp	ip, r5
 801e6f6:	bf38      	it	cc
 801e6f8:	2200      	movcc	r2, #0
 801e6fa:	4413      	add	r3, r2
 801e6fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801e700:	b17a      	cbz	r2, 801e722 <__mdiff+0x106>
 801e702:	6107      	str	r7, [r0, #16]
 801e704:	e7a4      	b.n	801e650 <__mdiff+0x34>
 801e706:	f856 8b04 	ldr.w	r8, [r6], #4
 801e70a:	fa11 f288 	uxtah	r2, r1, r8
 801e70e:	1414      	asrs	r4, r2, #16
 801e710:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e714:	b292      	uxth	r2, r2
 801e716:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e71a:	f84e 2b04 	str.w	r2, [lr], #4
 801e71e:	1421      	asrs	r1, r4, #16
 801e720:	e7e0      	b.n	801e6e4 <__mdiff+0xc8>
 801e722:	3f01      	subs	r7, #1
 801e724:	e7ea      	b.n	801e6fc <__mdiff+0xe0>
 801e726:	bf00      	nop
 801e728:	08024e85 	.word	0x08024e85
 801e72c:	08024e96 	.word	0x08024e96

0801e730 <__d2b>:
 801e730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e734:	460f      	mov	r7, r1
 801e736:	2101      	movs	r1, #1
 801e738:	ec59 8b10 	vmov	r8, r9, d0
 801e73c:	4616      	mov	r6, r2
 801e73e:	f7ff fcd5 	bl	801e0ec <_Balloc>
 801e742:	4604      	mov	r4, r0
 801e744:	b930      	cbnz	r0, 801e754 <__d2b+0x24>
 801e746:	4602      	mov	r2, r0
 801e748:	4b24      	ldr	r3, [pc, #144]	; (801e7dc <__d2b+0xac>)
 801e74a:	4825      	ldr	r0, [pc, #148]	; (801e7e0 <__d2b+0xb0>)
 801e74c:	f240 310f 	movw	r1, #783	; 0x30f
 801e750:	f000 fa54 	bl	801ebfc <__assert_func>
 801e754:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e75c:	bb2d      	cbnz	r5, 801e7aa <__d2b+0x7a>
 801e75e:	9301      	str	r3, [sp, #4]
 801e760:	f1b8 0300 	subs.w	r3, r8, #0
 801e764:	d026      	beq.n	801e7b4 <__d2b+0x84>
 801e766:	4668      	mov	r0, sp
 801e768:	9300      	str	r3, [sp, #0]
 801e76a:	f7ff fd87 	bl	801e27c <__lo0bits>
 801e76e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801e772:	b1e8      	cbz	r0, 801e7b0 <__d2b+0x80>
 801e774:	f1c0 0320 	rsb	r3, r0, #32
 801e778:	fa02 f303 	lsl.w	r3, r2, r3
 801e77c:	430b      	orrs	r3, r1
 801e77e:	40c2      	lsrs	r2, r0
 801e780:	6163      	str	r3, [r4, #20]
 801e782:	9201      	str	r2, [sp, #4]
 801e784:	9b01      	ldr	r3, [sp, #4]
 801e786:	61a3      	str	r3, [r4, #24]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	bf14      	ite	ne
 801e78c:	2202      	movne	r2, #2
 801e78e:	2201      	moveq	r2, #1
 801e790:	6122      	str	r2, [r4, #16]
 801e792:	b1bd      	cbz	r5, 801e7c4 <__d2b+0x94>
 801e794:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e798:	4405      	add	r5, r0
 801e79a:	603d      	str	r5, [r7, #0]
 801e79c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e7a0:	6030      	str	r0, [r6, #0]
 801e7a2:	4620      	mov	r0, r4
 801e7a4:	b003      	add	sp, #12
 801e7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e7ae:	e7d6      	b.n	801e75e <__d2b+0x2e>
 801e7b0:	6161      	str	r1, [r4, #20]
 801e7b2:	e7e7      	b.n	801e784 <__d2b+0x54>
 801e7b4:	a801      	add	r0, sp, #4
 801e7b6:	f7ff fd61 	bl	801e27c <__lo0bits>
 801e7ba:	9b01      	ldr	r3, [sp, #4]
 801e7bc:	6163      	str	r3, [r4, #20]
 801e7be:	3020      	adds	r0, #32
 801e7c0:	2201      	movs	r2, #1
 801e7c2:	e7e5      	b.n	801e790 <__d2b+0x60>
 801e7c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e7c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e7cc:	6038      	str	r0, [r7, #0]
 801e7ce:	6918      	ldr	r0, [r3, #16]
 801e7d0:	f7ff fd34 	bl	801e23c <__hi0bits>
 801e7d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e7d8:	e7e2      	b.n	801e7a0 <__d2b+0x70>
 801e7da:	bf00      	nop
 801e7dc:	08024e85 	.word	0x08024e85
 801e7e0:	08024e96 	.word	0x08024e96

0801e7e4 <__sfputc_r>:
 801e7e4:	6893      	ldr	r3, [r2, #8]
 801e7e6:	3b01      	subs	r3, #1
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	b410      	push	{r4}
 801e7ec:	6093      	str	r3, [r2, #8]
 801e7ee:	da08      	bge.n	801e802 <__sfputc_r+0x1e>
 801e7f0:	6994      	ldr	r4, [r2, #24]
 801e7f2:	42a3      	cmp	r3, r4
 801e7f4:	db01      	blt.n	801e7fa <__sfputc_r+0x16>
 801e7f6:	290a      	cmp	r1, #10
 801e7f8:	d103      	bne.n	801e802 <__sfputc_r+0x1e>
 801e7fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7fe:	f7fe bb46 	b.w	801ce8e <__swbuf_r>
 801e802:	6813      	ldr	r3, [r2, #0]
 801e804:	1c58      	adds	r0, r3, #1
 801e806:	6010      	str	r0, [r2, #0]
 801e808:	7019      	strb	r1, [r3, #0]
 801e80a:	4608      	mov	r0, r1
 801e80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e810:	4770      	bx	lr

0801e812 <__sfputs_r>:
 801e812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e814:	4606      	mov	r6, r0
 801e816:	460f      	mov	r7, r1
 801e818:	4614      	mov	r4, r2
 801e81a:	18d5      	adds	r5, r2, r3
 801e81c:	42ac      	cmp	r4, r5
 801e81e:	d101      	bne.n	801e824 <__sfputs_r+0x12>
 801e820:	2000      	movs	r0, #0
 801e822:	e007      	b.n	801e834 <__sfputs_r+0x22>
 801e824:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e828:	463a      	mov	r2, r7
 801e82a:	4630      	mov	r0, r6
 801e82c:	f7ff ffda 	bl	801e7e4 <__sfputc_r>
 801e830:	1c43      	adds	r3, r0, #1
 801e832:	d1f3      	bne.n	801e81c <__sfputs_r+0xa>
 801e834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e838 <_vfiprintf_r>:
 801e838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e83c:	460d      	mov	r5, r1
 801e83e:	b09d      	sub	sp, #116	; 0x74
 801e840:	4614      	mov	r4, r2
 801e842:	4698      	mov	r8, r3
 801e844:	4606      	mov	r6, r0
 801e846:	b118      	cbz	r0, 801e850 <_vfiprintf_r+0x18>
 801e848:	6a03      	ldr	r3, [r0, #32]
 801e84a:	b90b      	cbnz	r3, 801e850 <_vfiprintf_r+0x18>
 801e84c:	f7fe fa8c 	bl	801cd68 <__sinit>
 801e850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e852:	07d9      	lsls	r1, r3, #31
 801e854:	d405      	bmi.n	801e862 <_vfiprintf_r+0x2a>
 801e856:	89ab      	ldrh	r3, [r5, #12]
 801e858:	059a      	lsls	r2, r3, #22
 801e85a:	d402      	bmi.n	801e862 <_vfiprintf_r+0x2a>
 801e85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e85e:	f7fe fcae 	bl	801d1be <__retarget_lock_acquire_recursive>
 801e862:	89ab      	ldrh	r3, [r5, #12]
 801e864:	071b      	lsls	r3, r3, #28
 801e866:	d501      	bpl.n	801e86c <_vfiprintf_r+0x34>
 801e868:	692b      	ldr	r3, [r5, #16]
 801e86a:	b99b      	cbnz	r3, 801e894 <_vfiprintf_r+0x5c>
 801e86c:	4629      	mov	r1, r5
 801e86e:	4630      	mov	r0, r6
 801e870:	f7fe fb4a 	bl	801cf08 <__swsetup_r>
 801e874:	b170      	cbz	r0, 801e894 <_vfiprintf_r+0x5c>
 801e876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e878:	07dc      	lsls	r4, r3, #31
 801e87a:	d504      	bpl.n	801e886 <_vfiprintf_r+0x4e>
 801e87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e880:	b01d      	add	sp, #116	; 0x74
 801e882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e886:	89ab      	ldrh	r3, [r5, #12]
 801e888:	0598      	lsls	r0, r3, #22
 801e88a:	d4f7      	bmi.n	801e87c <_vfiprintf_r+0x44>
 801e88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e88e:	f7fe fc97 	bl	801d1c0 <__retarget_lock_release_recursive>
 801e892:	e7f3      	b.n	801e87c <_vfiprintf_r+0x44>
 801e894:	2300      	movs	r3, #0
 801e896:	9309      	str	r3, [sp, #36]	; 0x24
 801e898:	2320      	movs	r3, #32
 801e89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e89e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e8a2:	2330      	movs	r3, #48	; 0x30
 801e8a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ea58 <_vfiprintf_r+0x220>
 801e8a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e8ac:	f04f 0901 	mov.w	r9, #1
 801e8b0:	4623      	mov	r3, r4
 801e8b2:	469a      	mov	sl, r3
 801e8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e8b8:	b10a      	cbz	r2, 801e8be <_vfiprintf_r+0x86>
 801e8ba:	2a25      	cmp	r2, #37	; 0x25
 801e8bc:	d1f9      	bne.n	801e8b2 <_vfiprintf_r+0x7a>
 801e8be:	ebba 0b04 	subs.w	fp, sl, r4
 801e8c2:	d00b      	beq.n	801e8dc <_vfiprintf_r+0xa4>
 801e8c4:	465b      	mov	r3, fp
 801e8c6:	4622      	mov	r2, r4
 801e8c8:	4629      	mov	r1, r5
 801e8ca:	4630      	mov	r0, r6
 801e8cc:	f7ff ffa1 	bl	801e812 <__sfputs_r>
 801e8d0:	3001      	adds	r0, #1
 801e8d2:	f000 80a9 	beq.w	801ea28 <_vfiprintf_r+0x1f0>
 801e8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8d8:	445a      	add	r2, fp
 801e8da:	9209      	str	r2, [sp, #36]	; 0x24
 801e8dc:	f89a 3000 	ldrb.w	r3, [sl]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	f000 80a1 	beq.w	801ea28 <_vfiprintf_r+0x1f0>
 801e8e6:	2300      	movs	r3, #0
 801e8e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e8f0:	f10a 0a01 	add.w	sl, sl, #1
 801e8f4:	9304      	str	r3, [sp, #16]
 801e8f6:	9307      	str	r3, [sp, #28]
 801e8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e8fc:	931a      	str	r3, [sp, #104]	; 0x68
 801e8fe:	4654      	mov	r4, sl
 801e900:	2205      	movs	r2, #5
 801e902:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e906:	4854      	ldr	r0, [pc, #336]	; (801ea58 <_vfiprintf_r+0x220>)
 801e908:	f7e1 fc72 	bl	80001f0 <memchr>
 801e90c:	9a04      	ldr	r2, [sp, #16]
 801e90e:	b9d8      	cbnz	r0, 801e948 <_vfiprintf_r+0x110>
 801e910:	06d1      	lsls	r1, r2, #27
 801e912:	bf44      	itt	mi
 801e914:	2320      	movmi	r3, #32
 801e916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e91a:	0713      	lsls	r3, r2, #28
 801e91c:	bf44      	itt	mi
 801e91e:	232b      	movmi	r3, #43	; 0x2b
 801e920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e924:	f89a 3000 	ldrb.w	r3, [sl]
 801e928:	2b2a      	cmp	r3, #42	; 0x2a
 801e92a:	d015      	beq.n	801e958 <_vfiprintf_r+0x120>
 801e92c:	9a07      	ldr	r2, [sp, #28]
 801e92e:	4654      	mov	r4, sl
 801e930:	2000      	movs	r0, #0
 801e932:	f04f 0c0a 	mov.w	ip, #10
 801e936:	4621      	mov	r1, r4
 801e938:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e93c:	3b30      	subs	r3, #48	; 0x30
 801e93e:	2b09      	cmp	r3, #9
 801e940:	d94d      	bls.n	801e9de <_vfiprintf_r+0x1a6>
 801e942:	b1b0      	cbz	r0, 801e972 <_vfiprintf_r+0x13a>
 801e944:	9207      	str	r2, [sp, #28]
 801e946:	e014      	b.n	801e972 <_vfiprintf_r+0x13a>
 801e948:	eba0 0308 	sub.w	r3, r0, r8
 801e94c:	fa09 f303 	lsl.w	r3, r9, r3
 801e950:	4313      	orrs	r3, r2
 801e952:	9304      	str	r3, [sp, #16]
 801e954:	46a2      	mov	sl, r4
 801e956:	e7d2      	b.n	801e8fe <_vfiprintf_r+0xc6>
 801e958:	9b03      	ldr	r3, [sp, #12]
 801e95a:	1d19      	adds	r1, r3, #4
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	9103      	str	r1, [sp, #12]
 801e960:	2b00      	cmp	r3, #0
 801e962:	bfbb      	ittet	lt
 801e964:	425b      	neglt	r3, r3
 801e966:	f042 0202 	orrlt.w	r2, r2, #2
 801e96a:	9307      	strge	r3, [sp, #28]
 801e96c:	9307      	strlt	r3, [sp, #28]
 801e96e:	bfb8      	it	lt
 801e970:	9204      	strlt	r2, [sp, #16]
 801e972:	7823      	ldrb	r3, [r4, #0]
 801e974:	2b2e      	cmp	r3, #46	; 0x2e
 801e976:	d10c      	bne.n	801e992 <_vfiprintf_r+0x15a>
 801e978:	7863      	ldrb	r3, [r4, #1]
 801e97a:	2b2a      	cmp	r3, #42	; 0x2a
 801e97c:	d134      	bne.n	801e9e8 <_vfiprintf_r+0x1b0>
 801e97e:	9b03      	ldr	r3, [sp, #12]
 801e980:	1d1a      	adds	r2, r3, #4
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	9203      	str	r2, [sp, #12]
 801e986:	2b00      	cmp	r3, #0
 801e988:	bfb8      	it	lt
 801e98a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e98e:	3402      	adds	r4, #2
 801e990:	9305      	str	r3, [sp, #20]
 801e992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ea68 <_vfiprintf_r+0x230>
 801e996:	7821      	ldrb	r1, [r4, #0]
 801e998:	2203      	movs	r2, #3
 801e99a:	4650      	mov	r0, sl
 801e99c:	f7e1 fc28 	bl	80001f0 <memchr>
 801e9a0:	b138      	cbz	r0, 801e9b2 <_vfiprintf_r+0x17a>
 801e9a2:	9b04      	ldr	r3, [sp, #16]
 801e9a4:	eba0 000a 	sub.w	r0, r0, sl
 801e9a8:	2240      	movs	r2, #64	; 0x40
 801e9aa:	4082      	lsls	r2, r0
 801e9ac:	4313      	orrs	r3, r2
 801e9ae:	3401      	adds	r4, #1
 801e9b0:	9304      	str	r3, [sp, #16]
 801e9b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e9b6:	4829      	ldr	r0, [pc, #164]	; (801ea5c <_vfiprintf_r+0x224>)
 801e9b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e9bc:	2206      	movs	r2, #6
 801e9be:	f7e1 fc17 	bl	80001f0 <memchr>
 801e9c2:	2800      	cmp	r0, #0
 801e9c4:	d03f      	beq.n	801ea46 <_vfiprintf_r+0x20e>
 801e9c6:	4b26      	ldr	r3, [pc, #152]	; (801ea60 <_vfiprintf_r+0x228>)
 801e9c8:	bb1b      	cbnz	r3, 801ea12 <_vfiprintf_r+0x1da>
 801e9ca:	9b03      	ldr	r3, [sp, #12]
 801e9cc:	3307      	adds	r3, #7
 801e9ce:	f023 0307 	bic.w	r3, r3, #7
 801e9d2:	3308      	adds	r3, #8
 801e9d4:	9303      	str	r3, [sp, #12]
 801e9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e9d8:	443b      	add	r3, r7
 801e9da:	9309      	str	r3, [sp, #36]	; 0x24
 801e9dc:	e768      	b.n	801e8b0 <_vfiprintf_r+0x78>
 801e9de:	fb0c 3202 	mla	r2, ip, r2, r3
 801e9e2:	460c      	mov	r4, r1
 801e9e4:	2001      	movs	r0, #1
 801e9e6:	e7a6      	b.n	801e936 <_vfiprintf_r+0xfe>
 801e9e8:	2300      	movs	r3, #0
 801e9ea:	3401      	adds	r4, #1
 801e9ec:	9305      	str	r3, [sp, #20]
 801e9ee:	4619      	mov	r1, r3
 801e9f0:	f04f 0c0a 	mov.w	ip, #10
 801e9f4:	4620      	mov	r0, r4
 801e9f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e9fa:	3a30      	subs	r2, #48	; 0x30
 801e9fc:	2a09      	cmp	r2, #9
 801e9fe:	d903      	bls.n	801ea08 <_vfiprintf_r+0x1d0>
 801ea00:	2b00      	cmp	r3, #0
 801ea02:	d0c6      	beq.n	801e992 <_vfiprintf_r+0x15a>
 801ea04:	9105      	str	r1, [sp, #20]
 801ea06:	e7c4      	b.n	801e992 <_vfiprintf_r+0x15a>
 801ea08:	fb0c 2101 	mla	r1, ip, r1, r2
 801ea0c:	4604      	mov	r4, r0
 801ea0e:	2301      	movs	r3, #1
 801ea10:	e7f0      	b.n	801e9f4 <_vfiprintf_r+0x1bc>
 801ea12:	ab03      	add	r3, sp, #12
 801ea14:	9300      	str	r3, [sp, #0]
 801ea16:	462a      	mov	r2, r5
 801ea18:	4b12      	ldr	r3, [pc, #72]	; (801ea64 <_vfiprintf_r+0x22c>)
 801ea1a:	a904      	add	r1, sp, #16
 801ea1c:	4630      	mov	r0, r6
 801ea1e:	f7fd fc8f 	bl	801c340 <_printf_float>
 801ea22:	4607      	mov	r7, r0
 801ea24:	1c78      	adds	r0, r7, #1
 801ea26:	d1d6      	bne.n	801e9d6 <_vfiprintf_r+0x19e>
 801ea28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ea2a:	07d9      	lsls	r1, r3, #31
 801ea2c:	d405      	bmi.n	801ea3a <_vfiprintf_r+0x202>
 801ea2e:	89ab      	ldrh	r3, [r5, #12]
 801ea30:	059a      	lsls	r2, r3, #22
 801ea32:	d402      	bmi.n	801ea3a <_vfiprintf_r+0x202>
 801ea34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ea36:	f7fe fbc3 	bl	801d1c0 <__retarget_lock_release_recursive>
 801ea3a:	89ab      	ldrh	r3, [r5, #12]
 801ea3c:	065b      	lsls	r3, r3, #25
 801ea3e:	f53f af1d 	bmi.w	801e87c <_vfiprintf_r+0x44>
 801ea42:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ea44:	e71c      	b.n	801e880 <_vfiprintf_r+0x48>
 801ea46:	ab03      	add	r3, sp, #12
 801ea48:	9300      	str	r3, [sp, #0]
 801ea4a:	462a      	mov	r2, r5
 801ea4c:	4b05      	ldr	r3, [pc, #20]	; (801ea64 <_vfiprintf_r+0x22c>)
 801ea4e:	a904      	add	r1, sp, #16
 801ea50:	4630      	mov	r0, r6
 801ea52:	f7fd ff19 	bl	801c888 <_printf_i>
 801ea56:	e7e4      	b.n	801ea22 <_vfiprintf_r+0x1ea>
 801ea58:	08024fec 	.word	0x08024fec
 801ea5c:	08024ff6 	.word	0x08024ff6
 801ea60:	0801c341 	.word	0x0801c341
 801ea64:	0801e813 	.word	0x0801e813
 801ea68:	08024ff2 	.word	0x08024ff2

0801ea6c <__swhatbuf_r>:
 801ea6c:	b570      	push	{r4, r5, r6, lr}
 801ea6e:	460c      	mov	r4, r1
 801ea70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea74:	2900      	cmp	r1, #0
 801ea76:	b096      	sub	sp, #88	; 0x58
 801ea78:	4615      	mov	r5, r2
 801ea7a:	461e      	mov	r6, r3
 801ea7c:	da0d      	bge.n	801ea9a <__swhatbuf_r+0x2e>
 801ea7e:	89a3      	ldrh	r3, [r4, #12]
 801ea80:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ea84:	f04f 0100 	mov.w	r1, #0
 801ea88:	bf0c      	ite	eq
 801ea8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ea8e:	2340      	movne	r3, #64	; 0x40
 801ea90:	2000      	movs	r0, #0
 801ea92:	6031      	str	r1, [r6, #0]
 801ea94:	602b      	str	r3, [r5, #0]
 801ea96:	b016      	add	sp, #88	; 0x58
 801ea98:	bd70      	pop	{r4, r5, r6, pc}
 801ea9a:	466a      	mov	r2, sp
 801ea9c:	f000 f87c 	bl	801eb98 <_fstat_r>
 801eaa0:	2800      	cmp	r0, #0
 801eaa2:	dbec      	blt.n	801ea7e <__swhatbuf_r+0x12>
 801eaa4:	9901      	ldr	r1, [sp, #4]
 801eaa6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801eaaa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801eaae:	4259      	negs	r1, r3
 801eab0:	4159      	adcs	r1, r3
 801eab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eab6:	e7eb      	b.n	801ea90 <__swhatbuf_r+0x24>

0801eab8 <__smakebuf_r>:
 801eab8:	898b      	ldrh	r3, [r1, #12]
 801eaba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eabc:	079d      	lsls	r5, r3, #30
 801eabe:	4606      	mov	r6, r0
 801eac0:	460c      	mov	r4, r1
 801eac2:	d507      	bpl.n	801ead4 <__smakebuf_r+0x1c>
 801eac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eac8:	6023      	str	r3, [r4, #0]
 801eaca:	6123      	str	r3, [r4, #16]
 801eacc:	2301      	movs	r3, #1
 801eace:	6163      	str	r3, [r4, #20]
 801ead0:	b002      	add	sp, #8
 801ead2:	bd70      	pop	{r4, r5, r6, pc}
 801ead4:	ab01      	add	r3, sp, #4
 801ead6:	466a      	mov	r2, sp
 801ead8:	f7ff ffc8 	bl	801ea6c <__swhatbuf_r>
 801eadc:	9900      	ldr	r1, [sp, #0]
 801eade:	4605      	mov	r5, r0
 801eae0:	4630      	mov	r0, r6
 801eae2:	f7ff fa77 	bl	801dfd4 <_malloc_r>
 801eae6:	b948      	cbnz	r0, 801eafc <__smakebuf_r+0x44>
 801eae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eaec:	059a      	lsls	r2, r3, #22
 801eaee:	d4ef      	bmi.n	801ead0 <__smakebuf_r+0x18>
 801eaf0:	f023 0303 	bic.w	r3, r3, #3
 801eaf4:	f043 0302 	orr.w	r3, r3, #2
 801eaf8:	81a3      	strh	r3, [r4, #12]
 801eafa:	e7e3      	b.n	801eac4 <__smakebuf_r+0xc>
 801eafc:	89a3      	ldrh	r3, [r4, #12]
 801eafe:	6020      	str	r0, [r4, #0]
 801eb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eb04:	81a3      	strh	r3, [r4, #12]
 801eb06:	9b00      	ldr	r3, [sp, #0]
 801eb08:	6163      	str	r3, [r4, #20]
 801eb0a:	9b01      	ldr	r3, [sp, #4]
 801eb0c:	6120      	str	r0, [r4, #16]
 801eb0e:	b15b      	cbz	r3, 801eb28 <__smakebuf_r+0x70>
 801eb10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb14:	4630      	mov	r0, r6
 801eb16:	f000 f851 	bl	801ebbc <_isatty_r>
 801eb1a:	b128      	cbz	r0, 801eb28 <__smakebuf_r+0x70>
 801eb1c:	89a3      	ldrh	r3, [r4, #12]
 801eb1e:	f023 0303 	bic.w	r3, r3, #3
 801eb22:	f043 0301 	orr.w	r3, r3, #1
 801eb26:	81a3      	strh	r3, [r4, #12]
 801eb28:	89a3      	ldrh	r3, [r4, #12]
 801eb2a:	431d      	orrs	r5, r3
 801eb2c:	81a5      	strh	r5, [r4, #12]
 801eb2e:	e7cf      	b.n	801ead0 <__smakebuf_r+0x18>

0801eb30 <_putc_r>:
 801eb30:	b570      	push	{r4, r5, r6, lr}
 801eb32:	460d      	mov	r5, r1
 801eb34:	4614      	mov	r4, r2
 801eb36:	4606      	mov	r6, r0
 801eb38:	b118      	cbz	r0, 801eb42 <_putc_r+0x12>
 801eb3a:	6a03      	ldr	r3, [r0, #32]
 801eb3c:	b90b      	cbnz	r3, 801eb42 <_putc_r+0x12>
 801eb3e:	f7fe f913 	bl	801cd68 <__sinit>
 801eb42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb44:	07d8      	lsls	r0, r3, #31
 801eb46:	d405      	bmi.n	801eb54 <_putc_r+0x24>
 801eb48:	89a3      	ldrh	r3, [r4, #12]
 801eb4a:	0599      	lsls	r1, r3, #22
 801eb4c:	d402      	bmi.n	801eb54 <_putc_r+0x24>
 801eb4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb50:	f7fe fb35 	bl	801d1be <__retarget_lock_acquire_recursive>
 801eb54:	68a3      	ldr	r3, [r4, #8]
 801eb56:	3b01      	subs	r3, #1
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	60a3      	str	r3, [r4, #8]
 801eb5c:	da05      	bge.n	801eb6a <_putc_r+0x3a>
 801eb5e:	69a2      	ldr	r2, [r4, #24]
 801eb60:	4293      	cmp	r3, r2
 801eb62:	db12      	blt.n	801eb8a <_putc_r+0x5a>
 801eb64:	b2eb      	uxtb	r3, r5
 801eb66:	2b0a      	cmp	r3, #10
 801eb68:	d00f      	beq.n	801eb8a <_putc_r+0x5a>
 801eb6a:	6823      	ldr	r3, [r4, #0]
 801eb6c:	1c5a      	adds	r2, r3, #1
 801eb6e:	6022      	str	r2, [r4, #0]
 801eb70:	701d      	strb	r5, [r3, #0]
 801eb72:	b2ed      	uxtb	r5, r5
 801eb74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb76:	07da      	lsls	r2, r3, #31
 801eb78:	d405      	bmi.n	801eb86 <_putc_r+0x56>
 801eb7a:	89a3      	ldrh	r3, [r4, #12]
 801eb7c:	059b      	lsls	r3, r3, #22
 801eb7e:	d402      	bmi.n	801eb86 <_putc_r+0x56>
 801eb80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb82:	f7fe fb1d 	bl	801d1c0 <__retarget_lock_release_recursive>
 801eb86:	4628      	mov	r0, r5
 801eb88:	bd70      	pop	{r4, r5, r6, pc}
 801eb8a:	4629      	mov	r1, r5
 801eb8c:	4622      	mov	r2, r4
 801eb8e:	4630      	mov	r0, r6
 801eb90:	f7fe f97d 	bl	801ce8e <__swbuf_r>
 801eb94:	4605      	mov	r5, r0
 801eb96:	e7ed      	b.n	801eb74 <_putc_r+0x44>

0801eb98 <_fstat_r>:
 801eb98:	b538      	push	{r3, r4, r5, lr}
 801eb9a:	4d07      	ldr	r5, [pc, #28]	; (801ebb8 <_fstat_r+0x20>)
 801eb9c:	2300      	movs	r3, #0
 801eb9e:	4604      	mov	r4, r0
 801eba0:	4608      	mov	r0, r1
 801eba2:	4611      	mov	r1, r2
 801eba4:	602b      	str	r3, [r5, #0]
 801eba6:	f7f0 f914 	bl	800edd2 <_fstat>
 801ebaa:	1c43      	adds	r3, r0, #1
 801ebac:	d102      	bne.n	801ebb4 <_fstat_r+0x1c>
 801ebae:	682b      	ldr	r3, [r5, #0]
 801ebb0:	b103      	cbz	r3, 801ebb4 <_fstat_r+0x1c>
 801ebb2:	6023      	str	r3, [r4, #0]
 801ebb4:	bd38      	pop	{r3, r4, r5, pc}
 801ebb6:	bf00      	nop
 801ebb8:	200100a8 	.word	0x200100a8

0801ebbc <_isatty_r>:
 801ebbc:	b538      	push	{r3, r4, r5, lr}
 801ebbe:	4d06      	ldr	r5, [pc, #24]	; (801ebd8 <_isatty_r+0x1c>)
 801ebc0:	2300      	movs	r3, #0
 801ebc2:	4604      	mov	r4, r0
 801ebc4:	4608      	mov	r0, r1
 801ebc6:	602b      	str	r3, [r5, #0]
 801ebc8:	f7f0 f913 	bl	800edf2 <_isatty>
 801ebcc:	1c43      	adds	r3, r0, #1
 801ebce:	d102      	bne.n	801ebd6 <_isatty_r+0x1a>
 801ebd0:	682b      	ldr	r3, [r5, #0]
 801ebd2:	b103      	cbz	r3, 801ebd6 <_isatty_r+0x1a>
 801ebd4:	6023      	str	r3, [r4, #0]
 801ebd6:	bd38      	pop	{r3, r4, r5, pc}
 801ebd8:	200100a8 	.word	0x200100a8

0801ebdc <_sbrk_r>:
 801ebdc:	b538      	push	{r3, r4, r5, lr}
 801ebde:	4d06      	ldr	r5, [pc, #24]	; (801ebf8 <_sbrk_r+0x1c>)
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	4604      	mov	r4, r0
 801ebe4:	4608      	mov	r0, r1
 801ebe6:	602b      	str	r3, [r5, #0]
 801ebe8:	f7f0 f91c 	bl	800ee24 <_sbrk>
 801ebec:	1c43      	adds	r3, r0, #1
 801ebee:	d102      	bne.n	801ebf6 <_sbrk_r+0x1a>
 801ebf0:	682b      	ldr	r3, [r5, #0]
 801ebf2:	b103      	cbz	r3, 801ebf6 <_sbrk_r+0x1a>
 801ebf4:	6023      	str	r3, [r4, #0]
 801ebf6:	bd38      	pop	{r3, r4, r5, pc}
 801ebf8:	200100a8 	.word	0x200100a8

0801ebfc <__assert_func>:
 801ebfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ebfe:	4614      	mov	r4, r2
 801ec00:	461a      	mov	r2, r3
 801ec02:	4b09      	ldr	r3, [pc, #36]	; (801ec28 <__assert_func+0x2c>)
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	4605      	mov	r5, r0
 801ec08:	68d8      	ldr	r0, [r3, #12]
 801ec0a:	b14c      	cbz	r4, 801ec20 <__assert_func+0x24>
 801ec0c:	4b07      	ldr	r3, [pc, #28]	; (801ec2c <__assert_func+0x30>)
 801ec0e:	9100      	str	r1, [sp, #0]
 801ec10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ec14:	4906      	ldr	r1, [pc, #24]	; (801ec30 <__assert_func+0x34>)
 801ec16:	462b      	mov	r3, r5
 801ec18:	f000 f844 	bl	801eca4 <fiprintf>
 801ec1c:	f000 f854 	bl	801ecc8 <abort>
 801ec20:	4b04      	ldr	r3, [pc, #16]	; (801ec34 <__assert_func+0x38>)
 801ec22:	461c      	mov	r4, r3
 801ec24:	e7f3      	b.n	801ec0e <__assert_func+0x12>
 801ec26:	bf00      	nop
 801ec28:	20000d9c 	.word	0x20000d9c
 801ec2c:	08025007 	.word	0x08025007
 801ec30:	08025014 	.word	0x08025014
 801ec34:	08025042 	.word	0x08025042

0801ec38 <_calloc_r>:
 801ec38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ec3a:	fba1 2402 	umull	r2, r4, r1, r2
 801ec3e:	b94c      	cbnz	r4, 801ec54 <_calloc_r+0x1c>
 801ec40:	4611      	mov	r1, r2
 801ec42:	9201      	str	r2, [sp, #4]
 801ec44:	f7ff f9c6 	bl	801dfd4 <_malloc_r>
 801ec48:	9a01      	ldr	r2, [sp, #4]
 801ec4a:	4605      	mov	r5, r0
 801ec4c:	b930      	cbnz	r0, 801ec5c <_calloc_r+0x24>
 801ec4e:	4628      	mov	r0, r5
 801ec50:	b003      	add	sp, #12
 801ec52:	bd30      	pop	{r4, r5, pc}
 801ec54:	220c      	movs	r2, #12
 801ec56:	6002      	str	r2, [r0, #0]
 801ec58:	2500      	movs	r5, #0
 801ec5a:	e7f8      	b.n	801ec4e <_calloc_r+0x16>
 801ec5c:	4621      	mov	r1, r4
 801ec5e:	f7fe f9ab 	bl	801cfb8 <memset>
 801ec62:	e7f4      	b.n	801ec4e <_calloc_r+0x16>

0801ec64 <__ascii_mbtowc>:
 801ec64:	b082      	sub	sp, #8
 801ec66:	b901      	cbnz	r1, 801ec6a <__ascii_mbtowc+0x6>
 801ec68:	a901      	add	r1, sp, #4
 801ec6a:	b142      	cbz	r2, 801ec7e <__ascii_mbtowc+0x1a>
 801ec6c:	b14b      	cbz	r3, 801ec82 <__ascii_mbtowc+0x1e>
 801ec6e:	7813      	ldrb	r3, [r2, #0]
 801ec70:	600b      	str	r3, [r1, #0]
 801ec72:	7812      	ldrb	r2, [r2, #0]
 801ec74:	1e10      	subs	r0, r2, #0
 801ec76:	bf18      	it	ne
 801ec78:	2001      	movne	r0, #1
 801ec7a:	b002      	add	sp, #8
 801ec7c:	4770      	bx	lr
 801ec7e:	4610      	mov	r0, r2
 801ec80:	e7fb      	b.n	801ec7a <__ascii_mbtowc+0x16>
 801ec82:	f06f 0001 	mvn.w	r0, #1
 801ec86:	e7f8      	b.n	801ec7a <__ascii_mbtowc+0x16>

0801ec88 <__ascii_wctomb>:
 801ec88:	b149      	cbz	r1, 801ec9e <__ascii_wctomb+0x16>
 801ec8a:	2aff      	cmp	r2, #255	; 0xff
 801ec8c:	bf85      	ittet	hi
 801ec8e:	238a      	movhi	r3, #138	; 0x8a
 801ec90:	6003      	strhi	r3, [r0, #0]
 801ec92:	700a      	strbls	r2, [r1, #0]
 801ec94:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801ec98:	bf98      	it	ls
 801ec9a:	2001      	movls	r0, #1
 801ec9c:	4770      	bx	lr
 801ec9e:	4608      	mov	r0, r1
 801eca0:	4770      	bx	lr
	...

0801eca4 <fiprintf>:
 801eca4:	b40e      	push	{r1, r2, r3}
 801eca6:	b503      	push	{r0, r1, lr}
 801eca8:	4601      	mov	r1, r0
 801ecaa:	ab03      	add	r3, sp, #12
 801ecac:	4805      	ldr	r0, [pc, #20]	; (801ecc4 <fiprintf+0x20>)
 801ecae:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecb2:	6800      	ldr	r0, [r0, #0]
 801ecb4:	9301      	str	r3, [sp, #4]
 801ecb6:	f7ff fdbf 	bl	801e838 <_vfiprintf_r>
 801ecba:	b002      	add	sp, #8
 801ecbc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ecc0:	b003      	add	sp, #12
 801ecc2:	4770      	bx	lr
 801ecc4:	20000d9c 	.word	0x20000d9c

0801ecc8 <abort>:
 801ecc8:	b508      	push	{r3, lr}
 801ecca:	2006      	movs	r0, #6
 801eccc:	f000 f82c 	bl	801ed28 <raise>
 801ecd0:	2001      	movs	r0, #1
 801ecd2:	f7f0 f82f 	bl	800ed34 <_exit>

0801ecd6 <_raise_r>:
 801ecd6:	291f      	cmp	r1, #31
 801ecd8:	b538      	push	{r3, r4, r5, lr}
 801ecda:	4604      	mov	r4, r0
 801ecdc:	460d      	mov	r5, r1
 801ecde:	d904      	bls.n	801ecea <_raise_r+0x14>
 801ece0:	2316      	movs	r3, #22
 801ece2:	6003      	str	r3, [r0, #0]
 801ece4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ece8:	bd38      	pop	{r3, r4, r5, pc}
 801ecea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801ecec:	b112      	cbz	r2, 801ecf4 <_raise_r+0x1e>
 801ecee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ecf2:	b94b      	cbnz	r3, 801ed08 <_raise_r+0x32>
 801ecf4:	4620      	mov	r0, r4
 801ecf6:	f000 f831 	bl	801ed5c <_getpid_r>
 801ecfa:	462a      	mov	r2, r5
 801ecfc:	4601      	mov	r1, r0
 801ecfe:	4620      	mov	r0, r4
 801ed00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed04:	f000 b818 	b.w	801ed38 <_kill_r>
 801ed08:	2b01      	cmp	r3, #1
 801ed0a:	d00a      	beq.n	801ed22 <_raise_r+0x4c>
 801ed0c:	1c59      	adds	r1, r3, #1
 801ed0e:	d103      	bne.n	801ed18 <_raise_r+0x42>
 801ed10:	2316      	movs	r3, #22
 801ed12:	6003      	str	r3, [r0, #0]
 801ed14:	2001      	movs	r0, #1
 801ed16:	e7e7      	b.n	801ece8 <_raise_r+0x12>
 801ed18:	2400      	movs	r4, #0
 801ed1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ed1e:	4628      	mov	r0, r5
 801ed20:	4798      	blx	r3
 801ed22:	2000      	movs	r0, #0
 801ed24:	e7e0      	b.n	801ece8 <_raise_r+0x12>
	...

0801ed28 <raise>:
 801ed28:	4b02      	ldr	r3, [pc, #8]	; (801ed34 <raise+0xc>)
 801ed2a:	4601      	mov	r1, r0
 801ed2c:	6818      	ldr	r0, [r3, #0]
 801ed2e:	f7ff bfd2 	b.w	801ecd6 <_raise_r>
 801ed32:	bf00      	nop
 801ed34:	20000d9c 	.word	0x20000d9c

0801ed38 <_kill_r>:
 801ed38:	b538      	push	{r3, r4, r5, lr}
 801ed3a:	4d07      	ldr	r5, [pc, #28]	; (801ed58 <_kill_r+0x20>)
 801ed3c:	2300      	movs	r3, #0
 801ed3e:	4604      	mov	r4, r0
 801ed40:	4608      	mov	r0, r1
 801ed42:	4611      	mov	r1, r2
 801ed44:	602b      	str	r3, [r5, #0]
 801ed46:	f7ef ffe5 	bl	800ed14 <_kill>
 801ed4a:	1c43      	adds	r3, r0, #1
 801ed4c:	d102      	bne.n	801ed54 <_kill_r+0x1c>
 801ed4e:	682b      	ldr	r3, [r5, #0]
 801ed50:	b103      	cbz	r3, 801ed54 <_kill_r+0x1c>
 801ed52:	6023      	str	r3, [r4, #0]
 801ed54:	bd38      	pop	{r3, r4, r5, pc}
 801ed56:	bf00      	nop
 801ed58:	200100a8 	.word	0x200100a8

0801ed5c <_getpid_r>:
 801ed5c:	f7ef bfd2 	b.w	800ed04 <_getpid>

0801ed60 <fmodf>:
 801ed60:	b508      	push	{r3, lr}
 801ed62:	ed2d 8b02 	vpush	{d8}
 801ed66:	eef0 8a40 	vmov.f32	s17, s0
 801ed6a:	eeb0 8a60 	vmov.f32	s16, s1
 801ed6e:	f000 faf7 	bl	801f360 <__ieee754_fmodf>
 801ed72:	eef4 8a48 	vcmp.f32	s17, s16
 801ed76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed7a:	d60c      	bvs.n	801ed96 <fmodf+0x36>
 801ed7c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801ed9c <fmodf+0x3c>
 801ed80:	eeb4 8a68 	vcmp.f32	s16, s17
 801ed84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed88:	d105      	bne.n	801ed96 <fmodf+0x36>
 801ed8a:	f7fe f9ed 	bl	801d168 <__errno>
 801ed8e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ed92:	2321      	movs	r3, #33	; 0x21
 801ed94:	6003      	str	r3, [r0, #0]
 801ed96:	ecbd 8b02 	vpop	{d8}
 801ed9a:	bd08      	pop	{r3, pc}
 801ed9c:	00000000 	.word	0x00000000

0801eda0 <sqrtf>:
 801eda0:	b508      	push	{r3, lr}
 801eda2:	ed2d 8b02 	vpush	{d8}
 801eda6:	eeb0 8a40 	vmov.f32	s16, s0
 801edaa:	f000 f90d 	bl	801efc8 <__ieee754_sqrtf>
 801edae:	eeb4 8a48 	vcmp.f32	s16, s16
 801edb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edb6:	d60c      	bvs.n	801edd2 <sqrtf+0x32>
 801edb8:	eddf 8a07 	vldr	s17, [pc, #28]	; 801edd8 <sqrtf+0x38>
 801edbc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801edc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edc4:	d505      	bpl.n	801edd2 <sqrtf+0x32>
 801edc6:	f7fe f9cf 	bl	801d168 <__errno>
 801edca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801edce:	2321      	movs	r3, #33	; 0x21
 801edd0:	6003      	str	r3, [r0, #0]
 801edd2:	ecbd 8b02 	vpop	{d8}
 801edd6:	bd08      	pop	{r3, pc}
 801edd8:	00000000 	.word	0x00000000

0801eddc <cosf>:
 801eddc:	ee10 3a10 	vmov	r3, s0
 801ede0:	b507      	push	{r0, r1, r2, lr}
 801ede2:	4a1e      	ldr	r2, [pc, #120]	; (801ee5c <cosf+0x80>)
 801ede4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ede8:	4293      	cmp	r3, r2
 801edea:	dc06      	bgt.n	801edfa <cosf+0x1e>
 801edec:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801ee60 <cosf+0x84>
 801edf0:	b003      	add	sp, #12
 801edf2:	f85d eb04 	ldr.w	lr, [sp], #4
 801edf6:	f000 b92d 	b.w	801f054 <__kernel_cosf>
 801edfa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801edfe:	db04      	blt.n	801ee0a <cosf+0x2e>
 801ee00:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ee04:	b003      	add	sp, #12
 801ee06:	f85d fb04 	ldr.w	pc, [sp], #4
 801ee0a:	4668      	mov	r0, sp
 801ee0c:	f000 fb2a 	bl	801f464 <__ieee754_rem_pio2f>
 801ee10:	f000 0003 	and.w	r0, r0, #3
 801ee14:	2801      	cmp	r0, #1
 801ee16:	d009      	beq.n	801ee2c <cosf+0x50>
 801ee18:	2802      	cmp	r0, #2
 801ee1a:	d010      	beq.n	801ee3e <cosf+0x62>
 801ee1c:	b9b0      	cbnz	r0, 801ee4c <cosf+0x70>
 801ee1e:	eddd 0a01 	vldr	s1, [sp, #4]
 801ee22:	ed9d 0a00 	vldr	s0, [sp]
 801ee26:	f000 f915 	bl	801f054 <__kernel_cosf>
 801ee2a:	e7eb      	b.n	801ee04 <cosf+0x28>
 801ee2c:	eddd 0a01 	vldr	s1, [sp, #4]
 801ee30:	ed9d 0a00 	vldr	s0, [sp]
 801ee34:	f000 f96c 	bl	801f110 <__kernel_sinf>
 801ee38:	eeb1 0a40 	vneg.f32	s0, s0
 801ee3c:	e7e2      	b.n	801ee04 <cosf+0x28>
 801ee3e:	eddd 0a01 	vldr	s1, [sp, #4]
 801ee42:	ed9d 0a00 	vldr	s0, [sp]
 801ee46:	f000 f905 	bl	801f054 <__kernel_cosf>
 801ee4a:	e7f5      	b.n	801ee38 <cosf+0x5c>
 801ee4c:	eddd 0a01 	vldr	s1, [sp, #4]
 801ee50:	ed9d 0a00 	vldr	s0, [sp]
 801ee54:	2001      	movs	r0, #1
 801ee56:	f000 f95b 	bl	801f110 <__kernel_sinf>
 801ee5a:	e7d3      	b.n	801ee04 <cosf+0x28>
 801ee5c:	3f490fd8 	.word	0x3f490fd8
 801ee60:	00000000 	.word	0x00000000

0801ee64 <fabsf>:
 801ee64:	ee10 3a10 	vmov	r3, s0
 801ee68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ee6c:	ee00 3a10 	vmov	s0, r3
 801ee70:	4770      	bx	lr
	...

0801ee74 <sinf>:
 801ee74:	ee10 3a10 	vmov	r3, s0
 801ee78:	b507      	push	{r0, r1, r2, lr}
 801ee7a:	4a1f      	ldr	r2, [pc, #124]	; (801eef8 <sinf+0x84>)
 801ee7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ee80:	4293      	cmp	r3, r2
 801ee82:	dc07      	bgt.n	801ee94 <sinf+0x20>
 801ee84:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801eefc <sinf+0x88>
 801ee88:	2000      	movs	r0, #0
 801ee8a:	b003      	add	sp, #12
 801ee8c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee90:	f000 b93e 	b.w	801f110 <__kernel_sinf>
 801ee94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ee98:	db04      	blt.n	801eea4 <sinf+0x30>
 801ee9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ee9e:	b003      	add	sp, #12
 801eea0:	f85d fb04 	ldr.w	pc, [sp], #4
 801eea4:	4668      	mov	r0, sp
 801eea6:	f000 fadd 	bl	801f464 <__ieee754_rem_pio2f>
 801eeaa:	f000 0003 	and.w	r0, r0, #3
 801eeae:	2801      	cmp	r0, #1
 801eeb0:	d00a      	beq.n	801eec8 <sinf+0x54>
 801eeb2:	2802      	cmp	r0, #2
 801eeb4:	d00f      	beq.n	801eed6 <sinf+0x62>
 801eeb6:	b9c0      	cbnz	r0, 801eeea <sinf+0x76>
 801eeb8:	eddd 0a01 	vldr	s1, [sp, #4]
 801eebc:	ed9d 0a00 	vldr	s0, [sp]
 801eec0:	2001      	movs	r0, #1
 801eec2:	f000 f925 	bl	801f110 <__kernel_sinf>
 801eec6:	e7ea      	b.n	801ee9e <sinf+0x2a>
 801eec8:	eddd 0a01 	vldr	s1, [sp, #4]
 801eecc:	ed9d 0a00 	vldr	s0, [sp]
 801eed0:	f000 f8c0 	bl	801f054 <__kernel_cosf>
 801eed4:	e7e3      	b.n	801ee9e <sinf+0x2a>
 801eed6:	eddd 0a01 	vldr	s1, [sp, #4]
 801eeda:	ed9d 0a00 	vldr	s0, [sp]
 801eede:	2001      	movs	r0, #1
 801eee0:	f000 f916 	bl	801f110 <__kernel_sinf>
 801eee4:	eeb1 0a40 	vneg.f32	s0, s0
 801eee8:	e7d9      	b.n	801ee9e <sinf+0x2a>
 801eeea:	eddd 0a01 	vldr	s1, [sp, #4]
 801eeee:	ed9d 0a00 	vldr	s0, [sp]
 801eef2:	f000 f8af 	bl	801f054 <__kernel_cosf>
 801eef6:	e7f5      	b.n	801eee4 <sinf+0x70>
 801eef8:	3f490fd8 	.word	0x3f490fd8
 801eefc:	00000000 	.word	0x00000000

0801ef00 <tanf>:
 801ef00:	ee10 3a10 	vmov	r3, s0
 801ef04:	b507      	push	{r0, r1, r2, lr}
 801ef06:	4a12      	ldr	r2, [pc, #72]	; (801ef50 <tanf+0x50>)
 801ef08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ef0c:	4293      	cmp	r3, r2
 801ef0e:	dc07      	bgt.n	801ef20 <tanf+0x20>
 801ef10:	eddf 0a10 	vldr	s1, [pc, #64]	; 801ef54 <tanf+0x54>
 801ef14:	2001      	movs	r0, #1
 801ef16:	b003      	add	sp, #12
 801ef18:	f85d eb04 	ldr.w	lr, [sp], #4
 801ef1c:	f000 b940 	b.w	801f1a0 <__kernel_tanf>
 801ef20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ef24:	db04      	blt.n	801ef30 <tanf+0x30>
 801ef26:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ef2a:	b003      	add	sp, #12
 801ef2c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ef30:	4668      	mov	r0, sp
 801ef32:	f000 fa97 	bl	801f464 <__ieee754_rem_pio2f>
 801ef36:	0040      	lsls	r0, r0, #1
 801ef38:	f000 0002 	and.w	r0, r0, #2
 801ef3c:	eddd 0a01 	vldr	s1, [sp, #4]
 801ef40:	ed9d 0a00 	vldr	s0, [sp]
 801ef44:	f1c0 0001 	rsb	r0, r0, #1
 801ef48:	f000 f92a 	bl	801f1a0 <__kernel_tanf>
 801ef4c:	e7ed      	b.n	801ef2a <tanf+0x2a>
 801ef4e:	bf00      	nop
 801ef50:	3f490fda 	.word	0x3f490fda
 801ef54:	00000000 	.word	0x00000000

0801ef58 <fminf>:
 801ef58:	b508      	push	{r3, lr}
 801ef5a:	ed2d 8b02 	vpush	{d8}
 801ef5e:	eeb0 8a40 	vmov.f32	s16, s0
 801ef62:	eef0 8a60 	vmov.f32	s17, s1
 801ef66:	f000 f813 	bl	801ef90 <__fpclassifyf>
 801ef6a:	b148      	cbz	r0, 801ef80 <fminf+0x28>
 801ef6c:	eeb0 0a68 	vmov.f32	s0, s17
 801ef70:	f000 f80e 	bl	801ef90 <__fpclassifyf>
 801ef74:	b130      	cbz	r0, 801ef84 <fminf+0x2c>
 801ef76:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ef7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef7e:	d401      	bmi.n	801ef84 <fminf+0x2c>
 801ef80:	eeb0 8a68 	vmov.f32	s16, s17
 801ef84:	eeb0 0a48 	vmov.f32	s0, s16
 801ef88:	ecbd 8b02 	vpop	{d8}
 801ef8c:	bd08      	pop	{r3, pc}
	...

0801ef90 <__fpclassifyf>:
 801ef90:	ee10 3a10 	vmov	r3, s0
 801ef94:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 801ef98:	d00d      	beq.n	801efb6 <__fpclassifyf+0x26>
 801ef9a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801ef9e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801efa2:	d30a      	bcc.n	801efba <__fpclassifyf+0x2a>
 801efa4:	4b07      	ldr	r3, [pc, #28]	; (801efc4 <__fpclassifyf+0x34>)
 801efa6:	1e42      	subs	r2, r0, #1
 801efa8:	429a      	cmp	r2, r3
 801efaa:	d908      	bls.n	801efbe <__fpclassifyf+0x2e>
 801efac:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801efb0:	4258      	negs	r0, r3
 801efb2:	4158      	adcs	r0, r3
 801efb4:	4770      	bx	lr
 801efb6:	2002      	movs	r0, #2
 801efb8:	4770      	bx	lr
 801efba:	2004      	movs	r0, #4
 801efbc:	4770      	bx	lr
 801efbe:	2003      	movs	r0, #3
 801efc0:	4770      	bx	lr
 801efc2:	bf00      	nop
 801efc4:	007ffffe 	.word	0x007ffffe

0801efc8 <__ieee754_sqrtf>:
 801efc8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801efcc:	4770      	bx	lr
	...

0801efd0 <floorf>:
 801efd0:	ee10 3a10 	vmov	r3, s0
 801efd4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801efd8:	3a7f      	subs	r2, #127	; 0x7f
 801efda:	2a16      	cmp	r2, #22
 801efdc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801efe0:	dc2a      	bgt.n	801f038 <floorf+0x68>
 801efe2:	2a00      	cmp	r2, #0
 801efe4:	da11      	bge.n	801f00a <floorf+0x3a>
 801efe6:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f048 <floorf+0x78>
 801efea:	ee30 0a27 	vadd.f32	s0, s0, s15
 801efee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801eff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eff6:	dd05      	ble.n	801f004 <floorf+0x34>
 801eff8:	2b00      	cmp	r3, #0
 801effa:	da23      	bge.n	801f044 <floorf+0x74>
 801effc:	4a13      	ldr	r2, [pc, #76]	; (801f04c <floorf+0x7c>)
 801effe:	2900      	cmp	r1, #0
 801f000:	bf18      	it	ne
 801f002:	4613      	movne	r3, r2
 801f004:	ee00 3a10 	vmov	s0, r3
 801f008:	4770      	bx	lr
 801f00a:	4911      	ldr	r1, [pc, #68]	; (801f050 <floorf+0x80>)
 801f00c:	4111      	asrs	r1, r2
 801f00e:	420b      	tst	r3, r1
 801f010:	d0fa      	beq.n	801f008 <floorf+0x38>
 801f012:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f048 <floorf+0x78>
 801f016:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f01a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f022:	ddef      	ble.n	801f004 <floorf+0x34>
 801f024:	2b00      	cmp	r3, #0
 801f026:	bfbe      	ittt	lt
 801f028:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801f02c:	fa40 f202 	asrlt.w	r2, r0, r2
 801f030:	189b      	addlt	r3, r3, r2
 801f032:	ea23 0301 	bic.w	r3, r3, r1
 801f036:	e7e5      	b.n	801f004 <floorf+0x34>
 801f038:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f03c:	d3e4      	bcc.n	801f008 <floorf+0x38>
 801f03e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f042:	4770      	bx	lr
 801f044:	2300      	movs	r3, #0
 801f046:	e7dd      	b.n	801f004 <floorf+0x34>
 801f048:	7149f2ca 	.word	0x7149f2ca
 801f04c:	bf800000 	.word	0xbf800000
 801f050:	007fffff 	.word	0x007fffff

0801f054 <__kernel_cosf>:
 801f054:	ee10 3a10 	vmov	r3, s0
 801f058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f05c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f064:	da05      	bge.n	801f072 <__kernel_cosf+0x1e>
 801f066:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f06a:	ee17 2a90 	vmov	r2, s15
 801f06e:	2a00      	cmp	r2, #0
 801f070:	d03b      	beq.n	801f0ea <__kernel_cosf+0x96>
 801f072:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f076:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f0f0 <__kernel_cosf+0x9c>
 801f07a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801f0f4 <__kernel_cosf+0xa0>
 801f07e:	4a1e      	ldr	r2, [pc, #120]	; (801f0f8 <__kernel_cosf+0xa4>)
 801f080:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f084:	4293      	cmp	r3, r2
 801f086:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801f0fc <__kernel_cosf+0xa8>
 801f08a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f08e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801f100 <__kernel_cosf+0xac>
 801f092:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f096:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801f104 <__kernel_cosf+0xb0>
 801f09a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f09e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801f108 <__kernel_cosf+0xb4>
 801f0a2:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f0a6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801f0aa:	ee26 6a07 	vmul.f32	s12, s12, s14
 801f0ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f0b2:	eee7 0a06 	vfma.f32	s1, s14, s12
 801f0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f0ba:	dc04      	bgt.n	801f0c6 <__kernel_cosf+0x72>
 801f0bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f0c0:	ee36 0ae7 	vsub.f32	s0, s13, s15
 801f0c4:	4770      	bx	lr
 801f0c6:	4a11      	ldr	r2, [pc, #68]	; (801f10c <__kernel_cosf+0xb8>)
 801f0c8:	4293      	cmp	r3, r2
 801f0ca:	bfda      	itte	le
 801f0cc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801f0d0:	ee07 3a10 	vmovle	s14, r3
 801f0d4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 801f0d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f0dc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801f0e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f0e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f0e8:	4770      	bx	lr
 801f0ea:	eeb0 0a66 	vmov.f32	s0, s13
 801f0ee:	4770      	bx	lr
 801f0f0:	ad47d74e 	.word	0xad47d74e
 801f0f4:	310f74f6 	.word	0x310f74f6
 801f0f8:	3e999999 	.word	0x3e999999
 801f0fc:	b493f27c 	.word	0xb493f27c
 801f100:	37d00d01 	.word	0x37d00d01
 801f104:	bab60b61 	.word	0xbab60b61
 801f108:	3d2aaaab 	.word	0x3d2aaaab
 801f10c:	3f480000 	.word	0x3f480000

0801f110 <__kernel_sinf>:
 801f110:	ee10 3a10 	vmov	r3, s0
 801f114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f118:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801f11c:	da04      	bge.n	801f128 <__kernel_sinf+0x18>
 801f11e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f122:	ee17 3a90 	vmov	r3, s15
 801f126:	b35b      	cbz	r3, 801f180 <__kernel_sinf+0x70>
 801f128:	ee20 7a00 	vmul.f32	s14, s0, s0
 801f12c:	eddf 7a15 	vldr	s15, [pc, #84]	; 801f184 <__kernel_sinf+0x74>
 801f130:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801f188 <__kernel_sinf+0x78>
 801f134:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f138:	eddf 7a14 	vldr	s15, [pc, #80]	; 801f18c <__kernel_sinf+0x7c>
 801f13c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f140:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801f190 <__kernel_sinf+0x80>
 801f144:	eea7 6a87 	vfma.f32	s12, s15, s14
 801f148:	eddf 7a12 	vldr	s15, [pc, #72]	; 801f194 <__kernel_sinf+0x84>
 801f14c:	ee60 6a07 	vmul.f32	s13, s0, s14
 801f150:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f154:	b930      	cbnz	r0, 801f164 <__kernel_sinf+0x54>
 801f156:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801f198 <__kernel_sinf+0x88>
 801f15a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801f15e:	eea6 0a26 	vfma.f32	s0, s12, s13
 801f162:	4770      	bx	lr
 801f164:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801f168:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f16c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801f170:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801f174:	eddf 7a09 	vldr	s15, [pc, #36]	; 801f19c <__kernel_sinf+0x8c>
 801f178:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801f17c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801f180:	4770      	bx	lr
 801f182:	bf00      	nop
 801f184:	2f2ec9d3 	.word	0x2f2ec9d3
 801f188:	b2d72f34 	.word	0xb2d72f34
 801f18c:	3638ef1b 	.word	0x3638ef1b
 801f190:	b9500d01 	.word	0xb9500d01
 801f194:	3c088889 	.word	0x3c088889
 801f198:	be2aaaab 	.word	0xbe2aaaab
 801f19c:	3e2aaaab 	.word	0x3e2aaaab

0801f1a0 <__kernel_tanf>:
 801f1a0:	b508      	push	{r3, lr}
 801f1a2:	ee10 3a10 	vmov	r3, s0
 801f1a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801f1aa:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801f1ae:	eef0 7a40 	vmov.f32	s15, s0
 801f1b2:	da17      	bge.n	801f1e4 <__kernel_tanf+0x44>
 801f1b4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801f1b8:	ee17 1a10 	vmov	r1, s14
 801f1bc:	bb41      	cbnz	r1, 801f210 <__kernel_tanf+0x70>
 801f1be:	1c43      	adds	r3, r0, #1
 801f1c0:	4313      	orrs	r3, r2
 801f1c2:	d108      	bne.n	801f1d6 <__kernel_tanf+0x36>
 801f1c4:	f7ff fe4e 	bl	801ee64 <fabsf>
 801f1c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f1cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f1d0:	eeb0 0a67 	vmov.f32	s0, s15
 801f1d4:	bd08      	pop	{r3, pc}
 801f1d6:	2801      	cmp	r0, #1
 801f1d8:	d0fa      	beq.n	801f1d0 <__kernel_tanf+0x30>
 801f1da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801f1de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f1e2:	e7f5      	b.n	801f1d0 <__kernel_tanf+0x30>
 801f1e4:	494c      	ldr	r1, [pc, #304]	; (801f318 <__kernel_tanf+0x178>)
 801f1e6:	428a      	cmp	r2, r1
 801f1e8:	db12      	blt.n	801f210 <__kernel_tanf+0x70>
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801f31c <__kernel_tanf+0x17c>
 801f1f0:	bfb8      	it	lt
 801f1f2:	eef1 7a40 	vneglt.f32	s15, s0
 801f1f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f1fa:	eddf 7a49 	vldr	s15, [pc, #292]	; 801f320 <__kernel_tanf+0x180>
 801f1fe:	bfb8      	it	lt
 801f200:	eef1 0a60 	vneglt.f32	s1, s1
 801f204:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f208:	eddf 0a46 	vldr	s1, [pc, #280]	; 801f324 <__kernel_tanf+0x184>
 801f20c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f210:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801f214:	eddf 5a44 	vldr	s11, [pc, #272]	; 801f328 <__kernel_tanf+0x188>
 801f218:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801f32c <__kernel_tanf+0x18c>
 801f21c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801f330 <__kernel_tanf+0x190>
 801f220:	493d      	ldr	r1, [pc, #244]	; (801f318 <__kernel_tanf+0x178>)
 801f222:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801f226:	428a      	cmp	r2, r1
 801f228:	eea7 6a25 	vfma.f32	s12, s14, s11
 801f22c:	eddf 5a41 	vldr	s11, [pc, #260]	; 801f334 <__kernel_tanf+0x194>
 801f230:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f234:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801f338 <__kernel_tanf+0x198>
 801f238:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f23c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801f33c <__kernel_tanf+0x19c>
 801f240:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f244:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801f340 <__kernel_tanf+0x1a0>
 801f248:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f24c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801f344 <__kernel_tanf+0x1a4>
 801f250:	eee7 5a05 	vfma.f32	s11, s14, s10
 801f254:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801f348 <__kernel_tanf+0x1a8>
 801f258:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f25c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801f34c <__kernel_tanf+0x1ac>
 801f260:	eee5 5a07 	vfma.f32	s11, s10, s14
 801f264:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801f350 <__kernel_tanf+0x1b0>
 801f268:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f26c:	eddf 5a39 	vldr	s11, [pc, #228]	; 801f354 <__kernel_tanf+0x1b4>
 801f270:	eee5 5a07 	vfma.f32	s11, s10, s14
 801f274:	eeb0 7a46 	vmov.f32	s14, s12
 801f278:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f27c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801f280:	eeb0 6a60 	vmov.f32	s12, s1
 801f284:	eea7 6a05 	vfma.f32	s12, s14, s10
 801f288:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801f358 <__kernel_tanf+0x1b8>
 801f28c:	eee6 0a26 	vfma.f32	s1, s12, s13
 801f290:	eee5 0a07 	vfma.f32	s1, s10, s14
 801f294:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801f298:	db1d      	blt.n	801f2d6 <__kernel_tanf+0x136>
 801f29a:	ee07 0a10 	vmov	s14, r0
 801f29e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f2a2:	ee66 5aa6 	vmul.f32	s11, s13, s13
 801f2a6:	ee76 6a87 	vadd.f32	s13, s13, s14
 801f2aa:	179b      	asrs	r3, r3, #30
 801f2ac:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801f2b0:	f003 0302 	and.w	r3, r3, #2
 801f2b4:	f1c3 0301 	rsb	r3, r3, #1
 801f2b8:	ee76 6a60 	vsub.f32	s13, s12, s1
 801f2bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f2c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801f2c4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f2c8:	ee07 3a90 	vmov	s15, r3
 801f2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f2d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f2d4:	e77c      	b.n	801f1d0 <__kernel_tanf+0x30>
 801f2d6:	2801      	cmp	r0, #1
 801f2d8:	d01b      	beq.n	801f312 <__kernel_tanf+0x172>
 801f2da:	4b20      	ldr	r3, [pc, #128]	; (801f35c <__kernel_tanf+0x1bc>)
 801f2dc:	ee16 2a90 	vmov	r2, s13
 801f2e0:	401a      	ands	r2, r3
 801f2e2:	ee05 2a90 	vmov	s11, r2
 801f2e6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801f2ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f2ee:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801f2f2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801f2f6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801f2fa:	ee16 2a10 	vmov	r2, s12
 801f2fe:	4013      	ands	r3, r2
 801f300:	ee07 3a90 	vmov	s15, r3
 801f304:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801f308:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801f30c:	eee7 7a06 	vfma.f32	s15, s14, s12
 801f310:	e75e      	b.n	801f1d0 <__kernel_tanf+0x30>
 801f312:	eef0 7a66 	vmov.f32	s15, s13
 801f316:	e75b      	b.n	801f1d0 <__kernel_tanf+0x30>
 801f318:	3f2ca140 	.word	0x3f2ca140
 801f31c:	3f490fda 	.word	0x3f490fda
 801f320:	33222168 	.word	0x33222168
 801f324:	00000000 	.word	0x00000000
 801f328:	b79bae5f 	.word	0xb79bae5f
 801f32c:	38a3f445 	.word	0x38a3f445
 801f330:	37d95384 	.word	0x37d95384
 801f334:	3a1a26c8 	.word	0x3a1a26c8
 801f338:	3b6b6916 	.word	0x3b6b6916
 801f33c:	3cb327a4 	.word	0x3cb327a4
 801f340:	3e088889 	.word	0x3e088889
 801f344:	3895c07a 	.word	0x3895c07a
 801f348:	398137b9 	.word	0x398137b9
 801f34c:	3abede48 	.word	0x3abede48
 801f350:	3c11371f 	.word	0x3c11371f
 801f354:	3d5d0dd1 	.word	0x3d5d0dd1
 801f358:	3eaaaaab 	.word	0x3eaaaaab
 801f35c:	fffff000 	.word	0xfffff000

0801f360 <__ieee754_fmodf>:
 801f360:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f362:	ee10 4a90 	vmov	r4, s1
 801f366:	f034 4000 	bics.w	r0, r4, #2147483648	; 0x80000000
 801f36a:	d009      	beq.n	801f380 <__ieee754_fmodf+0x20>
 801f36c:	ee10 3a10 	vmov	r3, s0
 801f370:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 801f374:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801f378:	da02      	bge.n	801f380 <__ieee754_fmodf+0x20>
 801f37a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801f37e:	dd04      	ble.n	801f38a <__ieee754_fmodf+0x2a>
 801f380:	ee60 0a20 	vmul.f32	s1, s0, s1
 801f384:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 801f388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f38a:	4286      	cmp	r6, r0
 801f38c:	dbfc      	blt.n	801f388 <__ieee754_fmodf+0x28>
 801f38e:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 801f392:	d105      	bne.n	801f3a0 <__ieee754_fmodf+0x40>
 801f394:	4b32      	ldr	r3, [pc, #200]	; (801f460 <__ieee754_fmodf+0x100>)
 801f396:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 801f39a:	ed93 0a00 	vldr	s0, [r3]
 801f39e:	e7f3      	b.n	801f388 <__ieee754_fmodf+0x28>
 801f3a0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801f3a4:	d140      	bne.n	801f428 <__ieee754_fmodf+0xc8>
 801f3a6:	0232      	lsls	r2, r6, #8
 801f3a8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 801f3ac:	2a00      	cmp	r2, #0
 801f3ae:	dc38      	bgt.n	801f422 <__ieee754_fmodf+0xc2>
 801f3b0:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
 801f3b4:	d13e      	bne.n	801f434 <__ieee754_fmodf+0xd4>
 801f3b6:	0207      	lsls	r7, r0, #8
 801f3b8:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 801f3bc:	2f00      	cmp	r7, #0
 801f3be:	da36      	bge.n	801f42e <__ieee754_fmodf+0xce>
 801f3c0:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801f3c4:	bfb9      	ittee	lt
 801f3c6:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 801f3ca:	1a5b      	sublt	r3, r3, r1
 801f3cc:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 801f3d0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 801f3d4:	bfb8      	it	lt
 801f3d6:	fa06 f303 	lsllt.w	r3, r6, r3
 801f3da:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 801f3de:	bfb5      	itete	lt
 801f3e0:	f06f 047d 	mvnlt.w	r4, #125	; 0x7d
 801f3e4:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 801f3e8:	1aa4      	sublt	r4, r4, r2
 801f3ea:	f444 0000 	orrge.w	r0, r4, #8388608	; 0x800000
 801f3ee:	bfb8      	it	lt
 801f3f0:	40a0      	lsllt	r0, r4
 801f3f2:	1a89      	subs	r1, r1, r2
 801f3f4:	1a1c      	subs	r4, r3, r0
 801f3f6:	bb01      	cbnz	r1, 801f43a <__ieee754_fmodf+0xda>
 801f3f8:	ea13 0324 	ands.w	r3, r3, r4, asr #32
 801f3fc:	bf38      	it	cc
 801f3fe:	4623      	movcc	r3, r4
 801f400:	2b00      	cmp	r3, #0
 801f402:	d0c7      	beq.n	801f394 <__ieee754_fmodf+0x34>
 801f404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f408:	db1f      	blt.n	801f44a <__ieee754_fmodf+0xea>
 801f40a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 801f40e:	db1f      	blt.n	801f450 <__ieee754_fmodf+0xf0>
 801f410:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801f414:	327f      	adds	r2, #127	; 0x7f
 801f416:	432b      	orrs	r3, r5
 801f418:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f41c:	ee00 3a10 	vmov	s0, r3
 801f420:	e7b2      	b.n	801f388 <__ieee754_fmodf+0x28>
 801f422:	3901      	subs	r1, #1
 801f424:	0052      	lsls	r2, r2, #1
 801f426:	e7c1      	b.n	801f3ac <__ieee754_fmodf+0x4c>
 801f428:	15f1      	asrs	r1, r6, #23
 801f42a:	397f      	subs	r1, #127	; 0x7f
 801f42c:	e7c0      	b.n	801f3b0 <__ieee754_fmodf+0x50>
 801f42e:	3a01      	subs	r2, #1
 801f430:	007f      	lsls	r7, r7, #1
 801f432:	e7c3      	b.n	801f3bc <__ieee754_fmodf+0x5c>
 801f434:	15c2      	asrs	r2, r0, #23
 801f436:	3a7f      	subs	r2, #127	; 0x7f
 801f438:	e7c2      	b.n	801f3c0 <__ieee754_fmodf+0x60>
 801f43a:	2c00      	cmp	r4, #0
 801f43c:	da02      	bge.n	801f444 <__ieee754_fmodf+0xe4>
 801f43e:	005b      	lsls	r3, r3, #1
 801f440:	3901      	subs	r1, #1
 801f442:	e7d7      	b.n	801f3f4 <__ieee754_fmodf+0x94>
 801f444:	d0a6      	beq.n	801f394 <__ieee754_fmodf+0x34>
 801f446:	0063      	lsls	r3, r4, #1
 801f448:	e7fa      	b.n	801f440 <__ieee754_fmodf+0xe0>
 801f44a:	005b      	lsls	r3, r3, #1
 801f44c:	3a01      	subs	r2, #1
 801f44e:	e7d9      	b.n	801f404 <__ieee754_fmodf+0xa4>
 801f450:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f454:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f458:	3282      	adds	r2, #130	; 0x82
 801f45a:	4113      	asrs	r3, r2
 801f45c:	432b      	orrs	r3, r5
 801f45e:	e7dd      	b.n	801f41c <__ieee754_fmodf+0xbc>
 801f460:	08025044 	.word	0x08025044

0801f464 <__ieee754_rem_pio2f>:
 801f464:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f466:	ee10 6a10 	vmov	r6, s0
 801f46a:	4b86      	ldr	r3, [pc, #536]	; (801f684 <__ieee754_rem_pio2f+0x220>)
 801f46c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801f470:	429d      	cmp	r5, r3
 801f472:	b087      	sub	sp, #28
 801f474:	4604      	mov	r4, r0
 801f476:	dc05      	bgt.n	801f484 <__ieee754_rem_pio2f+0x20>
 801f478:	2300      	movs	r3, #0
 801f47a:	ed80 0a00 	vstr	s0, [r0]
 801f47e:	6043      	str	r3, [r0, #4]
 801f480:	2000      	movs	r0, #0
 801f482:	e020      	b.n	801f4c6 <__ieee754_rem_pio2f+0x62>
 801f484:	4b80      	ldr	r3, [pc, #512]	; (801f688 <__ieee754_rem_pio2f+0x224>)
 801f486:	429d      	cmp	r5, r3
 801f488:	dc38      	bgt.n	801f4fc <__ieee754_rem_pio2f+0x98>
 801f48a:	2e00      	cmp	r6, #0
 801f48c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 801f68c <__ieee754_rem_pio2f+0x228>
 801f490:	4b7f      	ldr	r3, [pc, #508]	; (801f690 <__ieee754_rem_pio2f+0x22c>)
 801f492:	f025 050f 	bic.w	r5, r5, #15
 801f496:	dd18      	ble.n	801f4ca <__ieee754_rem_pio2f+0x66>
 801f498:	429d      	cmp	r5, r3
 801f49a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801f49e:	bf09      	itett	eq
 801f4a0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801f694 <__ieee754_rem_pio2f+0x230>
 801f4a4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801f698 <__ieee754_rem_pio2f+0x234>
 801f4a8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801f4ac:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801f69c <__ieee754_rem_pio2f+0x238>
 801f4b0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801f4b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f4b8:	edc0 6a00 	vstr	s13, [r0]
 801f4bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f4c0:	edc0 7a01 	vstr	s15, [r0, #4]
 801f4c4:	2001      	movs	r0, #1
 801f4c6:	b007      	add	sp, #28
 801f4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4ca:	429d      	cmp	r5, r3
 801f4cc:	ee70 7a07 	vadd.f32	s15, s0, s14
 801f4d0:	bf09      	itett	eq
 801f4d2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801f694 <__ieee754_rem_pio2f+0x230>
 801f4d6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801f698 <__ieee754_rem_pio2f+0x234>
 801f4da:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801f4de:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801f69c <__ieee754_rem_pio2f+0x238>
 801f4e2:	ee77 6a87 	vadd.f32	s13, s15, s14
 801f4e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801f4ea:	edc0 6a00 	vstr	s13, [r0]
 801f4ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f4f2:	edc0 7a01 	vstr	s15, [r0, #4]
 801f4f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f4fa:	e7e4      	b.n	801f4c6 <__ieee754_rem_pio2f+0x62>
 801f4fc:	4b68      	ldr	r3, [pc, #416]	; (801f6a0 <__ieee754_rem_pio2f+0x23c>)
 801f4fe:	429d      	cmp	r5, r3
 801f500:	dc71      	bgt.n	801f5e6 <__ieee754_rem_pio2f+0x182>
 801f502:	f7ff fcaf 	bl	801ee64 <fabsf>
 801f506:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801f6a4 <__ieee754_rem_pio2f+0x240>
 801f50a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f50e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801f512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f51a:	ee17 0a90 	vmov	r0, s15
 801f51e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f68c <__ieee754_rem_pio2f+0x228>
 801f522:	eea7 0a67 	vfms.f32	s0, s14, s15
 801f526:	281f      	cmp	r0, #31
 801f528:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801f698 <__ieee754_rem_pio2f+0x234>
 801f52c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f530:	eeb1 6a47 	vneg.f32	s12, s14
 801f534:	ee70 6a67 	vsub.f32	s13, s0, s15
 801f538:	ee16 2a90 	vmov	r2, s13
 801f53c:	dc1c      	bgt.n	801f578 <__ieee754_rem_pio2f+0x114>
 801f53e:	495a      	ldr	r1, [pc, #360]	; (801f6a8 <__ieee754_rem_pio2f+0x244>)
 801f540:	1e47      	subs	r7, r0, #1
 801f542:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801f546:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801f54a:	428b      	cmp	r3, r1
 801f54c:	d014      	beq.n	801f578 <__ieee754_rem_pio2f+0x114>
 801f54e:	6022      	str	r2, [r4, #0]
 801f550:	ed94 7a00 	vldr	s14, [r4]
 801f554:	ee30 0a47 	vsub.f32	s0, s0, s14
 801f558:	2e00      	cmp	r6, #0
 801f55a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f55e:	ed84 0a01 	vstr	s0, [r4, #4]
 801f562:	dab0      	bge.n	801f4c6 <__ieee754_rem_pio2f+0x62>
 801f564:	eeb1 7a47 	vneg.f32	s14, s14
 801f568:	eeb1 0a40 	vneg.f32	s0, s0
 801f56c:	ed84 7a00 	vstr	s14, [r4]
 801f570:	ed84 0a01 	vstr	s0, [r4, #4]
 801f574:	4240      	negs	r0, r0
 801f576:	e7a6      	b.n	801f4c6 <__ieee754_rem_pio2f+0x62>
 801f578:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f57c:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801f580:	2908      	cmp	r1, #8
 801f582:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801f586:	dde2      	ble.n	801f54e <__ieee754_rem_pio2f+0xea>
 801f588:	eddf 5a42 	vldr	s11, [pc, #264]	; 801f694 <__ieee754_rem_pio2f+0x230>
 801f58c:	eef0 6a40 	vmov.f32	s13, s0
 801f590:	eee6 6a25 	vfma.f32	s13, s12, s11
 801f594:	ee70 7a66 	vsub.f32	s15, s0, s13
 801f598:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f59c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801f69c <__ieee754_rem_pio2f+0x238>
 801f5a0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801f5a4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801f5a8:	ee15 2a90 	vmov	r2, s11
 801f5ac:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801f5b0:	1a5b      	subs	r3, r3, r1
 801f5b2:	2b19      	cmp	r3, #25
 801f5b4:	dc04      	bgt.n	801f5c0 <__ieee754_rem_pio2f+0x15c>
 801f5b6:	edc4 5a00 	vstr	s11, [r4]
 801f5ba:	eeb0 0a66 	vmov.f32	s0, s13
 801f5be:	e7c7      	b.n	801f550 <__ieee754_rem_pio2f+0xec>
 801f5c0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801f6ac <__ieee754_rem_pio2f+0x248>
 801f5c4:	eeb0 0a66 	vmov.f32	s0, s13
 801f5c8:	eea6 0a25 	vfma.f32	s0, s12, s11
 801f5cc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801f5d0:	eddf 6a37 	vldr	s13, [pc, #220]	; 801f6b0 <__ieee754_rem_pio2f+0x24c>
 801f5d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801f5d8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801f5dc:	ee30 7a67 	vsub.f32	s14, s0, s15
 801f5e0:	ed84 7a00 	vstr	s14, [r4]
 801f5e4:	e7b4      	b.n	801f550 <__ieee754_rem_pio2f+0xec>
 801f5e6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801f5ea:	db06      	blt.n	801f5fa <__ieee754_rem_pio2f+0x196>
 801f5ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 801f5f0:	edc0 7a01 	vstr	s15, [r0, #4]
 801f5f4:	edc0 7a00 	vstr	s15, [r0]
 801f5f8:	e742      	b.n	801f480 <__ieee754_rem_pio2f+0x1c>
 801f5fa:	15ea      	asrs	r2, r5, #23
 801f5fc:	3a86      	subs	r2, #134	; 0x86
 801f5fe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801f602:	ee07 3a90 	vmov	s15, r3
 801f606:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f60a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801f6b4 <__ieee754_rem_pio2f+0x250>
 801f60e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f616:	ed8d 7a03 	vstr	s14, [sp, #12]
 801f61a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f61e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801f622:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f62a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801f62e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f632:	eef5 7a40 	vcmp.f32	s15, #0.0
 801f636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f63a:	edcd 7a05 	vstr	s15, [sp, #20]
 801f63e:	d11e      	bne.n	801f67e <__ieee754_rem_pio2f+0x21a>
 801f640:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801f644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f648:	bf14      	ite	ne
 801f64a:	2302      	movne	r3, #2
 801f64c:	2301      	moveq	r3, #1
 801f64e:	491a      	ldr	r1, [pc, #104]	; (801f6b8 <__ieee754_rem_pio2f+0x254>)
 801f650:	9101      	str	r1, [sp, #4]
 801f652:	2102      	movs	r1, #2
 801f654:	9100      	str	r1, [sp, #0]
 801f656:	a803      	add	r0, sp, #12
 801f658:	4621      	mov	r1, r4
 801f65a:	f000 f895 	bl	801f788 <__kernel_rem_pio2f>
 801f65e:	2e00      	cmp	r6, #0
 801f660:	f6bf af31 	bge.w	801f4c6 <__ieee754_rem_pio2f+0x62>
 801f664:	edd4 7a00 	vldr	s15, [r4]
 801f668:	eef1 7a67 	vneg.f32	s15, s15
 801f66c:	edc4 7a00 	vstr	s15, [r4]
 801f670:	edd4 7a01 	vldr	s15, [r4, #4]
 801f674:	eef1 7a67 	vneg.f32	s15, s15
 801f678:	edc4 7a01 	vstr	s15, [r4, #4]
 801f67c:	e77a      	b.n	801f574 <__ieee754_rem_pio2f+0x110>
 801f67e:	2303      	movs	r3, #3
 801f680:	e7e5      	b.n	801f64e <__ieee754_rem_pio2f+0x1ea>
 801f682:	bf00      	nop
 801f684:	3f490fd8 	.word	0x3f490fd8
 801f688:	4016cbe3 	.word	0x4016cbe3
 801f68c:	3fc90f80 	.word	0x3fc90f80
 801f690:	3fc90fd0 	.word	0x3fc90fd0
 801f694:	37354400 	.word	0x37354400
 801f698:	37354443 	.word	0x37354443
 801f69c:	2e85a308 	.word	0x2e85a308
 801f6a0:	43490f80 	.word	0x43490f80
 801f6a4:	3f22f984 	.word	0x3f22f984
 801f6a8:	0802504c 	.word	0x0802504c
 801f6ac:	2e85a300 	.word	0x2e85a300
 801f6b0:	248d3132 	.word	0x248d3132
 801f6b4:	43800000 	.word	0x43800000
 801f6b8:	080250cc 	.word	0x080250cc

0801f6bc <scalbnf>:
 801f6bc:	ee10 3a10 	vmov	r3, s0
 801f6c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f6c4:	d02b      	beq.n	801f71e <scalbnf+0x62>
 801f6c6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801f6ca:	d302      	bcc.n	801f6d2 <scalbnf+0x16>
 801f6cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f6d0:	4770      	bx	lr
 801f6d2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801f6d6:	d123      	bne.n	801f720 <scalbnf+0x64>
 801f6d8:	4b24      	ldr	r3, [pc, #144]	; (801f76c <scalbnf+0xb0>)
 801f6da:	eddf 7a25 	vldr	s15, [pc, #148]	; 801f770 <scalbnf+0xb4>
 801f6de:	4298      	cmp	r0, r3
 801f6e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f6e4:	db17      	blt.n	801f716 <scalbnf+0x5a>
 801f6e6:	ee10 3a10 	vmov	r3, s0
 801f6ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f6ee:	3a19      	subs	r2, #25
 801f6f0:	f24c 3150 	movw	r1, #50000	; 0xc350
 801f6f4:	4288      	cmp	r0, r1
 801f6f6:	dd15      	ble.n	801f724 <scalbnf+0x68>
 801f6f8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801f774 <scalbnf+0xb8>
 801f6fc:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801f778 <scalbnf+0xbc>
 801f700:	ee10 3a10 	vmov	r3, s0
 801f704:	eeb0 7a67 	vmov.f32	s14, s15
 801f708:	2b00      	cmp	r3, #0
 801f70a:	bfb8      	it	lt
 801f70c:	eef0 7a66 	vmovlt.f32	s15, s13
 801f710:	ee27 0a87 	vmul.f32	s0, s15, s14
 801f714:	4770      	bx	lr
 801f716:	eddf 7a19 	vldr	s15, [pc, #100]	; 801f77c <scalbnf+0xc0>
 801f71a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801f71e:	4770      	bx	lr
 801f720:	0dd2      	lsrs	r2, r2, #23
 801f722:	e7e5      	b.n	801f6f0 <scalbnf+0x34>
 801f724:	4410      	add	r0, r2
 801f726:	28fe      	cmp	r0, #254	; 0xfe
 801f728:	dce6      	bgt.n	801f6f8 <scalbnf+0x3c>
 801f72a:	2800      	cmp	r0, #0
 801f72c:	dd06      	ble.n	801f73c <scalbnf+0x80>
 801f72e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f732:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f736:	ee00 3a10 	vmov	s0, r3
 801f73a:	4770      	bx	lr
 801f73c:	f110 0f16 	cmn.w	r0, #22
 801f740:	da09      	bge.n	801f756 <scalbnf+0x9a>
 801f742:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801f77c <scalbnf+0xc0>
 801f746:	eddf 6a0e 	vldr	s13, [pc, #56]	; 801f780 <scalbnf+0xc4>
 801f74a:	ee10 3a10 	vmov	r3, s0
 801f74e:	eeb0 7a67 	vmov.f32	s14, s15
 801f752:	2b00      	cmp	r3, #0
 801f754:	e7d9      	b.n	801f70a <scalbnf+0x4e>
 801f756:	3019      	adds	r0, #25
 801f758:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f75c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801f760:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801f784 <scalbnf+0xc8>
 801f764:	ee07 3a90 	vmov	s15, r3
 801f768:	e7d7      	b.n	801f71a <scalbnf+0x5e>
 801f76a:	bf00      	nop
 801f76c:	ffff3cb0 	.word	0xffff3cb0
 801f770:	4c000000 	.word	0x4c000000
 801f774:	7149f2ca 	.word	0x7149f2ca
 801f778:	f149f2ca 	.word	0xf149f2ca
 801f77c:	0da24260 	.word	0x0da24260
 801f780:	8da24260 	.word	0x8da24260
 801f784:	33000000 	.word	0x33000000

0801f788 <__kernel_rem_pio2f>:
 801f788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f78c:	ed2d 8b04 	vpush	{d8-d9}
 801f790:	b0d9      	sub	sp, #356	; 0x164
 801f792:	4688      	mov	r8, r1
 801f794:	9002      	str	r0, [sp, #8]
 801f796:	49b8      	ldr	r1, [pc, #736]	; (801fa78 <__kernel_rem_pio2f+0x2f0>)
 801f798:	9866      	ldr	r0, [sp, #408]	; 0x198
 801f79a:	9301      	str	r3, [sp, #4]
 801f79c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801f7a0:	9901      	ldr	r1, [sp, #4]
 801f7a2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801f7a4:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801f7a8:	1d11      	adds	r1, r2, #4
 801f7aa:	db25      	blt.n	801f7f8 <__kernel_rem_pio2f+0x70>
 801f7ac:	1ed0      	subs	r0, r2, #3
 801f7ae:	bf48      	it	mi
 801f7b0:	1d10      	addmi	r0, r2, #4
 801f7b2:	10c0      	asrs	r0, r0, #3
 801f7b4:	1c45      	adds	r5, r0, #1
 801f7b6:	00e9      	lsls	r1, r5, #3
 801f7b8:	eba0 070b 	sub.w	r7, r0, fp
 801f7bc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801fa88 <__kernel_rem_pio2f+0x300>
 801f7c0:	9103      	str	r1, [sp, #12]
 801f7c2:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801f7c6:	eb0a 0c0b 	add.w	ip, sl, fp
 801f7ca:	ae1c      	add	r6, sp, #112	; 0x70
 801f7cc:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801f7d0:	2400      	movs	r4, #0
 801f7d2:	4564      	cmp	r4, ip
 801f7d4:	dd12      	ble.n	801f7fc <__kernel_rem_pio2f+0x74>
 801f7d6:	9901      	ldr	r1, [sp, #4]
 801f7d8:	ac1c      	add	r4, sp, #112	; 0x70
 801f7da:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801f7de:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801f7e2:	f04f 0c00 	mov.w	ip, #0
 801f7e6:	45d4      	cmp	ip, sl
 801f7e8:	dc27      	bgt.n	801f83a <__kernel_rem_pio2f+0xb2>
 801f7ea:	f8dd e008 	ldr.w	lr, [sp, #8]
 801f7ee:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801fa88 <__kernel_rem_pio2f+0x300>
 801f7f2:	4627      	mov	r7, r4
 801f7f4:	2600      	movs	r6, #0
 801f7f6:	e016      	b.n	801f826 <__kernel_rem_pio2f+0x9e>
 801f7f8:	2000      	movs	r0, #0
 801f7fa:	e7db      	b.n	801f7b4 <__kernel_rem_pio2f+0x2c>
 801f7fc:	42e7      	cmn	r7, r4
 801f7fe:	bf5d      	ittte	pl
 801f800:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801f804:	ee07 1a90 	vmovpl	s15, r1
 801f808:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801f80c:	eef0 7a47 	vmovmi.f32	s15, s14
 801f810:	ece6 7a01 	vstmia	r6!, {s15}
 801f814:	3401      	adds	r4, #1
 801f816:	e7dc      	b.n	801f7d2 <__kernel_rem_pio2f+0x4a>
 801f818:	ecfe 6a01 	vldmia	lr!, {s13}
 801f81c:	ed97 7a00 	vldr	s14, [r7]
 801f820:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f824:	3601      	adds	r6, #1
 801f826:	455e      	cmp	r6, fp
 801f828:	f1a7 0704 	sub.w	r7, r7, #4
 801f82c:	ddf4      	ble.n	801f818 <__kernel_rem_pio2f+0x90>
 801f82e:	ece9 7a01 	vstmia	r9!, {s15}
 801f832:	f10c 0c01 	add.w	ip, ip, #1
 801f836:	3404      	adds	r4, #4
 801f838:	e7d5      	b.n	801f7e6 <__kernel_rem_pio2f+0x5e>
 801f83a:	a908      	add	r1, sp, #32
 801f83c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f840:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801f844:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801fa84 <__kernel_rem_pio2f+0x2fc>
 801f848:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801fa80 <__kernel_rem_pio2f+0x2f8>
 801f84c:	9105      	str	r1, [sp, #20]
 801f84e:	9304      	str	r3, [sp, #16]
 801f850:	4656      	mov	r6, sl
 801f852:	00b3      	lsls	r3, r6, #2
 801f854:	9306      	str	r3, [sp, #24]
 801f856:	ab58      	add	r3, sp, #352	; 0x160
 801f858:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801f85c:	ac08      	add	r4, sp, #32
 801f85e:	ab44      	add	r3, sp, #272	; 0x110
 801f860:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801f864:	46a4      	mov	ip, r4
 801f866:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801f86a:	4637      	mov	r7, r6
 801f86c:	2f00      	cmp	r7, #0
 801f86e:	f1a0 0004 	sub.w	r0, r0, #4
 801f872:	dc4a      	bgt.n	801f90a <__kernel_rem_pio2f+0x182>
 801f874:	4628      	mov	r0, r5
 801f876:	9207      	str	r2, [sp, #28]
 801f878:	f7ff ff20 	bl	801f6bc <scalbnf>
 801f87c:	eeb0 8a40 	vmov.f32	s16, s0
 801f880:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801f884:	ee28 0a00 	vmul.f32	s0, s16, s0
 801f888:	f7ff fba2 	bl	801efd0 <floorf>
 801f88c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801f890:	eea0 8a67 	vfms.f32	s16, s0, s15
 801f894:	2d00      	cmp	r5, #0
 801f896:	9a07      	ldr	r2, [sp, #28]
 801f898:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801f89c:	ee17 9a90 	vmov	r9, s15
 801f8a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f8a4:	ee38 8a67 	vsub.f32	s16, s16, s15
 801f8a8:	dd41      	ble.n	801f92e <__kernel_rem_pio2f+0x1a6>
 801f8aa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801f8ae:	ab08      	add	r3, sp, #32
 801f8b0:	f1c5 0e08 	rsb	lr, r5, #8
 801f8b4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801f8b8:	fa47 f00e 	asr.w	r0, r7, lr
 801f8bc:	4481      	add	r9, r0
 801f8be:	fa00 f00e 	lsl.w	r0, r0, lr
 801f8c2:	1a3f      	subs	r7, r7, r0
 801f8c4:	f1c5 0007 	rsb	r0, r5, #7
 801f8c8:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801f8cc:	4107      	asrs	r7, r0
 801f8ce:	2f00      	cmp	r7, #0
 801f8d0:	dd3c      	ble.n	801f94c <__kernel_rem_pio2f+0x1c4>
 801f8d2:	f04f 0e00 	mov.w	lr, #0
 801f8d6:	f109 0901 	add.w	r9, r9, #1
 801f8da:	4671      	mov	r1, lr
 801f8dc:	4576      	cmp	r6, lr
 801f8de:	dc67      	bgt.n	801f9b0 <__kernel_rem_pio2f+0x228>
 801f8e0:	2d00      	cmp	r5, #0
 801f8e2:	dd03      	ble.n	801f8ec <__kernel_rem_pio2f+0x164>
 801f8e4:	2d01      	cmp	r5, #1
 801f8e6:	d074      	beq.n	801f9d2 <__kernel_rem_pio2f+0x24a>
 801f8e8:	2d02      	cmp	r5, #2
 801f8ea:	d07b      	beq.n	801f9e4 <__kernel_rem_pio2f+0x25c>
 801f8ec:	2f02      	cmp	r7, #2
 801f8ee:	d12d      	bne.n	801f94c <__kernel_rem_pio2f+0x1c4>
 801f8f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f8f4:	ee30 8a48 	vsub.f32	s16, s0, s16
 801f8f8:	b341      	cbz	r1, 801f94c <__kernel_rem_pio2f+0x1c4>
 801f8fa:	4628      	mov	r0, r5
 801f8fc:	9207      	str	r2, [sp, #28]
 801f8fe:	f7ff fedd 	bl	801f6bc <scalbnf>
 801f902:	9a07      	ldr	r2, [sp, #28]
 801f904:	ee38 8a40 	vsub.f32	s16, s16, s0
 801f908:	e020      	b.n	801f94c <__kernel_rem_pio2f+0x1c4>
 801f90a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801f90e:	3f01      	subs	r7, #1
 801f910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f918:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801f91c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f920:	ecac 0a01 	vstmia	ip!, {s0}
 801f924:	ed90 0a00 	vldr	s0, [r0]
 801f928:	ee37 0a80 	vadd.f32	s0, s15, s0
 801f92c:	e79e      	b.n	801f86c <__kernel_rem_pio2f+0xe4>
 801f92e:	d105      	bne.n	801f93c <__kernel_rem_pio2f+0x1b4>
 801f930:	1e70      	subs	r0, r6, #1
 801f932:	ab08      	add	r3, sp, #32
 801f934:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801f938:	11ff      	asrs	r7, r7, #7
 801f93a:	e7c8      	b.n	801f8ce <__kernel_rem_pio2f+0x146>
 801f93c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f940:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801f944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f948:	da30      	bge.n	801f9ac <__kernel_rem_pio2f+0x224>
 801f94a:	2700      	movs	r7, #0
 801f94c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801f950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f954:	f040 809a 	bne.w	801fa8c <__kernel_rem_pio2f+0x304>
 801f958:	1e74      	subs	r4, r6, #1
 801f95a:	46a4      	mov	ip, r4
 801f95c:	2100      	movs	r1, #0
 801f95e:	45d4      	cmp	ip, sl
 801f960:	da47      	bge.n	801f9f2 <__kernel_rem_pio2f+0x26a>
 801f962:	2900      	cmp	r1, #0
 801f964:	d063      	beq.n	801fa2e <__kernel_rem_pio2f+0x2a6>
 801f966:	ab08      	add	r3, sp, #32
 801f968:	3d08      	subs	r5, #8
 801f96a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d07f      	beq.n	801fa72 <__kernel_rem_pio2f+0x2ea>
 801f972:	4628      	mov	r0, r5
 801f974:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f978:	f7ff fea0 	bl	801f6bc <scalbnf>
 801f97c:	1c63      	adds	r3, r4, #1
 801f97e:	aa44      	add	r2, sp, #272	; 0x110
 801f980:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801fa84 <__kernel_rem_pio2f+0x2fc>
 801f984:	0099      	lsls	r1, r3, #2
 801f986:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801f98a:	4623      	mov	r3, r4
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	f280 80ad 	bge.w	801faec <__kernel_rem_pio2f+0x364>
 801f992:	4623      	mov	r3, r4
 801f994:	2b00      	cmp	r3, #0
 801f996:	f2c0 80cb 	blt.w	801fb30 <__kernel_rem_pio2f+0x3a8>
 801f99a:	aa44      	add	r2, sp, #272	; 0x110
 801f99c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801f9a0:	4e36      	ldr	r6, [pc, #216]	; (801fa7c <__kernel_rem_pio2f+0x2f4>)
 801f9a2:	eddf 7a39 	vldr	s15, [pc, #228]	; 801fa88 <__kernel_rem_pio2f+0x300>
 801f9a6:	2000      	movs	r0, #0
 801f9a8:	1ae2      	subs	r2, r4, r3
 801f9aa:	e0b6      	b.n	801fb1a <__kernel_rem_pio2f+0x392>
 801f9ac:	2702      	movs	r7, #2
 801f9ae:	e790      	b.n	801f8d2 <__kernel_rem_pio2f+0x14a>
 801f9b0:	6820      	ldr	r0, [r4, #0]
 801f9b2:	b949      	cbnz	r1, 801f9c8 <__kernel_rem_pio2f+0x240>
 801f9b4:	b118      	cbz	r0, 801f9be <__kernel_rem_pio2f+0x236>
 801f9b6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801f9ba:	6020      	str	r0, [r4, #0]
 801f9bc:	2001      	movs	r0, #1
 801f9be:	f10e 0e01 	add.w	lr, lr, #1
 801f9c2:	3404      	adds	r4, #4
 801f9c4:	4601      	mov	r1, r0
 801f9c6:	e789      	b.n	801f8dc <__kernel_rem_pio2f+0x154>
 801f9c8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801f9cc:	6020      	str	r0, [r4, #0]
 801f9ce:	4608      	mov	r0, r1
 801f9d0:	e7f5      	b.n	801f9be <__kernel_rem_pio2f+0x236>
 801f9d2:	1e74      	subs	r4, r6, #1
 801f9d4:	ab08      	add	r3, sp, #32
 801f9d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f9da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801f9de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801f9e2:	e783      	b.n	801f8ec <__kernel_rem_pio2f+0x164>
 801f9e4:	1e74      	subs	r4, r6, #1
 801f9e6:	ab08      	add	r3, sp, #32
 801f9e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801f9ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801f9f0:	e7f5      	b.n	801f9de <__kernel_rem_pio2f+0x256>
 801f9f2:	ab08      	add	r3, sp, #32
 801f9f4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801f9f8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f9fc:	4301      	orrs	r1, r0
 801f9fe:	e7ae      	b.n	801f95e <__kernel_rem_pio2f+0x1d6>
 801fa00:	3001      	adds	r0, #1
 801fa02:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801fa06:	2f00      	cmp	r7, #0
 801fa08:	d0fa      	beq.n	801fa00 <__kernel_rem_pio2f+0x278>
 801fa0a:	9b06      	ldr	r3, [sp, #24]
 801fa0c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801fa10:	eb0d 0403 	add.w	r4, sp, r3
 801fa14:	9b01      	ldr	r3, [sp, #4]
 801fa16:	18f7      	adds	r7, r6, r3
 801fa18:	ab1c      	add	r3, sp, #112	; 0x70
 801fa1a:	f106 0c01 	add.w	ip, r6, #1
 801fa1e:	3c4c      	subs	r4, #76	; 0x4c
 801fa20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801fa24:	4430      	add	r0, r6
 801fa26:	4560      	cmp	r0, ip
 801fa28:	da04      	bge.n	801fa34 <__kernel_rem_pio2f+0x2ac>
 801fa2a:	4606      	mov	r6, r0
 801fa2c:	e711      	b.n	801f852 <__kernel_rem_pio2f+0xca>
 801fa2e:	9c05      	ldr	r4, [sp, #20]
 801fa30:	2001      	movs	r0, #1
 801fa32:	e7e6      	b.n	801fa02 <__kernel_rem_pio2f+0x27a>
 801fa34:	9b04      	ldr	r3, [sp, #16]
 801fa36:	f8dd e008 	ldr.w	lr, [sp, #8]
 801fa3a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801fa3e:	9306      	str	r3, [sp, #24]
 801fa40:	ee07 3a90 	vmov	s15, r3
 801fa44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa48:	2600      	movs	r6, #0
 801fa4a:	ece7 7a01 	vstmia	r7!, {s15}
 801fa4e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801fa88 <__kernel_rem_pio2f+0x300>
 801fa52:	46b9      	mov	r9, r7
 801fa54:	455e      	cmp	r6, fp
 801fa56:	dd04      	ble.n	801fa62 <__kernel_rem_pio2f+0x2da>
 801fa58:	ece4 7a01 	vstmia	r4!, {s15}
 801fa5c:	f10c 0c01 	add.w	ip, ip, #1
 801fa60:	e7e1      	b.n	801fa26 <__kernel_rem_pio2f+0x29e>
 801fa62:	ecfe 6a01 	vldmia	lr!, {s13}
 801fa66:	ed39 7a01 	vldmdb	r9!, {s14}
 801fa6a:	3601      	adds	r6, #1
 801fa6c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fa70:	e7f0      	b.n	801fa54 <__kernel_rem_pio2f+0x2cc>
 801fa72:	3c01      	subs	r4, #1
 801fa74:	e777      	b.n	801f966 <__kernel_rem_pio2f+0x1de>
 801fa76:	bf00      	nop
 801fa78:	08025410 	.word	0x08025410
 801fa7c:	080253e4 	.word	0x080253e4
 801fa80:	43800000 	.word	0x43800000
 801fa84:	3b800000 	.word	0x3b800000
 801fa88:	00000000 	.word	0x00000000
 801fa8c:	9b03      	ldr	r3, [sp, #12]
 801fa8e:	eeb0 0a48 	vmov.f32	s0, s16
 801fa92:	1a98      	subs	r0, r3, r2
 801fa94:	f7ff fe12 	bl	801f6bc <scalbnf>
 801fa98:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801fa80 <__kernel_rem_pio2f+0x2f8>
 801fa9c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801faa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faa4:	db19      	blt.n	801fada <__kernel_rem_pio2f+0x352>
 801faa6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801fa84 <__kernel_rem_pio2f+0x2fc>
 801faaa:	ee60 7a27 	vmul.f32	s15, s0, s15
 801faae:	aa08      	add	r2, sp, #32
 801fab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fab4:	1c74      	adds	r4, r6, #1
 801fab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801faba:	3508      	adds	r5, #8
 801fabc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801fac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801fac4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fac8:	ee10 3a10 	vmov	r3, s0
 801facc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801fad0:	ee17 3a90 	vmov	r3, s15
 801fad4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801fad8:	e74b      	b.n	801f972 <__kernel_rem_pio2f+0x1ea>
 801fada:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801fade:	aa08      	add	r2, sp, #32
 801fae0:	ee10 3a10 	vmov	r3, s0
 801fae4:	4634      	mov	r4, r6
 801fae6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801faea:	e742      	b.n	801f972 <__kernel_rem_pio2f+0x1ea>
 801faec:	a808      	add	r0, sp, #32
 801faee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801faf2:	9001      	str	r0, [sp, #4]
 801faf4:	ee07 0a90 	vmov	s15, r0
 801faf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fafc:	3b01      	subs	r3, #1
 801fafe:	ee67 7a80 	vmul.f32	s15, s15, s0
 801fb02:	ee20 0a07 	vmul.f32	s0, s0, s14
 801fb06:	ed62 7a01 	vstmdb	r2!, {s15}
 801fb0a:	e73f      	b.n	801f98c <__kernel_rem_pio2f+0x204>
 801fb0c:	ecf6 6a01 	vldmia	r6!, {s13}
 801fb10:	ecb5 7a01 	vldmia	r5!, {s14}
 801fb14:	eee6 7a87 	vfma.f32	s15, s13, s14
 801fb18:	3001      	adds	r0, #1
 801fb1a:	4550      	cmp	r0, sl
 801fb1c:	dc01      	bgt.n	801fb22 <__kernel_rem_pio2f+0x39a>
 801fb1e:	4290      	cmp	r0, r2
 801fb20:	ddf4      	ble.n	801fb0c <__kernel_rem_pio2f+0x384>
 801fb22:	a858      	add	r0, sp, #352	; 0x160
 801fb24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801fb28:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801fb2c:	3b01      	subs	r3, #1
 801fb2e:	e731      	b.n	801f994 <__kernel_rem_pio2f+0x20c>
 801fb30:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801fb32:	2b02      	cmp	r3, #2
 801fb34:	dc09      	bgt.n	801fb4a <__kernel_rem_pio2f+0x3c2>
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	dc2b      	bgt.n	801fb92 <__kernel_rem_pio2f+0x40a>
 801fb3a:	d044      	beq.n	801fbc6 <__kernel_rem_pio2f+0x43e>
 801fb3c:	f009 0007 	and.w	r0, r9, #7
 801fb40:	b059      	add	sp, #356	; 0x164
 801fb42:	ecbd 8b04 	vpop	{d8-d9}
 801fb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb4a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801fb4c:	2b03      	cmp	r3, #3
 801fb4e:	d1f5      	bne.n	801fb3c <__kernel_rem_pio2f+0x3b4>
 801fb50:	aa30      	add	r2, sp, #192	; 0xc0
 801fb52:	1f0b      	subs	r3, r1, #4
 801fb54:	4413      	add	r3, r2
 801fb56:	461a      	mov	r2, r3
 801fb58:	4620      	mov	r0, r4
 801fb5a:	2800      	cmp	r0, #0
 801fb5c:	f1a2 0204 	sub.w	r2, r2, #4
 801fb60:	dc52      	bgt.n	801fc08 <__kernel_rem_pio2f+0x480>
 801fb62:	4622      	mov	r2, r4
 801fb64:	2a01      	cmp	r2, #1
 801fb66:	f1a3 0304 	sub.w	r3, r3, #4
 801fb6a:	dc5d      	bgt.n	801fc28 <__kernel_rem_pio2f+0x4a0>
 801fb6c:	ab30      	add	r3, sp, #192	; 0xc0
 801fb6e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801fa88 <__kernel_rem_pio2f+0x300>
 801fb72:	440b      	add	r3, r1
 801fb74:	2c01      	cmp	r4, #1
 801fb76:	dc67      	bgt.n	801fc48 <__kernel_rem_pio2f+0x4c0>
 801fb78:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801fb7c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801fb80:	2f00      	cmp	r7, #0
 801fb82:	d167      	bne.n	801fc54 <__kernel_rem_pio2f+0x4cc>
 801fb84:	edc8 6a00 	vstr	s13, [r8]
 801fb88:	ed88 7a01 	vstr	s14, [r8, #4]
 801fb8c:	edc8 7a02 	vstr	s15, [r8, #8]
 801fb90:	e7d4      	b.n	801fb3c <__kernel_rem_pio2f+0x3b4>
 801fb92:	ab30      	add	r3, sp, #192	; 0xc0
 801fb94:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801fa88 <__kernel_rem_pio2f+0x300>
 801fb98:	440b      	add	r3, r1
 801fb9a:	4622      	mov	r2, r4
 801fb9c:	2a00      	cmp	r2, #0
 801fb9e:	da24      	bge.n	801fbea <__kernel_rem_pio2f+0x462>
 801fba0:	b34f      	cbz	r7, 801fbf6 <__kernel_rem_pio2f+0x46e>
 801fba2:	eef1 7a47 	vneg.f32	s15, s14
 801fba6:	edc8 7a00 	vstr	s15, [r8]
 801fbaa:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801fbae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fbb2:	aa31      	add	r2, sp, #196	; 0xc4
 801fbb4:	2301      	movs	r3, #1
 801fbb6:	429c      	cmp	r4, r3
 801fbb8:	da20      	bge.n	801fbfc <__kernel_rem_pio2f+0x474>
 801fbba:	b10f      	cbz	r7, 801fbc0 <__kernel_rem_pio2f+0x438>
 801fbbc:	eef1 7a67 	vneg.f32	s15, s15
 801fbc0:	edc8 7a01 	vstr	s15, [r8, #4]
 801fbc4:	e7ba      	b.n	801fb3c <__kernel_rem_pio2f+0x3b4>
 801fbc6:	ab30      	add	r3, sp, #192	; 0xc0
 801fbc8:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801fa88 <__kernel_rem_pio2f+0x300>
 801fbcc:	440b      	add	r3, r1
 801fbce:	2c00      	cmp	r4, #0
 801fbd0:	da05      	bge.n	801fbde <__kernel_rem_pio2f+0x456>
 801fbd2:	b10f      	cbz	r7, 801fbd8 <__kernel_rem_pio2f+0x450>
 801fbd4:	eef1 7a67 	vneg.f32	s15, s15
 801fbd8:	edc8 7a00 	vstr	s15, [r8]
 801fbdc:	e7ae      	b.n	801fb3c <__kernel_rem_pio2f+0x3b4>
 801fbde:	ed33 7a01 	vldmdb	r3!, {s14}
 801fbe2:	3c01      	subs	r4, #1
 801fbe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fbe8:	e7f1      	b.n	801fbce <__kernel_rem_pio2f+0x446>
 801fbea:	ed73 7a01 	vldmdb	r3!, {s15}
 801fbee:	3a01      	subs	r2, #1
 801fbf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801fbf4:	e7d2      	b.n	801fb9c <__kernel_rem_pio2f+0x414>
 801fbf6:	eef0 7a47 	vmov.f32	s15, s14
 801fbfa:	e7d4      	b.n	801fba6 <__kernel_rem_pio2f+0x41e>
 801fbfc:	ecb2 7a01 	vldmia	r2!, {s14}
 801fc00:	3301      	adds	r3, #1
 801fc02:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fc06:	e7d6      	b.n	801fbb6 <__kernel_rem_pio2f+0x42e>
 801fc08:	edd2 7a00 	vldr	s15, [r2]
 801fc0c:	edd2 6a01 	vldr	s13, [r2, #4]
 801fc10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fc14:	3801      	subs	r0, #1
 801fc16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fc1a:	ed82 7a00 	vstr	s14, [r2]
 801fc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fc22:	edc2 7a01 	vstr	s15, [r2, #4]
 801fc26:	e798      	b.n	801fb5a <__kernel_rem_pio2f+0x3d2>
 801fc28:	edd3 7a00 	vldr	s15, [r3]
 801fc2c:	edd3 6a01 	vldr	s13, [r3, #4]
 801fc30:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801fc34:	3a01      	subs	r2, #1
 801fc36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801fc3a:	ed83 7a00 	vstr	s14, [r3]
 801fc3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801fc42:	edc3 7a01 	vstr	s15, [r3, #4]
 801fc46:	e78d      	b.n	801fb64 <__kernel_rem_pio2f+0x3dc>
 801fc48:	ed33 7a01 	vldmdb	r3!, {s14}
 801fc4c:	3c01      	subs	r4, #1
 801fc4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fc52:	e78f      	b.n	801fb74 <__kernel_rem_pio2f+0x3ec>
 801fc54:	eef1 6a66 	vneg.f32	s13, s13
 801fc58:	eeb1 7a47 	vneg.f32	s14, s14
 801fc5c:	edc8 6a00 	vstr	s13, [r8]
 801fc60:	ed88 7a01 	vstr	s14, [r8, #4]
 801fc64:	eef1 7a67 	vneg.f32	s15, s15
 801fc68:	e790      	b.n	801fb8c <__kernel_rem_pio2f+0x404>
 801fc6a:	bf00      	nop

0801fc6c <_init>:
 801fc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc6e:	bf00      	nop
 801fc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc72:	bc08      	pop	{r3}
 801fc74:	469e      	mov	lr, r3
 801fc76:	4770      	bx	lr

0801fc78 <_fini>:
 801fc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc7a:	bf00      	nop
 801fc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc7e:	bc08      	pop	{r3}
 801fc80:	469e      	mov	lr, r3
 801fc82:	4770      	bx	lr

0801fc84 <__params_cppm>:
 801fc84:	0081 0000 1a34 0802 0000 0000 0000 0000     ....4...........
 801fc94:	0000 0000 0116 0000 1a3c 0802 0050 2000     ........<...P.. 
	...
 801fcac:	0116 0000 1a48 0802 0054 2000 0000 0000     ....H...T.. ....
 801fcbc:	0000 0000 0116 0000 1a54 0802 005c 2000     ........T...\.. 
	...
 801fcd4:	0116 0000 1a60 0802 0058 2000 0000 0000     ....`...X.. ....
 801fce4:	0000 0000 0116 0000 1a68 0802 0060 2000     ........h...`.. 
	...
 801fcfc:	0080 0000 1a70 0802 0000 0000 0000 0000     ....p...........
 801fd0c:	0000 0000                                   ....

0801fd10 <__params_hlCommander>:
 801fd10:	0081 0000 1a84 0802 0000 0000 0000 0000     ................
 801fd20:	0000 0000 0026 0000 1a90 0802 0068 2000     ....&.......h.. 
	...
 801fd38:	0026 0000 1a98 0802 006c 2000 0000 0000     &.......l.. ....
 801fd48:	0000 0000 0028 0000 1aa0 0802 6368 2000     ....(.......hc. 
	...
 801fd60:	0080 0000 1aac 0802 0000 0000 0000 0000     ................
 801fd70:	0000 0000                                   ....

0801fd74 <__params_flightmode>:
 801fd74:	0081 0000 1af0 0802 0000 0000 0000 0000     ................
 801fd84:	0000 0000 0028 0000 1afc 0802 68d5 2000     ....(........h. 
	...
 801fd9c:	0028 0000 1b04 0802 68d6 2000 0000 0000     (........h. ....
 801fdac:	0000 0000 0028 0000 1b0c 0802 68d7 2000     ....(........h. 
	...
 801fdc4:	0008 0000 1b14 0802 0072 2000 0000 0000     ........r.. ....
 801fdd4:	0000 0000 0028 0000 1b1c 0802 0070 2000     ....(.......p.. 
	...
 801fdec:	0028 0000 1b2c 0802 0071 2000 0000 0000     (...,...q.. ....
 801fdfc:	0000 0000 0028 0000 1b3c 0802 68d4 2000     ....(...<....h. 
	...
 801fe14:	0080 0000 1b48 0802 0000 0000 0000 0000     ....H...........
 801fe24:	0000 0000                                   ....

0801fe28 <__params_locSrv>:
 801fe28:	0081 0000 1bd4 0802 0000 0000 0000 0000     ................
 801fe38:	0000 0000 0028 0000 1c24 0802 6914 2000     ....(...$....i. 
	...
 801fe50:	0028 0000 1c38 0802 6915 2000 0000 0000     (...8....i. ....
 801fe60:	0000 0000 0026 0000 1c48 0802 0074 2000     ....&...H...t.. 
	...
 801fe78:	0026 0000 1c58 0802 0078 2000 0000 0000     &...X...x.. ....
 801fe88:	0000 0000 0080 0000 1bf8 0802 0000 0000     ................
	...

0801fea0 <__params_crtpsrv>:
 801fea0:	0081 0000 1c88 0802 0000 0000 0000 0000     ................
 801feb0:	0000 0000 0009 0000 1c90 0802 6922 2000     ............"i. 
	...
 801fec8:	0080 0000 1c9c 0802 0000 0000 0000 0000     ................
 801fed8:	0000 0000                                   ....

0801fedc <__params_syslink>:
 801fedc:	0081 0000 1f08 0802 0000 0000 0000 0000     ................
 801feec:	0000 0000 0008 0000 1f10 0802 6a94 2000     .............j. 
	...
 801ff04:	0080 0000 1f18 0802 0000 0000 0000 0000     ................
 801ff14:	0000 0000                                   ....

0801ff18 <__params_led>:
 801ff18:	0081 0000 1fd0 0802 0000 0000 0000 0000     ................
 801ff28:	0000 0000 0008 0000 1fd4 0802 6adf 2000     .............j. 
 801ff38:	4bdd 0800 0000 0000 0080 0000 1fdc 0802     .K..............
	...

0801ff54 <__params_memTst>:
 801ff54:	0081 0000 20f0 0802 0000 0000 0000 0000     ..... ..........
 801ff64:	0000 0000 0008 0000 20f8 0802 6afc 2000     ......... ...j. 
	...
 801ff7c:	0080 0000 2100 0802 0000 0000 0000 0000     .....!..........
 801ff8c:	0000 0000                                   ....

0801ff90 <__params_pm>:
 801ff90:	0081 0000 211c 0802 0000 0000 0000 0000     .....!..........
 801ffa0:	0000 0000 0136 0000 217c 0802 02dc 2000     ....6...|!..... 
	...
 801ffb8:	0136 0000 2188 0802 02d8 2000 0000 0000     6....!..... ....
 801ffc8:	0000 0000 0080 0000 2174 0802 0000 0000     ........t!......
	...

0801ffe0 <__params_sound>:
 801ffe0:	0081 0000 21e8 0802 0000 0000 0000 0000     .....!..........
 801fff0:	0000 0000 0138 0000 21f0 0802 6db4 2000     ....8....!...m. 
	...
 8020008:	006a 0000 21f8 0802 6dac 2000 0000 0000     j....!...m. ....
 8020018:	0000 0000 0029 0000 2200 0802 02e0 2000     ....)...."..... 
	...
 8020030:	0080 0000 2208 0802 0000 0000 0000 0000     ....."..........
 8020040:	0000 0000                                   ....

08020044 <__params_system>:
 8020044:	0081 0000 2274 0802 0000 0000 0000 0000     ....t"..........
 8020054:	0000 0000 0008 0000 227c 0802 6dbd 2000     ........|"...m. 
 8020064:	5af1 0800 0000 0000 0008 0000 228c 0802     .Z..........."..
 8020074:	6dbe 2000 5b11 0800 0000 0000 0080 0000     .m. .[..........
 8020084:	229c 0802 0000 0000 0000 0000 0000 0000     ."..............

08020094 <__params_pid_attitude>:
 8020094:	0081 0000 27dc 0802 0000 0000 0000 0000     .....'..........
 80200a4:	0000 0000 0116 0000 28ac 0802 043c 2000     .........(..<.. 
	...
 80200bc:	0116 0000 28b4 0802 0440 2000 0000 0000     .....(..@.. ....
 80200cc:	0000 0000 0116 0000 28bc 0802 0444 2000     .........(..D.. 
	...
 80200e4:	0116 0000 28c4 0802 0448 2000 0000 0000     .....(..H.. ....
 80200f4:	0000 0000 0116 0000 28d0 0802 049c 2000     .........(..... 
	...
 802010c:	0116 0000 28dc 0802 04a0 2000 0000 0000     .....(..... ....
 802011c:	0000 0000 0116 0000 28e8 0802 04a4 2000     .........(..... 
	...
 8020134:	0116 0000 28f4 0802 04a8 2000 0000 0000     .....(..... ....
 8020144:	0000 0000 0116 0000 2900 0802 04fc 2000     .........)..... 
	...
 802015c:	0116 0000 2908 0802 0500 2000 0000 0000     .....)..... ....
 802016c:	0000 0000 0116 0000 2910 0802 0504 2000     .........)..... 
	...
 8020184:	0116 0000 2918 0802 0508 2000 0000 0000     .....)..... ....
 8020194:	0000 0000 0116 0000 2920 0802 7a88 2000     ........ )...z. 
	...
 80201ac:	0110 0000 292c 0802 7a84 2000 0000 0000     ....,)...z. ....
 80201bc:	0000 0000 0116 0000 2938 0802 02f8 2000     ........8)..... 
	...
 80201d4:	0080 0000 287c 0802 0000 0000 0000 0000     ....|(..........
 80201e4:	0000 0000                                   ....

080201e8 <__params_pid_rate>:
 80201e8:	0081 0000 2890 0802 0000 0000 0000 0000     .....(..........
 80201f8:	0000 0000 0116 0000 28ac 0802 031c 2000     .........(..... 
	...
 8020210:	0116 0000 28b4 0802 0320 2000 0000 0000     .....(.. .. ....
 8020220:	0000 0000 0116 0000 28bc 0802 0324 2000     .........(..$.. 
	...
 8020238:	0116 0000 28c4 0802 0328 2000 0000 0000     .....(..(.. ....
 8020248:	0000 0000 0116 0000 28d0 0802 037c 2000     .........(..|.. 
	...
 8020260:	0116 0000 28dc 0802 0380 2000 0000 0000     .....(..... ....
 8020270:	0000 0000 0116 0000 28e8 0802 0384 2000     .........(..... 
	...
 8020288:	0116 0000 28f4 0802 0388 2000 0000 0000     .....(..... ....
 8020298:	0000 0000 0116 0000 2900 0802 03dc 2000     .........)..... 
	...
 80202b0:	0116 0000 2908 0802 03e0 2000 0000 0000     .....)..... ....
 80202c0:	0000 0000 0116 0000 2910 0802 03e4 2000     .........)..... 
	...
 80202d8:	0116 0000 2918 0802 03e8 2000 0000 0000     .....)..... ....
 80202e8:	0000 0000 0110 0000 2944 0802 7a85 2000     ........D)...z. 
	...
 8020300:	0116 0000 2950 0802 02fc 2000 0000 0000     ....P)..... ....
 8020310:	0000 0000 0116 0000 295c 0802 0300 2000     ........\)..... 
	...
 8020328:	0116 0000 2968 0802 0304 2000 0000 0000     ....h)..... ....
 8020338:	0000 0000 0080 0000 289c 0802 0000 0000     .........(......
	...

08020350 <__params_commander>:
 8020350:	0081 0000 29d0 0802 0000 0000 0000 0000     .....)..........
 8020360:	0000 0000 0028 0000 29dc 0802 7ae4 2000     ....(....)...z. 
	...
 8020378:	0080 0000 29e8 0802 0000 0000 0000 0000     .....)..........
 8020388:	0000 0000                                   ....

0802038c <__params_ctrlAtt>:
 802038c:	0081 0000 29f8 0802 0000 0000 0000 0000     .....)..........
 802039c:	0000 0000 0006 0000 2a00 0802 0548 2000     .........*..H.. 
	...
 80203b4:	0006 0000 2a08 0802 054c 2000 0000 0000     .....*..L.. ....
 80203c4:	0000 0000 0006 0000 2a10 0802 0550 2000     .........*..P.. 
	...
 80203dc:	0006 0000 2a18 0802 0554 2000 0000 0000     .....*..T.. ....
 80203ec:	0000 0000 0006 0000 2a20 0802 0558 2000     ........ *..X.. 
	...
 8020404:	0006 0000 2a28 0802 055c 2000 0000 0000     ....(*..\.. ....
 8020414:	0000 0000 0006 0000 2a38 0802 0560 2000     ........8*..`.. 
	...
 802042c:	0080 0000 2a48 0802 0000 0000 0000 0000     ....H*..........
 802043c:	0000 0000                                   ....

08020440 <__params_ctrlINDI>:
 8020440:	0081 0000 2a58 0802 0000 0000 0000 0000     ....X*..........
 8020450:	0000 0000 0006 0000 2a64 0802 0564 2000     ........d*..d.. 
	...
 8020468:	0006 0000 2a78 0802 0568 2000 0000 0000     ....x*..h.. ....
 8020478:	0000 0000 0006 0000 2a8c 0802 0670 2000     .........*..p.. 
	...
 8020490:	0006 0000 2a94 0802 0674 2000 0000 0000     .....*..t.. ....
 80204a0:	0000 0000 0006 0000 2a9c 0802 0678 2000     .........*..x.. 
	...
 80204b8:	0006 0000 2aa4 0802 067c 2000 0000 0000     .....*..|.. ....
 80204c8:	0000 0000 0006 0000 2aa8 0802 0680 2000     .........*..... 
	...
 80204e0:	0006 0000 2ab4 0802 0684 2000 0000 0000     .....*..... ....
 80204f0:	0000 0000 0006 0000 2ac0 0802 0688 2000     .........*..... 
	...
 8020508:	0006 0000 2acc 0802 068c 2000 0000 0000     .....*..... ....
 8020518:	0000 0000 0006 0000 2ad8 0802 0690 2000     .........*..... 
	...
 8020530:	0006 0000 2ae4 0802 0694 2000 0000 0000     .....*..... ....
 8020540:	0000 0000 0006 0000 2af0 0802 0698 2000     .........*..... 
	...
 8020558:	0006 0000 2afc 0802 069c 2000 0000 0000     .....*..... ....
 8020568:	0000 0000 0006 0000 2b08 0802 06a0 2000     .........+..... 
	...
 8020580:	0006 0000 2b14 0802 06a4 2000 0000 0000     .....+..... ....
 8020590:	0000 0000 0006 0000 2b20 0802 06a8 2000     ........ +..... 
	...
 80205a8:	0008 0000 2b30 0802 056c 2000 0000 0000     ....0+..l.. ....
 80205b8:	0000 0000 0080 0000 2b40 0802 0000 0000     ........@+......
	...

080205d0 <__params_ctrlMel>:
 80205d0:	0081 0000 2c6c 0802 0000 0000 0000 0000     ....l,..........
 80205e0:	0000 0000 0136 0000 2c74 0802 06b4 2000     ....6...t,..... 
	...
 80205f8:	0136 0000 2c7c 0802 06b8 2000 0000 0000     6...|,..... ....
 8020608:	0000 0000 0136 0000 2c84 0802 06bc 2000     ....6....,..... 
	...
 8020620:	0116 0000 2c8c 0802 06c0 2000 0000 0000     .....,..... ....
 8020630:	0000 0000 0136 0000 2c98 0802 06c4 2000     ....6....,..... 
	...
 8020648:	0136 0000 2ca0 0802 06c8 2000 0000 0000     6....,..... ....
 8020658:	0000 0000 0136 0000 2ca8 0802 06cc 2000     ....6....,..... 
	...
 8020670:	0116 0000 2cb0 0802 06d0 2000 0000 0000     .....,..... ....
 8020680:	0000 0000 0136 0000 2cbc 0802 06ac 2000     ....6....,..... 
	...
 8020698:	0136 0000 2cc4 0802 06b0 2000 0000 0000     6....,..... ....
 80206a8:	0000 0000 0136 0000 2cd0 0802 06d4 2000     ....6....,..... 
	...
 80206c0:	0136 0000 2cd8 0802 06e4 2000 0000 0000     6....,..... ....
 80206d0:	0000 0000 0136 0000 2ce0 0802 06d8 2000     ....6....,..... 
	...
 80206e8:	0136 0000 2ce8 0802 06e8 2000 0000 0000     6....,..... ....
 80206f8:	0000 0000 0136 0000 2cf0 0802 06dc 2000     ....6....,..... 
	...
 8020710:	0136 0000 2cf8 0802 06ec 2000 0000 0000     6....,..... ....
 8020720:	0000 0000 0136 0000 2d00 0802 06f4 2000     ....6....-..... 
	...
 8020738:	0116 0000 2d0c 0802 06e0 2000 0000 0000     .....-..... ....
 8020748:	0000 0000 0116 0000 2d1c 0802 06f0 2000     .........-..... 
	...
 8020760:	0080 0000 2d28 0802 0000 0000 0000 0000     ....(-..........
 8020770:	0000 0000                                   ....

08020774 <__params_posCtrlIndi>:
 8020774:	0081 0000 2e54 0802 0000 0000 0000 0000     ....T...........
 8020784:	0000 0000 0006 0000 2e60 0802 074c 2000     ........`...L.. 
	...
 802079c:	0006 0000 2e68 0802 0750 2000 0000 0000     ....h...P.. ....
 80207ac:	0000 0000 0006 0000 2e70 0802 0754 2000     ........p...T.. 
	...
 80207c4:	0006 0000 2e78 0802 0758 2000 0000 0000     ....x...X.. ....
 80207d4:	0000 0000 0006 0000 2e80 0802 075c 2000     ............\.. 
	...
 80207ec:	0006 0000 2e88 0802 0760 2000 0000 0000     ........`.. ....
 80207fc:	0000 0000 0006 0000 2e90 0802 0764 2000     ............d.. 
	...
 8020814:	0080 0000 2e9c 0802 0000 0000 0000 0000     ................
 8020824:	0000 0000                                   ....

08020828 <__params_velCtlPid>:
 8020828:	0081 0000 311c 0802 0000 0000 0000 0000     .....1..........
 8020838:	0000 0000 0116 0000 3128 0802 0948 2000     ........(1..H.. 
	...
 8020850:	0116 0000 3130 0802 094c 2000 0000 0000     ....01..L.. ....
 8020860:	0000 0000 0116 0000 3138 0802 0950 2000     ........81..P.. 
	...
 8020878:	0116 0000 3140 0802 0954 2000 0000 0000     ....@1..T.. ....
 8020888:	0000 0000 0116 0000 3148 0802 09b4 2000     ........H1..... 
	...
 80208a0:	0116 0000 3150 0802 09b8 2000 0000 0000     ....P1..... ....
 80208b0:	0000 0000 0116 0000 3158 0802 09bc 2000     ........X1..... 
	...
 80208c8:	0116 0000 3160 0802 09c0 2000 0000 0000     ....`1..... ....
 80208d8:	0000 0000 0116 0000 3168 0802 0a20 2000     ........h1.. .. 
	...
 80208f0:	0116 0000 3170 0802 0a24 2000 0000 0000     ....p1..$.. ....
 8020900:	0000 0000 0116 0000 3178 0802 0a28 2000     ........x1..(.. 
	...
 8020918:	0116 0000 3180 0802 0a2c 2000 0000 0000     .....1..,.. ....
 8020928:	0000 0000 0080 0000 3188 0802 0000 0000     .........1......
	...

08020940 <__params_posCtlPid>:
 8020940:	0081 0000 3198 0802 0000 0000 0000 0000     .....1..........
 8020950:	0000 0000 0116 0000 31a4 0802 0a8c 2000     .........1..... 
	...
 8020968:	0116 0000 31a8 0802 0a90 2000 0000 0000     .....1..... ....
 8020978:	0000 0000 0116 0000 31ac 0802 0a94 2000     .........1..... 
	...
 8020990:	0116 0000 31b0 0802 0a98 2000 0000 0000     .....1..... ....
 80209a0:	0000 0000 0116 0000 31b8 0802 0af8 2000     .........1..... 
	...
 80209b8:	0116 0000 31bc 0802 0afc 2000 0000 0000     .....1..... ....
 80209c8:	0000 0000 0116 0000 31c0 0802 0b00 2000     .........1..... 
	...
 80209e0:	0116 0000 31c4 0802 0b04 2000 0000 0000     .....1..... ....
 80209f0:	0000 0000 0116 0000 31cc 0802 0b64 2000     .........1..d.. 
	...
 8020a08:	0116 0000 31d0 0802 0b68 2000 0000 0000     .....1..h.. ....
 8020a18:	0000 0000 0116 0000 31d4 0802 0b6c 2000     .........1..l.. 
	...
 8020a30:	0116 0000 31d8 0802 0b70 2000 0000 0000     .....1..p.. ....
 8020a40:	0000 0000 0119 0000 31e0 0802 0bbc 2000     .........1..... 
	...
 8020a58:	0119 0000 31ec 0802 0bbe 2000 0000 0000     .....1..... ....
 8020a68:	0000 0000 0116 0000 31f8 0802 0908 2000     .........1..... 
	...
 8020a80:	0116 0000 3200 0802 090c 2000 0000 0000     .....2..... ....
 8020a90:	0000 0000 0116 0000 3208 0802 0910 2000     .........2..... 
	...
 8020aa8:	0116 0000 3210 0802 0914 2000 0000 0000     .....2..... ....
 8020ab8:	0000 0000 0116 0000 3218 0802 0918 2000     .........2..... 
	...
 8020ad0:	0080 0000 3220 0802 0000 0000 0000 0000     .... 2..........
 8020ae0:	0000 0000                                   ....

08020ae4 <__params_system>:
 8020ae4:	0081 0000 36f0 0802 0000 0000 0000 0000     .....6..........
 8020af4:	0000 0000 0028 0000 36f8 0802 9452 2000     ....(....6..R.. 
	...
 8020b0c:	0080 0000 3704 0802 0000 0000 0000 0000     .....7..........
 8020b1c:	0000 0000                                   ....

08020b20 <__params_usec>:
 8020b20:	0081 0000 3738 0802 0000 0000 0000 0000     ....87..........
 8020b30:	0000 0000 0008 0000 3740 0802 9489 2000     ........@7..... 
 8020b40:	dce1 0800 0000 0000 0080 0000 3748 0802     ............H7..
	...

08020b5c <__params_firmware>:
 8020b5c:	0081 0000 377c 0802 0000 0000 0000 0000     ....|7..........
 8020b6c:	0000 0000 006a 0000 3788 0802 4cac 0802     ....j....7...L..
	...
 8020b84:	0069 0000 3794 0802 4cb0 0802 0000 0000     i....7...L......
 8020b94:	0000 0000 0068 0000 37a0 0802 4ca8 0802     ....h....7...L..
	...
 8020bac:	0080 0000 37ac 0802 0000 0000 0000 0000     .....7..........
 8020bbc:	0000 0000                                   ....

08020bc0 <__logs_estimator>:
 8020bc0:	0081 0000 17ac 0802 0000 0000 0047 0000     ............G...
 8020bd0:	17b8 0802 0000 2000 0047 0000 17c0 0802     ....... G.......
 8020be0:	001c 2000 0080 0000 17c8 0802 0000 0000     ... ............

08020bf0 <__logs_ext_pos>:
 8020bf0:	0081 0000 1bb0 0802 0000 0000 0007 0000     ................
 8020c00:	1bb8 0802 68dc 2000 0007 0000 1bbc 0802     .....h. ........
 8020c10:	68e0 2000 0007 0000 1bc0 0802 68e4 2000     .h. .........h. 
 8020c20:	0080 0000 1bc4 0802 0000 0000               ............

08020c2c <__logs_locSrv>:
 8020c2c:	0081 0000 1bd4 0802 0000 0000 0027 0000     ............'...
 8020c3c:	1bdc 0802 68f0 2000 0027 0000 1be0 0802     .....h. '.......
 8020c4c:	68f4 2000 0027 0000 1be4 0802 68f8 2000     .h. '........h. 
 8020c5c:	0027 0000 1be8 0802 68fc 2000 0027 0000     '........h. '...
 8020c6c:	1bec 0802 6900 2000 0027 0000 1bf0 0802     .....i. '.......
 8020c7c:	6904 2000 0027 0000 1bf4 0802 6908 2000     .i. '........i. 
 8020c8c:	0080 0000 1bf8 0802 0000 0000               ............

08020c98 <__logs_locSrvZ>:
 8020c98:	0081 0000 1c04 0802 0000 0000 0022 0000     ............"...
 8020ca8:	1c0c 0802 6918 2000 0080 0000 1c14 0802     .....i. ........
 8020cb8:	0000 0000                                   ....

08020cbc <__logs_radio>:
 8020cbc:	0081 0000 1d74 0802 0000 0000 0021 0000     ....t.......!...
 8020ccc:	1d7c 0802 69b5 2000 0021 0000 1d84 0802     |....i. !.......
 8020cdc:	69b6 2000 0080 0000 1d90 0802 0000 0000     .i. ............

08020cec <__logs_memTst>:
 8020cec:	0081 0000 20f0 0802 0000 0000 0003 0000     ..... ..........
 8020cfc:	210c 0802 6af8 2000 0080 0000 2100 0802     .!...j. .....!..
 8020d0c:	0000 0000                                   ....

08020d10 <__logs_pm>:
 8020d10:	0081 0000 211c 0802 0000 0000 0027 0000     .....!......'...
 8020d20:	2120 0802 6b54 2000 0002 0000 2128 0802      !..Tk. ....(!..
 8020d30:	6b58 2000 0007 0000 2130 0802 6b60 2000     Xk. ....0!..`k. 
 8020d40:	0002 0000 2138 0802 6b64 2000 0007 0000     ....8!..dk. ....
 8020d50:	2144 0802 6b6c 2000 0007 0000 214c 0802     D!..lk. ....L!..
 8020d60:	6b89 2000 0024 0000 215c 0802 6b81 2000     .k. $...\!...k. 
 8020d70:	0021 0000 2164 0802 6b8d 2000 0080 0000     !...d!...k. ....
 8020d80:	2174 0802 0000 0000                         t!......

08020d88 <__logs_pid_attitude>:
 8020d88:	0081 0000 27dc 0802 0000 0000 0007 0000     .....'..........
 8020d98:	27ec 0802 044c 2000 0007 0000 27f8 0802     .'..L.. .....'..
 8020da8:	0450 2000 0007 0000 2804 0802 0454 2000     P.. .....(..T.. 
 8020db8:	0007 0000 2810 0802 0458 2000 0007 0000     .....(..X.. ....
 8020dc8:	281c 0802 04ac 2000 0007 0000 2828 0802     .(..... ....((..
 8020dd8:	04b0 2000 0007 0000 2834 0802 04b4 2000     ... ....4(..... 
 8020de8:	0007 0000 2840 0802 04b8 2000 0007 0000     ....@(..... ....
 8020df8:	284c 0802 050c 2000 0007 0000 2858 0802     L(..... ....X(..
 8020e08:	0510 2000 0007 0000 2864 0802 0514 2000     ... ....d(..... 
 8020e18:	0007 0000 2870 0802 0518 2000 0080 0000     ....p(..... ....
 8020e28:	287c 0802 0000 0000                         |(......

08020e30 <__logs_pid_rate>:
 8020e30:	0081 0000 2890 0802 0000 0000 0007 0000     .....(..........
 8020e40:	27ec 0802 032c 2000 0007 0000 27f8 0802     .'..,.. .....'..
 8020e50:	0330 2000 0007 0000 2804 0802 0334 2000     0.. .....(..4.. 
 8020e60:	0007 0000 2810 0802 0338 2000 0007 0000     .....(..8.. ....
 8020e70:	281c 0802 038c 2000 0007 0000 2828 0802     .(..... ....((..
 8020e80:	0390 2000 0007 0000 2834 0802 0394 2000     ... ....4(..... 
 8020e90:	0007 0000 2840 0802 0398 2000 0007 0000     ....@(..... ....
 8020ea0:	284c 0802 03ec 2000 0007 0000 2858 0802     L(..... ....X(..
 8020eb0:	03f0 2000 0007 0000 2864 0802 03f4 2000     ... ....d(..... 
 8020ec0:	0007 0000 2870 0802 03f8 2000 0080 0000     ....p(..... ....
 8020ed0:	289c 0802 0000 0000                         .(......

08020ed8 <__logs_ctrlINDI>:
 8020ed8:	0081 0000 2a58 0802 0000 0000 0007 0000     ....X*..........
 8020ee8:	2b50 0802 0570 2000 0007 0000 2b5c 0802     P+..p.. ....\+..
 8020ef8:	058c 2000 0007 0000 2b68 0802 0590 2000     ... ....h+..... 
 8020f08:	0007 0000 2b74 0802 0594 2000 0007 0000     ....t+..... ....
 8020f18:	2b7c 0802 7b00 2000 0007 0000 2b84 0802     |+...{. .....+..
 8020f28:	7b00 2000 0007 0000 2b8c 0802 7b00 2000     .{. .....+...{. 
 8020f38:	0007 0000 2b94 0802 0598 2000 0007 0000     .....+..... ....
 8020f48:	2ba0 0802 059c 2000 0007 0000 2bac 0802     .+..... .....+..
 8020f58:	05a0 2000 0007 0000 2bb8 0802 0580 2000     ... .....+..... 
 8020f68:	0007 0000 2bc0 0802 0584 2000 0007 0000     .....+..... ....
 8020f78:	2bc8 0802 0588 2000 0007 0000 2bd0 0802     .+..... .....+..
 8020f88:	0574 2000 0007 0000 2be0 0802 0578 2000     t.. .....+..x.. 
 8020f98:	0007 0000 2bf0 0802 057c 2000 0007 0000     .....+..|.. ....
 8020fa8:	2c00 0802 05a4 2000 0007 0000 2c0c 0802     .,..... .....,..
 8020fb8:	05a8 2000 0007 0000 2c18 0802 05ac 2000     ... .....,..... 
 8020fc8:	0007 0000 2c24 0802 05c8 2000 0007 0000     ....$,..... ....
 8020fd8:	2c2c 0802 05e8 2000 0007 0000 2c34 0802     ,,..... ....4,..
 8020fe8:	0608 2000 0007 0000 2c3c 0802 0628 2000     ... ....<,..(.. 
 8020ff8:	0007 0000 2c48 0802 0648 2000 0007 0000     ....H,..H.. ....
 8021008:	2c54 0802 0668 2000 0007 0000 2c60 0802     T,..h.. ....`,..
 8021018:	7af4 2000 0007 0000 2c64 0802 7af8 2000     .z. ....d,...z. 
 8021028:	0007 0000 2c68 0802 7afc 2000 0080 0000     ....h,...z. ....
 8021038:	2b40 0802 0000 0000                         @+......

08021040 <__logs_ctrlMel>:
 8021040:	0081 0000 2c6c 0802 0000 0000 0007 0000     ....l,..........
 8021050:	2d38 0802 072c 2000 0007 0000 2d44 0802     8-..,.. ....D-..
 8021060:	0730 2000 0007 0000 2d50 0802 0734 2000     0.. ....P-..4.. 
 8021070:	0007 0000 2d5c 0802 0738 2000 0007 0000     ....\-..8.. ....
 8021080:	2d64 0802 073c 2000 0007 0000 2d6c 0802     d-..<.. ....l-..
 8021090:	0740 2000 0007 0000 2d74 0802 0744 2000     @.. ....t-..D.. 
 80210a0:	0007 0000 2d7c 0802 0748 2000 0007 0000     ....|-..H.. ....
 80210b0:	2d84 0802 0720 2000 0007 0000 2d88 0802     .-.. .. .....-..
 80210c0:	0724 2000 0007 0000 2d8c 0802 0728 2000     $.. .....-..(.. 
 80210d0:	0007 0000 2d90 0802 06f8 2000 0007 0000     .....-..... ....
 80210e0:	2d98 0802 06fc 2000 0007 0000 2da0 0802     .-..... .....-..
 80210f0:	0700 2000 0080 0000 2d28 0802 0000 0000     ... ....(-......

08021100 <__logs_controller>:
 8021100:	0081 0000 2da8 0802 0000 0000 0007 0000     .....-..........
 8021110:	2db4 0802 7b30 2000 0007 0000 2dc0 0802     .-..0{. .....-..
 8021120:	7b34 2000 0007 0000 2dcc 0802 7b38 2000     4{. .....-..8{. 
 8021130:	0007 0000 2dd8 0802 7b3c 2000 0007 0000     .....-..<{. ....
 8021140:	2de0 0802 7b40 2000 0007 0000 2de8 0802     .-..@{. .....-..
 8021150:	7b44 2000 0007 0000 2df0 0802 7b48 2000     D{. .....-..H{. 
 8021160:	0007 0000 2df8 0802 7b4c 2000 0007 0000     .....-..L{. ....
 8021170:	2e00 0802 7b2c 2000 0007 0000 2e10 0802     ....,{. ........
 8021180:	7b10 2000 0007 0000 2e18 0802 7b14 2000     .{. .........{. 
 8021190:	0007 0000 2e20 0802 7b18 2000 0007 0000     .... ....{. ....
 80211a0:	2e24 0802 7b20 2000 0007 0000 2e30 0802     $... {. ....0...
 80211b0:	7b24 2000 0007 0000 2e3c 0802 7b28 2000     ${. ....<...({. 
 80211c0:	0080 0000 2e44 0802 0000 0000               ....D.......

080211cc <__logs_posCtrlIndi>:
 80211cc:	0081 0000 2e54 0802 0000 0000 0007 0000     ....T...........
 80211dc:	2eb0 0802 7b5c 2000 0007 0000 2ebc 0802     ....\{. ........
 80211ec:	7b60 2000 0007 0000 2ec8 0802 7b64 2000     `{. ........d{. 
 80211fc:	0007 0000 2ed4 0802 7b50 2000 0007 0000     ........P{. ....
 802120c:	2edc 0802 7b54 2000 0007 0000 2ee4 0802     ....T{. ........
 802121c:	7b58 2000 0007 0000 2eec 0802 7b68 2000     X{. ........h{. 
 802122c:	0007 0000 2ef8 0802 7b6c 2000 0007 0000     ........l{. ....
 802123c:	2f04 0802 7b70 2000 0007 0000 2f10 0802     ./..p{. ...../..
 802124c:	08cc 2000 0007 0000 2f1c 0802 08d0 2000     ... ...../..... 
 802125c:	0007 0000 2f28 0802 08d4 2000 0007 0000     ....(/..... ....
 802126c:	2f34 0802 08d8 2000 0007 0000 2f40 0802     4/..... ....@/..
 802127c:	08dc 2000 0007 0000 2f4c 0802 08e0 2000     ... ....L/..... 
 802128c:	0007 0000 2f58 0802 0890 2000 0007 0000     ....X/..... ....
 802129c:	2f64 0802 0894 2000 0007 0000 2f70 0802     d/..... ....p/..
 80212ac:	0898 2000 0007 0000 2f7c 0802 08a8 2000     ... ....|/..... 
 80212bc:	0007 0000 2f84 0802 08ac 2000 0007 0000     ...../..... ....
 80212cc:	2f8c 0802 08b0 2000 0007 0000 2f94 0802     ./..... ...../..
 80212dc:	08b4 2000 0007 0000 2f9c 0802 08b8 2000     ... ...../..... 
 80212ec:	0007 0000 2fa4 0802 08bc 2000 0007 0000     ...../..... ....
 80212fc:	2fac 0802 08c0 2000 0007 0000 2fb4 0802     ./..... ...../..
 802130c:	08c4 2000 0007 0000 2fbc 0802 08c8 2000     ... ...../..... 
 802131c:	0007 0000 2fc4 0802 089c 2000 0007 0000     ...../..... ....
 802132c:	2fd0 0802 08a0 2000 0007 0000 2fdc 0802     ./..... ...../..
 802133c:	08a4 2000 0007 0000 2fe8 0802 08f0 2000     ... ...../..... 
 802134c:	0007 0000 2ff4 0802 08f4 2000 0007 0000     ...../..... ....
 802135c:	3000 0802 08f8 2000 0007 0000 3008 0802     .0..... .....0..
 802136c:	08fc 2000 0007 0000 3010 0802 0900 2000     ... .....0..... 
 802137c:	0007 0000 301c 0802 0904 2000 0007 0000     .....0..... ....
 802138c:	302c 0802 08e4 2000 0007 0000 3034 0802     ,0..... ....40..
 802139c:	08e8 2000 0080 0000 2e9c 0802 0000 0000     ... ............

080213ac <__logs_posCtl>:
 80213ac:	0081 0000 3040 0802 0000 0000 0007 0000     ....@0..........
 80213bc:	3048 0802 0934 2000 0007 0000 3054 0802     H0..4.. ....T0..
 80213cc:	09a0 2000 0007 0000 3060 0802 0a0c 2000     ... ....`0..... 
 80213dc:	0007 0000 306c 0802 0a78 2000 0007 0000     ....l0..x.. ....
 80213ec:	3074 0802 0ae4 2000 0007 0000 307c 0802     t0..... ....|0..
 80213fc:	0b50 2000 0007 0000 3084 0802 7b7c 2000     P.. .....0..|{. 
 802140c:	0007 0000 308c 0802 7b80 2000 0007 0000     .....0...{. ....
 802141c:	3094 0802 7b74 2000 0007 0000 309c 0802     .0..t{. .....0..
 802142c:	7b78 2000 0007 0000 30a4 0802 0a9c 2000     x{. .....0..... 
 802143c:	0007 0000 30a8 0802 0aa0 2000 0007 0000     .....0..... ....
 802144c:	30ac 0802 0aa4 2000 0007 0000 30b0 0802     .0..... .....0..
 802145c:	0aa8 2000 0007 0000 30b4 0802 0b08 2000     ... .....0..... 
 802146c:	0007 0000 30b8 0802 0b0c 2000 0007 0000     .....0..... ....
 802147c:	30bc 0802 0b10 2000 0007 0000 30c0 0802     .0..... .....0..
 802148c:	0b14 2000 0007 0000 30c4 0802 0b74 2000     ... .....0..t.. 
 802149c:	0007 0000 30c8 0802 0b78 2000 0007 0000     .....0..x.. ....
 80214ac:	30cc 0802 0b7c 2000 0007 0000 30d0 0802     .0..|.. .....0..
 80214bc:	0b80 2000 0007 0000 30d4 0802 0958 2000     ... .....0..X.. 
 80214cc:	0007 0000 30d8 0802 095c 2000 0007 0000     .....0..\.. ....
 80214dc:	30dc 0802 0960 2000 0007 0000 30e0 0802     .0..`.. .....0..
 80214ec:	0964 2000 0007 0000 30e8 0802 09c4 2000     d.. .....0..... 
 80214fc:	0007 0000 30ec 0802 09c8 2000 0007 0000     .....0..... ....
 802150c:	30f0 0802 09cc 2000 0007 0000 30f4 0802     .0..... .....0..
 802151c:	09d0 2000 0007 0000 30fc 0802 0a30 2000     ... .....0..0.. 
 802152c:	0007 0000 3100 0802 0a34 2000 0007 0000     .....1..4.. ....
 802153c:	3104 0802 0a38 2000 0007 0000 3108 0802     .1..8.. .....1..
 802154c:	0a3c 2000 0080 0000 3110 0802 0000 0000     <.. .....1......

0802155c <eventTrigger_estTDOA>:
 802155c:	1668 0802 4b30 0802 0003 0000 4bc0 2000     h...0K.......K. 
 802156c:	0006 0000                                   ....

08021570 <eventTrigger_estPosition>:
 8021570:	1678 0802 4b48 0802 0001 0000 4bc8 2000     x...HK.......K. 
 8021580:	0001 0000                                   ....

08021584 <eventTrigger_estPose>:
 8021584:	1684 0802 0000 0000 0000 0000 0000 0000     ................
 8021594:	0000 0000                                   ....

08021598 <eventTrigger_estDistance>:
 8021598:	169c 0802 4b50 0802 0002 0000 4bcc 2000     ....PK.......K. 
 80215a8:	0005 0000                                   ....

080215ac <eventTrigger_estTOF>:
 80215ac:	16a8 0802 0000 0000 0000 0000 0000 0000     ................
 80215bc:	0000 0000                                   ....

080215c0 <eventTrigger_estAbsoluteHeight>:
 80215c0:	16b0 0802 0000 0000 0000 0000 0000 0000     ................
 80215d0:	0000 0000                                   ....

080215d4 <eventTrigger_estFlow>:
 80215d4:	16c4 0802 0000 0000 0000 0000 0000 0000     ................
 80215e4:	0000 0000                                   ....

080215e8 <eventTrigger_estYawError>:
 80215e8:	16d8 0802 4b60 0802 0001 0000 4bd4 2000     ....`K.......K. 
 80215f8:	0004 0000                                   ....

080215fc <eventTrigger_estSweepAngle>:
 80215fc:	1718 0802 4b68 0802 0005 0000 4bd8 2000     ....hK.......K. 
 802160c:	000b 0000                                   ....

08021610 <eventTrigger_estGyroscope>:
 8021610:	1728 0802 0000 0000 0000 0000 0000 0000     (...............
 8021620:	0000 0000                                   ....

08021624 <eventTrigger_estAcceleration>:
 8021624:	1738 0802 0000 0000 0000 0000 0000 0000     8...............
 8021634:	0000 0000                                   ....

08021638 <eventTrigger_estBarometer>:
 8021638:	1748 0802 0000 0000 0000 0000 0000 0000     H...............
 8021648:	0000 0000                                   ....
