
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  080117e0  080117e0  000217e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801260c  0801260c  00030a40  2**0
                  CONTENTS
  4 .ARM          00000008  0801260c  0801260c  0002260c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012614  08012614  00030a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012614  08012614  00022614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012618  08012618  00022618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  0801261c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmbss       00000698  20000380  0801299c  00030380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .nzds         00000028  20000a18  08013034  00030a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ccmram       00000000  10000000  10000000  00030a40  2**0
                  CONTENTS
 12 .bss          00007524  20000a40  20000a40  00030a40  2**2
                  ALLOC
 13 ._user_heap_stack 00000604  20007f64  20007f64  00030a40  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY
 15 .comment      00000043  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002a227  00000000  00000000  00030ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007154  00000000  00000000  0005acda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000021b0  00000000  00000000  00061e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000199a  00000000  00000000  00063fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000e88d  00000000  00000000  0006597a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002b055  00000000  00000000  00074207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e5d26  00000000  00000000  0009f25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  00009bc8  00000000  00000000  00184f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  0018eb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a40 	.word	0x20000a40
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080117c8 	.word	0x080117c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a44 	.word	0x20000a44
 80001cc:	080117c8 	.word	0x080117c8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83a 	bl	8000d00 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_f2lz>:
 8000c98:	ee07 0a90 	vmov	s15, r0
 8000c9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca4:	d401      	bmi.n	8000caa <__aeabi_f2lz+0x12>
 8000ca6:	f000 b80b 	b.w	8000cc0 <__aeabi_f2ulz>
 8000caa:	eef1 7a67 	vneg.f32	s15, s15
 8000cae:	b508      	push	{r3, lr}
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f000 f804 	bl	8000cc0 <__aeabi_f2ulz>
 8000cb8:	4240      	negs	r0, r0
 8000cba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <__aeabi_f2ulz>:
 8000cc0:	b5d0      	push	{r4, r6, r7, lr}
 8000cc2:	f7ff fc51 	bl	8000568 <__aeabi_f2d>
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <__aeabi_f2ulz+0x38>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4606      	mov	r6, r0
 8000ccc:	460f      	mov	r7, r1
 8000cce:	f7ff fca3 	bl	8000618 <__aeabi_dmul>
 8000cd2:	f000 f97b 	bl	8000fcc <__aeabi_d2uiz>
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	f7ff fc24 	bl	8000524 <__aeabi_ui2d>
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <__aeabi_f2ulz+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f7ff fc9a 	bl	8000618 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	4630      	mov	r0, r6
 8000cea:	4639      	mov	r1, r7
 8000cec:	f7ff fadc 	bl	80002a8 <__aeabi_dsub>
 8000cf0:	f000 f96c 	bl	8000fcc <__aeabi_d2uiz>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf8:	3df00000 	.word	0x3df00000
 8000cfc:	41f00000 	.word	0x41f00000

08000d00 <__udivmoddi4>:
 8000d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	9e08      	ldr	r6, [sp, #32]
 8000d06:	460d      	mov	r5, r1
 8000d08:	4604      	mov	r4, r0
 8000d0a:	460f      	mov	r7, r1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d14a      	bne.n	8000da6 <__udivmoddi4+0xa6>
 8000d10:	428a      	cmp	r2, r1
 8000d12:	4694      	mov	ip, r2
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0xe2>
 8000d16:	fab2 f382 	clz	r3, r2
 8000d1a:	b143      	cbz	r3, 8000d2e <__udivmoddi4+0x2e>
 8000d1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d20:	f1c3 0220 	rsb	r2, r3, #32
 8000d24:	409f      	lsls	r7, r3
 8000d26:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2a:	4317      	orrs	r7, r2
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d32:	fa1f f58c 	uxth.w	r5, ip
 8000d36:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d3a:	0c22      	lsrs	r2, r4, #16
 8000d3c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d44:	fb01 f005 	mul.w	r0, r1, r5
 8000d48:	4290      	cmp	r0, r2
 8000d4a:	d90a      	bls.n	8000d62 <__udivmoddi4+0x62>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d54:	f080 811c 	bcs.w	8000f90 <__udivmoddi4+0x290>
 8000d58:	4290      	cmp	r0, r2
 8000d5a:	f240 8119 	bls.w	8000f90 <__udivmoddi4+0x290>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4462      	add	r2, ip
 8000d62:	1a12      	subs	r2, r2, r0
 8000d64:	b2a4      	uxth	r4, r4
 8000d66:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d6a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d72:	fb00 f505 	mul.w	r5, r0, r5
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	d90a      	bls.n	8000d90 <__udivmoddi4+0x90>
 8000d7a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d82:	f080 8107 	bcs.w	8000f94 <__udivmoddi4+0x294>
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	f240 8104 	bls.w	8000f94 <__udivmoddi4+0x294>
 8000d8c:	4464      	add	r4, ip
 8000d8e:	3802      	subs	r0, #2
 8000d90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d94:	1b64      	subs	r4, r4, r5
 8000d96:	2100      	movs	r1, #0
 8000d98:	b11e      	cbz	r6, 8000da2 <__udivmoddi4+0xa2>
 8000d9a:	40dc      	lsrs	r4, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e9c6 4300 	strd	r4, r3, [r6]
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0xbc>
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	f000 80ed 	beq.w	8000f8a <__udivmoddi4+0x28a>
 8000db0:	2100      	movs	r1, #0
 8000db2:	e9c6 0500 	strd	r0, r5, [r6]
 8000db6:	4608      	mov	r0, r1
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	fab3 f183 	clz	r1, r3
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	d149      	bne.n	8000e58 <__udivmoddi4+0x158>
 8000dc4:	42ab      	cmp	r3, r5
 8000dc6:	d302      	bcc.n	8000dce <__udivmoddi4+0xce>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	f200 80f8 	bhi.w	8000fbe <__udivmoddi4+0x2be>
 8000dce:	1a84      	subs	r4, r0, r2
 8000dd0:	eb65 0203 	sbc.w	r2, r5, r3
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d0e2      	beq.n	8000da2 <__udivmoddi4+0xa2>
 8000ddc:	e9c6 4700 	strd	r4, r7, [r6]
 8000de0:	e7df      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000de2:	b902      	cbnz	r2, 8000de6 <__udivmoddi4+0xe6>
 8000de4:	deff      	udf	#255	; 0xff
 8000de6:	fab2 f382 	clz	r3, r2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8090 	bne.w	8000f10 <__udivmoddi4+0x210>
 8000df0:	1a8a      	subs	r2, r1, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e00:	fb07 2015 	mls	r0, r7, r5, r2
 8000e04:	0c22      	lsrs	r2, r4, #16
 8000e06:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e0a:	fb0e f005 	mul.w	r0, lr, r5
 8000e0e:	4290      	cmp	r0, r2
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x124>
 8000e12:	eb1c 0202 	adds.w	r2, ip, r2
 8000e16:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x122>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2b8>
 8000e22:	4645      	mov	r5, r8
 8000e24:	1a12      	subs	r2, r2, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e2c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e30:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x14e>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x14c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2c2>
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e56:	e79f      	b.n	8000d98 <__udivmoddi4+0x98>
 8000e58:	f1c1 0720 	rsb	r7, r1, #32
 8000e5c:	408b      	lsls	r3, r1
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e6e:	40fd      	lsrs	r5, r7
 8000e70:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e74:	4323      	orrs	r3, r4
 8000e76:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e82:	0c1c      	lsrs	r4, r3, #16
 8000e84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e88:	fb08 f50e 	mul.w	r5, r8, lr
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e92:	fa00 f001 	lsl.w	r0, r0, r1
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b0>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2b4>
 8000ea4:	42a5      	cmp	r5, r4
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2b4>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4464      	add	r4, ip
 8000eb0:	1b64      	subs	r4, r4, r5
 8000eb2:	b29d      	uxth	r5, r3
 8000eb4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ebc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1da>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2ac>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2ac>
 8000ed6:	3b02      	subs	r3, #2
 8000ed8:	4464      	add	r4, ip
 8000eda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ede:	fba3 9502 	umull	r9, r5, r3, r2
 8000ee2:	eba4 040e 	sub.w	r4, r4, lr
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46ae      	mov	lr, r5
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x29c>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x298>
 8000ef0:	b156      	cbz	r6, 8000f08 <__udivmoddi4+0x208>
 8000ef2:	ebb0 0208 	subs.w	r2, r0, r8
 8000ef6:	eb64 040e 	sbc.w	r4, r4, lr
 8000efa:	fa04 f707 	lsl.w	r7, r4, r7
 8000efe:	40ca      	lsrs	r2, r1
 8000f00:	40cc      	lsrs	r4, r1
 8000f02:	4317      	orrs	r7, r2
 8000f04:	e9c6 7400 	strd	r7, r4, [r6]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	f1c3 0120 	rsb	r1, r3, #32
 8000f14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f18:	fa20 f201 	lsr.w	r2, r0, r1
 8000f1c:	fa25 f101 	lsr.w	r1, r5, r1
 8000f20:	409d      	lsls	r5, r3
 8000f22:	432a      	orrs	r2, r5
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f30:	fb07 1510 	mls	r5, r7, r0, r1
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f3a:	fb00 f50e 	mul.w	r5, r0, lr
 8000f3e:	428d      	cmp	r5, r1
 8000f40:	fa04 f403 	lsl.w	r4, r4, r3
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x258>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f50:	428d      	cmp	r5, r1
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b0>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4461      	add	r1, ip
 8000f58:	1b49      	subs	r1, r1, r5
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f60:	fb07 1115 	mls	r1, r7, r5, r1
 8000f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f68:	fb05 f10e 	mul.w	r1, r5, lr
 8000f6c:	4291      	cmp	r1, r2
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x282>
 8000f70:	eb1c 0202 	adds.w	r2, ip, r2
 8000f74:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2a8>
 8000f7e:	3d02      	subs	r5, #2
 8000f80:	4462      	add	r2, ip
 8000f82:	1a52      	subs	r2, r2, r1
 8000f84:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0xfc>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xa2>
 8000f90:	4639      	mov	r1, r7
 8000f92:	e6e6      	b.n	8000d62 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e6fb      	b.n	8000d90 <__udivmoddi4+0x90>
 8000f98:	4548      	cmp	r0, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f0>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f0>
 8000fa8:	4645      	mov	r5, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x282>
 8000fac:	462b      	mov	r3, r5
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1da>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x258>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b0>
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	4462      	add	r2, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x124>
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	e70a      	b.n	8000dd8 <__udivmoddi4+0xd8>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x14e>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_d2uiz>:
 8000fcc:	004a      	lsls	r2, r1, #1
 8000fce:	d211      	bcs.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fd4:	d211      	bcs.n	8000ffa <__aeabi_d2uiz+0x2e>
 8000fd6:	d50d      	bpl.n	8000ff4 <__aeabi_d2uiz+0x28>
 8000fd8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fdc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fe0:	d40e      	bmi.n	8001000 <__aeabi_d2uiz+0x34>
 8000fe2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fee:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff2:	4770      	bx	lr
 8000ff4:	f04f 0000 	mov.w	r0, #0
 8000ff8:	4770      	bx	lr
 8000ffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ffe:	d102      	bne.n	8001006 <__aeabi_d2uiz+0x3a>
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr

0800100c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f023 0210 	bic.w	r2, r3, #16
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b02      	cmp	r3, #2
 800108a:	d101      	bne.n	8001090 <LL_SPI_IsActiveFlag_TXE+0x18>
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	330c      	adds	r3, #12
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	330c      	adds	r3, #12
 80010ca:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4013      	ands	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800

08001110 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 800111a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4013      	ands	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800

08001140 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	619a      	str	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00e fc70 	bl	800fa70 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80011a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011a4:	f7ff ffb4 	bl	8001110 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ff99 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80011ae:	2004      	movs	r0, #4
 80011b0:	f7ff ff96 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80011b4:	23e0      	movs	r3, #224	; 0xe0
 80011b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011b8:	2302      	movs	r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011c8:	2305      	movs	r3, #5
 80011ca:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80011d2:	f006 fb10 	bl	80077f6 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80011da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80011de:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80011f2:	2310      	movs	r3, #16
 80011f4:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80011f6:	2300      	movs	r3, #0
 80011f8:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80011fe:	230a      	movs	r3, #10
 8001200:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4619      	mov	r1, r3
 8001208:	4818      	ldr	r0, [pc, #96]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800120a:	f006 fb98 	bl	800793e <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800120e:	2100      	movs	r1, #0
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001212:	f7ff ff0b 	bl	800102c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 8001216:	2110      	movs	r1, #16
 8001218:	4813      	ldr	r0, [pc, #76]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800121a:	f7ff ff9f 	bl	800115c <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 800121e:	2310      	movs	r3, #16
 8001220:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001222:	2301      	movs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001238:	f006 fadd 	bl	80077f6 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 800123c:	2310      	movs	r3, #16
 800123e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 800124e:	f006 fad2 	bl	80077f6 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001254:	f7ff feda 	bl	800100c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 8001258:	2110      	movs	r1, #16
 800125a:	4803      	ldr	r0, [pc, #12]	; (8001268 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800125c:	f7ff ff70 	bl	8001140 <LL_GPIO_SetOutputPin>
}
 8001260:	bf00      	nop
 8001262:	3740      	adds	r7, #64	; 0x40
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40020000 	.word	0x40020000
 800126c:	40013000 	.word	0x40013000
 8001270:	40020800 	.word	0x40020800

08001274 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800127e:	bf00      	nop
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <SPI1_SendByte+0x40>)
 8001282:	f7ff fef9 	bl	8001078 <LL_SPI_IsActiveFlag_TXE>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f9      	beq.n	8001280 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4619      	mov	r1, r3
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <SPI1_SendByte+0x40>)
 8001292:	f7ff ff12 	bl	80010ba <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8001296:	bf00      	nop
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <SPI1_SendByte+0x40>)
 800129a:	f7ff feda 	bl	8001052 <LL_SPI_IsActiveFlag_RXNE>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f9      	beq.n	8001298 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <SPI1_SendByte+0x40>)
 80012a6:	f7ff fefa 	bl	800109e <LL_SPI_ReceiveData8>
 80012aa:	4603      	mov	r3, r0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40013000 	.word	0x40013000

080012b8 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 80012c2:	2110      	movs	r1, #16
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <ICM20602_Readbyte+0x3c>)
 80012c6:	f7ff ff49 	bl	800115c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ffce 	bl	8001274 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff ffcb 	bl	8001274 <SPI1_SendByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80012e2:	2110      	movs	r1, #16
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <ICM20602_Readbyte+0x3c>)
 80012e6:	f7ff ff2b 	bl	8001140 <LL_GPIO_SetOutputPin>
	
	return val;
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40020000 	.word	0x40020000

080012f8 <ICM20602_Writebyte>:
	}
	CHIP_DESELECT(ICM20602);
}

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001308:	2110      	movs	r1, #16
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <ICM20602_Writebyte+0x40>)
 800130c:	f7ff ff26 	bl	800115c <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ffab 	bl	8001274 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ffa7 	bl	8001274 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001326:	2110      	movs	r1, #16
 8001328:	4803      	ldr	r0, [pc, #12]	; (8001338 <ICM20602_Writebyte+0x40>)
 800132a:	f7ff ff09 	bl	8001140 <LL_GPIO_SetOutputPin>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020000 	.word	0x40020000

0800133c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001358:	f7ff ff10 	bl	800117c <ICM20602_GPIO_SPI_Initialization>
	
	DEBUG_PRINT("Checking ICM20602...");
 800135c:	4939      	ldr	r1, [pc, #228]	; (8001444 <ICM20602_Initialization+0x108>)
 800135e:	483a      	ldr	r0, [pc, #232]	; (8001448 <ICM20602_Initialization+0x10c>)
 8001360:	f001 f91e 	bl	80025a0 <eprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001364:	2075      	movs	r0, #117	; 0x75
 8001366:	f7ff ffa7 	bl	80012b8 <ICM20602_Readbyte>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b12      	cmp	r3, #18
 8001372:	d106      	bne.n	8001382 <ICM20602_Initialization+0x46>
	{
		DEBUG_PRINT("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	461a      	mov	r2, r3
 8001378:	4934      	ldr	r1, [pc, #208]	; (800144c <ICM20602_Initialization+0x110>)
 800137a:	4833      	ldr	r0, [pc, #204]	; (8001448 <ICM20602_Initialization+0x10c>)
 800137c:	f001 f910 	bl	80025a0 <eprintf>
 8001380:	e012      	b.n	80013a8 <ICM20602_Initialization+0x6c>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b12      	cmp	r3, #18
 8001386:	d00f      	beq.n	80013a8 <ICM20602_Initialization+0x6c>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001388:	2075      	movs	r0, #117	; 0x75
 800138a:	f7ff ff95 	bl	80012b8 <ICM20602_Readbyte>
 800138e:	4603      	mov	r3, r0
 8001390:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	2b12      	cmp	r3, #18
 8001396:	d007      	beq.n	80013a8 <ICM20602_Initialization+0x6c>
			DEBUG_PRINT( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	2312      	movs	r3, #18
 800139c:	492c      	ldr	r1, [pc, #176]	; (8001450 <ICM20602_Initialization+0x114>)
 800139e:	482a      	ldr	r0, [pc, #168]	; (8001448 <ICM20602_Initialization+0x10c>)
 80013a0:	f001 f8fe 	bl	80025a0 <eprintf>
			return 1; //ERROR
 80013a4:	2301      	movs	r3, #1
 80013a6:	e048      	b.n	800143a <ICM20602_Initialization+0xfe>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	206b      	movs	r0, #107	; 0x6b
 80013ac:	f7ff ffa4 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 80013b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b4:	f001 fd8e 	bl	8002ed4 <delay_us>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80013b8:	2101      	movs	r1, #1
 80013ba:	206b      	movs	r0, #107	; 0x6b
 80013bc:	f7ff ff9c 	bl	80012f8 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	delay_us(50000);
 80013c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c4:	f001 fd86 	bl	8002ed4 <delay_us>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80013c8:	2100      	movs	r1, #0
 80013ca:	206c      	movs	r0, #108	; 0x6c
 80013cc:	f7ff ff94 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 80013d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013d4:	f001 fd7e 	bl	8002ed4 <delay_us>

	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80013d8:	2100      	movs	r1, #0
 80013da:	2019      	movs	r0, #25
 80013dc:	f7ff ff8c 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 80013e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013e4:	f001 fd76 	bl	8002ed4 <delay_us>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80013e8:	2105      	movs	r1, #5
 80013ea:	201a      	movs	r0, #26
 80013ec:	f7ff ff84 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 80013f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013f4:	f001 fd6e 	bl	8002ed4 <delay_us>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80013f8:	2118      	movs	r1, #24
 80013fa:	201b      	movs	r0, #27
 80013fc:	f7ff ff7c 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 8001400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001404:	f001 fd66 	bl	8002ed4 <delay_us>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001408:	2118      	movs	r1, #24
 800140a:	201c      	movs	r0, #28
 800140c:	f7ff ff74 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 8001410:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001414:	f001 fd5e 	bl	8002ed4 <delay_us>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001418:	2103      	movs	r1, #3
 800141a:	201d      	movs	r0, #29
 800141c:	f7ff ff6c 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 8001420:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001424:	f001 fd56 	bl	8002ed4 <delay_us>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001428:	2101      	movs	r1, #1
 800142a:	2038      	movs	r0, #56	; 0x38
 800142c:	f7ff ff64 	bl	80012f8 <ICM20602_Writebyte>
	delay_us(50000);
 8001430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001434:	f001 fd4e 	bl	8002ed4 <delay_us>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	080117e0 	.word	0x080117e0
 8001448:	08001d11 	.word	0x08001d11
 800144c:	080117f8 	.word	0x080117f8
 8001450:	0801181c 	.word	0x0801181c

08001454 <branch_to_bootloader>:
 * Based from the micropython machine_bootloader function.
 * 
 * @param r0 The register to utilize
 * @param bl_addr The bootloader address to jump to
 */
static void branch_to_bootloader(uint32_t r0, uint32_t bl_addr){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
    __asm volatile (
 800145e:	680a      	ldr	r2, [r1, #0]
 8001460:	f382 8808 	msr	MSP, r2
 8001464:	684a      	ldr	r2, [r1, #4]
 8001466:	4710      	bx	r2
        "msr msp, r2\n"         // get stack pointer
        "ldr r2, [r1, #4]\n"    // get address of destination
        "bx r2\n"               // branch to bootloader
        );
    //unreachable code
    while(1);
 8001468:	e7fe      	b.n	8001468 <branch_to_bootloader+0x14>
	...

0800146c <check_enter_bootloader>:
}

void check_enter_bootloader(){
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
    uint64_t bl_state = *BL_STATE_PTR;
 8001472:	491d      	ldr	r1, [pc, #116]	; (80014e8 <check_enter_bootloader+0x7c>)
 8001474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001478:	e9c7 0100 	strd	r0, r1, [r7]
    //set to invalid for next boot
    *BL_STATE_PTR = BL_STATE_INVALID;
 800147c:	4c1a      	ldr	r4, [pc, #104]	; (80014e8 <check_enter_bootloader+0x7c>)
 800147e:	f04f 0000 	mov.w	r0, #0
 8001482:	f04f 0100 	mov.w	r1, #0
 8001486:	e9c4 0100 	strd	r0, r1, [r4]

    if(BL_STATE_GET_KEY(bl_state) == BL_STATE_KEY && (RCC->CSR & RCC_CSR_SFTRSTF)){
 800148a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800148e:	f04f 0000 	mov.w	r0, #0
 8001492:	f04f 0100 	mov.w	r1, #0
 8001496:	0028      	movs	r0, r5
 8001498:	2100      	movs	r1, #0
 800149a:	f3c0 020b 	ubfx	r2, r0, #0, #12
 800149e:	2300      	movs	r3, #0
 80014a0:	4912      	ldr	r1, [pc, #72]	; (80014ec <check_enter_bootloader+0x80>)
 80014a2:	4411      	add	r1, r2
 80014a4:	430b      	orrs	r3, r1
 80014a6:	d11a      	bne.n	80014de <check_enter_bootloader+0x72>
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <check_enter_bootloader+0x84>)
 80014aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d014      	beq.n	80014de <check_enter_bootloader+0x72>

        //remap memory to system flash
//        SYSCFG_MemoryRemapConfig(SYSCFG_MemoryRemap_SystemFlash);
    		//위 함수를 아래 함수로 대체
        assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap_SystemFlash));
        SYSCFG->MEMRMP = SYSCFG_MemoryRemap_SystemFlash;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <check_enter_bootloader+0x88>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

        branch_to_bootloader(BL_STATE_GET_REG(bl_state), BL_STATE_GET_ADDR(bl_state));
 80014ba:	683c      	ldr	r4, [r7, #0]
 80014bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	000a      	movs	r2, r1
 80014ca:	2300      	movs	r3, #0
 80014cc:	4613      	mov	r3, r2
 80014ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80014d2:	f023 030f 	bic.w	r3, r3, #15
 80014d6:	4619      	mov	r1, r3
 80014d8:	4620      	mov	r0, r4
 80014da:	f7ff ffbb 	bl	8001454 <branch_to_bootloader>
    }
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2001c000 	.word	0x2001c000
 80014ec:	fffffa5b 	.word	0xfffffa5b
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800

080014f8 <ledSetForce>:
    ledSet(i, ledLastState[i]);
  }
}

static void ledSetForce(led_t led, bool value)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
  if (led > LED_NUM)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b06      	cmp	r3, #6
 800150c:	d832      	bhi.n	8001574 <ledSetForce+0x7c>
  {
    return;
  }

  if (led_polarity[led] == LED_POL_NEG)
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4a1a      	ldr	r2, [pc, #104]	; (800157c <ledSetForce+0x84>)
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d10d      	bne.n	8001536 <ledSetForce+0x3e>
  {
    value = !value;
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf14      	ite	ne
 8001520:	2301      	movne	r3, #1
 8001522:	2300      	moveq	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f083 0301 	eor.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	71bb      	strb	r3, [r7, #6]
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	71bb      	strb	r3, [r7, #6]
    syslinkSendPacket(&slp);
  }
  else
  {
  */
    if (value)
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00d      	beq.n	8001558 <ledSetForce+0x60>
    {
      HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_SET);
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <ledSetForce+0x88>)
 8001540:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <ledSetForce+0x8c>)
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	b29b      	uxth	r3, r3
 800154e:	2201      	movs	r2, #1
 8001550:	4619      	mov	r1, r3
 8001552:	f002 fe97 	bl	8004284 <HAL_GPIO_WritePin>
 8001556:	e00e      	b.n	8001576 <ledSetForce+0x7e>
    }
    else
    {
        HAL_GPIO_WritePin(led_port[led], led_pin[led], GPIO_PIN_RESET);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <ledSetForce+0x88>)
 800155c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <ledSetForce+0x8c>)
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	b29b      	uxth	r3, r3
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	f002 fe89 	bl	8004284 <HAL_GPIO_WritePin>
 8001572:	e000      	b.n	8001576 <ledSetForce+0x7e>
    return;
 8001574:	bf00      	nop
    }

//  }

}
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000030 	.word	0x20000030
 8001580:	20000000 	.word	0x20000000
 8001584:	20000018 	.word	0x20000018

08001588 <ledInit>:
    ledSetSwitch(LED_LEDSEQ);
  }
}

void ledInit(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
  int i;

  if(isInit)
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <ledInit+0xd0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d15b      	bne.n	800164e <ledInit+0xc6>
    return;

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b2c      	ldr	r3, [pc, #176]	; (800165c <ledInit+0xd4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a2b      	ldr	r2, [pc, #172]	; (800165c <ledInit+0xd4>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <ledInit+0xd4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <ledInit+0xd4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a24      	ldr	r2, [pc, #144]	; (800165c <ledInit+0xd4>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <ledInit+0xd4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  for (i = 0; i < LED_NUM; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e02a      	b.n	800163a <ledInit+0xb2>
  {
    //Initialize the LED pins as an output
	HAL_GPIO_WritePin(led_port[i], led_pin[i], GPIO_PIN_RESET);
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <ledInit+0xd8>)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <ledInit+0xdc>)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	f002 fe43 	bl	8004284 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = led_pin[i];
 80015fe:	4a19      	ldr	r2, [pc, #100]	; (8001664 <ledInit+0xdc>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800160c:	2301      	movs	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(led_port[i], &GPIO_InitStruct);
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <ledInit+0xd8>)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161c:	f107 0208 	add.w	r2, r7, #8
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fc92 	bl	8003f4c <HAL_GPIO_Init>
    //Turn off the LED:s
    ledSet(i, 0);
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f81c 	bl	800166c <ledSet>
  for (i = 0; i < LED_NUM; i++)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2b05      	cmp	r3, #5
 800163e:	ddd1      	ble.n	80015e4 <ledInit+0x5c>
  }

  ledSwitchState = LED_LEDSEQ;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <ledInit+0xe0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
  isInit = true;
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <ledInit+0xd0>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e000      	b.n	8001650 <ledInit+0xc8>
    return;
 800164e:	bf00      	nop
}
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000a5c 	.word	0x20000a5c
 800165c:	40023800 	.word	0x40023800
 8001660:	20000000 	.word	0x20000000
 8001664:	20000018 	.word	0x20000018
 8001668:	20000a66 	.word	0x20000a66

0800166c <ledSet>:
    //Turn on the LED:s
    ledSet(i, 1);
  }
}
void ledSet(led_t led, bool value)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
  ASSERT(led < LED_NUM);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b05      	cmp	r3, #5
 8001680:	d904      	bls.n	800168c <ledSet+0x20>
 8001682:	22e4      	movs	r2, #228	; 0xe4
 8001684:	490a      	ldr	r1, [pc, #40]	; (80016b0 <ledSet+0x44>)
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <ledSet+0x48>)
 8001688:	f000 fa62 	bl	8001b50 <assertFail>
  if (ledSwitchState == LED_LEDSEQ)
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <ledSet+0x4c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <ledSet+0x34>
  {
    ledSetForce(led, value);
 8001694:	79ba      	ldrb	r2, [r7, #6]
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff2c 	bl	80014f8 <ledSetForce>
  }

  ledLastState[led] = value;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	79b9      	ldrb	r1, [r7, #6]
 80016a4:	4a05      	ldr	r2, [pc, #20]	; (80016bc <ledSet+0x50>)
 80016a6:	54d1      	strb	r1, [r2, r3]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	08011848 	.word	0x08011848
 80016b4:	08011864 	.word	0x08011864
 80016b8:	20000a66 	.word	0x20000a66
 80016bc:	20000a60 	.word	0x20000a60

080016c0 <ledShowFaultPattern>:

void ledShowFaultPattern(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  ledSet(LED_GREEN_L, 0);
 80016c4:	2100      	movs	r1, #0
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff ffd0 	bl	800166c <ledSet>
  ledSet(LED_GREEN_R, 0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	2003      	movs	r0, #3
 80016d0:	f7ff ffcc 	bl	800166c <ledSet>
  ledSet(LED_RED_L, 1);
 80016d4:	2101      	movs	r1, #1
 80016d6:	2002      	movs	r0, #2
 80016d8:	f7ff ffc8 	bl	800166c <ledSet>
  ledSet(LED_RED_R, 1);
 80016dc:	2101      	movs	r1, #1
 80016de:	2004      	movs	r0, #4
 80016e0:	f7ff ffc4 	bl	800166c <ledSet>
  ledSet(LED_BLUE_L, 0);
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ffc0 	bl	800166c <ledSet>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <systemLaunch>:
/* Private functions */
static void systemTask(void *arg);

/* Public functions */
void systemLaunch(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 80016f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <systemLaunch+0x28>)
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <systemLaunch+0x2c>)
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	4905      	ldr	r1, [pc, #20]	; (8001720 <systemLaunch+0x30>)
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <systemLaunch+0x34>)
 800170e:	f00a fccb 	bl	800c0a8 <xTaskCreateStatic>
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000380 	.word	0x20000380
 800171c:	20000a70 	.word	0x20000a70
 8001720:	0801188c 	.word	0x0801188c
 8001724:	08001729 	.word	0x08001729

08001728 <systemTask>:


/* Private functions implementation */

void systemTask(void *arg)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  bool pass = true;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]

  uint32_t ld = SysTick->LOAD;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <systemTask+0x84>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60bb      	str	r3, [r7, #8]
  time1 = DWT->CYCCNT;
 800173a:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <systemTask+0x88>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <systemTask+0x8c>)
 8001740:	6013      	str	r3, [r2, #0]
  delay_us(10);	// 1ms
 8001742:	200a      	movs	r0, #10
 8001744:	f001 fbc6 	bl	8002ed4 <delay_us>
  time2 = DWT->CYCCNT;
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <systemTask+0x88>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <systemTask+0x90>)
 800174e:	6013      	str	r3, [r2, #0]
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(time2-time1)/CLOCK_PER_USEC);
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <systemTask+0x90>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <systemTask+0x8c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001762:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80017bc <systemTask+0x94>
 8001766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800176a:	ee16 0a90 	vmov	r0, s13
 800176e:	f7fe fefb 	bl	8000568 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4912      	ldr	r1, [pc, #72]	; (80017c0 <systemTask+0x98>)
 8001778:	4812      	ldr	r0, [pc, #72]	; (80017c4 <systemTask+0x9c>)
 800177a:	f000 ff11 	bl	80025a0 <eprintf>


  ledInit();
 800177e:	f7ff ff03 	bl	8001588 <ledInit>
  ledSet(CHG_LED, SET);
 8001782:	2101      	movs	r1, #1
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff ff71 	bl	800166c <ledSet>


#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  queueMonitorInit();
 800178a:	f000 ff1f 	bl	80025cc <queueMonitorInit>
#endif

#ifdef CONFIG_DEBUG_QUEUE_MONITOR
  uartInit();
 800178e:	f000 fa25 	bl	8001bdc <uartInit>
  uartDmaInit();
 8001792:	f000 fa41 	bl	8001c18 <uartDmaInit>
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
  //  uartSendDataDmaBlocking(36, (uint8_t *)" Testing UART1 DMA and it is working\n");
#endif

  ICM20602_Initialization();	// 여기서 일정 시간 지연이 있어야 STM32 VCP 포트가 활성화됨 원인파악중
 8001796:	f7ff fdd1 	bl	800133c <ICM20602_Initialization>

  passthroughInit();	// Create passthrough task
 800179a:	f000 f85f 	bl	800185c <passthroughInit>

  systemInit();
 800179e:	f000 f835 	bl	800180c <systemInit>
//  commInit();
//  commanderInit();

}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	e000e010 	.word	0xe000e010
 80017b0:	e0001000 	.word	0xe0001000
 80017b4:	20000a68 	.word	0x20000a68
 80017b8:	20000a6c 	.word	0x20000a6c
 80017bc:	42900000 	.word	0x42900000
 80017c0:	08011894 	.word	0x08011894
 80017c4:	08001d11 	.word	0x08001d11

080017c8 <systemWaitStart>:



void systemWaitStart(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  //This permits to guarantee that the system task is initialized before other
  //tasks waits for the start event.
  while(!isInit)
 80017cc:	e002      	b.n	80017d4 <systemWaitStart+0xc>
    vTaskDelay(2);
 80017ce:	2002      	movs	r0, #2
 80017d0:	f00a fe26 	bl	800c420 <vTaskDelay>
  while(!isInit)
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <systemWaitStart+0x3c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f5      	bne.n	80017ce <systemWaitStart+0x6>

  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <systemWaitStart+0x40>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ea:	4618      	mov	r0, r3
 80017ec:	f00a f93c 	bl	800ba68 <xQueueSemaphoreTake>
  xSemaphoreGive(canStartMutex);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <systemWaitStart+0x40>)
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	2100      	movs	r1, #0
 80017fa:	f009 fe2f 	bl	800b45c <xQueueGenericSend>
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000a67 	.word	0x20000a67
 8001808:	20000e70 	.word	0x20000e70

0800180c <systemInit>:



// This must be the first module to be initialized!
void systemInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  if(isInit)
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <systemInit+0x3c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d115      	bne.n	8001844 <systemInit+0x38>
    return;

  canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <systemInit+0x40>)
 800181a:	2001      	movs	r0, #1
 800181c:	f009 fe03 	bl	800b426 <xQueueCreateMutexStatic>
 8001820:	4603      	mov	r3, r0
 8001822:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <systemInit+0x44>)
 8001824:	6013      	str	r3, [r2, #0]
  xSemaphoreTake(canStartMutex, portMAX_DELAY);
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <systemInit+0x44>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800182e:	4618      	mov	r0, r3
 8001830:	f00a f91a 	bl	800ba68 <xQueueSemaphoreTake>
  /* Initialized here so that DEBUG_PRINT (buffered) can be used early */
//  debugInit();
//  crtpInit();
//  consoleInit();

  DEBUG_PRINT("----------------------------\n");
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <systemInit+0x48>)
 8001836:	4808      	ldr	r0, [pc, #32]	; (8001858 <systemInit+0x4c>)
 8001838:	f000 feb2 	bl	80025a0 <eprintf>

#ifdef CONFIG_APP_ENABLE
  appInit();
#endif
*/
  isInit = true;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <systemInit+0x3c>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e000      	b.n	8001846 <systemInit+0x3a>
    return;
 8001844:	bf00      	nop
}
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000a67 	.word	0x20000a67
 800184c:	20000e74 	.word	0x20000e74
 8001850:	20000e70 	.word	0x20000e70
 8001854:	080118ac 	.word	0x080118ac
 8001858:	08001d11 	.word	0x08001d11

0800185c <passthroughInit>:
static void blHeliConfigHandshake();

void passthroughTask(void *param);

void passthroughInit()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af04      	add	r7, sp, #16
  if(isInit)
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <passthroughInit+0x8c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d13b      	bne.n	80018e2 <passthroughInit+0x86>
    return;

  ptRxQueue = STATIC_MEM_QUEUE_CREATE(ptRxQueue);
 800186a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800186e:	4618      	mov	r0, r3
 8001870:	2301      	movs	r3, #1
 8001872:	4619      	mov	r1, r3
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <passthroughInit+0x90>)
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <passthroughInit+0x94>)
 800187c:	f009 fd1e 	bl	800b2bc <xQueueGenericCreateStatic>
 8001880:	4603      	mov	r3, r0
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <passthroughInit+0x98>)
 8001884:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <passthroughInit+0x98>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <passthroughInit+0x9c>)
 800188c:	491b      	ldr	r1, [pc, #108]	; (80018fc <passthroughInit+0xa0>)
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fee4 	bl	800265c <qmRegisterQueue>
  ptTxQueue = STATIC_MEM_QUEUE_CREATE(ptTxQueue);
 8001894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001898:	4618      	mov	r0, r3
 800189a:	2301      	movs	r3, #1
 800189c:	4619      	mov	r1, r3
 800189e:	2300      	movs	r3, #0
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <passthroughInit+0xa4>)
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <passthroughInit+0xa8>)
 80018a6:	f009 fd09 	bl	800b2bc <xQueueGenericCreateStatic>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <passthroughInit+0xac>)
 80018ae:	6013      	str	r3, [r2, #0]
  DEBUG_QUEUE_MONITOR_REGISTER(ptRxQueue);
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <passthroughInit+0x98>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a10      	ldr	r2, [pc, #64]	; (80018f8 <passthroughInit+0x9c>)
 80018b6:	4911      	ldr	r1, [pc, #68]	; (80018fc <passthroughInit+0xa0>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fecf 	bl	800265c <qmRegisterQueue>

  passthroughTaskHandle = STATIC_MEM_TASK_CREATE(passthroughTask, passthroughTask, PASSTHROUGH_TASK_NAME, NULL, PASSTHROUGH_TASK_PRI);
 80018be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <passthroughInit+0xb0>)
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <passthroughInit+0xb4>)
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	2305      	movs	r3, #5
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	4910      	ldr	r1, [pc, #64]	; (8001914 <passthroughInit+0xb8>)
 80018d4:	4810      	ldr	r0, [pc, #64]	; (8001918 <passthroughInit+0xbc>)
 80018d6:	f00a fbe7 	bl	800c0a8 <xTaskCreateStatic>
 80018da:	4603      	mov	r3, r0
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <passthroughInit+0xc0>)
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e000      	b.n	80018e4 <passthroughInit+0x88>
    return;
 80018e2:	bf00      	nop
}
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200012c8 	.word	0x200012c8
 80018ec:	200006e8 	.word	0x200006e8
 80018f0:	200004e8 	.word	0x200004e8
 80018f4:	200012cc 	.word	0x200012cc
 80018f8:	080118d0 	.word	0x080118d0
 80018fc:	080118dc 	.word	0x080118dc
 8001900:	20000938 	.word	0x20000938
 8001904:	20000738 	.word	0x20000738
 8001908:	200012d0 	.word	0x200012d0
 800190c:	20000434 	.word	0x20000434
 8001910:	20000ec8 	.word	0x20000ec8
 8001914:	08011908 	.word	0x08011908
 8001918:	08001921 	.word	0x08001921
 800191c:	20000ec4 	.word	0x20000ec4

08001920 <passthroughTask>:
  BaseType_t xHigherPriorityTaskWoken;
  return xQueueReceiveFromISR(ptTxQueue, receiveChPtr, &xHigherPriorityTaskWoken);
}

void passthroughTask(void *param)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8001928:	f7ff ff4e 	bl	80017c8 <systemWaitStart>

  while (true)
  {
    // Wait for interface to be activated, typically when ACM or COM port control message is sent
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001930:	2001      	movs	r0, #1
 8001932:	f00b fbf7 	bl	800d124 <ulTaskNotifyTake>
//    paramVarId_t motorPowerSetEnableParam;
//    motorPowerSetEnableParam = paramGetVarId("motorPowerSet", "enable");
//    paramSetInt(motorPowerSetEnableParam, 0);

    // Clear any notifications that was queued during 4way process.
    ulTaskNotifyValueClear(NULL, 0xFFFFFFFF);
 8001936:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800193a:	2000      	movs	r0, #0
 800193c:	f00b fc3e 	bl	800d1bc <ulTaskNotifyValueClear>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001940:	e7f4      	b.n	800192c <passthroughTask+0xc>

08001942 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f896 	bl	8001a80 <platformGetListOfConfigurations>
 8001954:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4619      	mov	r1, r3
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f854 	bl	8001a08 <platformInitConfiguration>
 8001960:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <platformInit+0x2c>
  }

//  platformInitHardware();	// NVIC, EXINT 초기화로 대체
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b30      	cmp	r3, #48	; 0x30
 8001986:	d104      	bne.n	8001992 <platformParseDeviceTypeString+0x1c>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3301      	adds	r3, #1
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b3b      	cmp	r3, #59	; 0x3b
 8001990:	d001      	beq.n	8001996 <platformParseDeviceTypeString+0x20>
    return 1;
 8001992:	2301      	movs	r3, #1
 8001994:	e034      	b.n	8001a00 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8001996:	2302      	movs	r3, #2
 8001998:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	3304      	adds	r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
  int end = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00e      	b.n	80019c8 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00c      	beq.n	80019d0 <platformParseDeviceTypeString+0x5a>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b3b      	cmp	r3, #59	; 0x3b
 80019c0:	d006      	beq.n	80019d0 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	ddec      	ble.n	80019aa <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	dd01      	ble.n	80019dc <platformParseDeviceTypeString+0x66>
    return 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	e011      	b.n	8001a00 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	4619      	mov	r1, r3
 80019ee:	6838      	ldr	r0, [r7, #0]
 80019f0:	f00e f927 	bl	800fc42 <memcpy>
  deviceType[length] = '\0';
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
  return 0;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b090      	sub	sp, #64	; 0x40
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f852 	bl	8001ac0 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8001a1c:	f107 020c 	add.w	r2, r7, #12
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ffa5 	bl	8001976 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a30:	e01a      	b.n	8001a68 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8001a32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8001a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a46:	f107 020c 	add.w	r2, r7, #12
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fbbf 	bl	80001d0 <strcmp>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d104      	bne.n	8001a62 <platformInitConfiguration+0x5a>
      active_config = config;
 8001a58:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <platformInitConfiguration+0x74>)
 8001a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5c:	6013      	str	r3, [r2, #0]
      return 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e007      	b.n	8001a72 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8001a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a64:	3301      	adds	r3, #1
 8001a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dbe0      	blt.n	8001a32 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3740      	adds	r7, #64	; 0x40
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200012d4 	.word	0x200012d4

08001a80 <platformGetListOfConfigurations>:
  //  .motorMap = motorMapCF21Brushless,
  },
#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	601a      	str	r2, [r3, #0]
  return configs;
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <platformGetListOfConfigurations+0x1c>)
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	20000048 	.word	0x20000048

08001aa0 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;CF20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001aae:	f5a3 6388 	sub.w	r3, r3, #1088	; 0x440
 8001ab2:	015b      	lsls	r3, r3, #5
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	e00d      	b.n	8001aee <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8001ad2:	6938      	ldr	r0, [r7, #16]
 8001ad4:	f7ff ffe4 	bl	8001aa0 <getAddressOfOtpMemoryBlock>
 8001ad8:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	617b      	str	r3, [r7, #20]
      break;
 8001ae6:	e005      	b.n	8001af4 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	3301      	adds	r3, #1
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b0f      	cmp	r3, #15
 8001af2:	ddee      	ble.n	8001ad2 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <platformGetDeviceTypeString+0x42>
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d101      	bne.n	8001b06 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <platformGetDeviceTypeString+0x60>)
 8001b04:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8001b06:	2220      	movs	r2, #32
 8001b08:	6979      	ldr	r1, [r7, #20]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f00d ffb8 	bl	800fa80 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3320      	adds	r3, #32
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	080119fc 	.word	0x080119fc

08001b24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b28:	f3bf 8f4f 	dsb	sy
}
 8001b2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <__NVIC_SystemReset+0x24>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b36:	4904      	ldr	r1, [pc, #16]	; (8001b48 <__NVIC_SystemReset+0x24>)
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_SystemReset+0x28>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3e:	f3bf 8f4f 	dsb	sy
}
 8001b42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <__NVIC_SystemReset+0x20>
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	05fa0004 	.word	0x05fa0004

08001b50 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b60:	f383 8811 	msr	BASEPRI, r3
 8001b64:	f3bf 8f6f 	isb	sy
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b6e:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	68b8      	ldr	r0, [r7, #8]
 8001b74:	f000 f810 	bl	8001b98 <storeAssertFileData>
//  DEBUG_PRINT("Assert failed %s:%d\n", file, line);
//  motorsStop();
  ledShowFaultPattern();
 8001b78:	f7ff fda2 	bl	80016c0 <ledShowFaultPattern>

  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <assertFail+0x44>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <assertFail+0x3c>
  {
    // Only reset if debugger is not connected
    NVIC_SystemReset();
 8001b88:	f7ff ffcc 	bl	8001b24 <__NVIC_SystemReset>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	e000edf0 	.word	0xe000edf0

08001b98 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <storeAssertFileData+0x38>)
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <storeAssertFileData+0x3c>)
 8001ba6:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <storeAssertFileData+0x38>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <storeAssertFileData+0x38>)
 8001bb0:	791a      	ldrb	r2, [r3, #4]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <storeAssertFileData+0x40>)
 8001bb4:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <storeAssertFileData+0x38>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <storeAssertFileData+0x38>)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	60d3      	str	r3, [r2, #12]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000a18 	.word	0x20000a18
 8001bd4:	2f8a001f 	.word	0x2f8a001f
 8001bd8:	200012d8 	.word	0x200012d8

08001bdc <uartInit>:
			return -1;
		return len;
}


void uartInit(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af02      	add	r7, sp, #8
	uartqueue = STATIC_MEM_QUEUE_CREATE(uartqueue);
 8001be2:	2340      	movs	r3, #64	; 0x40
 8001be4:	4618      	mov	r0, r3
 8001be6:	2301      	movs	r3, #1
 8001be8:	4619      	mov	r1, r3
 8001bea:	2300      	movs	r3, #0
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <uartInit+0x2c>)
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <uartInit+0x30>)
 8001bf2:	f009 fb63 	bl	800b2bc <xQueueGenericCreateStatic>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <uartInit+0x34>)
 8001bfa:	6013      	str	r3, [r2, #0]
    isInit = true;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <uartInit+0x38>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200009c8 	.word	0x200009c8
 8001c0c:	20000988 	.word	0x20000988
 8001c10:	200012dc 	.word	0x200012dc
 8001c14:	20001389 	.word	0x20001389

08001c18 <uartDmaInit>:



void uartDmaInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af02      	add	r7, sp, #8

  // initialize the FreeRTOS structures first, to prevent null pointers in interrupts
  waitUntilSendDone = xSemaphoreCreateBinaryStatic(&waitUntilSendDoneBuffer); // initialized as blocking
 8001c1e:	2303      	movs	r3, #3
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <uartDmaInit+0x90>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f009 fb47 	bl	800b2bc <xQueueGenericCreateStatic>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <uartDmaInit+0x94>)
 8001c32:	6013      	str	r3, [r2, #0]
  uartBusy = xSemaphoreCreateBinaryStatic(&uartBusyBuffer); // initialized as blocking
 8001c34:	2303      	movs	r3, #3
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <uartDmaInit+0x98>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f009 fb3c 	bl	800b2bc <xQueueGenericCreateStatic>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <uartDmaInit+0x9c>)
 8001c48:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(uartBusy); // but we give it because the uart isn't busy at initialization
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <uartDmaInit+0x9c>)
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	f009 fc02 	bl	800b45c <xQueueGenericSend>
  xSemaphoreGive(waitUntilSendDone);
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <uartDmaInit+0x94>)
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	f009 fbfb 	bl	800b45c <xQueueGenericSend>

  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <uartDmaInit+0xa0>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <uartDmaInit+0xa0>)
 8001c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <uartDmaInit+0xa0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  HAL_DMA_Init(&hdma_usart6_tx);
 8001c82:	480e      	ldr	r0, [pc, #56]	; (8001cbc <uartDmaInit+0xa4>)
 8001c84:	f001 fde6 	bl	8003854 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2105      	movs	r1, #5
 8001c8c:	2045      	movs	r0, #69	; 0x45
 8001c8e:	f001 fdaa 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001c92:	2045      	movs	r0, #69	; 0x45
 8001c94:	f001 fdc3 	bl	800381e <HAL_NVIC_EnableIRQ>

  isUartDmaInitialized = true;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <uartDmaInit+0xa8>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	701a      	strb	r2, [r3, #0]

}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20001338 	.word	0x20001338
 8001cac:	20001334 	.word	0x20001334
 8001cb0:	200012e4 	.word	0x200012e4
 8001cb4:	200012e0 	.word	0x200012e0
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	20002148 	.word	0x20002148
 8001cc0:	20001388 	.word	0x20001388

08001cc4 <uartSendData>:




void uartSendData(uint32_t size, uint8_t* data)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t i;

  for(i = 0; i < size; i++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e00f      	b.n	8001cf4 <uartSendData+0x30>
  {
    while (!(USART6->SR & UART_FLAG_TXE));
 8001cd4:	bf00      	nop
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <uartSendData+0x48>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f9      	beq.n	8001cd6 <uartSendData+0x12>
    USART6->DR = (data[i] & 0x00FF);
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <uartSendData+0x48>)
 8001cec:	605a      	str	r2, [r3, #4]
  for(i = 0; i < size; i++)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3eb      	bcc.n	8001cd4 <uartSendData+0x10>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40011400 	.word	0x40011400

08001d10 <uartPutchar>:


int uartPutchar(int ch)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    uartSendData(1, (uint8_t *)&ch);
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff ffd1 	bl	8001cc4 <uartSendData>
    return (unsigned char)ch;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	b2db      	uxtb	r3, r3
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <getIntLen>:

static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  int l = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 8001d3c:	e00a      	b.n	8001d54 <getIntLen+0x24>
  {
    l++;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <getIntLen+0x38>)
 8001d48:	fb82 1203 	smull	r1, r2, r2, r3
 8001d4c:	1092      	asrs	r2, r2, #2
 8001d4e:	17db      	asrs	r3, r3, #31
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	607b      	str	r3, [r7, #4]
  while(value > 9)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	dcf1      	bgt.n	8001d3e <getIntLen+0xe>
  }
  return l;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	66666667 	.word	0x66666667

08001d6c <power>:

int power(int a, int b)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e007      	b.n	8001d90 <power+0x24>
  {
    x *= a;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf3      	blt.n	8001d80 <power+0x14>
  }

  return x;
 8001d98:	68bb      	ldr	r3, [r7, #8]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 8001da8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dac:	b088      	sub	sp, #32
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 8001dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	d104      	bne.n	8001dcc <itoa10Unsigned+0x24>
  {
    putcf('0');
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2030      	movs	r0, #48	; 0x30
 8001dc6:	4798      	blx	r3
    return 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e057      	b.n	8001e7c <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 8001dcc:	f04f 0201 	mov.w	r2, #1
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 8001dd8:	e019      	b.n	8001e0e <itoa10Unsigned+0x66>
  {
    i *= 10L;
 8001dda:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001dde:	4642      	mov	r2, r8
 8001de0:	464b      	mov	r3, r9
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	0099      	lsls	r1, r3, #2
 8001dec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001df0:	0090      	lsls	r0, r2, #2
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	eb12 0408 	adds.w	r4, r2, r8
 8001dfa:	eb43 0509 	adc.w	r5, r3, r9
 8001dfe:	eb14 0a04 	adds.w	sl, r4, r4
 8001e02:	eb45 0b05 	adc.w	fp, r5, r5
 8001e06:	4654      	mov	r4, sl
 8001e08:	465d      	mov	r5, fp
 8001e0a:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 8001e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e16:	f7fe ff27 	bl	8000c68 <__aeabi_uldivmod>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	2a0a      	cmp	r2, #10
 8001e20:	f173 0300 	sbcs.w	r3, r3, #0
 8001e24:	d2d9      	bcs.n	8001dda <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 8001e26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e2e:	f7fe ff1b 	bl	8000c68 <__aeabi_uldivmod>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f04f 020a 	mov.w	r2, #10
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	f7fe ff11 	bl	8000c68 <__aeabi_uldivmod>
 8001e46:	4910      	ldr	r1, [pc, #64]	; (8001e88 <itoa10Unsigned+0xe0>)
 8001e48:	188b      	adds	r3, r1, r2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4610      	mov	r0, r2
 8001e52:	4798      	blx	r3
    len++;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 8001e5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e5e:	f04f 020a 	mov.w	r2, #10
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	f7fe feff 	bl	8000c68 <__aeabi_uldivmod>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001e72:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	d1d5      	bne.n	8001e26 <itoa10Unsigned+0x7e>

  return len;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e86:	bf00      	nop
 8001e88:	08012268 	.word	0x08012268

08001e8c <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 8001e8c:	b5b0      	push	{r4, r5, r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (num == 0)
 8001e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	d104      	bne.n	8001eae <itoa10+0x22>
  {
    putcf('0');
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2030      	movs	r0, #48	; 0x30
 8001ea8:	4798      	blx	r3
    return 1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e037      	b.n	8001f1e <itoa10+0x92>
  }

  long long unsigned int n = num;
 8001eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 8001eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da0d      	bge.n	8001eda <itoa10+0x4e>
  {
    n = -num;
 8001ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4254      	negs	r4, r2
 8001ec6:	eb61 0503 	sbc.w	r5, r1, r3
 8001eca:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	202d      	movs	r0, #45	; 0x2d
 8001ed2:	4798      	blx	r3
    len++;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  int numLenght = getIntLen(num);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff27 	bl	8001d30 <getIntLen>
 8001ee2:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	da10      	bge.n	8001f0e <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 8001eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8001ef4:	e008      	b.n	8001f08 <itoa10+0x7c>
    {
      putcf('0');
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2030      	movs	r0, #48	; 0x30
 8001efa:	4798      	blx	r3
      len++;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3301      	adds	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
      fillWithZero--;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dcf3      	bgt.n	8001ef6 <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 8001f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7ff ff48 	bl	8001da8 <itoa10Unsigned>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	4413      	add	r3, r2
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3728      	adds	r7, #40	; 0x28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f28 <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 8001f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f2c:	b08d      	sub	sp, #52	; 0x34
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  bool foundFirst = false;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  for (int i = 15; i >= 0; i--)
 8001f40:	230f      	movs	r3, #15
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	e059      	b.n	8001ffa <itoa16+0xd2>
  {
    int shift = i * 4;
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 8001f4c:	f04f 020f 	mov.w	r2, #15
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	f1a1 0620 	sub.w	r6, r1, #32
 8001f5a:	f1c1 0020 	rsb	r0, r1, #32
 8001f5e:	fa03 f501 	lsl.w	r5, r3, r1
 8001f62:	fa02 f606 	lsl.w	r6, r2, r6
 8001f66:	4335      	orrs	r5, r6
 8001f68:	fa22 f000 	lsr.w	r0, r2, r0
 8001f6c:	4305      	orrs	r5, r0
 8001f6e:	fa02 f401 	lsl.w	r4, r2, r1
 8001f72:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 8001f76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7e:	ea00 0a02 	and.w	sl, r0, r2
 8001f82:	ea01 0b03 	and.w	fp, r1, r3
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f1c3 0120 	rsb	r1, r3, #32
 8001f8c:	f1a3 0220 	sub.w	r2, r3, #32
 8001f90:	fa2a f803 	lsr.w	r8, sl, r3
 8001f94:	fa0b f101 	lsl.w	r1, fp, r1
 8001f98:	ea48 0801 	orr.w	r8, r8, r1
 8001f9c:	fa2b f202 	lsr.w	r2, fp, r2
 8001fa0:	ea48 0802 	orr.w	r8, r8, r2
 8001fa4:	fa2b f903 	lsr.w	r9, fp, r3
 8001fa8:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 8001fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	d002      	beq.n	8001fba <itoa16+0x92>
    {
      foundFirst = true;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }

    if (foundFirst || i < width)
 8001fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d103      	bne.n	8001fca <itoa16+0xa2>
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	da14      	bge.n	8001ff4 <itoa16+0xcc>
    {
      if (foundFirst)
 8001fca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <itoa16+0xbc>
      {
        putcf(digit[val]);
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <itoa16+0xe4>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4798      	blx	r3
 8001fe2:	e004      	b.n	8001fee <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 8001fe4:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4610      	mov	r0, r2
 8001fec:	4798      	blx	r3
      }

      len++;
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (int i = 15; i >= 0; i--)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	daa2      	bge.n	8001f46 <itoa16+0x1e>
    }
  }

  return len;
 8002000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002002:	4618      	mov	r0, r3
 8002004:	3734      	adds	r7, #52	; 0x34
 8002006:	46bd      	mov	sp, r7
 8002008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800200c:	08012268 	.word	0x08012268

08002010 <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c59      	adds	r1, r3, #1
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	6011      	str	r1, [r2, #0]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	3b58      	subs	r3, #88	; 0x58
 8002030:	2b20      	cmp	r3, #32
 8002032:	d861      	bhi.n	80020f8 <handleLongLong+0xe8>
 8002034:	a201      	add	r2, pc, #4	; (adr r2, 800203c <handleLongLong+0x2c>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	080020e1 	.word	0x080020e1
 8002040:	080020f9 	.word	0x080020f9
 8002044:	080020f9 	.word	0x080020f9
 8002048:	080020f9 	.word	0x080020f9
 800204c:	080020f9 	.word	0x080020f9
 8002050:	080020f9 	.word	0x080020f9
 8002054:	080020f9 	.word	0x080020f9
 8002058:	080020f9 	.word	0x080020f9
 800205c:	080020f9 	.word	0x080020f9
 8002060:	080020f9 	.word	0x080020f9
 8002064:	080020f9 	.word	0x080020f9
 8002068:	080020f9 	.word	0x080020f9
 800206c:	080020c1 	.word	0x080020c1
 8002070:	080020f9 	.word	0x080020f9
 8002074:	080020f9 	.word	0x080020f9
 8002078:	080020f9 	.word	0x080020f9
 800207c:	080020f9 	.word	0x080020f9
 8002080:	080020c1 	.word	0x080020c1
 8002084:	080020f9 	.word	0x080020f9
 8002088:	080020f9 	.word	0x080020f9
 800208c:	080020f9 	.word	0x080020f9
 8002090:	080020f9 	.word	0x080020f9
 8002094:	080020f9 	.word	0x080020f9
 8002098:	080020f9 	.word	0x080020f9
 800209c:	080020f9 	.word	0x080020f9
 80020a0:	080020f9 	.word	0x080020f9
 80020a4:	080020f9 	.word	0x080020f9
 80020a8:	080020f9 	.word	0x080020f9
 80020ac:	080020f9 	.word	0x080020f9
 80020b0:	080020d3 	.word	0x080020d3
 80020b4:	080020f9 	.word	0x080020f9
 80020b8:	080020f9 	.word	0x080020f9
 80020bc:	080020e1 	.word	0x080020e1
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 80020c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020c4:	2100      	movs	r1, #0
 80020c6:	9100      	str	r1, [sp, #0]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff fedf 	bl	8001e8c <itoa10>
 80020ce:	6178      	str	r0, [r7, #20]
      break;
 80020d0:	e013      	b.n	80020fa <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80020d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7ff fe66 	bl	8001da8 <itoa10Unsigned>
 80020dc:	6178      	str	r0, [r7, #20]
      break;
 80020de:	e00c      	b.n	80020fa <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 80020e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7ff ff1a 	bl	8001f28 <itoa16>
 80020f4:	6178      	str	r0, [r7, #20]
      break;
 80020f6:	e000      	b.n	80020fa <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 80020f8:	bf00      	nop
  }

  return len;
 80020fa:	697b      	ldr	r3, [r7, #20]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 8002104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002108:	b088      	sub	sp, #32
 800210a:	af02      	add	r7, sp, #8
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
  int len = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1c59      	adds	r1, r3, #1
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	6011      	str	r1, [r2, #0]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3b58      	subs	r3, #88	; 0x58
 8002126:	2b20      	cmp	r3, #32
 8002128:	d86c      	bhi.n	8002204 <handleLong+0x100>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <handleLong+0x2c>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	080021e5 	.word	0x080021e5
 8002134:	08002205 	.word	0x08002205
 8002138:	08002205 	.word	0x08002205
 800213c:	08002205 	.word	0x08002205
 8002140:	08002205 	.word	0x08002205
 8002144:	08002205 	.word	0x08002205
 8002148:	08002205 	.word	0x08002205
 800214c:	08002205 	.word	0x08002205
 8002150:	08002205 	.word	0x08002205
 8002154:	08002205 	.word	0x08002205
 8002158:	08002205 	.word	0x08002205
 800215c:	08002205 	.word	0x08002205
 8002160:	080021b5 	.word	0x080021b5
 8002164:	08002205 	.word	0x08002205
 8002168:	08002205 	.word	0x08002205
 800216c:	08002205 	.word	0x08002205
 8002170:	08002205 	.word	0x08002205
 8002174:	080021b5 	.word	0x080021b5
 8002178:	08002205 	.word	0x08002205
 800217c:	08002205 	.word	0x08002205
 8002180:	08002205 	.word	0x08002205
 8002184:	08002205 	.word	0x08002205
 8002188:	08002205 	.word	0x08002205
 800218c:	08002205 	.word	0x08002205
 8002190:	08002205 	.word	0x08002205
 8002194:	08002205 	.word	0x08002205
 8002198:	08002205 	.word	0x08002205
 800219c:	08002205 	.word	0x08002205
 80021a0:	08002205 	.word	0x08002205
 80021a4:	080021cf 	.word	0x080021cf
 80021a8:	08002205 	.word	0x08002205
 80021ac:	08002205 	.word	0x08002205
 80021b0:	080021e5 	.word	0x080021e5
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	17da      	asrs	r2, r3, #31
 80021b8:	469a      	mov	sl, r3
 80021ba:	4693      	mov	fp, r2
 80021bc:	2300      	movs	r3, #0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4652      	mov	r2, sl
 80021c2:	465b      	mov	r3, fp
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff fe61 	bl	8001e8c <itoa10>
 80021ca:	6178      	str	r0, [r7, #20]
      break;
 80021cc:	e01b      	b.n	8002206 <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	4698      	mov	r8, r3
 80021d4:	4691      	mov	r9, r2
 80021d6:	4642      	mov	r2, r8
 80021d8:	464b      	mov	r3, r9
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff fde4 	bl	8001da8 <itoa10Unsigned>
 80021e0:	6178      	str	r0, [r7, #20]
      break;
 80021e2:	e010      	b.n	8002206 <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	461c      	mov	r4, r3
 80021ea:	4615      	mov	r5, r2
 80021ec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4622      	mov	r2, r4
 80021f8:	462b      	mov	r3, r5
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fe94 	bl	8001f28 <itoa16>
 8002200:	6178      	str	r0, [r7, #20]
      break;
 8002202:	e000      	b.n	8002206 <handleLong+0x102>
    default:
      // Nothing here
      break;
 8002204:	bf00      	nop
  }

  return len;
 8002206:	697b      	ldr	r3, [r7, #20]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002212:	bf00      	nop

08002214 <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 8002214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002218:	ed2d 8b02 	vpush	{d8}
 800221c:	b08e      	sub	sp, #56	; 0x38
 800221e:	af02      	add	r7, sp, #8
 8002220:	6178      	str	r0, [r7, #20]
 8002222:	6139      	str	r1, [r7, #16]
 8002224:	60fa      	str	r2, [r7, #12]
  int len=0;
 8002226:	2300      	movs	r3, #0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 800222a:	e1ac      	b.n	8002586 <evprintf+0x372>
  {
    if (*fmt == '%')
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b25      	cmp	r3, #37	; 0x25
 8002232:	f040 819d 	bne.w	8002570 <evprintf+0x35c>
    {
      precision = 6;
 8002236:	2306      	movs	r3, #6
 8002238:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 800223a:	2320      	movs	r3, #32
 800223c:	76fb      	strb	r3, [r7, #27]
      width = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]

      fmt++;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	3301      	adds	r3, #1
 8002246:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b25      	cmp	r3, #37	; 0x25
 800224e:	d110      	bne.n	8002272 <evprintf+0x5e>
        putcf(*fmt++);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	613a      	str	r2, [r7, #16]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4610      	mov	r0, r2
 800225e:	4798      	blx	r3
        len++;
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	3301      	adds	r3, #1
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
        continue;
 8002266:	e18e      	b.n	8002586 <evprintf+0x372>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 8002268:	2330      	movs	r3, #48	; 0x30
 800226a:	76fb      	strb	r3, [r7, #27]
        fmt++;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	3301      	adds	r3, #1
 8002270:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b30      	cmp	r3, #48	; 0x30
 8002278:	d0f6      	beq.n	8002268 <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 800227a:	e00e      	b.n	800229a <evprintf+0x86>
			{
				width *= 10;
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3b30      	subs	r3, #48	; 0x30
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	61fb      	str	r3, [r7, #28]
				fmt++;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3301      	adds	r3, #1
 8002298:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	4ab2      	ldr	r2, [pc, #712]	; (800256c <evprintf+0x358>)
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1e6      	bne.n	800227c <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 80022ae:	e017      	b.n	80022e0 <evprintf+0xcc>
      {
        if (*fmt == '.')
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b2e      	cmp	r3, #46	; 0x2e
 80022b6:	d113      	bne.n	80022e0 <evprintf+0xcc>
        {
          fmt++;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	3301      	adds	r3, #1
 80022bc:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4aa9      	ldr	r2, [pc, #676]	; (800256c <evprintf+0x358>)
 80022c6:	4413      	add	r3, r2
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <evprintf+0xcc>
          {
            precision = *fmt - '0';
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	3b30      	subs	r3, #48	; 0x30
 80022d8:	623b      	str	r3, [r7, #32]
            fmt++;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3301      	adds	r3, #1
 80022de:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4aa1      	ldr	r2, [pc, #644]	; (800256c <evprintf+0x358>)
 80022e8:	4413      	add	r3, r2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0dd      	beq.n	80022b0 <evprintf+0x9c>
          }
        }
      }
      switch (*fmt++)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	613a      	str	r2, [r7, #16]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	3b58      	subs	r3, #88	; 0x58
 80022fe:	2b20      	cmp	r3, #32
 8002300:	f200 8132 	bhi.w	8002568 <evprintf+0x354>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <evprintf+0xf8>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	080023d9 	.word	0x080023d9
 8002310:	08002569 	.word	0x08002569
 8002314:	08002569 	.word	0x08002569
 8002318:	08002569 	.word	0x08002569
 800231c:	08002569 	.word	0x08002569
 8002320:	08002569 	.word	0x08002569
 8002324:	08002569 	.word	0x08002569
 8002328:	08002569 	.word	0x08002569
 800232c:	08002569 	.word	0x08002569
 8002330:	08002569 	.word	0x08002569
 8002334:	08002569 	.word	0x08002569
 8002338:	0800254f 	.word	0x0800254f
 800233c:	08002391 	.word	0x08002391
 8002340:	08002569 	.word	0x08002569
 8002344:	08002463 	.word	0x08002463
 8002348:	08002569 	.word	0x08002569
 800234c:	08002569 	.word	0x08002569
 8002350:	08002391 	.word	0x08002391
 8002354:	08002569 	.word	0x08002569
 8002358:	08002569 	.word	0x08002569
 800235c:	08002403 	.word	0x08002403
 8002360:	08002569 	.word	0x08002569
 8002364:	08002569 	.word	0x08002569
 8002368:	08002569 	.word	0x08002569
 800236c:	08002569 	.word	0x08002569
 8002370:	08002569 	.word	0x08002569
 8002374:	08002569 	.word	0x08002569
 8002378:	08002523 	.word	0x08002523
 800237c:	08002569 	.word	0x08002569
 8002380:	080023b7 	.word	0x080023b7
 8002384:	08002569 	.word	0x08002569
 8002388:	08002569 	.word	0x08002569
 800238c:	080023d9 	.word	0x080023d9
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	60fa      	str	r2, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	17da      	asrs	r2, r3, #31
 800239a:	461c      	mov	r4, r3
 800239c:	4615      	mov	r5, r2
 800239e:	2300      	movs	r3, #0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	4622      	mov	r2, r4
 80023a4:	462b      	mov	r3, r5
 80023a6:	6978      	ldr	r0, [r7, #20]
 80023a8:	f7ff fd70 	bl	8001e8c <itoa10>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	4413      	add	r3, r2
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80023b4:	e0e7      	b.n	8002586 <evprintf+0x372>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1d1a      	adds	r2, r3, #4
 80023ba:	60fa      	str	r2, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	4698      	mov	r8, r3
 80023c2:	4691      	mov	r9, r2
 80023c4:	4642      	mov	r2, r8
 80023c6:	464b      	mov	r3, r9
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7ff fced 	bl	8001da8 <itoa10Unsigned>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	4413      	add	r3, r2
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 80023d6:	e0d6      	b.n	8002586 <evprintf+0x372>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	60fa      	str	r2, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	469a      	mov	sl, r3
 80023e4:	4693      	mov	fp, r2
 80023e6:	7efb      	ldrb	r3, [r7, #27]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4652      	mov	r2, sl
 80023f0:	465b      	mov	r3, fp
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff fd98 	bl	8001f28 <itoa16>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	4413      	add	r3, r2
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002400:	e0c1      	b.n	8002586 <evprintf+0x372>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b6c      	cmp	r3, #108	; 0x6c
 8002408:	d11a      	bne.n	8002440 <evprintf+0x22c>
            fmt++;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3301      	adds	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3307      	adds	r3, #7
 8002414:	f023 0307 	bic.w	r3, r3, #7
 8002418:	f103 0208 	add.w	r2, r3, #8
 800241c:	60fa      	str	r2, [r7, #12]
 800241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002422:	f107 0010 	add.w	r0, r7, #16
 8002426:	7ef9      	ldrb	r1, [r7, #27]
 8002428:	9101      	str	r1, [sp, #4]
 800242a:	69f9      	ldr	r1, [r7, #28]
 800242c:	9100      	str	r1, [sp, #0]
 800242e:	4601      	mov	r1, r0
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f7ff fded 	bl	8002010 <handleLongLong>
 8002436:	4602      	mov	r2, r0
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	4413      	add	r3, r2
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 800243e:	e0a2      	b.n	8002586 <evprintf+0x372>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1d1a      	adds	r2, r3, #4
 8002444:	60fa      	str	r2, [r7, #12]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	f107 0110 	add.w	r1, r7, #16
 800244c:	7efb      	ldrb	r3, [r7, #27]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff fe56 	bl	8002104 <handleLong>
 8002458:	4602      	mov	r2, r0
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	4413      	add	r3, r2
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002460:	e091      	b.n	8002586 <evprintf+0x372>
        case 'f':
          num = va_arg(ap, double);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3307      	adds	r3, #7
 8002466:	f023 0307 	bic.w	r3, r3, #7
 800246a:	f103 0208 	add.w	r2, r3, #8
 800246e:	60fa      	str	r2, [r7, #12]
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fba6 	bl	8000bc8 <__aeabi_d2f>
 800247c:	4603      	mov	r3, r0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
          if(num<0)
 8002480:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002484:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	d50b      	bpl.n	80024a6 <evprintf+0x292>
          {
            putcf('-');
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	202d      	movs	r0, #45	; 0x2d
 8002492:	4798      	blx	r3
            num = -num;
 8002494:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002498:	eef1 7a67 	vneg.f32	s15, s15
 800249c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            len++;
 80024a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a2:	3301      	adds	r3, #1
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 80024a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ae:	ee17 2a90 	vmov	r2, s15
 80024b2:	17d3      	asrs	r3, r2, #31
 80024b4:	603a      	str	r2, [r7, #0]
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	2300      	movs	r3, #0
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f7ff fce3 	bl	8001e8c <itoa10>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	4413      	add	r3, r2
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          putcf('.'); len++;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	202e      	movs	r0, #46	; 0x2e
 80024d2:	4798      	blx	r3
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	3301      	adds	r3, #1
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 80024da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80024ea:	ee37 8a67 	vsub.f32	s16, s14, s15
 80024ee:	6a39      	ldr	r1, [r7, #32]
 80024f0:	200a      	movs	r0, #10
 80024f2:	f7ff fc3b 	bl	8001d6c <power>
 80024f6:	ee07 0a90 	vmov	s15, r0
 80024fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002502:	ee17 0a90 	vmov	r0, s15
 8002506:	f7fe fbc7 	bl	8000c98 <__aeabi_f2lz>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	6a39      	ldr	r1, [r7, #32]
 8002510:	9100      	str	r1, [sp, #0]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff fcba 	bl	8001e8c <itoa10>
 8002518:	4602      	mov	r2, r0
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	4413      	add	r3, r2
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002520:	e031      	b.n	8002586 <evprintf+0x372>
        case 's':
          str = va_arg(ap, char* );
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1d1a      	adds	r2, r3, #4
 8002526:	60fa      	str	r2, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
          while(*str)
 800252c:	e00a      	b.n	8002544 <evprintf+0x330>
          {
            putcf(*str++);
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	627a      	str	r2, [r7, #36]	; 0x24
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	4610      	mov	r0, r2
 800253c:	4798      	blx	r3
            len++;
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	3301      	adds	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
          while(*str)
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <evprintf+0x31a>
          }
          break;
 800254c:	e01b      	b.n	8002586 <evprintf+0x372>
        case 'c':
          putcf((char)va_arg(ap, int));
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1d1a      	adds	r2, r3, #4
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4610      	mov	r0, r2
 800255e:	4798      	blx	r3
          len++;
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	3301      	adds	r3, #1
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8002566:	e00e      	b.n	8002586 <evprintf+0x372>
        default:
          break;
 8002568:	bf00      	nop
 800256a:	e00c      	b.n	8002586 <evprintf+0x372>
 800256c:	08012298 	.word	0x08012298
      }
    }
    else
    {
      putcf(*fmt++);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	613a      	str	r2, [r7, #16]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4610      	mov	r0, r2
 800257e:	4798      	blx	r3
      len++;
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	3301      	adds	r3, #1
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (*fmt)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f47f ae4e 	bne.w	800222c <evprintf+0x18>
    }
  }
  
  return len;
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002592:	4618      	mov	r0, r3
 8002594:	3730      	adds	r7, #48	; 0x30
 8002596:	46bd      	mov	sp, r7
 8002598:	ecbd 8b02 	vpop	{d8}
 800259c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025a0 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 80025a0:	b40e      	push	{r1, r2, r3}
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	69f9      	ldr	r1, [r7, #28]
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff fe2d 	bl	8002214 <evprintf>
 80025ba:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025c8:	b003      	add	sp, #12
 80025ca:	4770      	bx	lr

080025cc <queueMonitorInit>:
static int getMaxWaiting(xQueueHandle* xQueue, int prevPeak);
static void resetCounters();

unsigned char ucQueueGetQueueNumber( xQueueHandle xQueue );

void queueMonitorInit() {
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af02      	add	r7, sp, #8
  ASSERT(!initialized);
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <queueMonitorInit+0x6c>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <queueMonitorInit+0x1e>
 80025e0:	2248      	movs	r2, #72	; 0x48
 80025e2:	4916      	ldr	r1, [pc, #88]	; (800263c <queueMonitorInit+0x70>)
 80025e4:	4816      	ldr	r0, [pc, #88]	; (8002640 <queueMonitorInit+0x74>)
 80025e6:	f7ff fab3 	bl	8001b50 <assertFail>
  timer = xTimerCreateStatic( "queueMonitorTimer", TIMER_PERIOD, pdTRUE, NULL, timerHandler, &timerBuffer);
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <queueMonitorInit+0x78>)
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <queueMonitorInit+0x7c>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2300      	movs	r3, #0
 80025f4:	2201      	movs	r2, #1
 80025f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80025fa:	4814      	ldr	r0, [pc, #80]	; (800264c <queueMonitorInit+0x80>)
 80025fc:	f00a feb2 	bl	800d364 <xTimerCreateStatic>
 8002600:	4603      	mov	r3, r0
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <queueMonitorInit+0x84>)
 8002604:	6013      	str	r3, [r2, #0]
  xTimerStart(timer, 100);
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <queueMonitorInit+0x84>)
 8002608:	681c      	ldr	r4, [r3, #0]
 800260a:	f00a f859 	bl	800c6c0 <xTaskGetTickCount>
 800260e:	4602      	mov	r2, r0
 8002610:	2364      	movs	r3, #100	; 0x64
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2300      	movs	r3, #0
 8002616:	2101      	movs	r1, #1
 8002618:	4620      	mov	r0, r4
 800261a:	f00a ff1d 	bl	800d458 <xTimerGenericCommand>

  data[0].fileName = "Na";
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <queueMonitorInit+0x88>)
 8002620:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <queueMonitorInit+0x8c>)
 8002622:	601a      	str	r2, [r3, #0]
  data[0].queueName = "Na";
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <queueMonitorInit+0x88>)
 8002626:	4a0c      	ldr	r2, [pc, #48]	; (8002658 <queueMonitorInit+0x8c>)
 8002628:	605a      	str	r2, [r3, #4]

  initialized = true;
 800262a:	4b03      	ldr	r3, [pc, #12]	; (8002638 <queueMonitorInit+0x6c>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	3704      	adds	r7, #4
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}
 8002638:	2000154c 	.word	0x2000154c
 800263c:	08011a04 	.word	0x08011a04
 8002640:	08011a28 	.word	0x08011a28
 8002644:	20001520 	.word	0x20001520
 8002648:	080027f9 	.word	0x080027f9
 800264c:	08011a38 	.word	0x08011a38
 8002650:	2000151c 	.word	0x2000151c
 8002654:	2000138c 	.word	0x2000138c
 8002658:	08011a4c 	.word	0x08011a4c

0800265c <qmRegisterQueue>:

    queueData->fullCount++;
  }
}

void qmRegisterQueue(xQueueHandle* xQueue, char* fileName, char* queueName) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  ASSERT(initialized);
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <qmRegisterQueue+0x70>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d104      	bne.n	800267a <qmRegisterQueue+0x1e>
 8002670:	2265      	movs	r2, #101	; 0x65
 8002672:	4917      	ldr	r1, [pc, #92]	; (80026d0 <qmRegisterQueue+0x74>)
 8002674:	4817      	ldr	r0, [pc, #92]	; (80026d4 <qmRegisterQueue+0x78>)
 8002676:	f7ff fa6b 	bl	8001b50 <assertFail>
  ASSERT(nrOfQueues < MAX_NR_OF_QUEUES);
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <qmRegisterQueue+0x7c>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b13      	cmp	r3, #19
 8002680:	d904      	bls.n	800268c <qmRegisterQueue+0x30>
 8002682:	2266      	movs	r2, #102	; 0x66
 8002684:	4912      	ldr	r1, [pc, #72]	; (80026d0 <qmRegisterQueue+0x74>)
 8002686:	4815      	ldr	r0, [pc, #84]	; (80026dc <qmRegisterQueue+0x80>)
 8002688:	f7ff fa62 	bl	8001b50 <assertFail>
  Data* queueData = &data[nrOfQueues];
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <qmRegisterQueue+0x7c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <qmRegisterQueue+0x84>)
 800269c:	4413      	add	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

  queueData->fileName = fileName;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	601a      	str	r2, [r3, #0]
  queueData->queueName = queueName;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	605a      	str	r2, [r3, #4]
  vQueueSetQueueNumber(xQueue, nrOfQueues);
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <qmRegisterQueue+0x7c>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f009 fb64 	bl	800bd80 <vQueueSetQueueNumber>

  nrOfQueues++;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <qmRegisterQueue+0x7c>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <qmRegisterQueue+0x7c>)
 80026c2:	701a      	strb	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2000154c 	.word	0x2000154c
 80026d0:	08011a04 	.word	0x08011a04
 80026d4:	08011a50 	.word	0x08011a50
 80026d8:	200000b7 	.word	0x200000b7
 80026dc:	08011a5c 	.word	0x08011a5c
 80026e0:	2000138c 	.word	0x2000138c

080026e4 <debugPrint>:
    return waiting;
  }
  return prevPeak;
}

static void debugPrint() {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  int i = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	e013      	b.n	800271c <debugPrint+0x38>
    Data* queueData = &data[i];
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <debugPrint+0x50>)
 8002700:	4413      	add	r3, r2
 8002702:	603b      	str	r3, [r7, #0]
    if (filter(queueData)) {
 8002704:	6838      	ldr	r0, [r7, #0]
 8002706:	f000 f819 	bl	800273c <filter>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <debugPrint+0x32>
      debugPrintQueue(queueData);
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f000 f827 	bl	8002764 <debugPrintQueue>
  for (i = 0; i < nrOfQueues; i++) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3301      	adds	r3, #1
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <debugPrint+0x54>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4293      	cmp	r3, r2
 8002726:	dbe5      	blt.n	80026f4 <debugPrint+0x10>
    }
  }

  if (RESET_COUNTERS_AFTER_DISPLAY) {
    resetCounters();
 8002728:	f000 f838 	bl	800279c <resetCounters>
  }
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000138c 	.word	0x2000138c
 8002738:	200000b7 	.word	0x200000b7

0800273c <filter>:

static bool filter(Data* queueData) {
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  bool doDisplay = false;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  if (DISPLAY_ONLY_OVERFLOW_QUEUES) {
    doDisplay = (queueData->fullCount != 0);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  } else {
    doDisplay = true;
  }
  return doDisplay;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <debugPrintQueue>:

static void debugPrintQueue(Data* queueData) {
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b085      	sub	sp, #20
 8002768:	af02      	add	r7, sp, #8
 800276a:	6078      	str	r0, [r7, #4]
  printf("%s:%s, sent: %i, peak: %i, full: %i\n",queueData->fileName, queueData->queueName, queueData->sendCount,queueData->maxWaiting, queueData->fullCount);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6858      	ldr	r0, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689c      	ldr	r4, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6912      	ldr	r2, [r2, #16]
 8002780:	9201      	str	r2, [sp, #4]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	4623      	mov	r3, r4
 8002786:	4602      	mov	r2, r0
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <debugPrintQueue+0x34>)
 800278a:	f00d f87f 	bl	800f88c <iprintf>
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop
 8002798:	08011a98 	.word	0x08011a98

0800279c <resetCounters>:

static void resetCounters() {
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
  int i = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	607b      	str	r3, [r7, #4]
  for (i = 0; i < nrOfQueues; i++) {
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	e013      	b.n	80027d4 <resetCounters+0x38>
    Data* queueData = &data[i];
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <resetCounters+0x54>)
 80027b8:	4413      	add	r3, r2
 80027ba:	603b      	str	r3, [r7, #0]

    queueData->sendCount = 0;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
    queueData->maxWaiting = 0;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
    queueData->fullCount = 0;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  for (i = 0; i < nrOfQueues; i++) {
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3301      	adds	r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	4b07      	ldr	r3, [pc, #28]	; (80027f4 <resetCounters+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4293      	cmp	r3, r2
 80027de:	dbe5      	blt.n	80027ac <resetCounters+0x10>
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	2000138c 	.word	0x2000138c
 80027f4:	200000b7 	.word	0x200000b7

080027f8 <timerHandler>:

static void timerHandler(xTimerHandle timer) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  debugPrint();
 8002800:	f7ff ff70 	bl	80026e4 <debugPrint>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
return 0;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <vApplicationGetIdleTaskMemory+0x2c>)
 8002850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <vApplicationGetIdleTaskMemory+0x30>)
 8002856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20001550 	.word	0x20001550
 8002870:	20001604 	.word	0x20001604

08002874 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002884:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <vApplicationGetTimerTaskMemory+0x30>)
 800288a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002892:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	20001804 	.word	0x20001804
 80028a4:	200018b8 	.word	0x200018b8

080028a8 <LL_SPI_SetStandard>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 0210 	bic.w	r2, r3, #16
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	605a      	str	r2, [r3, #4]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <LL_AHB1_GRP1_EnableClock>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4013      	ands	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	40023800 	.word	0x40023800

08002900 <LL_APB2_GRP1_EnableClock>:
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <LL_APB2_GRP1_EnableClock+0x2c>)
 800290a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <LL_APB2_GRP1_EnableClock+0x2c>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4313      	orrs	r3, r2
 8002912:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4013      	ands	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40023800 	.word	0x40023800

08002930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002936:	f000 fde5 	bl	8003504 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800293a:	f000 f877 	bl	8002a2c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800293e:	f000 f9af 	bl	8002ca0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002942:	f000 f98d 	bl	8002c60 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002946:	f000 f961 	bl	8002c0c <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800294a:	f000 f929 	bl	8002ba0 <MX_TIM7_Init>
  MX_SPI1_Init();
 800294e:	f000 f8d5 	bl	8002afc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

//  InitTick(72000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음

  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <main+0xd0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <main+0xd0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0220 	orr.w	r2, r2, #32
 8002960:	60da      	str	r2, [r3, #12]

  freertos_IntroTitle();
 8002962:	f000 fa29 	bl	8002db8 <freertos_IntroTitle>
  DEBUG_PRINT("[TASK]main\n");
 8002966:	4927      	ldr	r1, [pc, #156]	; (8002a04 <main+0xd4>)
 8002968:	4827      	ldr	r0, [pc, #156]	; (8002a08 <main+0xd8>)
 800296a:	f7ff fe19 	bl	80025a0 <eprintf>


  check_enter_bootloader();
 800296e:	f7fe fd7d 	bl	800146c <check_enter_bootloader>

  int err = platformInit();
 8002972:	f7fe ffe6 	bl	8001942 <platformInit>
 8002976:	61f8      	str	r0, [r7, #28]
  if (err != 0) {
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d000      	beq.n	8002980 <main+0x50>
  	    // The firmware is running on the wrong hardware. Halt
  	    while(1);
 800297e:	e7fe      	b.n	800297e <main+0x4e>
  }

  HAL_TIM_Base_Start_IT(&htim7);
 8002980:	4822      	ldr	r0, [pc, #136]	; (8002a0c <main+0xdc>)
 8002982:	f003 fbd1 	bl	8006128 <HAL_TIM_Base_Start_IT>
  t1 = DWT->CYCCNT;
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <main+0xe0>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <main+0xe4>)
 800298c:	6013      	str	r3, [r2, #0]
  delay_us(1000);	// 1ms
 800298e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002992:	f000 fa9f 	bl	8002ed4 <delay_us>
//  usDelay(10);
//  HAL_Delay(1);
  t2 = DWT->CYCCNT;
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <main+0xe0>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <main+0xe8>)
 800299c:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop_IT(&htim7);
 800299e:	481b      	ldr	r0, [pc, #108]	; (8002a0c <main+0xdc>)
 80029a0:	f003 fc32 	bl	8006208 <HAL_TIM_Base_Stop_IT>
  DEBUG_PRINT("delay = %.2f(us)\n",(float)(t2-t1)/CLOCK_PER_USEC);
 80029a4:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <main+0xe8>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <main+0xe4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002a1c <main+0xec>
 80029ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80029be:	ee16 0a90 	vmov	r0, s13
 80029c2:	f7fd fdd1 	bl	8000568 <__aeabi_f2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4915      	ldr	r1, [pc, #84]	; (8002a20 <main+0xf0>)
 80029cc:	480e      	ldr	r0, [pc, #56]	; (8002a08 <main+0xd8>)
 80029ce:	f7ff fde7 	bl	80025a0 <eprintf>
//  uint32_t ld = SysTick->LOAD;


  systemLaunch();
 80029d2:	f7fe fe8d 	bl	80016f0 <systemLaunch>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <main+0xf4>)
 80029d8:	463c      	mov	r4, r7
 80029da:	461d      	mov	r5, r3
 80029dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80029e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80029e8:	463b      	mov	r3, r7
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f008 fae2 	bl	800afb6 <osThreadCreate>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <main+0xf8>)
 80029f6:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80029f8:	f008 fad6 	bl	800afa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <main+0xcc>
 80029fe:	bf00      	nop
 8002a00:	20002100 	.word	0x20002100
 8002a04:	08011ac0 	.word	0x08011ac0
 8002a08:	08001d11 	.word	0x08001d11
 8002a0c:	200020b8 	.word	0x200020b8
 8002a10:	e0001000 	.word	0xe0001000
 8002a14:	200021ac 	.word	0x200021ac
 8002a18:	200021b0 	.word	0x200021b0
 8002a1c:	42900000 	.word	0x42900000
 8002a20:	08011acc 	.word	0x08011acc
 8002a24:	08011aec 	.word	0x08011aec
 8002a28:	200021a8 	.word	0x200021a8

08002a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b094      	sub	sp, #80	; 0x50
 8002a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a32:	f107 0320 	add.w	r3, r7, #32
 8002a36:	2230      	movs	r2, #48	; 0x30
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f00d f818 	bl	800fa70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	2300      	movs	r3, #0
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <SystemClock_Config+0xc8>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <SystemClock_Config+0xc8>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <SystemClock_Config+0xc8>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <SystemClock_Config+0xcc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <SystemClock_Config+0xcc>)
 8002a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <SystemClock_Config+0xcc>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a92:	2302      	movs	r3, #2
 8002a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002aa0:	2348      	movs	r3, #72	; 0x48
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aac:	f107 0320 	add.w	r3, r7, #32
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fe51 	bl	8005758 <HAL_RCC_OscConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002abc:	f000 fa38 	bl	8002f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ac0:	230f      	movs	r3, #15
 8002ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	2102      	movs	r1, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 f8b3 	bl	8005c48 <HAL_RCC_ClockConfig>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ae8:	f000 fa22 	bl	8002f30 <Error_Handler>
  }
}
 8002aec:	bf00      	nop
 8002aee:	3750      	adds	r7, #80	; 0x50
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000

08002afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b090      	sub	sp, #64	; 0x40
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002b02:	f107 0318 	add.w	r3, r7, #24
 8002b06:	2228      	movs	r2, #40	; 0x28
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f00c ffb0 	bl	800fa70 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	463b      	mov	r3, r7
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]
 8002b1e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002b20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b24:	f7ff feec 	bl	8002900 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002b28:	2001      	movs	r0, #1
 8002b2a:	f7ff fed1 	bl	80028d0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002b2e:	23e0      	movs	r3, #224	; 0xe0
 8002b30:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002b32:	2302      	movs	r3, #2
 8002b34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002b42:	2305      	movs	r3, #5
 8002b44:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b46:	463b      	mov	r3, r7
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4813      	ldr	r0, [pc, #76]	; (8002b98 <MX_SPI1_Init+0x9c>)
 8002b4c:	f004 fe53 	bl	80077f6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002b54:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b58:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002b70:	2300      	movs	r3, #0
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002b78:	230a      	movs	r3, #10
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002b7c:	f107 0318 	add.w	r3, r7, #24
 8002b80:	4619      	mov	r1, r3
 8002b82:	4806      	ldr	r0, [pc, #24]	; (8002b9c <MX_SPI1_Init+0xa0>)
 8002b84:	f004 fedb 	bl	800793e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4804      	ldr	r0, [pc, #16]	; (8002b9c <MX_SPI1_Init+0xa0>)
 8002b8c:	f7ff fe8c 	bl	80028a8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b90:	bf00      	nop
 8002b92:	3740      	adds	r7, #64	; 0x40
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40013000 	.word	0x40013000

08002ba0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba6:	463b      	mov	r3, r7
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <MX_TIM7_Init+0x64>)
 8002bb0:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <MX_TIM7_Init+0x68>)
 8002bb2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MX_TIM7_Init+0x64>)
 8002bb6:	2247      	movs	r2, #71	; 0x47
 8002bb8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bba:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <MX_TIM7_Init+0x64>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_TIM7_Init+0x64>)
 8002bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_TIM7_Init+0x64>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bce:	480d      	ldr	r0, [pc, #52]	; (8002c04 <MX_TIM7_Init+0x64>)
 8002bd0:	f003 fa5a 	bl	8006088 <HAL_TIM_Base_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002bda:	f000 f9a9 	bl	8002f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002be6:	463b      	mov	r3, r7
 8002be8:	4619      	mov	r1, r3
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <MX_TIM7_Init+0x64>)
 8002bec:	f003 fd0a 	bl	8006604 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002bf6:	f000 f99b 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200020b8 	.word	0x200020b8
 8002c08:	40001400 	.word	0x40001400

08002c0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <MX_USART6_UART_Init+0x50>)
 8002c14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c32:	220c      	movs	r2, #12
 8002c34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_USART6_UART_Init+0x4c>)
 8002c44:	f003 fd6e 	bl	8006724 <HAL_UART_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002c4e:	f000 f96f 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20002100 	.word	0x20002100
 8002c5c:	40011400 	.word	0x40011400

08002c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <MX_DMA_Init+0x3c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <MX_DMA_Init+0x3c>)
 8002c70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <MX_DMA_Init+0x3c>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2105      	movs	r1, #5
 8002c86:	2045      	movs	r0, #69	; 0x45
 8002c88:	f000 fdad 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002c8c:	2045      	movs	r0, #69	; 0x45
 8002c8e:	f000 fdc6 	bl	800381e <HAL_NVIC_EnableIRQ>

}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a35      	ldr	r2, [pc, #212]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b2f      	ldr	r3, [pc, #188]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a27      	ldr	r2, [pc, #156]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a20      	ldr	r2, [pc, #128]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <MX_GPIO_Init+0xf4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_PIN_GPIO_Port, SPI1_NSS_PIN_Pin, GPIO_PIN_SET);
 8002d26:	2201      	movs	r2, #1
 8002d28:	2110      	movs	r1, #16
 8002d2a:	481b      	ldr	r0, [pc, #108]	; (8002d98 <MX_GPIO_Init+0xf8>)
 8002d2c:	f001 faaa 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2120      	movs	r1, #32
 8002d34:	4819      	ldr	r0, [pc, #100]	; (8002d9c <MX_GPIO_Init+0xfc>)
 8002d36:	f001 faa5 	bl	8004284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_PIN_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_PIN_Pin;
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_PIN_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4811      	ldr	r0, [pc, #68]	; (8002d98 <MX_GPIO_Init+0xf8>)
 8002d52:	f001 f8fb 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_INT_Pin */
  GPIO_InitStruct.Pin = SPI1_INT_Pin;
 8002d56:	2310      	movs	r3, #16
 8002d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_INT_GPIO_Port, &GPIO_InitStruct);
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	4619      	mov	r1, r3
 8002d6a:	480d      	ldr	r0, [pc, #52]	; (8002da0 <MX_GPIO_Init+0x100>)
 8002d6c:	f001 f8ee 	bl	8003f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin;
 8002d70:	2320      	movs	r3, #32
 8002d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d74:	2301      	movs	r3, #1
 8002d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4619      	mov	r1, r3
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_GPIO_Init+0xfc>)
 8002d88:	f001 f8e0 	bl	8003f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	; 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800

08002da4 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 8002da8:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <OSVersion+0x10>)
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	08011b08 	.word	0x08011b08

08002db8 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 8002dbc:	492e      	ldr	r1, [pc, #184]	; (8002e78 <freertos_IntroTitle+0xc0>)
 8002dbe:	482f      	ldr	r0, [pc, #188]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002dc0:	f7ff fbee 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 8002dc4:	492e      	ldr	r1, [pc, #184]	; (8002e80 <freertos_IntroTitle+0xc8>)
 8002dc6:	482d      	ldr	r0, [pc, #180]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002dc8:	f7ff fbea 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 8002dcc:	492d      	ldr	r1, [pc, #180]	; (8002e84 <freertos_IntroTitle+0xcc>)
 8002dce:	482b      	ldr	r0, [pc, #172]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002dd0:	f7ff fbe6 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 8002dd4:	492c      	ldr	r1, [pc, #176]	; (8002e88 <freertos_IntroTitle+0xd0>)
 8002dd6:	4829      	ldr	r0, [pc, #164]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002dd8:	f7ff fbe2 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 8002ddc:	492b      	ldr	r1, [pc, #172]	; (8002e8c <freertos_IntroTitle+0xd4>)
 8002dde:	4827      	ldr	r0, [pc, #156]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002de0:	f7ff fbde 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 8002de4:	492a      	ldr	r1, [pc, #168]	; (8002e90 <freertos_IntroTitle+0xd8>)
 8002de6:	4825      	ldr	r0, [pc, #148]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002de8:	f7ff fbda 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 8002dec:	4929      	ldr	r1, [pc, #164]	; (8002e94 <freertos_IntroTitle+0xdc>)
 8002dee:	4823      	ldr	r0, [pc, #140]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002df0:	f7ff fbd6 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8002df4:	4928      	ldr	r1, [pc, #160]	; (8002e98 <freertos_IntroTitle+0xe0>)
 8002df6:	4821      	ldr	r0, [pc, #132]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002df8:	f7ff fbd2 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8002dfc:	4927      	ldr	r1, [pc, #156]	; (8002e9c <freertos_IntroTitle+0xe4>)
 8002dfe:	481f      	ldr	r0, [pc, #124]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e00:	f7ff fbce 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 8002e04:	4926      	ldr	r1, [pc, #152]	; (8002ea0 <freertos_IntroTitle+0xe8>)
 8002e06:	481d      	ldr	r0, [pc, #116]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e08:	f7ff fbca 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8002e0c:	4925      	ldr	r1, [pc, #148]	; (8002ea4 <freertos_IntroTitle+0xec>)
 8002e0e:	481b      	ldr	r0, [pc, #108]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e10:	f7ff fbc6 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 8002e14:	4924      	ldr	r1, [pc, #144]	; (8002ea8 <freertos_IntroTitle+0xf0>)
 8002e16:	4819      	ldr	r0, [pc, #100]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e18:	f7ff fbc2 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8002e1c:	4923      	ldr	r1, [pc, #140]	; (8002eac <freertos_IntroTitle+0xf4>)
 8002e1e:	4817      	ldr	r0, [pc, #92]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e20:	f7ff fbbe 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8002e24:	4922      	ldr	r1, [pc, #136]	; (8002eb0 <freertos_IntroTitle+0xf8>)
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e28:	f7ff fbba 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 8002e2c:	4921      	ldr	r1, [pc, #132]	; (8002eb4 <freertos_IntroTitle+0xfc>)
 8002e2e:	4813      	ldr	r0, [pc, #76]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e30:	f7ff fbb6 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8002e34:	4920      	ldr	r1, [pc, #128]	; (8002eb8 <freertos_IntroTitle+0x100>)
 8002e36:	4811      	ldr	r0, [pc, #68]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e38:	f7ff fbb2 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8002e3c:	491f      	ldr	r1, [pc, #124]	; (8002ebc <freertos_IntroTitle+0x104>)
 8002e3e:	480f      	ldr	r0, [pc, #60]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e40:	f7ff fbae 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 8002e44:	491e      	ldr	r1, [pc, #120]	; (8002ec0 <freertos_IntroTitle+0x108>)
 8002e46:	480d      	ldr	r0, [pc, #52]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e48:	f7ff fbaa 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8002e4c:	491d      	ldr	r1, [pc, #116]	; (8002ec4 <freertos_IntroTitle+0x10c>)
 8002e4e:	480b      	ldr	r0, [pc, #44]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e50:	f7ff fba6 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 8002e54:	f7ff ffa6 	bl	8002da4 <OSVersion>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	491a      	ldr	r1, [pc, #104]	; (8002ec8 <freertos_IntroTitle+0x110>)
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e60:	f7ff fb9e 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8002e64:	4919      	ldr	r1, [pc, #100]	; (8002ecc <freertos_IntroTitle+0x114>)
 8002e66:	4805      	ldr	r0, [pc, #20]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e68:	f7ff fb9a 	bl	80025a0 <eprintf>
  DEBUG_PRINT("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8002e6c:	4918      	ldr	r1, [pc, #96]	; (8002ed0 <freertos_IntroTitle+0x118>)
 8002e6e:	4803      	ldr	r0, [pc, #12]	; (8002e7c <freertos_IntroTitle+0xc4>)
 8002e70:	f7ff fb96 	bl	80025a0 <eprintf>
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	08011b10 	.word	0x08011b10
 8002e7c:	08001d11 	.word	0x08001d11
 8002e80:	08011b50 	.word	0x08011b50
 8002e84:	08011ba4 	.word	0x08011ba4
 8002e88:	08011bf8 	.word	0x08011bf8
 8002e8c:	08011c4c 	.word	0x08011c4c
 8002e90:	08011ca0 	.word	0x08011ca0
 8002e94:	08011cf4 	.word	0x08011cf4
 8002e98:	08011d48 	.word	0x08011d48
 8002e9c:	08011d9c 	.word	0x08011d9c
 8002ea0:	08011df0 	.word	0x08011df0
 8002ea4:	08011e44 	.word	0x08011e44
 8002ea8:	08011e98 	.word	0x08011e98
 8002eac:	08011eec 	.word	0x08011eec
 8002eb0:	08011f40 	.word	0x08011f40
 8002eb4:	08011f94 	.word	0x08011f94
 8002eb8:	08011fe8 	.word	0x08011fe8
 8002ebc:	0801203c 	.word	0x0801203c
 8002ec0:	08012090 	.word	0x08012090
 8002ec4:	080120d8 	.word	0x080120d8
 8002ec8:	08012108 	.word	0x08012108
 8002ecc:	0801214c 	.word	0x0801214c
 8002ed0:	08012178 	.word	0x08012178

08002ed4 <delay_us>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void delay_us (uint16_t us)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]

	HAL_TIM_Base_Start_IT(&htim7);
 8002ede:	480a      	ldr	r0, [pc, #40]	; (8002f08 <delay_us+0x34>)
 8002ee0:	f003 f922 	bl	8006128 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim7,0);  // set the counter value a 0
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <delay_us+0x34>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim7) < us);  // wait for the counter to reach the us input in the parameter
 8002eec:	bf00      	nop
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <delay_us+0x34>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3f9      	bcc.n	8002eee <delay_us+0x1a>
	HAL_TIM_Base_Stop_IT(&htim7);
 8002efa:	4803      	ldr	r0, [pc, #12]	; (8002f08 <delay_us+0x34>)
 8002efc:	f003 f984 	bl	8006208 <HAL_TIM_Base_Stop_IT>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	200020b8 	.word	0x200020b8

08002f0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002f14:	f00b f9dc 	bl	800e2d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	DEBUG_PRINT("[TASK] StartDefaultTask!\n");
 8002f18:	4903      	ldr	r1, [pc, #12]	; (8002f28 <StartDefaultTask+0x1c>)
 8002f1a:	4804      	ldr	r0, [pc, #16]	; (8002f2c <StartDefaultTask+0x20>)
 8002f1c:	f7ff fb40 	bl	80025a0 <eprintf>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f008 f895 	bl	800b050 <osDelay>
 8002f26:	e7fb      	b.n	8002f20 <StartDefaultTask+0x14>
 8002f28:	080121c4 	.word	0x080121c4
 8002f2c:	08001d11 	.word	0x08001d11

08002f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f34:	b672      	cpsid	i
}
 8002f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <Error_Handler+0x8>
	...

08002f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <HAL_MspInit+0x64>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_MspInit+0x64>)
 8002f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f50:	6453      	str	r3, [r2, #68]	; 0x44
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_MspInit+0x64>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <HAL_MspInit+0x64>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a0e      	ldr	r2, [pc, #56]	; (8002fa0 <HAL_MspInit+0x64>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <HAL_MspInit+0x64>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	f06f 0001 	mvn.w	r0, #1
 8002f82:	f000 fc30 	bl	80037e6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2105      	movs	r1, #5
 8002f8a:	2005      	movs	r0, #5
 8002f8c:	f000 fc2b 	bl	80037e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002f90:	2005      	movs	r0, #5
 8002f92:	f000 fc44 	bl	800381e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800

08002fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <HAL_TIM_Base_MspInit+0x48>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d115      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_TIM_Base_MspInit+0x4c>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_TIM_Base_MspInit+0x4c>)
 8002fc0:	f043 0320 	orr.w	r3, r3, #32
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_TIM_Base_MspInit+0x4c>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2105      	movs	r1, #5
 8002fd6:	2037      	movs	r0, #55	; 0x37
 8002fd8:	f000 fc05 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fdc:	2037      	movs	r0, #55	; 0x37
 8002fde:	f000 fc1e 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40001400 	.word	0x40001400
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_UART_MspInit+0xf0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d161      	bne.n	80030da <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_UART_MspInit+0xf4>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4a32      	ldr	r2, [pc, #200]	; (80030e8 <HAL_UART_MspInit+0xf4>)
 8003020:	f043 0320 	orr.w	r3, r3, #32
 8003024:	6453      	str	r3, [r2, #68]	; 0x44
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_UART_MspInit+0xf4>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_UART_MspInit+0xf4>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	4a2b      	ldr	r2, [pc, #172]	; (80030e8 <HAL_UART_MspInit+0xf4>)
 800303c:	f043 0304 	orr.w	r3, r3, #4
 8003040:	6313      	str	r3, [r2, #48]	; 0x30
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_UART_MspInit+0xf4>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = UART6_TX_DEBUG_Pin|UART6_RX_DEBUG_Pin;
 800304e:	23c0      	movs	r3, #192	; 0xc0
 8003050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305a:	2303      	movs	r3, #3
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800305e:	2308      	movs	r3, #8
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4619      	mov	r1, r3
 8003068:	4820      	ldr	r0, [pc, #128]	; (80030ec <HAL_UART_MspInit+0xf8>)
 800306a:	f000 ff6f 	bl	8003f4c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_UART_MspInit+0x100>)
 8003072:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003074:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 8003076:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800307a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800307c:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 800307e:	2240      	movs	r2, #64	; 0x40
 8003080:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 8003084:	2200      	movs	r2, #0
 8003086:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 800308a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800308e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 8003092:	2200      	movs	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80030ae:	4810      	ldr	r0, [pc, #64]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 80030b0:	f000 fbd0 	bl	8003854 <HAL_DMA_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80030ba:	f7ff ff39 	bl	8002f30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
 80030c4:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_UART_MspInit+0xfc>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2105      	movs	r1, #5
 80030ce:	2047      	movs	r0, #71	; 0x47
 80030d0:	f000 fb89 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80030d4:	2047      	movs	r0, #71	; 0x47
 80030d6:	f000 fba2 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030da:	bf00      	nop
 80030dc:	3728      	adds	r7, #40	; 0x28
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40011400 	.word	0x40011400
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020800 	.word	0x40020800
 80030f0:	20002148 	.word	0x20002148
 80030f4:	400264a0 	.word	0x400264a0

080030f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030fc:	e7fe      	b.n	80030fc <NMI_Handler+0x4>

080030fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <HardFault_Handler+0x4>

08003104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <MemManage_Handler+0x4>

0800310a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800310e:	e7fe      	b.n	800310e <BusFault_Handler+0x4>

08003110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003114:	e7fe      	b.n	8003114 <UsageFault_Handler+0x4>

08003116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <SysTick_Handler+0x2c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <SysTick_Handler+0x16>

		TimingDelay--;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <SysTick_Handler+0x2c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3b01      	subs	r3, #1
 8003136:	4a06      	ldr	r2, [pc, #24]	; (8003150 <SysTick_Handler+0x2c>)
 8003138:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800313a:	f000 fa35 	bl	80035a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800313e:	f009 fe35 	bl	800cdac <xTaskGetSchedulerState>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d001      	beq.n	800314c <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003148:	f00a fe4e 	bl	800dde8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200021b8 	.word	0x200021b8

08003154 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <TIM7_IRQHandler+0x10>)
 800316a:	f003 f87c 	bl	8006266 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200020b8 	.word	0x200020b8

08003178 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <OTG_FS_IRQHandler+0x10>)
 800317e:	f001 f9de 	bl	800453e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20007714 	.word	0x20007714

0800318c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */
  xSemaphoreTakeFromISR(waitUntilSendDone, portMAX_DELAY);
 8003192:	4b28      	ldr	r3, [pc, #160]	; (8003234 <DMA2_Stream6_IRQHandler+0xa8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f008 fd6f 	bl	800bc80 <xQueueReceiveFromISR>

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
  __HAL_DMA_CLEAR_FLAG(&hdma_usart6_tx, DMA_FLAG_TCIF2_6);
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <DMA2_Stream6_IRQHandler+0xac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <DMA2_Stream6_IRQHandler+0xb0>)
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d904      	bls.n	80031bc <DMA2_Stream6_IRQHandler+0x30>
 80031b2:	4b23      	ldr	r3, [pc, #140]	; (8003240 <DMA2_Stream6_IRQHandler+0xb4>)
 80031b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	e019      	b.n	80031f0 <DMA2_Stream6_IRQHandler+0x64>
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <DMA2_Stream6_IRQHandler+0xac>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <DMA2_Stream6_IRQHandler+0xb8>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d904      	bls.n	80031d2 <DMA2_Stream6_IRQHandler+0x46>
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <DMA2_Stream6_IRQHandler+0xb4>)
 80031ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031ce:	6093      	str	r3, [r2, #8]
 80031d0:	e00e      	b.n	80031f0 <DMA2_Stream6_IRQHandler+0x64>
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <DMA2_Stream6_IRQHandler+0xac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <DMA2_Stream6_IRQHandler+0xbc>)
 80031da:	429a      	cmp	r2, r3
 80031dc:	d904      	bls.n	80031e8 <DMA2_Stream6_IRQHandler+0x5c>
 80031de:	4a1b      	ldr	r2, [pc, #108]	; (800324c <DMA2_Stream6_IRQHandler+0xc0>)
 80031e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031e4:	60d3      	str	r3, [r2, #12]
 80031e6:	e003      	b.n	80031f0 <DMA2_Stream6_IRQHandler+0x64>
 80031e8:	4a18      	ldr	r2, [pc, #96]	; (800324c <DMA2_Stream6_IRQHandler+0xc0>)
 80031ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031ee:	6093      	str	r3, [r2, #8]
  __HAL_DMA_DISABLE(&hdma_usart6_tx);
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <DMA2_Stream6_IRQHandler+0xac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <DMA2_Stream6_IRQHandler+0xac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
  xSemaphoreGiveFromISR(waitUntilSendDone, &xHigherPriorityTaskWoken);
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <DMA2_Stream6_IRQHandler+0xa8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1d3a      	adds	r2, r7, #4
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f008 fac0 	bl	800b78e <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <DMA2_Stream6_IRQHandler+0x98>
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <DMA2_Stream6_IRQHandler+0xc4>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003224:	4804      	ldr	r0, [pc, #16]	; (8003238 <DMA2_Stream6_IRQHandler+0xac>)
 8003226:	f000 fc55 	bl	8003ad4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20001334 	.word	0x20001334
 8003238:	20002148 	.word	0x20002148
 800323c:	40026458 	.word	0x40026458
 8003240:	40026400 	.word	0x40026400
 8003244:	400260b8 	.word	0x400260b8
 8003248:	40026058 	.word	0x40026058
 800324c:	40026000 	.word	0x40026000
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <USART6_IRQHandler+0x7c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	d12b      	bne.n	80032c0 <USART6_IRQHandler+0x6c>
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <USART6_IRQHandler+0x7c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d024      	beq.n	80032c0 <USART6_IRQHandler+0x6c>
		portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]
		g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <USART6_IRQHandler+0x7c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <USART6_IRQHandler+0x80>)
 8003284:	701a      	strb	r2, [r3, #0]
	  __HAL_UART_CLEAR_PEFLAG(&huart6);
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <USART6_IRQHandler+0x7c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <USART6_IRQHandler+0x7c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	603b      	str	r3, [r7, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
		xQueueSendFromISR(uartqueue, &g_rx_buffer, &xHigherPriorityTaskWoken);	// Queue에서 멈춤
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <USART6_IRQHandler+0x84>)
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	1d3a      	adds	r2, r7, #4
 80032a2:	2300      	movs	r3, #0
 80032a4:	490b      	ldr	r1, [pc, #44]	; (80032d4 <USART6_IRQHandler+0x80>)
 80032a6:	f008 f9d7 	bl	800b658 <xQueueGenericSendFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <USART6_IRQHandler+0x6c>
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <USART6_IRQHandler+0x88>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80032c0:	4803      	ldr	r0, [pc, #12]	; (80032d0 <USART6_IRQHandler+0x7c>)
 80032c2:	f003 fa7f 	bl	80067c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20002100 	.word	0x20002100
 80032d4:	200021b4 	.word	0x200021b4
 80032d8:	200012dc 	.word	0x200012dc
 80032dc:	e000ed04 	.word	0xe000ed04

080032e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return 1;
 80032e4:	2301      	movs	r3, #1
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <_kill>:

int _kill(int pid, int sig)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032fa:	f00c fc75 	bl	800fbe8 <__errno>
 80032fe:	4603      	mov	r3, r0
 8003300:	2216      	movs	r2, #22
 8003302:	601a      	str	r2, [r3, #0]
  return -1;
 8003304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_exit>:

void _exit (int status)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003318:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ffe7 	bl	80032f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003322:	e7fe      	b.n	8003322 <_exit+0x12>

08003324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e00a      	b.n	800334c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003336:	f3af 8000 	nop.w
 800333a:	4601      	mov	r1, r0
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	60ba      	str	r2, [r7, #8]
 8003342:	b2ca      	uxtb	r2, r1
 8003344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3301      	adds	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	429a      	cmp	r2, r3
 8003352:	dbf0      	blt.n	8003336 <_read+0x12>
  }

  return len;
 8003354:	687b      	ldr	r3, [r7, #4]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e009      	b.n	8003384 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	60ba      	str	r2, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3301      	adds	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	dbf1      	blt.n	8003370 <_write+0x12>
  }
  return len;
 800338c:	687b      	ldr	r3, [r7, #4]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <_close>:

int _close(int file)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800339e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033be:	605a      	str	r2, [r3, #4]
  return 0;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <_isatty>:

int _isatty(int file)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033d6:	2301      	movs	r3, #1
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <_sbrk+0x5c>)
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <_sbrk+0x60>)
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <_sbrk+0x64>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d102      	bne.n	8003422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <_sbrk+0x64>)
 800341e:	4a12      	ldr	r2, [pc, #72]	; (8003468 <_sbrk+0x68>)
 8003420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <_sbrk+0x64>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	429a      	cmp	r2, r3
 800342e:	d207      	bcs.n	8003440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003430:	f00c fbda 	bl	800fbe8 <__errno>
 8003434:	4603      	mov	r3, r0
 8003436:	220c      	movs	r2, #12
 8003438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800343a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800343e:	e009      	b.n	8003454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <_sbrk+0x64>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <_sbrk+0x64>)
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <_sbrk+0x64>)
 8003450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20020000 	.word	0x20020000
 8003460:	00000400 	.word	0x00000400
 8003464:	200021bc 	.word	0x200021bc
 8003468:	20007f68 	.word	0x20007f68

0800346c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <SystemInit+0x20>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <SystemInit+0x20>)
 8003478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800347c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <vApplicationIdleHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook (void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
	printf("."); fflush(stdout);
 8003494:	202e      	movs	r0, #46	; 0x2e
 8003496:	f00c fa0b 	bl	800f8b0 <putchar>
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <vApplicationIdleHook+0x1c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f00c f91d 	bl	800f6e0 <fflush>
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000210 	.word	0x20000210

080034b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80034b4:	f7ff ffda 	bl	800346c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034b8:	480c      	ldr	r0, [pc, #48]	; (80034ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034ba:	490d      	ldr	r1, [pc, #52]	; (80034f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034bc:	4a0d      	ldr	r2, [pc, #52]	; (80034f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c0:	e002      	b.n	80034c8 <LoopCopyDataInit>

080034c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034c6:	3304      	adds	r3, #4

080034c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034cc:	d3f9      	bcc.n	80034c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034d0:	4c0a      	ldr	r4, [pc, #40]	; (80034fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80034d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034d4:	e001      	b.n	80034da <LoopFillZerobss>

080034d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034d8:	3204      	adds	r2, #4

080034da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034dc:	d3fb      	bcc.n	80034d6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80034de:	f00c fb89 	bl	800fbf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034e2:	f7ff fa25 	bl	8002930 <main>
  bx  lr    
 80034e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f0:	20000380 	.word	0x20000380
  ldr r2, =_sidata
 80034f4:	0801261c 	.word	0x0801261c
  ldr r2, =_sbss
 80034f8:	20000a40 	.word	0x20000a40
  ldr r4, =_ebss
 80034fc:	20007f64 	.word	0x20007f64

08003500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003500:	e7fe      	b.n	8003500 <ADC_IRQHandler>
	...

08003504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003508:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_Init+0x40>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0d      	ldr	r2, [pc, #52]	; (8003544 <HAL_Init+0x40>)
 800350e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_Init+0x40>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <HAL_Init+0x40>)
 800351a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800351e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <HAL_Init+0x40>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <HAL_Init+0x40>)
 8003526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352c:	2003      	movs	r0, #3
 800352e:	f000 f94f 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003532:	200f      	movs	r0, #15
 8003534:	f000 f808 	bl	8003548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003538:	f7ff fd00 	bl	8002f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40023c00 	.word	0x40023c00

08003548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_InitTick+0x54>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_InitTick+0x58>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f967 	bl	800383a <HAL_SYSTICK_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00e      	b.n	8003594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d80a      	bhi.n	8003592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800357c:	2200      	movs	r2, #0
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003584:	f000 f92f 	bl	80037e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003588:	4a06      	ldr	r2, [pc, #24]	; (80035a4 <HAL_InitTick+0x5c>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200000b8 	.word	0x200000b8
 80035a0:	200000c0 	.word	0x200000c0
 80035a4:	200000bc 	.word	0x200000bc

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	200000c0 	.word	0x200000c0
 80035cc:	200021c0 	.word	0x200021c0

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	200021c0 	.word	0x200021c0

080035e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff ffee 	bl	80035d0 <HAL_GetTick>
 80035f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003600:	d005      	beq.n	800360e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_Delay+0x44>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800360e:	bf00      	nop
 8003610:	f7ff ffde 	bl	80035d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d8f7      	bhi.n	8003610 <HAL_Delay+0x28>
  {
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200000c0 	.word	0x200000c0

08003630 <__NVIC_SetPriorityGrouping>:
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	; (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	; (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	; 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800379c:	d301      	bcc.n	80037a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379e:	2301      	movs	r3, #1
 80037a0:	e00f      	b.n	80037c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <SysTick_Config+0x40>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037aa:	210f      	movs	r1, #15
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b0:	f7ff ff8e 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <SysTick_Config+0x40>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ba:	4b04      	ldr	r3, [pc, #16]	; (80037cc <SysTick_Config+0x40>)
 80037bc:	2207      	movs	r2, #7
 80037be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	e000e010 	.word	0xe000e010

080037d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff29 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f8:	f7ff ff3e 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80037fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff8e 	bl	8003724 <NVIC_EncodePriority>
 8003808:	4602      	mov	r2, r0
 800380a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff5d 	bl	80036d0 <__NVIC_SetPriority>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff31 	bl	8003694 <__NVIC_EnableIRQ>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ffa2 	bl	800378c <SysTick_Config>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003860:	f7ff feb6 	bl	80035d0 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e099      	b.n	80039a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003890:	e00f      	b.n	80038b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003892:	f7ff fe9d 	bl	80035d0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b05      	cmp	r3, #5
 800389e:	d908      	bls.n	80038b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2220      	movs	r2, #32
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2203      	movs	r2, #3
 80038aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e078      	b.n	80039a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e8      	bne.n	8003892 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_DMA_Init+0x158>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b04      	cmp	r3, #4
 800390a:	d107      	bne.n	800391c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	4313      	orrs	r3, r2
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0307 	bic.w	r3, r3, #7
 8003932:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b04      	cmp	r3, #4
 8003944:	d117      	bne.n	8003976 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00e      	beq.n	8003976 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fa7b 	bl	8003e54 <DMA_CheckFifoParam>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2240      	movs	r2, #64	; 0x40
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003972:	2301      	movs	r3, #1
 8003974:	e016      	b.n	80039a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa32 	bl	8003de8 <DMA_CalcBaseAndBitshift>
 8003984:	4603      	mov	r3, r0
 8003986:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	223f      	movs	r2, #63	; 0x3f
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	f010803f 	.word	0xf010803f

080039b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039be:	f7ff fe07 	bl	80035d0 <HAL_GetTick>
 80039c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d008      	beq.n	80039e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e052      	b.n	8003a88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0216 	bic.w	r2, r2, #22
 80039f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d103      	bne.n	8003a12 <HAL_DMA_Abort+0x62>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0208 	bic.w	r2, r2, #8
 8003a20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a32:	e013      	b.n	8003a5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a34:	f7ff fdcc 	bl	80035d0 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d90c      	bls.n	8003a5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e015      	b.n	8003a88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e4      	bne.n	8003a34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	223f      	movs	r2, #63	; 0x3f
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d004      	beq.n	8003aae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00c      	b.n	8003ac8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2205      	movs	r2, #5
 8003ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ae0:	4b8e      	ldr	r3, [pc, #568]	; (8003d1c <HAL_DMA_IRQHandler+0x248>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a8e      	ldr	r2, [pc, #568]	; (8003d20 <HAL_DMA_IRQHandler+0x24c>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0a9b      	lsrs	r3, r3, #10
 8003aec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	2208      	movs	r2, #8
 8003b00:	409a      	lsls	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0204 	bic.w	r2, r2, #4
 8003b26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2201      	movs	r2, #1
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d012      	beq.n	8003b76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2201      	movs	r2, #1
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d012      	beq.n	8003bac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00b      	beq.n	8003bac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b98:	2204      	movs	r2, #4
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f043 0204 	orr.w	r2, r3, #4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d043      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d03c      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	2210      	movs	r2, #16
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d018      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d108      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d024      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	4798      	blx	r3
 8003c02:	e01f      	b.n	8003c44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
 8003c14:	e016      	b.n	8003c44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0208 	bic.w	r2, r2, #8
 8003c32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	2220      	movs	r2, #32
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 808f 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 8087 	beq.w	8003d74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d136      	bne.n	8003cec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0216 	bic.w	r2, r2, #22
 8003c8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d103      	bne.n	8003cae <HAL_DMA_IRQHandler+0x1da>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0208 	bic.w	r2, r2, #8
 8003cbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	223f      	movs	r2, #63	; 0x3f
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d07e      	beq.n	8003de0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
        }
        return;
 8003cea:	e079      	b.n	8003de0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d031      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
 8003d18:	e02c      	b.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
 8003d1a:	bf00      	nop
 8003d1c:	200000b8 	.word	0x200000b8
 8003d20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d023      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
 8003d34:	e01e      	b.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10f      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0210 	bic.w	r2, r2, #16
 8003d52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d032      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d022      	beq.n	8003dce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d307      	bcc.n	8003dbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f2      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x2cc>
 8003dba:	e000      	b.n	8003dbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003dbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	4798      	blx	r3
 8003dde:	e000      	b.n	8003de2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003de0:	bf00      	nop
    }
  }
}
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3b10      	subs	r3, #16
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <DMA_CalcBaseAndBitshift+0x64>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e02:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <DMA_CalcBaseAndBitshift+0x68>)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d909      	bls.n	8003e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	659a      	str	r2, [r3, #88]	; 0x58
 8003e28:	e007      	b.n	8003e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	aaaaaaab 	.word	0xaaaaaaab
 8003e50:	08012290 	.word	0x08012290

08003e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d11f      	bne.n	8003eae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d856      	bhi.n	8003f22 <DMA_CheckFifoParam+0xce>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <DMA_CheckFifoParam+0x28>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003e8d 	.word	0x08003e8d
 8003e80:	08003e9f 	.word	0x08003e9f
 8003e84:	08003e8d 	.word	0x08003e8d
 8003e88:	08003f23 	.word	0x08003f23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d046      	beq.n	8003f26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e043      	b.n	8003f26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ea6:	d140      	bne.n	8003f2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eac:	e03d      	b.n	8003f2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb6:	d121      	bne.n	8003efc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d837      	bhi.n	8003f2e <DMA_CheckFifoParam+0xda>
 8003ebe:	a201      	add	r2, pc, #4	; (adr r2, 8003ec4 <DMA_CheckFifoParam+0x70>)
 8003ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003edb 	.word	0x08003edb
 8003ecc:	08003ed5 	.word	0x08003ed5
 8003ed0:	08003eed 	.word	0x08003eed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed8:	e030      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d025      	beq.n	8003f32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eea:	e022      	b.n	8003f32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ef4:	d11f      	bne.n	8003f36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003efa:	e01c      	b.n	8003f36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d903      	bls.n	8003f0a <DMA_CheckFifoParam+0xb6>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d003      	beq.n	8003f10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f08:	e018      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8003f0e:	e015      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f20:	e00b      	b.n	8003f3a <DMA_CheckFifoParam+0xe6>
      break;
 8003f22:	bf00      	nop
 8003f24:	e00a      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f26:	bf00      	nop
 8003f28:	e008      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e006      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e004      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f32:	bf00      	nop
 8003f34:	e002      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f36:	bf00      	nop
 8003f38:	e000      	b.n	8003f3c <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop

08003f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e16b      	b.n	8004240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f68:	2201      	movs	r2, #1
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	f040 815a 	bne.w	800423a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d005      	beq.n	8003f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d130      	bne.n	8004000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 0201 	and.w	r2, r3, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b03      	cmp	r3, #3
 800400a:	d017      	beq.n	800403c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d123      	bne.n	8004090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	08da      	lsrs	r2, r3, #3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3208      	adds	r2, #8
 8004050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	691a      	ldr	r2, [r3, #16]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	08da      	lsrs	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3208      	adds	r2, #8
 800408a:	69b9      	ldr	r1, [r7, #24]
 800408c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0203 	and.w	r2, r3, #3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80b4 	beq.w	800423a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	4b60      	ldr	r3, [pc, #384]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	4a5f      	ldr	r2, [pc, #380]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e0:	6453      	str	r3, [r2, #68]	; 0x44
 80040e2:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_GPIO_Init+0x30c>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ee:	4a5b      	ldr	r2, [pc, #364]	; (800425c <HAL_GPIO_Init+0x310>)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	089b      	lsrs	r3, r3, #2
 80040f4:	3302      	adds	r3, #2
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_GPIO_Init+0x314>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d02b      	beq.n	8004172 <HAL_GPIO_Init+0x226>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a51      	ldr	r2, [pc, #324]	; (8004264 <HAL_GPIO_Init+0x318>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d025      	beq.n	800416e <HAL_GPIO_Init+0x222>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a50      	ldr	r2, [pc, #320]	; (8004268 <HAL_GPIO_Init+0x31c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01f      	beq.n	800416a <HAL_GPIO_Init+0x21e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4f      	ldr	r2, [pc, #316]	; (800426c <HAL_GPIO_Init+0x320>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d019      	beq.n	8004166 <HAL_GPIO_Init+0x21a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4e      	ldr	r2, [pc, #312]	; (8004270 <HAL_GPIO_Init+0x324>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_GPIO_Init+0x216>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4d      	ldr	r2, [pc, #308]	; (8004274 <HAL_GPIO_Init+0x328>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00d      	beq.n	800415e <HAL_GPIO_Init+0x212>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4c      	ldr	r2, [pc, #304]	; (8004278 <HAL_GPIO_Init+0x32c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <HAL_GPIO_Init+0x20e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a4b      	ldr	r2, [pc, #300]	; (800427c <HAL_GPIO_Init+0x330>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <HAL_GPIO_Init+0x20a>
 8004152:	2307      	movs	r3, #7
 8004154:	e00e      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004156:	2308      	movs	r3, #8
 8004158:	e00c      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800415a:	2306      	movs	r3, #6
 800415c:	e00a      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800415e:	2305      	movs	r3, #5
 8004160:	e008      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004162:	2304      	movs	r3, #4
 8004164:	e006      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004166:	2303      	movs	r3, #3
 8004168:	e004      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800416a:	2302      	movs	r3, #2
 800416c:	e002      	b.n	8004174 <HAL_GPIO_Init+0x228>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_GPIO_Init+0x228>
 8004172:	2300      	movs	r3, #0
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	f002 0203 	and.w	r2, r2, #3
 800417a:	0092      	lsls	r2, r2, #2
 800417c:	4093      	lsls	r3, r2
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004184:	4935      	ldr	r1, [pc, #212]	; (800425c <HAL_GPIO_Init+0x310>)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	3302      	adds	r3, #2
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041b6:	4a32      	ldr	r2, [pc, #200]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041bc:	4b30      	ldr	r3, [pc, #192]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e0:	4a27      	ldr	r2, [pc, #156]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041e6:	4b26      	ldr	r3, [pc, #152]	; (8004280 <HAL_GPIO_Init+0x334>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800420a:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <HAL_GPIO_Init+0x334>)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004234:	4a12      	ldr	r2, [pc, #72]	; (8004280 <HAL_GPIO_Init+0x334>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3301      	adds	r3, #1
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b0f      	cmp	r3, #15
 8004244:	f67f ae90 	bls.w	8003f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	40013800 	.word	0x40013800
 8004260:	40020000 	.word	0x40020000
 8004264:	40020400 	.word	0x40020400
 8004268:	40020800 	.word	0x40020800
 800426c:	40020c00 	.word	0x40020c00
 8004270:	40021000 	.word	0x40021000
 8004274:	40021400 	.word	0x40021400
 8004278:	40021800 	.word	0x40021800
 800427c:	40021c00 	.word	0x40021c00
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
 8004290:	4613      	mov	r3, r2
 8004292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004294:	787b      	ldrb	r3, [r7, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042a0:	e003      	b.n	80042aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	041a      	lsls	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	619a      	str	r2, [r3, #24]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af02      	add	r7, sp, #8
 80042bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e101      	b.n	80044cc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f00a f9d4 	bl	800e690 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f6:	d102      	bne.n	80042fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f003 fc85 	bl	8007c12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7c1a      	ldrb	r2, [r3, #16]
 8004310:	f88d 2000 	strb.w	r2, [sp]
 8004314:	3304      	adds	r3, #4
 8004316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004318:	f003 fb63 	bl	80079e2 <USB_CoreInit>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e0ce      	b.n	80044cc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f003 fc7d 	bl	8007c34 <USB_SetCurrentMode>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0bf      	b.n	80044cc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]
 8004350:	e04a      	b.n	80043e8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	3315      	adds	r3, #21
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3314      	adds	r3, #20
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	b298      	uxth	r0, r3
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	332e      	adds	r3, #46	; 0x2e
 800438e:	4602      	mov	r2, r0
 8004390:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3318      	adds	r3, #24
 80043a2:	2200      	movs	r2, #0
 80043a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	331c      	adds	r3, #28
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3320      	adds	r3, #32
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043ce:	7bfa      	ldrb	r2, [r7, #15]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	3301      	adds	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	791b      	ldrb	r3, [r3, #4]
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d3af      	bcc.n	8004352 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
 80043f6:	e044      	b.n	8004482 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043f8:	7bfa      	ldrb	r2, [r7, #15]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	f203 2355 	addw	r3, r3, #597	; 0x255
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800440e:	7bfa      	ldrb	r2, [r7, #15]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8004420:	7bfa      	ldrb	r2, [r7, #15]
 8004422:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	3301      	adds	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	791b      	ldrb	r3, [r3, #4]
 8004486:	7bfa      	ldrb	r2, [r7, #15]
 8004488:	429a      	cmp	r2, r3
 800448a:	d3b5      	bcc.n	80043f8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7c1a      	ldrb	r2, [r3, #16]
 8004494:	f88d 2000 	strb.w	r2, [sp]
 8004498:	3304      	adds	r3, #4
 800449a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800449c:	f003 fc16 	bl	8007ccc <USB_DevInit>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e00c      	b.n	80044cc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f004 fc5a 	bl	8008d7e <USB_DevDisconnect>

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_PCD_Start+0x1c>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e022      	b.n	8004536 <HAL_PCD_Start+0x62>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f003 fb67 	bl	8007bf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f004 fc08 	bl	8008d3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800453e:	b590      	push	{r4, r7, lr}
 8004540:	b08d      	sub	sp, #52	; 0x34
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f004 fcc6 	bl	8008ee6 <USB_GetMode>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 848c 	bne.w	8004e7a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f004 fc2a 	bl	8008dc0 <USB_ReadInterrupts>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8482 	beq.w	8004e78 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f004 fc17 	bl	8008dc0 <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b02      	cmp	r3, #2
 800459a:	d107      	bne.n	80045ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f002 0202 	and.w	r2, r2, #2
 80045aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f004 fc05 	bl	8008dc0 <USB_ReadInterrupts>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d161      	bne.n	8004684 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0210 	bic.w	r2, r2, #16
 80045ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	f003 020f 	and.w	r2, r3, #15
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	3304      	adds	r3, #4
 80045ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	0c5b      	lsrs	r3, r3, #17
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d124      	bne.n	8004646 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d035      	beq.n	8004674 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	6a38      	ldr	r0, [r7, #32]
 800461c:	f004 fa3c 	bl	8008a98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800462c:	441a      	add	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800463e:	441a      	add	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	615a      	str	r2, [r3, #20]
 8004644:	e016      	b.n	8004674 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	0c5b      	lsrs	r3, r3, #17
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	2b06      	cmp	r3, #6
 8004650:	d110      	bne.n	8004674 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004658:	2208      	movs	r2, #8
 800465a:	4619      	mov	r1, r3
 800465c:	6a38      	ldr	r0, [r7, #32]
 800465e:	f004 fa1b 	bl	8008a98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800466e:	441a      	add	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0210 	orr.w	r2, r2, #16
 8004682:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fb99 	bl	8008dc0 <USB_ReadInterrupts>
 800468e:	4603      	mov	r3, r0
 8004690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004694:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004698:	f040 80a7 	bne.w	80047ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f004 fb9e 	bl	8008de6 <USB_ReadDevAllOutEpInterrupt>
 80046aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80046ac:	e099      	b.n	80047e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 808e 	beq.w	80047d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	4611      	mov	r1, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f004 fbc2 	bl	8008e4e <USB_ReadDevOutEPInterrupt>
 80046ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00c      	beq.n	80046f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e2:	461a      	mov	r2, r3
 80046e4:	2301      	movs	r3, #1
 80046e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80046e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fea2 	bl	8005434 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2308      	movs	r3, #8
 800470a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800470c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ff78 	bl	8005604 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	d008      	beq.n	8004730 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	461a      	mov	r2, r3
 800472c:	2310      	movs	r3, #16
 800472e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d030      	beq.n	800479c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d109      	bne.n	800475a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004758:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800475a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4413      	add	r3, r2
 800476c:	3304      	adds	r3, #4
 800476e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	78db      	ldrb	r3, [r3, #3]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d108      	bne.n	800478a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2200      	movs	r2, #0
 800477c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	b2db      	uxtb	r3, r3
 8004782:	4619      	mov	r1, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f00a f889 	bl	800e89c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	461a      	mov	r2, r3
 8004798:	2302      	movs	r3, #2
 800479a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b2:	461a      	mov	r2, r3
 80047b4:	2320      	movs	r3, #32
 80047b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	3301      	adds	r3, #1
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f47f af62 	bne.w	80046ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f004 fae6 	bl	8008dc0 <USB_ReadInterrupts>
 80047f4:	4603      	mov	r3, r0
 80047f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047fe:	f040 80db 	bne.w	80049b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f004 fb07 	bl	8008e1a <USB_ReadDevAllInEpInterrupt>
 800480c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004812:	e0cd      	b.n	80049b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80c2 	beq.w	80049a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	4611      	mov	r1, r2
 800482a:	4618      	mov	r0, r3
 800482c:	f004 fb2d 	bl	8008e8a <USB_ReadDevInEPInterrupt>
 8004830:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d057      	beq.n	80048ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	2201      	movs	r2, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	43db      	mvns	r3, r3
 8004856:	69f9      	ldr	r1, [r7, #28]
 8004858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800485c:	4013      	ands	r3, r2
 800485e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	461a      	mov	r2, r3
 800486e:	2301      	movs	r3, #1
 8004870:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	799b      	ldrb	r3, [r3, #6]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d132      	bne.n	80048e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	3320      	adds	r3, #32
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004890:	4613      	mov	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4413      	add	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4403      	add	r3, r0
 800489a:	331c      	adds	r3, #28
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4419      	add	r1, r3
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4403      	add	r3, r0
 80048ae:	3320      	adds	r3, #32
 80048b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d113      	bne.n	80048e0 <HAL_PCD_IRQHandler+0x3a2>
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	3324      	adds	r3, #36	; 0x24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d108      	bne.n	80048e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80048d8:	461a      	mov	r2, r3
 80048da:	2101      	movs	r1, #1
 80048dc:	f004 fb34 	bl	8008f48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f009 ff53 	bl	800e792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004902:	461a      	mov	r2, r3
 8004904:	2308      	movs	r3, #8
 8004906:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	461a      	mov	r2, r3
 8004920:	2310      	movs	r3, #16
 8004922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	461a      	mov	r2, r3
 800493c:	2340      	movs	r3, #64	; 0x40
 800493e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d023      	beq.n	8004992 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800494a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800494c:	6a38      	ldr	r0, [r7, #32]
 800494e:	f003 fb21 	bl	8007f94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	3310      	adds	r3, #16
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4413      	add	r3, r2
 8004962:	3304      	adds	r3, #4
 8004964:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	78db      	ldrb	r3, [r3, #3]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d108      	bne.n	8004980 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	b2db      	uxtb	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f009 ffa0 	bl	800e8c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	461a      	mov	r2, r3
 800498e:	2302      	movs	r3, #2
 8004990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800499c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fcbb 	bl	800531a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	3301      	adds	r3, #1
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f47f af2e 	bne.w	8004814 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f004 f9ff 	bl	8008dc0 <USB_ReadInterrupts>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049cc:	d122      	bne.n	8004a14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d108      	bne.n	80049fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049f4:	2100      	movs	r1, #0
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fea2 	bl	8005740 <HAL_PCDEx_LPM_Callback>
 80049fc:	e002      	b.n	8004a04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f009 ff3e 	bl	800e880 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f004 f9d1 	bl	8008dc0 <USB_ReadInterrupts>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a28:	d112      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d102      	bne.n	8004a40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f009 fefa 	bl	800e834 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004a4e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f004 f9b3 	bl	8008dc0 <USB_ReadInterrupts>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a64:	f040 80b7 	bne.w	8004bd6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2110      	movs	r1, #16
 8004a82:	4618      	mov	r0, r3
 8004a84:	f003 fa86 	bl	8007f94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8c:	e046      	b.n	8004b1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ac0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004af4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	3301      	adds	r3, #1
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	791b      	ldrb	r3, [r3, #4]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d3b2      	bcc.n	8004a8e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b36:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004b3a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	7bdb      	ldrb	r3, [r3, #15]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d016      	beq.n	8004b72 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b54:	f043 030b 	orr.w	r3, r3, #11
 8004b58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b6a:	f043 030b 	orr.w	r3, r3, #11
 8004b6e:	6453      	str	r3, [r2, #68]	; 0x44
 8004b70:	e015      	b.n	8004b9e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b84:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004b88:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	69fa      	ldr	r2, [r7, #28]
 8004b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b98:	f043 030b 	orr.w	r3, r3, #11
 8004b9c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bb0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f004 f9c1 	bl	8008f48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f004 f8f0 	bl	8008dc0 <USB_ReadInterrupts>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bea:	d123      	bne.n	8004c34 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f004 f986 	bl	8008f02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f003 fa43 	bl	8008086 <USB_GetDevSpeed>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681c      	ldr	r4, [r3, #0]
 8004c0c:	f001 fa08 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8004c10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c16:	461a      	mov	r2, r3
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f002 ff47 	bl	8007aac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f009 fddf 	bl	800e7e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f004 f8c1 	bl	8008dc0 <USB_ReadInterrupts>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10a      	bne.n	8004c5e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f009 fdbc 	bl	800e7c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f002 0208 	and.w	r2, r2, #8
 8004c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f004 f8ac 	bl	8008dc0 <USB_ReadInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d123      	bne.n	8004cba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c7e:	2301      	movs	r3, #1
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
 8004c82:	e014      	b.n	8004cae <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d105      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fb08 	bl	80052b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	3301      	adds	r3, #1
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	791b      	ldrb	r3, [r3, #4]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d3e4      	bcc.n	8004c84 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f004 f87e 	bl	8008dc0 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cce:	d13c      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd4:	e02b      	b.n	8004d2e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3318      	adds	r3, #24
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d115      	bne.n	8004d28 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004cfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da12      	bge.n	8004d28 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	3317      	adds	r3, #23
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 fac8 	bl	80052b8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	791b      	ldrb	r3, [r3, #4]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d3cd      	bcc.n	8004cd6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f004 f836 	bl	8008dc0 <USB_ReadInterrupts>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d5e:	d156      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d60:	2301      	movs	r3, #1
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
 8004d64:	e045      	b.n	8004df2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d12e      	bne.n	8004dec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004d8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da2b      	bge.n	8004dec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8004da0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d121      	bne.n	8004dec <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	f203 2357 	addw	r3, r3, #599	; 0x257
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004de8:	6053      	str	r3, [r2, #4]
            break;
 8004dea:	e008      	b.n	8004dfe <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	3301      	adds	r3, #1
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	791b      	ldrb	r3, [r3, #4]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d3b3      	bcc.n	8004d66 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f003 ffd4 	bl	8008dc0 <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e22:	d10a      	bne.n	8004e3a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f009 fd5d 	bl	800e8e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f003 ffbe 	bl	8008dc0 <USB_ReadInterrupts>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d115      	bne.n	8004e7a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f009 fd4d 	bl	800e900 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	e000      	b.n	8004e7a <HAL_PCD_IRQHandler+0x93c>
      return;
 8004e78:	bf00      	nop
    }
  }
}
 8004e7a:	3734      	adds	r7, #52	; 0x34
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}

08004e80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_PCD_SetAddress+0x1a>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e012      	b.n	8004ec0 <HAL_PCD_SetAddress+0x40>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	78fa      	ldrb	r2, [r7, #3]
 8004ea6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f003 ff1d 	bl	8008cf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	4608      	mov	r0, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	70fb      	strb	r3, [r7, #3]
 8004eda:	460b      	mov	r3, r1
 8004edc:	803b      	strh	r3, [r7, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da0f      	bge.n	8004f0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eee:	78fb      	ldrb	r3, [r7, #3]
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	3310      	adds	r3, #16
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	705a      	strb	r2, [r3, #1]
 8004f0c:	e00f      	b.n	8004f2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 020f 	and.w	r2, r3, #15
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4413      	add	r3, r2
 8004f24:	3304      	adds	r3, #4
 8004f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f3a:	883a      	ldrh	r2, [r7, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	78ba      	ldrb	r2, [r7, #2]
 8004f44:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f58:	78bb      	ldrb	r3, [r7, #2]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d102      	bne.n	8004f64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_PCD_EP_Open+0xaa>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e00e      	b.n	8004f90 <HAL_PCD_EP_Open+0xc8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f003 f8a5 	bl	80080d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8004f8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	da0f      	bge.n	8004fcc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 020f 	and.w	r2, r3, #15
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	3310      	adds	r3, #16
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	705a      	strb	r2, [r3, #1]
 8004fca:	e00f      	b.n	8004fec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 020f 	and.w	r2, r3, #15
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_PCD_EP_Close+0x6e>
 8005002:	2302      	movs	r3, #2
 8005004:	e00e      	b.n	8005024 <HAL_PCD_EP_Close+0x8c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	4618      	mov	r0, r3
 8005016:	f003 f8e3 	bl	80081e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	460b      	mov	r3, r1
 800503a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800503c:	7afb      	ldrb	r3, [r7, #11]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2200      	movs	r2, #0
 800506c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800506e:	7afb      	ldrb	r3, [r7, #11]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	b2da      	uxtb	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	799b      	ldrb	r3, [r3, #6]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d102      	bne.n	8005088 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	799b      	ldrb	r3, [r3, #6]
 8005090:	461a      	mov	r2, r3
 8005092:	6979      	ldr	r1, [r7, #20]
 8005094:	f003 f980 	bl	8008398 <USB_EPStartXfer>

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80050c4:	681b      	ldr	r3, [r3, #0]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	603b      	str	r3, [r7, #0]
 80050de:	460b      	mov	r3, r1
 80050e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	f003 020f 	and.w	r2, r3, #15
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	3310      	adds	r3, #16
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	3304      	adds	r3, #4
 80050f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2201      	movs	r2, #1
 8005110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005112:	7afb      	ldrb	r3, [r7, #11]
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	b2da      	uxtb	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	799b      	ldrb	r3, [r3, #6]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	799b      	ldrb	r3, [r3, #6]
 8005134:	461a      	mov	r2, r3
 8005136:	6979      	ldr	r1, [r7, #20]
 8005138:	f003 f92e 	bl	8008398 <USB_EPStartXfer>

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	7912      	ldrb	r2, [r2, #4]
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e04f      	b.n	8005204 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	da0f      	bge.n	800518c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	f003 020f 	and.w	r2, r3, #15
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	3310      	adds	r3, #16
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4413      	add	r3, r2
 8005180:	3304      	adds	r3, #4
 8005182:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	705a      	strb	r2, [r3, #1]
 800518a:	e00d      	b.n	80051a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	4613      	mov	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	3304      	adds	r3, #4
 80051a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_PCD_EP_SetStall+0x82>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e01d      	b.n	8005204 <HAL_PCD_EP_SetStall+0xbe>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f003 fcb6 	bl	8008b48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7999      	ldrb	r1, [r3, #6]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80051f4:	461a      	mov	r2, r3
 80051f6:	f003 fea7 	bl	8008f48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	7912      	ldrb	r2, [r2, #4]
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e042      	b.n	80052b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800522a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800522e:	2b00      	cmp	r3, #0
 8005230:	da0f      	bge.n	8005252 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	f003 020f 	and.w	r2, r3, #15
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	3310      	adds	r3, #16
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	3304      	adds	r3, #4
 8005248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	705a      	strb	r2, [r3, #1]
 8005250:	e00f      	b.n	8005272 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	3304      	adds	r3, #4
 800526a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_PCD_EP_ClrStall+0x86>
 800528e:	2302      	movs	r3, #2
 8005290:	e00e      	b.n	80052b0 <HAL_PCD_EP_ClrStall+0xa4>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f003 fcbf 	bl	8008c24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80052c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da0c      	bge.n	80052e6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	f003 020f 	and.w	r2, r3, #15
 80052d2:	4613      	mov	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	3310      	adds	r3, #16
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4413      	add	r3, r2
 80052e0:	3304      	adds	r3, #4
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e00c      	b.n	8005300 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	4618      	mov	r0, r3
 8005308:	f003 fade 	bl	80088c8 <USB_EPStopXfer>
 800530c:	4603      	mov	r3, r0
 800530e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005310:	7afb      	ldrb	r3, [r7, #11]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b08a      	sub	sp, #40	; 0x28
 800531e:	af02      	add	r7, sp, #8
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	3310      	adds	r3, #16
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	3304      	adds	r3, #4
 8005340:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	429a      	cmp	r2, r3
 800534c:	d901      	bls.n	8005352 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e06b      	b.n	800542a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	429a      	cmp	r2, r3
 8005366:	d902      	bls.n	800536e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	3303      	adds	r3, #3
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005376:	e02a      	b.n	80053ce <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	429a      	cmp	r2, r3
 800538c:	d902      	bls.n	8005394 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	3303      	adds	r3, #3
 8005398:	089b      	lsrs	r3, r3, #2
 800539a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68d9      	ldr	r1, [r3, #12]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4603      	mov	r3, r0
 80053b0:	6978      	ldr	r0, [r7, #20]
 80053b2:	f003 fb33 	bl	8008a1c <USB_WritePacket>

    ep->xfer_buff  += len;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	441a      	add	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d809      	bhi.n	80053f8 <PCD_WriteEmptyTxFifo+0xde>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d203      	bcs.n	80053f8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1bf      	bne.n	8005378 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	429a      	cmp	r2, r3
 8005402:	d811      	bhi.n	8005428 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	2201      	movs	r2, #1
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	43db      	mvns	r3, r3
 800541e:	6939      	ldr	r1, [r7, #16]
 8005420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005424:	4013      	ands	r3, r2
 8005426:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	333c      	adds	r3, #60	; 0x3c
 800544c:	3304      	adds	r3, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	799b      	ldrb	r3, [r3, #6]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d17b      	bne.n	8005562 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4a61      	ldr	r2, [pc, #388]	; (80055fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	f240 80b9 	bls.w	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80b3 	beq.w	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005496:	461a      	mov	r2, r3
 8005498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800549c:	6093      	str	r3, [r2, #8]
 800549e:	e0a7      	b.n	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b6:	461a      	mov	r2, r3
 80054b8:	2320      	movs	r3, #32
 80054ba:	6093      	str	r3, [r2, #8]
 80054bc:	e098      	b.n	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 8093 	bne.w	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	4a4b      	ldr	r2, [pc, #300]	; (80055fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d90f      	bls.n	80054f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	461a      	mov	r2, r3
 80054ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ee:	6093      	str	r3, [r2, #8]
 80054f0:	e07e      	b.n	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4413      	add	r3, r2
 8005504:	3304      	adds	r3, #4
 8005506:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	0159      	lsls	r1, r3, #5
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	440b      	add	r3, r1
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800551e:	1ad2      	subs	r2, r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d114      	bne.n	8005554 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800553c:	461a      	mov	r2, r3
 800553e:	2101      	movs	r1, #1
 8005540:	f003 fd02 	bl	8008f48 <USB_EP0_OutStart>
 8005544:	e006      	b.n	8005554 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	441a      	add	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f009 f8fe 	bl	800e75c <HAL_PCD_DataOutStageCallback>
 8005560:	e046      	b.n	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4a26      	ldr	r2, [pc, #152]	; (8005600 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d124      	bne.n	80055b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	461a      	mov	r2, r3
 8005582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005586:	6093      	str	r3, [r2, #8]
 8005588:	e032      	b.n	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f003 0320 	and.w	r3, r3, #32
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	2320      	movs	r3, #32
 80055a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f009 f8d5 	bl	800e75c <HAL_PCD_DataOutStageCallback>
 80055b2:	e01d      	b.n	80055f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d114      	bne.n	80055e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80055dc:	461a      	mov	r2, r3
 80055de:	2100      	movs	r1, #0
 80055e0:	f003 fcb2 	bl	8008f48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f009 f8b6 	bl	800e75c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	4f54300a 	.word	0x4f54300a
 8005600:	4f54310a 	.word	0x4f54310a

08005604 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	333c      	adds	r3, #60	; 0x3c
 800561c:	3304      	adds	r3, #4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <PCD_EP_OutSetupPacket_int+0x88>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d90e      	bls.n	8005658 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	461a      	mov	r2, r3
 8005652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005656:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f009 f86d 	bl	800e738 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a0a      	ldr	r2, [pc, #40]	; (800568c <PCD_EP_OutSetupPacket_int+0x88>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d90c      	bls.n	8005680 <PCD_EP_OutSetupPacket_int+0x7c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	799b      	ldrb	r3, [r3, #6]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d108      	bne.n	8005680 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8005678:	461a      	mov	r2, r3
 800567a:	2101      	movs	r1, #1
 800567c:	f003 fc64 	bl	8008f48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	4f54300a 	.word	0x4f54300a

08005690 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
 800569c:	4613      	mov	r3, r2
 800569e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d107      	bne.n	80056be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80056ae:	883b      	ldrh	r3, [r7, #0]
 80056b0:	0419      	lsls	r1, r3, #16
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	629a      	str	r2, [r3, #40]	; 0x28
 80056bc:	e028      	b.n	8005710 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4413      	add	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]
 80056d0:	e00d      	b.n	80056ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	3340      	adds	r3, #64	; 0x40
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	3301      	adds	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d3ec      	bcc.n	80056d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80056f8:	883b      	ldrh	r3, [r7, #0]
 80056fa:	0418      	lsls	r0, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6819      	ldr	r1, [r3, #0]
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	3b01      	subs	r3, #1
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	4302      	orrs	r2, r0
 8005708:	3340      	adds	r3, #64	; 0x40
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e267      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d075      	beq.n	8005862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005776:	4b88      	ldr	r3, [pc, #544]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b04      	cmp	r3, #4
 8005780:	d00c      	beq.n	800579c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005782:	4b85      	ldr	r3, [pc, #532]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800578a:	2b08      	cmp	r3, #8
 800578c:	d112      	bne.n	80057b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800578e:	4b82      	ldr	r3, [pc, #520]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579a:	d10b      	bne.n	80057b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	4b7e      	ldr	r3, [pc, #504]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d05b      	beq.n	8005860 <HAL_RCC_OscConfig+0x108>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d157      	bne.n	8005860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e242      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057bc:	d106      	bne.n	80057cc <HAL_RCC_OscConfig+0x74>
 80057be:	4b76      	ldr	r3, [pc, #472]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a75      	ldr	r2, [pc, #468]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e01d      	b.n	8005808 <HAL_RCC_OscConfig+0xb0>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057d4:	d10c      	bne.n	80057f0 <HAL_RCC_OscConfig+0x98>
 80057d6:	4b70      	ldr	r3, [pc, #448]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a6f      	ldr	r2, [pc, #444]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4b6d      	ldr	r3, [pc, #436]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a6c      	ldr	r2, [pc, #432]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e00b      	b.n	8005808 <HAL_RCC_OscConfig+0xb0>
 80057f0:	4b69      	ldr	r3, [pc, #420]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a68      	ldr	r2, [pc, #416]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	4b66      	ldr	r3, [pc, #408]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a65      	ldr	r2, [pc, #404]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d013      	beq.n	8005838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fd fede 	bl	80035d0 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005818:	f7fd feda 	bl	80035d0 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b64      	cmp	r3, #100	; 0x64
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e207      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582a:	4b5b      	ldr	r3, [pc, #364]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCC_OscConfig+0xc0>
 8005836:	e014      	b.n	8005862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fd feca 	bl	80035d0 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd fec6 	bl	80035d0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e1f3      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005852:	4b51      	ldr	r3, [pc, #324]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0xe8>
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d063      	beq.n	8005936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800586e:	4b4a      	ldr	r3, [pc, #296]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800587a:	4b47      	ldr	r3, [pc, #284]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005882:	2b08      	cmp	r3, #8
 8005884:	d11c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005886:	4b44      	ldr	r3, [pc, #272]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d116      	bne.n	80058c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005892:	4b41      	ldr	r3, [pc, #260]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_RCC_OscConfig+0x152>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d001      	beq.n	80058aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e1c7      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058aa:	4b3b      	ldr	r3, [pc, #236]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4937      	ldr	r1, [pc, #220]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058be:	e03a      	b.n	8005936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d020      	beq.n	800590a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c8:	4b34      	ldr	r3, [pc, #208]	; (800599c <HAL_RCC_OscConfig+0x244>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ce:	f7fd fe7f 	bl	80035d0 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058d6:	f7fd fe7b 	bl	80035d0 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e1a8      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e8:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f4:	4b28      	ldr	r3, [pc, #160]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	4925      	ldr	r1, [pc, #148]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 8005904:	4313      	orrs	r3, r2
 8005906:	600b      	str	r3, [r1, #0]
 8005908:	e015      	b.n	8005936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <HAL_RCC_OscConfig+0x244>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fd fe5e 	bl	80035d0 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005918:	f7fd fe5a 	bl	80035d0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e187      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592a:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d036      	beq.n	80059b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d016      	beq.n	8005978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800594a:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <HAL_RCC_OscConfig+0x248>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005950:	f7fd fe3e 	bl	80035d0 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005958:	f7fd fe3a 	bl	80035d0 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e167      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <HAL_RCC_OscConfig+0x240>)
 800596c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x200>
 8005976:	e01b      	b.n	80059b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005978:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <HAL_RCC_OscConfig+0x248>)
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597e:	f7fd fe27 	bl	80035d0 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005984:	e00e      	b.n	80059a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005986:	f7fd fe23 	bl	80035d0 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d907      	bls.n	80059a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e150      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
 8005998:	40023800 	.word	0x40023800
 800599c:	42470000 	.word	0x42470000
 80059a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a4:	4b88      	ldr	r3, [pc, #544]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1ea      	bne.n	8005986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8097 	beq.w	8005aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c2:	4b81      	ldr	r3, [pc, #516]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ce:	2300      	movs	r3, #0
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	4b7d      	ldr	r3, [pc, #500]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	4a7c      	ldr	r2, [pc, #496]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059dc:	6413      	str	r3, [r2, #64]	; 0x40
 80059de:	4b7a      	ldr	r3, [pc, #488]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ee:	4b77      	ldr	r3, [pc, #476]	; (8005bcc <HAL_RCC_OscConfig+0x474>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d118      	bne.n	8005a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059fa:	4b74      	ldr	r3, [pc, #464]	; (8005bcc <HAL_RCC_OscConfig+0x474>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a73      	ldr	r2, [pc, #460]	; (8005bcc <HAL_RCC_OscConfig+0x474>)
 8005a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a06:	f7fd fde3 	bl	80035d0 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0e:	f7fd fddf 	bl	80035d0 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e10c      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a20:	4b6a      	ldr	r3, [pc, #424]	; (8005bcc <HAL_RCC_OscConfig+0x474>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0f0      	beq.n	8005a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d106      	bne.n	8005a42 <HAL_RCC_OscConfig+0x2ea>
 8005a34:	4b64      	ldr	r3, [pc, #400]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	4a63      	ldr	r2, [pc, #396]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a40:	e01c      	b.n	8005a7c <HAL_RCC_OscConfig+0x324>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b05      	cmp	r3, #5
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x30c>
 8005a4a:	4b5f      	ldr	r3, [pc, #380]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a5e      	ldr	r2, [pc, #376]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
 8005a56:	4b5c      	ldr	r3, [pc, #368]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	f043 0301 	orr.w	r3, r3, #1
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70
 8005a62:	e00b      	b.n	8005a7c <HAL_RCC_OscConfig+0x324>
 8005a64:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	4a57      	ldr	r2, [pc, #348]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a70:	4b55      	ldr	r3, [pc, #340]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	4a54      	ldr	r2, [pc, #336]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a84:	f7fd fda4 	bl	80035d0 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8a:	e00a      	b.n	8005aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a8c:	f7fd fda0 	bl	80035d0 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e0cb      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa2:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0ee      	beq.n	8005a8c <HAL_RCC_OscConfig+0x334>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab0:	f7fd fd8e 	bl	80035d0 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab8:	f7fd fd8a 	bl	80035d0 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e0b5      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ace:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1ee      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d105      	bne.n	8005aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ae0:	4b39      	ldr	r3, [pc, #228]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae4:	4a38      	ldr	r2, [pc, #224]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a1 	beq.w	8005c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005af6:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d05c      	beq.n	8005bbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d141      	bne.n	8005b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0a:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b10:	f7fd fd5e 	bl	80035d0 <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fd fd5a 	bl	80035d0 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e087      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b2a:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	019b      	lsls	r3, r3, #6
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	041b      	lsls	r3, r3, #16
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	061b      	lsls	r3, r3, #24
 8005b5a:	491b      	ldr	r1, [pc, #108]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b60:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b66:	f7fd fd33 	bl	80035d0 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b6e:	f7fd fd2f 	bl	80035d0 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e05c      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b80:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCC_OscConfig+0x416>
 8005b8c:	e054      	b.n	8005c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8e:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <HAL_RCC_OscConfig+0x478>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b94:	f7fd fd1c 	bl	80035d0 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fd fd18 	bl	80035d0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e045      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x444>
 8005bba:	e03d      	b.n	8005c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d107      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e038      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
 8005bc8:	40023800 	.word	0x40023800
 8005bcc:	40007000 	.word	0x40007000
 8005bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <HAL_RCC_OscConfig+0x4ec>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d028      	beq.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d121      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d11a      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d111      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800

08005c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0cc      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c5c:	4b68      	ldr	r3, [pc, #416]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d90c      	bls.n	8005c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6a:	4b65      	ldr	r3, [pc, #404]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	4b63      	ldr	r3, [pc, #396]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d001      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0b8      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d020      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c9c:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4a58      	ldr	r2, [pc, #352]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ca6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0308 	and.w	r3, r3, #8
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cb4:	4b53      	ldr	r3, [pc, #332]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	4a52      	ldr	r2, [pc, #328]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc0:	4b50      	ldr	r3, [pc, #320]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	494d      	ldr	r1, [pc, #308]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d044      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce6:	4b47      	ldr	r3, [pc, #284]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d119      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e07f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d06:	4b3f      	ldr	r3, [pc, #252]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e06f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d16:	4b3b      	ldr	r3, [pc, #236]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e067      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 0203 	bic.w	r2, r3, #3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4934      	ldr	r1, [pc, #208]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d38:	f7fd fc4a 	bl	80035d0 <HAL_GetTick>
 8005d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	e00a      	b.n	8005d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d40:	f7fd fc46 	bl	80035d0 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e04f      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 020c 	and.w	r2, r3, #12
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d1eb      	bne.n	8005d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d68:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d20c      	bcs.n	8005d90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d76:	4b22      	ldr	r3, [pc, #136]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7e:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d001      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e032      	b.n	8005df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4916      	ldr	r1, [pc, #88]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d009      	beq.n	8005dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	490e      	ldr	r1, [pc, #56]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dce:	f000 f821 	bl	8005e14 <HAL_RCC_GetSysClockFreq>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	490a      	ldr	r1, [pc, #40]	; (8005e08 <HAL_RCC_ClockConfig+0x1c0>)
 8005de0:	5ccb      	ldrb	r3, [r1, r3]
 8005de2:	fa22 f303 	lsr.w	r3, r2, r3
 8005de6:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fd fbaa 	bl	8003548 <HAL_InitTick>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40023c00 	.word	0x40023c00
 8005e04:	40023800 	.word	0x40023800
 8005e08:	08012278 	.word	0x08012278
 8005e0c:	200000b8 	.word	0x200000b8
 8005e10:	200000bc 	.word	0x200000bc

08005e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e18:	b094      	sub	sp, #80	; 0x50
 8005e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e20:	2300      	movs	r3, #0
 8005e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e24:	2300      	movs	r3, #0
 8005e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e2c:	4b79      	ldr	r3, [pc, #484]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 030c 	and.w	r3, r3, #12
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d00d      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0x40>
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	f200 80e1 	bhi.w	8006000 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x34>
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e46:	e0db      	b.n	8006000 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e48:	4b73      	ldr	r3, [pc, #460]	; (8006018 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e4c:	e0db      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e4e:	4b73      	ldr	r3, [pc, #460]	; (800601c <HAL_RCC_GetSysClockFreq+0x208>)
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e52:	e0d8      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e54:	4b6f      	ldr	r3, [pc, #444]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e5e:	4b6d      	ldr	r3, [pc, #436]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d063      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6a:	4b6a      	ldr	r3, [pc, #424]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	099b      	lsrs	r3, r3, #6
 8005e70:	2200      	movs	r2, #0
 8005e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	; 0x34
 8005e82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e86:	4622      	mov	r2, r4
 8005e88:	462b      	mov	r3, r5
 8005e8a:	f04f 0000 	mov.w	r0, #0
 8005e8e:	f04f 0100 	mov.w	r1, #0
 8005e92:	0159      	lsls	r1, r3, #5
 8005e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e98:	0150      	lsls	r0, r2, #5
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	1a51      	subs	r1, r2, r1
 8005ea2:	6139      	str	r1, [r7, #16]
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005eb8:	4659      	mov	r1, fp
 8005eba:	018b      	lsls	r3, r1, #6
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	018a      	lsls	r2, r1, #6
 8005ec6:	4651      	mov	r1, sl
 8005ec8:	ebb2 0801 	subs.w	r8, r2, r1
 8005ecc:	4659      	mov	r1, fp
 8005ece:	eb63 0901 	sbc.w	r9, r3, r1
 8005ed2:	f04f 0200 	mov.w	r2, #0
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	4699      	mov	r9, r3
 8005eea:	4623      	mov	r3, r4
 8005eec:	eb18 0303 	adds.w	r3, r8, r3
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	eb49 0303 	adc.w	r3, r9, r3
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f06:	4629      	mov	r1, r5
 8005f08:	024b      	lsls	r3, r1, #9
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f10:	4621      	mov	r1, r4
 8005f12:	024a      	lsls	r2, r1, #9
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f24:	f7fa fea0 	bl	8000c68 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f30:	e058      	b.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f32:	4b38      	ldr	r3, [pc, #224]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	2300      	movs	r3, #0
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
 8005f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f04f 0000 	mov.w	r0, #0
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	0159      	lsls	r1, r3, #5
 8005f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f5e:	0150      	lsls	r0, r2, #5
 8005f60:	4602      	mov	r2, r0
 8005f62:	460b      	mov	r3, r1
 8005f64:	4641      	mov	r1, r8
 8005f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f84:	ebb2 040a 	subs.w	r4, r2, sl
 8005f88:	eb63 050b 	sbc.w	r5, r3, fp
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	00eb      	lsls	r3, r5, #3
 8005f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f9a:	00e2      	lsls	r2, r4, #3
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	4643      	mov	r3, r8
 8005fa2:	18e3      	adds	r3, r4, r3
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	eb45 0303 	adc.w	r3, r5, r3
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	f04f 0200 	mov.w	r2, #0
 8005fb2:	f04f 0300 	mov.w	r3, #0
 8005fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fba:	4629      	mov	r1, r5
 8005fbc:	028b      	lsls	r3, r1, #10
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	028a      	lsls	r2, r1, #10
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fce:	2200      	movs	r2, #0
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	61fa      	str	r2, [r7, #28]
 8005fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd8:	f7fa fe46 	bl	8000c68 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fe4:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	0c1b      	lsrs	r3, r3, #16
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	3301      	adds	r3, #1
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ffe:	e002      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <HAL_RCC_GetSysClockFreq+0x204>)
 8006002:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006008:	4618      	mov	r0, r3
 800600a:	3750      	adds	r7, #80	; 0x50
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	00f42400 	.word	0x00f42400
 800601c:	007a1200 	.word	0x007a1200

08006020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006024:	4b03      	ldr	r3, [pc, #12]	; (8006034 <HAL_RCC_GetHCLKFreq+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	200000b8 	.word	0x200000b8

08006038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800603c:	f7ff fff0 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006040:	4602      	mov	r2, r0
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	0a9b      	lsrs	r3, r3, #10
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	4903      	ldr	r1, [pc, #12]	; (800605c <HAL_RCC_GetPCLK1Freq+0x24>)
 800604e:	5ccb      	ldrb	r3, [r1, r3]
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40023800 	.word	0x40023800
 800605c:	08012288 	.word	0x08012288

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006064:	f7ff ffdc 	bl	8006020 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0b5b      	lsrs	r3, r3, #13
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	08012288 	.word	0x08012288

08006088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e041      	b.n	800611e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fc ff78 	bl	8002fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f000 f9f0 	bl	80064ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	d001      	beq.n	8006140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e04e      	b.n	80061de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a23      	ldr	r2, [pc, #140]	; (80061ec <HAL_TIM_Base_Start_IT+0xc4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d022      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d01d      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1f      	ldr	r2, [pc, #124]	; (80061f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d018      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1e      	ldr	r2, [pc, #120]	; (80061f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00e      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d009      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <HAL_TIM_Base_Start_IT+0xd8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d004      	beq.n	80061a8 <HAL_TIM_Base_Start_IT+0x80>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <HAL_TIM_Base_Start_IT+0xdc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d111      	bne.n	80061cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b06      	cmp	r3, #6
 80061b8:	d010      	beq.n	80061dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	e007      	b.n	80061dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0201 	orr.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40010400 	.word	0x40010400
 8006200:	40014000 	.word	0x40014000
 8006204:	40001800 	.word	0x40001800

08006208 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6a1a      	ldr	r2, [r3, #32]
 8006226:	f241 1311 	movw	r3, #4369	; 0x1111
 800622a:	4013      	ands	r3, r2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <HAL_TIM_Base_Stop_IT+0x48>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	f240 4344 	movw	r3, #1092	; 0x444
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d107      	bne.n	8006250 <HAL_TIM_Base_Stop_IT+0x48>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0201 	bic.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d020      	beq.n	80062ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01b      	beq.n	80062ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0202 	mvn.w	r2, #2
 800629a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f8dc 	bl	800646e <HAL_TIM_IC_CaptureCallback>
 80062b6:	e005      	b.n	80062c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f8ce 	bl	800645a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f8df 	bl	8006482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d020      	beq.n	8006316 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01b      	beq.n	8006316 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f06f 0204 	mvn.w	r2, #4
 80062e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f8b6 	bl	800646e <HAL_TIM_IC_CaptureCallback>
 8006302:	e005      	b.n	8006310 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8a8 	bl	800645a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f8b9 	bl	8006482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01b      	beq.n	8006362 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f06f 0208 	mvn.w	r2, #8
 8006332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2204      	movs	r2, #4
 8006338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f890 	bl	800646e <HAL_TIM_IC_CaptureCallback>
 800634e:	e005      	b.n	800635c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f882 	bl	800645a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f893 	bl	8006482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d020      	beq.n	80063ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01b      	beq.n	80063ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f06f 0210 	mvn.w	r2, #16
 800637e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2208      	movs	r2, #8
 8006384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f86a 	bl	800646e <HAL_TIM_IC_CaptureCallback>
 800639a:	e005      	b.n	80063a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f85c 	bl	800645a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f86d 	bl	8006482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00c      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f06f 0201 	mvn.w	r2, #1
 80063ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f83a 	bl	8006446 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f98d 	bl	8006710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00c      	beq.n	800641a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f83e 	bl	8006496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f06f 0220 	mvn.w	r2, #32
 8006436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f95f 	bl	80066fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a46      	ldr	r2, [pc, #280]	; (80065d8 <TIM_Base_SetConfig+0x12c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ca:	d00f      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a43      	ldr	r2, [pc, #268]	; (80065dc <TIM_Base_SetConfig+0x130>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00b      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a42      	ldr	r2, [pc, #264]	; (80065e0 <TIM_Base_SetConfig+0x134>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d007      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a41      	ldr	r2, [pc, #260]	; (80065e4 <TIM_Base_SetConfig+0x138>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a40      	ldr	r2, [pc, #256]	; (80065e8 <TIM_Base_SetConfig+0x13c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a35      	ldr	r2, [pc, #212]	; (80065d8 <TIM_Base_SetConfig+0x12c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d02b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650c:	d027      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a32      	ldr	r2, [pc, #200]	; (80065dc <TIM_Base_SetConfig+0x130>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d023      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a31      	ldr	r2, [pc, #196]	; (80065e0 <TIM_Base_SetConfig+0x134>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01f      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a30      	ldr	r2, [pc, #192]	; (80065e4 <TIM_Base_SetConfig+0x138>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2f      	ldr	r2, [pc, #188]	; (80065e8 <TIM_Base_SetConfig+0x13c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d017      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2e      	ldr	r2, [pc, #184]	; (80065ec <TIM_Base_SetConfig+0x140>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <TIM_Base_SetConfig+0x144>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <TIM_Base_SetConfig+0x148>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2b      	ldr	r2, [pc, #172]	; (80065f8 <TIM_Base_SetConfig+0x14c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a2a      	ldr	r2, [pc, #168]	; (80065fc <TIM_Base_SetConfig+0x150>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a29      	ldr	r2, [pc, #164]	; (8006600 <TIM_Base_SetConfig+0x154>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a10      	ldr	r2, [pc, #64]	; (80065d8 <TIM_Base_SetConfig+0x12c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_Base_SetConfig+0xf8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a12      	ldr	r2, [pc, #72]	; (80065e8 <TIM_Base_SetConfig+0x13c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d103      	bne.n	80065ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d105      	bne.n	80065ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	611a      	str	r2, [r3, #16]
  }
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40000c00 	.word	0x40000c00
 80065e8:	40010400 	.word	0x40010400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800
 80065f8:	40001800 	.word	0x40001800
 80065fc:	40001c00 	.word	0x40001c00
 8006600:	40002000 	.word	0x40002000

08006604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006618:	2302      	movs	r3, #2
 800661a:	e05a      	b.n	80066d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a21      	ldr	r2, [pc, #132]	; (80066e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d022      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006668:	d01d      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d018      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1b      	ldr	r2, [pc, #108]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1a      	ldr	r2, [pc, #104]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00e      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d009      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a17      	ldr	r2, [pc, #92]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d004      	beq.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10c      	bne.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	40010400 	.word	0x40010400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40001800 	.word	0x40001800

080066fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e042      	b.n	80067bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fc fc52 	bl	8002ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2224      	movs	r2, #36	; 0x24
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fc85 	bl	8007078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800677c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800678c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800679c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b0ba      	sub	sp, #232	; 0xe8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10f      	bne.n	800682a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <HAL_UART_IRQHandler+0x66>
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb69 	bl	8006efa <UART_Receive_IT>
      return;
 8006828:	e25b      	b.n	8006ce2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800682a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80de 	beq.w	80069f0 <HAL_UART_IRQHandler+0x22c>
 8006834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006844:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80d1 	beq.w	80069f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00b      	beq.n	8006872 <HAL_UART_IRQHandler+0xae>
 800685a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	f043 0201 	orr.w	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_UART_IRQHandler+0xd2>
 800687e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688e:	f043 0202 	orr.w	r2, r3, #2
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <HAL_UART_IRQHandler+0xf6>
 80068a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	f043 0204 	orr.w	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d011      	beq.n	80068ea <HAL_UART_IRQHandler+0x126>
 80068c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d105      	bne.n	80068de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f043 0208 	orr.w	r2, r3, #8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 81f2 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <HAL_UART_IRQHandler+0x14e>
 8006900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 faf4 	bl	8006efa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	bf0c      	ite	eq
 8006920:	2301      	moveq	r3, #1
 8006922:	2300      	movne	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d103      	bne.n	800693e <HAL_UART_IRQHandler+0x17a>
 8006936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800693a:	2b00      	cmp	r3, #0
 800693c:	d04f      	beq.n	80069de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f9fc 	bl	8006d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d141      	bne.n	80069d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3314      	adds	r3, #20
 8006958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006968:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800696c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3314      	adds	r3, #20
 800697a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800697e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800698a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1d9      	bne.n	8006952 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d013      	beq.n	80069ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	4a7e      	ldr	r2, [pc, #504]	; (8006ba4 <HAL_UART_IRQHandler+0x3e0>)
 80069ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd f86c 	bl	8003a90 <HAL_DMA_Abort_IT>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d016      	beq.n	80069ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069c8:	4610      	mov	r0, r2
 80069ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069cc:	e00e      	b.n	80069ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f99e 	bl	8006d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d4:	e00a      	b.n	80069ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f99a 	bl	8006d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	e006      	b.n	80069ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f996 	bl	8006d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80069ea:	e175      	b.n	8006cd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ec:	bf00      	nop
    return;
 80069ee:	e173      	b.n	8006cd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	f040 814f 	bne.w	8006c98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8148 	beq.w	8006c98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8141 	beq.w	8006c98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	60bb      	str	r3, [r7, #8]
 8006a2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a36:	2b40      	cmp	r3, #64	; 0x40
 8006a38:	f040 80b6 	bne.w	8006ba8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8145 	beq.w	8006cdc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	f080 813e 	bcs.w	8006cdc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a72:	f000 8088 	beq.w	8006b86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	330c      	adds	r3, #12
 8006a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006aa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1d9      	bne.n	8006a76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ae6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e1      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3314      	adds	r3, #20
 8006b04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3314      	adds	r3, #20
 8006b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e3      	bne.n	8006afe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b56:	f023 0310 	bic.w	r3, r3, #16
 8006b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b68:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e3      	bne.n	8006b44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fc ff15 	bl	80039b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8c1 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ba2:	e09b      	b.n	8006cdc <HAL_UART_IRQHandler+0x518>
 8006ba4:	08006e03 	.word	0x08006e03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 808e 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006bc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8089 	beq.w	8006ce0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006bf2:	647a      	str	r2, [r7, #68]	; 0x44
 8006bf4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e3      	bne.n	8006bce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3314      	adds	r3, #20
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	623b      	str	r3, [r7, #32]
   return(result);
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	f023 0301 	bic.w	r3, r3, #1
 8006c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3314      	adds	r3, #20
 8006c26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c32:	e841 2300 	strex	r3, r2, [r1]
 8006c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e3      	bne.n	8006c06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f023 0310 	bic.w	r3, r3, #16
 8006c62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c70:	61fa      	str	r2, [r7, #28]
 8006c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c74:	69b9      	ldr	r1, [r7, #24]
 8006c76:	69fa      	ldr	r2, [r7, #28]
 8006c78:	e841 2300 	strex	r3, r2, [r1]
 8006c7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e3      	bne.n	8006c4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f847 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c96:	e023      	b.n	8006ce0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d009      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x4f4>
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8ba 	bl	8006e2a <UART_Transmit_IT>
    return;
 8006cb6:	e014      	b.n	8006ce2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00e      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x51e>
 8006cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d008      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8fa 	bl	8006eca <UART_EndTransmit_IT>
    return;
 8006cd6:	e004      	b.n	8006ce2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006cd8:	bf00      	nop
 8006cda:	e002      	b.n	8006ce2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006cdc:	bf00      	nop
 8006cde:	e000      	b.n	8006ce2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ce0:	bf00      	nop
  }
}
 8006ce2:	37e8      	adds	r7, #232	; 0xe8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b095      	sub	sp, #84	; 0x54
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d64:	643a      	str	r2, [r7, #64]	; 0x40
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e5      	bne.n	8006d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3314      	adds	r3, #20
 8006d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	f023 0301 	bic.w	r3, r3, #1
 8006d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3314      	adds	r3, #20
 8006d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e5      	bne.n	8006d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d119      	bne.n	8006de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	330c      	adds	r3, #12
 8006dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f023 0310 	bic.w	r3, r3, #16
 8006dca:	647b      	str	r3, [r7, #68]	; 0x44
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd4:	61ba      	str	r2, [r7, #24]
 8006dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	e841 2300 	strex	r3, r2, [r1]
 8006de0:	613b      	str	r3, [r7, #16]
   return(result);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1e5      	bne.n	8006db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006df6:	bf00      	nop
 8006df8:	3754      	adds	r7, #84	; 0x54
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff ff77 	bl	8006d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e22:	bf00      	nop
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b21      	cmp	r3, #33	; 0x21
 8006e3c:	d13e      	bne.n	8006ebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	d114      	bne.n	8006e72 <UART_Transmit_IT+0x48>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d110      	bne.n	8006e72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	1c9a      	adds	r2, r3, #2
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	621a      	str	r2, [r3, #32]
 8006e70:	e008      	b.n	8006e84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	1c59      	adds	r1, r3, #1
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6211      	str	r1, [r2, #32]
 8006e7c:	781a      	ldrb	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4619      	mov	r1, r3
 8006e92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10f      	bne.n	8006eb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	e000      	b.n	8006ebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ebc:	2302      	movs	r3, #2
  }
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2220      	movs	r2, #32
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff fefc 	bl	8006ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b08c      	sub	sp, #48	; 0x30
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b22      	cmp	r3, #34	; 0x22
 8006f0c:	f040 80ae 	bne.w	800706c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f18:	d117      	bne.n	8006f4a <UART_Receive_IT+0x50>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d113      	bne.n	8006f4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28
 8006f48:	e026      	b.n	8006f98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5c:	d007      	beq.n	8006f6e <UART_Receive_IT+0x74>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <UART_Receive_IT+0x82>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	e008      	b.n	8006f8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d15d      	bne.n	8007068 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0220 	bic.w	r2, r2, #32
 8006fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0201 	bic.w	r2, r2, #1
 8006fda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d135      	bne.n	800705e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	330c      	adds	r3, #12
 8006ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	e853 3f00 	ldrex	r3, [r3]
 8007006:	613b      	str	r3, [r7, #16]
   return(result);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f023 0310 	bic.w	r3, r3, #16
 800700e:	627b      	str	r3, [r7, #36]	; 0x24
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007018:	623a      	str	r2, [r7, #32]
 800701a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701c:	69f9      	ldr	r1, [r7, #28]
 800701e:	6a3a      	ldr	r2, [r7, #32]
 8007020:	e841 2300 	strex	r3, r2, [r1]
 8007024:	61bb      	str	r3, [r7, #24]
   return(result);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e5      	bne.n	8006ff8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	2b10      	cmp	r3, #16
 8007038:	d10a      	bne.n	8007050 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60fb      	str	r3, [r7, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	60fb      	str	r3, [r7, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff fe64 	bl	8006d24 <HAL_UARTEx_RxEventCallback>
 800705c:	e002      	b.n	8007064 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fe4c 	bl	8006cfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	e002      	b.n	800706e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	e000      	b.n	800706e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800706c:	2302      	movs	r3, #2
  }
}
 800706e:	4618      	mov	r0, r3
 8007070:	3730      	adds	r7, #48	; 0x30
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800707c:	b0c0      	sub	sp, #256	; 0x100
 800707e:	af00      	add	r7, sp, #0
 8007080:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007094:	68d9      	ldr	r1, [r3, #12]
 8007096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	ea40 0301 	orr.w	r3, r0, r1
 80070a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	431a      	orrs	r2, r3
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070d0:	f021 010c 	bic.w	r1, r1, #12
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070de:	430b      	orrs	r3, r1
 80070e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f2:	6999      	ldr	r1, [r3, #24]
 80070f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	ea40 0301 	orr.w	r3, r0, r1
 80070fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	4b8f      	ldr	r3, [pc, #572]	; (8007344 <UART_SetConfig+0x2cc>)
 8007108:	429a      	cmp	r2, r3
 800710a:	d005      	beq.n	8007118 <UART_SetConfig+0xa0>
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4b8d      	ldr	r3, [pc, #564]	; (8007348 <UART_SetConfig+0x2d0>)
 8007114:	429a      	cmp	r2, r3
 8007116:	d104      	bne.n	8007122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007118:	f7fe ffa2 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 800711c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007120:	e003      	b.n	800712a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007122:	f7fe ff89 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 8007126:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007134:	f040 810c 	bne.w	8007350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800713c:	2200      	movs	r2, #0
 800713e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007142:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800714a:	4622      	mov	r2, r4
 800714c:	462b      	mov	r3, r5
 800714e:	1891      	adds	r1, r2, r2
 8007150:	65b9      	str	r1, [r7, #88]	; 0x58
 8007152:	415b      	adcs	r3, r3
 8007154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800715a:	4621      	mov	r1, r4
 800715c:	eb12 0801 	adds.w	r8, r2, r1
 8007160:	4629      	mov	r1, r5
 8007162:	eb43 0901 	adc.w	r9, r3, r1
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800717a:	4690      	mov	r8, r2
 800717c:	4699      	mov	r9, r3
 800717e:	4623      	mov	r3, r4
 8007180:	eb18 0303 	adds.w	r3, r8, r3
 8007184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007188:	462b      	mov	r3, r5
 800718a:	eb49 0303 	adc.w	r3, r9, r3
 800718e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800719e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80071a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80071a6:	460b      	mov	r3, r1
 80071a8:	18db      	adds	r3, r3, r3
 80071aa:	653b      	str	r3, [r7, #80]	; 0x50
 80071ac:	4613      	mov	r3, r2
 80071ae:	eb42 0303 	adc.w	r3, r2, r3
 80071b2:	657b      	str	r3, [r7, #84]	; 0x54
 80071b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80071bc:	f7f9 fd54 	bl	8000c68 <__aeabi_uldivmod>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4b61      	ldr	r3, [pc, #388]	; (800734c <UART_SetConfig+0x2d4>)
 80071c6:	fba3 2302 	umull	r2, r3, r3, r2
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	011c      	lsls	r4, r3, #4
 80071ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071d2:	2200      	movs	r2, #0
 80071d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80071dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80071e0:	4642      	mov	r2, r8
 80071e2:	464b      	mov	r3, r9
 80071e4:	1891      	adds	r1, r2, r2
 80071e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80071e8:	415b      	adcs	r3, r3
 80071ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071f0:	4641      	mov	r1, r8
 80071f2:	eb12 0a01 	adds.w	sl, r2, r1
 80071f6:	4649      	mov	r1, r9
 80071f8:	eb43 0b01 	adc.w	fp, r3, r1
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800720c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007210:	4692      	mov	sl, r2
 8007212:	469b      	mov	fp, r3
 8007214:	4643      	mov	r3, r8
 8007216:	eb1a 0303 	adds.w	r3, sl, r3
 800721a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800721e:	464b      	mov	r3, r9
 8007220:	eb4b 0303 	adc.w	r3, fp, r3
 8007224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007234:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800723c:	460b      	mov	r3, r1
 800723e:	18db      	adds	r3, r3, r3
 8007240:	643b      	str	r3, [r7, #64]	; 0x40
 8007242:	4613      	mov	r3, r2
 8007244:	eb42 0303 	adc.w	r3, r2, r3
 8007248:	647b      	str	r3, [r7, #68]	; 0x44
 800724a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800724e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007252:	f7f9 fd09 	bl	8000c68 <__aeabi_uldivmod>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	4611      	mov	r1, r2
 800725c:	4b3b      	ldr	r3, [pc, #236]	; (800734c <UART_SetConfig+0x2d4>)
 800725e:	fba3 2301 	umull	r2, r3, r3, r1
 8007262:	095b      	lsrs	r3, r3, #5
 8007264:	2264      	movs	r2, #100	; 0x64
 8007266:	fb02 f303 	mul.w	r3, r2, r3
 800726a:	1acb      	subs	r3, r1, r3
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007272:	4b36      	ldr	r3, [pc, #216]	; (800734c <UART_SetConfig+0x2d4>)
 8007274:	fba3 2302 	umull	r2, r3, r3, r2
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007280:	441c      	add	r4, r3
 8007282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007286:	2200      	movs	r2, #0
 8007288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800728c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007294:	4642      	mov	r2, r8
 8007296:	464b      	mov	r3, r9
 8007298:	1891      	adds	r1, r2, r2
 800729a:	63b9      	str	r1, [r7, #56]	; 0x38
 800729c:	415b      	adcs	r3, r3
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072a4:	4641      	mov	r1, r8
 80072a6:	1851      	adds	r1, r2, r1
 80072a8:	6339      	str	r1, [r7, #48]	; 0x30
 80072aa:	4649      	mov	r1, r9
 80072ac:	414b      	adcs	r3, r1
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
 80072b0:	f04f 0200 	mov.w	r2, #0
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80072bc:	4659      	mov	r1, fp
 80072be:	00cb      	lsls	r3, r1, #3
 80072c0:	4651      	mov	r1, sl
 80072c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072c6:	4651      	mov	r1, sl
 80072c8:	00ca      	lsls	r2, r1, #3
 80072ca:	4610      	mov	r0, r2
 80072cc:	4619      	mov	r1, r3
 80072ce:	4603      	mov	r3, r0
 80072d0:	4642      	mov	r2, r8
 80072d2:	189b      	adds	r3, r3, r2
 80072d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072d8:	464b      	mov	r3, r9
 80072da:	460a      	mov	r2, r1
 80072dc:	eb42 0303 	adc.w	r3, r2, r3
 80072e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072f8:	460b      	mov	r3, r1
 80072fa:	18db      	adds	r3, r3, r3
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fe:	4613      	mov	r3, r2
 8007300:	eb42 0303 	adc.w	r3, r2, r3
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800730a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800730e:	f7f9 fcab 	bl	8000c68 <__aeabi_uldivmod>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4b0d      	ldr	r3, [pc, #52]	; (800734c <UART_SetConfig+0x2d4>)
 8007318:	fba3 1302 	umull	r1, r3, r3, r2
 800731c:	095b      	lsrs	r3, r3, #5
 800731e:	2164      	movs	r1, #100	; 0x64
 8007320:	fb01 f303 	mul.w	r3, r1, r3
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	3332      	adds	r3, #50	; 0x32
 800732a:	4a08      	ldr	r2, [pc, #32]	; (800734c <UART_SetConfig+0x2d4>)
 800732c:	fba2 2303 	umull	r2, r3, r2, r3
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	f003 0207 	and.w	r2, r3, #7
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4422      	add	r2, r4
 800733e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007340:	e106      	b.n	8007550 <UART_SetConfig+0x4d8>
 8007342:	bf00      	nop
 8007344:	40011000 	.word	0x40011000
 8007348:	40011400 	.word	0x40011400
 800734c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007354:	2200      	movs	r2, #0
 8007356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800735a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800735e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007362:	4642      	mov	r2, r8
 8007364:	464b      	mov	r3, r9
 8007366:	1891      	adds	r1, r2, r2
 8007368:	6239      	str	r1, [r7, #32]
 800736a:	415b      	adcs	r3, r3
 800736c:	627b      	str	r3, [r7, #36]	; 0x24
 800736e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007372:	4641      	mov	r1, r8
 8007374:	1854      	adds	r4, r2, r1
 8007376:	4649      	mov	r1, r9
 8007378:	eb43 0501 	adc.w	r5, r3, r1
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	00eb      	lsls	r3, r5, #3
 8007386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800738a:	00e2      	lsls	r2, r4, #3
 800738c:	4614      	mov	r4, r2
 800738e:	461d      	mov	r5, r3
 8007390:	4643      	mov	r3, r8
 8007392:	18e3      	adds	r3, r4, r3
 8007394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007398:	464b      	mov	r3, r9
 800739a:	eb45 0303 	adc.w	r3, r5, r3
 800739e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073be:	4629      	mov	r1, r5
 80073c0:	008b      	lsls	r3, r1, #2
 80073c2:	4621      	mov	r1, r4
 80073c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073c8:	4621      	mov	r1, r4
 80073ca:	008a      	lsls	r2, r1, #2
 80073cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80073d0:	f7f9 fc4a 	bl	8000c68 <__aeabi_uldivmod>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4b60      	ldr	r3, [pc, #384]	; (800755c <UART_SetConfig+0x4e4>)
 80073da:	fba3 2302 	umull	r2, r3, r3, r2
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	011c      	lsls	r4, r3, #4
 80073e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073f4:	4642      	mov	r2, r8
 80073f6:	464b      	mov	r3, r9
 80073f8:	1891      	adds	r1, r2, r2
 80073fa:	61b9      	str	r1, [r7, #24]
 80073fc:	415b      	adcs	r3, r3
 80073fe:	61fb      	str	r3, [r7, #28]
 8007400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007404:	4641      	mov	r1, r8
 8007406:	1851      	adds	r1, r2, r1
 8007408:	6139      	str	r1, [r7, #16]
 800740a:	4649      	mov	r1, r9
 800740c:	414b      	adcs	r3, r1
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800741c:	4659      	mov	r1, fp
 800741e:	00cb      	lsls	r3, r1, #3
 8007420:	4651      	mov	r1, sl
 8007422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007426:	4651      	mov	r1, sl
 8007428:	00ca      	lsls	r2, r1, #3
 800742a:	4610      	mov	r0, r2
 800742c:	4619      	mov	r1, r3
 800742e:	4603      	mov	r3, r0
 8007430:	4642      	mov	r2, r8
 8007432:	189b      	adds	r3, r3, r2
 8007434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007438:	464b      	mov	r3, r9
 800743a:	460a      	mov	r2, r1
 800743c:	eb42 0303 	adc.w	r3, r2, r3
 8007440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	67bb      	str	r3, [r7, #120]	; 0x78
 800744e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800745c:	4649      	mov	r1, r9
 800745e:	008b      	lsls	r3, r1, #2
 8007460:	4641      	mov	r1, r8
 8007462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007466:	4641      	mov	r1, r8
 8007468:	008a      	lsls	r2, r1, #2
 800746a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800746e:	f7f9 fbfb 	bl	8000c68 <__aeabi_uldivmod>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4611      	mov	r1, r2
 8007478:	4b38      	ldr	r3, [pc, #224]	; (800755c <UART_SetConfig+0x4e4>)
 800747a:	fba3 2301 	umull	r2, r3, r3, r1
 800747e:	095b      	lsrs	r3, r3, #5
 8007480:	2264      	movs	r2, #100	; 0x64
 8007482:	fb02 f303 	mul.w	r3, r2, r3
 8007486:	1acb      	subs	r3, r1, r3
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	3332      	adds	r3, #50	; 0x32
 800748c:	4a33      	ldr	r2, [pc, #204]	; (800755c <UART_SetConfig+0x4e4>)
 800748e:	fba2 2303 	umull	r2, r3, r2, r3
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007498:	441c      	add	r4, r3
 800749a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800749e:	2200      	movs	r2, #0
 80074a0:	673b      	str	r3, [r7, #112]	; 0x70
 80074a2:	677a      	str	r2, [r7, #116]	; 0x74
 80074a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80074a8:	4642      	mov	r2, r8
 80074aa:	464b      	mov	r3, r9
 80074ac:	1891      	adds	r1, r2, r2
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	415b      	adcs	r3, r3
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074b8:	4641      	mov	r1, r8
 80074ba:	1851      	adds	r1, r2, r1
 80074bc:	6039      	str	r1, [r7, #0]
 80074be:	4649      	mov	r1, r9
 80074c0:	414b      	adcs	r3, r1
 80074c2:	607b      	str	r3, [r7, #4]
 80074c4:	f04f 0200 	mov.w	r2, #0
 80074c8:	f04f 0300 	mov.w	r3, #0
 80074cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074d0:	4659      	mov	r1, fp
 80074d2:	00cb      	lsls	r3, r1, #3
 80074d4:	4651      	mov	r1, sl
 80074d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074da:	4651      	mov	r1, sl
 80074dc:	00ca      	lsls	r2, r1, #3
 80074de:	4610      	mov	r0, r2
 80074e0:	4619      	mov	r1, r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	4642      	mov	r2, r8
 80074e6:	189b      	adds	r3, r3, r2
 80074e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80074ea:	464b      	mov	r3, r9
 80074ec:	460a      	mov	r2, r1
 80074ee:	eb42 0303 	adc.w	r3, r2, r3
 80074f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	663b      	str	r3, [r7, #96]	; 0x60
 80074fe:	667a      	str	r2, [r7, #100]	; 0x64
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800750c:	4649      	mov	r1, r9
 800750e:	008b      	lsls	r3, r1, #2
 8007510:	4641      	mov	r1, r8
 8007512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007516:	4641      	mov	r1, r8
 8007518:	008a      	lsls	r2, r1, #2
 800751a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800751e:	f7f9 fba3 	bl	8000c68 <__aeabi_uldivmod>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4b0d      	ldr	r3, [pc, #52]	; (800755c <UART_SetConfig+0x4e4>)
 8007528:	fba3 1302 	umull	r1, r3, r3, r2
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	2164      	movs	r1, #100	; 0x64
 8007530:	fb01 f303 	mul.w	r3, r1, r3
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	3332      	adds	r3, #50	; 0x32
 800753a:	4a08      	ldr	r2, [pc, #32]	; (800755c <UART_SetConfig+0x4e4>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	f003 020f 	and.w	r2, r3, #15
 8007546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4422      	add	r2, r4
 800754e:	609a      	str	r2, [r3, #8]
}
 8007550:	bf00      	nop
 8007552:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007556:	46bd      	mov	sp, r7
 8007558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800755c:	51eb851f 	.word	0x51eb851f

08007560 <LL_GPIO_SetPinMode>:
{
 8007560:	b480      	push	{r7}
 8007562:	b08b      	sub	sp, #44	; 0x2c
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	fa93 f3a3 	rbit	r3, r3
 800757a:	613b      	str	r3, [r7, #16]
  return result;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007586:	2320      	movs	r3, #32
 8007588:	e003      	b.n	8007592 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	fab3 f383 	clz	r3, r3
 8007590:	b2db      	uxtb	r3, r3
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	2103      	movs	r1, #3
 8007596:	fa01 f303 	lsl.w	r3, r1, r3
 800759a:	43db      	mvns	r3, r3
 800759c:	401a      	ands	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	fa93 f3a3 	rbit	r3, r3
 80075a8:	61fb      	str	r3, [r7, #28]
  return result;
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80075b4:	2320      	movs	r3, #32
 80075b6:	e003      	b.n	80075c0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	fab3 f383 	clz	r3, r3
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	fa01 f303 	lsl.w	r3, r1, r3
 80075c8:	431a      	orrs	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	601a      	str	r2, [r3, #0]
}
 80075ce:	bf00      	nop
 80075d0:	372c      	adds	r7, #44	; 0x2c
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <LL_GPIO_SetPinOutputType>:
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	43db      	mvns	r3, r3
 80075ee:	401a      	ands	r2, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	431a      	orrs	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	605a      	str	r2, [r3, #4]
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <LL_GPIO_SetPinSpeed>:
{
 800760a:	b480      	push	{r7}
 800760c:	b08b      	sub	sp, #44	; 0x2c
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689a      	ldr	r2, [r3, #8]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	fa93 f3a3 	rbit	r3, r3
 8007624:	613b      	str	r3, [r7, #16]
  return result;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007630:	2320      	movs	r3, #32
 8007632:	e003      	b.n	800763c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	fab3 f383 	clz	r3, r3
 800763a:	b2db      	uxtb	r3, r3
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	2103      	movs	r1, #3
 8007640:	fa01 f303 	lsl.w	r3, r1, r3
 8007644:	43db      	mvns	r3, r3
 8007646:	401a      	ands	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	fa93 f3a3 	rbit	r3, r3
 8007652:	61fb      	str	r3, [r7, #28]
  return result;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800765e:	2320      	movs	r3, #32
 8007660:	e003      	b.n	800766a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	fab3 f383 	clz	r3, r3
 8007668:	b2db      	uxtb	r3, r3
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	6879      	ldr	r1, [r7, #4]
 800766e:	fa01 f303 	lsl.w	r3, r1, r3
 8007672:	431a      	orrs	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	609a      	str	r2, [r3, #8]
}
 8007678:	bf00      	nop
 800767a:	372c      	adds	r7, #44	; 0x2c
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <LL_GPIO_SetPinPull>:
{
 8007684:	b480      	push	{r7}
 8007686:	b08b      	sub	sp, #44	; 0x2c
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	fa93 f3a3 	rbit	r3, r3
 800769e:	613b      	str	r3, [r7, #16]
  return result;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80076aa:	2320      	movs	r3, #32
 80076ac:	e003      	b.n	80076b6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	fab3 f383 	clz	r3, r3
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	2103      	movs	r1, #3
 80076ba:	fa01 f303 	lsl.w	r3, r1, r3
 80076be:	43db      	mvns	r3, r3
 80076c0:	401a      	ands	r2, r3
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	fa93 f3a3 	rbit	r3, r3
 80076cc:	61fb      	str	r3, [r7, #28]
  return result;
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80076d8:	2320      	movs	r3, #32
 80076da:	e003      	b.n	80076e4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	fab3 f383 	clz	r3, r3
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ec:	431a      	orrs	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	60da      	str	r2, [r3, #12]
}
 80076f2:	bf00      	nop
 80076f4:	372c      	adds	r7, #44	; 0x2c
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <LL_GPIO_SetAFPin_0_7>:
{
 80076fe:	b480      	push	{r7}
 8007700:	b08b      	sub	sp, #44	; 0x2c
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a1a      	ldr	r2, [r3, #32]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fa93 f3a3 	rbit	r3, r3
 8007718:	613b      	str	r3, [r7, #16]
  return result;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007724:	2320      	movs	r3, #32
 8007726:	e003      	b.n	8007730 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	fab3 f383 	clz	r3, r3
 800772e:	b2db      	uxtb	r3, r3
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	210f      	movs	r1, #15
 8007734:	fa01 f303 	lsl.w	r3, r1, r3
 8007738:	43db      	mvns	r3, r3
 800773a:	401a      	ands	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	fa93 f3a3 	rbit	r3, r3
 8007746:	61fb      	str	r3, [r7, #28]
  return result;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007752:	2320      	movs	r3, #32
 8007754:	e003      	b.n	800775e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	fab3 f383 	clz	r3, r3
 800775c:	b2db      	uxtb	r3, r3
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	fa01 f303 	lsl.w	r3, r1, r3
 8007766:	431a      	orrs	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	621a      	str	r2, [r3, #32]
}
 800776c:	bf00      	nop
 800776e:	372c      	adds	r7, #44	; 0x2c
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <LL_GPIO_SetAFPin_8_15>:
{
 8007778:	b480      	push	{r7}
 800777a:	b08b      	sub	sp, #44	; 0x2c
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	fa93 f3a3 	rbit	r3, r3
 8007794:	613b      	str	r3, [r7, #16]
  return result;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80077a0:	2320      	movs	r3, #32
 80077a2:	e003      	b.n	80077ac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	fab3 f383 	clz	r3, r3
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	210f      	movs	r1, #15
 80077b0:	fa01 f303 	lsl.w	r3, r1, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	401a      	ands	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	fa93 f3a3 	rbit	r3, r3
 80077c4:	61fb      	str	r3, [r7, #28]
  return result;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80077d0:	2320      	movs	r3, #32
 80077d2:	e003      	b.n	80077dc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	fab3 f383 	clz	r3, r3
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	fa01 f303 	lsl.w	r3, r1, r3
 80077e4:	431a      	orrs	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80077ea:	bf00      	nop
 80077ec:	372c      	adds	r7, #44	; 0x2c
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b08a      	sub	sp, #40	; 0x28
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007800:	2300      	movs	r3, #0
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8007804:	2300      	movs	r3, #0
 8007806:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	fa93 f3a3 	rbit	r3, r3
 8007814:	617b      	str	r3, [r7, #20]
  return result;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <LL_GPIO_Init+0x2e>
    return 32U;
 8007820:	2320      	movs	r3, #32
 8007822:	e003      	b.n	800782c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	fab3 f383 	clz	r3, r3
 800782a:	b2db      	uxtb	r3, r3
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800782e:	e057      	b.n	80078e0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	2101      	movs	r1, #1
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	4013      	ands	r3, r2
 800783e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d049      	beq.n	80078da <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d003      	beq.n	8007856 <LL_GPIO_Init+0x60>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d10d      	bne.n	8007872 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	461a      	mov	r2, r3
 800785c:	6a39      	ldr	r1, [r7, #32]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff fed3 	bl	800760a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	461a      	mov	r2, r3
 800786a:	6a39      	ldr	r1, [r7, #32]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff feb4 	bl	80075da <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	461a      	mov	r2, r3
 8007878:	6a39      	ldr	r1, [r7, #32]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ff02 	bl	8007684 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d121      	bne.n	80078cc <LL_GPIO_Init+0xd6>
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	fa93 f3a3 	rbit	r3, r3
 8007892:	60bb      	str	r3, [r7, #8]
  return result;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <LL_GPIO_Init+0xac>
    return 32U;
 800789e:	2320      	movs	r3, #32
 80078a0:	e003      	b.n	80078aa <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80078aa:	2b07      	cmp	r3, #7
 80078ac:	d807      	bhi.n	80078be <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	461a      	mov	r2, r3
 80078b4:	6a39      	ldr	r1, [r7, #32]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7ff ff21 	bl	80076fe <LL_GPIO_SetAFPin_0_7>
 80078bc:	e006      	b.n	80078cc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6a39      	ldr	r1, [r7, #32]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff ff56 	bl	8007778 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	461a      	mov	r2, r3
 80078d2:	6a39      	ldr	r1, [r7, #32]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff fe43 	bl	8007560 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	3301      	adds	r3, #1
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1a0      	bne.n	8007830 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3728      	adds	r7, #40	; 0x28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <LL_SPI_IsEnabled>:
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007908:	2b40      	cmp	r3, #64	; 0x40
 800790a:	d101      	bne.n	8007910 <LL_SPI_IsEnabled+0x18>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <LL_SPI_IsEnabled+0x1a>
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <LL_SPI_SetCRCPolynomial>:
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	611a      	str	r2, [r3, #16]
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ffd3 	bl	80078f8 <LL_SPI_IsEnabled>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d139      	bne.n	80079cc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007960:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	6811      	ldr	r1, [r2, #0]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	6852      	ldr	r2, [r2, #4]
 800796c:	4311      	orrs	r1, r2
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	6892      	ldr	r2, [r2, #8]
 8007972:	4311      	orrs	r1, r2
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	68d2      	ldr	r2, [r2, #12]
 8007978:	4311      	orrs	r1, r2
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	6912      	ldr	r2, [r2, #16]
 800797e:	4311      	orrs	r1, r2
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	6952      	ldr	r2, [r2, #20]
 8007984:	4311      	orrs	r1, r2
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	6992      	ldr	r2, [r2, #24]
 800798a:	4311      	orrs	r1, r2
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	69d2      	ldr	r2, [r2, #28]
 8007990:	4311      	orrs	r1, r2
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	6a12      	ldr	r2, [r2, #32]
 8007996:	430a      	orrs	r2, r1
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f023 0204 	bic.w	r2, r3, #4
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	0c1b      	lsrs	r3, r3, #16
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ba:	d105      	bne.n	80079c8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	4619      	mov	r1, r3
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7ff ffab 	bl	800791e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	61da      	str	r2, [r3, #28]
  return status;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079e2:	b084      	sub	sp, #16
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	f107 001c 	add.w	r0, r7, #28
 80079f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d123      	bne.n	8007a44 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d105      	bne.n	8007a38 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fae3 	bl	8009004 <USB_CoreReset>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
 8007a42:	e01b      	b.n	8007a7c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 fad7 	bl	8009004 <USB_CoreReset>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a6e:	e005      	b.n	8007a7c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a7c:	7fbb      	ldrb	r3, [r7, #30]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d10b      	bne.n	8007a9a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f043 0206 	orr.w	r2, r3, #6
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f043 0220 	orr.w	r2, r3, #32
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aa6:	b004      	add	sp, #16
 8007aa8:	4770      	bx	lr
	...

08007aac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d165      	bne.n	8007b8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4a41      	ldr	r2, [pc, #260]	; (8007bc8 <USB_SetTurnaroundTime+0x11c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d906      	bls.n	8007ad6 <USB_SetTurnaroundTime+0x2a>
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	4a40      	ldr	r2, [pc, #256]	; (8007bcc <USB_SetTurnaroundTime+0x120>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d202      	bcs.n	8007ad6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ad0:	230f      	movs	r3, #15
 8007ad2:	617b      	str	r3, [r7, #20]
 8007ad4:	e062      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	4a3c      	ldr	r2, [pc, #240]	; (8007bcc <USB_SetTurnaroundTime+0x120>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d306      	bcc.n	8007aec <USB_SetTurnaroundTime+0x40>
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	4a3b      	ldr	r2, [pc, #236]	; (8007bd0 <USB_SetTurnaroundTime+0x124>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d202      	bcs.n	8007aec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ae6:	230e      	movs	r3, #14
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	e057      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4a38      	ldr	r2, [pc, #224]	; (8007bd0 <USB_SetTurnaroundTime+0x124>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d306      	bcc.n	8007b02 <USB_SetTurnaroundTime+0x56>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	4a37      	ldr	r2, [pc, #220]	; (8007bd4 <USB_SetTurnaroundTime+0x128>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d202      	bcs.n	8007b02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007afc:	230d      	movs	r3, #13
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	e04c      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4a33      	ldr	r2, [pc, #204]	; (8007bd4 <USB_SetTurnaroundTime+0x128>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d306      	bcc.n	8007b18 <USB_SetTurnaroundTime+0x6c>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	4a32      	ldr	r2, [pc, #200]	; (8007bd8 <USB_SetTurnaroundTime+0x12c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d802      	bhi.n	8007b18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b12:	230c      	movs	r3, #12
 8007b14:	617b      	str	r3, [r7, #20]
 8007b16:	e041      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	4a2f      	ldr	r2, [pc, #188]	; (8007bd8 <USB_SetTurnaroundTime+0x12c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d906      	bls.n	8007b2e <USB_SetTurnaroundTime+0x82>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4a2e      	ldr	r2, [pc, #184]	; (8007bdc <USB_SetTurnaroundTime+0x130>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d802      	bhi.n	8007b2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007b28:	230b      	movs	r3, #11
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	e036      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4a2a      	ldr	r2, [pc, #168]	; (8007bdc <USB_SetTurnaroundTime+0x130>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d906      	bls.n	8007b44 <USB_SetTurnaroundTime+0x98>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	4a29      	ldr	r2, [pc, #164]	; (8007be0 <USB_SetTurnaroundTime+0x134>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d802      	bhi.n	8007b44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007b3e:	230a      	movs	r3, #10
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	e02b      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <USB_SetTurnaroundTime+0x134>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d906      	bls.n	8007b5a <USB_SetTurnaroundTime+0xae>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <USB_SetTurnaroundTime+0x138>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d202      	bcs.n	8007b5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007b54:	2309      	movs	r3, #9
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	e020      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	4a21      	ldr	r2, [pc, #132]	; (8007be4 <USB_SetTurnaroundTime+0x138>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d306      	bcc.n	8007b70 <USB_SetTurnaroundTime+0xc4>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4a20      	ldr	r2, [pc, #128]	; (8007be8 <USB_SetTurnaroundTime+0x13c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d802      	bhi.n	8007b70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007b6a:	2308      	movs	r3, #8
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e015      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4a1d      	ldr	r2, [pc, #116]	; (8007be8 <USB_SetTurnaroundTime+0x13c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d906      	bls.n	8007b86 <USB_SetTurnaroundTime+0xda>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4a1c      	ldr	r2, [pc, #112]	; (8007bec <USB_SetTurnaroundTime+0x140>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d202      	bcs.n	8007b86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007b80:	2307      	movs	r3, #7
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e00a      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007b86:	2306      	movs	r3, #6
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	e007      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d102      	bne.n	8007b98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007b92:	2309      	movs	r3, #9
 8007b94:	617b      	str	r3, [r7, #20]
 8007b96:	e001      	b.n	8007b9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007b98:	2309      	movs	r3, #9
 8007b9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	029b      	lsls	r3, r3, #10
 8007bb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	00d8acbf 	.word	0x00d8acbf
 8007bcc:	00e4e1c0 	.word	0x00e4e1c0
 8007bd0:	00f42400 	.word	0x00f42400
 8007bd4:	01067380 	.word	0x01067380
 8007bd8:	011a499f 	.word	0x011a499f
 8007bdc:	01312cff 	.word	0x01312cff
 8007be0:	014ca43f 	.word	0x014ca43f
 8007be4:	016e3600 	.word	0x016e3600
 8007be8:	01a6ab1f 	.word	0x01a6ab1f
 8007bec:	01e84800 	.word	0x01e84800

08007bf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f043 0201 	orr.w	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f023 0201 	bic.w	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d115      	bne.n	8007c82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c62:	200a      	movs	r0, #10
 8007c64:	f7fb fcc0 	bl	80035e8 <HAL_Delay>
      ms += 10U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	330a      	adds	r3, #10
 8007c6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 f939 	bl	8008ee6 <USB_GetMode>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d01e      	beq.n	8007cb8 <USB_SetCurrentMode+0x84>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2bc7      	cmp	r3, #199	; 0xc7
 8007c7e:	d9f0      	bls.n	8007c62 <USB_SetCurrentMode+0x2e>
 8007c80:	e01a      	b.n	8007cb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d115      	bne.n	8007cb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c94:	200a      	movs	r0, #10
 8007c96:	f7fb fca7 	bl	80035e8 <HAL_Delay>
      ms += 10U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	330a      	adds	r3, #10
 8007c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 f920 	bl	8008ee6 <USB_GetMode>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <USB_SetCurrentMode+0x84>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2bc7      	cmp	r3, #199	; 0xc7
 8007cb0:	d9f0      	bls.n	8007c94 <USB_SetCurrentMode+0x60>
 8007cb2:	e001      	b.n	8007cb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e005      	b.n	8007cc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2bc8      	cmp	r3, #200	; 0xc8
 8007cbc:	d101      	bne.n	8007cc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e000      	b.n	8007cc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ccc:	b084      	sub	sp, #16
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	e009      	b.n	8007d00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3340      	adds	r3, #64	; 0x40
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	613b      	str	r3, [r7, #16]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b0e      	cmp	r3, #14
 8007d04:	d9f2      	bls.n	8007cec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d11c      	bne.n	8007d48 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d1c:	f043 0302 	orr.w	r3, r3, #2
 8007d20:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	639a      	str	r2, [r3, #56]	; 0x38
 8007d46:	e00b      	b.n	8007d60 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d66:	461a      	mov	r2, r3
 8007d68:	2300      	movs	r3, #0
 8007d6a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d6c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d10d      	bne.n	8007d90 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f968 	bl	8008054 <USB_SetDevSpeed>
 8007d84:	e008      	b.n	8007d98 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d86:	2101      	movs	r1, #1
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f963 	bl	8008054 <USB_SetDevSpeed>
 8007d8e:	e003      	b.n	8007d98 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d90:	2103      	movs	r1, #3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f95e 	bl	8008054 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d98:	2110      	movs	r1, #16
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f8fa 	bl	8007f94 <USB_FlushTxFifo>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f924 	bl	8007ff8 <USB_FlushRxFifo>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2300      	movs	r3, #0
 8007dd0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd8:	461a      	mov	r2, r3
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dde:	2300      	movs	r3, #0
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	e043      	b.n	8007e6c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dfa:	d118      	bne.n	8007e2e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10a      	bne.n	8007e18 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	e013      	b.n	8007e40 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	015a      	lsls	r2, r3, #5
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4413      	add	r3, r2
 8007e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e24:	461a      	mov	r2, r3
 8007e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e2a:	6013      	str	r3, [r2, #0]
 8007e2c:	e008      	b.n	8007e40 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	613b      	str	r3, [r7, #16]
 8007e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e70:	461a      	mov	r2, r3
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d3b5      	bcc.n	8007de4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	e043      	b.n	8007f06 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e94:	d118      	bne.n	8007ec8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	e013      	b.n	8007eda <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	e008      	b.n	8007eda <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	2300      	movs	r3, #0
 8007eea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007efe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	3301      	adds	r3, #1
 8007f04:	613b      	str	r3, [r7, #16]
 8007f06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d3b5      	bcc.n	8007e7e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f24:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f32:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d105      	bne.n	8007f48 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f043 0210 	orr.w	r2, r3, #16
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <USB_DevInit+0x2c4>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f54:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	f043 0208 	orr.w	r2, r3, #8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d107      	bne.n	8007f80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f78:	f043 0304 	orr.w	r3, r3, #4
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f8c:	b004      	add	sp, #16
 8007f8e:	4770      	bx	lr
 8007f90:	803c3800 	.word	0x803c3800

08007f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fae:	d901      	bls.n	8007fb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e01b      	b.n	8007fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	daf2      	bge.n	8007fa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	019b      	lsls	r3, r3, #6
 8007fc4:	f043 0220 	orr.w	r2, r3, #32
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fd8:	d901      	bls.n	8007fde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e006      	b.n	8007fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d0f0      	beq.n	8007fcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008010:	d901      	bls.n	8008016 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e018      	b.n	8008048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	daf2      	bge.n	8008004 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2210      	movs	r2, #16
 8008026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008034:	d901      	bls.n	800803a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e006      	b.n	8008048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b10      	cmp	r3, #16
 8008044:	d0f0      	beq.n	8008028 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008074:	4313      	orrs	r3, r2
 8008076:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008086:	b480      	push	{r7}
 8008088:	b087      	sub	sp, #28
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0306 	and.w	r3, r3, #6
 800809e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
 80080aa:	e00a      	b.n	80080c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d002      	beq.n	80080b8 <USB_GetDevSpeed+0x32>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b06      	cmp	r3, #6
 80080b6:	d102      	bne.n	80080be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80080b8:	2302      	movs	r3, #2
 80080ba:	75fb      	strb	r3, [r7, #23]
 80080bc:	e001      	b.n	80080c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80080be:	230f      	movs	r3, #15
 80080c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d13a      	bne.n	8008162 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f2:	69da      	ldr	r2, [r3, #28]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	2101      	movs	r1, #1
 80080fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008102:	b29b      	uxth	r3, r3
 8008104:	68f9      	ldr	r1, [r7, #12]
 8008106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800810a:	4313      	orrs	r3, r2
 800810c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d155      	bne.n	80081d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	791b      	ldrb	r3, [r3, #4]
 800813e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008140:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	059b      	lsls	r3, r3, #22
 8008146:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008148:	4313      	orrs	r3, r2
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	440a      	add	r2, r1
 8008152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800815a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	e036      	b.n	80081d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008168:	69da      	ldr	r2, [r3, #28]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	2101      	movs	r1, #1
 8008174:	fa01 f303 	lsl.w	r3, r1, r3
 8008178:	041b      	lsls	r3, r3, #16
 800817a:	68f9      	ldr	r1, [r7, #12]
 800817c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008180:	4313      	orrs	r3, r2
 8008182:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d11a      	bne.n	80081d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	791b      	ldrb	r3, [r3, #4]
 80081b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80081b6:	430b      	orrs	r3, r1
 80081b8:	4313      	orrs	r3, r2
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
	...

080081e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d161      	bne.n	80082c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800820e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008212:	d11f      	bne.n	8008254 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	440a      	add	r2, r1
 800822a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800822e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008232:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	440a      	add	r2, r1
 800824a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008252:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	2101      	movs	r1, #1
 8008266:	fa01 f303 	lsl.w	r3, r1, r3
 800826a:	b29b      	uxth	r3, r3
 800826c:	43db      	mvns	r3, r3
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008274:	4013      	ands	r3, r2
 8008276:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827e:	69da      	ldr	r2, [r3, #28]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	2101      	movs	r1, #1
 800828a:	fa01 f303 	lsl.w	r3, r1, r3
 800828e:	b29b      	uxth	r3, r3
 8008290:	43db      	mvns	r3, r3
 8008292:	68f9      	ldr	r1, [r7, #12]
 8008294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008298:	4013      	ands	r3, r2
 800829a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	0159      	lsls	r1, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	440b      	add	r3, r1
 80082b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b6:	4619      	mov	r1, r3
 80082b8:	4b35      	ldr	r3, [pc, #212]	; (8008390 <USB_DeactivateEndpoint+0x1b0>)
 80082ba:	4013      	ands	r3, r2
 80082bc:	600b      	str	r3, [r1, #0]
 80082be:	e060      	b.n	8008382 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082d6:	d11f      	bne.n	8008318 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	0151      	lsls	r1, r2, #5
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	440a      	add	r2, r1
 800830e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008316:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800831e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	2101      	movs	r1, #1
 800832a:	fa01 f303 	lsl.w	r3, r1, r3
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	43db      	mvns	r3, r3
 8008332:	68f9      	ldr	r1, [r7, #12]
 8008334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008338:	4013      	ands	r3, r2
 800833a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008342:	69da      	ldr	r2, [r3, #28]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f003 030f 	and.w	r3, r3, #15
 800834c:	2101      	movs	r1, #1
 800834e:	fa01 f303 	lsl.w	r3, r1, r3
 8008352:	041b      	lsls	r3, r3, #16
 8008354:	43db      	mvns	r3, r3
 8008356:	68f9      	ldr	r1, [r7, #12]
 8008358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800835c:	4013      	ands	r3, r2
 800835e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	0159      	lsls	r1, r3, #5
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	440b      	add	r3, r1
 8008376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837a:	4619      	mov	r1, r3
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <USB_DeactivateEndpoint+0x1b4>)
 800837e:	4013      	ands	r3, r2
 8008380:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr
 8008390:	ec337800 	.word	0xec337800
 8008394:	eff37800 	.word	0xeff37800

08008398 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08a      	sub	sp, #40	; 0x28
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	4613      	mov	r3, r2
 80083a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	f040 817a 	bne.w	80086ae <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d132      	bne.n	8008428 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	0151      	lsls	r1, r2, #5
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	440a      	add	r2, r1
 80083d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80083e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	69fa      	ldr	r2, [r7, #28]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008404:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	4413      	add	r3, r2
 800840e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	0151      	lsls	r1, r2, #5
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	440a      	add	r2, r1
 800841c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008420:	0cdb      	lsrs	r3, r3, #19
 8008422:	04db      	lsls	r3, r3, #19
 8008424:	6113      	str	r3, [r2, #16]
 8008426:	e092      	b.n	800854e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	69ba      	ldr	r2, [r7, #24]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	440a      	add	r2, r1
 800843e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008442:	0cdb      	lsrs	r3, r3, #19
 8008444:	04db      	lsls	r3, r3, #19
 8008446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008462:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008466:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800846a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d11a      	bne.n	80084a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	691a      	ldr	r2, [r3, #16]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	429a      	cmp	r2, r3
 800847c:	d903      	bls.n	8008486 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	0151      	lsls	r1, r2, #5
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	440a      	add	r2, r1
 800849c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084a4:	6113      	str	r3, [r2, #16]
 80084a6:	e01b      	b.n	80084e0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6919      	ldr	r1, [r3, #16]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	440b      	add	r3, r1
 80084c0:	1e59      	subs	r1, r3, #1
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80084ca:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80084cc:	4ba2      	ldr	r3, [pc, #648]	; (8008758 <USB_EPStartXfer+0x3c0>)
 80084ce:	400b      	ands	r3, r1
 80084d0:	69b9      	ldr	r1, [r7, #24]
 80084d2:	0148      	lsls	r0, r1, #5
 80084d4:	69f9      	ldr	r1, [r7, #28]
 80084d6:	4401      	add	r1, r0
 80084d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80084dc:	4313      	orrs	r3, r2
 80084de:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	691a      	ldr	r2, [r3, #16]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084f6:	69b9      	ldr	r1, [r7, #24]
 80084f8:	0148      	lsls	r0, r1, #5
 80084fa:	69f9      	ldr	r1, [r7, #28]
 80084fc:	4401      	add	r1, r0
 80084fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008502:	4313      	orrs	r3, r2
 8008504:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	791b      	ldrb	r3, [r3, #4]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d11f      	bne.n	800854e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	440a      	add	r2, r1
 8008524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008528:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800852c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	69ba      	ldr	r2, [r7, #24]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008548:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800854c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d14b      	bne.n	80085ec <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d009      	beq.n	8008570 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	461a      	mov	r2, r3
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	791b      	ldrb	r3, [r3, #4]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d128      	bne.n	80085ca <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d110      	bne.n	80085aa <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	e00f      	b.n	80085ca <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	0151      	lsls	r1, r2, #5
 80085bc:	69fa      	ldr	r2, [r7, #28]
 80085be:	440a      	add	r2, r1
 80085c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	e165      	b.n	80088b8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	440a      	add	r2, r1
 8008602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800860a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	791b      	ldrb	r3, [r3, #4]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d015      	beq.n	8008640 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 814d 	beq.w	80088b8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	2101      	movs	r1, #1
 8008630:	fa01 f303 	lsl.w	r3, r1, r3
 8008634:	69f9      	ldr	r1, [r7, #28]
 8008636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800863a:	4313      	orrs	r3, r2
 800863c:	634b      	str	r3, [r1, #52]	; 0x34
 800863e:	e13b      	b.n	80088b8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864c:	2b00      	cmp	r3, #0
 800864e:	d110      	bne.n	8008672 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	440a      	add	r2, r1
 8008666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	e00f      	b.n	8008692 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008690:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	68d9      	ldr	r1, [r3, #12]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	781a      	ldrb	r2, [r3, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	b298      	uxth	r0, r3
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	4603      	mov	r3, r0
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 f9b8 	bl	8008a1c <USB_WritePacket>
 80086ac:	e104      	b.n	80088b8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086c8:	0cdb      	lsrs	r3, r3, #19
 80086ca:	04db      	lsls	r3, r3, #19
 80086cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086f0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d131      	bne.n	800875c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008726:	69b9      	ldr	r1, [r7, #24]
 8008728:	0148      	lsls	r0, r1, #5
 800872a:	69f9      	ldr	r1, [r7, #28]
 800872c:	4401      	add	r1, r0
 800872e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008732:	4313      	orrs	r3, r2
 8008734:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	0151      	lsls	r1, r2, #5
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	440a      	add	r2, r1
 800874c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008754:	6113      	str	r3, [r2, #16]
 8008756:	e061      	b.n	800881c <USB_EPStartXfer+0x484>
 8008758:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d123      	bne.n	80087ac <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008770:	691a      	ldr	r2, [r3, #16]
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800877a:	69b9      	ldr	r1, [r7, #24]
 800877c:	0148      	lsls	r0, r1, #5
 800877e:	69f9      	ldr	r1, [r7, #28]
 8008780:	4401      	add	r1, r0
 8008782:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008786:	4313      	orrs	r3, r2
 8008788:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	4413      	add	r3, r2
 8008792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087a8:	6113      	str	r3, [r2, #16]
 80087aa:	e037      	b.n	800881c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	691a      	ldr	r2, [r3, #16]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	4413      	add	r3, r2
 80087b6:	1e5a      	subs	r2, r3, #1
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	8afa      	ldrh	r2, [r7, #22]
 80087c8:	fb03 f202 	mul.w	r2, r3, r2
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	8afb      	ldrh	r3, [r7, #22]
 80087e0:	04d9      	lsls	r1, r3, #19
 80087e2:	4b38      	ldr	r3, [pc, #224]	; (80088c4 <USB_EPStartXfer+0x52c>)
 80087e4:	400b      	ands	r3, r1
 80087e6:	69b9      	ldr	r1, [r7, #24]
 80087e8:	0148      	lsls	r0, r1, #5
 80087ea:	69f9      	ldr	r1, [r7, #28]
 80087ec:	4401      	add	r1, r0
 80087ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087f2:	4313      	orrs	r3, r2
 80087f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800880c:	69b9      	ldr	r1, [r7, #24]
 800880e:	0148      	lsls	r0, r1, #5
 8008810:	69f9      	ldr	r1, [r7, #28]
 8008812:	4401      	add	r1, r0
 8008814:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008818:	4313      	orrs	r3, r2
 800881a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d10d      	bne.n	800883e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	68d9      	ldr	r1, [r3, #12]
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800883a:	460a      	mov	r2, r1
 800883c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	791b      	ldrb	r3, [r3, #4]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d128      	bne.n	8008898 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d110      	bne.n	8008878 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	0151      	lsls	r1, r2, #5
 8008868:	69fa      	ldr	r2, [r7, #28]
 800886a:	440a      	add	r2, r1
 800886c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008870:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	e00f      	b.n	8008898 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	440a      	add	r2, r1
 800888e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008896:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	1ff80000 	.word	0x1ff80000

080088c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d14a      	bne.n	800897c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088fe:	f040 8086 	bne.w	8008a0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	0151      	lsls	r1, r2, #5
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	440a      	add	r2, r1
 800891c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008920:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008924:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	7812      	ldrb	r2, [r2, #0]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	440a      	add	r2, r1
 8008940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008948:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3301      	adds	r3, #1
 800894e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f242 7210 	movw	r2, #10000	; 0x2710
 8008956:	4293      	cmp	r3, r2
 8008958:	d902      	bls.n	8008960 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	75fb      	strb	r3, [r7, #23]
          break;
 800895e:	e056      	b.n	8008a0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008978:	d0e7      	beq.n	800894a <USB_EPStopXfer+0x82>
 800897a:	e048      	b.n	8008a0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008994:	d13b      	bne.n	8008a0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	7812      	ldrb	r2, [r2, #0]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	683a      	ldr	r2, [r7, #0]
 80089cc:	7812      	ldrb	r2, [r2, #0]
 80089ce:	0151      	lsls	r1, r2, #5
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	440a      	add	r2, r1
 80089d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3301      	adds	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d902      	bls.n	80089f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	75fb      	strb	r3, [r7, #23]
          break;
 80089f2:	e00c      	b.n	8008a0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a0c:	d0e7      	beq.n	80089de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	371c      	adds	r7, #28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	; 0x24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4611      	mov	r1, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	71fb      	strb	r3, [r7, #7]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d123      	bne.n	8008a8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a42:	88bb      	ldrh	r3, [r7, #4]
 8008a44:	3303      	adds	r3, #3
 8008a46:	089b      	lsrs	r3, r3, #2
 8008a48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
 8008a4e:	e018      	b.n	8008a82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a50:	79fb      	ldrb	r3, [r7, #7]
 8008a52:	031a      	lsls	r2, r3, #12
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	3301      	adds	r3, #1
 8008a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	61bb      	str	r3, [r7, #24]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d3e2      	bcc.n	8008a50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3724      	adds	r7, #36	; 0x24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b08b      	sub	sp, #44	; 0x2c
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	089b      	lsrs	r3, r3, #2
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	f003 0303 	and.w	r3, r3, #3
 8008abc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008abe:	2300      	movs	r3, #0
 8008ac0:	623b      	str	r3, [r7, #32]
 8008ac2:	e014      	b.n	8008aee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	3301      	adds	r3, #1
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	3301      	adds	r3, #1
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	3301      	adds	r3, #1
 8008aec:	623b      	str	r3, [r7, #32]
 8008aee:	6a3a      	ldr	r2, [r7, #32]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d3e6      	bcc.n	8008ac4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008af6:	8bfb      	ldrh	r3, [r7, #30]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01e      	beq.n	8008b3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b06:	461a      	mov	r2, r3
 8008b08:	f107 0310 	add.w	r3, r7, #16
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	701a      	strb	r2, [r3, #0]
      i++;
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	3301      	adds	r3, #1
 8008b26:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008b2e:	8bfb      	ldrh	r3, [r7, #30]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008b34:	8bfb      	ldrh	r3, [r7, #30]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1ea      	bne.n	8008b10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	372c      	adds	r7, #44	; 0x2c
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	785b      	ldrb	r3, [r3, #1]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d12c      	bne.n	8008bbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	db12      	blt.n	8008b9c <USB_EPSetStall+0x54>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00f      	beq.n	8008b9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	0151      	lsls	r1, r2, #5
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	440a      	add	r2, r1
 8008b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bba:	6013      	str	r3, [r2, #0]
 8008bbc:	e02b      	b.n	8008c16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	db12      	blt.n	8008bf6 <USB_EPSetStall+0xae>
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00f      	beq.n	8008bf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	0151      	lsls	r1, r2, #5
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	440a      	add	r2, r1
 8008bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008bf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	0151      	lsls	r1, r2, #5
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	440a      	add	r2, r1
 8008c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d128      	bne.n	8008c92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	0151      	lsls	r1, r2, #5
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	440a      	add	r2, r1
 8008c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	791b      	ldrb	r3, [r3, #4]
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d003      	beq.n	8008c70 <USB_EPClearStall+0x4c>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	791b      	ldrb	r3, [r3, #4]
 8008c6c:	2b02      	cmp	r3, #2
 8008c6e:	d138      	bne.n	8008ce2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	0151      	lsls	r1, r2, #5
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	440a      	add	r2, r1
 8008c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	e027      	b.n	8008ce2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	0151      	lsls	r1, r2, #5
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	440a      	add	r2, r1
 8008ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	791b      	ldrb	r3, [r3, #4]
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d003      	beq.n	8008cc2 <USB_EPClearStall+0x9e>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	791b      	ldrb	r3, [r3, #4]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d10f      	bne.n	8008ce2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	0151      	lsls	r1, r2, #5
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	440a      	add	r2, r1
 8008cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3714      	adds	r7, #20
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008d12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008d24:	68f9      	ldr	r1, [r7, #12]
 8008d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d56:	f023 0303 	bic.w	r3, r3, #3
 8008d5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6a:	f023 0302 	bic.w	r3, r3, #2
 8008d6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d98:	f023 0303 	bic.w	r3, r3, #3
 8008d9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dac:	f043 0302 	orr.w	r3, r3, #2
 8008db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b085      	sub	sp, #20
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	4013      	ands	r3, r2
 8008e08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	0c1b      	lsrs	r3, r3, #16
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	b29b      	uxth	r3, r3
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b085      	sub	sp, #20
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008e5e:	78fb      	ldrb	r3, [r7, #3]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4013      	ands	r3, r2
 8008e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b087      	sub	sp, #28
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	f003 030f 	and.w	r3, r3, #15
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eba:	01db      	lsls	r3, r3, #7
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	371c      	adds	r7, #28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr

08008ee6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b083      	sub	sp, #12
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	695b      	ldr	r3, [r3, #20]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f20:	f023 0307 	bic.w	r3, r3, #7
 8008f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	460b      	mov	r3, r1
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	333c      	adds	r3, #60	; 0x3c
 8008f5e:	3304      	adds	r3, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	4a26      	ldr	r2, [pc, #152]	; (8009000 <USB_EP0_OutStart+0xb8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d90a      	bls.n	8008f82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f7c:	d101      	bne.n	8008f82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e037      	b.n	8008ff2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f88:	461a      	mov	r2, r3
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb0:	f043 0318 	orr.w	r3, r3, #24
 8008fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008fc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d10f      	bne.n	8008ff0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008fee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	4f54300a 	.word	0x4f54300a

08009004 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3301      	adds	r3, #1
 8009014:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800901c:	d901      	bls.n	8009022 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e01b      	b.n	800905a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	daf2      	bge.n	8009010 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	f043 0201 	orr.w	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	3301      	adds	r3, #1
 800903e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009046:	d901      	bls.n	800904c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e006      	b.n	800905a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b01      	cmp	r3, #1
 8009056:	d0f0      	beq.n	800903a <USB_CoreReset+0x36>

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009074:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009078:	f005 fdda 	bl	800ec30 <USBD_static_malloc>
 800907c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d109      	bne.n	8009098 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	32b0      	adds	r2, #176	; 0xb0
 800908e:	2100      	movs	r1, #0
 8009090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009094:	2302      	movs	r3, #2
 8009096:	e0d4      	b.n	8009242 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009098:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800909c:	2100      	movs	r1, #0
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f006 fce6 	bl	800fa70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	32b0      	adds	r2, #176	; 0xb0
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	32b0      	adds	r2, #176	; 0xb0
 80090be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	7c1b      	ldrb	r3, [r3, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d138      	bne.n	8009142 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80090d0:	4b5e      	ldr	r3, [pc, #376]	; (800924c <USBD_CDC_Init+0x1e4>)
 80090d2:	7819      	ldrb	r1, [r3, #0]
 80090d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090d8:	2202      	movs	r2, #2
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f005 fc85 	bl	800e9ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80090e0:	4b5a      	ldr	r3, [pc, #360]	; (800924c <USBD_CDC_Init+0x1e4>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 020f 	and.w	r2, r3, #15
 80090e8:	6879      	ldr	r1, [r7, #4]
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	3324      	adds	r3, #36	; 0x24
 80090f6:	2201      	movs	r2, #1
 80090f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80090fa:	4b55      	ldr	r3, [pc, #340]	; (8009250 <USBD_CDC_Init+0x1e8>)
 80090fc:	7819      	ldrb	r1, [r3, #0]
 80090fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009102:	2202      	movs	r2, #2
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f005 fc70 	bl	800e9ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800910a:	4b51      	ldr	r3, [pc, #324]	; (8009250 <USBD_CDC_Init+0x1e8>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f003 020f 	and.w	r2, r3, #15
 8009112:	6879      	ldr	r1, [r7, #4]
 8009114:	4613      	mov	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	4413      	add	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	440b      	add	r3, r1
 800911e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009122:	2201      	movs	r2, #1
 8009124:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009126:	4b4b      	ldr	r3, [pc, #300]	; (8009254 <USBD_CDC_Init+0x1ec>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 020f 	and.w	r2, r3, #15
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	3326      	adds	r3, #38	; 0x26
 800913c:	2210      	movs	r2, #16
 800913e:	801a      	strh	r2, [r3, #0]
 8009140:	e035      	b.n	80091ae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009142:	4b42      	ldr	r3, [pc, #264]	; (800924c <USBD_CDC_Init+0x1e4>)
 8009144:	7819      	ldrb	r1, [r3, #0]
 8009146:	2340      	movs	r3, #64	; 0x40
 8009148:	2202      	movs	r2, #2
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f005 fc4d 	bl	800e9ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009150:	4b3e      	ldr	r3, [pc, #248]	; (800924c <USBD_CDC_Init+0x1e4>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	f003 020f 	and.w	r2, r3, #15
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	4613      	mov	r3, r2
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	440b      	add	r3, r1
 8009164:	3324      	adds	r3, #36	; 0x24
 8009166:	2201      	movs	r2, #1
 8009168:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800916a:	4b39      	ldr	r3, [pc, #228]	; (8009250 <USBD_CDC_Init+0x1e8>)
 800916c:	7819      	ldrb	r1, [r3, #0]
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	2202      	movs	r2, #2
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f005 fc39 	bl	800e9ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009178:	4b35      	ldr	r3, [pc, #212]	; (8009250 <USBD_CDC_Init+0x1e8>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	f003 020f 	and.w	r2, r3, #15
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009190:	2201      	movs	r2, #1
 8009192:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009194:	4b2f      	ldr	r3, [pc, #188]	; (8009254 <USBD_CDC_Init+0x1ec>)
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	f003 020f 	and.w	r2, r3, #15
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	3326      	adds	r3, #38	; 0x26
 80091aa:	2210      	movs	r2, #16
 80091ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091ae:	4b29      	ldr	r3, [pc, #164]	; (8009254 <USBD_CDC_Init+0x1ec>)
 80091b0:	7819      	ldrb	r1, [r3, #0]
 80091b2:	2308      	movs	r3, #8
 80091b4:	2203      	movs	r2, #3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f005 fc17 	bl	800e9ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80091bc:	4b25      	ldr	r3, [pc, #148]	; (8009254 <USBD_CDC_Init+0x1ec>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 020f 	and.w	r2, r3, #15
 80091c4:	6879      	ldr	r1, [r7, #4]
 80091c6:	4613      	mov	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	440b      	add	r3, r1
 80091d0:	3324      	adds	r3, #36	; 0x24
 80091d2:	2201      	movs	r2, #1
 80091d4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	33b0      	adds	r3, #176	; 0xb0
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800920c:	2302      	movs	r3, #2
 800920e:	e018      	b.n	8009242 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	7c1b      	ldrb	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009218:	4b0d      	ldr	r3, [pc, #52]	; (8009250 <USBD_CDC_Init+0x1e8>)
 800921a:	7819      	ldrb	r1, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009222:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f005 fcce 	bl	800ebc8 <USBD_LL_PrepareReceive>
 800922c:	e008      	b.n	8009240 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800922e:	4b08      	ldr	r3, [pc, #32]	; (8009250 <USBD_CDC_Init+0x1e8>)
 8009230:	7819      	ldrb	r1, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009238:	2340      	movs	r3, #64	; 0x40
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f005 fcc4 	bl	800ebc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	2000014b 	.word	0x2000014b
 8009250:	2000014c 	.word	0x2000014c
 8009254:	2000014d 	.word	0x2000014d

08009258 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009264:	4b3a      	ldr	r3, [pc, #232]	; (8009350 <USBD_CDC_DeInit+0xf8>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f005 fbe3 	bl	800ea36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009270:	4b37      	ldr	r3, [pc, #220]	; (8009350 <USBD_CDC_DeInit+0xf8>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	f003 020f 	and.w	r2, r3, #15
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	440b      	add	r3, r1
 8009284:	3324      	adds	r3, #36	; 0x24
 8009286:	2200      	movs	r2, #0
 8009288:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800928a:	4b32      	ldr	r3, [pc, #200]	; (8009354 <USBD_CDC_DeInit+0xfc>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f005 fbd0 	bl	800ea36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009296:	4b2f      	ldr	r3, [pc, #188]	; (8009354 <USBD_CDC_DeInit+0xfc>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	f003 020f 	and.w	r2, r3, #15
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	4613      	mov	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092ae:	2200      	movs	r2, #0
 80092b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80092b2:	4b29      	ldr	r3, [pc, #164]	; (8009358 <USBD_CDC_DeInit+0x100>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f005 fbbc 	bl	800ea36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80092be:	4b26      	ldr	r3, [pc, #152]	; (8009358 <USBD_CDC_DeInit+0x100>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 020f 	and.w	r2, r3, #15
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	440b      	add	r3, r1
 80092d2:	3324      	adds	r3, #36	; 0x24
 80092d4:	2200      	movs	r2, #0
 80092d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80092d8:	4b1f      	ldr	r3, [pc, #124]	; (8009358 <USBD_CDC_DeInit+0x100>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	3326      	adds	r3, #38	; 0x26
 80092ee:	2200      	movs	r2, #0
 80092f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	32b0      	adds	r2, #176	; 0xb0
 80092fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01f      	beq.n	8009344 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	33b0      	adds	r3, #176	; 0xb0
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	32b0      	adds	r2, #176	; 0xb0
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	4618      	mov	r0, r3
 8009328:	f005 fc90 	bl	800ec4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32b0      	adds	r2, #176	; 0xb0
 8009336:	2100      	movs	r1, #0
 8009338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	2000014b 	.word	0x2000014b
 8009354:	2000014c 	.word	0x2000014c
 8009358:	2000014d 	.word	0x2000014d

0800935c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	32b0      	adds	r2, #176	; 0xb0
 8009370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009374:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009388:	2303      	movs	r3, #3
 800938a:	e0bf      	b.n	800950c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009394:	2b00      	cmp	r3, #0
 8009396:	d050      	beq.n	800943a <USBD_CDC_Setup+0xde>
 8009398:	2b20      	cmp	r3, #32
 800939a:	f040 80af 	bne.w	80094fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	88db      	ldrh	r3, [r3, #6]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d03a      	beq.n	800941c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	b25b      	sxtb	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	da1b      	bge.n	80093e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	33b0      	adds	r3, #176	; 0xb0
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80093c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	88d2      	ldrh	r2, [r2, #6]
 80093cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	88db      	ldrh	r3, [r3, #6]
 80093d2:	2b07      	cmp	r3, #7
 80093d4:	bf28      	it	cs
 80093d6:	2307      	movcs	r3, #7
 80093d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	89fa      	ldrh	r2, [r7, #14]
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fd49 	bl	800ae78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80093e6:	e090      	b.n	800950a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	785a      	ldrb	r2, [r3, #1]
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	88db      	ldrh	r3, [r3, #6]
 80093f6:	2b3f      	cmp	r3, #63	; 0x3f
 80093f8:	d803      	bhi.n	8009402 <USBD_CDC_Setup+0xa6>
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	88db      	ldrh	r3, [r3, #6]
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	e000      	b.n	8009404 <USBD_CDC_Setup+0xa8>
 8009402:	2240      	movs	r2, #64	; 0x40
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800940a:	6939      	ldr	r1, [r7, #16]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009412:	461a      	mov	r2, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fd5b 	bl	800aed0 <USBD_CtlPrepareRx>
      break;
 800941a:	e076      	b.n	800950a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	33b0      	adds	r3, #176	; 0xb0
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	7850      	ldrb	r0, [r2, #1]
 8009432:	2200      	movs	r2, #0
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	4798      	blx	r3
      break;
 8009438:	e067      	b.n	800950a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	785b      	ldrb	r3, [r3, #1]
 800943e:	2b0b      	cmp	r3, #11
 8009440:	d851      	bhi.n	80094e6 <USBD_CDC_Setup+0x18a>
 8009442:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <USBD_CDC_Setup+0xec>)
 8009444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009448:	08009479 	.word	0x08009479
 800944c:	080094f5 	.word	0x080094f5
 8009450:	080094e7 	.word	0x080094e7
 8009454:	080094e7 	.word	0x080094e7
 8009458:	080094e7 	.word	0x080094e7
 800945c:	080094e7 	.word	0x080094e7
 8009460:	080094e7 	.word	0x080094e7
 8009464:	080094e7 	.word	0x080094e7
 8009468:	080094e7 	.word	0x080094e7
 800946c:	080094e7 	.word	0x080094e7
 8009470:	080094a3 	.word	0x080094a3
 8009474:	080094cd 	.word	0x080094cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b03      	cmp	r3, #3
 8009482:	d107      	bne.n	8009494 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009484:	f107 030a 	add.w	r3, r7, #10
 8009488:	2202      	movs	r2, #2
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 fcf3 	bl	800ae78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009492:	e032      	b.n	80094fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fc7d 	bl	800ad96 <USBD_CtlError>
            ret = USBD_FAIL;
 800949c:	2303      	movs	r3, #3
 800949e:	75fb      	strb	r3, [r7, #23]
          break;
 80094a0:	e02b      	b.n	80094fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d107      	bne.n	80094be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80094ae:	f107 030d 	add.w	r3, r7, #13
 80094b2:	2201      	movs	r2, #1
 80094b4:	4619      	mov	r1, r3
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 fcde 	bl	800ae78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80094bc:	e01d      	b.n	80094fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 fc68 	bl	800ad96 <USBD_CtlError>
            ret = USBD_FAIL;
 80094c6:	2303      	movs	r3, #3
 80094c8:	75fb      	strb	r3, [r7, #23]
          break;
 80094ca:	e016      	b.n	80094fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d00f      	beq.n	80094f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fc5b 	bl	800ad96 <USBD_CtlError>
            ret = USBD_FAIL;
 80094e0:	2303      	movs	r3, #3
 80094e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80094e4:	e008      	b.n	80094f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 fc54 	bl	800ad96 <USBD_CtlError>
          ret = USBD_FAIL;
 80094ee:	2303      	movs	r3, #3
 80094f0:	75fb      	strb	r3, [r7, #23]
          break;
 80094f2:	e002      	b.n	80094fa <USBD_CDC_Setup+0x19e>
          break;
 80094f4:	bf00      	nop
 80094f6:	e008      	b.n	800950a <USBD_CDC_Setup+0x1ae>
          break;
 80094f8:	bf00      	nop
      }
      break;
 80094fa:	e006      	b.n	800950a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80094fc:	6839      	ldr	r1, [r7, #0]
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 fc49 	bl	800ad96 <USBD_CtlError>
      ret = USBD_FAIL;
 8009504:	2303      	movs	r3, #3
 8009506:	75fb      	strb	r3, [r7, #23]
      break;
 8009508:	bf00      	nop
  }

  return (uint8_t)ret;
 800950a:	7dfb      	ldrb	r3, [r7, #23]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009526:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	32b0      	adds	r2, #176	; 0xb0
 8009532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	e065      	b.n	800960a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	32b0      	adds	r2, #176	; 0xb0
 8009548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	f003 020f 	and.w	r2, r3, #15
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	440b      	add	r3, r1
 8009560:	3318      	adds	r3, #24
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d02f      	beq.n	80095c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	f003 020f 	and.w	r2, r3, #15
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	440b      	add	r3, r1
 800957a:	3318      	adds	r3, #24
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	f003 010f 	and.w	r1, r3, #15
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	460b      	mov	r3, r1
 8009588:	00db      	lsls	r3, r3, #3
 800958a:	440b      	add	r3, r1
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4403      	add	r3, r0
 8009590:	331c      	adds	r3, #28
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	fbb2 f1f3 	udiv	r1, r2, r3
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d112      	bne.n	80095c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80095a2:	78fb      	ldrb	r3, [r7, #3]
 80095a4:	f003 020f 	and.w	r2, r3, #15
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	3318      	adds	r3, #24
 80095b6:	2200      	movs	r2, #0
 80095b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80095ba:	78f9      	ldrb	r1, [r7, #3]
 80095bc:	2300      	movs	r3, #0
 80095be:	2200      	movs	r2, #0
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f005 fae0 	bl	800eb86 <USBD_LL_Transmit>
 80095c6:	e01f      	b.n	8009608 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	33b0      	adds	r3, #176	; 0xb0
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d010      	beq.n	8009608 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	33b0      	adds	r3, #176	; 0xb0
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	32b0      	adds	r2, #176	; 0xb0
 8009628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	32b0      	adds	r2, #176	; 0xb0
 8009638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009640:	2303      	movs	r3, #3
 8009642:	e01a      	b.n	800967a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f005 fade 	bl	800ec0a <USBD_LL_GetRxDataSize>
 800964e:	4602      	mov	r2, r0
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	33b0      	adds	r3, #176	; 0xb0
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009674:	4611      	mov	r1, r2
 8009676:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	32b0      	adds	r2, #176	; 0xb0
 8009694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009698:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e025      	b.n	80096f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	33b0      	adds	r3, #176	; 0xb0
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01a      	beq.n	80096ee <USBD_CDC_EP0_RxReady+0x6c>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096be:	2bff      	cmp	r3, #255	; 0xff
 80096c0:	d015      	beq.n	80096ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	33b0      	adds	r3, #176	; 0xb0
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80096da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80096e2:	b292      	uxth	r2, r2
 80096e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	22ff      	movs	r2, #255	; 0xff
 80096ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009700:	2182      	movs	r1, #130	; 0x82
 8009702:	4818      	ldr	r0, [pc, #96]	; (8009764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009704:	f000 fd0f 	bl	800a126 <USBD_GetEpDesc>
 8009708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800970a:	2101      	movs	r1, #1
 800970c:	4815      	ldr	r0, [pc, #84]	; (8009764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800970e:	f000 fd0a 	bl	800a126 <USBD_GetEpDesc>
 8009712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009714:	2181      	movs	r1, #129	; 0x81
 8009716:	4813      	ldr	r0, [pc, #76]	; (8009764 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009718:	f000 fd05 	bl	800a126 <USBD_GetEpDesc>
 800971c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2210      	movs	r2, #16
 8009728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d006      	beq.n	800973e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2200      	movs	r2, #0
 8009734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009738:	711a      	strb	r2, [r3, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800974c:	711a      	strb	r2, [r3, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2243      	movs	r2, #67	; 0x43
 8009756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009758:	4b02      	ldr	r3, [pc, #8]	; (8009764 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	20000108 	.word	0x20000108

08009768 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009770:	2182      	movs	r1, #130	; 0x82
 8009772:	4818      	ldr	r0, [pc, #96]	; (80097d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009774:	f000 fcd7 	bl	800a126 <USBD_GetEpDesc>
 8009778:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800977a:	2101      	movs	r1, #1
 800977c:	4815      	ldr	r0, [pc, #84]	; (80097d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800977e:	f000 fcd2 	bl	800a126 <USBD_GetEpDesc>
 8009782:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009784:	2181      	movs	r1, #129	; 0x81
 8009786:	4813      	ldr	r0, [pc, #76]	; (80097d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009788:	f000 fccd 	bl	800a126 <USBD_GetEpDesc>
 800978c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2210      	movs	r2, #16
 8009798:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d006      	beq.n	80097ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	2200      	movs	r2, #0
 80097a4:	711a      	strb	r2, [r3, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f042 0202 	orr.w	r2, r2, #2
 80097ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d006      	beq.n	80097c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	711a      	strb	r2, [r3, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f042 0202 	orr.w	r2, r2, #2
 80097c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2243      	movs	r2, #67	; 0x43
 80097c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000108 	.word	0x20000108

080097d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097e0:	2182      	movs	r1, #130	; 0x82
 80097e2:	4818      	ldr	r0, [pc, #96]	; (8009844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097e4:	f000 fc9f 	bl	800a126 <USBD_GetEpDesc>
 80097e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097ea:	2101      	movs	r1, #1
 80097ec:	4815      	ldr	r0, [pc, #84]	; (8009844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097ee:	f000 fc9a 	bl	800a126 <USBD_GetEpDesc>
 80097f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097f4:	2181      	movs	r1, #129	; 0x81
 80097f6:	4813      	ldr	r0, [pc, #76]	; (8009844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80097f8:	f000 fc95 	bl	800a126 <USBD_GetEpDesc>
 80097fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2210      	movs	r2, #16
 8009808:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d006      	beq.n	800981e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	2200      	movs	r2, #0
 8009814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009818:	711a      	strb	r2, [r3, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d006      	beq.n	8009832 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800982c:	711a      	strb	r2, [r3, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2243      	movs	r2, #67	; 0x43
 8009836:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009838:	4b02      	ldr	r3, [pc, #8]	; (8009844 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20000108 	.word	0x20000108

08009848 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	220a      	movs	r2, #10
 8009854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009856:	4b03      	ldr	r3, [pc, #12]	; (8009864 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	200000c4 	.word	0x200000c4

08009868 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009878:	2303      	movs	r3, #3
 800987a:	e009      	b.n	8009890 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	33b0      	adds	r3, #176	; 0xb0
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	32b0      	adds	r2, #176	; 0xb0
 80098b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80098be:	2303      	movs	r3, #3
 80098c0:	e008      	b.n	80098d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	32b0      	adds	r2, #176	; 0xb0
 80098f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009900:	2303      	movs	r3, #3
 8009902:	e004      	b.n	800990e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
	...

0800991c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	32b0      	adds	r2, #176	; 0xb0
 800992e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009932:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	32b0      	adds	r2, #176	; 0xb0
 800993e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009946:	2303      	movs	r3, #3
 8009948:	e018      	b.n	800997c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	7c1b      	ldrb	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009952:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <USBD_CDC_ReceivePacket+0x68>)
 8009954:	7819      	ldrb	r1, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800995c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f005 f931 	bl	800ebc8 <USBD_LL_PrepareReceive>
 8009966:	e008      	b.n	800997a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009968:	4b06      	ldr	r3, [pc, #24]	; (8009984 <USBD_CDC_ReceivePacket+0x68>)
 800996a:	7819      	ldrb	r1, [r3, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009972:	2340      	movs	r3, #64	; 0x40
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f005 f927 	bl	800ebc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	2000014c 	.word	0x2000014c

08009988 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	4613      	mov	r3, r2
 8009994:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800999c:	2303      	movs	r3, #3
 800999e:	e01f      	b.n	80099e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	79fa      	ldrb	r2, [r7, #7]
 80099d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f004 ffa1 	bl	800e91c <USBD_LL_Init>
 80099da:	4603      	mov	r3, r0
 80099dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80099fc:	2303      	movs	r3, #3
 80099fe:	e025      	b.n	8009a4c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	32ae      	adds	r2, #174	; 0xae
 8009a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00f      	beq.n	8009a3c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	32ae      	adds	r2, #174	; 0xae
 8009a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	f107 020e 	add.w	r2, r7, #14
 8009a30:	4610      	mov	r0, r2
 8009a32:	4798      	blx	r3
 8009a34:	4602      	mov	r2, r0
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f004 ffa9 	bl	800e9b4 <USBD_LL_Start>
 8009a62:	4603      	mov	r3, r0
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d009      	beq.n	8009ab0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	4798      	blx	r3
 8009aac:	4603      	mov	r3, r0
 8009aae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	78fa      	ldrb	r2, [r7, #3]
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	4798      	blx	r3
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f001 f90e 	bl	800ad22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b14:	461a      	mov	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b22:	f003 031f 	and.w	r3, r3, #31
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d01a      	beq.n	8009b60 <USBD_LL_SetupStage+0x72>
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d822      	bhi.n	8009b74 <USBD_LL_SetupStage+0x86>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <USBD_LL_SetupStage+0x4a>
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d00a      	beq.n	8009b4c <USBD_LL_SetupStage+0x5e>
 8009b36:	e01d      	b.n	8009b74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fb65 	bl	800a210 <USBD_StdDevReq>
 8009b46:	4603      	mov	r3, r0
 8009b48:	73fb      	strb	r3, [r7, #15]
      break;
 8009b4a:	e020      	b.n	8009b8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fbcd 	bl	800a2f4 <USBD_StdItfReq>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b5e:	e016      	b.n	8009b8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fc2f 	bl	800a3cc <USBD_StdEPReq>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	73fb      	strb	r3, [r7, #15]
      break;
 8009b72:	e00c      	b.n	8009b8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f004 ff76 	bl	800ea74 <USBD_LL_StallEP>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b8c:	bf00      	nop
  }

  return ret;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d16e      	bne.n	8009c8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009bb6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	f040 8098 	bne.w	8009cf4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d913      	bls.n	8009bf8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	1ad2      	subs	r2, r2, r3
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	68da      	ldr	r2, [r3, #12]
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	4293      	cmp	r3, r2
 8009be8:	bf28      	it	cs
 8009bea:	4613      	movcs	r3, r2
 8009bec:	461a      	mov	r2, r3
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f001 f98a 	bl	800af0a <USBD_CtlContinueRx>
 8009bf6:	e07d      	b.n	8009cf4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bfe:	f003 031f 	and.w	r3, r3, #31
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d014      	beq.n	8009c30 <USBD_LL_DataOutStage+0x98>
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d81d      	bhi.n	8009c46 <USBD_LL_DataOutStage+0xae>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d002      	beq.n	8009c14 <USBD_LL_DataOutStage+0x7c>
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d003      	beq.n	8009c1a <USBD_LL_DataOutStage+0x82>
 8009c12:	e018      	b.n	8009c46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	75bb      	strb	r3, [r7, #22]
            break;
 8009c18:	e018      	b.n	8009c4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	4619      	mov	r1, r3
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 fa64 	bl	800a0f2 <USBD_CoreFindIF>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	75bb      	strb	r3, [r7, #22]
            break;
 8009c2e:	e00d      	b.n	8009c4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	4619      	mov	r1, r3
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 fa66 	bl	800a10c <USBD_CoreFindEP>
 8009c40:	4603      	mov	r3, r0
 8009c42:	75bb      	strb	r3, [r7, #22]
            break;
 8009c44:	e002      	b.n	8009c4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75bb      	strb	r3, [r7, #22]
            break;
 8009c4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009c4c:	7dbb      	ldrb	r3, [r7, #22]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d119      	bne.n	8009c86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d113      	bne.n	8009c86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009c5e:	7dba      	ldrb	r2, [r7, #22]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	32ae      	adds	r2, #174	; 0xae
 8009c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00b      	beq.n	8009c86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009c6e:	7dba      	ldrb	r2, [r7, #22]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009c76:	7dba      	ldrb	r2, [r7, #22]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	32ae      	adds	r2, #174	; 0xae
 8009c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f001 f950 	bl	800af2c <USBD_CtlSendStatus>
 8009c8c:	e032      	b.n	8009cf4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	4619      	mov	r1, r3
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fa37 	bl	800a10c <USBD_CoreFindEP>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ca2:	7dbb      	ldrb	r3, [r7, #22]
 8009ca4:	2bff      	cmp	r3, #255	; 0xff
 8009ca6:	d025      	beq.n	8009cf4 <USBD_LL_DataOutStage+0x15c>
 8009ca8:	7dbb      	ldrb	r3, [r7, #22]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d122      	bne.n	8009cf4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d117      	bne.n	8009cea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009cba:	7dba      	ldrb	r2, [r7, #22]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	32ae      	adds	r2, #174	; 0xae
 8009cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00f      	beq.n	8009cea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009cca:	7dba      	ldrb	r2, [r7, #22]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009cd2:	7dba      	ldrb	r2, [r7, #22]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	32ae      	adds	r2, #174	; 0xae
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	7afa      	ldrb	r2, [r7, #11]
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	4798      	blx	r3
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	e000      	b.n	8009cf6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b086      	sub	sp, #24
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	460b      	mov	r3, r1
 8009d08:	607a      	str	r2, [r7, #4]
 8009d0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d16f      	bne.n	8009df2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3314      	adds	r3, #20
 8009d16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d15a      	bne.n	8009dd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	689a      	ldr	r2, [r3, #8]
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d914      	bls.n	8009d58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	689a      	ldr	r2, [r3, #8]
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	1ad2      	subs	r2, r2, r3
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	461a      	mov	r2, r3
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f001 f8b2 	bl	800aeae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2100      	movs	r1, #0
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f004 ff39 	bl	800ebc8 <USBD_LL_PrepareReceive>
 8009d56:	e03f      	b.n	8009dd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	68da      	ldr	r2, [r3, #12]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d11c      	bne.n	8009d9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d316      	bcc.n	8009d9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d20f      	bcs.n	8009d9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2100      	movs	r1, #0
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f001 f893 	bl	800aeae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d90:	2300      	movs	r3, #0
 8009d92:	2200      	movs	r2, #0
 8009d94:	2100      	movs	r1, #0
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f004 ff16 	bl	800ebc8 <USBD_LL_PrepareReceive>
 8009d9c:	e01c      	b.n	8009dd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d10f      	bne.n	8009dca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d009      	beq.n	8009dca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dca:	2180      	movs	r1, #128	; 0x80
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f004 fe51 	bl	800ea74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f001 f8bd 	bl	800af52 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d03a      	beq.n	8009e58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f7ff fe42 	bl	8009a6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009df0:	e032      	b.n	8009e58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 f985 	bl	800a10c <USBD_CoreFindEP>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	2bff      	cmp	r3, #255	; 0xff
 8009e0a:	d025      	beq.n	8009e58 <USBD_LL_DataInStage+0x15a>
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d122      	bne.n	8009e58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d11c      	bne.n	8009e58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009e1e:	7dfa      	ldrb	r2, [r7, #23]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	32ae      	adds	r2, #174	; 0xae
 8009e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d014      	beq.n	8009e58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009e2e:	7dfa      	ldrb	r2, [r7, #23]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009e36:	7dfa      	ldrb	r2, [r7, #23]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	32ae      	adds	r2, #174	; 0xae
 8009e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	7afa      	ldrb	r2, [r7, #11]
 8009e44:	4611      	mov	r1, r2
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	4798      	blx	r3
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009e4e:	7dbb      	ldrb	r3, [r7, #22]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009e54:	7dbb      	ldrb	r3, [r7, #22]
 8009e56:	e000      	b.n	8009e5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009e58:	2300      	movs	r3, #0
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b084      	sub	sp, #16
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d014      	beq.n	8009ec8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d00e      	beq.n	8009ec8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	6852      	ldr	r2, [r2, #4]
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	4611      	mov	r1, r2
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	4798      	blx	r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ec8:	2340      	movs	r3, #64	; 0x40
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f004 fd8b 	bl	800e9ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2240      	movs	r2, #64	; 0x40
 8009ee0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ee4:	2340      	movs	r3, #64	; 0x40
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	2180      	movs	r1, #128	; 0x80
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f004 fd7d 	bl	800e9ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2240      	movs	r2, #64	; 0x40
 8009efa:	621a      	str	r2, [r3, #32]

  return ret;
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	78fa      	ldrb	r2, [r7, #3]
 8009f16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d006      	beq.n	8009f48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d106      	bne.n	8009f80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d110      	bne.n	8009fc4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	69db      	ldr	r3, [r3, #28]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	32ae      	adds	r2, #174	; 0xae
 8009fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e01c      	b.n	800a02a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d115      	bne.n	800a028 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	32ae      	adds	r2, #174	; 0xae
 800a006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	32ae      	adds	r2, #174	; 0xae
 800a01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	4611      	mov	r1, r2
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3708      	adds	r7, #8
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b082      	sub	sp, #8
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	32ae      	adds	r2, #174	; 0xae
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	e01c      	b.n	800a08e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d115      	bne.n	800a08c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	32ae      	adds	r2, #174	; 0xae
 800a06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	32ae      	adds	r2, #174	; 0xae
 800a07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	78fa      	ldrb	r2, [r7, #3]
 800a086:	4611      	mov	r1, r2
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00e      	beq.n	800a0e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	6852      	ldr	r2, [r2, #4]
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	4611      	mov	r1, r2
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a118:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	460b      	mov	r3, r1
 800a130:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d920      	bls.n	800a190 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	b29b      	uxth	r3, r3
 800a154:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a156:	e013      	b.n	800a180 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a158:	f107 030a 	add.w	r3, r7, #10
 800a15c:	4619      	mov	r1, r3
 800a15e:	6978      	ldr	r0, [r7, #20]
 800a160:	f000 f81b 	bl	800a19a <USBD_GetNextDesc>
 800a164:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	d108      	bne.n	800a180 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	789b      	ldrb	r3, [r3, #2]
 800a176:	78fa      	ldrb	r2, [r7, #3]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d008      	beq.n	800a18e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	885b      	ldrh	r3, [r3, #2]
 800a184:	b29a      	uxth	r2, r3
 800a186:	897b      	ldrh	r3, [r7, #10]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d8e5      	bhi.n	800a158 <USBD_GetEpDesc+0x32>
 800a18c:	e000      	b.n	800a190 <USBD_GetEpDesc+0x6a>
          break;
 800a18e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a190:	693b      	ldr	r3, [r7, #16]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b085      	sub	sp, #20
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	881a      	ldrh	r2, [r3, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4413      	add	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a1f2:	8a3b      	ldrh	r3, [r7, #16]
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	b21a      	sxth	r2, r3
 800a1f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	b21b      	sxth	r3, r3
 800a200:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a202:	89fb      	ldrh	r3, [r7, #14]
}
 800a204:	4618      	mov	r0, r3
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d005      	beq.n	800a236 <USBD_StdDevReq+0x26>
 800a22a:	2b40      	cmp	r3, #64	; 0x40
 800a22c:	d857      	bhi.n	800a2de <USBD_StdDevReq+0xce>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00f      	beq.n	800a252 <USBD_StdDevReq+0x42>
 800a232:	2b20      	cmp	r3, #32
 800a234:	d153      	bne.n	800a2de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	32ae      	adds	r2, #174	; 0xae
 800a240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	6839      	ldr	r1, [r7, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	4798      	blx	r3
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]
      break;
 800a250:	e04a      	b.n	800a2e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	785b      	ldrb	r3, [r3, #1]
 800a256:	2b09      	cmp	r3, #9
 800a258:	d83b      	bhi.n	800a2d2 <USBD_StdDevReq+0xc2>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <USBD_StdDevReq+0x50>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a2c9 	.word	0x0800a2c9
 800a268:	0800a2d3 	.word	0x0800a2d3
 800a26c:	0800a2bf 	.word	0x0800a2bf
 800a270:	0800a2d3 	.word	0x0800a2d3
 800a274:	0800a293 	.word	0x0800a293
 800a278:	0800a289 	.word	0x0800a289
 800a27c:	0800a2d3 	.word	0x0800a2d3
 800a280:	0800a2ab 	.word	0x0800a2ab
 800a284:	0800a29d 	.word	0x0800a29d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa3c 	bl	800a708 <USBD_GetDescriptor>
          break;
 800a290:	e024      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fba1 	bl	800a9dc <USBD_SetAddress>
          break;
 800a29a:	e01f      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fbe0 	bl	800aa64 <USBD_SetConfig>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73fb      	strb	r3, [r7, #15]
          break;
 800a2a8:	e018      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fc83 	bl	800abb8 <USBD_GetConfig>
          break;
 800a2b2:	e013      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fcb4 	bl	800ac24 <USBD_GetStatus>
          break;
 800a2bc:	e00e      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fce3 	bl	800ac8c <USBD_SetFeature>
          break;
 800a2c6:	e009      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fd07 	bl	800acde <USBD_ClrFeature>
          break;
 800a2d0:	e004      	b.n	800a2dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fd5e 	bl	800ad96 <USBD_CtlError>
          break;
 800a2da:	bf00      	nop
      }
      break;
 800a2dc:	e004      	b.n	800a2e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fd58 	bl	800ad96 <USBD_CtlError>
      break;
 800a2e6:	bf00      	nop
  }

  return ret;
 800a2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop

0800a2f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a30a:	2b40      	cmp	r3, #64	; 0x40
 800a30c:	d005      	beq.n	800a31a <USBD_StdItfReq+0x26>
 800a30e:	2b40      	cmp	r3, #64	; 0x40
 800a310:	d852      	bhi.n	800a3b8 <USBD_StdItfReq+0xc4>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <USBD_StdItfReq+0x26>
 800a316:	2b20      	cmp	r3, #32
 800a318:	d14e      	bne.n	800a3b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a320:	b2db      	uxtb	r3, r3
 800a322:	3b01      	subs	r3, #1
 800a324:	2b02      	cmp	r3, #2
 800a326:	d840      	bhi.n	800a3aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	889b      	ldrh	r3, [r3, #4]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d836      	bhi.n	800a3a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	889b      	ldrh	r3, [r3, #4]
 800a336:	b2db      	uxtb	r3, r3
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7ff fed9 	bl	800a0f2 <USBD_CoreFindIF>
 800a340:	4603      	mov	r3, r0
 800a342:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a344:	7bbb      	ldrb	r3, [r7, #14]
 800a346:	2bff      	cmp	r3, #255	; 0xff
 800a348:	d01d      	beq.n	800a386 <USBD_StdItfReq+0x92>
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d11a      	bne.n	800a386 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a350:	7bba      	ldrb	r2, [r7, #14]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	32ae      	adds	r2, #174	; 0xae
 800a356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00f      	beq.n	800a380 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a360:	7bba      	ldrb	r2, [r7, #14]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a368:	7bba      	ldrb	r2, [r7, #14]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	32ae      	adds	r2, #174	; 0xae
 800a36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a37e:	e004      	b.n	800a38a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a380:	2303      	movs	r3, #3
 800a382:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a384:	e001      	b.n	800a38a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a386:	2303      	movs	r3, #3
 800a388:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	88db      	ldrh	r3, [r3, #6]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d110      	bne.n	800a3b4 <USBD_StdItfReq+0xc0>
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10d      	bne.n	800a3b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fdc7 	bl	800af2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a39e:	e009      	b.n	800a3b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fcf7 	bl	800ad96 <USBD_CtlError>
          break;
 800a3a8:	e004      	b.n	800a3b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a3aa:	6839      	ldr	r1, [r7, #0]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fcf2 	bl	800ad96 <USBD_CtlError>
          break;
 800a3b2:	e000      	b.n	800a3b6 <USBD_StdItfReq+0xc2>
          break;
 800a3b4:	bf00      	nop
      }
      break;
 800a3b6:	e004      	b.n	800a3c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fceb 	bl	800ad96 <USBD_CtlError>
      break;
 800a3c0:	bf00      	nop
  }

  return ret;
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	889b      	ldrh	r3, [r3, #4]
 800a3de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3e8:	2b40      	cmp	r3, #64	; 0x40
 800a3ea:	d007      	beq.n	800a3fc <USBD_StdEPReq+0x30>
 800a3ec:	2b40      	cmp	r3, #64	; 0x40
 800a3ee:	f200 817f 	bhi.w	800a6f0 <USBD_StdEPReq+0x324>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d02a      	beq.n	800a44c <USBD_StdEPReq+0x80>
 800a3f6:	2b20      	cmp	r3, #32
 800a3f8:	f040 817a 	bne.w	800a6f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a3fc:	7bbb      	ldrb	r3, [r7, #14]
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7ff fe83 	bl	800a10c <USBD_CoreFindEP>
 800a406:	4603      	mov	r3, r0
 800a408:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a40a:	7b7b      	ldrb	r3, [r7, #13]
 800a40c:	2bff      	cmp	r3, #255	; 0xff
 800a40e:	f000 8174 	beq.w	800a6fa <USBD_StdEPReq+0x32e>
 800a412:	7b7b      	ldrb	r3, [r7, #13]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f040 8170 	bne.w	800a6fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a41a:	7b7a      	ldrb	r2, [r7, #13]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a422:	7b7a      	ldrb	r2, [r7, #13]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	32ae      	adds	r2, #174	; 0xae
 800a428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 8163 	beq.w	800a6fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a434:	7b7a      	ldrb	r2, [r7, #13]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32ae      	adds	r2, #174	; 0xae
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
 800a446:	4603      	mov	r3, r0
 800a448:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a44a:	e156      	b.n	800a6fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	785b      	ldrb	r3, [r3, #1]
 800a450:	2b03      	cmp	r3, #3
 800a452:	d008      	beq.n	800a466 <USBD_StdEPReq+0x9a>
 800a454:	2b03      	cmp	r3, #3
 800a456:	f300 8145 	bgt.w	800a6e4 <USBD_StdEPReq+0x318>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 809b 	beq.w	800a596 <USBD_StdEPReq+0x1ca>
 800a460:	2b01      	cmp	r3, #1
 800a462:	d03c      	beq.n	800a4de <USBD_StdEPReq+0x112>
 800a464:	e13e      	b.n	800a6e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d002      	beq.n	800a478 <USBD_StdEPReq+0xac>
 800a472:	2b03      	cmp	r3, #3
 800a474:	d016      	beq.n	800a4a4 <USBD_StdEPReq+0xd8>
 800a476:	e02c      	b.n	800a4d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00d      	beq.n	800a49a <USBD_StdEPReq+0xce>
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
 800a480:	2b80      	cmp	r3, #128	; 0x80
 800a482:	d00a      	beq.n	800a49a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	4619      	mov	r1, r3
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f004 faf3 	bl	800ea74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a48e:	2180      	movs	r1, #128	; 0x80
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f004 faef 	bl	800ea74 <USBD_LL_StallEP>
 800a496:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a498:	e020      	b.n	800a4dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fc7a 	bl	800ad96 <USBD_CtlError>
              break;
 800a4a2:	e01b      	b.n	800a4dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	885b      	ldrh	r3, [r3, #2]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10e      	bne.n	800a4ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00b      	beq.n	800a4ca <USBD_StdEPReq+0xfe>
 800a4b2:	7bbb      	ldrb	r3, [r7, #14]
 800a4b4:	2b80      	cmp	r3, #128	; 0x80
 800a4b6:	d008      	beq.n	800a4ca <USBD_StdEPReq+0xfe>
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	88db      	ldrh	r3, [r3, #6]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d104      	bne.n	800a4ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4c0:	7bbb      	ldrb	r3, [r7, #14]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f004 fad5 	bl	800ea74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fd2e 	bl	800af2c <USBD_CtlSendStatus>

              break;
 800a4d0:	e004      	b.n	800a4dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fc5e 	bl	800ad96 <USBD_CtlError>
              break;
 800a4da:	bf00      	nop
          }
          break;
 800a4dc:	e107      	b.n	800a6ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d002      	beq.n	800a4f0 <USBD_StdEPReq+0x124>
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d016      	beq.n	800a51c <USBD_StdEPReq+0x150>
 800a4ee:	e04b      	b.n	800a588 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00d      	beq.n	800a512 <USBD_StdEPReq+0x146>
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	2b80      	cmp	r3, #128	; 0x80
 800a4fa:	d00a      	beq.n	800a512 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4fc:	7bbb      	ldrb	r3, [r7, #14]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f004 fab7 	bl	800ea74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a506:	2180      	movs	r1, #128	; 0x80
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f004 fab3 	bl	800ea74 <USBD_LL_StallEP>
 800a50e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a510:	e040      	b.n	800a594 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fc3e 	bl	800ad96 <USBD_CtlError>
              break;
 800a51a:	e03b      	b.n	800a594 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	885b      	ldrh	r3, [r3, #2]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d136      	bne.n	800a592 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d004      	beq.n	800a538 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a52e:	7bbb      	ldrb	r3, [r7, #14]
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f004 fabd 	bl	800eab2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fcf7 	bl	800af2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff fde2 	bl	800a10c <USBD_CoreFindEP>
 800a548:	4603      	mov	r3, r0
 800a54a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a54c:	7b7b      	ldrb	r3, [r7, #13]
 800a54e:	2bff      	cmp	r3, #255	; 0xff
 800a550:	d01f      	beq.n	800a592 <USBD_StdEPReq+0x1c6>
 800a552:	7b7b      	ldrb	r3, [r7, #13]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d11c      	bne.n	800a592 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a558:	7b7a      	ldrb	r2, [r7, #13]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a560:	7b7a      	ldrb	r2, [r7, #13]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	32ae      	adds	r2, #174	; 0xae
 800a566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d010      	beq.n	800a592 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a570:	7b7a      	ldrb	r2, [r7, #13]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	32ae      	adds	r2, #174	; 0xae
 800a576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	4798      	blx	r3
 800a582:	4603      	mov	r3, r0
 800a584:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a586:	e004      	b.n	800a592 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc03 	bl	800ad96 <USBD_CtlError>
              break;
 800a590:	e000      	b.n	800a594 <USBD_StdEPReq+0x1c8>
              break;
 800a592:	bf00      	nop
          }
          break;
 800a594:	e0ab      	b.n	800a6ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d002      	beq.n	800a5a8 <USBD_StdEPReq+0x1dc>
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d032      	beq.n	800a60c <USBD_StdEPReq+0x240>
 800a5a6:	e097      	b.n	800a6d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d007      	beq.n	800a5be <USBD_StdEPReq+0x1f2>
 800a5ae:	7bbb      	ldrb	r3, [r7, #14]
 800a5b0:	2b80      	cmp	r3, #128	; 0x80
 800a5b2:	d004      	beq.n	800a5be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fbed 	bl	800ad96 <USBD_CtlError>
                break;
 800a5bc:	e091      	b.n	800a6e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	da0b      	bge.n	800a5de <USBD_StdEPReq+0x212>
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	3310      	adds	r3, #16
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	4413      	add	r3, r2
 800a5da:	3304      	adds	r3, #4
 800a5dc:	e00b      	b.n	800a5f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	3304      	adds	r3, #4
 800a5f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2202      	movs	r2, #2
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fc37 	bl	800ae78 <USBD_CtlSendData>
              break;
 800a60a:	e06a      	b.n	800a6e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a60c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a610:	2b00      	cmp	r3, #0
 800a612:	da11      	bge.n	800a638 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	f003 020f 	and.w	r2, r3, #15
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	3324      	adds	r3, #36	; 0x24
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d117      	bne.n	800a65e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fbb0 	bl	800ad96 <USBD_CtlError>
                  break;
 800a636:	e054      	b.n	800a6e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	f003 020f 	and.w	r2, r3, #15
 800a63e:	6879      	ldr	r1, [r7, #4]
 800a640:	4613      	mov	r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	4413      	add	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	440b      	add	r3, r1
 800a64a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a64e:	881b      	ldrh	r3, [r3, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d104      	bne.n	800a65e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a654:	6839      	ldr	r1, [r7, #0]
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb9d 	bl	800ad96 <USBD_CtlError>
                  break;
 800a65c:	e041      	b.n	800a6e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a65e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a662:	2b00      	cmp	r3, #0
 800a664:	da0b      	bge.n	800a67e <USBD_StdEPReq+0x2b2>
 800a666:	7bbb      	ldrb	r3, [r7, #14]
 800a668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	3310      	adds	r3, #16
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	4413      	add	r3, r2
 800a67a:	3304      	adds	r3, #4
 800a67c:	e00b      	b.n	800a696 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a67e:	7bbb      	ldrb	r3, [r7, #14]
 800a680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	4413      	add	r3, r2
 800a694:	3304      	adds	r3, #4
 800a696:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a698:	7bbb      	ldrb	r3, [r7, #14]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <USBD_StdEPReq+0x2d8>
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	2b80      	cmp	r3, #128	; 0x80
 800a6a2:	d103      	bne.n	800a6ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	e00e      	b.n	800a6ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f004 fa1d 	bl	800eaf0 <USBD_LL_IsStallEP>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
 800a6c2:	e002      	b.n	800a6ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fbd1 	bl	800ae78 <USBD_CtlSendData>
              break;
 800a6d6:	e004      	b.n	800a6e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fb5b 	bl	800ad96 <USBD_CtlError>
              break;
 800a6e0:	bf00      	nop
          }
          break;
 800a6e2:	e004      	b.n	800a6ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fb55 	bl	800ad96 <USBD_CtlError>
          break;
 800a6ec:	bf00      	nop
      }
      break;
 800a6ee:	e005      	b.n	800a6fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fb4f 	bl	800ad96 <USBD_CtlError>
      break;
 800a6f8:	e000      	b.n	800a6fc <USBD_StdEPReq+0x330>
      break;
 800a6fa:	bf00      	nop
  }

  return ret;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	885b      	ldrh	r3, [r3, #2]
 800a722:	0a1b      	lsrs	r3, r3, #8
 800a724:	b29b      	uxth	r3, r3
 800a726:	3b01      	subs	r3, #1
 800a728:	2b06      	cmp	r3, #6
 800a72a:	f200 8128 	bhi.w	800a97e <USBD_GetDescriptor+0x276>
 800a72e:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <USBD_GetDescriptor+0x2c>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a751 	.word	0x0800a751
 800a738:	0800a769 	.word	0x0800a769
 800a73c:	0800a7a9 	.word	0x0800a7a9
 800a740:	0800a97f 	.word	0x0800a97f
 800a744:	0800a97f 	.word	0x0800a97f
 800a748:	0800a91f 	.word	0x0800a91f
 800a74c:	0800a94b 	.word	0x0800a94b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	7c12      	ldrb	r2, [r2, #16]
 800a75c:	f107 0108 	add.w	r1, r7, #8
 800a760:	4610      	mov	r0, r2
 800a762:	4798      	blx	r3
 800a764:	60f8      	str	r0, [r7, #12]
      break;
 800a766:	e112      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	7c1b      	ldrb	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10d      	bne.n	800a78c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a778:	f107 0208 	add.w	r2, r7, #8
 800a77c:	4610      	mov	r0, r2
 800a77e:	4798      	blx	r3
 800a780:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	2202      	movs	r2, #2
 800a788:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a78a:	e100      	b.n	800a98e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	f107 0208 	add.w	r2, r7, #8
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	701a      	strb	r2, [r3, #0]
      break;
 800a7a6:	e0f2      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	885b      	ldrh	r3, [r3, #2]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	f200 80ac 	bhi.w	800a90c <USBD_GetDescriptor+0x204>
 800a7b4:	a201      	add	r2, pc, #4	; (adr r2, 800a7bc <USBD_GetDescriptor+0xb4>)
 800a7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ba:	bf00      	nop
 800a7bc:	0800a7d5 	.word	0x0800a7d5
 800a7c0:	0800a809 	.word	0x0800a809
 800a7c4:	0800a83d 	.word	0x0800a83d
 800a7c8:	0800a871 	.word	0x0800a871
 800a7cc:	0800a8a5 	.word	0x0800a8a5
 800a7d0:	0800a8d9 	.word	0x0800a8d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	7c12      	ldrb	r2, [r2, #16]
 800a7ec:	f107 0108 	add.w	r1, r7, #8
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7f6:	e091      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 facb 	bl	800ad96 <USBD_CtlError>
            err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
          break;
 800a806:	e089      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7c12      	ldrb	r2, [r2, #16]
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
 800a828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82a:	e077      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fab1 	bl	800ad96 <USBD_CtlError>
            err++;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3301      	adds	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]
          break;
 800a83a:	e06f      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	7c12      	ldrb	r2, [r2, #16]
 800a854:	f107 0108 	add.w	r1, r7, #8
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85e:	e05d      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa97 	bl	800ad96 <USBD_CtlError>
            err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
          break;
 800a86e:	e055      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	7c12      	ldrb	r2, [r2, #16]
 800a888:	f107 0108 	add.w	r1, r7, #8
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a892:	e043      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa7d 	bl	800ad96 <USBD_CtlError>
            err++;
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8a2:	e03b      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00b      	beq.n	800a8c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	7c12      	ldrb	r2, [r2, #16]
 800a8bc:	f107 0108 	add.w	r1, r7, #8
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	4798      	blx	r3
 800a8c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8c6:	e029      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa63 	bl	800ad96 <USBD_CtlError>
            err++;
 800a8d0:	7afb      	ldrb	r3, [r7, #11]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8d6:	e021      	b.n	800a91c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8de:	699b      	ldr	r3, [r3, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	7c12      	ldrb	r2, [r2, #16]
 800a8f0:	f107 0108 	add.w	r1, r7, #8
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	4798      	blx	r3
 800a8f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8fa:	e00f      	b.n	800a91c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fa49 	bl	800ad96 <USBD_CtlError>
            err++;
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	3301      	adds	r3, #1
 800a908:	72fb      	strb	r3, [r7, #11]
          break;
 800a90a:	e007      	b.n	800a91c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fa41 	bl	800ad96 <USBD_CtlError>
          err++;
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	3301      	adds	r3, #1
 800a918:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a91a:	bf00      	nop
      }
      break;
 800a91c:	e037      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	7c1b      	ldrb	r3, [r3, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d109      	bne.n	800a93a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92e:	f107 0208 	add.w	r2, r7, #8
 800a932:	4610      	mov	r0, r2
 800a934:	4798      	blx	r3
 800a936:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a938:	e029      	b.n	800a98e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fa2a 	bl	800ad96 <USBD_CtlError>
        err++;
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	3301      	adds	r3, #1
 800a946:	72fb      	strb	r3, [r7, #11]
      break;
 800a948:	e021      	b.n	800a98e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7c1b      	ldrb	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10d      	bne.n	800a96e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95a:	f107 0208 	add.w	r2, r7, #8
 800a95e:	4610      	mov	r0, r2
 800a960:	4798      	blx	r3
 800a962:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	3301      	adds	r3, #1
 800a968:	2207      	movs	r2, #7
 800a96a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a96c:	e00f      	b.n	800a98e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fa10 	bl	800ad96 <USBD_CtlError>
        err++;
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	3301      	adds	r3, #1
 800a97a:	72fb      	strb	r3, [r7, #11]
      break;
 800a97c:	e007      	b.n	800a98e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fa08 	bl	800ad96 <USBD_CtlError>
      err++;
 800a986:	7afb      	ldrb	r3, [r7, #11]
 800a988:	3301      	adds	r3, #1
 800a98a:	72fb      	strb	r3, [r7, #11]
      break;
 800a98c:	bf00      	nop
  }

  if (err != 0U)
 800a98e:	7afb      	ldrb	r3, [r7, #11]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d11e      	bne.n	800a9d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	88db      	ldrh	r3, [r3, #6]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d016      	beq.n	800a9ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a99c:	893b      	ldrh	r3, [r7, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00e      	beq.n	800a9c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	88da      	ldrh	r2, [r3, #6]
 800a9a6:	893b      	ldrh	r3, [r7, #8]
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	bf28      	it	cs
 800a9ac:	4613      	movcs	r3, r2
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a9b2:	893b      	ldrh	r3, [r7, #8]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	68f9      	ldr	r1, [r7, #12]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fa5d 	bl	800ae78 <USBD_CtlSendData>
 800a9be:	e009      	b.n	800a9d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f9e7 	bl	800ad96 <USBD_CtlError>
 800a9c8:	e004      	b.n	800a9d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 faae 	bl	800af2c <USBD_CtlSendStatus>
 800a9d0:	e000      	b.n	800a9d4 <USBD_GetDescriptor+0x2cc>
    return;
 800a9d2:	bf00      	nop
  }
}
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop

0800a9dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b084      	sub	sp, #16
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	889b      	ldrh	r3, [r3, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d131      	bne.n	800aa52 <USBD_SetAddress+0x76>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	88db      	ldrh	r3, [r3, #6]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d12d      	bne.n	800aa52 <USBD_SetAddress+0x76>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	885b      	ldrh	r3, [r3, #2]
 800a9fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a9fc:	d829      	bhi.n	800aa52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	885b      	ldrh	r3, [r3, #2]
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d104      	bne.n	800aa20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f9bc 	bl	800ad96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1e:	e01d      	b.n	800aa5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	7bfa      	ldrb	r2, [r7, #15]
 800aa24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f004 f88b 	bl	800eb48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa7a 	bl	800af2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d004      	beq.n	800aa48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2202      	movs	r2, #2
 800aa42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa46:	e009      	b.n	800aa5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa50:	e004      	b.n	800aa5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f99e 	bl	800ad96 <USBD_CtlError>
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	885b      	ldrh	r3, [r3, #2]
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	4b4e      	ldr	r3, [pc, #312]	; (800abb4 <USBD_SetConfig+0x150>)
 800aa7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa7c:	4b4d      	ldr	r3, [pc, #308]	; (800abb4 <USBD_SetConfig+0x150>)
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d905      	bls.n	800aa90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f985 	bl	800ad96 <USBD_CtlError>
    return USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e08c      	b.n	800abaa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d002      	beq.n	800aaa2 <USBD_SetConfig+0x3e>
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d029      	beq.n	800aaf4 <USBD_SetConfig+0x90>
 800aaa0:	e075      	b.n	800ab8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aaa2:	4b44      	ldr	r3, [pc, #272]	; (800abb4 <USBD_SetConfig+0x150>)
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d020      	beq.n	800aaec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aaaa:	4b42      	ldr	r3, [pc, #264]	; (800abb4 <USBD_SetConfig+0x150>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	461a      	mov	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aab4:	4b3f      	ldr	r3, [pc, #252]	; (800abb4 <USBD_SetConfig+0x150>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fe ffe1 	bl	8009a82 <USBD_SetClassConfig>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aac4:	7bfb      	ldrb	r3, [r7, #15]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d008      	beq.n	800aadc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f962 	bl	800ad96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2202      	movs	r2, #2
 800aad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aada:	e065      	b.n	800aba8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 fa25 	bl	800af2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2203      	movs	r2, #3
 800aae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aaea:	e05d      	b.n	800aba8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fa1d 	bl	800af2c <USBD_CtlSendStatus>
      break;
 800aaf2:	e059      	b.n	800aba8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aaf4:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <USBD_SetConfig+0x150>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d112      	bne.n	800ab22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab04:	4b2b      	ldr	r3, [pc, #172]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab0e:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f7fe ffd0 	bl	8009aba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fa06 	bl	800af2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab20:	e042      	b.n	800aba8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab22:	4b24      	ldr	r3, [pc, #144]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d02a      	beq.n	800ab86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7fe ffbe 	bl	8009aba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab3e:	4b1d      	ldr	r3, [pc, #116]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab48:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f7fe ff97 	bl	8009a82 <USBD_SetClassConfig>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00f      	beq.n	800ab7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f918 	bl	800ad96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7fe ffa3 	bl	8009aba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab7c:	e014      	b.n	800aba8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f9d4 	bl	800af2c <USBD_CtlSendStatus>
      break;
 800ab84:	e010      	b.n	800aba8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9d0 	bl	800af2c <USBD_CtlSendStatus>
      break;
 800ab8c:	e00c      	b.n	800aba8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f900 	bl	800ad96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab96:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <USBD_SetConfig+0x150>)
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7fe ff8c 	bl	8009aba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aba2:	2303      	movs	r3, #3
 800aba4:	73fb      	strb	r3, [r7, #15]
      break;
 800aba6:	bf00      	nop
  }

  return ret;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200021c4 	.word	0x200021c4

0800abb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	88db      	ldrh	r3, [r3, #6]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d004      	beq.n	800abd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f8e2 	bl	800ad96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abd2:	e023      	b.n	800ac1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b02      	cmp	r3, #2
 800abde:	dc02      	bgt.n	800abe6 <USBD_GetConfig+0x2e>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dc03      	bgt.n	800abec <USBD_GetConfig+0x34>
 800abe4:	e015      	b.n	800ac12 <USBD_GetConfig+0x5a>
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d00b      	beq.n	800ac02 <USBD_GetConfig+0x4a>
 800abea:	e012      	b.n	800ac12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3308      	adds	r3, #8
 800abf6:	2201      	movs	r2, #1
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f93c 	bl	800ae78 <USBD_CtlSendData>
        break;
 800ac00:	e00c      	b.n	800ac1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3304      	adds	r3, #4
 800ac06:	2201      	movs	r2, #1
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f934 	bl	800ae78 <USBD_CtlSendData>
        break;
 800ac10:	e004      	b.n	800ac1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f8be 	bl	800ad96 <USBD_CtlError>
        break;
 800ac1a:	bf00      	nop
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	3b01      	subs	r3, #1
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d81e      	bhi.n	800ac7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	88db      	ldrh	r3, [r3, #6]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	d004      	beq.n	800ac4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f8a5 	bl	800ad96 <USBD_CtlError>
        break;
 800ac4c:	e01a      	b.n	800ac84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d005      	beq.n	800ac6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f043 0202 	orr.w	r2, r3, #2
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	2202      	movs	r2, #2
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f900 	bl	800ae78 <USBD_CtlSendData>
      break;
 800ac78:	e004      	b.n	800ac84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f88a 	bl	800ad96 <USBD_CtlError>
      break;
 800ac82:	bf00      	nop
  }
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	885b      	ldrh	r3, [r3, #2]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d107      	bne.n	800acae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f940 	bl	800af2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800acac:	e013      	b.n	800acd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d10b      	bne.n	800acce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	889b      	ldrh	r3, [r3, #4]
 800acba:	0a1b      	lsrs	r3, r3, #8
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	b2da      	uxtb	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f930 	bl	800af2c <USBD_CtlSendStatus>
}
 800accc:	e003      	b.n	800acd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f860 	bl	800ad96 <USBD_CtlError>
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b082      	sub	sp, #8
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	3b01      	subs	r3, #1
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d80b      	bhi.n	800ad0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	885b      	ldrh	r3, [r3, #2]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d10c      	bne.n	800ad18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f910 	bl	800af2c <USBD_CtlSendStatus>
      }
      break;
 800ad0c:	e004      	b.n	800ad18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f840 	bl	800ad96 <USBD_CtlError>
      break;
 800ad16:	e000      	b.n	800ad1a <USBD_ClrFeature+0x3c>
      break;
 800ad18:	bf00      	nop
  }
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	781a      	ldrb	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7ff fa41 	bl	800a1d4 <SWAPBYTE>
 800ad52:	4603      	mov	r3, r0
 800ad54:	461a      	mov	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7ff fa34 	bl	800a1d4 <SWAPBYTE>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7ff fa27 	bl	800a1d4 <SWAPBYTE>
 800ad86:	4603      	mov	r3, r0
 800ad88:	461a      	mov	r2, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	80da      	strh	r2, [r3, #6]
}
 800ad8e:	bf00      	nop
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ada0:	2180      	movs	r1, #128	; 0x80
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f003 fe66 	bl	800ea74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ada8:	2100      	movs	r1, #0
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f003 fe62 	bl	800ea74 <USBD_LL_StallEP>
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d036      	beq.n	800ae3c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800add2:	6938      	ldr	r0, [r7, #16]
 800add4:	f000 f836 	bl	800ae44 <USBD_GetLen>
 800add8:	4603      	mov	r3, r0
 800adda:	3301      	adds	r3, #1
 800addc:	b29b      	uxth	r3, r3
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	4413      	add	r3, r2
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	701a      	strb	r2, [r3, #0]
  idx++;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	3301      	adds	r3, #1
 800adf6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800adf8:	7dfb      	ldrb	r3, [r7, #23]
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	4413      	add	r3, r2
 800adfe:	2203      	movs	r2, #3
 800ae00:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	3301      	adds	r3, #1
 800ae06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae08:	e013      	b.n	800ae32 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	4413      	add	r3, r2
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	7812      	ldrb	r2, [r2, #0]
 800ae14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	613b      	str	r3, [r7, #16]
    idx++;
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	4413      	add	r3, r2
 800ae28:	2200      	movs	r2, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae2c:	7dfb      	ldrb	r3, [r7, #23]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e7      	bne.n	800ae0a <USBD_GetString+0x52>
 800ae3a:	e000      	b.n	800ae3e <USBD_GetString+0x86>
    return;
 800ae3c:	bf00      	nop
  }
}
 800ae3e:	3718      	adds	r7, #24
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae54:	e005      	b.n	800ae62 <USBD_GetLen+0x1e>
  {
    len++;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1f5      	bne.n	800ae56 <USBD_GetLen+0x12>
  }

  return len;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2202      	movs	r2, #2
 800ae88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f003 fe71 	bl	800eb86 <USBD_LL_Transmit>

  return USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	2100      	movs	r1, #0
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f003 fe60 	bl	800eb86 <USBD_LL_Transmit>

  return USBD_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2203      	movs	r2, #3
 800aee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	2100      	movs	r1, #0
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f003 fe64 	bl	800ebc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	2100      	movs	r1, #0
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f003 fe53 	bl	800ebc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2204      	movs	r2, #4
 800af38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af3c:	2300      	movs	r3, #0
 800af3e:	2200      	movs	r2, #0
 800af40:	2100      	movs	r1, #0
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f003 fe1f 	bl	800eb86 <USBD_LL_Transmit>

  return USBD_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2205      	movs	r2, #5
 800af5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af62:	2300      	movs	r3, #0
 800af64:	2200      	movs	r2, #0
 800af66:	2100      	movs	r1, #0
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f003 fe2d 	bl	800ebc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af8a:	2b84      	cmp	r3, #132	; 0x84
 800af8c:	d005      	beq.n	800af9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4413      	add	r3, r2
 800af96:	3303      	adds	r3, #3
 800af98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af9a:	68fb      	ldr	r3, [r7, #12]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800afac:	f001 fa6c 	bl	800c488 <vTaskStartScheduler>
  
  return osOK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800afb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afb8:	b089      	sub	sp, #36	; 0x24
 800afba:	af04      	add	r7, sp, #16
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d020      	beq.n	800b00a <osThreadCreate+0x54>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d01c      	beq.n	800b00a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685c      	ldr	r4, [r3, #4]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691e      	ldr	r6, [r3, #16]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff ffc8 	bl	800af78 <makeFreeRtosPriority>
 800afe8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aff2:	9202      	str	r2, [sp, #8]
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	9100      	str	r1, [sp, #0]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	4632      	mov	r2, r6
 800affc:	4629      	mov	r1, r5
 800affe:	4620      	mov	r0, r4
 800b000:	f001 f852 	bl	800c0a8 <xTaskCreateStatic>
 800b004:	4603      	mov	r3, r0
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	e01c      	b.n	800b044 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	685c      	ldr	r4, [r3, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b016:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff ffaa 	bl	800af78 <makeFreeRtosPriority>
 800b024:	4602      	mov	r2, r0
 800b026:	f107 030c 	add.w	r3, r7, #12
 800b02a:	9301      	str	r3, [sp, #4]
 800b02c:	9200      	str	r2, [sp, #0]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	4632      	mov	r2, r6
 800b032:	4629      	mov	r1, r5
 800b034:	4620      	mov	r0, r4
 800b036:	f001 f894 	bl	800c162 <xTaskCreate>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d001      	beq.n	800b044 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b040:	2300      	movs	r3, #0
 800b042:	e000      	b.n	800b046 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b044:	68fb      	ldr	r3, [r7, #12]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b050 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a09      	ldr	r2, [pc, #36]	; (800b080 <osDelay+0x30>)
 800b05c:	fba2 2303 	umull	r2, r3, r2, r3
 800b060:	099b      	lsrs	r3, r3, #6
 800b062:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <osDelay+0x1e>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	e000      	b.n	800b070 <osDelay+0x20>
 800b06e:	2301      	movs	r3, #1
 800b070:	4618      	mov	r0, r3
 800b072:	f001 f9d5 	bl	800c420 <vTaskDelay>
  
  return osOK;
 800b076:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	10624dd3 	.word	0x10624dd3

0800b084 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f103 0208 	add.w	r2, r3, #8
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b09c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f103 0208 	add.w	r2, r3, #8
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f103 0208 	add.w	r2, r3, #8
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0d2:	bf00      	nop
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	689a      	ldr	r2, [r3, #8]
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	601a      	str	r2, [r3, #0]
}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b126:	b480      	push	{r7}
 800b128:	b085      	sub	sp, #20
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b13c:	d103      	bne.n	800b146 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	e00c      	b.n	800b160 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3308      	adds	r3, #8
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	e002      	b.n	800b154 <vListInsert+0x2e>
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d2f6      	bcs.n	800b14e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	601a      	str	r2, [r3, #0]
}
 800b18c:	bf00      	nop
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	6892      	ldr	r2, [r2, #8]
 800b1ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	6852      	ldr	r2, [r2, #4]
 800b1b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d103      	bne.n	800b1cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	1e5a      	subs	r2, r3, #1
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10a      	bne.n	800b216 <xQueueGenericReset+0x2a>
	__asm volatile
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	60bb      	str	r3, [r7, #8]
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b216:	f002 fd55 	bl	800dcc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b222:	68f9      	ldr	r1, [r7, #12]
 800b224:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b226:	fb01 f303 	mul.w	r3, r1, r3
 800b22a:	441a      	add	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2200      	movs	r2, #0
 800b234:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b246:	3b01      	subs	r3, #1
 800b248:	68f9      	ldr	r1, [r7, #12]
 800b24a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b24c:	fb01 f303 	mul.w	r3, r1, r3
 800b250:	441a      	add	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	22ff      	movs	r2, #255	; 0xff
 800b25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	22ff      	movs	r2, #255	; 0xff
 800b262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d114      	bne.n	800b296 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01a      	beq.n	800b2aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3310      	adds	r3, #16
 800b278:	4618      	mov	r0, r3
 800b27a:	f001 fbd5 	bl	800ca28 <xTaskRemoveFromEventList>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d012      	beq.n	800b2aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b284:	4b0c      	ldr	r3, [pc, #48]	; (800b2b8 <xQueueGenericReset+0xcc>)
 800b286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	e009      	b.n	800b2aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3310      	adds	r3, #16
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff fef2 	bl	800b084 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3324      	adds	r3, #36	; 0x24
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff feed 	bl	800b084 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2aa:	f002 fd3b 	bl	800dd24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2ae:	2301      	movs	r3, #1
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08e      	sub	sp, #56	; 0x38
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10a      	bne.n	800b2e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10a      	bne.n	800b302 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <xQueueGenericCreateStatic+0x52>
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <xQueueGenericCreateStatic+0x56>
 800b30e:	2301      	movs	r3, #1
 800b310:	e000      	b.n	800b314 <xQueueGenericCreateStatic+0x58>
 800b312:	2300      	movs	r3, #0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10a      	bne.n	800b32e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	623b      	str	r3, [r7, #32]
}
 800b32a:	bf00      	nop
 800b32c:	e7fe      	b.n	800b32c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d102      	bne.n	800b33a <xQueueGenericCreateStatic+0x7e>
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <xQueueGenericCreateStatic+0x82>
 800b33a:	2301      	movs	r3, #1
 800b33c:	e000      	b.n	800b340 <xQueueGenericCreateStatic+0x84>
 800b33e:	2300      	movs	r3, #0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10a      	bne.n	800b35a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b348:	f383 8811 	msr	BASEPRI, r3
 800b34c:	f3bf 8f6f 	isb	sy
 800b350:	f3bf 8f4f 	dsb	sy
 800b354:	61fb      	str	r3, [r7, #28]
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b35a:	2350      	movs	r3, #80	; 0x50
 800b35c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b50      	cmp	r3, #80	; 0x50
 800b362:	d00a      	beq.n	800b37a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	61bb      	str	r3, [r7, #24]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b37a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00d      	beq.n	800b3a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b38e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	4613      	mov	r3, r2
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	68b9      	ldr	r1, [r7, #8]
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 f805 	bl	800b3ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3730      	adds	r7, #48	; 0x30
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d103      	bne.n	800b3c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	69ba      	ldr	r2, [r7, #24]
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	e002      	b.n	800b3ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3da:	2101      	movs	r1, #1
 800b3dc:	69b8      	ldr	r0, [r7, #24]
 800b3de:	f7ff ff05 	bl	800b1ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	78fa      	ldrb	r2, [r7, #3]
 800b3e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b3ea:	bf00      	nop
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b082      	sub	sp, #8
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00e      	beq.n	800b41e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b412:	2300      	movs	r3, #0
 800b414:	2200      	movs	r2, #0
 800b416:	2100      	movs	r1, #0
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 f81f 	bl	800b45c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b41e:	bf00      	nop
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b426:	b580      	push	{r7, lr}
 800b428:	b088      	sub	sp, #32
 800b42a:	af02      	add	r7, sp, #8
 800b42c:	4603      	mov	r3, r0
 800b42e:	6039      	str	r1, [r7, #0]
 800b430:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b432:	2301      	movs	r3, #1
 800b434:	617b      	str	r3, [r7, #20]
 800b436:	2300      	movs	r3, #0
 800b438:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2200      	movs	r2, #0
 800b442:	6939      	ldr	r1, [r7, #16]
 800b444:	6978      	ldr	r0, [r7, #20]
 800b446:	f7ff ff39 	bl	800b2bc <xQueueGenericCreateStatic>
 800b44a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7ff ffd0 	bl	800b3f2 <prvInitialiseMutex>

		return xNewQueue;
 800b452:	68fb      	ldr	r3, [r7, #12]
	}
 800b454:	4618      	mov	r0, r3
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08e      	sub	sp, #56	; 0x38
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b46a:	2300      	movs	r3, #0
 800b46c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <xQueueGenericSend+0x32>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d103      	bne.n	800b49c <xQueueGenericSend+0x40>
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <xQueueGenericSend+0x44>
 800b49c:	2301      	movs	r3, #1
 800b49e:	e000      	b.n	800b4a2 <xQueueGenericSend+0x46>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d10a      	bne.n	800b4bc <xQueueGenericSend+0x60>
	__asm volatile
 800b4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4aa:	f383 8811 	msr	BASEPRI, r3
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4b8:	bf00      	nop
 800b4ba:	e7fe      	b.n	800b4ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d103      	bne.n	800b4ca <xQueueGenericSend+0x6e>
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d101      	bne.n	800b4ce <xQueueGenericSend+0x72>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e000      	b.n	800b4d0 <xQueueGenericSend+0x74>
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <xQueueGenericSend+0x8e>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	623b      	str	r3, [r7, #32]
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4ea:	f001 fc5f 	bl	800cdac <xTaskGetSchedulerState>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d102      	bne.n	800b4fa <xQueueGenericSend+0x9e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <xQueueGenericSend+0xa2>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e000      	b.n	800b500 <xQueueGenericSend+0xa4>
 800b4fe:	2300      	movs	r3, #0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <xQueueGenericSend+0xbe>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	61fb      	str	r3, [r7, #28]
}
 800b516:	bf00      	nop
 800b518:	e7fe      	b.n	800b518 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b51a:	f002 fbd3 	bl	800dcc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b526:	429a      	cmp	r2, r3
 800b528:	d302      	bcc.n	800b530 <xQueueGenericSend+0xd4>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d129      	bne.n	800b584 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	68b9      	ldr	r1, [r7, #8]
 800b534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b536:	f000 fc49 	bl	800bdcc <prvCopyDataToQueue>
 800b53a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	2b00      	cmp	r3, #0
 800b542:	d010      	beq.n	800b566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	3324      	adds	r3, #36	; 0x24
 800b548:	4618      	mov	r0, r3
 800b54a:	f001 fa6d 	bl	800ca28 <xTaskRemoveFromEventList>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d013      	beq.n	800b57c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b554:	4b3f      	ldr	r3, [pc, #252]	; (800b654 <xQueueGenericSend+0x1f8>)
 800b556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	f3bf 8f4f 	dsb	sy
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	e00a      	b.n	800b57c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d007      	beq.n	800b57c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b56c:	4b39      	ldr	r3, [pc, #228]	; (800b654 <xQueueGenericSend+0x1f8>)
 800b56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b57c:	f002 fbd2 	bl	800dd24 <vPortExitCritical>
				return pdPASS;
 800b580:	2301      	movs	r3, #1
 800b582:	e063      	b.n	800b64c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d103      	bne.n	800b592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b58a:	f002 fbcb 	bl	800dd24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	e05c      	b.n	800b64c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b594:	2b00      	cmp	r3, #0
 800b596:	d106      	bne.n	800b5a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b598:	f107 0314 	add.w	r3, r7, #20
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 faa5 	bl	800caec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5a6:	f002 fbbd 	bl	800dd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5aa:	f000 ffdf 	bl	800c56c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5ae:	f002 fb89 	bl	800dcc4 <vPortEnterCritical>
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5b8:	b25b      	sxtb	r3, r3
 800b5ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5be:	d103      	bne.n	800b5c8 <xQueueGenericSend+0x16c>
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5ce:	b25b      	sxtb	r3, r3
 800b5d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5d4:	d103      	bne.n	800b5de <xQueueGenericSend+0x182>
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5de:	f002 fba1 	bl	800dd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5e2:	1d3a      	adds	r2, r7, #4
 800b5e4:	f107 0314 	add.w	r3, r7, #20
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f001 fa94 	bl	800cb18 <xTaskCheckForTimeOut>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d124      	bne.n	800b640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5f8:	f000 fce0 	bl	800bfbc <prvIsQueueFull>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d018      	beq.n	800b634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	3310      	adds	r3, #16
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	4611      	mov	r1, r2
 800b60a:	4618      	mov	r0, r3
 800b60c:	f001 f9bc 	bl	800c988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b612:	f000 fc6b 	bl	800beec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b616:	f000 ffb7 	bl	800c588 <xTaskResumeAll>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f47f af7c 	bne.w	800b51a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b622:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <xQueueGenericSend+0x1f8>)
 800b624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	e772      	b.n	800b51a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b636:	f000 fc59 	bl	800beec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b63a:	f000 ffa5 	bl	800c588 <xTaskResumeAll>
 800b63e:	e76c      	b.n	800b51a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b642:	f000 fc53 	bl	800beec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b646:	f000 ff9f 	bl	800c588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b64a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3738      	adds	r7, #56	; 0x38
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	e000ed04 	.word	0xe000ed04

0800b658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b090      	sub	sp, #64	; 0x40
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10a      	bne.n	800b686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b682:	bf00      	nop
 800b684:	e7fe      	b.n	800b684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <xQueueGenericSendFromISR+0x3c>
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b690:	2b00      	cmp	r3, #0
 800b692:	d101      	bne.n	800b698 <xQueueGenericSendFromISR+0x40>
 800b694:	2301      	movs	r3, #1
 800b696:	e000      	b.n	800b69a <xQueueGenericSendFromISR+0x42>
 800b698:	2300      	movs	r3, #0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10a      	bne.n	800b6b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d103      	bne.n	800b6c2 <xQueueGenericSendFromISR+0x6a>
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d101      	bne.n	800b6c6 <xQueueGenericSendFromISR+0x6e>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e000      	b.n	800b6c8 <xQueueGenericSendFromISR+0x70>
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10a      	bne.n	800b6e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	623b      	str	r3, [r7, #32]
}
 800b6de:	bf00      	nop
 800b6e0:	e7fe      	b.n	800b6e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6e2:	f002 fbcb 	bl	800de7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b6e6:	f3ef 8211 	mrs	r2, BASEPRI
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	61fa      	str	r2, [r7, #28]
 800b6fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d302      	bcc.n	800b714 <xQueueGenericSendFromISR+0xbc>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b02      	cmp	r3, #2
 800b712:	d12f      	bne.n	800b774 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	68b9      	ldr	r1, [r7, #8]
 800b728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b72a:	f000 fb4f 	bl	800bdcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b72e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b736:	d112      	bne.n	800b75e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d016      	beq.n	800b76e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	3324      	adds	r3, #36	; 0x24
 800b744:	4618      	mov	r0, r3
 800b746:	f001 f96f 	bl	800ca28 <xTaskRemoveFromEventList>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00e      	beq.n	800b76e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00b      	beq.n	800b76e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	e007      	b.n	800b76e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b75e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b762:	3301      	adds	r3, #1
 800b764:	b2db      	uxtb	r3, r3
 800b766:	b25a      	sxtb	r2, r3
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b76e:	2301      	movs	r3, #1
 800b770:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b772:	e001      	b.n	800b778 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b774:	2300      	movs	r3, #0
 800b776:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b782:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b786:	4618      	mov	r0, r3
 800b788:	3740      	adds	r7, #64	; 0x40
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b08e      	sub	sp, #56	; 0x38
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	623b      	str	r3, [r7, #32]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00a      	beq.n	800b7d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	61fb      	str	r3, [r7, #28]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d103      	bne.n	800b7e6 <xQueueGiveFromISR+0x58>
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <xQueueGiveFromISR+0x5c>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e000      	b.n	800b7ec <xQueueGiveFromISR+0x5e>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10a      	bne.n	800b806 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	61bb      	str	r3, [r7, #24]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b806:	f002 fb39 	bl	800de7c <vPortValidateInterruptPriority>
	__asm volatile
 800b80a:	f3ef 8211 	mrs	r2, BASEPRI
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	617a      	str	r2, [r7, #20]
 800b820:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b822:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b824:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b832:	429a      	cmp	r2, r3
 800b834:	d22b      	bcs.n	800b88e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b850:	d112      	bne.n	800b878 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b856:	2b00      	cmp	r3, #0
 800b858:	d016      	beq.n	800b888 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	3324      	adds	r3, #36	; 0x24
 800b85e:	4618      	mov	r0, r3
 800b860:	f001 f8e2 	bl	800ca28 <xTaskRemoveFromEventList>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00e      	beq.n	800b888 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00b      	beq.n	800b888 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	2201      	movs	r2, #1
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	e007      	b.n	800b888 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b87c:	3301      	adds	r3, #1
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	b25a      	sxtb	r2, r3
 800b882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b888:	2301      	movs	r3, #1
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
 800b88c:	e001      	b.n	800b892 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b88e:	2300      	movs	r3, #0
 800b890:	637b      	str	r3, [r7, #52]	; 0x34
 800b892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b894:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f383 8811 	msr	BASEPRI, r3
}
 800b89c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3738      	adds	r7, #56	; 0x38
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08c      	sub	sp, #48	; 0x30
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10a      	bne.n	800b8d8 <xQueueReceive+0x30>
	__asm volatile
 800b8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	623b      	str	r3, [r7, #32]
}
 800b8d4:	bf00      	nop
 800b8d6:	e7fe      	b.n	800b8d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d103      	bne.n	800b8e6 <xQueueReceive+0x3e>
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <xQueueReceive+0x42>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e000      	b.n	800b8ec <xQueueReceive+0x44>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <xQueueReceive+0x5e>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	61fb      	str	r3, [r7, #28]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b906:	f001 fa51 	bl	800cdac <xTaskGetSchedulerState>
 800b90a:	4603      	mov	r3, r0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <xQueueReceive+0x6e>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <xQueueReceive+0x72>
 800b916:	2301      	movs	r3, #1
 800b918:	e000      	b.n	800b91c <xQueueReceive+0x74>
 800b91a:	2300      	movs	r3, #0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d10a      	bne.n	800b936 <xQueueReceive+0x8e>
	__asm volatile
 800b920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b924:	f383 8811 	msr	BASEPRI, r3
 800b928:	f3bf 8f6f 	isb	sy
 800b92c:	f3bf 8f4f 	dsb	sy
 800b930:	61bb      	str	r3, [r7, #24]
}
 800b932:	bf00      	nop
 800b934:	e7fe      	b.n	800b934 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b936:	f002 f9c5 	bl	800dcc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	2b00      	cmp	r3, #0
 800b944:	d01f      	beq.n	800b986 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b946:	68b9      	ldr	r1, [r7, #8]
 800b948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b94a:	f000 faa9 	bl	800bea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	1e5a      	subs	r2, r3, #1
 800b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b954:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00f      	beq.n	800b97e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b960:	3310      	adds	r3, #16
 800b962:	4618      	mov	r0, r3
 800b964:	f001 f860 	bl	800ca28 <xTaskRemoveFromEventList>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d007      	beq.n	800b97e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b96e:	4b3d      	ldr	r3, [pc, #244]	; (800ba64 <xQueueReceive+0x1bc>)
 800b970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b97e:	f002 f9d1 	bl	800dd24 <vPortExitCritical>
				return pdPASS;
 800b982:	2301      	movs	r3, #1
 800b984:	e069      	b.n	800ba5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d103      	bne.n	800b994 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b98c:	f002 f9ca 	bl	800dd24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b990:	2300      	movs	r3, #0
 800b992:	e062      	b.n	800ba5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d106      	bne.n	800b9a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b99a:	f107 0310 	add.w	r3, r7, #16
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f001 f8a4 	bl	800caec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9a8:	f002 f9bc 	bl	800dd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9ac:	f000 fdde 	bl	800c56c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9b0:	f002 f988 	bl	800dcc4 <vPortEnterCritical>
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9ba:	b25b      	sxtb	r3, r3
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9c0:	d103      	bne.n	800b9ca <xQueueReceive+0x122>
 800b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9d0:	b25b      	sxtb	r3, r3
 800b9d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9d6:	d103      	bne.n	800b9e0 <xQueueReceive+0x138>
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9e0:	f002 f9a0 	bl	800dd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9e4:	1d3a      	adds	r2, r7, #4
 800b9e6:	f107 0310 	add.w	r3, r7, #16
 800b9ea:	4611      	mov	r1, r2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 f893 	bl	800cb18 <xTaskCheckForTimeOut>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d123      	bne.n	800ba40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9fa:	f000 fac9 	bl	800bf90 <prvIsQueueEmpty>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d017      	beq.n	800ba34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	3324      	adds	r3, #36	; 0x24
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 ffbb 	bl	800c988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba14:	f000 fa6a 	bl	800beec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba18:	f000 fdb6 	bl	800c588 <xTaskResumeAll>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d189      	bne.n	800b936 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba22:	4b10      	ldr	r3, [pc, #64]	; (800ba64 <xQueueReceive+0x1bc>)
 800ba24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba28:	601a      	str	r2, [r3, #0]
 800ba2a:	f3bf 8f4f 	dsb	sy
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	e780      	b.n	800b936 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba36:	f000 fa59 	bl	800beec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba3a:	f000 fda5 	bl	800c588 <xTaskResumeAll>
 800ba3e:	e77a      	b.n	800b936 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba42:	f000 fa53 	bl	800beec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba46:	f000 fd9f 	bl	800c588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba4c:	f000 faa0 	bl	800bf90 <prvIsQueueEmpty>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f43f af6f 	beq.w	800b936 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3730      	adds	r7, #48	; 0x30
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	e000ed04 	.word	0xe000ed04

0800ba68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b08e      	sub	sp, #56	; 0x38
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba72:	2300      	movs	r3, #0
 800ba74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	623b      	str	r3, [r7, #32]
}
 800ba96:	bf00      	nop
 800ba98:	e7fe      	b.n	800ba98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d00a      	beq.n	800bab8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	61fb      	str	r3, [r7, #28]
}
 800bab4:	bf00      	nop
 800bab6:	e7fe      	b.n	800bab6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bab8:	f001 f978 	bl	800cdac <xTaskGetSchedulerState>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d102      	bne.n	800bac8 <xQueueSemaphoreTake+0x60>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <xQueueSemaphoreTake+0x64>
 800bac8:	2301      	movs	r3, #1
 800baca:	e000      	b.n	800bace <xQueueSemaphoreTake+0x66>
 800bacc:	2300      	movs	r3, #0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10a      	bne.n	800bae8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	61bb      	str	r3, [r7, #24]
}
 800bae4:	bf00      	nop
 800bae6:	e7fe      	b.n	800bae6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bae8:	f002 f8ec 	bl	800dcc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800baf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d024      	beq.n	800bb42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	1e5a      	subs	r2, r3, #1
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d104      	bne.n	800bb12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb08:	f001 faf8 	bl	800d0fc <pvTaskIncrementMutexHeldCount>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00f      	beq.n	800bb3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1c:	3310      	adds	r3, #16
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 ff82 	bl	800ca28 <xTaskRemoveFromEventList>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb2a:	4b54      	ldr	r3, [pc, #336]	; (800bc7c <xQueueSemaphoreTake+0x214>)
 800bb2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb3a:	f002 f8f3 	bl	800dd24 <vPortExitCritical>
				return pdPASS;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e097      	b.n	800bc72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d111      	bne.n	800bb6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	617b      	str	r3, [r7, #20]
}
 800bb60:	bf00      	nop
 800bb62:	e7fe      	b.n	800bb62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bb64:	f002 f8de 	bl	800dd24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	e082      	b.n	800bc72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb72:	f107 030c 	add.w	r3, r7, #12
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 ffb8 	bl	800caec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb80:	f002 f8d0 	bl	800dd24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb84:	f000 fcf2 	bl	800c56c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb88:	f002 f89c 	bl	800dcc4 <vPortEnterCritical>
 800bb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb92:	b25b      	sxtb	r3, r3
 800bb94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb98:	d103      	bne.n	800bba2 <xQueueSemaphoreTake+0x13a>
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba8:	b25b      	sxtb	r3, r3
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbae:	d103      	bne.n	800bbb8 <xQueueSemaphoreTake+0x150>
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb8:	f002 f8b4 	bl	800dd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbbc:	463a      	mov	r2, r7
 800bbbe:	f107 030c 	add.w	r3, r7, #12
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 ffa7 	bl	800cb18 <xTaskCheckForTimeOut>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d132      	bne.n	800bc36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbd2:	f000 f9dd 	bl	800bf90 <prvIsQueueEmpty>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d026      	beq.n	800bc2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d109      	bne.n	800bbf8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bbe4:	f002 f86e 	bl	800dcc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f001 f8fb 	bl	800cde8 <xTaskPriorityInherit>
 800bbf2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bbf4:	f002 f896 	bl	800dd24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	3324      	adds	r3, #36	; 0x24
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 fec1 	bl	800c988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc08:	f000 f970 	bl	800beec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc0c:	f000 fcbc 	bl	800c588 <xTaskResumeAll>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f47f af68 	bne.w	800bae8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bc18:	4b18      	ldr	r3, [pc, #96]	; (800bc7c <xQueueSemaphoreTake+0x214>)
 800bc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc1e:	601a      	str	r2, [r3, #0]
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	e75e      	b.n	800bae8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc2c:	f000 f95e 	bl	800beec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc30:	f000 fcaa 	bl	800c588 <xTaskResumeAll>
 800bc34:	e758      	b.n	800bae8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bc36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc38:	f000 f958 	bl	800beec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc3c:	f000 fca4 	bl	800c588 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc42:	f000 f9a5 	bl	800bf90 <prvIsQueueEmpty>
 800bc46:	4603      	mov	r3, r0
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f43f af4d 	beq.w	800bae8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00d      	beq.n	800bc70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bc54:	f002 f836 	bl	800dcc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bc58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc5a:	f000 f89f 	bl	800bd9c <prvGetDisinheritPriorityAfterTimeout>
 800bc5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 f9ba 	bl	800cfe0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bc6c:	f002 f85a 	bl	800dd24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3738      	adds	r7, #56	; 0x38
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	e000ed04 	.word	0xe000ed04

0800bc80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08e      	sub	sp, #56	; 0x38
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d10a      	bne.n	800bcac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bc96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	623b      	str	r3, [r7, #32]
}
 800bca8:	bf00      	nop
 800bcaa:	e7fe      	b.n	800bcaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d103      	bne.n	800bcba <xQueueReceiveFromISR+0x3a>
 800bcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <xQueueReceiveFromISR+0x3e>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e000      	b.n	800bcc0 <xQueueReceiveFromISR+0x40>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	61fb      	str	r3, [r7, #28]
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcda:	f002 f8cf 	bl	800de7c <vPortValidateInterruptPriority>
	__asm volatile
 800bcde:	f3ef 8211 	mrs	r2, BASEPRI
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	61ba      	str	r2, [r7, #24]
 800bcf4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bcf6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d02f      	beq.n	800bd66 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd10:	68b9      	ldr	r1, [r7, #8]
 800bd12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd14:	f000 f8c4 	bl	800bea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1a:	1e5a      	subs	r2, r3, #1
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd28:	d112      	bne.n	800bd50 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d016      	beq.n	800bd60 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	3310      	adds	r3, #16
 800bd36:	4618      	mov	r0, r3
 800bd38:	f000 fe76 	bl	800ca28 <xTaskRemoveFromEventList>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d00e      	beq.n	800bd60 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d00b      	beq.n	800bd60 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	e007      	b.n	800bd60 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd54:	3301      	adds	r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	b25a      	sxtb	r2, r3
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bd60:	2301      	movs	r3, #1
 800bd62:	637b      	str	r3, [r7, #52]	; 0x34
 800bd64:	e001      	b.n	800bd6a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	637b      	str	r3, [r7, #52]	; 0x34
 800bd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f383 8811 	msr	BASEPRI, r3
}
 800bd74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3738      	adds	r7, #56	; 0x38
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	649a      	str	r2, [r3, #72]	; 0x48
	}
 800bd90:	bf00      	nop
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d006      	beq.n	800bdba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f1c3 0314 	rsb	r3, r3, #20
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	e001      	b.n	800bdbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
	}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b086      	sub	sp, #24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10d      	bne.n	800be06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d14d      	bne.n	800be8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f001 f86c 	bl	800ced4 <xTaskPriorityDisinherit>
 800bdfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	609a      	str	r2, [r3, #8]
 800be04:	e043      	b.n	800be8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d119      	bne.n	800be40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6858      	ldr	r0, [r3, #4]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be14:	461a      	mov	r2, r3
 800be16:	68b9      	ldr	r1, [r7, #8]
 800be18:	f003 ff13 	bl	800fc42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be24:	441a      	add	r2, r3
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	429a      	cmp	r2, r3
 800be34:	d32b      	bcc.n	800be8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	605a      	str	r2, [r3, #4]
 800be3e:	e026      	b.n	800be8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	68d8      	ldr	r0, [r3, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be48:	461a      	mov	r2, r3
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	f003 fef9 	bl	800fc42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	68da      	ldr	r2, [r3, #12]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be58:	425b      	negs	r3, r3
 800be5a:	441a      	add	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68da      	ldr	r2, [r3, #12]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d207      	bcs.n	800be7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	689a      	ldr	r2, [r3, #8]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be74:	425b      	negs	r3, r3
 800be76:	441a      	add	r2, r3
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d105      	bne.n	800be8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d002      	beq.n	800be8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800be96:	697b      	ldr	r3, [r7, #20]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3718      	adds	r7, #24
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d018      	beq.n	800bee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	68da      	ldr	r2, [r3, #12]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	441a      	add	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68da      	ldr	r2, [r3, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d303      	bcc.n	800bed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68d9      	ldr	r1, [r3, #12]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bedc:	461a      	mov	r2, r3
 800bede:	6838      	ldr	r0, [r7, #0]
 800bee0:	f003 feaf 	bl	800fc42 <memcpy>
	}
}
 800bee4:	bf00      	nop
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bef4:	f001 fee6 	bl	800dcc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800befe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf00:	e011      	b.n	800bf26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d012      	beq.n	800bf30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	3324      	adds	r3, #36	; 0x24
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 fd8a 	bl	800ca28 <xTaskRemoveFromEventList>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bf1a:	f000 fe5f 	bl	800cbdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	3b01      	subs	r3, #1
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	dce9      	bgt.n	800bf02 <prvUnlockQueue+0x16>
 800bf2e:	e000      	b.n	800bf32 <prvUnlockQueue+0x46>
					break;
 800bf30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	22ff      	movs	r2, #255	; 0xff
 800bf36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bf3a:	f001 fef3 	bl	800dd24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf3e:	f001 fec1 	bl	800dcc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf4a:	e011      	b.n	800bf70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d012      	beq.n	800bf7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3310      	adds	r3, #16
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f000 fd65 	bl	800ca28 <xTaskRemoveFromEventList>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf64:	f000 fe3a 	bl	800cbdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	dce9      	bgt.n	800bf4c <prvUnlockQueue+0x60>
 800bf78:	e000      	b.n	800bf7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bf7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	22ff      	movs	r2, #255	; 0xff
 800bf80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bf84:	f001 fece 	bl	800dd24 <vPortExitCritical>
}
 800bf88:	bf00      	nop
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf98:	f001 fe94 	bl	800dcc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d102      	bne.n	800bfaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	60fb      	str	r3, [r7, #12]
 800bfa8:	e001      	b.n	800bfae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfae:	f001 feb9 	bl	800dd24 <vPortExitCritical>

	return xReturn;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfc4:	f001 fe7e 	bl	800dcc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d102      	bne.n	800bfda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	60fb      	str	r3, [r7, #12]
 800bfd8:	e001      	b.n	800bfde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfde:	f001 fea1 	bl	800dd24 <vPortExitCritical>

	return xReturn;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bff6:	2300      	movs	r3, #0
 800bff8:	60fb      	str	r3, [r7, #12]
 800bffa:	e014      	b.n	800c026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bffc:	4a0f      	ldr	r2, [pc, #60]	; (800c03c <vQueueAddToRegistry+0x50>)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10b      	bne.n	800c020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c008:	490c      	ldr	r1, [pc, #48]	; (800c03c <vQueueAddToRegistry+0x50>)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	683a      	ldr	r2, [r7, #0]
 800c00e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c012:	4a0a      	ldr	r2, [pc, #40]	; (800c03c <vQueueAddToRegistry+0x50>)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	00db      	lsls	r3, r3, #3
 800c018:	4413      	add	r3, r2
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c01e:	e006      	b.n	800c02e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3301      	adds	r3, #1
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b07      	cmp	r3, #7
 800c02a:	d9e7      	bls.n	800bffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c02c:	bf00      	nop
 800c02e:	bf00      	nop
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	200021c8 	.word	0x200021c8

0800c040 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c050:	f001 fe38 	bl	800dcc4 <vPortEnterCritical>
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c05a:	b25b      	sxtb	r3, r3
 800c05c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c060:	d103      	bne.n	800c06a <vQueueWaitForMessageRestricted+0x2a>
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c070:	b25b      	sxtb	r3, r3
 800c072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c076:	d103      	bne.n	800c080 <vQueueWaitForMessageRestricted+0x40>
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c080:	f001 fe50 	bl	800dd24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d106      	bne.n	800c09a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	3324      	adds	r3, #36	; 0x24
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	68b9      	ldr	r1, [r7, #8]
 800c094:	4618      	mov	r0, r3
 800c096:	f000 fc9b 	bl	800c9d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c09a:	6978      	ldr	r0, [r7, #20]
 800c09c:	f7ff ff26 	bl	800beec <prvUnlockQueue>
	}
 800c0a0:	bf00      	nop
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08e      	sub	sp, #56	; 0x38
 800c0ac:	af04      	add	r7, sp, #16
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	623b      	str	r3, [r7, #32]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10a      	bne.n	800c0ee <xTaskCreateStatic+0x46>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	61fb      	str	r3, [r7, #28]
}
 800c0ea:	bf00      	nop
 800c0ec:	e7fe      	b.n	800c0ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c0ee:	23b4      	movs	r3, #180	; 0xb4
 800c0f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	2bb4      	cmp	r3, #180	; 0xb4
 800c0f6:	d00a      	beq.n	800c10e <xTaskCreateStatic+0x66>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	61bb      	str	r3, [r7, #24]
}
 800c10a:	bf00      	nop
 800c10c:	e7fe      	b.n	800c10c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c10e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	2b00      	cmp	r3, #0
 800c114:	d01e      	beq.n	800c154 <xTaskCreateStatic+0xac>
 800c116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d01b      	beq.n	800c154 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c124:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	2202      	movs	r2, #2
 800c12a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c12e:	2300      	movs	r3, #0
 800c130:	9303      	str	r3, [sp, #12]
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	9302      	str	r3, [sp, #8]
 800c136:	f107 0314 	add.w	r3, r7, #20
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	68b9      	ldr	r1, [r7, #8]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f000 f850 	bl	800c1ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c14c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c14e:	f000 f8f9 	bl	800c344 <prvAddNewTaskToReadyList>
 800c152:	e001      	b.n	800c158 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c154:	2300      	movs	r3, #0
 800c156:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c158:	697b      	ldr	r3, [r7, #20]
	}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3728      	adds	r7, #40	; 0x28
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c162:	b580      	push	{r7, lr}
 800c164:	b08c      	sub	sp, #48	; 0x30
 800c166:	af04      	add	r7, sp, #16
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	603b      	str	r3, [r7, #0]
 800c16e:	4613      	mov	r3, r2
 800c170:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4618      	mov	r0, r3
 800c178:	f001 fec0 	bl	800defc <pvPortMalloc>
 800c17c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00e      	beq.n	800c1a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c184:	20b4      	movs	r0, #180	; 0xb4
 800c186:	f001 feb9 	bl	800defc <pvPortMalloc>
 800c18a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	631a      	str	r2, [r3, #48]	; 0x30
 800c198:	e005      	b.n	800c1a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c19a:	6978      	ldr	r0, [r7, #20]
 800c19c:	f001 ff7a 	bl	800e094 <vPortFree>
 800c1a0:	e001      	b.n	800c1a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d017      	beq.n	800c1dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c1b4:	88fa      	ldrh	r2, [r7, #6]
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	9303      	str	r3, [sp, #12]
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	9302      	str	r3, [sp, #8]
 800c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c4:	9300      	str	r3, [sp, #0]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	68b9      	ldr	r1, [r7, #8]
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f000 f80e 	bl	800c1ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1d0:	69f8      	ldr	r0, [r7, #28]
 800c1d2:	f000 f8b7 	bl	800c344 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	61bb      	str	r3, [r7, #24]
 800c1da:	e002      	b.n	800c1e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c1dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c1e2:	69bb      	ldr	r3, [r7, #24]
	}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3720      	adds	r7, #32
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	461a      	mov	r2, r3
 800c204:	21a5      	movs	r1, #165	; 0xa5
 800c206:	f003 fc33 	bl	800fa70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c214:	3b01      	subs	r3, #1
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	f023 0307 	bic.w	r3, r3, #7
 800c222:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00a      	beq.n	800c244 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	617b      	str	r3, [r7, #20]
}
 800c240:	bf00      	nop
 800c242:	e7fe      	b.n	800c242 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d01f      	beq.n	800c28a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c24a:	2300      	movs	r3, #0
 800c24c:	61fb      	str	r3, [r7, #28]
 800c24e:	e012      	b.n	800c276 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	4413      	add	r3, r2
 800c256:	7819      	ldrb	r1, [r3, #0]
 800c258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	4413      	add	r3, r2
 800c25e:	3334      	adds	r3, #52	; 0x34
 800c260:	460a      	mov	r2, r1
 800c262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d006      	beq.n	800c27e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	3301      	adds	r3, #1
 800c274:	61fb      	str	r3, [r7, #28]
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	2b0f      	cmp	r3, #15
 800c27a:	d9e9      	bls.n	800c250 <prvInitialiseNewTask+0x64>
 800c27c:	e000      	b.n	800c280 <prvInitialiseNewTask+0x94>
			{
				break;
 800c27e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c282:	2200      	movs	r2, #0
 800c284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c288:	e003      	b.n	800c292 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	2b13      	cmp	r3, #19
 800c296:	d901      	bls.n	800c29c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c298:	2313      	movs	r3, #19
 800c29a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	3304      	adds	r3, #4
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe ff06 	bl	800b0c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	3318      	adds	r3, #24
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7fe ff01 	bl	800b0c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	f1c3 0214 	rsb	r2, r3, #20
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2da:	2200      	movs	r2, #0
 800c2dc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	335c      	adds	r3, #92	; 0x5c
 800c2f8:	224c      	movs	r2, #76	; 0x4c
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f003 fbb7 	bl	800fa70 <memset>
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	4a0c      	ldr	r2, [pc, #48]	; (800c338 <prvInitialiseNewTask+0x14c>)
 800c306:	661a      	str	r2, [r3, #96]	; 0x60
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	4a0c      	ldr	r2, [pc, #48]	; (800c33c <prvInitialiseNewTask+0x150>)
 800c30c:	665a      	str	r2, [r3, #100]	; 0x64
 800c30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c310:	4a0b      	ldr	r2, [pc, #44]	; (800c340 <prvInitialiseNewTask+0x154>)
 800c312:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c314:	683a      	ldr	r2, [r7, #0]
 800c316:	68f9      	ldr	r1, [r7, #12]
 800c318:	69b8      	ldr	r0, [r7, #24]
 800c31a:	f001 fba3 	bl	800da64 <pxPortInitialiseStack>
 800c31e:	4602      	mov	r2, r0
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c32e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c330:	bf00      	nop
 800c332:	3720      	adds	r7, #32
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	20007e18 	.word	0x20007e18
 800c33c:	20007e80 	.word	0x20007e80
 800c340:	20007ee8 	.word	0x20007ee8

0800c344 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c34c:	f001 fcba 	bl	800dcc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c350:	4b2c      	ldr	r3, [pc, #176]	; (800c404 <prvAddNewTaskToReadyList+0xc0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3301      	adds	r3, #1
 800c356:	4a2b      	ldr	r2, [pc, #172]	; (800c404 <prvAddNewTaskToReadyList+0xc0>)
 800c358:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c35a:	4b2b      	ldr	r3, [pc, #172]	; (800c408 <prvAddNewTaskToReadyList+0xc4>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d109      	bne.n	800c376 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c362:	4a29      	ldr	r2, [pc, #164]	; (800c408 <prvAddNewTaskToReadyList+0xc4>)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c368:	4b26      	ldr	r3, [pc, #152]	; (800c404 <prvAddNewTaskToReadyList+0xc0>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d110      	bne.n	800c392 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c370:	f000 fc5a 	bl	800cc28 <prvInitialiseTaskLists>
 800c374:	e00d      	b.n	800c392 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c376:	4b25      	ldr	r3, [pc, #148]	; (800c40c <prvAddNewTaskToReadyList+0xc8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d109      	bne.n	800c392 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c37e:	4b22      	ldr	r3, [pc, #136]	; (800c408 <prvAddNewTaskToReadyList+0xc4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	429a      	cmp	r2, r3
 800c38a:	d802      	bhi.n	800c392 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c38c:	4a1e      	ldr	r2, [pc, #120]	; (800c408 <prvAddNewTaskToReadyList+0xc4>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c392:	4b1f      	ldr	r3, [pc, #124]	; (800c410 <prvAddNewTaskToReadyList+0xcc>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3301      	adds	r3, #1
 800c398:	4a1d      	ldr	r2, [pc, #116]	; (800c410 <prvAddNewTaskToReadyList+0xcc>)
 800c39a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c39c:	4b1c      	ldr	r3, [pc, #112]	; (800c410 <prvAddNewTaskToReadyList+0xcc>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	409a      	lsls	r2, r3
 800c3ac:	4b19      	ldr	r3, [pc, #100]	; (800c414 <prvAddNewTaskToReadyList+0xd0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	4a18      	ldr	r2, [pc, #96]	; (800c414 <prvAddNewTaskToReadyList+0xd0>)
 800c3b4:	6013      	str	r3, [r2, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4a15      	ldr	r2, [pc, #84]	; (800c418 <prvAddNewTaskToReadyList+0xd4>)
 800c3c4:	441a      	add	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	3304      	adds	r3, #4
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	f7fe fe86 	bl	800b0de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c3d2:	f001 fca7 	bl	800dd24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c3d6:	4b0d      	ldr	r3, [pc, #52]	; (800c40c <prvAddNewTaskToReadyList+0xc8>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00e      	beq.n	800c3fc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c3de:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <prvAddNewTaskToReadyList+0xc4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d207      	bcs.n	800c3fc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c3ec:	4b0b      	ldr	r3, [pc, #44]	; (800c41c <prvAddNewTaskToReadyList+0xd8>)
 800c3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3fc:	bf00      	nop
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	20002410 	.word	0x20002410
 800c408:	20002208 	.word	0x20002208
 800c40c:	2000241c 	.word	0x2000241c
 800c410:	2000242c 	.word	0x2000242c
 800c414:	20002418 	.word	0x20002418
 800c418:	2000220c 	.word	0x2000220c
 800c41c:	e000ed04 	.word	0xe000ed04

0800c420 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c428:	2300      	movs	r3, #0
 800c42a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d017      	beq.n	800c462 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c432:	4b13      	ldr	r3, [pc, #76]	; (800c480 <vTaskDelay+0x60>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <vTaskDelay+0x30>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	60bb      	str	r3, [r7, #8]
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c450:	f000 f88c 	bl	800c56c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c454:	2100      	movs	r1, #0
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fed6 	bl	800d208 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c45c:	f000 f894 	bl	800c588 <xTaskResumeAll>
 800c460:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d107      	bne.n	800c478 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c468:	4b06      	ldr	r3, [pc, #24]	; (800c484 <vTaskDelay+0x64>)
 800c46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46e:	601a      	str	r2, [r3, #0]
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c478:	bf00      	nop
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	20002438 	.word	0x20002438
 800c484:	e000ed04 	.word	0xe000ed04

0800c488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08a      	sub	sp, #40	; 0x28
 800c48c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c48e:	2300      	movs	r3, #0
 800c490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c492:	2300      	movs	r3, #0
 800c494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c496:	463a      	mov	r2, r7
 800c498:	1d39      	adds	r1, r7, #4
 800c49a:	f107 0308 	add.w	r3, r7, #8
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7f6 f9ce 	bl	8002840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	9202      	str	r2, [sp, #8]
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	460a      	mov	r2, r1
 800c4b6:	4925      	ldr	r1, [pc, #148]	; (800c54c <vTaskStartScheduler+0xc4>)
 800c4b8:	4825      	ldr	r0, [pc, #148]	; (800c550 <vTaskStartScheduler+0xc8>)
 800c4ba:	f7ff fdf5 	bl	800c0a8 <xTaskCreateStatic>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4a24      	ldr	r2, [pc, #144]	; (800c554 <vTaskStartScheduler+0xcc>)
 800c4c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4c4:	4b23      	ldr	r3, [pc, #140]	; (800c554 <vTaskStartScheduler+0xcc>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	617b      	str	r3, [r7, #20]
 800c4d0:	e001      	b.n	800c4d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d102      	bne.n	800c4e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c4dc:	f000 fefa 	bl	800d2d4 <xTimerCreateTimerTask>
 800c4e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d11d      	bne.n	800c524 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	613b      	str	r3, [r7, #16]
}
 800c4fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c4fc:	4b16      	ldr	r3, [pc, #88]	; (800c558 <vTaskStartScheduler+0xd0>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	335c      	adds	r3, #92	; 0x5c
 800c502:	4a16      	ldr	r2, [pc, #88]	; (800c55c <vTaskStartScheduler+0xd4>)
 800c504:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c506:	4b16      	ldr	r3, [pc, #88]	; (800c560 <vTaskStartScheduler+0xd8>)
 800c508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c50c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c50e:	4b15      	ldr	r3, [pc, #84]	; (800c564 <vTaskStartScheduler+0xdc>)
 800c510:	2201      	movs	r2, #1
 800c512:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c514:	4b14      	ldr	r3, [pc, #80]	; (800c568 <vTaskStartScheduler+0xe0>)
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c51a:	f7f6 f977 	bl	800280c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c51e:	f001 fb2f 	bl	800db80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c522:	e00e      	b.n	800c542 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c52a:	d10a      	bne.n	800c542 <vTaskStartScheduler+0xba>
	__asm volatile
 800c52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	60fb      	str	r3, [r7, #12]
}
 800c53e:	bf00      	nop
 800c540:	e7fe      	b.n	800c540 <vTaskStartScheduler+0xb8>
}
 800c542:	bf00      	nop
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	080121e0 	.word	0x080121e0
 800c550:	0800cbf5 	.word	0x0800cbf5
 800c554:	20002434 	.word	0x20002434
 800c558:	20002208 	.word	0x20002208
 800c55c:	20000210 	.word	0x20000210
 800c560:	20002430 	.word	0x20002430
 800c564:	2000241c 	.word	0x2000241c
 800c568:	20002414 	.word	0x20002414

0800c56c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c570:	4b04      	ldr	r3, [pc, #16]	; (800c584 <vTaskSuspendAll+0x18>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	3301      	adds	r3, #1
 800c576:	4a03      	ldr	r2, [pc, #12]	; (800c584 <vTaskSuspendAll+0x18>)
 800c578:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c57a:	bf00      	nop
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	20002438 	.word	0x20002438

0800c588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c58e:	2300      	movs	r3, #0
 800c590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c592:	2300      	movs	r3, #0
 800c594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c596:	4b41      	ldr	r3, [pc, #260]	; (800c69c <xTaskResumeAll+0x114>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10a      	bne.n	800c5b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	603b      	str	r3, [r7, #0]
}
 800c5b0:	bf00      	nop
 800c5b2:	e7fe      	b.n	800c5b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5b4:	f001 fb86 	bl	800dcc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5b8:	4b38      	ldr	r3, [pc, #224]	; (800c69c <xTaskResumeAll+0x114>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	4a37      	ldr	r2, [pc, #220]	; (800c69c <xTaskResumeAll+0x114>)
 800c5c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5c2:	4b36      	ldr	r3, [pc, #216]	; (800c69c <xTaskResumeAll+0x114>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d161      	bne.n	800c68e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5ca:	4b35      	ldr	r3, [pc, #212]	; (800c6a0 <xTaskResumeAll+0x118>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d05d      	beq.n	800c68e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5d2:	e02e      	b.n	800c632 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d4:	4b33      	ldr	r3, [pc, #204]	; (800c6a4 <xTaskResumeAll+0x11c>)
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	3318      	adds	r3, #24
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe fdd9 	bl	800b198 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fe fdd4 	bl	800b198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	409a      	lsls	r2, r3
 800c5f8:	4b2b      	ldr	r3, [pc, #172]	; (800c6a8 <xTaskResumeAll+0x120>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	4a2a      	ldr	r2, [pc, #168]	; (800c6a8 <xTaskResumeAll+0x120>)
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c606:	4613      	mov	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4a27      	ldr	r2, [pc, #156]	; (800c6ac <xTaskResumeAll+0x124>)
 800c610:	441a      	add	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	3304      	adds	r3, #4
 800c616:	4619      	mov	r1, r3
 800c618:	4610      	mov	r0, r2
 800c61a:	f7fe fd60 	bl	800b0de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c622:	4b23      	ldr	r3, [pc, #140]	; (800c6b0 <xTaskResumeAll+0x128>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c628:	429a      	cmp	r2, r3
 800c62a:	d302      	bcc.n	800c632 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c62c:	4b21      	ldr	r3, [pc, #132]	; (800c6b4 <xTaskResumeAll+0x12c>)
 800c62e:	2201      	movs	r2, #1
 800c630:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <xTaskResumeAll+0x11c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1cc      	bne.n	800c5d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d001      	beq.n	800c644 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c640:	f000 fb94 	bl	800cd6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c644:	4b1c      	ldr	r3, [pc, #112]	; (800c6b8 <xTaskResumeAll+0x130>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d010      	beq.n	800c672 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c650:	f000 f846 	bl	800c6e0 <xTaskIncrementTick>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d002      	beq.n	800c660 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c65a:	4b16      	ldr	r3, [pc, #88]	; (800c6b4 <xTaskResumeAll+0x12c>)
 800c65c:	2201      	movs	r2, #1
 800c65e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	3b01      	subs	r3, #1
 800c664:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d1f1      	bne.n	800c650 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c66c:	4b12      	ldr	r3, [pc, #72]	; (800c6b8 <xTaskResumeAll+0x130>)
 800c66e:	2200      	movs	r2, #0
 800c670:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c672:	4b10      	ldr	r3, [pc, #64]	; (800c6b4 <xTaskResumeAll+0x12c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d009      	beq.n	800c68e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c67a:	2301      	movs	r3, #1
 800c67c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c67e:	4b0f      	ldr	r3, [pc, #60]	; (800c6bc <xTaskResumeAll+0x134>)
 800c680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c68e:	f001 fb49 	bl	800dd24 <vPortExitCritical>

	return xAlreadyYielded;
 800c692:	68bb      	ldr	r3, [r7, #8]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20002438 	.word	0x20002438
 800c6a0:	20002410 	.word	0x20002410
 800c6a4:	200023cc 	.word	0x200023cc
 800c6a8:	20002418 	.word	0x20002418
 800c6ac:	2000220c 	.word	0x2000220c
 800c6b0:	20002208 	.word	0x20002208
 800c6b4:	20002424 	.word	0x20002424
 800c6b8:	20002420 	.word	0x20002420
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c6c6:	4b05      	ldr	r3, [pc, #20]	; (800c6dc <xTaskGetTickCount+0x1c>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c6cc:	687b      	ldr	r3, [r7, #4]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	20002414 	.word	0x20002414

0800c6e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6ea:	4b4e      	ldr	r3, [pc, #312]	; (800c824 <xTaskIncrementTick+0x144>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f040 808e 	bne.w	800c810 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c6f4:	4b4c      	ldr	r3, [pc, #304]	; (800c828 <xTaskIncrementTick+0x148>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c6fc:	4a4a      	ldr	r2, [pc, #296]	; (800c828 <xTaskIncrementTick+0x148>)
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d120      	bne.n	800c74a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c708:	4b48      	ldr	r3, [pc, #288]	; (800c82c <xTaskIncrementTick+0x14c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00a      	beq.n	800c728 <xTaskIncrementTick+0x48>
	__asm volatile
 800c712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c716:	f383 8811 	msr	BASEPRI, r3
 800c71a:	f3bf 8f6f 	isb	sy
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	603b      	str	r3, [r7, #0]
}
 800c724:	bf00      	nop
 800c726:	e7fe      	b.n	800c726 <xTaskIncrementTick+0x46>
 800c728:	4b40      	ldr	r3, [pc, #256]	; (800c82c <xTaskIncrementTick+0x14c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	60fb      	str	r3, [r7, #12]
 800c72e:	4b40      	ldr	r3, [pc, #256]	; (800c830 <xTaskIncrementTick+0x150>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a3e      	ldr	r2, [pc, #248]	; (800c82c <xTaskIncrementTick+0x14c>)
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	4a3e      	ldr	r2, [pc, #248]	; (800c830 <xTaskIncrementTick+0x150>)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6013      	str	r3, [r2, #0]
 800c73c:	4b3d      	ldr	r3, [pc, #244]	; (800c834 <xTaskIncrementTick+0x154>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	3301      	adds	r3, #1
 800c742:	4a3c      	ldr	r2, [pc, #240]	; (800c834 <xTaskIncrementTick+0x154>)
 800c744:	6013      	str	r3, [r2, #0]
 800c746:	f000 fb11 	bl	800cd6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c74a:	4b3b      	ldr	r3, [pc, #236]	; (800c838 <xTaskIncrementTick+0x158>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	429a      	cmp	r2, r3
 800c752:	d348      	bcc.n	800c7e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c754:	4b35      	ldr	r3, [pc, #212]	; (800c82c <xTaskIncrementTick+0x14c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d104      	bne.n	800c768 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c75e:	4b36      	ldr	r3, [pc, #216]	; (800c838 <xTaskIncrementTick+0x158>)
 800c760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c764:	601a      	str	r2, [r3, #0]
					break;
 800c766:	e03e      	b.n	800c7e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c768:	4b30      	ldr	r3, [pc, #192]	; (800c82c <xTaskIncrementTick+0x14c>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d203      	bcs.n	800c788 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c780:	4a2d      	ldr	r2, [pc, #180]	; (800c838 <xTaskIncrementTick+0x158>)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c786:	e02e      	b.n	800c7e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	3304      	adds	r3, #4
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe fd03 	bl	800b198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c796:	2b00      	cmp	r3, #0
 800c798:	d004      	beq.n	800c7a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	3318      	adds	r3, #24
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fe fcfa 	bl	800b198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	409a      	lsls	r2, r3
 800c7ac:	4b23      	ldr	r3, [pc, #140]	; (800c83c <xTaskIncrementTick+0x15c>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	4a22      	ldr	r2, [pc, #136]	; (800c83c <xTaskIncrementTick+0x15c>)
 800c7b4:	6013      	str	r3, [r2, #0]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ba:	4613      	mov	r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4a1f      	ldr	r2, [pc, #124]	; (800c840 <xTaskIncrementTick+0x160>)
 800c7c4:	441a      	add	r2, r3
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7fe fc86 	bl	800b0de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d6:	4b1b      	ldr	r3, [pc, #108]	; (800c844 <xTaskIncrementTick+0x164>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d3b9      	bcc.n	800c754 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7e4:	e7b6      	b.n	800c754 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c7e6:	4b17      	ldr	r3, [pc, #92]	; (800c844 <xTaskIncrementTick+0x164>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ec:	4914      	ldr	r1, [pc, #80]	; (800c840 <xTaskIncrementTick+0x160>)
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4413      	add	r3, r2
 800c7f4:	009b      	lsls	r3, r3, #2
 800c7f6:	440b      	add	r3, r1
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d901      	bls.n	800c802 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c7fe:	2301      	movs	r3, #1
 800c800:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c802:	4b11      	ldr	r3, [pc, #68]	; (800c848 <xTaskIncrementTick+0x168>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d007      	beq.n	800c81a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c80a:	2301      	movs	r3, #1
 800c80c:	617b      	str	r3, [r7, #20]
 800c80e:	e004      	b.n	800c81a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c810:	4b0e      	ldr	r3, [pc, #56]	; (800c84c <xTaskIncrementTick+0x16c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	3301      	adds	r3, #1
 800c816:	4a0d      	ldr	r2, [pc, #52]	; (800c84c <xTaskIncrementTick+0x16c>)
 800c818:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c81a:	697b      	ldr	r3, [r7, #20]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	20002438 	.word	0x20002438
 800c828:	20002414 	.word	0x20002414
 800c82c:	200023c4 	.word	0x200023c4
 800c830:	200023c8 	.word	0x200023c8
 800c834:	20002428 	.word	0x20002428
 800c838:	20002430 	.word	0x20002430
 800c83c:	20002418 	.word	0x20002418
 800c840:	2000220c 	.word	0x2000220c
 800c844:	20002208 	.word	0x20002208
 800c848:	20002424 	.word	0x20002424
 800c84c:	20002420 	.word	0x20002420

0800c850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c856:	4b43      	ldr	r3, [pc, #268]	; (800c964 <vTaskSwitchContext+0x114>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d003      	beq.n	800c866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c85e:	4b42      	ldr	r3, [pc, #264]	; (800c968 <vTaskSwitchContext+0x118>)
 800c860:	2201      	movs	r2, #1
 800c862:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c864:	e07a      	b.n	800c95c <vTaskSwitchContext+0x10c>
		xYieldPending = pdFALSE;
 800c866:	4b40      	ldr	r3, [pc, #256]	; (800c968 <vTaskSwitchContext+0x118>)
 800c868:	2200      	movs	r2, #0
 800c86a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c86c:	f7f5 ffd5 	bl	800281a <getRunTimeCounterValue>
 800c870:	4603      	mov	r3, r0
 800c872:	4a3e      	ldr	r2, [pc, #248]	; (800c96c <vTaskSwitchContext+0x11c>)
 800c874:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c876:	4b3d      	ldr	r3, [pc, #244]	; (800c96c <vTaskSwitchContext+0x11c>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	4b3d      	ldr	r3, [pc, #244]	; (800c970 <vTaskSwitchContext+0x120>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d909      	bls.n	800c896 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c882:	4b3c      	ldr	r3, [pc, #240]	; (800c974 <vTaskSwitchContext+0x124>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800c888:	4a38      	ldr	r2, [pc, #224]	; (800c96c <vTaskSwitchContext+0x11c>)
 800c88a:	6810      	ldr	r0, [r2, #0]
 800c88c:	4a38      	ldr	r2, [pc, #224]	; (800c970 <vTaskSwitchContext+0x120>)
 800c88e:	6812      	ldr	r2, [r2, #0]
 800c890:	1a82      	subs	r2, r0, r2
 800c892:	440a      	add	r2, r1
 800c894:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c896:	4b35      	ldr	r3, [pc, #212]	; (800c96c <vTaskSwitchContext+0x11c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a35      	ldr	r2, [pc, #212]	; (800c970 <vTaskSwitchContext+0x120>)
 800c89c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c89e:	4b35      	ldr	r3, [pc, #212]	; (800c974 <vTaskSwitchContext+0x124>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	4b33      	ldr	r3, [pc, #204]	; (800c974 <vTaskSwitchContext+0x124>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d808      	bhi.n	800c8c0 <vTaskSwitchContext+0x70>
 800c8ae:	4b31      	ldr	r3, [pc, #196]	; (800c974 <vTaskSwitchContext+0x124>)
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4b30      	ldr	r3, [pc, #192]	; (800c974 <vTaskSwitchContext+0x124>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3334      	adds	r3, #52	; 0x34
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	4610      	mov	r0, r2
 800c8bc:	f7f5 ffb5 	bl	800282a <vApplicationStackOverflowHook>
			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
 800c8c0:	4b2c      	ldr	r3, [pc, #176]	; (800c974 <vTaskSwitchContext+0x124>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a2c      	ldr	r2, [pc, #176]	; (800c978 <vTaskSwitchContext+0x128>)
 800c8c6:	6812      	ldr	r2, [r2, #0]
 800c8c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8cc:	4b2b      	ldr	r3, [pc, #172]	; (800c97c <vTaskSwitchContext+0x12c>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	fab3 f383 	clz	r3, r3
 800c8d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c8da:	7afb      	ldrb	r3, [r7, #11]
 800c8dc:	f1c3 031f 	rsb	r3, r3, #31
 800c8e0:	617b      	str	r3, [r7, #20]
 800c8e2:	4927      	ldr	r1, [pc, #156]	; (800c980 <vTaskSwitchContext+0x130>)
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	440b      	add	r3, r1
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10a      	bne.n	800c90c <vTaskSwitchContext+0xbc>
	__asm volatile
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	607b      	str	r3, [r7, #4]
}
 800c908:	bf00      	nop
 800c90a:	e7fe      	b.n	800c90a <vTaskSwitchContext+0xba>
 800c90c:	697a      	ldr	r2, [r7, #20]
 800c90e:	4613      	mov	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4413      	add	r3, r2
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4a1a      	ldr	r2, [pc, #104]	; (800c980 <vTaskSwitchContext+0x130>)
 800c918:	4413      	add	r3, r2
 800c91a:	613b      	str	r3, [r7, #16]
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	685a      	ldr	r2, [r3, #4]
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	605a      	str	r2, [r3, #4]
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	3308      	adds	r3, #8
 800c92e:	429a      	cmp	r2, r3
 800c930:	d104      	bne.n	800c93c <vTaskSwitchContext+0xec>
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	685a      	ldr	r2, [r3, #4]
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	605a      	str	r2, [r3, #4]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	4a0c      	ldr	r2, [pc, #48]	; (800c974 <vTaskSwitchContext+0x124>)
 800c944:	6013      	str	r3, [r2, #0]
			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
 800c946:	4b0b      	ldr	r3, [pc, #44]	; (800c974 <vTaskSwitchContext+0x124>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c94e:	4a0a      	ldr	r2, [pc, #40]	; (800c978 <vTaskSwitchContext+0x128>)
 800c950:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c952:	4b08      	ldr	r3, [pc, #32]	; (800c974 <vTaskSwitchContext+0x124>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	335c      	adds	r3, #92	; 0x5c
 800c958:	4a0a      	ldr	r2, [pc, #40]	; (800c984 <vTaskSwitchContext+0x134>)
 800c95a:	6013      	str	r3, [r2, #0]
}
 800c95c:	bf00      	nop
 800c95e:	3718      	adds	r7, #24
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20002438 	.word	0x20002438
 800c968:	20002424 	.word	0x20002424
 800c96c:	20002440 	.word	0x20002440
 800c970:	2000243c 	.word	0x2000243c
 800c974:	20002208 	.word	0x20002208
 800c978:	2000240c 	.word	0x2000240c
 800c97c:	20002418 	.word	0x20002418
 800c980:	2000220c 	.word	0x2000220c
 800c984:	20000210 	.word	0x20000210

0800c988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	60fb      	str	r3, [r7, #12]
}
 800c9aa:	bf00      	nop
 800c9ac:	e7fe      	b.n	800c9ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9ae:	4b07      	ldr	r3, [pc, #28]	; (800c9cc <vTaskPlaceOnEventList+0x44>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3318      	adds	r3, #24
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7fe fbb5 	bl	800b126 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9bc:	2101      	movs	r1, #1
 800c9be:	6838      	ldr	r0, [r7, #0]
 800c9c0:	f000 fc22 	bl	800d208 <prvAddCurrentTaskToDelayedList>
}
 800c9c4:	bf00      	nop
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20002208 	.word	0x20002208

0800c9d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10a      	bne.n	800c9f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	617b      	str	r3, [r7, #20]
}
 800c9f4:	bf00      	nop
 800c9f6:	e7fe      	b.n	800c9f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ca24 <vTaskPlaceOnEventListRestricted+0x54>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	3318      	adds	r3, #24
 800c9fe:	4619      	mov	r1, r3
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f7fe fb6c 	bl	800b0de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d002      	beq.n	800ca12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ca0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ca12:	6879      	ldr	r1, [r7, #4]
 800ca14:	68b8      	ldr	r0, [r7, #8]
 800ca16:	f000 fbf7 	bl	800d208 <prvAddCurrentTaskToDelayedList>
	}
 800ca1a:	bf00      	nop
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	20002208 	.word	0x20002208

0800ca28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10a      	bne.n	800ca54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	60fb      	str	r3, [r7, #12]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	3318      	adds	r3, #24
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fe fb9d 	bl	800b198 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca5e:	4b1d      	ldr	r3, [pc, #116]	; (800cad4 <xTaskRemoveFromEventList+0xac>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d11c      	bne.n	800caa0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	3304      	adds	r3, #4
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fe fb94 	bl	800b198 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	2201      	movs	r2, #1
 800ca76:	409a      	lsls	r2, r3
 800ca78:	4b17      	ldr	r3, [pc, #92]	; (800cad8 <xTaskRemoveFromEventList+0xb0>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	4a16      	ldr	r2, [pc, #88]	; (800cad8 <xTaskRemoveFromEventList+0xb0>)
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4a13      	ldr	r2, [pc, #76]	; (800cadc <xTaskRemoveFromEventList+0xb4>)
 800ca90:	441a      	add	r2, r3
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4619      	mov	r1, r3
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f7fe fb20 	bl	800b0de <vListInsertEnd>
 800ca9e:	e005      	b.n	800caac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	3318      	adds	r3, #24
 800caa4:	4619      	mov	r1, r3
 800caa6:	480e      	ldr	r0, [pc, #56]	; (800cae0 <xTaskRemoveFromEventList+0xb8>)
 800caa8:	f7fe fb19 	bl	800b0de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab0:	4b0c      	ldr	r3, [pc, #48]	; (800cae4 <xTaskRemoveFromEventList+0xbc>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d905      	bls.n	800cac6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800caba:	2301      	movs	r3, #1
 800cabc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cabe:	4b0a      	ldr	r3, [pc, #40]	; (800cae8 <xTaskRemoveFromEventList+0xc0>)
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
 800cac4:	e001      	b.n	800caca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cac6:	2300      	movs	r3, #0
 800cac8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800caca:	697b      	ldr	r3, [r7, #20]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3718      	adds	r7, #24
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	20002438 	.word	0x20002438
 800cad8:	20002418 	.word	0x20002418
 800cadc:	2000220c 	.word	0x2000220c
 800cae0:	200023cc 	.word	0x200023cc
 800cae4:	20002208 	.word	0x20002208
 800cae8:	20002424 	.word	0x20002424

0800caec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <vTaskInternalSetTimeOutState+0x24>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cafc:	4b05      	ldr	r3, [pc, #20]	; (800cb14 <vTaskInternalSetTimeOutState+0x28>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	605a      	str	r2, [r3, #4]
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20002428 	.word	0x20002428
 800cb14:	20002414 	.word	0x20002414

0800cb18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10a      	bne.n	800cb3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	f383 8811 	msr	BASEPRI, r3
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	f3bf 8f4f 	dsb	sy
 800cb38:	613b      	str	r3, [r7, #16]
}
 800cb3a:	bf00      	nop
 800cb3c:	e7fe      	b.n	800cb3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10a      	bne.n	800cb5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	60fb      	str	r3, [r7, #12]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cb5a:	f001 f8b3 	bl	800dcc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb5e:	4b1d      	ldr	r3, [pc, #116]	; (800cbd4 <xTaskCheckForTimeOut+0xbc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	69ba      	ldr	r2, [r7, #24]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb76:	d102      	bne.n	800cb7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	61fb      	str	r3, [r7, #28]
 800cb7c:	e023      	b.n	800cbc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <xTaskCheckForTimeOut+0xc0>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d007      	beq.n	800cb9a <xTaskCheckForTimeOut+0x82>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d302      	bcc.n	800cb9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb94:	2301      	movs	r3, #1
 800cb96:	61fb      	str	r3, [r7, #28]
 800cb98:	e015      	b.n	800cbc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d20b      	bcs.n	800cbbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681a      	ldr	r2, [r3, #0]
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	1ad2      	subs	r2, r2, r3
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff ff9b 	bl	800caec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	e004      	b.n	800cbc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cbc6:	f001 f8ad 	bl	800dd24 <vPortExitCritical>

	return xReturn;
 800cbca:	69fb      	ldr	r3, [r7, #28]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3720      	adds	r7, #32
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20002414 	.word	0x20002414
 800cbd8:	20002428 	.word	0x20002428

0800cbdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cbe0:	4b03      	ldr	r3, [pc, #12]	; (800cbf0 <vTaskMissedYield+0x14>)
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	601a      	str	r2, [r3, #0]
}
 800cbe6:	bf00      	nop
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	20002424 	.word	0x20002424

0800cbf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbfc:	f000 f854 	bl	800cca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cc00:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <prvIdleTask+0x2c>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d907      	bls.n	800cc18 <prvIdleTask+0x24>
			{
				taskYIELD();
 800cc08:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <prvIdleTask+0x30>)
 800cc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800cc18:	f7f6 fc3a 	bl	8003490 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cc1c:	e7ee      	b.n	800cbfc <prvIdleTask+0x8>
 800cc1e:	bf00      	nop
 800cc20:	2000220c 	.word	0x2000220c
 800cc24:	e000ed04 	.word	0xe000ed04

0800cc28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc2e:	2300      	movs	r3, #0
 800cc30:	607b      	str	r3, [r7, #4]
 800cc32:	e00c      	b.n	800cc4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	4613      	mov	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	4a12      	ldr	r2, [pc, #72]	; (800cc88 <prvInitialiseTaskLists+0x60>)
 800cc40:	4413      	add	r3, r2
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fe fa1e 	bl	800b084 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	607b      	str	r3, [r7, #4]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b13      	cmp	r3, #19
 800cc52:	d9ef      	bls.n	800cc34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc54:	480d      	ldr	r0, [pc, #52]	; (800cc8c <prvInitialiseTaskLists+0x64>)
 800cc56:	f7fe fa15 	bl	800b084 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc5a:	480d      	ldr	r0, [pc, #52]	; (800cc90 <prvInitialiseTaskLists+0x68>)
 800cc5c:	f7fe fa12 	bl	800b084 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc60:	480c      	ldr	r0, [pc, #48]	; (800cc94 <prvInitialiseTaskLists+0x6c>)
 800cc62:	f7fe fa0f 	bl	800b084 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc66:	480c      	ldr	r0, [pc, #48]	; (800cc98 <prvInitialiseTaskLists+0x70>)
 800cc68:	f7fe fa0c 	bl	800b084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc6c:	480b      	ldr	r0, [pc, #44]	; (800cc9c <prvInitialiseTaskLists+0x74>)
 800cc6e:	f7fe fa09 	bl	800b084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc72:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <prvInitialiseTaskLists+0x78>)
 800cc74:	4a05      	ldr	r2, [pc, #20]	; (800cc8c <prvInitialiseTaskLists+0x64>)
 800cc76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc78:	4b0a      	ldr	r3, [pc, #40]	; (800cca4 <prvInitialiseTaskLists+0x7c>)
 800cc7a:	4a05      	ldr	r2, [pc, #20]	; (800cc90 <prvInitialiseTaskLists+0x68>)
 800cc7c:	601a      	str	r2, [r3, #0]
}
 800cc7e:	bf00      	nop
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	2000220c 	.word	0x2000220c
 800cc8c:	2000239c 	.word	0x2000239c
 800cc90:	200023b0 	.word	0x200023b0
 800cc94:	200023cc 	.word	0x200023cc
 800cc98:	200023e0 	.word	0x200023e0
 800cc9c:	200023f8 	.word	0x200023f8
 800cca0:	200023c4 	.word	0x200023c4
 800cca4:	200023c8 	.word	0x200023c8

0800cca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ccae:	e019      	b.n	800cce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ccb0:	f001 f808 	bl	800dcc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb4:	4b10      	ldr	r3, [pc, #64]	; (800ccf8 <prvCheckTasksWaitingTermination+0x50>)
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe fa69 	bl	800b198 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ccc6:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <prvCheckTasksWaitingTermination+0x54>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	4a0b      	ldr	r2, [pc, #44]	; (800ccfc <prvCheckTasksWaitingTermination+0x54>)
 800ccce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <prvCheckTasksWaitingTermination+0x58>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	4a0a      	ldr	r2, [pc, #40]	; (800cd00 <prvCheckTasksWaitingTermination+0x58>)
 800ccd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ccda:	f001 f823 	bl	800dd24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f810 	bl	800cd04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <prvCheckTasksWaitingTermination+0x58>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1e1      	bne.n	800ccb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ccec:	bf00      	nop
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	200023e0 	.word	0x200023e0
 800ccfc:	20002410 	.word	0x20002410
 800cd00:	200023f4 	.word	0x200023f4

0800cd04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	335c      	adds	r3, #92	; 0x5c
 800cd10:	4618      	mov	r0, r3
 800cd12:	f002 fedd 	bl	800fad0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d108      	bne.n	800cd32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd24:	4618      	mov	r0, r3
 800cd26:	f001 f9b5 	bl	800e094 <vPortFree>
				vPortFree( pxTCB );
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f001 f9b2 	bl	800e094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cd30:	e018      	b.n	800cd64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d103      	bne.n	800cd44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f001 f9a9 	bl	800e094 <vPortFree>
	}
 800cd42:	e00f      	b.n	800cd64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d00a      	beq.n	800cd64 <prvDeleteTCB+0x60>
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	60fb      	str	r3, [r7, #12]
}
 800cd60:	bf00      	nop
 800cd62:	e7fe      	b.n	800cd62 <prvDeleteTCB+0x5e>
	}
 800cd64:	bf00      	nop
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd72:	4b0c      	ldr	r3, [pc, #48]	; (800cda4 <prvResetNextTaskUnblockTime+0x38>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d104      	bne.n	800cd86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <prvResetNextTaskUnblockTime+0x3c>)
 800cd7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd84:	e008      	b.n	800cd98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd86:	4b07      	ldr	r3, [pc, #28]	; (800cda4 <prvResetNextTaskUnblockTime+0x38>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	4a04      	ldr	r2, [pc, #16]	; (800cda8 <prvResetNextTaskUnblockTime+0x3c>)
 800cd96:	6013      	str	r3, [r2, #0]
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	200023c4 	.word	0x200023c4
 800cda8:	20002430 	.word	0x20002430

0800cdac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cdb2:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <xTaskGetSchedulerState+0x34>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d102      	bne.n	800cdc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	607b      	str	r3, [r7, #4]
 800cdbe:	e008      	b.n	800cdd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdc0:	4b08      	ldr	r3, [pc, #32]	; (800cde4 <xTaskGetSchedulerState+0x38>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d102      	bne.n	800cdce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cdc8:	2302      	movs	r3, #2
 800cdca:	607b      	str	r3, [r7, #4]
 800cdcc:	e001      	b.n	800cdd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cdd2:	687b      	ldr	r3, [r7, #4]
	}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	370c      	adds	r7, #12
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdde:	4770      	bx	lr
 800cde0:	2000241c 	.word	0x2000241c
 800cde4:	20002438 	.word	0x20002438

0800cde8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d05e      	beq.n	800cebc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce02:	4b31      	ldr	r3, [pc, #196]	; (800cec8 <xTaskPriorityInherit+0xe0>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d24e      	bcs.n	800ceaa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	699b      	ldr	r3, [r3, #24]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	db06      	blt.n	800ce22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce14:	4b2c      	ldr	r3, [pc, #176]	; (800cec8 <xTaskPriorityInherit+0xe0>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1a:	f1c3 0214 	rsb	r2, r3, #20
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	6959      	ldr	r1, [r3, #20]
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce2a:	4613      	mov	r3, r2
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4a26      	ldr	r2, [pc, #152]	; (800cecc <xTaskPriorityInherit+0xe4>)
 800ce34:	4413      	add	r3, r2
 800ce36:	4299      	cmp	r1, r3
 800ce38:	d12f      	bne.n	800ce9a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fe f9aa 	bl	800b198 <uxListRemove>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10a      	bne.n	800ce60 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4e:	2201      	movs	r2, #1
 800ce50:	fa02 f303 	lsl.w	r3, r2, r3
 800ce54:	43da      	mvns	r2, r3
 800ce56:	4b1e      	ldr	r3, [pc, #120]	; (800ced0 <xTaskPriorityInherit+0xe8>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4013      	ands	r3, r2
 800ce5c:	4a1c      	ldr	r2, [pc, #112]	; (800ced0 <xTaskPriorityInherit+0xe8>)
 800ce5e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce60:	4b19      	ldr	r3, [pc, #100]	; (800cec8 <xTaskPriorityInherit+0xe0>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6e:	2201      	movs	r2, #1
 800ce70:	409a      	lsls	r2, r3
 800ce72:	4b17      	ldr	r3, [pc, #92]	; (800ced0 <xTaskPriorityInherit+0xe8>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	4a15      	ldr	r2, [pc, #84]	; (800ced0 <xTaskPriorityInherit+0xe8>)
 800ce7a:	6013      	str	r3, [r2, #0]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce80:	4613      	mov	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4413      	add	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4a10      	ldr	r2, [pc, #64]	; (800cecc <xTaskPriorityInherit+0xe4>)
 800ce8a:	441a      	add	r2, r3
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	3304      	adds	r3, #4
 800ce90:	4619      	mov	r1, r3
 800ce92:	4610      	mov	r0, r2
 800ce94:	f7fe f923 	bl	800b0de <vListInsertEnd>
 800ce98:	e004      	b.n	800cea4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce9a:	4b0b      	ldr	r3, [pc, #44]	; (800cec8 <xTaskPriorityInherit+0xe0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cea4:	2301      	movs	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	e008      	b.n	800cebc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceae:	4b06      	ldr	r3, [pc, #24]	; (800cec8 <xTaskPriorityInherit+0xe0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d201      	bcs.n	800cebc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cebc:	68fb      	ldr	r3, [r7, #12]
	}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20002208 	.word	0x20002208
 800cecc:	2000220c 	.word	0x2000220c
 800ced0:	20002418 	.word	0x20002418

0800ced4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cee0:	2300      	movs	r3, #0
 800cee2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d06e      	beq.n	800cfc8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ceea:	4b3a      	ldr	r3, [pc, #232]	; (800cfd4 <xTaskPriorityDisinherit+0x100>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	693a      	ldr	r2, [r7, #16]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d00a      	beq.n	800cf0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	f383 8811 	msr	BASEPRI, r3
 800cefc:	f3bf 8f6f 	isb	sy
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	60fb      	str	r3, [r7, #12]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10a      	bne.n	800cf28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	60bb      	str	r3, [r7, #8]
}
 800cf24:	bf00      	nop
 800cf26:	e7fe      	b.n	800cf26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf2c:	1e5a      	subs	r2, r3, #1
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d044      	beq.n	800cfc8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d140      	bne.n	800cfc8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	3304      	adds	r3, #4
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe f924 	bl	800b198 <uxListRemove>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d115      	bne.n	800cf82 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5a:	491f      	ldr	r1, [pc, #124]	; (800cfd8 <xTaskPriorityDisinherit+0x104>)
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	009b      	lsls	r3, r3, #2
 800cf64:	440b      	add	r3, r1
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d10a      	bne.n	800cf82 <xTaskPriorityDisinherit+0xae>
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf70:	2201      	movs	r2, #1
 800cf72:	fa02 f303 	lsl.w	r3, r2, r3
 800cf76:	43da      	mvns	r2, r3
 800cf78:	4b18      	ldr	r3, [pc, #96]	; (800cfdc <xTaskPriorityDisinherit+0x108>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	4a17      	ldr	r2, [pc, #92]	; (800cfdc <xTaskPriorityDisinherit+0x108>)
 800cf80:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	f1c3 0214 	rsb	r2, r3, #20
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	409a      	lsls	r2, r3
 800cf9e:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <xTaskPriorityDisinherit+0x108>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	4a0d      	ldr	r2, [pc, #52]	; (800cfdc <xTaskPriorityDisinherit+0x108>)
 800cfa6:	6013      	str	r3, [r2, #0]
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfac:	4613      	mov	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4a08      	ldr	r2, [pc, #32]	; (800cfd8 <xTaskPriorityDisinherit+0x104>)
 800cfb6:	441a      	add	r2, r3
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	3304      	adds	r3, #4
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	f7fe f88d 	bl	800b0de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfc8:	697b      	ldr	r3, [r7, #20]
	}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3718      	adds	r7, #24
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20002208 	.word	0x20002208
 800cfd8:	2000220c 	.word	0x2000220c
 800cfdc:	20002418 	.word	0x20002418

0800cfe0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cfee:	2301      	movs	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d077      	beq.n	800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	60fb      	str	r3, [r7, #12]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d902      	bls.n	800d026 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	61fb      	str	r3, [r7, #28]
 800d024:	e002      	b.n	800d02c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d02a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	69fa      	ldr	r2, [r7, #28]
 800d032:	429a      	cmp	r2, r3
 800d034:	d058      	beq.n	800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d153      	bne.n	800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d040:	4b2b      	ldr	r3, [pc, #172]	; (800d0f0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	69ba      	ldr	r2, [r7, #24]
 800d046:	429a      	cmp	r2, r3
 800d048:	d10a      	bne.n	800d060 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	60bb      	str	r3, [r7, #8]
}
 800d05c:	bf00      	nop
 800d05e:	e7fe      	b.n	800d05e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d064:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	69fa      	ldr	r2, [r7, #28]
 800d06a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	699b      	ldr	r3, [r3, #24]
 800d070:	2b00      	cmp	r3, #0
 800d072:	db04      	blt.n	800d07e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d074:	69fb      	ldr	r3, [r7, #28]
 800d076:	f1c3 0214 	rsb	r2, r3, #20
 800d07a:	69bb      	ldr	r3, [r7, #24]
 800d07c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	6959      	ldr	r1, [r3, #20]
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	4613      	mov	r3, r2
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	4413      	add	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4a19      	ldr	r2, [pc, #100]	; (800d0f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d08e:	4413      	add	r3, r2
 800d090:	4299      	cmp	r1, r3
 800d092:	d129      	bne.n	800d0e8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	3304      	adds	r3, #4
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe f87d 	bl	800b198 <uxListRemove>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10a      	bne.n	800d0ba <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d0ae:	43da      	mvns	r2, r3
 800d0b0:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	4a10      	ldr	r2, [pc, #64]	; (800d0f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0b8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0be:	2201      	movs	r2, #1
 800d0c0:	409a      	lsls	r2, r3
 800d0c2:	4b0d      	ldr	r3, [pc, #52]	; (800d0f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	4a0b      	ldr	r2, [pc, #44]	; (800d0f8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4a06      	ldr	r2, [pc, #24]	; (800d0f4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d0da:	441a      	add	r2, r3
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f7fd fffb 	bl	800b0de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0e8:	bf00      	nop
 800d0ea:	3720      	adds	r7, #32
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	20002208 	.word	0x20002208
 800d0f4:	2000220c 	.word	0x2000220c
 800d0f8:	20002418 	.word	0x20002418

0800d0fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d0fc:	b480      	push	{r7}
 800d0fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <pvTaskIncrementMutexHeldCount+0x24>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d004      	beq.n	800d112 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d108:	4b05      	ldr	r3, [pc, #20]	; (800d120 <pvTaskIncrementMutexHeldCount+0x24>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d10e:	3201      	adds	r2, #1
 800d110:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d112:	4b03      	ldr	r3, [pc, #12]	; (800d120 <pvTaskIncrementMutexHeldCount+0x24>)
 800d114:	681b      	ldr	r3, [r3, #0]
	}
 800d116:	4618      	mov	r0, r3
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	20002208 	.word	0x20002208

0800d124 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d12e:	f000 fdc9 	bl	800dcc4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d132:	4b20      	ldr	r3, [pc, #128]	; (800d1b4 <ulTaskNotifyTake+0x90>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d113      	bne.n	800d166 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d13e:	4b1d      	ldr	r3, [pc, #116]	; (800d1b4 <ulTaskNotifyTake+0x90>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00b      	beq.n	800d166 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d14e:	2101      	movs	r1, #1
 800d150:	6838      	ldr	r0, [r7, #0]
 800d152:	f000 f859 	bl	800d208 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d156:	4b18      	ldr	r3, [pc, #96]	; (800d1b8 <ulTaskNotifyTake+0x94>)
 800d158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d15c:	601a      	str	r2, [r3, #0]
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d166:	f000 fddd 	bl	800dd24 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d16a:	f000 fdab 	bl	800dcc4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d16e:	4b11      	ldr	r3, [pc, #68]	; (800d1b4 <ulTaskNotifyTake+0x90>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d176:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00e      	beq.n	800d19c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d005      	beq.n	800d190 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d184:	4b0b      	ldr	r3, [pc, #44]	; (800d1b4 <ulTaskNotifyTake+0x90>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2200      	movs	r2, #0
 800d18a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800d18e:	e005      	b.n	800d19c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d190:	4b08      	ldr	r3, [pc, #32]	; (800d1b4 <ulTaskNotifyTake+0x90>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	3a01      	subs	r2, #1
 800d198:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d19c:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <ulTaskNotifyTake+0x90>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 800d1a6:	f000 fdbd 	bl	800dd24 <vPortExitCritical>

		return ulReturn;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
	}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	20002208 	.word	0x20002208
 800d1b8:	e000ed04 	.word	0xe000ed04

0800d1bc <ulTaskNotifyValueClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
	{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	uint32_t ulReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d102      	bne.n	800d1d2 <ulTaskNotifyValueClear+0x16>
 800d1cc:	4b0d      	ldr	r3, [pc, #52]	; (800d204 <ulTaskNotifyValueClear+0x48>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	e000      	b.n	800d1d4 <ulTaskNotifyValueClear+0x18>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	60fb      	str	r3, [r7, #12]

		taskENTER_CRITICAL();
 800d1d6:	f000 fd75 	bl	800dcc4 <vPortEnterCritical>
		{
			/* Return the notification as it was before the bits were cleared,
			then clear the bit mask. */
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d1da:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <ulTaskNotifyValueClear+0x48>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d1e2:	60bb      	str	r3, [r7, #8]
			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	43db      	mvns	r3, r3
 800d1ee:	401a      	ands	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 800d1f6:	f000 fd95 	bl	800dd24 <vPortExitCritical>

		return ulReturn;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
	}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	20002208 	.word	0x20002208

0800d208 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d212:	4b29      	ldr	r3, [pc, #164]	; (800d2b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d218:	4b28      	ldr	r3, [pc, #160]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3304      	adds	r3, #4
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fd ffba 	bl	800b198 <uxListRemove>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10b      	bne.n	800d242 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d22a:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d230:	2201      	movs	r2, #1
 800d232:	fa02 f303 	lsl.w	r3, r2, r3
 800d236:	43da      	mvns	r2, r3
 800d238:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4013      	ands	r3, r2
 800d23e:	4a20      	ldr	r2, [pc, #128]	; (800d2c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d240:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d248:	d10a      	bne.n	800d260 <prvAddCurrentTaskToDelayedList+0x58>
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d250:	4b1a      	ldr	r3, [pc, #104]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3304      	adds	r3, #4
 800d256:	4619      	mov	r1, r3
 800d258:	481a      	ldr	r0, [pc, #104]	; (800d2c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d25a:	f7fd ff40 	bl	800b0de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d25e:	e026      	b.n	800d2ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4413      	add	r3, r2
 800d266:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d268:	4b14      	ldr	r3, [pc, #80]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	429a      	cmp	r2, r3
 800d276:	d209      	bcs.n	800d28c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d278:	4b13      	ldr	r3, [pc, #76]	; (800d2c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3304      	adds	r3, #4
 800d282:	4619      	mov	r1, r3
 800d284:	4610      	mov	r0, r2
 800d286:	f7fd ff4e 	bl	800b126 <vListInsert>
}
 800d28a:	e010      	b.n	800d2ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d28c:	4b0f      	ldr	r3, [pc, #60]	; (800d2cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	4b0a      	ldr	r3, [pc, #40]	; (800d2bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3304      	adds	r3, #4
 800d296:	4619      	mov	r1, r3
 800d298:	4610      	mov	r0, r2
 800d29a:	f7fd ff44 	bl	800b126 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d29e:	4b0c      	ldr	r3, [pc, #48]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d202      	bcs.n	800d2ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d2a8:	4a09      	ldr	r2, [pc, #36]	; (800d2d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	6013      	str	r3, [r2, #0]
}
 800d2ae:	bf00      	nop
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20002414 	.word	0x20002414
 800d2bc:	20002208 	.word	0x20002208
 800d2c0:	20002418 	.word	0x20002418
 800d2c4:	200023f8 	.word	0x200023f8
 800d2c8:	200023c8 	.word	0x200023c8
 800d2cc:	200023c4 	.word	0x200023c4
 800d2d0:	20002430 	.word	0x20002430

0800d2d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b08a      	sub	sp, #40	; 0x28
 800d2d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d2de:	f000 fb81 	bl	800d9e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d2e2:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <xTimerCreateTimerTask+0x80>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d021      	beq.n	800d32e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d2f2:	1d3a      	adds	r2, r7, #4
 800d2f4:	f107 0108 	add.w	r1, r7, #8
 800d2f8:	f107 030c 	add.w	r3, r7, #12
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7f5 fab9 	bl	8002874 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d302:	6879      	ldr	r1, [r7, #4]
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	9202      	str	r2, [sp, #8]
 800d30a:	9301      	str	r3, [sp, #4]
 800d30c:	2301      	movs	r3, #1
 800d30e:	9300      	str	r3, [sp, #0]
 800d310:	2300      	movs	r3, #0
 800d312:	460a      	mov	r2, r1
 800d314:	4910      	ldr	r1, [pc, #64]	; (800d358 <xTimerCreateTimerTask+0x84>)
 800d316:	4811      	ldr	r0, [pc, #68]	; (800d35c <xTimerCreateTimerTask+0x88>)
 800d318:	f7fe fec6 	bl	800c0a8 <xTaskCreateStatic>
 800d31c:	4603      	mov	r3, r0
 800d31e:	4a10      	ldr	r2, [pc, #64]	; (800d360 <xTimerCreateTimerTask+0x8c>)
 800d320:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d322:	4b0f      	ldr	r3, [pc, #60]	; (800d360 <xTimerCreateTimerTask+0x8c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d001      	beq.n	800d32e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d32a:	2301      	movs	r3, #1
 800d32c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10a      	bne.n	800d34a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	613b      	str	r3, [r7, #16]
}
 800d346:	bf00      	nop
 800d348:	e7fe      	b.n	800d348 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d34a:	697b      	ldr	r3, [r7, #20]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3718      	adds	r7, #24
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20002474 	.word	0x20002474
 800d358:	08012210 	.word	0x08012210
 800d35c:	0800d58d 	.word	0x0800d58d
 800d360:	20002478 	.word	0x20002478

0800d364 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08a      	sub	sp, #40	; 0x28
 800d368:	af02      	add	r7, sp, #8
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
 800d370:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d372:	232c      	movs	r3, #44	; 0x2c
 800d374:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	2b2c      	cmp	r3, #44	; 0x2c
 800d37a:	d00a      	beq.n	800d392 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	f383 8811 	msr	BASEPRI, r3
 800d384:	f3bf 8f6f 	isb	sy
 800d388:	f3bf 8f4f 	dsb	sy
 800d38c:	61bb      	str	r3, [r7, #24]
}
 800d38e:	bf00      	nop
 800d390:	e7fe      	b.n	800d390 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d392:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10a      	bne.n	800d3b0 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39e:	f383 8811 	msr	BASEPRI, r3
 800d3a2:	f3bf 8f6f 	isb	sy
 800d3a6:	f3bf 8f4f 	dsb	sy
 800d3aa:	617b      	str	r3, [r7, #20]
}
 800d3ac:	bf00      	nop
 800d3ae:	e7fe      	b.n	800d3ae <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00d      	beq.n	800d3d6 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	2202      	movs	r2, #2
 800d3be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	9301      	str	r3, [sp, #4]
 800d3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	68b9      	ldr	r1, [r7, #8]
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f000 f805 	bl	800d3e0 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
	}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3720      	adds	r7, #32
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10a      	bne.n	800d40a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	617b      	str	r3, [r7, #20]
}
 800d406:	bf00      	nop
 800d408:	e7fe      	b.n	800d408 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d01e      	beq.n	800d44e <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d410:	f000 fae8 	bl	800d9e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	6a3a      	ldr	r2, [r7, #32]
 800d42a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42e:	3304      	adds	r3, #4
 800d430:	4618      	mov	r0, r3
 800d432:	f7fd fe47 	bl	800b0c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d008      	beq.n	800d44e <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d442:	f043 0304 	orr.w	r3, r3, #4
 800d446:	b2da      	uxtb	r2, r3
 800d448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d44e:	bf00      	nop
 800d450:	3718      	adds	r7, #24
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08a      	sub	sp, #40	; 0x28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d466:	2300      	movs	r3, #0
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10a      	bne.n	800d486 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	623b      	str	r3, [r7, #32]
}
 800d482:	bf00      	nop
 800d484:	e7fe      	b.n	800d484 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d486:	4b1a      	ldr	r3, [pc, #104]	; (800d4f0 <xTimerGenericCommand+0x98>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d02a      	beq.n	800d4e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b05      	cmp	r3, #5
 800d49e:	dc18      	bgt.n	800d4d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d4a0:	f7ff fc84 	bl	800cdac <xTaskGetSchedulerState>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d109      	bne.n	800d4be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d4aa:	4b11      	ldr	r3, [pc, #68]	; (800d4f0 <xTimerGenericCommand+0x98>)
 800d4ac:	6818      	ldr	r0, [r3, #0]
 800d4ae:	f107 0110 	add.w	r1, r7, #16
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b6:	f7fd ffd1 	bl	800b45c <xQueueGenericSend>
 800d4ba:	6278      	str	r0, [r7, #36]	; 0x24
 800d4bc:	e012      	b.n	800d4e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d4be:	4b0c      	ldr	r3, [pc, #48]	; (800d4f0 <xTimerGenericCommand+0x98>)
 800d4c0:	6818      	ldr	r0, [r3, #0]
 800d4c2:	f107 0110 	add.w	r1, r7, #16
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f7fd ffc7 	bl	800b45c <xQueueGenericSend>
 800d4ce:	6278      	str	r0, [r7, #36]	; 0x24
 800d4d0:	e008      	b.n	800d4e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d4d2:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <xTimerGenericCommand+0x98>)
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	f107 0110 	add.w	r1, r7, #16
 800d4da:	2300      	movs	r3, #0
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	f7fe f8bb 	bl	800b658 <xQueueGenericSendFromISR>
 800d4e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3728      	adds	r7, #40	; 0x28
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20002474 	.word	0x20002474

0800d4f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b088      	sub	sp, #32
 800d4f8:	af02      	add	r7, sp, #8
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4fe:	4b22      	ldr	r3, [pc, #136]	; (800d588 <prvProcessExpiredTimer+0x94>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	3304      	adds	r3, #4
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fd fe43 	bl	800b198 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d518:	f003 0304 	and.w	r3, r3, #4
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d022      	beq.n	800d566 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	699a      	ldr	r2, [r3, #24]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	18d1      	adds	r1, r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	6978      	ldr	r0, [r7, #20]
 800d52e:	f000 f8d1 	bl	800d6d4 <prvInsertTimerInActiveList>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d01f      	beq.n	800d578 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d538:	2300      	movs	r3, #0
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	2300      	movs	r3, #0
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	2100      	movs	r1, #0
 800d542:	6978      	ldr	r0, [r7, #20]
 800d544:	f7ff ff88 	bl	800d458 <xTimerGenericCommand>
 800d548:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d113      	bne.n	800d578 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	60fb      	str	r3, [r7, #12]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d56c:	f023 0301 	bic.w	r3, r3, #1
 800d570:	b2da      	uxtb	r2, r3
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	6a1b      	ldr	r3, [r3, #32]
 800d57c:	6978      	ldr	r0, [r7, #20]
 800d57e:	4798      	blx	r3
}
 800d580:	bf00      	nop
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	2000246c 	.word	0x2000246c

0800d58c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d594:	f107 0308 	add.w	r3, r7, #8
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 f857 	bl	800d64c <prvGetNextExpireTime>
 800d59e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f000 f803 	bl	800d5b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d5aa:	f000 f8d5 	bl	800d758 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d5ae:	e7f1      	b.n	800d594 <prvTimerTask+0x8>

0800d5b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d5ba:	f7fe ffd7 	bl	800c56c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5be:	f107 0308 	add.w	r3, r7, #8
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 f866 	bl	800d694 <prvSampleTimeNow>
 800d5c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d130      	bne.n	800d632 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10a      	bne.n	800d5ec <prvProcessTimerOrBlockTask+0x3c>
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d806      	bhi.n	800d5ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d5de:	f7fe ffd3 	bl	800c588 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff ff85 	bl	800d4f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d5ea:	e024      	b.n	800d636 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d008      	beq.n	800d604 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d5f2:	4b13      	ldr	r3, [pc, #76]	; (800d640 <prvProcessTimerOrBlockTask+0x90>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d101      	bne.n	800d600 <prvProcessTimerOrBlockTask+0x50>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e000      	b.n	800d602 <prvProcessTimerOrBlockTask+0x52>
 800d600:	2300      	movs	r3, #0
 800d602:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d604:	4b0f      	ldr	r3, [pc, #60]	; (800d644 <prvProcessTimerOrBlockTask+0x94>)
 800d606:	6818      	ldr	r0, [r3, #0]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	1ad3      	subs	r3, r2, r3
 800d60e:	683a      	ldr	r2, [r7, #0]
 800d610:	4619      	mov	r1, r3
 800d612:	f7fe fd15 	bl	800c040 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d616:	f7fe ffb7 	bl	800c588 <xTaskResumeAll>
 800d61a:	4603      	mov	r3, r0
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d10a      	bne.n	800d636 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d620:	4b09      	ldr	r3, [pc, #36]	; (800d648 <prvProcessTimerOrBlockTask+0x98>)
 800d622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
}
 800d630:	e001      	b.n	800d636 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d632:	f7fe ffa9 	bl	800c588 <xTaskResumeAll>
}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	20002470 	.word	0x20002470
 800d644:	20002474 	.word	0x20002474
 800d648:	e000ed04 	.word	0xe000ed04

0800d64c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d654:	4b0e      	ldr	r3, [pc, #56]	; (800d690 <prvGetNextExpireTime+0x44>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <prvGetNextExpireTime+0x16>
 800d65e:	2201      	movs	r2, #1
 800d660:	e000      	b.n	800d664 <prvGetNextExpireTime+0x18>
 800d662:	2200      	movs	r2, #0
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d105      	bne.n	800d67c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d670:	4b07      	ldr	r3, [pc, #28]	; (800d690 <prvGetNextExpireTime+0x44>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	e001      	b.n	800d680 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d67c:	2300      	movs	r3, #0
 800d67e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d680:	68fb      	ldr	r3, [r7, #12]
}
 800d682:	4618      	mov	r0, r3
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	2000246c 	.word	0x2000246c

0800d694 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d69c:	f7ff f810 	bl	800c6c0 <xTaskGetTickCount>
 800d6a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d6a2:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <prvSampleTimeNow+0x3c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d205      	bcs.n	800d6b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d6ac:	f000 f936 	bl	800d91c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	e002      	b.n	800d6be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d6be:	4a04      	ldr	r2, [pc, #16]	; (800d6d0 <prvSampleTimeNow+0x3c>)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	2000247c 	.word	0x2000247c

0800d6d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d812      	bhi.n	800d720 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	1ad2      	subs	r2, r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	429a      	cmp	r2, r3
 800d706:	d302      	bcc.n	800d70e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d708:	2301      	movs	r3, #1
 800d70a:	617b      	str	r3, [r7, #20]
 800d70c:	e01b      	b.n	800d746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d70e:	4b10      	ldr	r3, [pc, #64]	; (800d750 <prvInsertTimerInActiveList+0x7c>)
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3304      	adds	r3, #4
 800d716:	4619      	mov	r1, r3
 800d718:	4610      	mov	r0, r2
 800d71a:	f7fd fd04 	bl	800b126 <vListInsert>
 800d71e:	e012      	b.n	800d746 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	429a      	cmp	r2, r3
 800d726:	d206      	bcs.n	800d736 <prvInsertTimerInActiveList+0x62>
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d302      	bcc.n	800d736 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d730:	2301      	movs	r3, #1
 800d732:	617b      	str	r3, [r7, #20]
 800d734:	e007      	b.n	800d746 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d736:	4b07      	ldr	r3, [pc, #28]	; (800d754 <prvInsertTimerInActiveList+0x80>)
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3304      	adds	r3, #4
 800d73e:	4619      	mov	r1, r3
 800d740:	4610      	mov	r0, r2
 800d742:	f7fd fcf0 	bl	800b126 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d746:	697b      	ldr	r3, [r7, #20]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20002470 	.word	0x20002470
 800d754:	2000246c 	.word	0x2000246c

0800d758 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08e      	sub	sp, #56	; 0x38
 800d75c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d75e:	e0ca      	b.n	800d8f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	da18      	bge.n	800d798 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d766:	1d3b      	adds	r3, r7, #4
 800d768:	3304      	adds	r3, #4
 800d76a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10a      	bne.n	800d788 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	61fb      	str	r3, [r7, #28]
}
 800d784:	bf00      	nop
 800d786:	e7fe      	b.n	800d786 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d78e:	6850      	ldr	r0, [r2, #4]
 800d790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d792:	6892      	ldr	r2, [r2, #8]
 800d794:	4611      	mov	r1, r2
 800d796:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	f2c0 80ab 	blt.w	800d8f6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	695b      	ldr	r3, [r3, #20]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d004      	beq.n	800d7b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ae:	3304      	adds	r3, #4
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fd fcf1 	bl	800b198 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7b6:	463b      	mov	r3, r7
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff ff6b 	bl	800d694 <prvSampleTimeNow>
 800d7be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b09      	cmp	r3, #9
 800d7c4:	f200 8096 	bhi.w	800d8f4 <prvProcessReceivedCommands+0x19c>
 800d7c8:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <prvProcessReceivedCommands+0x78>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d7f9 	.word	0x0800d7f9
 800d7d4:	0800d7f9 	.word	0x0800d7f9
 800d7d8:	0800d7f9 	.word	0x0800d7f9
 800d7dc:	0800d86d 	.word	0x0800d86d
 800d7e0:	0800d881 	.word	0x0800d881
 800d7e4:	0800d8cb 	.word	0x0800d8cb
 800d7e8:	0800d7f9 	.word	0x0800d7f9
 800d7ec:	0800d7f9 	.word	0x0800d7f9
 800d7f0:	0800d86d 	.word	0x0800d86d
 800d7f4:	0800d881 	.word	0x0800d881
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7fe:	f043 0301 	orr.w	r3, r3, #1
 800d802:	b2da      	uxtb	r2, r3
 800d804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d80a:	68ba      	ldr	r2, [r7, #8]
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	18d1      	adds	r1, r2, r3
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d818:	f7ff ff5c 	bl	800d6d4 <prvInsertTimerInActiveList>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d069      	beq.n	800d8f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d824:	6a1b      	ldr	r3, [r3, #32]
 800d826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d828:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	2b00      	cmp	r3, #0
 800d836:	d05e      	beq.n	800d8f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d838:	68ba      	ldr	r2, [r7, #8]
 800d83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	441a      	add	r2, r3
 800d840:	2300      	movs	r3, #0
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	2300      	movs	r3, #0
 800d846:	2100      	movs	r1, #0
 800d848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d84a:	f7ff fe05 	bl	800d458 <xTimerGenericCommand>
 800d84e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d850:	6a3b      	ldr	r3, [r7, #32]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d14f      	bne.n	800d8f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	61bb      	str	r3, [r7, #24]
}
 800d868:	bf00      	nop
 800d86a:	e7fe      	b.n	800d86a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d872:	f023 0301 	bic.w	r3, r3, #1
 800d876:	b2da      	uxtb	r2, r3
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d87e:	e03a      	b.n	800d8f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d886:	f043 0301 	orr.w	r3, r3, #1
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d896:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10a      	bne.n	800d8b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	617b      	str	r3, [r7, #20]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	699a      	ldr	r2, [r3, #24]
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	18d1      	adds	r1, r2, r3
 800d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8c4:	f7ff ff06 	bl	800d6d4 <prvInsertTimerInActiveList>
					break;
 800d8c8:	e015      	b.n	800d8f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8d0:	f003 0302 	and.w	r3, r3, #2
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d103      	bne.n	800d8e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d8d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8da:	f000 fbdb 	bl	800e094 <vPortFree>
 800d8de:	e00a      	b.n	800d8f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8e6:	f023 0301 	bic.w	r3, r3, #1
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d8f2:	e000      	b.n	800d8f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d8f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d8f6:	4b08      	ldr	r3, [pc, #32]	; (800d918 <prvProcessReceivedCommands+0x1c0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	1d39      	adds	r1, r7, #4
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fd ffd2 	bl	800b8a8 <xQueueReceive>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	f47f af2a 	bne.w	800d760 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d90c:	bf00      	nop
 800d90e:	bf00      	nop
 800d910:	3730      	adds	r7, #48	; 0x30
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	20002474 	.word	0x20002474

0800d91c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b088      	sub	sp, #32
 800d920:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d922:	e048      	b.n	800d9b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d924:	4b2d      	ldr	r3, [pc, #180]	; (800d9dc <prvSwitchTimerLists+0xc0>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d92e:	4b2b      	ldr	r3, [pc, #172]	; (800d9dc <prvSwitchTimerLists+0xc0>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	3304      	adds	r3, #4
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fd fc2b 	bl	800b198 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6a1b      	ldr	r3, [r3, #32]
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d950:	f003 0304 	and.w	r3, r3, #4
 800d954:	2b00      	cmp	r3, #0
 800d956:	d02e      	beq.n	800d9b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	693a      	ldr	r2, [r7, #16]
 800d95e:	4413      	add	r3, r2
 800d960:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	429a      	cmp	r2, r3
 800d968:	d90e      	bls.n	800d988 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d976:	4b19      	ldr	r3, [pc, #100]	; (800d9dc <prvSwitchTimerLists+0xc0>)
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	3304      	adds	r3, #4
 800d97e:	4619      	mov	r1, r3
 800d980:	4610      	mov	r0, r2
 800d982:	f7fd fbd0 	bl	800b126 <vListInsert>
 800d986:	e016      	b.n	800d9b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d988:	2300      	movs	r3, #0
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	2300      	movs	r3, #0
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	2100      	movs	r1, #0
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	f7ff fd60 	bl	800d458 <xTimerGenericCommand>
 800d998:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10a      	bne.n	800d9b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	603b      	str	r3, [r7, #0]
}
 800d9b2:	bf00      	nop
 800d9b4:	e7fe      	b.n	800d9b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d9b6:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <prvSwitchTimerLists+0xc0>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d1b1      	bne.n	800d924 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d9c0:	4b06      	ldr	r3, [pc, #24]	; (800d9dc <prvSwitchTimerLists+0xc0>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d9c6:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <prvSwitchTimerLists+0xc4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a04      	ldr	r2, [pc, #16]	; (800d9dc <prvSwitchTimerLists+0xc0>)
 800d9cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d9ce:	4a04      	ldr	r2, [pc, #16]	; (800d9e0 <prvSwitchTimerLists+0xc4>)
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	6013      	str	r3, [r2, #0]
}
 800d9d4:	bf00      	nop
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	2000246c 	.word	0x2000246c
 800d9e0:	20002470 	.word	0x20002470

0800d9e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d9ea:	f000 f96b 	bl	800dcc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d9ee:	4b15      	ldr	r3, [pc, #84]	; (800da44 <prvCheckForValidListAndQueue+0x60>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d120      	bne.n	800da38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d9f6:	4814      	ldr	r0, [pc, #80]	; (800da48 <prvCheckForValidListAndQueue+0x64>)
 800d9f8:	f7fd fb44 	bl	800b084 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d9fc:	4813      	ldr	r0, [pc, #76]	; (800da4c <prvCheckForValidListAndQueue+0x68>)
 800d9fe:	f7fd fb41 	bl	800b084 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da02:	4b13      	ldr	r3, [pc, #76]	; (800da50 <prvCheckForValidListAndQueue+0x6c>)
 800da04:	4a10      	ldr	r2, [pc, #64]	; (800da48 <prvCheckForValidListAndQueue+0x64>)
 800da06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da08:	4b12      	ldr	r3, [pc, #72]	; (800da54 <prvCheckForValidListAndQueue+0x70>)
 800da0a:	4a10      	ldr	r2, [pc, #64]	; (800da4c <prvCheckForValidListAndQueue+0x68>)
 800da0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da0e:	2300      	movs	r3, #0
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	4b11      	ldr	r3, [pc, #68]	; (800da58 <prvCheckForValidListAndQueue+0x74>)
 800da14:	4a11      	ldr	r2, [pc, #68]	; (800da5c <prvCheckForValidListAndQueue+0x78>)
 800da16:	2110      	movs	r1, #16
 800da18:	2014      	movs	r0, #20
 800da1a:	f7fd fc4f 	bl	800b2bc <xQueueGenericCreateStatic>
 800da1e:	4603      	mov	r3, r0
 800da20:	4a08      	ldr	r2, [pc, #32]	; (800da44 <prvCheckForValidListAndQueue+0x60>)
 800da22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <prvCheckForValidListAndQueue+0x60>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d005      	beq.n	800da38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da2c:	4b05      	ldr	r3, [pc, #20]	; (800da44 <prvCheckForValidListAndQueue+0x60>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	490b      	ldr	r1, [pc, #44]	; (800da60 <prvCheckForValidListAndQueue+0x7c>)
 800da32:	4618      	mov	r0, r3
 800da34:	f7fe fada 	bl	800bfec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da38:	f000 f974 	bl	800dd24 <vPortExitCritical>
}
 800da3c:	bf00      	nop
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20002474 	.word	0x20002474
 800da48:	20002444 	.word	0x20002444
 800da4c:	20002458 	.word	0x20002458
 800da50:	2000246c 	.word	0x2000246c
 800da54:	20002470 	.word	0x20002470
 800da58:	200025c0 	.word	0x200025c0
 800da5c:	20002480 	.word	0x20002480
 800da60:	08012218 	.word	0x08012218

0800da64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	3b04      	subs	r3, #4
 800da74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3b04      	subs	r3, #4
 800da82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	f023 0201 	bic.w	r2, r3, #1
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	3b04      	subs	r3, #4
 800da92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da94:	4a0c      	ldr	r2, [pc, #48]	; (800dac8 <pxPortInitialiseStack+0x64>)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3b14      	subs	r3, #20
 800da9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3b04      	subs	r3, #4
 800daaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f06f 0202 	mvn.w	r2, #2
 800dab2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	3b20      	subs	r3, #32
 800dab8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800daba:	68fb      	ldr	r3, [r7, #12]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr
 800dac8:	0800dacd 	.word	0x0800dacd

0800dacc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dad6:	4b12      	ldr	r3, [pc, #72]	; (800db20 <prvTaskExitError+0x54>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dade:	d00a      	beq.n	800daf6 <prvTaskExitError+0x2a>
	__asm volatile
 800dae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae4:	f383 8811 	msr	BASEPRI, r3
 800dae8:	f3bf 8f6f 	isb	sy
 800daec:	f3bf 8f4f 	dsb	sy
 800daf0:	60fb      	str	r3, [r7, #12]
}
 800daf2:	bf00      	nop
 800daf4:	e7fe      	b.n	800daf4 <prvTaskExitError+0x28>
	__asm volatile
 800daf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	60bb      	str	r3, [r7, #8]
}
 800db08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db0a:	bf00      	nop
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d0fc      	beq.n	800db0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	3714      	adds	r7, #20
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr
 800db20:	20000150 	.word	0x20000150
	...

0800db30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db30:	4b07      	ldr	r3, [pc, #28]	; (800db50 <pxCurrentTCBConst2>)
 800db32:	6819      	ldr	r1, [r3, #0]
 800db34:	6808      	ldr	r0, [r1, #0]
 800db36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3a:	f380 8809 	msr	PSP, r0
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f04f 0000 	mov.w	r0, #0
 800db46:	f380 8811 	msr	BASEPRI, r0
 800db4a:	4770      	bx	lr
 800db4c:	f3af 8000 	nop.w

0800db50 <pxCurrentTCBConst2>:
 800db50:	20002208 	.word	0x20002208
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db54:	bf00      	nop
 800db56:	bf00      	nop

0800db58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db58:	4808      	ldr	r0, [pc, #32]	; (800db7c <prvPortStartFirstTask+0x24>)
 800db5a:	6800      	ldr	r0, [r0, #0]
 800db5c:	6800      	ldr	r0, [r0, #0]
 800db5e:	f380 8808 	msr	MSP, r0
 800db62:	f04f 0000 	mov.w	r0, #0
 800db66:	f380 8814 	msr	CONTROL, r0
 800db6a:	b662      	cpsie	i
 800db6c:	b661      	cpsie	f
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	df00      	svc	0
 800db78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db7a:	bf00      	nop
 800db7c:	e000ed08 	.word	0xe000ed08

0800db80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800db86:	4b46      	ldr	r3, [pc, #280]	; (800dca0 <xPortStartScheduler+0x120>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a46      	ldr	r2, [pc, #280]	; (800dca4 <xPortStartScheduler+0x124>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d10a      	bne.n	800dba6 <xPortStartScheduler+0x26>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	613b      	str	r3, [r7, #16]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dba6:	4b3e      	ldr	r3, [pc, #248]	; (800dca0 <xPortStartScheduler+0x120>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a3f      	ldr	r2, [pc, #252]	; (800dca8 <xPortStartScheduler+0x128>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d10a      	bne.n	800dbc6 <xPortStartScheduler+0x46>
	__asm volatile
 800dbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb4:	f383 8811 	msr	BASEPRI, r3
 800dbb8:	f3bf 8f6f 	isb	sy
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	60fb      	str	r3, [r7, #12]
}
 800dbc2:	bf00      	nop
 800dbc4:	e7fe      	b.n	800dbc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dbc6:	4b39      	ldr	r3, [pc, #228]	; (800dcac <xPortStartScheduler+0x12c>)
 800dbc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	22ff      	movs	r2, #255	; 0xff
 800dbd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dbe0:	78fb      	ldrb	r3, [r7, #3]
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	4b31      	ldr	r3, [pc, #196]	; (800dcb0 <xPortStartScheduler+0x130>)
 800dbec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dbee:	4b31      	ldr	r3, [pc, #196]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dbf0:	2207      	movs	r2, #7
 800dbf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dbf4:	e009      	b.n	800dc0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dbf6:	4b2f      	ldr	r3, [pc, #188]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	4a2d      	ldr	r2, [pc, #180]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dbfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc00:	78fb      	ldrb	r3, [r7, #3]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	005b      	lsls	r3, r3, #1
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc0a:	78fb      	ldrb	r3, [r7, #3]
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc12:	2b80      	cmp	r3, #128	; 0x80
 800dc14:	d0ef      	beq.n	800dbf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc16:	4b27      	ldr	r3, [pc, #156]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f1c3 0307 	rsb	r3, r3, #7
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d00a      	beq.n	800dc38 <xPortStartScheduler+0xb8>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	60bb      	str	r3, [r7, #8]
}
 800dc34:	bf00      	nop
 800dc36:	e7fe      	b.n	800dc36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc38:	4b1e      	ldr	r3, [pc, #120]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	021b      	lsls	r3, r3, #8
 800dc3e:	4a1d      	ldr	r2, [pc, #116]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc42:	4b1c      	ldr	r3, [pc, #112]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc4a:	4a1a      	ldr	r2, [pc, #104]	; (800dcb4 <xPortStartScheduler+0x134>)
 800dc4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc56:	4b18      	ldr	r3, [pc, #96]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	4a17      	ldr	r2, [pc, #92]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a14      	ldr	r2, [pc, #80]	; (800dcb8 <xPortStartScheduler+0x138>)
 800dc68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dc6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc6e:	f000 f8dd 	bl	800de2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc72:	4b12      	ldr	r3, [pc, #72]	; (800dcbc <xPortStartScheduler+0x13c>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc78:	f000 f8f6 	bl	800de68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc7c:	4b10      	ldr	r3, [pc, #64]	; (800dcc0 <xPortStartScheduler+0x140>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a0f      	ldr	r2, [pc, #60]	; (800dcc0 <xPortStartScheduler+0x140>)
 800dc82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc88:	f7ff ff66 	bl	800db58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc8c:	f7fe fde0 	bl	800c850 <vTaskSwitchContext>
	prvTaskExitError();
 800dc90:	f7ff ff1c 	bl	800dacc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3718      	adds	r7, #24
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	e000ed00 	.word	0xe000ed00
 800dca4:	410fc271 	.word	0x410fc271
 800dca8:	410fc270 	.word	0x410fc270
 800dcac:	e000e400 	.word	0xe000e400
 800dcb0:	20002610 	.word	0x20002610
 800dcb4:	20002614 	.word	0x20002614
 800dcb8:	e000ed20 	.word	0xe000ed20
 800dcbc:	20000150 	.word	0x20000150
 800dcc0:	e000ef34 	.word	0xe000ef34

0800dcc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
	__asm volatile
 800dcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcce:	f383 8811 	msr	BASEPRI, r3
 800dcd2:	f3bf 8f6f 	isb	sy
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	607b      	str	r3, [r7, #4]
}
 800dcdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dcde:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <vPortEnterCritical+0x58>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	3301      	adds	r3, #1
 800dce4:	4a0d      	ldr	r2, [pc, #52]	; (800dd1c <vPortEnterCritical+0x58>)
 800dce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dce8:	4b0c      	ldr	r3, [pc, #48]	; (800dd1c <vPortEnterCritical+0x58>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d10f      	bne.n	800dd10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dcf0:	4b0b      	ldr	r3, [pc, #44]	; (800dd20 <vPortEnterCritical+0x5c>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d00a      	beq.n	800dd10 <vPortEnterCritical+0x4c>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfe:	f383 8811 	msr	BASEPRI, r3
 800dd02:	f3bf 8f6f 	isb	sy
 800dd06:	f3bf 8f4f 	dsb	sy
 800dd0a:	603b      	str	r3, [r7, #0]
}
 800dd0c:	bf00      	nop
 800dd0e:	e7fe      	b.n	800dd0e <vPortEnterCritical+0x4a>
	}
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	20000150 	.word	0x20000150
 800dd20:	e000ed04 	.word	0xe000ed04

0800dd24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd2a:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <vPortExitCritical+0x50>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d10a      	bne.n	800dd48 <vPortExitCritical+0x24>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	607b      	str	r3, [r7, #4]
}
 800dd44:	bf00      	nop
 800dd46:	e7fe      	b.n	800dd46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dd48:	4b0a      	ldr	r3, [pc, #40]	; (800dd74 <vPortExitCritical+0x50>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	4a09      	ldr	r2, [pc, #36]	; (800dd74 <vPortExitCritical+0x50>)
 800dd50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd52:	4b08      	ldr	r3, [pc, #32]	; (800dd74 <vPortExitCritical+0x50>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d105      	bne.n	800dd66 <vPortExitCritical+0x42>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	f383 8811 	msr	BASEPRI, r3
}
 800dd64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20000150 	.word	0x20000150
	...

0800dd80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd80:	f3ef 8009 	mrs	r0, PSP
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	4b15      	ldr	r3, [pc, #84]	; (800dde0 <pxCurrentTCBConst>)
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	f01e 0f10 	tst.w	lr, #16
 800dd90:	bf08      	it	eq
 800dd92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9a:	6010      	str	r0, [r2, #0]
 800dd9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dda0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dda4:	f380 8811 	msr	BASEPRI, r0
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f7fe fd4e 	bl	800c850 <vTaskSwitchContext>
 800ddb4:	f04f 0000 	mov.w	r0, #0
 800ddb8:	f380 8811 	msr	BASEPRI, r0
 800ddbc:	bc09      	pop	{r0, r3}
 800ddbe:	6819      	ldr	r1, [r3, #0]
 800ddc0:	6808      	ldr	r0, [r1, #0]
 800ddc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc6:	f01e 0f10 	tst.w	lr, #16
 800ddca:	bf08      	it	eq
 800ddcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ddd0:	f380 8809 	msr	PSP, r0
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	f3af 8000 	nop.w

0800dde0 <pxCurrentTCBConst>:
 800dde0:	20002208 	.word	0x20002208
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop

0800dde8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	607b      	str	r3, [r7, #4]
}
 800de00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de02:	f7fe fc6d 	bl	800c6e0 <xTaskIncrementTick>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de0c:	4b06      	ldr	r3, [pc, #24]	; (800de28 <xPortSysTickHandler+0x40>)
 800de0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	2300      	movs	r3, #0
 800de16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	f383 8811 	msr	BASEPRI, r3
}
 800de1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800de20:	bf00      	nop
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	e000ed04 	.word	0xe000ed04

0800de2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de2c:	b480      	push	{r7}
 800de2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de30:	4b09      	ldr	r3, [pc, #36]	; (800de58 <vPortSetupTimerInterrupt+0x2c>)
 800de32:	2200      	movs	r2, #0
 800de34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de36:	4b09      	ldr	r3, [pc, #36]	; (800de5c <vPortSetupTimerInterrupt+0x30>)
 800de38:	2200      	movs	r2, #0
 800de3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de3c:	4b08      	ldr	r3, [pc, #32]	; (800de60 <vPortSetupTimerInterrupt+0x34>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a08      	ldr	r2, [pc, #32]	; (800de64 <vPortSetupTimerInterrupt+0x38>)
 800de42:	3b01      	subs	r3, #1
 800de44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de46:	4b04      	ldr	r3, [pc, #16]	; (800de58 <vPortSetupTimerInterrupt+0x2c>)
 800de48:	2207      	movs	r2, #7
 800de4a:	601a      	str	r2, [r3, #0]
}
 800de4c:	bf00      	nop
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop
 800de58:	e000e010 	.word	0xe000e010
 800de5c:	e000e018 	.word	0xe000e018
 800de60:	200000b8 	.word	0x200000b8
 800de64:	e000e014 	.word	0xe000e014

0800de68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de78 <vPortEnableVFP+0x10>
 800de6c:	6801      	ldr	r1, [r0, #0]
 800de6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800de72:	6001      	str	r1, [r0, #0]
 800de74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de76:	bf00      	nop
 800de78:	e000ed88 	.word	0xe000ed88

0800de7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de82:	f3ef 8305 	mrs	r3, IPSR
 800de86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2b0f      	cmp	r3, #15
 800de8c:	d914      	bls.n	800deb8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800de8e:	4a17      	ldr	r2, [pc, #92]	; (800deec <vPortValidateInterruptPriority+0x70>)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	4413      	add	r3, r2
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de98:	4b15      	ldr	r3, [pc, #84]	; (800def0 <vPortValidateInterruptPriority+0x74>)
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	7afa      	ldrb	r2, [r7, #11]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d20a      	bcs.n	800deb8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	607b      	str	r3, [r7, #4]
}
 800deb4:	bf00      	nop
 800deb6:	e7fe      	b.n	800deb6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800deb8:	4b0e      	ldr	r3, [pc, #56]	; (800def4 <vPortValidateInterruptPriority+0x78>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dec0:	4b0d      	ldr	r3, [pc, #52]	; (800def8 <vPortValidateInterruptPriority+0x7c>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d90a      	bls.n	800dede <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800decc:	f383 8811 	msr	BASEPRI, r3
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	603b      	str	r3, [r7, #0]
}
 800deda:	bf00      	nop
 800dedc:	e7fe      	b.n	800dedc <vPortValidateInterruptPriority+0x60>
	}
 800dede:	bf00      	nop
 800dee0:	3714      	adds	r7, #20
 800dee2:	46bd      	mov	sp, r7
 800dee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	e000e3f0 	.word	0xe000e3f0
 800def0:	20002610 	.word	0x20002610
 800def4:	e000ed0c 	.word	0xe000ed0c
 800def8:	20002614 	.word	0x20002614

0800defc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b08a      	sub	sp, #40	; 0x28
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df04:	2300      	movs	r3, #0
 800df06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df08:	f7fe fb30 	bl	800c56c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df0c:	4b5b      	ldr	r3, [pc, #364]	; (800e07c <pvPortMalloc+0x180>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d101      	bne.n	800df18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df14:	f000 f920 	bl	800e158 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df18:	4b59      	ldr	r3, [pc, #356]	; (800e080 <pvPortMalloc+0x184>)
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4013      	ands	r3, r2
 800df20:	2b00      	cmp	r3, #0
 800df22:	f040 8093 	bne.w	800e04c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d01d      	beq.n	800df68 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800df2c:	2208      	movs	r2, #8
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4413      	add	r3, r2
 800df32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f003 0307 	and.w	r3, r3, #7
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d014      	beq.n	800df68 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f023 0307 	bic.w	r3, r3, #7
 800df44:	3308      	adds	r3, #8
 800df46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f003 0307 	and.w	r3, r3, #7
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00a      	beq.n	800df68 <pvPortMalloc+0x6c>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	f383 8811 	msr	BASEPRI, r3
 800df5a:	f3bf 8f6f 	isb	sy
 800df5e:	f3bf 8f4f 	dsb	sy
 800df62:	617b      	str	r3, [r7, #20]
}
 800df64:	bf00      	nop
 800df66:	e7fe      	b.n	800df66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d06e      	beq.n	800e04c <pvPortMalloc+0x150>
 800df6e:	4b45      	ldr	r3, [pc, #276]	; (800e084 <pvPortMalloc+0x188>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	429a      	cmp	r2, r3
 800df76:	d869      	bhi.n	800e04c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800df78:	4b43      	ldr	r3, [pc, #268]	; (800e088 <pvPortMalloc+0x18c>)
 800df7a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800df7c:	4b42      	ldr	r3, [pc, #264]	; (800e088 <pvPortMalloc+0x18c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df82:	e004      	b.n	800df8e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df86:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	429a      	cmp	r2, r3
 800df96:	d903      	bls.n	800dfa0 <pvPortMalloc+0xa4>
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d1f1      	bne.n	800df84 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfa0:	4b36      	ldr	r3, [pc, #216]	; (800e07c <pvPortMalloc+0x180>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d050      	beq.n	800e04c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2208      	movs	r2, #8
 800dfb0:	4413      	add	r3, r2
 800dfb2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	6a3b      	ldr	r3, [r7, #32]
 800dfba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	685a      	ldr	r2, [r3, #4]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	1ad2      	subs	r2, r2, r3
 800dfc4:	2308      	movs	r3, #8
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d91f      	bls.n	800e00c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dfcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00a      	beq.n	800dff4 <pvPortMalloc+0xf8>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	613b      	str	r3, [r7, #16]
}
 800dff0:	bf00      	nop
 800dff2:	e7fe      	b.n	800dff2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	1ad2      	subs	r2, r2, r3
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e006:	69b8      	ldr	r0, [r7, #24]
 800e008:	f000 f908 	bl	800e21c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e00c:	4b1d      	ldr	r3, [pc, #116]	; (800e084 <pvPortMalloc+0x188>)
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	1ad3      	subs	r3, r2, r3
 800e016:	4a1b      	ldr	r2, [pc, #108]	; (800e084 <pvPortMalloc+0x188>)
 800e018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e01a:	4b1a      	ldr	r3, [pc, #104]	; (800e084 <pvPortMalloc+0x188>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	4b1b      	ldr	r3, [pc, #108]	; (800e08c <pvPortMalloc+0x190>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d203      	bcs.n	800e02e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e026:	4b17      	ldr	r3, [pc, #92]	; (800e084 <pvPortMalloc+0x188>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a18      	ldr	r2, [pc, #96]	; (800e08c <pvPortMalloc+0x190>)
 800e02c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e030:	685a      	ldr	r2, [r3, #4]
 800e032:	4b13      	ldr	r3, [pc, #76]	; (800e080 <pvPortMalloc+0x184>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	431a      	orrs	r2, r3
 800e038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03e:	2200      	movs	r2, #0
 800e040:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e042:	4b13      	ldr	r3, [pc, #76]	; (800e090 <pvPortMalloc+0x194>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	3301      	adds	r3, #1
 800e048:	4a11      	ldr	r2, [pc, #68]	; (800e090 <pvPortMalloc+0x194>)
 800e04a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e04c:	f7fe fa9c 	bl	800c588 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	f003 0307 	and.w	r3, r3, #7
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00a      	beq.n	800e070 <pvPortMalloc+0x174>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	60fb      	str	r3, [r7, #12]
}
 800e06c:	bf00      	nop
 800e06e:	e7fe      	b.n	800e06e <pvPortMalloc+0x172>
	return pvReturn;
 800e070:	69fb      	ldr	r3, [r7, #28]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3728      	adds	r7, #40	; 0x28
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	20006220 	.word	0x20006220
 800e080:	20006234 	.word	0x20006234
 800e084:	20006224 	.word	0x20006224
 800e088:	20006218 	.word	0x20006218
 800e08c:	20006228 	.word	0x20006228
 800e090:	2000622c 	.word	0x2000622c

0800e094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d04d      	beq.n	800e142 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0a6:	2308      	movs	r3, #8
 800e0a8:	425b      	negs	r3, r3
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	4b24      	ldr	r3, [pc, #144]	; (800e14c <vPortFree+0xb8>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4013      	ands	r3, r2
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10a      	bne.n	800e0d8 <vPortFree+0x44>
	__asm volatile
 800e0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c6:	f383 8811 	msr	BASEPRI, r3
 800e0ca:	f3bf 8f6f 	isb	sy
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	60fb      	str	r3, [r7, #12]
}
 800e0d4:	bf00      	nop
 800e0d6:	e7fe      	b.n	800e0d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00a      	beq.n	800e0f6 <vPortFree+0x62>
	__asm volatile
 800e0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e4:	f383 8811 	msr	BASEPRI, r3
 800e0e8:	f3bf 8f6f 	isb	sy
 800e0ec:	f3bf 8f4f 	dsb	sy
 800e0f0:	60bb      	str	r3, [r7, #8]
}
 800e0f2:	bf00      	nop
 800e0f4:	e7fe      	b.n	800e0f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	685a      	ldr	r2, [r3, #4]
 800e0fa:	4b14      	ldr	r3, [pc, #80]	; (800e14c <vPortFree+0xb8>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4013      	ands	r3, r2
 800e100:	2b00      	cmp	r3, #0
 800e102:	d01e      	beq.n	800e142 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d11a      	bne.n	800e142 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	685a      	ldr	r2, [r3, #4]
 800e110:	4b0e      	ldr	r3, [pc, #56]	; (800e14c <vPortFree+0xb8>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	43db      	mvns	r3, r3
 800e116:	401a      	ands	r2, r3
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e11c:	f7fe fa26 	bl	800c56c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	685a      	ldr	r2, [r3, #4]
 800e124:	4b0a      	ldr	r3, [pc, #40]	; (800e150 <vPortFree+0xbc>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4413      	add	r3, r2
 800e12a:	4a09      	ldr	r2, [pc, #36]	; (800e150 <vPortFree+0xbc>)
 800e12c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e12e:	6938      	ldr	r0, [r7, #16]
 800e130:	f000 f874 	bl	800e21c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e134:	4b07      	ldr	r3, [pc, #28]	; (800e154 <vPortFree+0xc0>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	3301      	adds	r3, #1
 800e13a:	4a06      	ldr	r2, [pc, #24]	; (800e154 <vPortFree+0xc0>)
 800e13c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e13e:	f7fe fa23 	bl	800c588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e142:	bf00      	nop
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	20006234 	.word	0x20006234
 800e150:	20006224 	.word	0x20006224
 800e154:	20006230 	.word	0x20006230

0800e158 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e15e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e162:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e164:	4b27      	ldr	r3, [pc, #156]	; (800e204 <prvHeapInit+0xac>)
 800e166:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f003 0307 	and.w	r3, r3, #7
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00c      	beq.n	800e18c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3307      	adds	r3, #7
 800e176:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f023 0307 	bic.w	r3, r3, #7
 800e17e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	4a1f      	ldr	r2, [pc, #124]	; (800e204 <prvHeapInit+0xac>)
 800e188:	4413      	add	r3, r2
 800e18a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e190:	4a1d      	ldr	r2, [pc, #116]	; (800e208 <prvHeapInit+0xb0>)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e196:	4b1c      	ldr	r3, [pc, #112]	; (800e208 <prvHeapInit+0xb0>)
 800e198:	2200      	movs	r2, #0
 800e19a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1a4:	2208      	movs	r2, #8
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	1a9b      	subs	r3, r3, r2
 800e1aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f023 0307 	bic.w	r3, r3, #7
 800e1b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	4a15      	ldr	r2, [pc, #84]	; (800e20c <prvHeapInit+0xb4>)
 800e1b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1ba:	4b14      	ldr	r3, [pc, #80]	; (800e20c <prvHeapInit+0xb4>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1c2:	4b12      	ldr	r3, [pc, #72]	; (800e20c <prvHeapInit+0xb4>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	1ad2      	subs	r2, r2, r3
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1d8:	4b0c      	ldr	r3, [pc, #48]	; (800e20c <prvHeapInit+0xb4>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	4a0a      	ldr	r2, [pc, #40]	; (800e210 <prvHeapInit+0xb8>)
 800e1e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	4a09      	ldr	r2, [pc, #36]	; (800e214 <prvHeapInit+0xbc>)
 800e1ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e1f0:	4b09      	ldr	r3, [pc, #36]	; (800e218 <prvHeapInit+0xc0>)
 800e1f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e1f6:	601a      	str	r2, [r3, #0]
}
 800e1f8:	bf00      	nop
 800e1fa:	3714      	adds	r7, #20
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	20002618 	.word	0x20002618
 800e208:	20006218 	.word	0x20006218
 800e20c:	20006220 	.word	0x20006220
 800e210:	20006228 	.word	0x20006228
 800e214:	20006224 	.word	0x20006224
 800e218:	20006234 	.word	0x20006234

0800e21c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e21c:	b480      	push	{r7}
 800e21e:	b085      	sub	sp, #20
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e224:	4b28      	ldr	r3, [pc, #160]	; (800e2c8 <prvInsertBlockIntoFreeList+0xac>)
 800e226:	60fb      	str	r3, [r7, #12]
 800e228:	e002      	b.n	800e230 <prvInsertBlockIntoFreeList+0x14>
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	429a      	cmp	r2, r3
 800e238:	d8f7      	bhi.n	800e22a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	4413      	add	r3, r2
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d108      	bne.n	800e25e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	441a      	add	r2, r3
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	441a      	add	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d118      	bne.n	800e2a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	4b15      	ldr	r3, [pc, #84]	; (800e2cc <prvInsertBlockIntoFreeList+0xb0>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d00d      	beq.n	800e29a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	441a      	add	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	601a      	str	r2, [r3, #0]
 800e298:	e008      	b.n	800e2ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e29a:	4b0c      	ldr	r3, [pc, #48]	; (800e2cc <prvInsertBlockIntoFreeList+0xb0>)
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	e003      	b.n	800e2ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681a      	ldr	r2, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d002      	beq.n	800e2ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2ba:	bf00      	nop
 800e2bc:	3714      	adds	r7, #20
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop
 800e2c8:	20006218 	.word	0x20006218
 800e2cc:	20006220 	.word	0x20006220

0800e2d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4912      	ldr	r1, [pc, #72]	; (800e320 <MX_USB_DEVICE_Init+0x50>)
 800e2d8:	4812      	ldr	r0, [pc, #72]	; (800e324 <MX_USB_DEVICE_Init+0x54>)
 800e2da:	f7fb fb55 	bl	8009988 <USBD_Init>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d001      	beq.n	800e2e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e2e4:	f7f4 fe24 	bl	8002f30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e2e8:	490f      	ldr	r1, [pc, #60]	; (800e328 <MX_USB_DEVICE_Init+0x58>)
 800e2ea:	480e      	ldr	r0, [pc, #56]	; (800e324 <MX_USB_DEVICE_Init+0x54>)
 800e2ec:	f7fb fb7c 	bl	80099e8 <USBD_RegisterClass>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e2f6:	f7f4 fe1b 	bl	8002f30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e2fa:	490c      	ldr	r1, [pc, #48]	; (800e32c <MX_USB_DEVICE_Init+0x5c>)
 800e2fc:	4809      	ldr	r0, [pc, #36]	; (800e324 <MX_USB_DEVICE_Init+0x54>)
 800e2fe:	f7fb fab3 	bl	8009868 <USBD_CDC_RegisterInterface>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e308:	f7f4 fe12 	bl	8002f30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e30c:	4805      	ldr	r0, [pc, #20]	; (800e324 <MX_USB_DEVICE_Init+0x54>)
 800e30e:	f7fb fba1 	bl	8009a54 <USBD_Start>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d001      	beq.n	800e31c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e318:	f7f4 fe0a 	bl	8002f30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e31c:	bf00      	nop
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	20000168 	.word	0x20000168
 800e324:	20006238 	.word	0x20006238
 800e328:	200000d0 	.word	0x200000d0
 800e32c:	20000154 	.word	0x20000154

0800e330 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e334:	2200      	movs	r2, #0
 800e336:	4905      	ldr	r1, [pc, #20]	; (800e34c <CDC_Init_FS+0x1c>)
 800e338:	4805      	ldr	r0, [pc, #20]	; (800e350 <CDC_Init_FS+0x20>)
 800e33a:	f7fb faaf 	bl	800989c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e33e:	4905      	ldr	r1, [pc, #20]	; (800e354 <CDC_Init_FS+0x24>)
 800e340:	4803      	ldr	r0, [pc, #12]	; (800e350 <CDC_Init_FS+0x20>)
 800e342:	f7fb facd 	bl	80098e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e346:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e348:	4618      	mov	r0, r3
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20006d14 	.word	0x20006d14
 800e350:	20006238 	.word	0x20006238
 800e354:	20006514 	.word	0x20006514

0800e358 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e358:	b480      	push	{r7}
 800e35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e35c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e35e:	4618      	mov	r0, r3
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr

0800e368 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	6039      	str	r1, [r7, #0]
 800e372:	71fb      	strb	r3, [r7, #7]
 800e374:	4613      	mov	r3, r2
 800e376:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	2b23      	cmp	r3, #35	; 0x23
 800e37c:	d84a      	bhi.n	800e414 <CDC_Control_FS+0xac>
 800e37e:	a201      	add	r2, pc, #4	; (adr r2, 800e384 <CDC_Control_FS+0x1c>)
 800e380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e384:	0800e415 	.word	0x0800e415
 800e388:	0800e415 	.word	0x0800e415
 800e38c:	0800e415 	.word	0x0800e415
 800e390:	0800e415 	.word	0x0800e415
 800e394:	0800e415 	.word	0x0800e415
 800e398:	0800e415 	.word	0x0800e415
 800e39c:	0800e415 	.word	0x0800e415
 800e3a0:	0800e415 	.word	0x0800e415
 800e3a4:	0800e415 	.word	0x0800e415
 800e3a8:	0800e415 	.word	0x0800e415
 800e3ac:	0800e415 	.word	0x0800e415
 800e3b0:	0800e415 	.word	0x0800e415
 800e3b4:	0800e415 	.word	0x0800e415
 800e3b8:	0800e415 	.word	0x0800e415
 800e3bc:	0800e415 	.word	0x0800e415
 800e3c0:	0800e415 	.word	0x0800e415
 800e3c4:	0800e415 	.word	0x0800e415
 800e3c8:	0800e415 	.word	0x0800e415
 800e3cc:	0800e415 	.word	0x0800e415
 800e3d0:	0800e415 	.word	0x0800e415
 800e3d4:	0800e415 	.word	0x0800e415
 800e3d8:	0800e415 	.word	0x0800e415
 800e3dc:	0800e415 	.word	0x0800e415
 800e3e0:	0800e415 	.word	0x0800e415
 800e3e4:	0800e415 	.word	0x0800e415
 800e3e8:	0800e415 	.word	0x0800e415
 800e3ec:	0800e415 	.word	0x0800e415
 800e3f0:	0800e415 	.word	0x0800e415
 800e3f4:	0800e415 	.word	0x0800e415
 800e3f8:	0800e415 	.word	0x0800e415
 800e3fc:	0800e415 	.word	0x0800e415
 800e400:	0800e415 	.word	0x0800e415
 800e404:	0800e415 	.word	0x0800e415
 800e408:	0800e415 	.word	0x0800e415
 800e40c:	0800e415 	.word	0x0800e415
 800e410:	0800e415 	.word	0x0800e415
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e414:	bf00      	nop
  }

  return (USBD_OK);
 800e416:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e418:	4618      	mov	r0, r3
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e42e:	6879      	ldr	r1, [r7, #4]
 800e430:	4805      	ldr	r0, [pc, #20]	; (800e448 <CDC_Receive_FS+0x24>)
 800e432:	f7fb fa55 	bl	80098e0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e436:	4804      	ldr	r0, [pc, #16]	; (800e448 <CDC_Receive_FS+0x24>)
 800e438:	f7fb fa70 	bl	800991c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e43c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	20006238 	.word	0x20006238

0800e44c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b087      	sub	sp, #28
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	4613      	mov	r3, r2
 800e458:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e45e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e462:	4618      	mov	r0, r3
 800e464:	371c      	adds	r7, #28
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
	...

0800e470 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	4603      	mov	r3, r0
 800e478:	6039      	str	r1, [r7, #0]
 800e47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2212      	movs	r2, #18
 800e480:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e482:	4b03      	ldr	r3, [pc, #12]	; (800e490 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e484:	4618      	mov	r0, r3
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr
 800e490:	20000184 	.word	0x20000184

0800e494 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	4603      	mov	r3, r0
 800e49c:	6039      	str	r1, [r7, #0]
 800e49e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	2204      	movs	r2, #4
 800e4a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e4a6:	4b03      	ldr	r3, [pc, #12]	; (800e4b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr
 800e4b4:	20000198 	.word	0x20000198

0800e4b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	4603      	mov	r3, r0
 800e4c0:	6039      	str	r1, [r7, #0]
 800e4c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4c4:	79fb      	ldrb	r3, [r7, #7]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d105      	bne.n	800e4d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	4907      	ldr	r1, [pc, #28]	; (800e4ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e4ce:	4808      	ldr	r0, [pc, #32]	; (800e4f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e4d0:	f7fc fc72 	bl	800adb8 <USBD_GetString>
 800e4d4:	e004      	b.n	800e4e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e4d6:	683a      	ldr	r2, [r7, #0]
 800e4d8:	4904      	ldr	r1, [pc, #16]	; (800e4ec <USBD_FS_ProductStrDescriptor+0x34>)
 800e4da:	4805      	ldr	r0, [pc, #20]	; (800e4f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800e4dc:	f7fc fc6c 	bl	800adb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4e0:	4b02      	ldr	r3, [pc, #8]	; (800e4ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3708      	adds	r7, #8
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	20007514 	.word	0x20007514
 800e4f0:	08012220 	.word	0x08012220

0800e4f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	6039      	str	r1, [r7, #0]
 800e4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e500:	683a      	ldr	r2, [r7, #0]
 800e502:	4904      	ldr	r1, [pc, #16]	; (800e514 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e504:	4804      	ldr	r0, [pc, #16]	; (800e518 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e506:	f7fc fc57 	bl	800adb8 <USBD_GetString>
  return USBD_StrDesc;
 800e50a:	4b02      	ldr	r3, [pc, #8]	; (800e514 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20007514 	.word	0x20007514
 800e518:	08012238 	.word	0x08012238

0800e51c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	4603      	mov	r3, r0
 800e524:	6039      	str	r1, [r7, #0]
 800e526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	221a      	movs	r2, #26
 800e52c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e52e:	f000 f843 	bl	800e5b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e532:	4b02      	ldr	r3, [pc, #8]	; (800e53c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e534:	4618      	mov	r0, r3
 800e536:	3708      	adds	r7, #8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	2000019c 	.word	0x2000019c

0800e540 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	4603      	mov	r3, r0
 800e548:	6039      	str	r1, [r7, #0]
 800e54a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e54c:	79fb      	ldrb	r3, [r7, #7]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d105      	bne.n	800e55e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	4907      	ldr	r1, [pc, #28]	; (800e574 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e556:	4808      	ldr	r0, [pc, #32]	; (800e578 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e558:	f7fc fc2e 	bl	800adb8 <USBD_GetString>
 800e55c:	e004      	b.n	800e568 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	4904      	ldr	r1, [pc, #16]	; (800e574 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e562:	4805      	ldr	r0, [pc, #20]	; (800e578 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e564:	f7fc fc28 	bl	800adb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e568:	4b02      	ldr	r3, [pc, #8]	; (800e574 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	20007514 	.word	0x20007514
 800e578:	0801224c 	.word	0x0801224c

0800e57c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	6039      	str	r1, [r7, #0]
 800e586:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e588:	79fb      	ldrb	r3, [r7, #7]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d105      	bne.n	800e59a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	4907      	ldr	r1, [pc, #28]	; (800e5b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e592:	4808      	ldr	r0, [pc, #32]	; (800e5b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e594:	f7fc fc10 	bl	800adb8 <USBD_GetString>
 800e598:	e004      	b.n	800e5a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e59a:	683a      	ldr	r2, [r7, #0]
 800e59c:	4904      	ldr	r1, [pc, #16]	; (800e5b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e59e:	4805      	ldr	r0, [pc, #20]	; (800e5b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e5a0:	f7fc fc0a 	bl	800adb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e5a4:	4b02      	ldr	r3, [pc, #8]	; (800e5b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3708      	adds	r7, #8
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	20007514 	.word	0x20007514
 800e5b4:	08012258 	.word	0x08012258

0800e5b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b084      	sub	sp, #16
 800e5bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e5be:	4b0f      	ldr	r3, [pc, #60]	; (800e5fc <Get_SerialNum+0x44>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5c4:	4b0e      	ldr	r3, [pc, #56]	; (800e600 <Get_SerialNum+0x48>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e5ca:	4b0e      	ldr	r3, [pc, #56]	; (800e604 <Get_SerialNum+0x4c>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d009      	beq.n	800e5f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5de:	2208      	movs	r2, #8
 800e5e0:	4909      	ldr	r1, [pc, #36]	; (800e608 <Get_SerialNum+0x50>)
 800e5e2:	68f8      	ldr	r0, [r7, #12]
 800e5e4:	f000 f814 	bl	800e610 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e5e8:	2204      	movs	r2, #4
 800e5ea:	4908      	ldr	r1, [pc, #32]	; (800e60c <Get_SerialNum+0x54>)
 800e5ec:	68b8      	ldr	r0, [r7, #8]
 800e5ee:	f000 f80f 	bl	800e610 <IntToUnicode>
  }
}
 800e5f2:	bf00      	nop
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}
 800e5fa:	bf00      	nop
 800e5fc:	1fff7a10 	.word	0x1fff7a10
 800e600:	1fff7a14 	.word	0x1fff7a14
 800e604:	1fff7a18 	.word	0x1fff7a18
 800e608:	2000019e 	.word	0x2000019e
 800e60c:	200001ae 	.word	0x200001ae

0800e610 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e610:	b480      	push	{r7}
 800e612:	b087      	sub	sp, #28
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	4613      	mov	r3, r2
 800e61c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e61e:	2300      	movs	r3, #0
 800e620:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e622:	2300      	movs	r3, #0
 800e624:	75fb      	strb	r3, [r7, #23]
 800e626:	e027      	b.n	800e678 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	0f1b      	lsrs	r3, r3, #28
 800e62c:	2b09      	cmp	r3, #9
 800e62e:	d80b      	bhi.n	800e648 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	0f1b      	lsrs	r3, r3, #28
 800e634:	b2da      	uxtb	r2, r3
 800e636:	7dfb      	ldrb	r3, [r7, #23]
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	4619      	mov	r1, r3
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	440b      	add	r3, r1
 800e640:	3230      	adds	r2, #48	; 0x30
 800e642:	b2d2      	uxtb	r2, r2
 800e644:	701a      	strb	r2, [r3, #0]
 800e646:	e00a      	b.n	800e65e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	0f1b      	lsrs	r3, r3, #28
 800e64c:	b2da      	uxtb	r2, r3
 800e64e:	7dfb      	ldrb	r3, [r7, #23]
 800e650:	005b      	lsls	r3, r3, #1
 800e652:	4619      	mov	r1, r3
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	440b      	add	r3, r1
 800e658:	3237      	adds	r2, #55	; 0x37
 800e65a:	b2d2      	uxtb	r2, r2
 800e65c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	011b      	lsls	r3, r3, #4
 800e662:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	005b      	lsls	r3, r3, #1
 800e668:	3301      	adds	r3, #1
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	4413      	add	r3, r2
 800e66e:	2200      	movs	r2, #0
 800e670:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e672:	7dfb      	ldrb	r3, [r7, #23]
 800e674:	3301      	adds	r3, #1
 800e676:	75fb      	strb	r3, [r7, #23]
 800e678:	7dfa      	ldrb	r2, [r7, #23]
 800e67a:	79fb      	ldrb	r3, [r7, #7]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d3d3      	bcc.n	800e628 <IntToUnicode+0x18>
  }
}
 800e680:	bf00      	nop
 800e682:	bf00      	nop
 800e684:	371c      	adds	r7, #28
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr
	...

0800e690 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b08a      	sub	sp, #40	; 0x28
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e698:	f107 0314 	add.w	r3, r7, #20
 800e69c:	2200      	movs	r2, #0
 800e69e:	601a      	str	r2, [r3, #0]
 800e6a0:	605a      	str	r2, [r3, #4]
 800e6a2:	609a      	str	r2, [r3, #8]
 800e6a4:	60da      	str	r2, [r3, #12]
 800e6a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6b0:	d13a      	bne.n	800e728 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	613b      	str	r3, [r7, #16]
 800e6b6:	4b1e      	ldr	r3, [pc, #120]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ba:	4a1d      	ldr	r2, [pc, #116]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e6bc:	f043 0301 	orr.w	r3, r3, #1
 800e6c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e6c2:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c6:	f003 0301 	and.w	r3, r3, #1
 800e6ca:	613b      	str	r3, [r7, #16]
 800e6cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e6ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e6d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6dc:	2303      	movs	r3, #3
 800e6de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e6e0:	230a      	movs	r3, #10
 800e6e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6e4:	f107 0314 	add.w	r3, r7, #20
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	4812      	ldr	r0, [pc, #72]	; (800e734 <HAL_PCD_MspInit+0xa4>)
 800e6ec:	f7f5 fc2e 	bl	8003f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e6f0:	4b0f      	ldr	r3, [pc, #60]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f4:	4a0e      	ldr	r2, [pc, #56]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6fa:	6353      	str	r3, [r2, #52]	; 0x34
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	4b0b      	ldr	r3, [pc, #44]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e704:	4a0a      	ldr	r2, [pc, #40]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e70a:	6453      	str	r3, [r2, #68]	; 0x44
 800e70c:	4b08      	ldr	r3, [pc, #32]	; (800e730 <HAL_PCD_MspInit+0xa0>)
 800e70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e714:	60fb      	str	r3, [r7, #12]
 800e716:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e718:	2200      	movs	r2, #0
 800e71a:	2105      	movs	r1, #5
 800e71c:	2043      	movs	r0, #67	; 0x43
 800e71e:	f7f5 f862 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e722:	2043      	movs	r0, #67	; 0x43
 800e724:	f7f5 f87b 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e728:	bf00      	nop
 800e72a:	3728      	adds	r7, #40	; 0x28
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	40023800 	.word	0x40023800
 800e734:	40020000 	.word	0x40020000

0800e738 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	f7fb f9cd 	bl	8009aee <USBD_LL_SetupStage>
}
 800e754:	bf00      	nop
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	460b      	mov	r3, r1
 800e766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e76e:	78fa      	ldrb	r2, [r7, #3]
 800e770:	6879      	ldr	r1, [r7, #4]
 800e772:	4613      	mov	r3, r2
 800e774:	00db      	lsls	r3, r3, #3
 800e776:	4413      	add	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	440b      	add	r3, r1
 800e77c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	78fb      	ldrb	r3, [r7, #3]
 800e784:	4619      	mov	r1, r3
 800e786:	f7fb fa07 	bl	8009b98 <USBD_LL_DataOutStage>
}
 800e78a:	bf00      	nop
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b082      	sub	sp, #8
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	460b      	mov	r3, r1
 800e79c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800e7a4:	78fa      	ldrb	r2, [r7, #3]
 800e7a6:	6879      	ldr	r1, [r7, #4]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	00db      	lsls	r3, r3, #3
 800e7ac:	4413      	add	r3, r2
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	440b      	add	r3, r1
 800e7b2:	3320      	adds	r3, #32
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	78fb      	ldrb	r3, [r7, #3]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	f7fb faa0 	bl	8009cfe <USBD_LL_DataInStage>
}
 800e7be:	bf00      	nop
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b082      	sub	sp, #8
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fb fbda 	bl	8009f8e <USBD_LL_SOF>
}
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	79db      	ldrb	r3, [r3, #7]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d102      	bne.n	800e7fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	73fb      	strb	r3, [r7, #15]
 800e7fa:	e008      	b.n	800e80e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	79db      	ldrb	r3, [r3, #7]
 800e800:	2b02      	cmp	r3, #2
 800e802:	d102      	bne.n	800e80a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e804:	2301      	movs	r3, #1
 800e806:	73fb      	strb	r3, [r7, #15]
 800e808:	e001      	b.n	800e80e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e80a:	f7f4 fb91 	bl	8002f30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e814:	7bfa      	ldrb	r2, [r7, #15]
 800e816:	4611      	mov	r1, r2
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fb fb74 	bl	8009f06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e824:	4618      	mov	r0, r3
 800e826:	f7fb fb1c 	bl	8009e62 <USBD_LL_Reset>
}
 800e82a:	bf00      	nop
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
	...

0800e834 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e842:	4618      	mov	r0, r3
 800e844:	f7fb fb6f 	bl	8009f26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	6812      	ldr	r2, [r2, #0]
 800e856:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e85a:	f043 0301 	orr.w	r3, r3, #1
 800e85e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	7adb      	ldrb	r3, [r3, #11]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d005      	beq.n	800e874 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e868:	4b04      	ldr	r3, [pc, #16]	; (800e87c <HAL_PCD_SuspendCallback+0x48>)
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	4a03      	ldr	r2, [pc, #12]	; (800e87c <HAL_PCD_SuspendCallback+0x48>)
 800e86e:	f043 0306 	orr.w	r3, r3, #6
 800e872:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e874:	bf00      	nop
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	e000ed00 	.word	0xe000ed00

0800e880 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fb fb65 	bl	8009f5e <USBD_LL_Resume>
}
 800e894:	bf00      	nop
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e8ae:	78fa      	ldrb	r2, [r7, #3]
 800e8b0:	4611      	mov	r1, r2
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fb fbbd 	bl	800a032 <USBD_LL_IsoOUTIncomplete>
}
 800e8b8:	bf00      	nop
 800e8ba:	3708      	adds	r7, #8
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e8d2:	78fa      	ldrb	r2, [r7, #3]
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fb fb79 	bl	8009fce <USBD_LL_IsoINIncomplete>
}
 800e8dc:	bf00      	nop
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fb fbcf 	bl	800a096 <USBD_LL_DevConnected>
}
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fb fbcc 	bl	800a0ac <USBD_LL_DevDisconnected>
}
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d13c      	bne.n	800e9a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e92c:	4a20      	ldr	r2, [pc, #128]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a1e      	ldr	r2, [pc, #120]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e938:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e93c:	4b1c      	ldr	r3, [pc, #112]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e93e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e942:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e944:	4b1a      	ldr	r3, [pc, #104]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e946:	2204      	movs	r2, #4
 800e948:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e94a:	4b19      	ldr	r3, [pc, #100]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e94c:	2202      	movs	r2, #2
 800e94e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e950:	4b17      	ldr	r3, [pc, #92]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e952:	2200      	movs	r2, #0
 800e954:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e956:	4b16      	ldr	r3, [pc, #88]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e958:	2202      	movs	r2, #2
 800e95a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e95c:	4b14      	ldr	r3, [pc, #80]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e95e:	2200      	movs	r2, #0
 800e960:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e962:	4b13      	ldr	r3, [pc, #76]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e964:	2200      	movs	r2, #0
 800e966:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e968:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e96e:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e970:	2200      	movs	r2, #0
 800e972:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e974:	4b0e      	ldr	r3, [pc, #56]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e976:	2200      	movs	r2, #0
 800e978:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e97a:	480d      	ldr	r0, [pc, #52]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e97c:	f7f5 fc9b 	bl	80042b6 <HAL_PCD_Init>
 800e980:	4603      	mov	r3, r0
 800e982:	2b00      	cmp	r3, #0
 800e984:	d001      	beq.n	800e98a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e986:	f7f4 fad3 	bl	8002f30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e98a:	2180      	movs	r1, #128	; 0x80
 800e98c:	4808      	ldr	r0, [pc, #32]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e98e:	f7f6 fec6 	bl	800571e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e992:	2240      	movs	r2, #64	; 0x40
 800e994:	2100      	movs	r1, #0
 800e996:	4806      	ldr	r0, [pc, #24]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e998:	f7f6 fe7a 	bl	8005690 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e99c:	2280      	movs	r2, #128	; 0x80
 800e99e:	2101      	movs	r1, #1
 800e9a0:	4803      	ldr	r0, [pc, #12]	; (800e9b0 <USBD_LL_Init+0x94>)
 800e9a2:	f7f6 fe75 	bl	8005690 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	20007714 	.word	0x20007714

0800e9b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7f5 fd82 	bl	80044d4 <HAL_PCD_Start>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9d4:	7bfb      	ldrb	r3, [r7, #15]
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 f942 	bl	800ec60 <USBD_Get_USB_Status>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b084      	sub	sp, #16
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
 800e9f2:	4608      	mov	r0, r1
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	70fb      	strb	r3, [r7, #3]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	70bb      	strb	r3, [r7, #2]
 800ea00:	4613      	mov	r3, r2
 800ea02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ea12:	78bb      	ldrb	r3, [r7, #2]
 800ea14:	883a      	ldrh	r2, [r7, #0]
 800ea16:	78f9      	ldrb	r1, [r7, #3]
 800ea18:	f7f6 fa56 	bl	8004ec8 <HAL_PCD_EP_Open>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea20:	7bfb      	ldrb	r3, [r7, #15]
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 f91c 	bl	800ec60 <USBD_Get_USB_Status>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b084      	sub	sp, #16
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea50:	78fa      	ldrb	r2, [r7, #3]
 800ea52:	4611      	mov	r1, r2
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f6 fa9f 	bl	8004f98 <HAL_PCD_EP_Close>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea5e:	7bfb      	ldrb	r3, [r7, #15]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f000 f8fd 	bl	800ec60 <USBD_Get_USB_Status>
 800ea66:	4603      	mov	r3, r0
 800ea68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea80:	2300      	movs	r3, #0
 800ea82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea84:	2300      	movs	r3, #0
 800ea86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea8e:	78fa      	ldrb	r2, [r7, #3]
 800ea90:	4611      	mov	r1, r2
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7f6 fb57 	bl	8005146 <HAL_PCD_EP_SetStall>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea9c:	7bfb      	ldrb	r3, [r7, #15]
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f000 f8de 	bl	800ec60 <USBD_Get_USB_Status>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaa8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3710      	adds	r7, #16
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b084      	sub	sp, #16
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	460b      	mov	r3, r1
 800eabc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eacc:	78fa      	ldrb	r2, [r7, #3]
 800eace:	4611      	mov	r1, r2
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7f6 fb9b 	bl	800520c <HAL_PCD_EP_ClrStall>
 800ead6:	4603      	mov	r3, r0
 800ead8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	4618      	mov	r0, r3
 800eade:	f000 f8bf 	bl	800ec60 <USBD_Get_USB_Status>
 800eae2:	4603      	mov	r3, r0
 800eae4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eae6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eb04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	da0b      	bge.n	800eb24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eb0c:	78fb      	ldrb	r3, [r7, #3]
 800eb0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb12:	68f9      	ldr	r1, [r7, #12]
 800eb14:	4613      	mov	r3, r2
 800eb16:	00db      	lsls	r3, r3, #3
 800eb18:	4413      	add	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	440b      	add	r3, r1
 800eb1e:	3316      	adds	r3, #22
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	e00b      	b.n	800eb3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eb24:	78fb      	ldrb	r3, [r7, #3]
 800eb26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eb2a:	68f9      	ldr	r1, [r7, #12]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	00db      	lsls	r3, r3, #3
 800eb30:	4413      	add	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	440b      	add	r3, r1
 800eb36:	f203 2356 	addw	r3, r3, #598	; 0x256
 800eb3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	460b      	mov	r3, r1
 800eb52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb54:	2300      	movs	r3, #0
 800eb56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb62:	78fa      	ldrb	r2, [r7, #3]
 800eb64:	4611      	mov	r1, r2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7f6 f98a 	bl	8004e80 <HAL_PCD_SetAddress>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb70:	7bfb      	ldrb	r3, [r7, #15]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f000 f874 	bl	800ec60 <USBD_Get_USB_Status>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b086      	sub	sp, #24
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	607a      	str	r2, [r7, #4]
 800eb90:	603b      	str	r3, [r7, #0]
 800eb92:	460b      	mov	r3, r1
 800eb94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb96:	2300      	movs	r3, #0
 800eb98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eba4:	7af9      	ldrb	r1, [r7, #11]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	f7f6 fa92 	bl	80050d2 <HAL_PCD_EP_Transmit>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebb2:	7dfb      	ldrb	r3, [r7, #23]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 f853 	bl	800ec60 <USBD_Get_USB_Status>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebbe:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	607a      	str	r2, [r7, #4]
 800ebd2:	603b      	str	r3, [r7, #0]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebe6:	7af9      	ldrb	r1, [r7, #11]
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	f7f6 fa1e 	bl	800502c <HAL_PCD_EP_Receive>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebf4:	7dfb      	ldrb	r3, [r7, #23]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 f832 	bl	800ec60 <USBD_Get_USB_Status>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec00:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
 800ec12:	460b      	mov	r3, r1
 800ec14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec1c:	78fa      	ldrb	r2, [r7, #3]
 800ec1e:	4611      	mov	r1, r2
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7f6 fa3e 	bl	80050a2 <HAL_PCD_EP_GetRxCount>
 800ec26:	4603      	mov	r3, r0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ec38:	4b03      	ldr	r3, [pc, #12]	; (800ec48 <USBD_static_malloc+0x18>)
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	20007bf8 	.word	0x20007bf8

0800ec4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]

}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	4603      	mov	r3, r0
 800ec68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	2b03      	cmp	r3, #3
 800ec72:	d817      	bhi.n	800eca4 <USBD_Get_USB_Status+0x44>
 800ec74:	a201      	add	r2, pc, #4	; (adr r2, 800ec7c <USBD_Get_USB_Status+0x1c>)
 800ec76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec7a:	bf00      	nop
 800ec7c:	0800ec8d 	.word	0x0800ec8d
 800ec80:	0800ec93 	.word	0x0800ec93
 800ec84:	0800ec99 	.word	0x0800ec99
 800ec88:	0800ec9f 	.word	0x0800ec9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec90:	e00b      	b.n	800ecaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec92:	2303      	movs	r3, #3
 800ec94:	73fb      	strb	r3, [r7, #15]
    break;
 800ec96:	e008      	b.n	800ecaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec9c:	e005      	b.n	800ecaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec9e:	2303      	movs	r3, #3
 800eca0:	73fb      	strb	r3, [r7, #15]
    break;
 800eca2:	e002      	b.n	800ecaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eca4:	2303      	movs	r3, #3
 800eca6:	73fb      	strb	r3, [r7, #15]
    break;
 800eca8:	bf00      	nop
  }
  return usb_status;
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3714      	adds	r7, #20
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <__cvt>:
 800ecb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecbc:	ec55 4b10 	vmov	r4, r5, d0
 800ecc0:	2d00      	cmp	r5, #0
 800ecc2:	460e      	mov	r6, r1
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	462b      	mov	r3, r5
 800ecc8:	bfbb      	ittet	lt
 800ecca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ecce:	461d      	movlt	r5, r3
 800ecd0:	2300      	movge	r3, #0
 800ecd2:	232d      	movlt	r3, #45	; 0x2d
 800ecd4:	700b      	strb	r3, [r1, #0]
 800ecd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ecdc:	4691      	mov	r9, r2
 800ecde:	f023 0820 	bic.w	r8, r3, #32
 800ece2:	bfbc      	itt	lt
 800ece4:	4622      	movlt	r2, r4
 800ece6:	4614      	movlt	r4, r2
 800ece8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ecec:	d005      	beq.n	800ecfa <__cvt+0x42>
 800ecee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ecf2:	d100      	bne.n	800ecf6 <__cvt+0x3e>
 800ecf4:	3601      	adds	r6, #1
 800ecf6:	2102      	movs	r1, #2
 800ecf8:	e000      	b.n	800ecfc <__cvt+0x44>
 800ecfa:	2103      	movs	r1, #3
 800ecfc:	ab03      	add	r3, sp, #12
 800ecfe:	9301      	str	r3, [sp, #4]
 800ed00:	ab02      	add	r3, sp, #8
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	ec45 4b10 	vmov	d0, r4, r5
 800ed08:	4653      	mov	r3, sl
 800ed0a:	4632      	mov	r2, r6
 800ed0c:	f001 f830 	bl	800fd70 <_dtoa_r>
 800ed10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ed14:	4607      	mov	r7, r0
 800ed16:	d102      	bne.n	800ed1e <__cvt+0x66>
 800ed18:	f019 0f01 	tst.w	r9, #1
 800ed1c:	d022      	beq.n	800ed64 <__cvt+0xac>
 800ed1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed22:	eb07 0906 	add.w	r9, r7, r6
 800ed26:	d110      	bne.n	800ed4a <__cvt+0x92>
 800ed28:	783b      	ldrb	r3, [r7, #0]
 800ed2a:	2b30      	cmp	r3, #48	; 0x30
 800ed2c:	d10a      	bne.n	800ed44 <__cvt+0x8c>
 800ed2e:	2200      	movs	r2, #0
 800ed30:	2300      	movs	r3, #0
 800ed32:	4620      	mov	r0, r4
 800ed34:	4629      	mov	r1, r5
 800ed36:	f7f1 fed7 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed3a:	b918      	cbnz	r0, 800ed44 <__cvt+0x8c>
 800ed3c:	f1c6 0601 	rsb	r6, r6, #1
 800ed40:	f8ca 6000 	str.w	r6, [sl]
 800ed44:	f8da 3000 	ldr.w	r3, [sl]
 800ed48:	4499      	add	r9, r3
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	f7f1 fec9 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed56:	b108      	cbz	r0, 800ed5c <__cvt+0xa4>
 800ed58:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed5c:	2230      	movs	r2, #48	; 0x30
 800ed5e:	9b03      	ldr	r3, [sp, #12]
 800ed60:	454b      	cmp	r3, r9
 800ed62:	d307      	bcc.n	800ed74 <__cvt+0xbc>
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed68:	1bdb      	subs	r3, r3, r7
 800ed6a:	4638      	mov	r0, r7
 800ed6c:	6013      	str	r3, [r2, #0]
 800ed6e:	b004      	add	sp, #16
 800ed70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed74:	1c59      	adds	r1, r3, #1
 800ed76:	9103      	str	r1, [sp, #12]
 800ed78:	701a      	strb	r2, [r3, #0]
 800ed7a:	e7f0      	b.n	800ed5e <__cvt+0xa6>

0800ed7c <__exponent>:
 800ed7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2900      	cmp	r1, #0
 800ed82:	bfb8      	it	lt
 800ed84:	4249      	neglt	r1, r1
 800ed86:	f803 2b02 	strb.w	r2, [r3], #2
 800ed8a:	bfb4      	ite	lt
 800ed8c:	222d      	movlt	r2, #45	; 0x2d
 800ed8e:	222b      	movge	r2, #43	; 0x2b
 800ed90:	2909      	cmp	r1, #9
 800ed92:	7042      	strb	r2, [r0, #1]
 800ed94:	dd2a      	ble.n	800edec <__exponent+0x70>
 800ed96:	f10d 0207 	add.w	r2, sp, #7
 800ed9a:	4617      	mov	r7, r2
 800ed9c:	260a      	movs	r6, #10
 800ed9e:	4694      	mov	ip, r2
 800eda0:	fb91 f5f6 	sdiv	r5, r1, r6
 800eda4:	fb06 1415 	mls	r4, r6, r5, r1
 800eda8:	3430      	adds	r4, #48	; 0x30
 800edaa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800edae:	460c      	mov	r4, r1
 800edb0:	2c63      	cmp	r4, #99	; 0x63
 800edb2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800edb6:	4629      	mov	r1, r5
 800edb8:	dcf1      	bgt.n	800ed9e <__exponent+0x22>
 800edba:	3130      	adds	r1, #48	; 0x30
 800edbc:	f1ac 0402 	sub.w	r4, ip, #2
 800edc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800edc4:	1c41      	adds	r1, r0, #1
 800edc6:	4622      	mov	r2, r4
 800edc8:	42ba      	cmp	r2, r7
 800edca:	d30a      	bcc.n	800ede2 <__exponent+0x66>
 800edcc:	f10d 0209 	add.w	r2, sp, #9
 800edd0:	eba2 020c 	sub.w	r2, r2, ip
 800edd4:	42bc      	cmp	r4, r7
 800edd6:	bf88      	it	hi
 800edd8:	2200      	movhi	r2, #0
 800edda:	4413      	add	r3, r2
 800eddc:	1a18      	subs	r0, r3, r0
 800edde:	b003      	add	sp, #12
 800ede0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ede6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800edea:	e7ed      	b.n	800edc8 <__exponent+0x4c>
 800edec:	2330      	movs	r3, #48	; 0x30
 800edee:	3130      	adds	r1, #48	; 0x30
 800edf0:	7083      	strb	r3, [r0, #2]
 800edf2:	70c1      	strb	r1, [r0, #3]
 800edf4:	1d03      	adds	r3, r0, #4
 800edf6:	e7f1      	b.n	800eddc <__exponent+0x60>

0800edf8 <_printf_float>:
 800edf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edfc:	ed2d 8b02 	vpush	{d8}
 800ee00:	b08d      	sub	sp, #52	; 0x34
 800ee02:	460c      	mov	r4, r1
 800ee04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ee08:	4616      	mov	r6, r2
 800ee0a:	461f      	mov	r7, r3
 800ee0c:	4605      	mov	r5, r0
 800ee0e:	f000 fe4b 	bl	800faa8 <_localeconv_r>
 800ee12:	f8d0 a000 	ldr.w	sl, [r0]
 800ee16:	4650      	mov	r0, sl
 800ee18:	f7f1 fa3a 	bl	8000290 <strlen>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	9305      	str	r3, [sp, #20]
 800ee24:	f8d8 3000 	ldr.w	r3, [r8]
 800ee28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ee2c:	3307      	adds	r3, #7
 800ee2e:	f023 0307 	bic.w	r3, r3, #7
 800ee32:	f103 0208 	add.w	r2, r3, #8
 800ee36:	f8c8 2000 	str.w	r2, [r8]
 800ee3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ee3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ee42:	9307      	str	r3, [sp, #28]
 800ee44:	f8cd 8018 	str.w	r8, [sp, #24]
 800ee48:	ee08 0a10 	vmov	s16, r0
 800ee4c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ee50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee54:	4b9e      	ldr	r3, [pc, #632]	; (800f0d0 <_printf_float+0x2d8>)
 800ee56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee5a:	f7f1 fe77 	bl	8000b4c <__aeabi_dcmpun>
 800ee5e:	bb88      	cbnz	r0, 800eec4 <_printf_float+0xcc>
 800ee60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee64:	4b9a      	ldr	r3, [pc, #616]	; (800f0d0 <_printf_float+0x2d8>)
 800ee66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee6a:	f7f1 fe51 	bl	8000b10 <__aeabi_dcmple>
 800ee6e:	bb48      	cbnz	r0, 800eec4 <_printf_float+0xcc>
 800ee70:	2200      	movs	r2, #0
 800ee72:	2300      	movs	r3, #0
 800ee74:	4640      	mov	r0, r8
 800ee76:	4649      	mov	r1, r9
 800ee78:	f7f1 fe40 	bl	8000afc <__aeabi_dcmplt>
 800ee7c:	b110      	cbz	r0, 800ee84 <_printf_float+0x8c>
 800ee7e:	232d      	movs	r3, #45	; 0x2d
 800ee80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee84:	4a93      	ldr	r2, [pc, #588]	; (800f0d4 <_printf_float+0x2dc>)
 800ee86:	4b94      	ldr	r3, [pc, #592]	; (800f0d8 <_printf_float+0x2e0>)
 800ee88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ee8c:	bf94      	ite	ls
 800ee8e:	4690      	movls	r8, r2
 800ee90:	4698      	movhi	r8, r3
 800ee92:	2303      	movs	r3, #3
 800ee94:	6123      	str	r3, [r4, #16]
 800ee96:	9b05      	ldr	r3, [sp, #20]
 800ee98:	f023 0304 	bic.w	r3, r3, #4
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	f04f 0900 	mov.w	r9, #0
 800eea2:	9700      	str	r7, [sp, #0]
 800eea4:	4633      	mov	r3, r6
 800eea6:	aa0b      	add	r2, sp, #44	; 0x2c
 800eea8:	4621      	mov	r1, r4
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f000 f9da 	bl	800f264 <_printf_common>
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	f040 8090 	bne.w	800efd6 <_printf_float+0x1de>
 800eeb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eeba:	b00d      	add	sp, #52	; 0x34
 800eebc:	ecbd 8b02 	vpop	{d8}
 800eec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec4:	4642      	mov	r2, r8
 800eec6:	464b      	mov	r3, r9
 800eec8:	4640      	mov	r0, r8
 800eeca:	4649      	mov	r1, r9
 800eecc:	f7f1 fe3e 	bl	8000b4c <__aeabi_dcmpun>
 800eed0:	b140      	cbz	r0, 800eee4 <_printf_float+0xec>
 800eed2:	464b      	mov	r3, r9
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	bfbc      	itt	lt
 800eed8:	232d      	movlt	r3, #45	; 0x2d
 800eeda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eede:	4a7f      	ldr	r2, [pc, #508]	; (800f0dc <_printf_float+0x2e4>)
 800eee0:	4b7f      	ldr	r3, [pc, #508]	; (800f0e0 <_printf_float+0x2e8>)
 800eee2:	e7d1      	b.n	800ee88 <_printf_float+0x90>
 800eee4:	6863      	ldr	r3, [r4, #4]
 800eee6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eeea:	9206      	str	r2, [sp, #24]
 800eeec:	1c5a      	adds	r2, r3, #1
 800eeee:	d13f      	bne.n	800ef70 <_printf_float+0x178>
 800eef0:	2306      	movs	r3, #6
 800eef2:	6063      	str	r3, [r4, #4]
 800eef4:	9b05      	ldr	r3, [sp, #20]
 800eef6:	6861      	ldr	r1, [r4, #4]
 800eef8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eefc:	2300      	movs	r3, #0
 800eefe:	9303      	str	r3, [sp, #12]
 800ef00:	ab0a      	add	r3, sp, #40	; 0x28
 800ef02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ef06:	ab09      	add	r3, sp, #36	; 0x24
 800ef08:	ec49 8b10 	vmov	d0, r8, r9
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	6022      	str	r2, [r4, #0]
 800ef10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ef14:	4628      	mov	r0, r5
 800ef16:	f7ff fecf 	bl	800ecb8 <__cvt>
 800ef1a:	9b06      	ldr	r3, [sp, #24]
 800ef1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef1e:	2b47      	cmp	r3, #71	; 0x47
 800ef20:	4680      	mov	r8, r0
 800ef22:	d108      	bne.n	800ef36 <_printf_float+0x13e>
 800ef24:	1cc8      	adds	r0, r1, #3
 800ef26:	db02      	blt.n	800ef2e <_printf_float+0x136>
 800ef28:	6863      	ldr	r3, [r4, #4]
 800ef2a:	4299      	cmp	r1, r3
 800ef2c:	dd41      	ble.n	800efb2 <_printf_float+0x1ba>
 800ef2e:	f1ab 0302 	sub.w	r3, fp, #2
 800ef32:	fa5f fb83 	uxtb.w	fp, r3
 800ef36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef3a:	d820      	bhi.n	800ef7e <_printf_float+0x186>
 800ef3c:	3901      	subs	r1, #1
 800ef3e:	465a      	mov	r2, fp
 800ef40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ef44:	9109      	str	r1, [sp, #36]	; 0x24
 800ef46:	f7ff ff19 	bl	800ed7c <__exponent>
 800ef4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef4c:	1813      	adds	r3, r2, r0
 800ef4e:	2a01      	cmp	r2, #1
 800ef50:	4681      	mov	r9, r0
 800ef52:	6123      	str	r3, [r4, #16]
 800ef54:	dc02      	bgt.n	800ef5c <_printf_float+0x164>
 800ef56:	6822      	ldr	r2, [r4, #0]
 800ef58:	07d2      	lsls	r2, r2, #31
 800ef5a:	d501      	bpl.n	800ef60 <_printf_float+0x168>
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	6123      	str	r3, [r4, #16]
 800ef60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d09c      	beq.n	800eea2 <_printf_float+0xaa>
 800ef68:	232d      	movs	r3, #45	; 0x2d
 800ef6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef6e:	e798      	b.n	800eea2 <_printf_float+0xaa>
 800ef70:	9a06      	ldr	r2, [sp, #24]
 800ef72:	2a47      	cmp	r2, #71	; 0x47
 800ef74:	d1be      	bne.n	800eef4 <_printf_float+0xfc>
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1bc      	bne.n	800eef4 <_printf_float+0xfc>
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e7b9      	b.n	800eef2 <_printf_float+0xfa>
 800ef7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ef82:	d118      	bne.n	800efb6 <_printf_float+0x1be>
 800ef84:	2900      	cmp	r1, #0
 800ef86:	6863      	ldr	r3, [r4, #4]
 800ef88:	dd0b      	ble.n	800efa2 <_printf_float+0x1aa>
 800ef8a:	6121      	str	r1, [r4, #16]
 800ef8c:	b913      	cbnz	r3, 800ef94 <_printf_float+0x19c>
 800ef8e:	6822      	ldr	r2, [r4, #0]
 800ef90:	07d0      	lsls	r0, r2, #31
 800ef92:	d502      	bpl.n	800ef9a <_printf_float+0x1a2>
 800ef94:	3301      	adds	r3, #1
 800ef96:	440b      	add	r3, r1
 800ef98:	6123      	str	r3, [r4, #16]
 800ef9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ef9c:	f04f 0900 	mov.w	r9, #0
 800efa0:	e7de      	b.n	800ef60 <_printf_float+0x168>
 800efa2:	b913      	cbnz	r3, 800efaa <_printf_float+0x1b2>
 800efa4:	6822      	ldr	r2, [r4, #0]
 800efa6:	07d2      	lsls	r2, r2, #31
 800efa8:	d501      	bpl.n	800efae <_printf_float+0x1b6>
 800efaa:	3302      	adds	r3, #2
 800efac:	e7f4      	b.n	800ef98 <_printf_float+0x1a0>
 800efae:	2301      	movs	r3, #1
 800efb0:	e7f2      	b.n	800ef98 <_printf_float+0x1a0>
 800efb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800efb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efb8:	4299      	cmp	r1, r3
 800efba:	db05      	blt.n	800efc8 <_printf_float+0x1d0>
 800efbc:	6823      	ldr	r3, [r4, #0]
 800efbe:	6121      	str	r1, [r4, #16]
 800efc0:	07d8      	lsls	r0, r3, #31
 800efc2:	d5ea      	bpl.n	800ef9a <_printf_float+0x1a2>
 800efc4:	1c4b      	adds	r3, r1, #1
 800efc6:	e7e7      	b.n	800ef98 <_printf_float+0x1a0>
 800efc8:	2900      	cmp	r1, #0
 800efca:	bfd4      	ite	le
 800efcc:	f1c1 0202 	rsble	r2, r1, #2
 800efd0:	2201      	movgt	r2, #1
 800efd2:	4413      	add	r3, r2
 800efd4:	e7e0      	b.n	800ef98 <_printf_float+0x1a0>
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	055a      	lsls	r2, r3, #21
 800efda:	d407      	bmi.n	800efec <_printf_float+0x1f4>
 800efdc:	6923      	ldr	r3, [r4, #16]
 800efde:	4642      	mov	r2, r8
 800efe0:	4631      	mov	r1, r6
 800efe2:	4628      	mov	r0, r5
 800efe4:	47b8      	blx	r7
 800efe6:	3001      	adds	r0, #1
 800efe8:	d12c      	bne.n	800f044 <_printf_float+0x24c>
 800efea:	e764      	b.n	800eeb6 <_printf_float+0xbe>
 800efec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eff0:	f240 80e0 	bls.w	800f1b4 <_printf_float+0x3bc>
 800eff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eff8:	2200      	movs	r2, #0
 800effa:	2300      	movs	r3, #0
 800effc:	f7f1 fd74 	bl	8000ae8 <__aeabi_dcmpeq>
 800f000:	2800      	cmp	r0, #0
 800f002:	d034      	beq.n	800f06e <_printf_float+0x276>
 800f004:	4a37      	ldr	r2, [pc, #220]	; (800f0e4 <_printf_float+0x2ec>)
 800f006:	2301      	movs	r3, #1
 800f008:	4631      	mov	r1, r6
 800f00a:	4628      	mov	r0, r5
 800f00c:	47b8      	blx	r7
 800f00e:	3001      	adds	r0, #1
 800f010:	f43f af51 	beq.w	800eeb6 <_printf_float+0xbe>
 800f014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f018:	429a      	cmp	r2, r3
 800f01a:	db02      	blt.n	800f022 <_printf_float+0x22a>
 800f01c:	6823      	ldr	r3, [r4, #0]
 800f01e:	07d8      	lsls	r0, r3, #31
 800f020:	d510      	bpl.n	800f044 <_printf_float+0x24c>
 800f022:	ee18 3a10 	vmov	r3, s16
 800f026:	4652      	mov	r2, sl
 800f028:	4631      	mov	r1, r6
 800f02a:	4628      	mov	r0, r5
 800f02c:	47b8      	blx	r7
 800f02e:	3001      	adds	r0, #1
 800f030:	f43f af41 	beq.w	800eeb6 <_printf_float+0xbe>
 800f034:	f04f 0800 	mov.w	r8, #0
 800f038:	f104 091a 	add.w	r9, r4, #26
 800f03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f03e:	3b01      	subs	r3, #1
 800f040:	4543      	cmp	r3, r8
 800f042:	dc09      	bgt.n	800f058 <_printf_float+0x260>
 800f044:	6823      	ldr	r3, [r4, #0]
 800f046:	079b      	lsls	r3, r3, #30
 800f048:	f100 8107 	bmi.w	800f25a <_printf_float+0x462>
 800f04c:	68e0      	ldr	r0, [r4, #12]
 800f04e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f050:	4298      	cmp	r0, r3
 800f052:	bfb8      	it	lt
 800f054:	4618      	movlt	r0, r3
 800f056:	e730      	b.n	800eeba <_printf_float+0xc2>
 800f058:	2301      	movs	r3, #1
 800f05a:	464a      	mov	r2, r9
 800f05c:	4631      	mov	r1, r6
 800f05e:	4628      	mov	r0, r5
 800f060:	47b8      	blx	r7
 800f062:	3001      	adds	r0, #1
 800f064:	f43f af27 	beq.w	800eeb6 <_printf_float+0xbe>
 800f068:	f108 0801 	add.w	r8, r8, #1
 800f06c:	e7e6      	b.n	800f03c <_printf_float+0x244>
 800f06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f070:	2b00      	cmp	r3, #0
 800f072:	dc39      	bgt.n	800f0e8 <_printf_float+0x2f0>
 800f074:	4a1b      	ldr	r2, [pc, #108]	; (800f0e4 <_printf_float+0x2ec>)
 800f076:	2301      	movs	r3, #1
 800f078:	4631      	mov	r1, r6
 800f07a:	4628      	mov	r0, r5
 800f07c:	47b8      	blx	r7
 800f07e:	3001      	adds	r0, #1
 800f080:	f43f af19 	beq.w	800eeb6 <_printf_float+0xbe>
 800f084:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f088:	4313      	orrs	r3, r2
 800f08a:	d102      	bne.n	800f092 <_printf_float+0x29a>
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	07d9      	lsls	r1, r3, #31
 800f090:	d5d8      	bpl.n	800f044 <_printf_float+0x24c>
 800f092:	ee18 3a10 	vmov	r3, s16
 800f096:	4652      	mov	r2, sl
 800f098:	4631      	mov	r1, r6
 800f09a:	4628      	mov	r0, r5
 800f09c:	47b8      	blx	r7
 800f09e:	3001      	adds	r0, #1
 800f0a0:	f43f af09 	beq.w	800eeb6 <_printf_float+0xbe>
 800f0a4:	f04f 0900 	mov.w	r9, #0
 800f0a8:	f104 0a1a 	add.w	sl, r4, #26
 800f0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ae:	425b      	negs	r3, r3
 800f0b0:	454b      	cmp	r3, r9
 800f0b2:	dc01      	bgt.n	800f0b8 <_printf_float+0x2c0>
 800f0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0b6:	e792      	b.n	800efde <_printf_float+0x1e6>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	4652      	mov	r2, sl
 800f0bc:	4631      	mov	r1, r6
 800f0be:	4628      	mov	r0, r5
 800f0c0:	47b8      	blx	r7
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	f43f aef7 	beq.w	800eeb6 <_printf_float+0xbe>
 800f0c8:	f109 0901 	add.w	r9, r9, #1
 800f0cc:	e7ee      	b.n	800f0ac <_printf_float+0x2b4>
 800f0ce:	bf00      	nop
 800f0d0:	7fefffff 	.word	0x7fefffff
 800f0d4:	08012399 	.word	0x08012399
 800f0d8:	0801239d 	.word	0x0801239d
 800f0dc:	080123a1 	.word	0x080123a1
 800f0e0:	080123a5 	.word	0x080123a5
 800f0e4:	080123a9 	.word	0x080123a9
 800f0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	bfa8      	it	ge
 800f0f0:	461a      	movge	r2, r3
 800f0f2:	2a00      	cmp	r2, #0
 800f0f4:	4691      	mov	r9, r2
 800f0f6:	dc37      	bgt.n	800f168 <_printf_float+0x370>
 800f0f8:	f04f 0b00 	mov.w	fp, #0
 800f0fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f100:	f104 021a 	add.w	r2, r4, #26
 800f104:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f106:	9305      	str	r3, [sp, #20]
 800f108:	eba3 0309 	sub.w	r3, r3, r9
 800f10c:	455b      	cmp	r3, fp
 800f10e:	dc33      	bgt.n	800f178 <_printf_float+0x380>
 800f110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f114:	429a      	cmp	r2, r3
 800f116:	db3b      	blt.n	800f190 <_printf_float+0x398>
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	07da      	lsls	r2, r3, #31
 800f11c:	d438      	bmi.n	800f190 <_printf_float+0x398>
 800f11e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f122:	eba2 0903 	sub.w	r9, r2, r3
 800f126:	9b05      	ldr	r3, [sp, #20]
 800f128:	1ad2      	subs	r2, r2, r3
 800f12a:	4591      	cmp	r9, r2
 800f12c:	bfa8      	it	ge
 800f12e:	4691      	movge	r9, r2
 800f130:	f1b9 0f00 	cmp.w	r9, #0
 800f134:	dc35      	bgt.n	800f1a2 <_printf_float+0x3aa>
 800f136:	f04f 0800 	mov.w	r8, #0
 800f13a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f13e:	f104 0a1a 	add.w	sl, r4, #26
 800f142:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f146:	1a9b      	subs	r3, r3, r2
 800f148:	eba3 0309 	sub.w	r3, r3, r9
 800f14c:	4543      	cmp	r3, r8
 800f14e:	f77f af79 	ble.w	800f044 <_printf_float+0x24c>
 800f152:	2301      	movs	r3, #1
 800f154:	4652      	mov	r2, sl
 800f156:	4631      	mov	r1, r6
 800f158:	4628      	mov	r0, r5
 800f15a:	47b8      	blx	r7
 800f15c:	3001      	adds	r0, #1
 800f15e:	f43f aeaa 	beq.w	800eeb6 <_printf_float+0xbe>
 800f162:	f108 0801 	add.w	r8, r8, #1
 800f166:	e7ec      	b.n	800f142 <_printf_float+0x34a>
 800f168:	4613      	mov	r3, r2
 800f16a:	4631      	mov	r1, r6
 800f16c:	4642      	mov	r2, r8
 800f16e:	4628      	mov	r0, r5
 800f170:	47b8      	blx	r7
 800f172:	3001      	adds	r0, #1
 800f174:	d1c0      	bne.n	800f0f8 <_printf_float+0x300>
 800f176:	e69e      	b.n	800eeb6 <_printf_float+0xbe>
 800f178:	2301      	movs	r3, #1
 800f17a:	4631      	mov	r1, r6
 800f17c:	4628      	mov	r0, r5
 800f17e:	9205      	str	r2, [sp, #20]
 800f180:	47b8      	blx	r7
 800f182:	3001      	adds	r0, #1
 800f184:	f43f ae97 	beq.w	800eeb6 <_printf_float+0xbe>
 800f188:	9a05      	ldr	r2, [sp, #20]
 800f18a:	f10b 0b01 	add.w	fp, fp, #1
 800f18e:	e7b9      	b.n	800f104 <_printf_float+0x30c>
 800f190:	ee18 3a10 	vmov	r3, s16
 800f194:	4652      	mov	r2, sl
 800f196:	4631      	mov	r1, r6
 800f198:	4628      	mov	r0, r5
 800f19a:	47b8      	blx	r7
 800f19c:	3001      	adds	r0, #1
 800f19e:	d1be      	bne.n	800f11e <_printf_float+0x326>
 800f1a0:	e689      	b.n	800eeb6 <_printf_float+0xbe>
 800f1a2:	9a05      	ldr	r2, [sp, #20]
 800f1a4:	464b      	mov	r3, r9
 800f1a6:	4442      	add	r2, r8
 800f1a8:	4631      	mov	r1, r6
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	47b8      	blx	r7
 800f1ae:	3001      	adds	r0, #1
 800f1b0:	d1c1      	bne.n	800f136 <_printf_float+0x33e>
 800f1b2:	e680      	b.n	800eeb6 <_printf_float+0xbe>
 800f1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1b6:	2a01      	cmp	r2, #1
 800f1b8:	dc01      	bgt.n	800f1be <_printf_float+0x3c6>
 800f1ba:	07db      	lsls	r3, r3, #31
 800f1bc:	d53a      	bpl.n	800f234 <_printf_float+0x43c>
 800f1be:	2301      	movs	r3, #1
 800f1c0:	4642      	mov	r2, r8
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	4628      	mov	r0, r5
 800f1c6:	47b8      	blx	r7
 800f1c8:	3001      	adds	r0, #1
 800f1ca:	f43f ae74 	beq.w	800eeb6 <_printf_float+0xbe>
 800f1ce:	ee18 3a10 	vmov	r3, s16
 800f1d2:	4652      	mov	r2, sl
 800f1d4:	4631      	mov	r1, r6
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	47b8      	blx	r7
 800f1da:	3001      	adds	r0, #1
 800f1dc:	f43f ae6b 	beq.w	800eeb6 <_printf_float+0xbe>
 800f1e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f1ec:	f7f1 fc7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1f0:	b9d8      	cbnz	r0, 800f22a <_printf_float+0x432>
 800f1f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f1f6:	f108 0201 	add.w	r2, r8, #1
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	47b8      	blx	r7
 800f200:	3001      	adds	r0, #1
 800f202:	d10e      	bne.n	800f222 <_printf_float+0x42a>
 800f204:	e657      	b.n	800eeb6 <_printf_float+0xbe>
 800f206:	2301      	movs	r3, #1
 800f208:	4652      	mov	r2, sl
 800f20a:	4631      	mov	r1, r6
 800f20c:	4628      	mov	r0, r5
 800f20e:	47b8      	blx	r7
 800f210:	3001      	adds	r0, #1
 800f212:	f43f ae50 	beq.w	800eeb6 <_printf_float+0xbe>
 800f216:	f108 0801 	add.w	r8, r8, #1
 800f21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f21c:	3b01      	subs	r3, #1
 800f21e:	4543      	cmp	r3, r8
 800f220:	dcf1      	bgt.n	800f206 <_printf_float+0x40e>
 800f222:	464b      	mov	r3, r9
 800f224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f228:	e6da      	b.n	800efe0 <_printf_float+0x1e8>
 800f22a:	f04f 0800 	mov.w	r8, #0
 800f22e:	f104 0a1a 	add.w	sl, r4, #26
 800f232:	e7f2      	b.n	800f21a <_printf_float+0x422>
 800f234:	2301      	movs	r3, #1
 800f236:	4642      	mov	r2, r8
 800f238:	e7df      	b.n	800f1fa <_printf_float+0x402>
 800f23a:	2301      	movs	r3, #1
 800f23c:	464a      	mov	r2, r9
 800f23e:	4631      	mov	r1, r6
 800f240:	4628      	mov	r0, r5
 800f242:	47b8      	blx	r7
 800f244:	3001      	adds	r0, #1
 800f246:	f43f ae36 	beq.w	800eeb6 <_printf_float+0xbe>
 800f24a:	f108 0801 	add.w	r8, r8, #1
 800f24e:	68e3      	ldr	r3, [r4, #12]
 800f250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f252:	1a5b      	subs	r3, r3, r1
 800f254:	4543      	cmp	r3, r8
 800f256:	dcf0      	bgt.n	800f23a <_printf_float+0x442>
 800f258:	e6f8      	b.n	800f04c <_printf_float+0x254>
 800f25a:	f04f 0800 	mov.w	r8, #0
 800f25e:	f104 0919 	add.w	r9, r4, #25
 800f262:	e7f4      	b.n	800f24e <_printf_float+0x456>

0800f264 <_printf_common>:
 800f264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f268:	4616      	mov	r6, r2
 800f26a:	4699      	mov	r9, r3
 800f26c:	688a      	ldr	r2, [r1, #8]
 800f26e:	690b      	ldr	r3, [r1, #16]
 800f270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f274:	4293      	cmp	r3, r2
 800f276:	bfb8      	it	lt
 800f278:	4613      	movlt	r3, r2
 800f27a:	6033      	str	r3, [r6, #0]
 800f27c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f280:	4607      	mov	r7, r0
 800f282:	460c      	mov	r4, r1
 800f284:	b10a      	cbz	r2, 800f28a <_printf_common+0x26>
 800f286:	3301      	adds	r3, #1
 800f288:	6033      	str	r3, [r6, #0]
 800f28a:	6823      	ldr	r3, [r4, #0]
 800f28c:	0699      	lsls	r1, r3, #26
 800f28e:	bf42      	ittt	mi
 800f290:	6833      	ldrmi	r3, [r6, #0]
 800f292:	3302      	addmi	r3, #2
 800f294:	6033      	strmi	r3, [r6, #0]
 800f296:	6825      	ldr	r5, [r4, #0]
 800f298:	f015 0506 	ands.w	r5, r5, #6
 800f29c:	d106      	bne.n	800f2ac <_printf_common+0x48>
 800f29e:	f104 0a19 	add.w	sl, r4, #25
 800f2a2:	68e3      	ldr	r3, [r4, #12]
 800f2a4:	6832      	ldr	r2, [r6, #0]
 800f2a6:	1a9b      	subs	r3, r3, r2
 800f2a8:	42ab      	cmp	r3, r5
 800f2aa:	dc26      	bgt.n	800f2fa <_printf_common+0x96>
 800f2ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f2b0:	1e13      	subs	r3, r2, #0
 800f2b2:	6822      	ldr	r2, [r4, #0]
 800f2b4:	bf18      	it	ne
 800f2b6:	2301      	movne	r3, #1
 800f2b8:	0692      	lsls	r2, r2, #26
 800f2ba:	d42b      	bmi.n	800f314 <_printf_common+0xb0>
 800f2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2c0:	4649      	mov	r1, r9
 800f2c2:	4638      	mov	r0, r7
 800f2c4:	47c0      	blx	r8
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	d01e      	beq.n	800f308 <_printf_common+0xa4>
 800f2ca:	6823      	ldr	r3, [r4, #0]
 800f2cc:	6922      	ldr	r2, [r4, #16]
 800f2ce:	f003 0306 	and.w	r3, r3, #6
 800f2d2:	2b04      	cmp	r3, #4
 800f2d4:	bf02      	ittt	eq
 800f2d6:	68e5      	ldreq	r5, [r4, #12]
 800f2d8:	6833      	ldreq	r3, [r6, #0]
 800f2da:	1aed      	subeq	r5, r5, r3
 800f2dc:	68a3      	ldr	r3, [r4, #8]
 800f2de:	bf0c      	ite	eq
 800f2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2e4:	2500      	movne	r5, #0
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	bfc4      	itt	gt
 800f2ea:	1a9b      	subgt	r3, r3, r2
 800f2ec:	18ed      	addgt	r5, r5, r3
 800f2ee:	2600      	movs	r6, #0
 800f2f0:	341a      	adds	r4, #26
 800f2f2:	42b5      	cmp	r5, r6
 800f2f4:	d11a      	bne.n	800f32c <_printf_common+0xc8>
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	e008      	b.n	800f30c <_printf_common+0xa8>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	4652      	mov	r2, sl
 800f2fe:	4649      	mov	r1, r9
 800f300:	4638      	mov	r0, r7
 800f302:	47c0      	blx	r8
 800f304:	3001      	adds	r0, #1
 800f306:	d103      	bne.n	800f310 <_printf_common+0xac>
 800f308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f310:	3501      	adds	r5, #1
 800f312:	e7c6      	b.n	800f2a2 <_printf_common+0x3e>
 800f314:	18e1      	adds	r1, r4, r3
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	2030      	movs	r0, #48	; 0x30
 800f31a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f31e:	4422      	add	r2, r4
 800f320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f328:	3302      	adds	r3, #2
 800f32a:	e7c7      	b.n	800f2bc <_printf_common+0x58>
 800f32c:	2301      	movs	r3, #1
 800f32e:	4622      	mov	r2, r4
 800f330:	4649      	mov	r1, r9
 800f332:	4638      	mov	r0, r7
 800f334:	47c0      	blx	r8
 800f336:	3001      	adds	r0, #1
 800f338:	d0e6      	beq.n	800f308 <_printf_common+0xa4>
 800f33a:	3601      	adds	r6, #1
 800f33c:	e7d9      	b.n	800f2f2 <_printf_common+0x8e>
	...

0800f340 <_printf_i>:
 800f340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f344:	7e0f      	ldrb	r7, [r1, #24]
 800f346:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f348:	2f78      	cmp	r7, #120	; 0x78
 800f34a:	4691      	mov	r9, r2
 800f34c:	4680      	mov	r8, r0
 800f34e:	460c      	mov	r4, r1
 800f350:	469a      	mov	sl, r3
 800f352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f356:	d807      	bhi.n	800f368 <_printf_i+0x28>
 800f358:	2f62      	cmp	r7, #98	; 0x62
 800f35a:	d80a      	bhi.n	800f372 <_printf_i+0x32>
 800f35c:	2f00      	cmp	r7, #0
 800f35e:	f000 80d4 	beq.w	800f50a <_printf_i+0x1ca>
 800f362:	2f58      	cmp	r7, #88	; 0x58
 800f364:	f000 80c0 	beq.w	800f4e8 <_printf_i+0x1a8>
 800f368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f36c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f370:	e03a      	b.n	800f3e8 <_printf_i+0xa8>
 800f372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f376:	2b15      	cmp	r3, #21
 800f378:	d8f6      	bhi.n	800f368 <_printf_i+0x28>
 800f37a:	a101      	add	r1, pc, #4	; (adr r1, 800f380 <_printf_i+0x40>)
 800f37c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f380:	0800f3d9 	.word	0x0800f3d9
 800f384:	0800f3ed 	.word	0x0800f3ed
 800f388:	0800f369 	.word	0x0800f369
 800f38c:	0800f369 	.word	0x0800f369
 800f390:	0800f369 	.word	0x0800f369
 800f394:	0800f369 	.word	0x0800f369
 800f398:	0800f3ed 	.word	0x0800f3ed
 800f39c:	0800f369 	.word	0x0800f369
 800f3a0:	0800f369 	.word	0x0800f369
 800f3a4:	0800f369 	.word	0x0800f369
 800f3a8:	0800f369 	.word	0x0800f369
 800f3ac:	0800f4f1 	.word	0x0800f4f1
 800f3b0:	0800f419 	.word	0x0800f419
 800f3b4:	0800f4ab 	.word	0x0800f4ab
 800f3b8:	0800f369 	.word	0x0800f369
 800f3bc:	0800f369 	.word	0x0800f369
 800f3c0:	0800f513 	.word	0x0800f513
 800f3c4:	0800f369 	.word	0x0800f369
 800f3c8:	0800f419 	.word	0x0800f419
 800f3cc:	0800f369 	.word	0x0800f369
 800f3d0:	0800f369 	.word	0x0800f369
 800f3d4:	0800f4b3 	.word	0x0800f4b3
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	1d1a      	adds	r2, r3, #4
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	602a      	str	r2, [r5, #0]
 800f3e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	e09f      	b.n	800f52c <_printf_i+0x1ec>
 800f3ec:	6820      	ldr	r0, [r4, #0]
 800f3ee:	682b      	ldr	r3, [r5, #0]
 800f3f0:	0607      	lsls	r7, r0, #24
 800f3f2:	f103 0104 	add.w	r1, r3, #4
 800f3f6:	6029      	str	r1, [r5, #0]
 800f3f8:	d501      	bpl.n	800f3fe <_printf_i+0xbe>
 800f3fa:	681e      	ldr	r6, [r3, #0]
 800f3fc:	e003      	b.n	800f406 <_printf_i+0xc6>
 800f3fe:	0646      	lsls	r6, r0, #25
 800f400:	d5fb      	bpl.n	800f3fa <_printf_i+0xba>
 800f402:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f406:	2e00      	cmp	r6, #0
 800f408:	da03      	bge.n	800f412 <_printf_i+0xd2>
 800f40a:	232d      	movs	r3, #45	; 0x2d
 800f40c:	4276      	negs	r6, r6
 800f40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f412:	485a      	ldr	r0, [pc, #360]	; (800f57c <_printf_i+0x23c>)
 800f414:	230a      	movs	r3, #10
 800f416:	e012      	b.n	800f43e <_printf_i+0xfe>
 800f418:	682b      	ldr	r3, [r5, #0]
 800f41a:	6820      	ldr	r0, [r4, #0]
 800f41c:	1d19      	adds	r1, r3, #4
 800f41e:	6029      	str	r1, [r5, #0]
 800f420:	0605      	lsls	r5, r0, #24
 800f422:	d501      	bpl.n	800f428 <_printf_i+0xe8>
 800f424:	681e      	ldr	r6, [r3, #0]
 800f426:	e002      	b.n	800f42e <_printf_i+0xee>
 800f428:	0641      	lsls	r1, r0, #25
 800f42a:	d5fb      	bpl.n	800f424 <_printf_i+0xe4>
 800f42c:	881e      	ldrh	r6, [r3, #0]
 800f42e:	4853      	ldr	r0, [pc, #332]	; (800f57c <_printf_i+0x23c>)
 800f430:	2f6f      	cmp	r7, #111	; 0x6f
 800f432:	bf0c      	ite	eq
 800f434:	2308      	moveq	r3, #8
 800f436:	230a      	movne	r3, #10
 800f438:	2100      	movs	r1, #0
 800f43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f43e:	6865      	ldr	r5, [r4, #4]
 800f440:	60a5      	str	r5, [r4, #8]
 800f442:	2d00      	cmp	r5, #0
 800f444:	bfa2      	ittt	ge
 800f446:	6821      	ldrge	r1, [r4, #0]
 800f448:	f021 0104 	bicge.w	r1, r1, #4
 800f44c:	6021      	strge	r1, [r4, #0]
 800f44e:	b90e      	cbnz	r6, 800f454 <_printf_i+0x114>
 800f450:	2d00      	cmp	r5, #0
 800f452:	d04b      	beq.n	800f4ec <_printf_i+0x1ac>
 800f454:	4615      	mov	r5, r2
 800f456:	fbb6 f1f3 	udiv	r1, r6, r3
 800f45a:	fb03 6711 	mls	r7, r3, r1, r6
 800f45e:	5dc7      	ldrb	r7, [r0, r7]
 800f460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f464:	4637      	mov	r7, r6
 800f466:	42bb      	cmp	r3, r7
 800f468:	460e      	mov	r6, r1
 800f46a:	d9f4      	bls.n	800f456 <_printf_i+0x116>
 800f46c:	2b08      	cmp	r3, #8
 800f46e:	d10b      	bne.n	800f488 <_printf_i+0x148>
 800f470:	6823      	ldr	r3, [r4, #0]
 800f472:	07de      	lsls	r6, r3, #31
 800f474:	d508      	bpl.n	800f488 <_printf_i+0x148>
 800f476:	6923      	ldr	r3, [r4, #16]
 800f478:	6861      	ldr	r1, [r4, #4]
 800f47a:	4299      	cmp	r1, r3
 800f47c:	bfde      	ittt	le
 800f47e:	2330      	movle	r3, #48	; 0x30
 800f480:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f484:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f488:	1b52      	subs	r2, r2, r5
 800f48a:	6122      	str	r2, [r4, #16]
 800f48c:	f8cd a000 	str.w	sl, [sp]
 800f490:	464b      	mov	r3, r9
 800f492:	aa03      	add	r2, sp, #12
 800f494:	4621      	mov	r1, r4
 800f496:	4640      	mov	r0, r8
 800f498:	f7ff fee4 	bl	800f264 <_printf_common>
 800f49c:	3001      	adds	r0, #1
 800f49e:	d14a      	bne.n	800f536 <_printf_i+0x1f6>
 800f4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4a4:	b004      	add	sp, #16
 800f4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4aa:	6823      	ldr	r3, [r4, #0]
 800f4ac:	f043 0320 	orr.w	r3, r3, #32
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	4833      	ldr	r0, [pc, #204]	; (800f580 <_printf_i+0x240>)
 800f4b4:	2778      	movs	r7, #120	; 0x78
 800f4b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	6829      	ldr	r1, [r5, #0]
 800f4be:	061f      	lsls	r7, r3, #24
 800f4c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4c4:	d402      	bmi.n	800f4cc <_printf_i+0x18c>
 800f4c6:	065f      	lsls	r7, r3, #25
 800f4c8:	bf48      	it	mi
 800f4ca:	b2b6      	uxthmi	r6, r6
 800f4cc:	07df      	lsls	r7, r3, #31
 800f4ce:	bf48      	it	mi
 800f4d0:	f043 0320 	orrmi.w	r3, r3, #32
 800f4d4:	6029      	str	r1, [r5, #0]
 800f4d6:	bf48      	it	mi
 800f4d8:	6023      	strmi	r3, [r4, #0]
 800f4da:	b91e      	cbnz	r6, 800f4e4 <_printf_i+0x1a4>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	f023 0320 	bic.w	r3, r3, #32
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	2310      	movs	r3, #16
 800f4e6:	e7a7      	b.n	800f438 <_printf_i+0xf8>
 800f4e8:	4824      	ldr	r0, [pc, #144]	; (800f57c <_printf_i+0x23c>)
 800f4ea:	e7e4      	b.n	800f4b6 <_printf_i+0x176>
 800f4ec:	4615      	mov	r5, r2
 800f4ee:	e7bd      	b.n	800f46c <_printf_i+0x12c>
 800f4f0:	682b      	ldr	r3, [r5, #0]
 800f4f2:	6826      	ldr	r6, [r4, #0]
 800f4f4:	6961      	ldr	r1, [r4, #20]
 800f4f6:	1d18      	adds	r0, r3, #4
 800f4f8:	6028      	str	r0, [r5, #0]
 800f4fa:	0635      	lsls	r5, r6, #24
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	d501      	bpl.n	800f504 <_printf_i+0x1c4>
 800f500:	6019      	str	r1, [r3, #0]
 800f502:	e002      	b.n	800f50a <_printf_i+0x1ca>
 800f504:	0670      	lsls	r0, r6, #25
 800f506:	d5fb      	bpl.n	800f500 <_printf_i+0x1c0>
 800f508:	8019      	strh	r1, [r3, #0]
 800f50a:	2300      	movs	r3, #0
 800f50c:	6123      	str	r3, [r4, #16]
 800f50e:	4615      	mov	r5, r2
 800f510:	e7bc      	b.n	800f48c <_printf_i+0x14c>
 800f512:	682b      	ldr	r3, [r5, #0]
 800f514:	1d1a      	adds	r2, r3, #4
 800f516:	602a      	str	r2, [r5, #0]
 800f518:	681d      	ldr	r5, [r3, #0]
 800f51a:	6862      	ldr	r2, [r4, #4]
 800f51c:	2100      	movs	r1, #0
 800f51e:	4628      	mov	r0, r5
 800f520:	f7f0 fe66 	bl	80001f0 <memchr>
 800f524:	b108      	cbz	r0, 800f52a <_printf_i+0x1ea>
 800f526:	1b40      	subs	r0, r0, r5
 800f528:	6060      	str	r0, [r4, #4]
 800f52a:	6863      	ldr	r3, [r4, #4]
 800f52c:	6123      	str	r3, [r4, #16]
 800f52e:	2300      	movs	r3, #0
 800f530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f534:	e7aa      	b.n	800f48c <_printf_i+0x14c>
 800f536:	6923      	ldr	r3, [r4, #16]
 800f538:	462a      	mov	r2, r5
 800f53a:	4649      	mov	r1, r9
 800f53c:	4640      	mov	r0, r8
 800f53e:	47d0      	blx	sl
 800f540:	3001      	adds	r0, #1
 800f542:	d0ad      	beq.n	800f4a0 <_printf_i+0x160>
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	079b      	lsls	r3, r3, #30
 800f548:	d413      	bmi.n	800f572 <_printf_i+0x232>
 800f54a:	68e0      	ldr	r0, [r4, #12]
 800f54c:	9b03      	ldr	r3, [sp, #12]
 800f54e:	4298      	cmp	r0, r3
 800f550:	bfb8      	it	lt
 800f552:	4618      	movlt	r0, r3
 800f554:	e7a6      	b.n	800f4a4 <_printf_i+0x164>
 800f556:	2301      	movs	r3, #1
 800f558:	4632      	mov	r2, r6
 800f55a:	4649      	mov	r1, r9
 800f55c:	4640      	mov	r0, r8
 800f55e:	47d0      	blx	sl
 800f560:	3001      	adds	r0, #1
 800f562:	d09d      	beq.n	800f4a0 <_printf_i+0x160>
 800f564:	3501      	adds	r5, #1
 800f566:	68e3      	ldr	r3, [r4, #12]
 800f568:	9903      	ldr	r1, [sp, #12]
 800f56a:	1a5b      	subs	r3, r3, r1
 800f56c:	42ab      	cmp	r3, r5
 800f56e:	dcf2      	bgt.n	800f556 <_printf_i+0x216>
 800f570:	e7eb      	b.n	800f54a <_printf_i+0x20a>
 800f572:	2500      	movs	r5, #0
 800f574:	f104 0619 	add.w	r6, r4, #25
 800f578:	e7f5      	b.n	800f566 <_printf_i+0x226>
 800f57a:	bf00      	nop
 800f57c:	080123ab 	.word	0x080123ab
 800f580:	080123bc 	.word	0x080123bc

0800f584 <__sflush_r>:
 800f584:	898a      	ldrh	r2, [r1, #12]
 800f586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f58a:	4605      	mov	r5, r0
 800f58c:	0710      	lsls	r0, r2, #28
 800f58e:	460c      	mov	r4, r1
 800f590:	d458      	bmi.n	800f644 <__sflush_r+0xc0>
 800f592:	684b      	ldr	r3, [r1, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	dc05      	bgt.n	800f5a4 <__sflush_r+0x20>
 800f598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	dc02      	bgt.n	800f5a4 <__sflush_r+0x20>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5a6:	2e00      	cmp	r6, #0
 800f5a8:	d0f9      	beq.n	800f59e <__sflush_r+0x1a>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f5b0:	682f      	ldr	r7, [r5, #0]
 800f5b2:	6a21      	ldr	r1, [r4, #32]
 800f5b4:	602b      	str	r3, [r5, #0]
 800f5b6:	d032      	beq.n	800f61e <__sflush_r+0x9a>
 800f5b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5ba:	89a3      	ldrh	r3, [r4, #12]
 800f5bc:	075a      	lsls	r2, r3, #29
 800f5be:	d505      	bpl.n	800f5cc <__sflush_r+0x48>
 800f5c0:	6863      	ldr	r3, [r4, #4]
 800f5c2:	1ac0      	subs	r0, r0, r3
 800f5c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5c6:	b10b      	cbz	r3, 800f5cc <__sflush_r+0x48>
 800f5c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5ca:	1ac0      	subs	r0, r0, r3
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5d2:	6a21      	ldr	r1, [r4, #32]
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b0      	blx	r6
 800f5d8:	1c43      	adds	r3, r0, #1
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	d106      	bne.n	800f5ec <__sflush_r+0x68>
 800f5de:	6829      	ldr	r1, [r5, #0]
 800f5e0:	291d      	cmp	r1, #29
 800f5e2:	d82b      	bhi.n	800f63c <__sflush_r+0xb8>
 800f5e4:	4a29      	ldr	r2, [pc, #164]	; (800f68c <__sflush_r+0x108>)
 800f5e6:	410a      	asrs	r2, r1
 800f5e8:	07d6      	lsls	r6, r2, #31
 800f5ea:	d427      	bmi.n	800f63c <__sflush_r+0xb8>
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	6062      	str	r2, [r4, #4]
 800f5f0:	04d9      	lsls	r1, r3, #19
 800f5f2:	6922      	ldr	r2, [r4, #16]
 800f5f4:	6022      	str	r2, [r4, #0]
 800f5f6:	d504      	bpl.n	800f602 <__sflush_r+0x7e>
 800f5f8:	1c42      	adds	r2, r0, #1
 800f5fa:	d101      	bne.n	800f600 <__sflush_r+0x7c>
 800f5fc:	682b      	ldr	r3, [r5, #0]
 800f5fe:	b903      	cbnz	r3, 800f602 <__sflush_r+0x7e>
 800f600:	6560      	str	r0, [r4, #84]	; 0x54
 800f602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f604:	602f      	str	r7, [r5, #0]
 800f606:	2900      	cmp	r1, #0
 800f608:	d0c9      	beq.n	800f59e <__sflush_r+0x1a>
 800f60a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f60e:	4299      	cmp	r1, r3
 800f610:	d002      	beq.n	800f618 <__sflush_r+0x94>
 800f612:	4628      	mov	r0, r5
 800f614:	f001 f99e 	bl	8010954 <_free_r>
 800f618:	2000      	movs	r0, #0
 800f61a:	6360      	str	r0, [r4, #52]	; 0x34
 800f61c:	e7c0      	b.n	800f5a0 <__sflush_r+0x1c>
 800f61e:	2301      	movs	r3, #1
 800f620:	4628      	mov	r0, r5
 800f622:	47b0      	blx	r6
 800f624:	1c41      	adds	r1, r0, #1
 800f626:	d1c8      	bne.n	800f5ba <__sflush_r+0x36>
 800f628:	682b      	ldr	r3, [r5, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d0c5      	beq.n	800f5ba <__sflush_r+0x36>
 800f62e:	2b1d      	cmp	r3, #29
 800f630:	d001      	beq.n	800f636 <__sflush_r+0xb2>
 800f632:	2b16      	cmp	r3, #22
 800f634:	d101      	bne.n	800f63a <__sflush_r+0xb6>
 800f636:	602f      	str	r7, [r5, #0]
 800f638:	e7b1      	b.n	800f59e <__sflush_r+0x1a>
 800f63a:	89a3      	ldrh	r3, [r4, #12]
 800f63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f640:	81a3      	strh	r3, [r4, #12]
 800f642:	e7ad      	b.n	800f5a0 <__sflush_r+0x1c>
 800f644:	690f      	ldr	r7, [r1, #16]
 800f646:	2f00      	cmp	r7, #0
 800f648:	d0a9      	beq.n	800f59e <__sflush_r+0x1a>
 800f64a:	0793      	lsls	r3, r2, #30
 800f64c:	680e      	ldr	r6, [r1, #0]
 800f64e:	bf08      	it	eq
 800f650:	694b      	ldreq	r3, [r1, #20]
 800f652:	600f      	str	r7, [r1, #0]
 800f654:	bf18      	it	ne
 800f656:	2300      	movne	r3, #0
 800f658:	eba6 0807 	sub.w	r8, r6, r7
 800f65c:	608b      	str	r3, [r1, #8]
 800f65e:	f1b8 0f00 	cmp.w	r8, #0
 800f662:	dd9c      	ble.n	800f59e <__sflush_r+0x1a>
 800f664:	6a21      	ldr	r1, [r4, #32]
 800f666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f668:	4643      	mov	r3, r8
 800f66a:	463a      	mov	r2, r7
 800f66c:	4628      	mov	r0, r5
 800f66e:	47b0      	blx	r6
 800f670:	2800      	cmp	r0, #0
 800f672:	dc06      	bgt.n	800f682 <__sflush_r+0xfe>
 800f674:	89a3      	ldrh	r3, [r4, #12]
 800f676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f67a:	81a3      	strh	r3, [r4, #12]
 800f67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f680:	e78e      	b.n	800f5a0 <__sflush_r+0x1c>
 800f682:	4407      	add	r7, r0
 800f684:	eba8 0800 	sub.w	r8, r8, r0
 800f688:	e7e9      	b.n	800f65e <__sflush_r+0xda>
 800f68a:	bf00      	nop
 800f68c:	dfbffffe 	.word	0xdfbffffe

0800f690 <_fflush_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	690b      	ldr	r3, [r1, #16]
 800f694:	4605      	mov	r5, r0
 800f696:	460c      	mov	r4, r1
 800f698:	b913      	cbnz	r3, 800f6a0 <_fflush_r+0x10>
 800f69a:	2500      	movs	r5, #0
 800f69c:	4628      	mov	r0, r5
 800f69e:	bd38      	pop	{r3, r4, r5, pc}
 800f6a0:	b118      	cbz	r0, 800f6aa <_fflush_r+0x1a>
 800f6a2:	6a03      	ldr	r3, [r0, #32]
 800f6a4:	b90b      	cbnz	r3, 800f6aa <_fflush_r+0x1a>
 800f6a6:	f000 f8bb 	bl	800f820 <__sinit>
 800f6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d0f3      	beq.n	800f69a <_fflush_r+0xa>
 800f6b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6b4:	07d0      	lsls	r0, r2, #31
 800f6b6:	d404      	bmi.n	800f6c2 <_fflush_r+0x32>
 800f6b8:	0599      	lsls	r1, r3, #22
 800f6ba:	d402      	bmi.n	800f6c2 <_fflush_r+0x32>
 800f6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6be:	f000 fabe 	bl	800fc3e <__retarget_lock_acquire_recursive>
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	4621      	mov	r1, r4
 800f6c6:	f7ff ff5d 	bl	800f584 <__sflush_r>
 800f6ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6cc:	07da      	lsls	r2, r3, #31
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	d4e4      	bmi.n	800f69c <_fflush_r+0xc>
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	059b      	lsls	r3, r3, #22
 800f6d6:	d4e1      	bmi.n	800f69c <_fflush_r+0xc>
 800f6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6da:	f000 fab1 	bl	800fc40 <__retarget_lock_release_recursive>
 800f6de:	e7dd      	b.n	800f69c <_fflush_r+0xc>

0800f6e0 <fflush>:
 800f6e0:	4601      	mov	r1, r0
 800f6e2:	b920      	cbnz	r0, 800f6ee <fflush+0xe>
 800f6e4:	4a04      	ldr	r2, [pc, #16]	; (800f6f8 <fflush+0x18>)
 800f6e6:	4905      	ldr	r1, [pc, #20]	; (800f6fc <fflush+0x1c>)
 800f6e8:	4805      	ldr	r0, [pc, #20]	; (800f700 <fflush+0x20>)
 800f6ea:	f000 b8b1 	b.w	800f850 <_fwalk_sglue>
 800f6ee:	4b05      	ldr	r3, [pc, #20]	; (800f704 <fflush+0x24>)
 800f6f0:	6818      	ldr	r0, [r3, #0]
 800f6f2:	f7ff bfcd 	b.w	800f690 <_fflush_r>
 800f6f6:	bf00      	nop
 800f6f8:	200001b8 	.word	0x200001b8
 800f6fc:	0800f691 	.word	0x0800f691
 800f700:	200001c4 	.word	0x200001c4
 800f704:	20000210 	.word	0x20000210

0800f708 <std>:
 800f708:	2300      	movs	r3, #0
 800f70a:	b510      	push	{r4, lr}
 800f70c:	4604      	mov	r4, r0
 800f70e:	e9c0 3300 	strd	r3, r3, [r0]
 800f712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f716:	6083      	str	r3, [r0, #8]
 800f718:	8181      	strh	r1, [r0, #12]
 800f71a:	6643      	str	r3, [r0, #100]	; 0x64
 800f71c:	81c2      	strh	r2, [r0, #14]
 800f71e:	6183      	str	r3, [r0, #24]
 800f720:	4619      	mov	r1, r3
 800f722:	2208      	movs	r2, #8
 800f724:	305c      	adds	r0, #92	; 0x5c
 800f726:	f000 f9a3 	bl	800fa70 <memset>
 800f72a:	4b0d      	ldr	r3, [pc, #52]	; (800f760 <std+0x58>)
 800f72c:	6263      	str	r3, [r4, #36]	; 0x24
 800f72e:	4b0d      	ldr	r3, [pc, #52]	; (800f764 <std+0x5c>)
 800f730:	62a3      	str	r3, [r4, #40]	; 0x28
 800f732:	4b0d      	ldr	r3, [pc, #52]	; (800f768 <std+0x60>)
 800f734:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f736:	4b0d      	ldr	r3, [pc, #52]	; (800f76c <std+0x64>)
 800f738:	6323      	str	r3, [r4, #48]	; 0x30
 800f73a:	4b0d      	ldr	r3, [pc, #52]	; (800f770 <std+0x68>)
 800f73c:	6224      	str	r4, [r4, #32]
 800f73e:	429c      	cmp	r4, r3
 800f740:	d006      	beq.n	800f750 <std+0x48>
 800f742:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f746:	4294      	cmp	r4, r2
 800f748:	d002      	beq.n	800f750 <std+0x48>
 800f74a:	33d0      	adds	r3, #208	; 0xd0
 800f74c:	429c      	cmp	r4, r3
 800f74e:	d105      	bne.n	800f75c <std+0x54>
 800f750:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f758:	f000 ba70 	b.w	800fc3c <__retarget_lock_init_recursive>
 800f75c:	bd10      	pop	{r4, pc}
 800f75e:	bf00      	nop
 800f760:	0800f8c1 	.word	0x0800f8c1
 800f764:	0800f8e3 	.word	0x0800f8e3
 800f768:	0800f91b 	.word	0x0800f91b
 800f76c:	0800f93f 	.word	0x0800f93f
 800f770:	20007e18 	.word	0x20007e18

0800f774 <stdio_exit_handler>:
 800f774:	4a02      	ldr	r2, [pc, #8]	; (800f780 <stdio_exit_handler+0xc>)
 800f776:	4903      	ldr	r1, [pc, #12]	; (800f784 <stdio_exit_handler+0x10>)
 800f778:	4803      	ldr	r0, [pc, #12]	; (800f788 <stdio_exit_handler+0x14>)
 800f77a:	f000 b869 	b.w	800f850 <_fwalk_sglue>
 800f77e:	bf00      	nop
 800f780:	200001b8 	.word	0x200001b8
 800f784:	0800f691 	.word	0x0800f691
 800f788:	200001c4 	.word	0x200001c4

0800f78c <cleanup_stdio>:
 800f78c:	6841      	ldr	r1, [r0, #4]
 800f78e:	4b0c      	ldr	r3, [pc, #48]	; (800f7c0 <cleanup_stdio+0x34>)
 800f790:	4299      	cmp	r1, r3
 800f792:	b510      	push	{r4, lr}
 800f794:	4604      	mov	r4, r0
 800f796:	d001      	beq.n	800f79c <cleanup_stdio+0x10>
 800f798:	f7ff ff7a 	bl	800f690 <_fflush_r>
 800f79c:	68a1      	ldr	r1, [r4, #8]
 800f79e:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <cleanup_stdio+0x38>)
 800f7a0:	4299      	cmp	r1, r3
 800f7a2:	d002      	beq.n	800f7aa <cleanup_stdio+0x1e>
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f7ff ff73 	bl	800f690 <_fflush_r>
 800f7aa:	68e1      	ldr	r1, [r4, #12]
 800f7ac:	4b06      	ldr	r3, [pc, #24]	; (800f7c8 <cleanup_stdio+0x3c>)
 800f7ae:	4299      	cmp	r1, r3
 800f7b0:	d004      	beq.n	800f7bc <cleanup_stdio+0x30>
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7b8:	f7ff bf6a 	b.w	800f690 <_fflush_r>
 800f7bc:	bd10      	pop	{r4, pc}
 800f7be:	bf00      	nop
 800f7c0:	20007e18 	.word	0x20007e18
 800f7c4:	20007e80 	.word	0x20007e80
 800f7c8:	20007ee8 	.word	0x20007ee8

0800f7cc <global_stdio_init.part.0>:
 800f7cc:	b510      	push	{r4, lr}
 800f7ce:	4b0b      	ldr	r3, [pc, #44]	; (800f7fc <global_stdio_init.part.0+0x30>)
 800f7d0:	4c0b      	ldr	r4, [pc, #44]	; (800f800 <global_stdio_init.part.0+0x34>)
 800f7d2:	4a0c      	ldr	r2, [pc, #48]	; (800f804 <global_stdio_init.part.0+0x38>)
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2104      	movs	r1, #4
 800f7dc:	f7ff ff94 	bl	800f708 <std>
 800f7e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	2109      	movs	r1, #9
 800f7e8:	f7ff ff8e 	bl	800f708 <std>
 800f7ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f7f0:	2202      	movs	r2, #2
 800f7f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7f6:	2112      	movs	r1, #18
 800f7f8:	f7ff bf86 	b.w	800f708 <std>
 800f7fc:	20007f50 	.word	0x20007f50
 800f800:	20007e18 	.word	0x20007e18
 800f804:	0800f775 	.word	0x0800f775

0800f808 <__sfp_lock_acquire>:
 800f808:	4801      	ldr	r0, [pc, #4]	; (800f810 <__sfp_lock_acquire+0x8>)
 800f80a:	f000 ba18 	b.w	800fc3e <__retarget_lock_acquire_recursive>
 800f80e:	bf00      	nop
 800f810:	20007f59 	.word	0x20007f59

0800f814 <__sfp_lock_release>:
 800f814:	4801      	ldr	r0, [pc, #4]	; (800f81c <__sfp_lock_release+0x8>)
 800f816:	f000 ba13 	b.w	800fc40 <__retarget_lock_release_recursive>
 800f81a:	bf00      	nop
 800f81c:	20007f59 	.word	0x20007f59

0800f820 <__sinit>:
 800f820:	b510      	push	{r4, lr}
 800f822:	4604      	mov	r4, r0
 800f824:	f7ff fff0 	bl	800f808 <__sfp_lock_acquire>
 800f828:	6a23      	ldr	r3, [r4, #32]
 800f82a:	b11b      	cbz	r3, 800f834 <__sinit+0x14>
 800f82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f830:	f7ff bff0 	b.w	800f814 <__sfp_lock_release>
 800f834:	4b04      	ldr	r3, [pc, #16]	; (800f848 <__sinit+0x28>)
 800f836:	6223      	str	r3, [r4, #32]
 800f838:	4b04      	ldr	r3, [pc, #16]	; (800f84c <__sinit+0x2c>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1f5      	bne.n	800f82c <__sinit+0xc>
 800f840:	f7ff ffc4 	bl	800f7cc <global_stdio_init.part.0>
 800f844:	e7f2      	b.n	800f82c <__sinit+0xc>
 800f846:	bf00      	nop
 800f848:	0800f78d 	.word	0x0800f78d
 800f84c:	20007f50 	.word	0x20007f50

0800f850 <_fwalk_sglue>:
 800f850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f854:	4607      	mov	r7, r0
 800f856:	4688      	mov	r8, r1
 800f858:	4614      	mov	r4, r2
 800f85a:	2600      	movs	r6, #0
 800f85c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f860:	f1b9 0901 	subs.w	r9, r9, #1
 800f864:	d505      	bpl.n	800f872 <_fwalk_sglue+0x22>
 800f866:	6824      	ldr	r4, [r4, #0]
 800f868:	2c00      	cmp	r4, #0
 800f86a:	d1f7      	bne.n	800f85c <_fwalk_sglue+0xc>
 800f86c:	4630      	mov	r0, r6
 800f86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f872:	89ab      	ldrh	r3, [r5, #12]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d907      	bls.n	800f888 <_fwalk_sglue+0x38>
 800f878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f87c:	3301      	adds	r3, #1
 800f87e:	d003      	beq.n	800f888 <_fwalk_sglue+0x38>
 800f880:	4629      	mov	r1, r5
 800f882:	4638      	mov	r0, r7
 800f884:	47c0      	blx	r8
 800f886:	4306      	orrs	r6, r0
 800f888:	3568      	adds	r5, #104	; 0x68
 800f88a:	e7e9      	b.n	800f860 <_fwalk_sglue+0x10>

0800f88c <iprintf>:
 800f88c:	b40f      	push	{r0, r1, r2, r3}
 800f88e:	b507      	push	{r0, r1, r2, lr}
 800f890:	4906      	ldr	r1, [pc, #24]	; (800f8ac <iprintf+0x20>)
 800f892:	ab04      	add	r3, sp, #16
 800f894:	6808      	ldr	r0, [r1, #0]
 800f896:	f853 2b04 	ldr.w	r2, [r3], #4
 800f89a:	6881      	ldr	r1, [r0, #8]
 800f89c:	9301      	str	r3, [sp, #4]
 800f89e:	f001 fcff 	bl	80112a0 <_vfiprintf_r>
 800f8a2:	b003      	add	sp, #12
 800f8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8a8:	b004      	add	sp, #16
 800f8aa:	4770      	bx	lr
 800f8ac:	20000210 	.word	0x20000210

0800f8b0 <putchar>:
 800f8b0:	4b02      	ldr	r3, [pc, #8]	; (800f8bc <putchar+0xc>)
 800f8b2:	4601      	mov	r1, r0
 800f8b4:	6818      	ldr	r0, [r3, #0]
 800f8b6:	6882      	ldr	r2, [r0, #8]
 800f8b8:	f001 be6e 	b.w	8011598 <_putc_r>
 800f8bc:	20000210 	.word	0x20000210

0800f8c0 <__sread>:
 800f8c0:	b510      	push	{r4, lr}
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8c8:	f000 f96a 	bl	800fba0 <_read_r>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	bfab      	itete	ge
 800f8d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8d2:	89a3      	ldrhlt	r3, [r4, #12]
 800f8d4:	181b      	addge	r3, r3, r0
 800f8d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8da:	bfac      	ite	ge
 800f8dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8de:	81a3      	strhlt	r3, [r4, #12]
 800f8e0:	bd10      	pop	{r4, pc}

0800f8e2 <__swrite>:
 800f8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e6:	461f      	mov	r7, r3
 800f8e8:	898b      	ldrh	r3, [r1, #12]
 800f8ea:	05db      	lsls	r3, r3, #23
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	4616      	mov	r6, r2
 800f8f2:	d505      	bpl.n	800f900 <__swrite+0x1e>
 800f8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f000 f93e 	bl	800fb7c <_lseek_r>
 800f900:	89a3      	ldrh	r3, [r4, #12]
 800f902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f90a:	81a3      	strh	r3, [r4, #12]
 800f90c:	4632      	mov	r2, r6
 800f90e:	463b      	mov	r3, r7
 800f910:	4628      	mov	r0, r5
 800f912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f916:	f000 b955 	b.w	800fbc4 <_write_r>

0800f91a <__sseek>:
 800f91a:	b510      	push	{r4, lr}
 800f91c:	460c      	mov	r4, r1
 800f91e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f922:	f000 f92b 	bl	800fb7c <_lseek_r>
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	bf15      	itete	ne
 800f92c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f92e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f936:	81a3      	strheq	r3, [r4, #12]
 800f938:	bf18      	it	ne
 800f93a:	81a3      	strhne	r3, [r4, #12]
 800f93c:	bd10      	pop	{r4, pc}

0800f93e <__sclose>:
 800f93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f942:	f000 b8b5 	b.w	800fab0 <_close_r>

0800f946 <__swbuf_r>:
 800f946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f948:	460e      	mov	r6, r1
 800f94a:	4614      	mov	r4, r2
 800f94c:	4605      	mov	r5, r0
 800f94e:	b118      	cbz	r0, 800f958 <__swbuf_r+0x12>
 800f950:	6a03      	ldr	r3, [r0, #32]
 800f952:	b90b      	cbnz	r3, 800f958 <__swbuf_r+0x12>
 800f954:	f7ff ff64 	bl	800f820 <__sinit>
 800f958:	69a3      	ldr	r3, [r4, #24]
 800f95a:	60a3      	str	r3, [r4, #8]
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	071a      	lsls	r2, r3, #28
 800f960:	d525      	bpl.n	800f9ae <__swbuf_r+0x68>
 800f962:	6923      	ldr	r3, [r4, #16]
 800f964:	b31b      	cbz	r3, 800f9ae <__swbuf_r+0x68>
 800f966:	6823      	ldr	r3, [r4, #0]
 800f968:	6922      	ldr	r2, [r4, #16]
 800f96a:	1a98      	subs	r0, r3, r2
 800f96c:	6963      	ldr	r3, [r4, #20]
 800f96e:	b2f6      	uxtb	r6, r6
 800f970:	4283      	cmp	r3, r0
 800f972:	4637      	mov	r7, r6
 800f974:	dc04      	bgt.n	800f980 <__swbuf_r+0x3a>
 800f976:	4621      	mov	r1, r4
 800f978:	4628      	mov	r0, r5
 800f97a:	f7ff fe89 	bl	800f690 <_fflush_r>
 800f97e:	b9e0      	cbnz	r0, 800f9ba <__swbuf_r+0x74>
 800f980:	68a3      	ldr	r3, [r4, #8]
 800f982:	3b01      	subs	r3, #1
 800f984:	60a3      	str	r3, [r4, #8]
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	1c5a      	adds	r2, r3, #1
 800f98a:	6022      	str	r2, [r4, #0]
 800f98c:	701e      	strb	r6, [r3, #0]
 800f98e:	6962      	ldr	r2, [r4, #20]
 800f990:	1c43      	adds	r3, r0, #1
 800f992:	429a      	cmp	r2, r3
 800f994:	d004      	beq.n	800f9a0 <__swbuf_r+0x5a>
 800f996:	89a3      	ldrh	r3, [r4, #12]
 800f998:	07db      	lsls	r3, r3, #31
 800f99a:	d506      	bpl.n	800f9aa <__swbuf_r+0x64>
 800f99c:	2e0a      	cmp	r6, #10
 800f99e:	d104      	bne.n	800f9aa <__swbuf_r+0x64>
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	f7ff fe74 	bl	800f690 <_fflush_r>
 800f9a8:	b938      	cbnz	r0, 800f9ba <__swbuf_r+0x74>
 800f9aa:	4638      	mov	r0, r7
 800f9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	f000 f805 	bl	800f9c0 <__swsetup_r>
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d0d5      	beq.n	800f966 <__swbuf_r+0x20>
 800f9ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f9be:	e7f4      	b.n	800f9aa <__swbuf_r+0x64>

0800f9c0 <__swsetup_r>:
 800f9c0:	b538      	push	{r3, r4, r5, lr}
 800f9c2:	4b2a      	ldr	r3, [pc, #168]	; (800fa6c <__swsetup_r+0xac>)
 800f9c4:	4605      	mov	r5, r0
 800f9c6:	6818      	ldr	r0, [r3, #0]
 800f9c8:	460c      	mov	r4, r1
 800f9ca:	b118      	cbz	r0, 800f9d4 <__swsetup_r+0x14>
 800f9cc:	6a03      	ldr	r3, [r0, #32]
 800f9ce:	b90b      	cbnz	r3, 800f9d4 <__swsetup_r+0x14>
 800f9d0:	f7ff ff26 	bl	800f820 <__sinit>
 800f9d4:	89a3      	ldrh	r3, [r4, #12]
 800f9d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9da:	0718      	lsls	r0, r3, #28
 800f9dc:	d422      	bmi.n	800fa24 <__swsetup_r+0x64>
 800f9de:	06d9      	lsls	r1, r3, #27
 800f9e0:	d407      	bmi.n	800f9f2 <__swsetup_r+0x32>
 800f9e2:	2309      	movs	r3, #9
 800f9e4:	602b      	str	r3, [r5, #0]
 800f9e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9ea:	81a3      	strh	r3, [r4, #12]
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9f0:	e034      	b.n	800fa5c <__swsetup_r+0x9c>
 800f9f2:	0758      	lsls	r0, r3, #29
 800f9f4:	d512      	bpl.n	800fa1c <__swsetup_r+0x5c>
 800f9f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9f8:	b141      	cbz	r1, 800fa0c <__swsetup_r+0x4c>
 800f9fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9fe:	4299      	cmp	r1, r3
 800fa00:	d002      	beq.n	800fa08 <__swsetup_r+0x48>
 800fa02:	4628      	mov	r0, r5
 800fa04:	f000 ffa6 	bl	8010954 <_free_r>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	6363      	str	r3, [r4, #52]	; 0x34
 800fa0c:	89a3      	ldrh	r3, [r4, #12]
 800fa0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa12:	81a3      	strh	r3, [r4, #12]
 800fa14:	2300      	movs	r3, #0
 800fa16:	6063      	str	r3, [r4, #4]
 800fa18:	6923      	ldr	r3, [r4, #16]
 800fa1a:	6023      	str	r3, [r4, #0]
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	f043 0308 	orr.w	r3, r3, #8
 800fa22:	81a3      	strh	r3, [r4, #12]
 800fa24:	6923      	ldr	r3, [r4, #16]
 800fa26:	b94b      	cbnz	r3, 800fa3c <__swsetup_r+0x7c>
 800fa28:	89a3      	ldrh	r3, [r4, #12]
 800fa2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa32:	d003      	beq.n	800fa3c <__swsetup_r+0x7c>
 800fa34:	4621      	mov	r1, r4
 800fa36:	4628      	mov	r0, r5
 800fa38:	f001 fd72 	bl	8011520 <__smakebuf_r>
 800fa3c:	89a0      	ldrh	r0, [r4, #12]
 800fa3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa42:	f010 0301 	ands.w	r3, r0, #1
 800fa46:	d00a      	beq.n	800fa5e <__swsetup_r+0x9e>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	60a3      	str	r3, [r4, #8]
 800fa4c:	6963      	ldr	r3, [r4, #20]
 800fa4e:	425b      	negs	r3, r3
 800fa50:	61a3      	str	r3, [r4, #24]
 800fa52:	6923      	ldr	r3, [r4, #16]
 800fa54:	b943      	cbnz	r3, 800fa68 <__swsetup_r+0xa8>
 800fa56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa5a:	d1c4      	bne.n	800f9e6 <__swsetup_r+0x26>
 800fa5c:	bd38      	pop	{r3, r4, r5, pc}
 800fa5e:	0781      	lsls	r1, r0, #30
 800fa60:	bf58      	it	pl
 800fa62:	6963      	ldrpl	r3, [r4, #20]
 800fa64:	60a3      	str	r3, [r4, #8]
 800fa66:	e7f4      	b.n	800fa52 <__swsetup_r+0x92>
 800fa68:	2000      	movs	r0, #0
 800fa6a:	e7f7      	b.n	800fa5c <__swsetup_r+0x9c>
 800fa6c:	20000210 	.word	0x20000210

0800fa70 <memset>:
 800fa70:	4402      	add	r2, r0
 800fa72:	4603      	mov	r3, r0
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d100      	bne.n	800fa7a <memset+0xa>
 800fa78:	4770      	bx	lr
 800fa7a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa7e:	e7f9      	b.n	800fa74 <memset+0x4>

0800fa80 <strncpy>:
 800fa80:	b510      	push	{r4, lr}
 800fa82:	3901      	subs	r1, #1
 800fa84:	4603      	mov	r3, r0
 800fa86:	b132      	cbz	r2, 800fa96 <strncpy+0x16>
 800fa88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa8c:	f803 4b01 	strb.w	r4, [r3], #1
 800fa90:	3a01      	subs	r2, #1
 800fa92:	2c00      	cmp	r4, #0
 800fa94:	d1f7      	bne.n	800fa86 <strncpy+0x6>
 800fa96:	441a      	add	r2, r3
 800fa98:	2100      	movs	r1, #0
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d100      	bne.n	800faa0 <strncpy+0x20>
 800fa9e:	bd10      	pop	{r4, pc}
 800faa0:	f803 1b01 	strb.w	r1, [r3], #1
 800faa4:	e7f9      	b.n	800fa9a <strncpy+0x1a>
	...

0800faa8 <_localeconv_r>:
 800faa8:	4800      	ldr	r0, [pc, #0]	; (800faac <_localeconv_r+0x4>)
 800faaa:	4770      	bx	lr
 800faac:	20000304 	.word	0x20000304

0800fab0 <_close_r>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	4d06      	ldr	r5, [pc, #24]	; (800facc <_close_r+0x1c>)
 800fab4:	2300      	movs	r3, #0
 800fab6:	4604      	mov	r4, r0
 800fab8:	4608      	mov	r0, r1
 800faba:	602b      	str	r3, [r5, #0]
 800fabc:	f7f3 fc6b 	bl	8003396 <_close>
 800fac0:	1c43      	adds	r3, r0, #1
 800fac2:	d102      	bne.n	800faca <_close_r+0x1a>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	b103      	cbz	r3, 800faca <_close_r+0x1a>
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	bd38      	pop	{r3, r4, r5, pc}
 800facc:	20007f54 	.word	0x20007f54

0800fad0 <_reclaim_reent>:
 800fad0:	4b29      	ldr	r3, [pc, #164]	; (800fb78 <_reclaim_reent+0xa8>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4283      	cmp	r3, r0
 800fad6:	b570      	push	{r4, r5, r6, lr}
 800fad8:	4604      	mov	r4, r0
 800fada:	d04b      	beq.n	800fb74 <_reclaim_reent+0xa4>
 800fadc:	69c3      	ldr	r3, [r0, #28]
 800fade:	b143      	cbz	r3, 800faf2 <_reclaim_reent+0x22>
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d144      	bne.n	800fb70 <_reclaim_reent+0xa0>
 800fae6:	69e3      	ldr	r3, [r4, #28]
 800fae8:	6819      	ldr	r1, [r3, #0]
 800faea:	b111      	cbz	r1, 800faf2 <_reclaim_reent+0x22>
 800faec:	4620      	mov	r0, r4
 800faee:	f000 ff31 	bl	8010954 <_free_r>
 800faf2:	6961      	ldr	r1, [r4, #20]
 800faf4:	b111      	cbz	r1, 800fafc <_reclaim_reent+0x2c>
 800faf6:	4620      	mov	r0, r4
 800faf8:	f000 ff2c 	bl	8010954 <_free_r>
 800fafc:	69e1      	ldr	r1, [r4, #28]
 800fafe:	b111      	cbz	r1, 800fb06 <_reclaim_reent+0x36>
 800fb00:	4620      	mov	r0, r4
 800fb02:	f000 ff27 	bl	8010954 <_free_r>
 800fb06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fb08:	b111      	cbz	r1, 800fb10 <_reclaim_reent+0x40>
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f000 ff22 	bl	8010954 <_free_r>
 800fb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb12:	b111      	cbz	r1, 800fb1a <_reclaim_reent+0x4a>
 800fb14:	4620      	mov	r0, r4
 800fb16:	f000 ff1d 	bl	8010954 <_free_r>
 800fb1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fb1c:	b111      	cbz	r1, 800fb24 <_reclaim_reent+0x54>
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f000 ff18 	bl	8010954 <_free_r>
 800fb24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fb26:	b111      	cbz	r1, 800fb2e <_reclaim_reent+0x5e>
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f000 ff13 	bl	8010954 <_free_r>
 800fb2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fb30:	b111      	cbz	r1, 800fb38 <_reclaim_reent+0x68>
 800fb32:	4620      	mov	r0, r4
 800fb34:	f000 ff0e 	bl	8010954 <_free_r>
 800fb38:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fb3a:	b111      	cbz	r1, 800fb42 <_reclaim_reent+0x72>
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f000 ff09 	bl	8010954 <_free_r>
 800fb42:	6a23      	ldr	r3, [r4, #32]
 800fb44:	b1b3      	cbz	r3, 800fb74 <_reclaim_reent+0xa4>
 800fb46:	4620      	mov	r0, r4
 800fb48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb4c:	4718      	bx	r3
 800fb4e:	5949      	ldr	r1, [r1, r5]
 800fb50:	b941      	cbnz	r1, 800fb64 <_reclaim_reent+0x94>
 800fb52:	3504      	adds	r5, #4
 800fb54:	69e3      	ldr	r3, [r4, #28]
 800fb56:	2d80      	cmp	r5, #128	; 0x80
 800fb58:	68d9      	ldr	r1, [r3, #12]
 800fb5a:	d1f8      	bne.n	800fb4e <_reclaim_reent+0x7e>
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	f000 fef9 	bl	8010954 <_free_r>
 800fb62:	e7c0      	b.n	800fae6 <_reclaim_reent+0x16>
 800fb64:	680e      	ldr	r6, [r1, #0]
 800fb66:	4620      	mov	r0, r4
 800fb68:	f000 fef4 	bl	8010954 <_free_r>
 800fb6c:	4631      	mov	r1, r6
 800fb6e:	e7ef      	b.n	800fb50 <_reclaim_reent+0x80>
 800fb70:	2500      	movs	r5, #0
 800fb72:	e7ef      	b.n	800fb54 <_reclaim_reent+0x84>
 800fb74:	bd70      	pop	{r4, r5, r6, pc}
 800fb76:	bf00      	nop
 800fb78:	20000210 	.word	0x20000210

0800fb7c <_lseek_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4d07      	ldr	r5, [pc, #28]	; (800fb9c <_lseek_r+0x20>)
 800fb80:	4604      	mov	r4, r0
 800fb82:	4608      	mov	r0, r1
 800fb84:	4611      	mov	r1, r2
 800fb86:	2200      	movs	r2, #0
 800fb88:	602a      	str	r2, [r5, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	f7f3 fc2a 	bl	80033e4 <_lseek>
 800fb90:	1c43      	adds	r3, r0, #1
 800fb92:	d102      	bne.n	800fb9a <_lseek_r+0x1e>
 800fb94:	682b      	ldr	r3, [r5, #0]
 800fb96:	b103      	cbz	r3, 800fb9a <_lseek_r+0x1e>
 800fb98:	6023      	str	r3, [r4, #0]
 800fb9a:	bd38      	pop	{r3, r4, r5, pc}
 800fb9c:	20007f54 	.word	0x20007f54

0800fba0 <_read_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4d07      	ldr	r5, [pc, #28]	; (800fbc0 <_read_r+0x20>)
 800fba4:	4604      	mov	r4, r0
 800fba6:	4608      	mov	r0, r1
 800fba8:	4611      	mov	r1, r2
 800fbaa:	2200      	movs	r2, #0
 800fbac:	602a      	str	r2, [r5, #0]
 800fbae:	461a      	mov	r2, r3
 800fbb0:	f7f3 fbb8 	bl	8003324 <_read>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	d102      	bne.n	800fbbe <_read_r+0x1e>
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	b103      	cbz	r3, 800fbbe <_read_r+0x1e>
 800fbbc:	6023      	str	r3, [r4, #0]
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	20007f54 	.word	0x20007f54

0800fbc4 <_write_r>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4d07      	ldr	r5, [pc, #28]	; (800fbe4 <_write_r+0x20>)
 800fbc8:	4604      	mov	r4, r0
 800fbca:	4608      	mov	r0, r1
 800fbcc:	4611      	mov	r1, r2
 800fbce:	2200      	movs	r2, #0
 800fbd0:	602a      	str	r2, [r5, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	f7f3 fbc3 	bl	800335e <_write>
 800fbd8:	1c43      	adds	r3, r0, #1
 800fbda:	d102      	bne.n	800fbe2 <_write_r+0x1e>
 800fbdc:	682b      	ldr	r3, [r5, #0]
 800fbde:	b103      	cbz	r3, 800fbe2 <_write_r+0x1e>
 800fbe0:	6023      	str	r3, [r4, #0]
 800fbe2:	bd38      	pop	{r3, r4, r5, pc}
 800fbe4:	20007f54 	.word	0x20007f54

0800fbe8 <__errno>:
 800fbe8:	4b01      	ldr	r3, [pc, #4]	; (800fbf0 <__errno+0x8>)
 800fbea:	6818      	ldr	r0, [r3, #0]
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop
 800fbf0:	20000210 	.word	0x20000210

0800fbf4 <__libc_init_array>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	4d0d      	ldr	r5, [pc, #52]	; (800fc2c <__libc_init_array+0x38>)
 800fbf8:	4c0d      	ldr	r4, [pc, #52]	; (800fc30 <__libc_init_array+0x3c>)
 800fbfa:	1b64      	subs	r4, r4, r5
 800fbfc:	10a4      	asrs	r4, r4, #2
 800fbfe:	2600      	movs	r6, #0
 800fc00:	42a6      	cmp	r6, r4
 800fc02:	d109      	bne.n	800fc18 <__libc_init_array+0x24>
 800fc04:	4d0b      	ldr	r5, [pc, #44]	; (800fc34 <__libc_init_array+0x40>)
 800fc06:	4c0c      	ldr	r4, [pc, #48]	; (800fc38 <__libc_init_array+0x44>)
 800fc08:	f001 fdde 	bl	80117c8 <_init>
 800fc0c:	1b64      	subs	r4, r4, r5
 800fc0e:	10a4      	asrs	r4, r4, #2
 800fc10:	2600      	movs	r6, #0
 800fc12:	42a6      	cmp	r6, r4
 800fc14:	d105      	bne.n	800fc22 <__libc_init_array+0x2e>
 800fc16:	bd70      	pop	{r4, r5, r6, pc}
 800fc18:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc1c:	4798      	blx	r3
 800fc1e:	3601      	adds	r6, #1
 800fc20:	e7ee      	b.n	800fc00 <__libc_init_array+0xc>
 800fc22:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc26:	4798      	blx	r3
 800fc28:	3601      	adds	r6, #1
 800fc2a:	e7f2      	b.n	800fc12 <__libc_init_array+0x1e>
 800fc2c:	08012614 	.word	0x08012614
 800fc30:	08012614 	.word	0x08012614
 800fc34:	08012614 	.word	0x08012614
 800fc38:	08012618 	.word	0x08012618

0800fc3c <__retarget_lock_init_recursive>:
 800fc3c:	4770      	bx	lr

0800fc3e <__retarget_lock_acquire_recursive>:
 800fc3e:	4770      	bx	lr

0800fc40 <__retarget_lock_release_recursive>:
 800fc40:	4770      	bx	lr

0800fc42 <memcpy>:
 800fc42:	440a      	add	r2, r1
 800fc44:	4291      	cmp	r1, r2
 800fc46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc4a:	d100      	bne.n	800fc4e <memcpy+0xc>
 800fc4c:	4770      	bx	lr
 800fc4e:	b510      	push	{r4, lr}
 800fc50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc58:	4291      	cmp	r1, r2
 800fc5a:	d1f9      	bne.n	800fc50 <memcpy+0xe>
 800fc5c:	bd10      	pop	{r4, pc}

0800fc5e <quorem>:
 800fc5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc62:	6903      	ldr	r3, [r0, #16]
 800fc64:	690c      	ldr	r4, [r1, #16]
 800fc66:	42a3      	cmp	r3, r4
 800fc68:	4607      	mov	r7, r0
 800fc6a:	db7e      	blt.n	800fd6a <quorem+0x10c>
 800fc6c:	3c01      	subs	r4, #1
 800fc6e:	f101 0814 	add.w	r8, r1, #20
 800fc72:	f100 0514 	add.w	r5, r0, #20
 800fc76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc7a:	9301      	str	r3, [sp, #4]
 800fc7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc84:	3301      	adds	r3, #1
 800fc86:	429a      	cmp	r2, r3
 800fc88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc90:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc94:	d331      	bcc.n	800fcfa <quorem+0x9c>
 800fc96:	f04f 0e00 	mov.w	lr, #0
 800fc9a:	4640      	mov	r0, r8
 800fc9c:	46ac      	mov	ip, r5
 800fc9e:	46f2      	mov	sl, lr
 800fca0:	f850 2b04 	ldr.w	r2, [r0], #4
 800fca4:	b293      	uxth	r3, r2
 800fca6:	fb06 e303 	mla	r3, r6, r3, lr
 800fcaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fcae:	0c1a      	lsrs	r2, r3, #16
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	ebaa 0303 	sub.w	r3, sl, r3
 800fcb6:	f8dc a000 	ldr.w	sl, [ip]
 800fcba:	fa13 f38a 	uxtah	r3, r3, sl
 800fcbe:	fb06 220e 	mla	r2, r6, lr, r2
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	9b00      	ldr	r3, [sp, #0]
 800fcc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fcca:	b292      	uxth	r2, r2
 800fccc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fcd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fcd4:	f8bd 3000 	ldrh.w	r3, [sp]
 800fcd8:	4581      	cmp	r9, r0
 800fcda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcde:	f84c 3b04 	str.w	r3, [ip], #4
 800fce2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fce6:	d2db      	bcs.n	800fca0 <quorem+0x42>
 800fce8:	f855 300b 	ldr.w	r3, [r5, fp]
 800fcec:	b92b      	cbnz	r3, 800fcfa <quorem+0x9c>
 800fcee:	9b01      	ldr	r3, [sp, #4]
 800fcf0:	3b04      	subs	r3, #4
 800fcf2:	429d      	cmp	r5, r3
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	d32c      	bcc.n	800fd52 <quorem+0xf4>
 800fcf8:	613c      	str	r4, [r7, #16]
 800fcfa:	4638      	mov	r0, r7
 800fcfc:	f001 f9a6 	bl	801104c <__mcmp>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	db22      	blt.n	800fd4a <quorem+0xec>
 800fd04:	3601      	adds	r6, #1
 800fd06:	4629      	mov	r1, r5
 800fd08:	2000      	movs	r0, #0
 800fd0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800fd0e:	f8d1 c000 	ldr.w	ip, [r1]
 800fd12:	b293      	uxth	r3, r2
 800fd14:	1ac3      	subs	r3, r0, r3
 800fd16:	0c12      	lsrs	r2, r2, #16
 800fd18:	fa13 f38c 	uxtah	r3, r3, ip
 800fd1c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fd20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd2a:	45c1      	cmp	r9, r8
 800fd2c:	f841 3b04 	str.w	r3, [r1], #4
 800fd30:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fd34:	d2e9      	bcs.n	800fd0a <quorem+0xac>
 800fd36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd3e:	b922      	cbnz	r2, 800fd4a <quorem+0xec>
 800fd40:	3b04      	subs	r3, #4
 800fd42:	429d      	cmp	r5, r3
 800fd44:	461a      	mov	r2, r3
 800fd46:	d30a      	bcc.n	800fd5e <quorem+0x100>
 800fd48:	613c      	str	r4, [r7, #16]
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	b003      	add	sp, #12
 800fd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd52:	6812      	ldr	r2, [r2, #0]
 800fd54:	3b04      	subs	r3, #4
 800fd56:	2a00      	cmp	r2, #0
 800fd58:	d1ce      	bne.n	800fcf8 <quorem+0x9a>
 800fd5a:	3c01      	subs	r4, #1
 800fd5c:	e7c9      	b.n	800fcf2 <quorem+0x94>
 800fd5e:	6812      	ldr	r2, [r2, #0]
 800fd60:	3b04      	subs	r3, #4
 800fd62:	2a00      	cmp	r2, #0
 800fd64:	d1f0      	bne.n	800fd48 <quorem+0xea>
 800fd66:	3c01      	subs	r4, #1
 800fd68:	e7eb      	b.n	800fd42 <quorem+0xe4>
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	e7ee      	b.n	800fd4c <quorem+0xee>
	...

0800fd70 <_dtoa_r>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	ed2d 8b04 	vpush	{d8-d9}
 800fd78:	69c5      	ldr	r5, [r0, #28]
 800fd7a:	b093      	sub	sp, #76	; 0x4c
 800fd7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd80:	ec57 6b10 	vmov	r6, r7, d0
 800fd84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd88:	9107      	str	r1, [sp, #28]
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	920a      	str	r2, [sp, #40]	; 0x28
 800fd8e:	930d      	str	r3, [sp, #52]	; 0x34
 800fd90:	b975      	cbnz	r5, 800fdb0 <_dtoa_r+0x40>
 800fd92:	2010      	movs	r0, #16
 800fd94:	f000 fe2a 	bl	80109ec <malloc>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	61e0      	str	r0, [r4, #28]
 800fd9c:	b920      	cbnz	r0, 800fda8 <_dtoa_r+0x38>
 800fd9e:	4bae      	ldr	r3, [pc, #696]	; (8010058 <_dtoa_r+0x2e8>)
 800fda0:	21ef      	movs	r1, #239	; 0xef
 800fda2:	48ae      	ldr	r0, [pc, #696]	; (801005c <_dtoa_r+0x2ec>)
 800fda4:	f001 fc5e 	bl	8011664 <__assert_func>
 800fda8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fdac:	6005      	str	r5, [r0, #0]
 800fdae:	60c5      	str	r5, [r0, #12]
 800fdb0:	69e3      	ldr	r3, [r4, #28]
 800fdb2:	6819      	ldr	r1, [r3, #0]
 800fdb4:	b151      	cbz	r1, 800fdcc <_dtoa_r+0x5c>
 800fdb6:	685a      	ldr	r2, [r3, #4]
 800fdb8:	604a      	str	r2, [r1, #4]
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4093      	lsls	r3, r2
 800fdbe:	608b      	str	r3, [r1, #8]
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f000 ff07 	bl	8010bd4 <_Bfree>
 800fdc6:	69e3      	ldr	r3, [r4, #28]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	1e3b      	subs	r3, r7, #0
 800fdce:	bfbb      	ittet	lt
 800fdd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fdd4:	9303      	strlt	r3, [sp, #12]
 800fdd6:	2300      	movge	r3, #0
 800fdd8:	2201      	movlt	r2, #1
 800fdda:	bfac      	ite	ge
 800fddc:	f8c8 3000 	strge.w	r3, [r8]
 800fde0:	f8c8 2000 	strlt.w	r2, [r8]
 800fde4:	4b9e      	ldr	r3, [pc, #632]	; (8010060 <_dtoa_r+0x2f0>)
 800fde6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fdea:	ea33 0308 	bics.w	r3, r3, r8
 800fdee:	d11b      	bne.n	800fe28 <_dtoa_r+0xb8>
 800fdf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdf2:	f242 730f 	movw	r3, #9999	; 0x270f
 800fdf6:	6013      	str	r3, [r2, #0]
 800fdf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fdfc:	4333      	orrs	r3, r6
 800fdfe:	f000 8593 	beq.w	8010928 <_dtoa_r+0xbb8>
 800fe02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe04:	b963      	cbnz	r3, 800fe20 <_dtoa_r+0xb0>
 800fe06:	4b97      	ldr	r3, [pc, #604]	; (8010064 <_dtoa_r+0x2f4>)
 800fe08:	e027      	b.n	800fe5a <_dtoa_r+0xea>
 800fe0a:	4b97      	ldr	r3, [pc, #604]	; (8010068 <_dtoa_r+0x2f8>)
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	3308      	adds	r3, #8
 800fe10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe12:	6013      	str	r3, [r2, #0]
 800fe14:	9800      	ldr	r0, [sp, #0]
 800fe16:	b013      	add	sp, #76	; 0x4c
 800fe18:	ecbd 8b04 	vpop	{d8-d9}
 800fe1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe20:	4b90      	ldr	r3, [pc, #576]	; (8010064 <_dtoa_r+0x2f4>)
 800fe22:	9300      	str	r3, [sp, #0]
 800fe24:	3303      	adds	r3, #3
 800fe26:	e7f3      	b.n	800fe10 <_dtoa_r+0xa0>
 800fe28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	ec51 0b17 	vmov	r0, r1, d7
 800fe32:	eeb0 8a47 	vmov.f32	s16, s14
 800fe36:	eef0 8a67 	vmov.f32	s17, s15
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f7f0 fe54 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe40:	4681      	mov	r9, r0
 800fe42:	b160      	cbz	r0, 800fe5e <_dtoa_r+0xee>
 800fe44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe46:	2301      	movs	r3, #1
 800fe48:	6013      	str	r3, [r2, #0]
 800fe4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f000 8568 	beq.w	8010922 <_dtoa_r+0xbb2>
 800fe52:	4b86      	ldr	r3, [pc, #536]	; (801006c <_dtoa_r+0x2fc>)
 800fe54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe56:	6013      	str	r3, [r2, #0]
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	e7da      	b.n	800fe14 <_dtoa_r+0xa4>
 800fe5e:	aa10      	add	r2, sp, #64	; 0x40
 800fe60:	a911      	add	r1, sp, #68	; 0x44
 800fe62:	4620      	mov	r0, r4
 800fe64:	eeb0 0a48 	vmov.f32	s0, s16
 800fe68:	eef0 0a68 	vmov.f32	s1, s17
 800fe6c:	f001 f994 	bl	8011198 <__d2b>
 800fe70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fe74:	4682      	mov	sl, r0
 800fe76:	2d00      	cmp	r5, #0
 800fe78:	d07f      	beq.n	800ff7a <_dtoa_r+0x20a>
 800fe7a:	ee18 3a90 	vmov	r3, s17
 800fe7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fe86:	ec51 0b18 	vmov	r0, r1, d8
 800fe8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fe8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fe96:	4619      	mov	r1, r3
 800fe98:	2200      	movs	r2, #0
 800fe9a:	4b75      	ldr	r3, [pc, #468]	; (8010070 <_dtoa_r+0x300>)
 800fe9c:	f7f0 fa04 	bl	80002a8 <__aeabi_dsub>
 800fea0:	a367      	add	r3, pc, #412	; (adr r3, 8010040 <_dtoa_r+0x2d0>)
 800fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea6:	f7f0 fbb7 	bl	8000618 <__aeabi_dmul>
 800feaa:	a367      	add	r3, pc, #412	; (adr r3, 8010048 <_dtoa_r+0x2d8>)
 800feac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb0:	f7f0 f9fc 	bl	80002ac <__adddf3>
 800feb4:	4606      	mov	r6, r0
 800feb6:	4628      	mov	r0, r5
 800feb8:	460f      	mov	r7, r1
 800feba:	f7f0 fb43 	bl	8000544 <__aeabi_i2d>
 800febe:	a364      	add	r3, pc, #400	; (adr r3, 8010050 <_dtoa_r+0x2e0>)
 800fec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec4:	f7f0 fba8 	bl	8000618 <__aeabi_dmul>
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	4630      	mov	r0, r6
 800fece:	4639      	mov	r1, r7
 800fed0:	f7f0 f9ec 	bl	80002ac <__adddf3>
 800fed4:	4606      	mov	r6, r0
 800fed6:	460f      	mov	r7, r1
 800fed8:	f7f0 fe4e 	bl	8000b78 <__aeabi_d2iz>
 800fedc:	2200      	movs	r2, #0
 800fede:	4683      	mov	fp, r0
 800fee0:	2300      	movs	r3, #0
 800fee2:	4630      	mov	r0, r6
 800fee4:	4639      	mov	r1, r7
 800fee6:	f7f0 fe09 	bl	8000afc <__aeabi_dcmplt>
 800feea:	b148      	cbz	r0, 800ff00 <_dtoa_r+0x190>
 800feec:	4658      	mov	r0, fp
 800feee:	f7f0 fb29 	bl	8000544 <__aeabi_i2d>
 800fef2:	4632      	mov	r2, r6
 800fef4:	463b      	mov	r3, r7
 800fef6:	f7f0 fdf7 	bl	8000ae8 <__aeabi_dcmpeq>
 800fefa:	b908      	cbnz	r0, 800ff00 <_dtoa_r+0x190>
 800fefc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ff00:	f1bb 0f16 	cmp.w	fp, #22
 800ff04:	d857      	bhi.n	800ffb6 <_dtoa_r+0x246>
 800ff06:	4b5b      	ldr	r3, [pc, #364]	; (8010074 <_dtoa_r+0x304>)
 800ff08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff10:	ec51 0b18 	vmov	r0, r1, d8
 800ff14:	f7f0 fdf2 	bl	8000afc <__aeabi_dcmplt>
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d04e      	beq.n	800ffba <_dtoa_r+0x24a>
 800ff1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ff20:	2300      	movs	r3, #0
 800ff22:	930c      	str	r3, [sp, #48]	; 0x30
 800ff24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff26:	1b5b      	subs	r3, r3, r5
 800ff28:	1e5a      	subs	r2, r3, #1
 800ff2a:	bf45      	ittet	mi
 800ff2c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ff30:	9305      	strmi	r3, [sp, #20]
 800ff32:	2300      	movpl	r3, #0
 800ff34:	2300      	movmi	r3, #0
 800ff36:	9206      	str	r2, [sp, #24]
 800ff38:	bf54      	ite	pl
 800ff3a:	9305      	strpl	r3, [sp, #20]
 800ff3c:	9306      	strmi	r3, [sp, #24]
 800ff3e:	f1bb 0f00 	cmp.w	fp, #0
 800ff42:	db3c      	blt.n	800ffbe <_dtoa_r+0x24e>
 800ff44:	9b06      	ldr	r3, [sp, #24]
 800ff46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ff4a:	445b      	add	r3, fp
 800ff4c:	9306      	str	r3, [sp, #24]
 800ff4e:	2300      	movs	r3, #0
 800ff50:	9308      	str	r3, [sp, #32]
 800ff52:	9b07      	ldr	r3, [sp, #28]
 800ff54:	2b09      	cmp	r3, #9
 800ff56:	d868      	bhi.n	801002a <_dtoa_r+0x2ba>
 800ff58:	2b05      	cmp	r3, #5
 800ff5a:	bfc4      	itt	gt
 800ff5c:	3b04      	subgt	r3, #4
 800ff5e:	9307      	strgt	r3, [sp, #28]
 800ff60:	9b07      	ldr	r3, [sp, #28]
 800ff62:	f1a3 0302 	sub.w	r3, r3, #2
 800ff66:	bfcc      	ite	gt
 800ff68:	2500      	movgt	r5, #0
 800ff6a:	2501      	movle	r5, #1
 800ff6c:	2b03      	cmp	r3, #3
 800ff6e:	f200 8085 	bhi.w	801007c <_dtoa_r+0x30c>
 800ff72:	e8df f003 	tbb	[pc, r3]
 800ff76:	3b2e      	.short	0x3b2e
 800ff78:	5839      	.short	0x5839
 800ff7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ff7e:	441d      	add	r5, r3
 800ff80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff84:	2b20      	cmp	r3, #32
 800ff86:	bfc1      	itttt	gt
 800ff88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff8c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ff90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ff94:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ff98:	bfd6      	itet	le
 800ff9a:	f1c3 0320 	rsble	r3, r3, #32
 800ff9e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ffa2:	fa06 f003 	lslle.w	r0, r6, r3
 800ffa6:	f7f0 fabd 	bl	8000524 <__aeabi_ui2d>
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ffb0:	3d01      	subs	r5, #1
 800ffb2:	920e      	str	r2, [sp, #56]	; 0x38
 800ffb4:	e76f      	b.n	800fe96 <_dtoa_r+0x126>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e7b3      	b.n	800ff22 <_dtoa_r+0x1b2>
 800ffba:	900c      	str	r0, [sp, #48]	; 0x30
 800ffbc:	e7b2      	b.n	800ff24 <_dtoa_r+0x1b4>
 800ffbe:	9b05      	ldr	r3, [sp, #20]
 800ffc0:	eba3 030b 	sub.w	r3, r3, fp
 800ffc4:	9305      	str	r3, [sp, #20]
 800ffc6:	f1cb 0300 	rsb	r3, fp, #0
 800ffca:	9308      	str	r3, [sp, #32]
 800ffcc:	2300      	movs	r3, #0
 800ffce:	930b      	str	r3, [sp, #44]	; 0x2c
 800ffd0:	e7bf      	b.n	800ff52 <_dtoa_r+0x1e2>
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	9309      	str	r3, [sp, #36]	; 0x24
 800ffd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	dc52      	bgt.n	8010082 <_dtoa_r+0x312>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	9301      	str	r3, [sp, #4]
 800ffe0:	9304      	str	r3, [sp, #16]
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	920a      	str	r2, [sp, #40]	; 0x28
 800ffe6:	e00b      	b.n	8010000 <_dtoa_r+0x290>
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e7f3      	b.n	800ffd4 <_dtoa_r+0x264>
 800ffec:	2300      	movs	r3, #0
 800ffee:	9309      	str	r3, [sp, #36]	; 0x24
 800fff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fff2:	445b      	add	r3, fp
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	3301      	adds	r3, #1
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	9304      	str	r3, [sp, #16]
 800fffc:	bfb8      	it	lt
 800fffe:	2301      	movlt	r3, #1
 8010000:	69e0      	ldr	r0, [r4, #28]
 8010002:	2100      	movs	r1, #0
 8010004:	2204      	movs	r2, #4
 8010006:	f102 0614 	add.w	r6, r2, #20
 801000a:	429e      	cmp	r6, r3
 801000c:	d93d      	bls.n	801008a <_dtoa_r+0x31a>
 801000e:	6041      	str	r1, [r0, #4]
 8010010:	4620      	mov	r0, r4
 8010012:	f000 fd9f 	bl	8010b54 <_Balloc>
 8010016:	9000      	str	r0, [sp, #0]
 8010018:	2800      	cmp	r0, #0
 801001a:	d139      	bne.n	8010090 <_dtoa_r+0x320>
 801001c:	4b16      	ldr	r3, [pc, #88]	; (8010078 <_dtoa_r+0x308>)
 801001e:	4602      	mov	r2, r0
 8010020:	f240 11af 	movw	r1, #431	; 0x1af
 8010024:	e6bd      	b.n	800fda2 <_dtoa_r+0x32>
 8010026:	2301      	movs	r3, #1
 8010028:	e7e1      	b.n	800ffee <_dtoa_r+0x27e>
 801002a:	2501      	movs	r5, #1
 801002c:	2300      	movs	r3, #0
 801002e:	9307      	str	r3, [sp, #28]
 8010030:	9509      	str	r5, [sp, #36]	; 0x24
 8010032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010036:	9301      	str	r3, [sp, #4]
 8010038:	9304      	str	r3, [sp, #16]
 801003a:	2200      	movs	r2, #0
 801003c:	2312      	movs	r3, #18
 801003e:	e7d1      	b.n	800ffe4 <_dtoa_r+0x274>
 8010040:	636f4361 	.word	0x636f4361
 8010044:	3fd287a7 	.word	0x3fd287a7
 8010048:	8b60c8b3 	.word	0x8b60c8b3
 801004c:	3fc68a28 	.word	0x3fc68a28
 8010050:	509f79fb 	.word	0x509f79fb
 8010054:	3fd34413 	.word	0x3fd34413
 8010058:	080123da 	.word	0x080123da
 801005c:	080123f1 	.word	0x080123f1
 8010060:	7ff00000 	.word	0x7ff00000
 8010064:	080123d6 	.word	0x080123d6
 8010068:	080123cd 	.word	0x080123cd
 801006c:	080123aa 	.word	0x080123aa
 8010070:	3ff80000 	.word	0x3ff80000
 8010074:	080124e0 	.word	0x080124e0
 8010078:	08012449 	.word	0x08012449
 801007c:	2301      	movs	r3, #1
 801007e:	9309      	str	r3, [sp, #36]	; 0x24
 8010080:	e7d7      	b.n	8010032 <_dtoa_r+0x2c2>
 8010082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	9304      	str	r3, [sp, #16]
 8010088:	e7ba      	b.n	8010000 <_dtoa_r+0x290>
 801008a:	3101      	adds	r1, #1
 801008c:	0052      	lsls	r2, r2, #1
 801008e:	e7ba      	b.n	8010006 <_dtoa_r+0x296>
 8010090:	69e3      	ldr	r3, [r4, #28]
 8010092:	9a00      	ldr	r2, [sp, #0]
 8010094:	601a      	str	r2, [r3, #0]
 8010096:	9b04      	ldr	r3, [sp, #16]
 8010098:	2b0e      	cmp	r3, #14
 801009a:	f200 80a8 	bhi.w	80101ee <_dtoa_r+0x47e>
 801009e:	2d00      	cmp	r5, #0
 80100a0:	f000 80a5 	beq.w	80101ee <_dtoa_r+0x47e>
 80100a4:	f1bb 0f00 	cmp.w	fp, #0
 80100a8:	dd38      	ble.n	801011c <_dtoa_r+0x3ac>
 80100aa:	4bc0      	ldr	r3, [pc, #768]	; (80103ac <_dtoa_r+0x63c>)
 80100ac:	f00b 020f 	and.w	r2, fp, #15
 80100b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80100b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80100bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80100c0:	d019      	beq.n	80100f6 <_dtoa_r+0x386>
 80100c2:	4bbb      	ldr	r3, [pc, #748]	; (80103b0 <_dtoa_r+0x640>)
 80100c4:	ec51 0b18 	vmov	r0, r1, d8
 80100c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80100cc:	f7f0 fbce 	bl	800086c <__aeabi_ddiv>
 80100d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100d4:	f008 080f 	and.w	r8, r8, #15
 80100d8:	2503      	movs	r5, #3
 80100da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80103b0 <_dtoa_r+0x640>
 80100de:	f1b8 0f00 	cmp.w	r8, #0
 80100e2:	d10a      	bne.n	80100fa <_dtoa_r+0x38a>
 80100e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100e8:	4632      	mov	r2, r6
 80100ea:	463b      	mov	r3, r7
 80100ec:	f7f0 fbbe 	bl	800086c <__aeabi_ddiv>
 80100f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100f4:	e02b      	b.n	801014e <_dtoa_r+0x3de>
 80100f6:	2502      	movs	r5, #2
 80100f8:	e7ef      	b.n	80100da <_dtoa_r+0x36a>
 80100fa:	f018 0f01 	tst.w	r8, #1
 80100fe:	d008      	beq.n	8010112 <_dtoa_r+0x3a2>
 8010100:	4630      	mov	r0, r6
 8010102:	4639      	mov	r1, r7
 8010104:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010108:	f7f0 fa86 	bl	8000618 <__aeabi_dmul>
 801010c:	3501      	adds	r5, #1
 801010e:	4606      	mov	r6, r0
 8010110:	460f      	mov	r7, r1
 8010112:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010116:	f109 0908 	add.w	r9, r9, #8
 801011a:	e7e0      	b.n	80100de <_dtoa_r+0x36e>
 801011c:	f000 809f 	beq.w	801025e <_dtoa_r+0x4ee>
 8010120:	f1cb 0600 	rsb	r6, fp, #0
 8010124:	4ba1      	ldr	r3, [pc, #644]	; (80103ac <_dtoa_r+0x63c>)
 8010126:	4fa2      	ldr	r7, [pc, #648]	; (80103b0 <_dtoa_r+0x640>)
 8010128:	f006 020f 	and.w	r2, r6, #15
 801012c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010134:	ec51 0b18 	vmov	r0, r1, d8
 8010138:	f7f0 fa6e 	bl	8000618 <__aeabi_dmul>
 801013c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010140:	1136      	asrs	r6, r6, #4
 8010142:	2300      	movs	r3, #0
 8010144:	2502      	movs	r5, #2
 8010146:	2e00      	cmp	r6, #0
 8010148:	d17e      	bne.n	8010248 <_dtoa_r+0x4d8>
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1d0      	bne.n	80100f0 <_dtoa_r+0x380>
 801014e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010150:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	f000 8084 	beq.w	8010262 <_dtoa_r+0x4f2>
 801015a:	4b96      	ldr	r3, [pc, #600]	; (80103b4 <_dtoa_r+0x644>)
 801015c:	2200      	movs	r2, #0
 801015e:	4640      	mov	r0, r8
 8010160:	4649      	mov	r1, r9
 8010162:	f7f0 fccb 	bl	8000afc <__aeabi_dcmplt>
 8010166:	2800      	cmp	r0, #0
 8010168:	d07b      	beq.n	8010262 <_dtoa_r+0x4f2>
 801016a:	9b04      	ldr	r3, [sp, #16]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d078      	beq.n	8010262 <_dtoa_r+0x4f2>
 8010170:	9b01      	ldr	r3, [sp, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	dd39      	ble.n	80101ea <_dtoa_r+0x47a>
 8010176:	4b90      	ldr	r3, [pc, #576]	; (80103b8 <_dtoa_r+0x648>)
 8010178:	2200      	movs	r2, #0
 801017a:	4640      	mov	r0, r8
 801017c:	4649      	mov	r1, r9
 801017e:	f7f0 fa4b 	bl	8000618 <__aeabi_dmul>
 8010182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010186:	9e01      	ldr	r6, [sp, #4]
 8010188:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801018c:	3501      	adds	r5, #1
 801018e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010192:	4628      	mov	r0, r5
 8010194:	f7f0 f9d6 	bl	8000544 <__aeabi_i2d>
 8010198:	4642      	mov	r2, r8
 801019a:	464b      	mov	r3, r9
 801019c:	f7f0 fa3c 	bl	8000618 <__aeabi_dmul>
 80101a0:	4b86      	ldr	r3, [pc, #536]	; (80103bc <_dtoa_r+0x64c>)
 80101a2:	2200      	movs	r2, #0
 80101a4:	f7f0 f882 	bl	80002ac <__adddf3>
 80101a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80101ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101b0:	9303      	str	r3, [sp, #12]
 80101b2:	2e00      	cmp	r6, #0
 80101b4:	d158      	bne.n	8010268 <_dtoa_r+0x4f8>
 80101b6:	4b82      	ldr	r3, [pc, #520]	; (80103c0 <_dtoa_r+0x650>)
 80101b8:	2200      	movs	r2, #0
 80101ba:	4640      	mov	r0, r8
 80101bc:	4649      	mov	r1, r9
 80101be:	f7f0 f873 	bl	80002a8 <__aeabi_dsub>
 80101c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101c6:	4680      	mov	r8, r0
 80101c8:	4689      	mov	r9, r1
 80101ca:	f7f0 fcb5 	bl	8000b38 <__aeabi_dcmpgt>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	f040 8296 	bne.w	8010700 <_dtoa_r+0x990>
 80101d4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80101d8:	4640      	mov	r0, r8
 80101da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101de:	4649      	mov	r1, r9
 80101e0:	f7f0 fc8c 	bl	8000afc <__aeabi_dcmplt>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	f040 8289 	bne.w	80106fc <_dtoa_r+0x98c>
 80101ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80101ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f2c0 814e 	blt.w	8010492 <_dtoa_r+0x722>
 80101f6:	f1bb 0f0e 	cmp.w	fp, #14
 80101fa:	f300 814a 	bgt.w	8010492 <_dtoa_r+0x722>
 80101fe:	4b6b      	ldr	r3, [pc, #428]	; (80103ac <_dtoa_r+0x63c>)
 8010200:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010204:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801020a:	2b00      	cmp	r3, #0
 801020c:	f280 80dc 	bge.w	80103c8 <_dtoa_r+0x658>
 8010210:	9b04      	ldr	r3, [sp, #16]
 8010212:	2b00      	cmp	r3, #0
 8010214:	f300 80d8 	bgt.w	80103c8 <_dtoa_r+0x658>
 8010218:	f040 826f 	bne.w	80106fa <_dtoa_r+0x98a>
 801021c:	4b68      	ldr	r3, [pc, #416]	; (80103c0 <_dtoa_r+0x650>)
 801021e:	2200      	movs	r2, #0
 8010220:	4640      	mov	r0, r8
 8010222:	4649      	mov	r1, r9
 8010224:	f7f0 f9f8 	bl	8000618 <__aeabi_dmul>
 8010228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801022c:	f7f0 fc7a 	bl	8000b24 <__aeabi_dcmpge>
 8010230:	9e04      	ldr	r6, [sp, #16]
 8010232:	4637      	mov	r7, r6
 8010234:	2800      	cmp	r0, #0
 8010236:	f040 8245 	bne.w	80106c4 <_dtoa_r+0x954>
 801023a:	9d00      	ldr	r5, [sp, #0]
 801023c:	2331      	movs	r3, #49	; 0x31
 801023e:	f805 3b01 	strb.w	r3, [r5], #1
 8010242:	f10b 0b01 	add.w	fp, fp, #1
 8010246:	e241      	b.n	80106cc <_dtoa_r+0x95c>
 8010248:	07f2      	lsls	r2, r6, #31
 801024a:	d505      	bpl.n	8010258 <_dtoa_r+0x4e8>
 801024c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010250:	f7f0 f9e2 	bl	8000618 <__aeabi_dmul>
 8010254:	3501      	adds	r5, #1
 8010256:	2301      	movs	r3, #1
 8010258:	1076      	asrs	r6, r6, #1
 801025a:	3708      	adds	r7, #8
 801025c:	e773      	b.n	8010146 <_dtoa_r+0x3d6>
 801025e:	2502      	movs	r5, #2
 8010260:	e775      	b.n	801014e <_dtoa_r+0x3de>
 8010262:	9e04      	ldr	r6, [sp, #16]
 8010264:	465f      	mov	r7, fp
 8010266:	e792      	b.n	801018e <_dtoa_r+0x41e>
 8010268:	9900      	ldr	r1, [sp, #0]
 801026a:	4b50      	ldr	r3, [pc, #320]	; (80103ac <_dtoa_r+0x63c>)
 801026c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010270:	4431      	add	r1, r6
 8010272:	9102      	str	r1, [sp, #8]
 8010274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010276:	eeb0 9a47 	vmov.f32	s18, s14
 801027a:	eef0 9a67 	vmov.f32	s19, s15
 801027e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010286:	2900      	cmp	r1, #0
 8010288:	d044      	beq.n	8010314 <_dtoa_r+0x5a4>
 801028a:	494e      	ldr	r1, [pc, #312]	; (80103c4 <_dtoa_r+0x654>)
 801028c:	2000      	movs	r0, #0
 801028e:	f7f0 faed 	bl	800086c <__aeabi_ddiv>
 8010292:	ec53 2b19 	vmov	r2, r3, d9
 8010296:	f7f0 f807 	bl	80002a8 <__aeabi_dsub>
 801029a:	9d00      	ldr	r5, [sp, #0]
 801029c:	ec41 0b19 	vmov	d9, r0, r1
 80102a0:	4649      	mov	r1, r9
 80102a2:	4640      	mov	r0, r8
 80102a4:	f7f0 fc68 	bl	8000b78 <__aeabi_d2iz>
 80102a8:	4606      	mov	r6, r0
 80102aa:	f7f0 f94b 	bl	8000544 <__aeabi_i2d>
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	4640      	mov	r0, r8
 80102b4:	4649      	mov	r1, r9
 80102b6:	f7ef fff7 	bl	80002a8 <__aeabi_dsub>
 80102ba:	3630      	adds	r6, #48	; 0x30
 80102bc:	f805 6b01 	strb.w	r6, [r5], #1
 80102c0:	ec53 2b19 	vmov	r2, r3, d9
 80102c4:	4680      	mov	r8, r0
 80102c6:	4689      	mov	r9, r1
 80102c8:	f7f0 fc18 	bl	8000afc <__aeabi_dcmplt>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d164      	bne.n	801039a <_dtoa_r+0x62a>
 80102d0:	4642      	mov	r2, r8
 80102d2:	464b      	mov	r3, r9
 80102d4:	4937      	ldr	r1, [pc, #220]	; (80103b4 <_dtoa_r+0x644>)
 80102d6:	2000      	movs	r0, #0
 80102d8:	f7ef ffe6 	bl	80002a8 <__aeabi_dsub>
 80102dc:	ec53 2b19 	vmov	r2, r3, d9
 80102e0:	f7f0 fc0c 	bl	8000afc <__aeabi_dcmplt>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	f040 80b6 	bne.w	8010456 <_dtoa_r+0x6e6>
 80102ea:	9b02      	ldr	r3, [sp, #8]
 80102ec:	429d      	cmp	r5, r3
 80102ee:	f43f af7c 	beq.w	80101ea <_dtoa_r+0x47a>
 80102f2:	4b31      	ldr	r3, [pc, #196]	; (80103b8 <_dtoa_r+0x648>)
 80102f4:	ec51 0b19 	vmov	r0, r1, d9
 80102f8:	2200      	movs	r2, #0
 80102fa:	f7f0 f98d 	bl	8000618 <__aeabi_dmul>
 80102fe:	4b2e      	ldr	r3, [pc, #184]	; (80103b8 <_dtoa_r+0x648>)
 8010300:	ec41 0b19 	vmov	d9, r0, r1
 8010304:	2200      	movs	r2, #0
 8010306:	4640      	mov	r0, r8
 8010308:	4649      	mov	r1, r9
 801030a:	f7f0 f985 	bl	8000618 <__aeabi_dmul>
 801030e:	4680      	mov	r8, r0
 8010310:	4689      	mov	r9, r1
 8010312:	e7c5      	b.n	80102a0 <_dtoa_r+0x530>
 8010314:	ec51 0b17 	vmov	r0, r1, d7
 8010318:	f7f0 f97e 	bl	8000618 <__aeabi_dmul>
 801031c:	9b02      	ldr	r3, [sp, #8]
 801031e:	9d00      	ldr	r5, [sp, #0]
 8010320:	930f      	str	r3, [sp, #60]	; 0x3c
 8010322:	ec41 0b19 	vmov	d9, r0, r1
 8010326:	4649      	mov	r1, r9
 8010328:	4640      	mov	r0, r8
 801032a:	f7f0 fc25 	bl	8000b78 <__aeabi_d2iz>
 801032e:	4606      	mov	r6, r0
 8010330:	f7f0 f908 	bl	8000544 <__aeabi_i2d>
 8010334:	3630      	adds	r6, #48	; 0x30
 8010336:	4602      	mov	r2, r0
 8010338:	460b      	mov	r3, r1
 801033a:	4640      	mov	r0, r8
 801033c:	4649      	mov	r1, r9
 801033e:	f7ef ffb3 	bl	80002a8 <__aeabi_dsub>
 8010342:	f805 6b01 	strb.w	r6, [r5], #1
 8010346:	9b02      	ldr	r3, [sp, #8]
 8010348:	429d      	cmp	r5, r3
 801034a:	4680      	mov	r8, r0
 801034c:	4689      	mov	r9, r1
 801034e:	f04f 0200 	mov.w	r2, #0
 8010352:	d124      	bne.n	801039e <_dtoa_r+0x62e>
 8010354:	4b1b      	ldr	r3, [pc, #108]	; (80103c4 <_dtoa_r+0x654>)
 8010356:	ec51 0b19 	vmov	r0, r1, d9
 801035a:	f7ef ffa7 	bl	80002ac <__adddf3>
 801035e:	4602      	mov	r2, r0
 8010360:	460b      	mov	r3, r1
 8010362:	4640      	mov	r0, r8
 8010364:	4649      	mov	r1, r9
 8010366:	f7f0 fbe7 	bl	8000b38 <__aeabi_dcmpgt>
 801036a:	2800      	cmp	r0, #0
 801036c:	d173      	bne.n	8010456 <_dtoa_r+0x6e6>
 801036e:	ec53 2b19 	vmov	r2, r3, d9
 8010372:	4914      	ldr	r1, [pc, #80]	; (80103c4 <_dtoa_r+0x654>)
 8010374:	2000      	movs	r0, #0
 8010376:	f7ef ff97 	bl	80002a8 <__aeabi_dsub>
 801037a:	4602      	mov	r2, r0
 801037c:	460b      	mov	r3, r1
 801037e:	4640      	mov	r0, r8
 8010380:	4649      	mov	r1, r9
 8010382:	f7f0 fbbb 	bl	8000afc <__aeabi_dcmplt>
 8010386:	2800      	cmp	r0, #0
 8010388:	f43f af2f 	beq.w	80101ea <_dtoa_r+0x47a>
 801038c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801038e:	1e6b      	subs	r3, r5, #1
 8010390:	930f      	str	r3, [sp, #60]	; 0x3c
 8010392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010396:	2b30      	cmp	r3, #48	; 0x30
 8010398:	d0f8      	beq.n	801038c <_dtoa_r+0x61c>
 801039a:	46bb      	mov	fp, r7
 801039c:	e04a      	b.n	8010434 <_dtoa_r+0x6c4>
 801039e:	4b06      	ldr	r3, [pc, #24]	; (80103b8 <_dtoa_r+0x648>)
 80103a0:	f7f0 f93a 	bl	8000618 <__aeabi_dmul>
 80103a4:	4680      	mov	r8, r0
 80103a6:	4689      	mov	r9, r1
 80103a8:	e7bd      	b.n	8010326 <_dtoa_r+0x5b6>
 80103aa:	bf00      	nop
 80103ac:	080124e0 	.word	0x080124e0
 80103b0:	080124b8 	.word	0x080124b8
 80103b4:	3ff00000 	.word	0x3ff00000
 80103b8:	40240000 	.word	0x40240000
 80103bc:	401c0000 	.word	0x401c0000
 80103c0:	40140000 	.word	0x40140000
 80103c4:	3fe00000 	.word	0x3fe00000
 80103c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80103cc:	9d00      	ldr	r5, [sp, #0]
 80103ce:	4642      	mov	r2, r8
 80103d0:	464b      	mov	r3, r9
 80103d2:	4630      	mov	r0, r6
 80103d4:	4639      	mov	r1, r7
 80103d6:	f7f0 fa49 	bl	800086c <__aeabi_ddiv>
 80103da:	f7f0 fbcd 	bl	8000b78 <__aeabi_d2iz>
 80103de:	9001      	str	r0, [sp, #4]
 80103e0:	f7f0 f8b0 	bl	8000544 <__aeabi_i2d>
 80103e4:	4642      	mov	r2, r8
 80103e6:	464b      	mov	r3, r9
 80103e8:	f7f0 f916 	bl	8000618 <__aeabi_dmul>
 80103ec:	4602      	mov	r2, r0
 80103ee:	460b      	mov	r3, r1
 80103f0:	4630      	mov	r0, r6
 80103f2:	4639      	mov	r1, r7
 80103f4:	f7ef ff58 	bl	80002a8 <__aeabi_dsub>
 80103f8:	9e01      	ldr	r6, [sp, #4]
 80103fa:	9f04      	ldr	r7, [sp, #16]
 80103fc:	3630      	adds	r6, #48	; 0x30
 80103fe:	f805 6b01 	strb.w	r6, [r5], #1
 8010402:	9e00      	ldr	r6, [sp, #0]
 8010404:	1bae      	subs	r6, r5, r6
 8010406:	42b7      	cmp	r7, r6
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	d134      	bne.n	8010478 <_dtoa_r+0x708>
 801040e:	f7ef ff4d 	bl	80002ac <__adddf3>
 8010412:	4642      	mov	r2, r8
 8010414:	464b      	mov	r3, r9
 8010416:	4606      	mov	r6, r0
 8010418:	460f      	mov	r7, r1
 801041a:	f7f0 fb8d 	bl	8000b38 <__aeabi_dcmpgt>
 801041e:	b9c8      	cbnz	r0, 8010454 <_dtoa_r+0x6e4>
 8010420:	4642      	mov	r2, r8
 8010422:	464b      	mov	r3, r9
 8010424:	4630      	mov	r0, r6
 8010426:	4639      	mov	r1, r7
 8010428:	f7f0 fb5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801042c:	b110      	cbz	r0, 8010434 <_dtoa_r+0x6c4>
 801042e:	9b01      	ldr	r3, [sp, #4]
 8010430:	07db      	lsls	r3, r3, #31
 8010432:	d40f      	bmi.n	8010454 <_dtoa_r+0x6e4>
 8010434:	4651      	mov	r1, sl
 8010436:	4620      	mov	r0, r4
 8010438:	f000 fbcc 	bl	8010bd4 <_Bfree>
 801043c:	2300      	movs	r3, #0
 801043e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010440:	702b      	strb	r3, [r5, #0]
 8010442:	f10b 0301 	add.w	r3, fp, #1
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801044a:	2b00      	cmp	r3, #0
 801044c:	f43f ace2 	beq.w	800fe14 <_dtoa_r+0xa4>
 8010450:	601d      	str	r5, [r3, #0]
 8010452:	e4df      	b.n	800fe14 <_dtoa_r+0xa4>
 8010454:	465f      	mov	r7, fp
 8010456:	462b      	mov	r3, r5
 8010458:	461d      	mov	r5, r3
 801045a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801045e:	2a39      	cmp	r2, #57	; 0x39
 8010460:	d106      	bne.n	8010470 <_dtoa_r+0x700>
 8010462:	9a00      	ldr	r2, [sp, #0]
 8010464:	429a      	cmp	r2, r3
 8010466:	d1f7      	bne.n	8010458 <_dtoa_r+0x6e8>
 8010468:	9900      	ldr	r1, [sp, #0]
 801046a:	2230      	movs	r2, #48	; 0x30
 801046c:	3701      	adds	r7, #1
 801046e:	700a      	strb	r2, [r1, #0]
 8010470:	781a      	ldrb	r2, [r3, #0]
 8010472:	3201      	adds	r2, #1
 8010474:	701a      	strb	r2, [r3, #0]
 8010476:	e790      	b.n	801039a <_dtoa_r+0x62a>
 8010478:	4ba3      	ldr	r3, [pc, #652]	; (8010708 <_dtoa_r+0x998>)
 801047a:	2200      	movs	r2, #0
 801047c:	f7f0 f8cc 	bl	8000618 <__aeabi_dmul>
 8010480:	2200      	movs	r2, #0
 8010482:	2300      	movs	r3, #0
 8010484:	4606      	mov	r6, r0
 8010486:	460f      	mov	r7, r1
 8010488:	f7f0 fb2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801048c:	2800      	cmp	r0, #0
 801048e:	d09e      	beq.n	80103ce <_dtoa_r+0x65e>
 8010490:	e7d0      	b.n	8010434 <_dtoa_r+0x6c4>
 8010492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010494:	2a00      	cmp	r2, #0
 8010496:	f000 80ca 	beq.w	801062e <_dtoa_r+0x8be>
 801049a:	9a07      	ldr	r2, [sp, #28]
 801049c:	2a01      	cmp	r2, #1
 801049e:	f300 80ad 	bgt.w	80105fc <_dtoa_r+0x88c>
 80104a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104a4:	2a00      	cmp	r2, #0
 80104a6:	f000 80a5 	beq.w	80105f4 <_dtoa_r+0x884>
 80104aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80104ae:	9e08      	ldr	r6, [sp, #32]
 80104b0:	9d05      	ldr	r5, [sp, #20]
 80104b2:	9a05      	ldr	r2, [sp, #20]
 80104b4:	441a      	add	r2, r3
 80104b6:	9205      	str	r2, [sp, #20]
 80104b8:	9a06      	ldr	r2, [sp, #24]
 80104ba:	2101      	movs	r1, #1
 80104bc:	441a      	add	r2, r3
 80104be:	4620      	mov	r0, r4
 80104c0:	9206      	str	r2, [sp, #24]
 80104c2:	f000 fc3d 	bl	8010d40 <__i2b>
 80104c6:	4607      	mov	r7, r0
 80104c8:	b165      	cbz	r5, 80104e4 <_dtoa_r+0x774>
 80104ca:	9b06      	ldr	r3, [sp, #24]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	dd09      	ble.n	80104e4 <_dtoa_r+0x774>
 80104d0:	42ab      	cmp	r3, r5
 80104d2:	9a05      	ldr	r2, [sp, #20]
 80104d4:	bfa8      	it	ge
 80104d6:	462b      	movge	r3, r5
 80104d8:	1ad2      	subs	r2, r2, r3
 80104da:	9205      	str	r2, [sp, #20]
 80104dc:	9a06      	ldr	r2, [sp, #24]
 80104de:	1aed      	subs	r5, r5, r3
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	9306      	str	r3, [sp, #24]
 80104e4:	9b08      	ldr	r3, [sp, #32]
 80104e6:	b1f3      	cbz	r3, 8010526 <_dtoa_r+0x7b6>
 80104e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f000 80a3 	beq.w	8010636 <_dtoa_r+0x8c6>
 80104f0:	2e00      	cmp	r6, #0
 80104f2:	dd10      	ble.n	8010516 <_dtoa_r+0x7a6>
 80104f4:	4639      	mov	r1, r7
 80104f6:	4632      	mov	r2, r6
 80104f8:	4620      	mov	r0, r4
 80104fa:	f000 fce1 	bl	8010ec0 <__pow5mult>
 80104fe:	4652      	mov	r2, sl
 8010500:	4601      	mov	r1, r0
 8010502:	4607      	mov	r7, r0
 8010504:	4620      	mov	r0, r4
 8010506:	f000 fc31 	bl	8010d6c <__multiply>
 801050a:	4651      	mov	r1, sl
 801050c:	4680      	mov	r8, r0
 801050e:	4620      	mov	r0, r4
 8010510:	f000 fb60 	bl	8010bd4 <_Bfree>
 8010514:	46c2      	mov	sl, r8
 8010516:	9b08      	ldr	r3, [sp, #32]
 8010518:	1b9a      	subs	r2, r3, r6
 801051a:	d004      	beq.n	8010526 <_dtoa_r+0x7b6>
 801051c:	4651      	mov	r1, sl
 801051e:	4620      	mov	r0, r4
 8010520:	f000 fcce 	bl	8010ec0 <__pow5mult>
 8010524:	4682      	mov	sl, r0
 8010526:	2101      	movs	r1, #1
 8010528:	4620      	mov	r0, r4
 801052a:	f000 fc09 	bl	8010d40 <__i2b>
 801052e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010530:	2b00      	cmp	r3, #0
 8010532:	4606      	mov	r6, r0
 8010534:	f340 8081 	ble.w	801063a <_dtoa_r+0x8ca>
 8010538:	461a      	mov	r2, r3
 801053a:	4601      	mov	r1, r0
 801053c:	4620      	mov	r0, r4
 801053e:	f000 fcbf 	bl	8010ec0 <__pow5mult>
 8010542:	9b07      	ldr	r3, [sp, #28]
 8010544:	2b01      	cmp	r3, #1
 8010546:	4606      	mov	r6, r0
 8010548:	dd7a      	ble.n	8010640 <_dtoa_r+0x8d0>
 801054a:	f04f 0800 	mov.w	r8, #0
 801054e:	6933      	ldr	r3, [r6, #16]
 8010550:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010554:	6918      	ldr	r0, [r3, #16]
 8010556:	f000 fba5 	bl	8010ca4 <__hi0bits>
 801055a:	f1c0 0020 	rsb	r0, r0, #32
 801055e:	9b06      	ldr	r3, [sp, #24]
 8010560:	4418      	add	r0, r3
 8010562:	f010 001f 	ands.w	r0, r0, #31
 8010566:	f000 8094 	beq.w	8010692 <_dtoa_r+0x922>
 801056a:	f1c0 0320 	rsb	r3, r0, #32
 801056e:	2b04      	cmp	r3, #4
 8010570:	f340 8085 	ble.w	801067e <_dtoa_r+0x90e>
 8010574:	9b05      	ldr	r3, [sp, #20]
 8010576:	f1c0 001c 	rsb	r0, r0, #28
 801057a:	4403      	add	r3, r0
 801057c:	9305      	str	r3, [sp, #20]
 801057e:	9b06      	ldr	r3, [sp, #24]
 8010580:	4403      	add	r3, r0
 8010582:	4405      	add	r5, r0
 8010584:	9306      	str	r3, [sp, #24]
 8010586:	9b05      	ldr	r3, [sp, #20]
 8010588:	2b00      	cmp	r3, #0
 801058a:	dd05      	ble.n	8010598 <_dtoa_r+0x828>
 801058c:	4651      	mov	r1, sl
 801058e:	461a      	mov	r2, r3
 8010590:	4620      	mov	r0, r4
 8010592:	f000 fcef 	bl	8010f74 <__lshift>
 8010596:	4682      	mov	sl, r0
 8010598:	9b06      	ldr	r3, [sp, #24]
 801059a:	2b00      	cmp	r3, #0
 801059c:	dd05      	ble.n	80105aa <_dtoa_r+0x83a>
 801059e:	4631      	mov	r1, r6
 80105a0:	461a      	mov	r2, r3
 80105a2:	4620      	mov	r0, r4
 80105a4:	f000 fce6 	bl	8010f74 <__lshift>
 80105a8:	4606      	mov	r6, r0
 80105aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d072      	beq.n	8010696 <_dtoa_r+0x926>
 80105b0:	4631      	mov	r1, r6
 80105b2:	4650      	mov	r0, sl
 80105b4:	f000 fd4a 	bl	801104c <__mcmp>
 80105b8:	2800      	cmp	r0, #0
 80105ba:	da6c      	bge.n	8010696 <_dtoa_r+0x926>
 80105bc:	2300      	movs	r3, #0
 80105be:	4651      	mov	r1, sl
 80105c0:	220a      	movs	r2, #10
 80105c2:	4620      	mov	r0, r4
 80105c4:	f000 fb28 	bl	8010c18 <__multadd>
 80105c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80105ce:	4682      	mov	sl, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	f000 81b0 	beq.w	8010936 <_dtoa_r+0xbc6>
 80105d6:	2300      	movs	r3, #0
 80105d8:	4639      	mov	r1, r7
 80105da:	220a      	movs	r2, #10
 80105dc:	4620      	mov	r0, r4
 80105de:	f000 fb1b 	bl	8010c18 <__multadd>
 80105e2:	9b01      	ldr	r3, [sp, #4]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	4607      	mov	r7, r0
 80105e8:	f300 8096 	bgt.w	8010718 <_dtoa_r+0x9a8>
 80105ec:	9b07      	ldr	r3, [sp, #28]
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	dc59      	bgt.n	80106a6 <_dtoa_r+0x936>
 80105f2:	e091      	b.n	8010718 <_dtoa_r+0x9a8>
 80105f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80105fa:	e758      	b.n	80104ae <_dtoa_r+0x73e>
 80105fc:	9b04      	ldr	r3, [sp, #16]
 80105fe:	1e5e      	subs	r6, r3, #1
 8010600:	9b08      	ldr	r3, [sp, #32]
 8010602:	42b3      	cmp	r3, r6
 8010604:	bfbf      	itttt	lt
 8010606:	9b08      	ldrlt	r3, [sp, #32]
 8010608:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801060a:	9608      	strlt	r6, [sp, #32]
 801060c:	1af3      	sublt	r3, r6, r3
 801060e:	bfb4      	ite	lt
 8010610:	18d2      	addlt	r2, r2, r3
 8010612:	1b9e      	subge	r6, r3, r6
 8010614:	9b04      	ldr	r3, [sp, #16]
 8010616:	bfbc      	itt	lt
 8010618:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801061a:	2600      	movlt	r6, #0
 801061c:	2b00      	cmp	r3, #0
 801061e:	bfb7      	itett	lt
 8010620:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010624:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010628:	1a9d      	sublt	r5, r3, r2
 801062a:	2300      	movlt	r3, #0
 801062c:	e741      	b.n	80104b2 <_dtoa_r+0x742>
 801062e:	9e08      	ldr	r6, [sp, #32]
 8010630:	9d05      	ldr	r5, [sp, #20]
 8010632:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010634:	e748      	b.n	80104c8 <_dtoa_r+0x758>
 8010636:	9a08      	ldr	r2, [sp, #32]
 8010638:	e770      	b.n	801051c <_dtoa_r+0x7ac>
 801063a:	9b07      	ldr	r3, [sp, #28]
 801063c:	2b01      	cmp	r3, #1
 801063e:	dc19      	bgt.n	8010674 <_dtoa_r+0x904>
 8010640:	9b02      	ldr	r3, [sp, #8]
 8010642:	b9bb      	cbnz	r3, 8010674 <_dtoa_r+0x904>
 8010644:	9b03      	ldr	r3, [sp, #12]
 8010646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801064a:	b99b      	cbnz	r3, 8010674 <_dtoa_r+0x904>
 801064c:	9b03      	ldr	r3, [sp, #12]
 801064e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010652:	0d1b      	lsrs	r3, r3, #20
 8010654:	051b      	lsls	r3, r3, #20
 8010656:	b183      	cbz	r3, 801067a <_dtoa_r+0x90a>
 8010658:	9b05      	ldr	r3, [sp, #20]
 801065a:	3301      	adds	r3, #1
 801065c:	9305      	str	r3, [sp, #20]
 801065e:	9b06      	ldr	r3, [sp, #24]
 8010660:	3301      	adds	r3, #1
 8010662:	9306      	str	r3, [sp, #24]
 8010664:	f04f 0801 	mov.w	r8, #1
 8010668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801066a:	2b00      	cmp	r3, #0
 801066c:	f47f af6f 	bne.w	801054e <_dtoa_r+0x7de>
 8010670:	2001      	movs	r0, #1
 8010672:	e774      	b.n	801055e <_dtoa_r+0x7ee>
 8010674:	f04f 0800 	mov.w	r8, #0
 8010678:	e7f6      	b.n	8010668 <_dtoa_r+0x8f8>
 801067a:	4698      	mov	r8, r3
 801067c:	e7f4      	b.n	8010668 <_dtoa_r+0x8f8>
 801067e:	d082      	beq.n	8010586 <_dtoa_r+0x816>
 8010680:	9a05      	ldr	r2, [sp, #20]
 8010682:	331c      	adds	r3, #28
 8010684:	441a      	add	r2, r3
 8010686:	9205      	str	r2, [sp, #20]
 8010688:	9a06      	ldr	r2, [sp, #24]
 801068a:	441a      	add	r2, r3
 801068c:	441d      	add	r5, r3
 801068e:	9206      	str	r2, [sp, #24]
 8010690:	e779      	b.n	8010586 <_dtoa_r+0x816>
 8010692:	4603      	mov	r3, r0
 8010694:	e7f4      	b.n	8010680 <_dtoa_r+0x910>
 8010696:	9b04      	ldr	r3, [sp, #16]
 8010698:	2b00      	cmp	r3, #0
 801069a:	dc37      	bgt.n	801070c <_dtoa_r+0x99c>
 801069c:	9b07      	ldr	r3, [sp, #28]
 801069e:	2b02      	cmp	r3, #2
 80106a0:	dd34      	ble.n	801070c <_dtoa_r+0x99c>
 80106a2:	9b04      	ldr	r3, [sp, #16]
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	9b01      	ldr	r3, [sp, #4]
 80106a8:	b963      	cbnz	r3, 80106c4 <_dtoa_r+0x954>
 80106aa:	4631      	mov	r1, r6
 80106ac:	2205      	movs	r2, #5
 80106ae:	4620      	mov	r0, r4
 80106b0:	f000 fab2 	bl	8010c18 <__multadd>
 80106b4:	4601      	mov	r1, r0
 80106b6:	4606      	mov	r6, r0
 80106b8:	4650      	mov	r0, sl
 80106ba:	f000 fcc7 	bl	801104c <__mcmp>
 80106be:	2800      	cmp	r0, #0
 80106c0:	f73f adbb 	bgt.w	801023a <_dtoa_r+0x4ca>
 80106c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106c6:	9d00      	ldr	r5, [sp, #0]
 80106c8:	ea6f 0b03 	mvn.w	fp, r3
 80106cc:	f04f 0800 	mov.w	r8, #0
 80106d0:	4631      	mov	r1, r6
 80106d2:	4620      	mov	r0, r4
 80106d4:	f000 fa7e 	bl	8010bd4 <_Bfree>
 80106d8:	2f00      	cmp	r7, #0
 80106da:	f43f aeab 	beq.w	8010434 <_dtoa_r+0x6c4>
 80106de:	f1b8 0f00 	cmp.w	r8, #0
 80106e2:	d005      	beq.n	80106f0 <_dtoa_r+0x980>
 80106e4:	45b8      	cmp	r8, r7
 80106e6:	d003      	beq.n	80106f0 <_dtoa_r+0x980>
 80106e8:	4641      	mov	r1, r8
 80106ea:	4620      	mov	r0, r4
 80106ec:	f000 fa72 	bl	8010bd4 <_Bfree>
 80106f0:	4639      	mov	r1, r7
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 fa6e 	bl	8010bd4 <_Bfree>
 80106f8:	e69c      	b.n	8010434 <_dtoa_r+0x6c4>
 80106fa:	2600      	movs	r6, #0
 80106fc:	4637      	mov	r7, r6
 80106fe:	e7e1      	b.n	80106c4 <_dtoa_r+0x954>
 8010700:	46bb      	mov	fp, r7
 8010702:	4637      	mov	r7, r6
 8010704:	e599      	b.n	801023a <_dtoa_r+0x4ca>
 8010706:	bf00      	nop
 8010708:	40240000 	.word	0x40240000
 801070c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801070e:	2b00      	cmp	r3, #0
 8010710:	f000 80c8 	beq.w	80108a4 <_dtoa_r+0xb34>
 8010714:	9b04      	ldr	r3, [sp, #16]
 8010716:	9301      	str	r3, [sp, #4]
 8010718:	2d00      	cmp	r5, #0
 801071a:	dd05      	ble.n	8010728 <_dtoa_r+0x9b8>
 801071c:	4639      	mov	r1, r7
 801071e:	462a      	mov	r2, r5
 8010720:	4620      	mov	r0, r4
 8010722:	f000 fc27 	bl	8010f74 <__lshift>
 8010726:	4607      	mov	r7, r0
 8010728:	f1b8 0f00 	cmp.w	r8, #0
 801072c:	d05b      	beq.n	80107e6 <_dtoa_r+0xa76>
 801072e:	6879      	ldr	r1, [r7, #4]
 8010730:	4620      	mov	r0, r4
 8010732:	f000 fa0f 	bl	8010b54 <_Balloc>
 8010736:	4605      	mov	r5, r0
 8010738:	b928      	cbnz	r0, 8010746 <_dtoa_r+0x9d6>
 801073a:	4b83      	ldr	r3, [pc, #524]	; (8010948 <_dtoa_r+0xbd8>)
 801073c:	4602      	mov	r2, r0
 801073e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010742:	f7ff bb2e 	b.w	800fda2 <_dtoa_r+0x32>
 8010746:	693a      	ldr	r2, [r7, #16]
 8010748:	3202      	adds	r2, #2
 801074a:	0092      	lsls	r2, r2, #2
 801074c:	f107 010c 	add.w	r1, r7, #12
 8010750:	300c      	adds	r0, #12
 8010752:	f7ff fa76 	bl	800fc42 <memcpy>
 8010756:	2201      	movs	r2, #1
 8010758:	4629      	mov	r1, r5
 801075a:	4620      	mov	r0, r4
 801075c:	f000 fc0a 	bl	8010f74 <__lshift>
 8010760:	9b00      	ldr	r3, [sp, #0]
 8010762:	3301      	adds	r3, #1
 8010764:	9304      	str	r3, [sp, #16]
 8010766:	e9dd 2300 	ldrd	r2, r3, [sp]
 801076a:	4413      	add	r3, r2
 801076c:	9308      	str	r3, [sp, #32]
 801076e:	9b02      	ldr	r3, [sp, #8]
 8010770:	f003 0301 	and.w	r3, r3, #1
 8010774:	46b8      	mov	r8, r7
 8010776:	9306      	str	r3, [sp, #24]
 8010778:	4607      	mov	r7, r0
 801077a:	9b04      	ldr	r3, [sp, #16]
 801077c:	4631      	mov	r1, r6
 801077e:	3b01      	subs	r3, #1
 8010780:	4650      	mov	r0, sl
 8010782:	9301      	str	r3, [sp, #4]
 8010784:	f7ff fa6b 	bl	800fc5e <quorem>
 8010788:	4641      	mov	r1, r8
 801078a:	9002      	str	r0, [sp, #8]
 801078c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010790:	4650      	mov	r0, sl
 8010792:	f000 fc5b 	bl	801104c <__mcmp>
 8010796:	463a      	mov	r2, r7
 8010798:	9005      	str	r0, [sp, #20]
 801079a:	4631      	mov	r1, r6
 801079c:	4620      	mov	r0, r4
 801079e:	f000 fc71 	bl	8011084 <__mdiff>
 80107a2:	68c2      	ldr	r2, [r0, #12]
 80107a4:	4605      	mov	r5, r0
 80107a6:	bb02      	cbnz	r2, 80107ea <_dtoa_r+0xa7a>
 80107a8:	4601      	mov	r1, r0
 80107aa:	4650      	mov	r0, sl
 80107ac:	f000 fc4e 	bl	801104c <__mcmp>
 80107b0:	4602      	mov	r2, r0
 80107b2:	4629      	mov	r1, r5
 80107b4:	4620      	mov	r0, r4
 80107b6:	9209      	str	r2, [sp, #36]	; 0x24
 80107b8:	f000 fa0c 	bl	8010bd4 <_Bfree>
 80107bc:	9b07      	ldr	r3, [sp, #28]
 80107be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107c0:	9d04      	ldr	r5, [sp, #16]
 80107c2:	ea43 0102 	orr.w	r1, r3, r2
 80107c6:	9b06      	ldr	r3, [sp, #24]
 80107c8:	4319      	orrs	r1, r3
 80107ca:	d110      	bne.n	80107ee <_dtoa_r+0xa7e>
 80107cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80107d0:	d029      	beq.n	8010826 <_dtoa_r+0xab6>
 80107d2:	9b05      	ldr	r3, [sp, #20]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	dd02      	ble.n	80107de <_dtoa_r+0xa6e>
 80107d8:	9b02      	ldr	r3, [sp, #8]
 80107da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80107de:	9b01      	ldr	r3, [sp, #4]
 80107e0:	f883 9000 	strb.w	r9, [r3]
 80107e4:	e774      	b.n	80106d0 <_dtoa_r+0x960>
 80107e6:	4638      	mov	r0, r7
 80107e8:	e7ba      	b.n	8010760 <_dtoa_r+0x9f0>
 80107ea:	2201      	movs	r2, #1
 80107ec:	e7e1      	b.n	80107b2 <_dtoa_r+0xa42>
 80107ee:	9b05      	ldr	r3, [sp, #20]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	db04      	blt.n	80107fe <_dtoa_r+0xa8e>
 80107f4:	9907      	ldr	r1, [sp, #28]
 80107f6:	430b      	orrs	r3, r1
 80107f8:	9906      	ldr	r1, [sp, #24]
 80107fa:	430b      	orrs	r3, r1
 80107fc:	d120      	bne.n	8010840 <_dtoa_r+0xad0>
 80107fe:	2a00      	cmp	r2, #0
 8010800:	dded      	ble.n	80107de <_dtoa_r+0xa6e>
 8010802:	4651      	mov	r1, sl
 8010804:	2201      	movs	r2, #1
 8010806:	4620      	mov	r0, r4
 8010808:	f000 fbb4 	bl	8010f74 <__lshift>
 801080c:	4631      	mov	r1, r6
 801080e:	4682      	mov	sl, r0
 8010810:	f000 fc1c 	bl	801104c <__mcmp>
 8010814:	2800      	cmp	r0, #0
 8010816:	dc03      	bgt.n	8010820 <_dtoa_r+0xab0>
 8010818:	d1e1      	bne.n	80107de <_dtoa_r+0xa6e>
 801081a:	f019 0f01 	tst.w	r9, #1
 801081e:	d0de      	beq.n	80107de <_dtoa_r+0xa6e>
 8010820:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010824:	d1d8      	bne.n	80107d8 <_dtoa_r+0xa68>
 8010826:	9a01      	ldr	r2, [sp, #4]
 8010828:	2339      	movs	r3, #57	; 0x39
 801082a:	7013      	strb	r3, [r2, #0]
 801082c:	462b      	mov	r3, r5
 801082e:	461d      	mov	r5, r3
 8010830:	3b01      	subs	r3, #1
 8010832:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010836:	2a39      	cmp	r2, #57	; 0x39
 8010838:	d06c      	beq.n	8010914 <_dtoa_r+0xba4>
 801083a:	3201      	adds	r2, #1
 801083c:	701a      	strb	r2, [r3, #0]
 801083e:	e747      	b.n	80106d0 <_dtoa_r+0x960>
 8010840:	2a00      	cmp	r2, #0
 8010842:	dd07      	ble.n	8010854 <_dtoa_r+0xae4>
 8010844:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010848:	d0ed      	beq.n	8010826 <_dtoa_r+0xab6>
 801084a:	9a01      	ldr	r2, [sp, #4]
 801084c:	f109 0301 	add.w	r3, r9, #1
 8010850:	7013      	strb	r3, [r2, #0]
 8010852:	e73d      	b.n	80106d0 <_dtoa_r+0x960>
 8010854:	9b04      	ldr	r3, [sp, #16]
 8010856:	9a08      	ldr	r2, [sp, #32]
 8010858:	f803 9c01 	strb.w	r9, [r3, #-1]
 801085c:	4293      	cmp	r3, r2
 801085e:	d043      	beq.n	80108e8 <_dtoa_r+0xb78>
 8010860:	4651      	mov	r1, sl
 8010862:	2300      	movs	r3, #0
 8010864:	220a      	movs	r2, #10
 8010866:	4620      	mov	r0, r4
 8010868:	f000 f9d6 	bl	8010c18 <__multadd>
 801086c:	45b8      	cmp	r8, r7
 801086e:	4682      	mov	sl, r0
 8010870:	f04f 0300 	mov.w	r3, #0
 8010874:	f04f 020a 	mov.w	r2, #10
 8010878:	4641      	mov	r1, r8
 801087a:	4620      	mov	r0, r4
 801087c:	d107      	bne.n	801088e <_dtoa_r+0xb1e>
 801087e:	f000 f9cb 	bl	8010c18 <__multadd>
 8010882:	4680      	mov	r8, r0
 8010884:	4607      	mov	r7, r0
 8010886:	9b04      	ldr	r3, [sp, #16]
 8010888:	3301      	adds	r3, #1
 801088a:	9304      	str	r3, [sp, #16]
 801088c:	e775      	b.n	801077a <_dtoa_r+0xa0a>
 801088e:	f000 f9c3 	bl	8010c18 <__multadd>
 8010892:	4639      	mov	r1, r7
 8010894:	4680      	mov	r8, r0
 8010896:	2300      	movs	r3, #0
 8010898:	220a      	movs	r2, #10
 801089a:	4620      	mov	r0, r4
 801089c:	f000 f9bc 	bl	8010c18 <__multadd>
 80108a0:	4607      	mov	r7, r0
 80108a2:	e7f0      	b.n	8010886 <_dtoa_r+0xb16>
 80108a4:	9b04      	ldr	r3, [sp, #16]
 80108a6:	9301      	str	r3, [sp, #4]
 80108a8:	9d00      	ldr	r5, [sp, #0]
 80108aa:	4631      	mov	r1, r6
 80108ac:	4650      	mov	r0, sl
 80108ae:	f7ff f9d6 	bl	800fc5e <quorem>
 80108b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80108b6:	9b00      	ldr	r3, [sp, #0]
 80108b8:	f805 9b01 	strb.w	r9, [r5], #1
 80108bc:	1aea      	subs	r2, r5, r3
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	4293      	cmp	r3, r2
 80108c2:	dd07      	ble.n	80108d4 <_dtoa_r+0xb64>
 80108c4:	4651      	mov	r1, sl
 80108c6:	2300      	movs	r3, #0
 80108c8:	220a      	movs	r2, #10
 80108ca:	4620      	mov	r0, r4
 80108cc:	f000 f9a4 	bl	8010c18 <__multadd>
 80108d0:	4682      	mov	sl, r0
 80108d2:	e7ea      	b.n	80108aa <_dtoa_r+0xb3a>
 80108d4:	9b01      	ldr	r3, [sp, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	bfc8      	it	gt
 80108da:	461d      	movgt	r5, r3
 80108dc:	9b00      	ldr	r3, [sp, #0]
 80108de:	bfd8      	it	le
 80108e0:	2501      	movle	r5, #1
 80108e2:	441d      	add	r5, r3
 80108e4:	f04f 0800 	mov.w	r8, #0
 80108e8:	4651      	mov	r1, sl
 80108ea:	2201      	movs	r2, #1
 80108ec:	4620      	mov	r0, r4
 80108ee:	f000 fb41 	bl	8010f74 <__lshift>
 80108f2:	4631      	mov	r1, r6
 80108f4:	4682      	mov	sl, r0
 80108f6:	f000 fba9 	bl	801104c <__mcmp>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	dc96      	bgt.n	801082c <_dtoa_r+0xabc>
 80108fe:	d102      	bne.n	8010906 <_dtoa_r+0xb96>
 8010900:	f019 0f01 	tst.w	r9, #1
 8010904:	d192      	bne.n	801082c <_dtoa_r+0xabc>
 8010906:	462b      	mov	r3, r5
 8010908:	461d      	mov	r5, r3
 801090a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801090e:	2a30      	cmp	r2, #48	; 0x30
 8010910:	d0fa      	beq.n	8010908 <_dtoa_r+0xb98>
 8010912:	e6dd      	b.n	80106d0 <_dtoa_r+0x960>
 8010914:	9a00      	ldr	r2, [sp, #0]
 8010916:	429a      	cmp	r2, r3
 8010918:	d189      	bne.n	801082e <_dtoa_r+0xabe>
 801091a:	f10b 0b01 	add.w	fp, fp, #1
 801091e:	2331      	movs	r3, #49	; 0x31
 8010920:	e796      	b.n	8010850 <_dtoa_r+0xae0>
 8010922:	4b0a      	ldr	r3, [pc, #40]	; (801094c <_dtoa_r+0xbdc>)
 8010924:	f7ff ba99 	b.w	800fe5a <_dtoa_r+0xea>
 8010928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801092a:	2b00      	cmp	r3, #0
 801092c:	f47f aa6d 	bne.w	800fe0a <_dtoa_r+0x9a>
 8010930:	4b07      	ldr	r3, [pc, #28]	; (8010950 <_dtoa_r+0xbe0>)
 8010932:	f7ff ba92 	b.w	800fe5a <_dtoa_r+0xea>
 8010936:	9b01      	ldr	r3, [sp, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	dcb5      	bgt.n	80108a8 <_dtoa_r+0xb38>
 801093c:	9b07      	ldr	r3, [sp, #28]
 801093e:	2b02      	cmp	r3, #2
 8010940:	f73f aeb1 	bgt.w	80106a6 <_dtoa_r+0x936>
 8010944:	e7b0      	b.n	80108a8 <_dtoa_r+0xb38>
 8010946:	bf00      	nop
 8010948:	08012449 	.word	0x08012449
 801094c:	080123a9 	.word	0x080123a9
 8010950:	080123cd 	.word	0x080123cd

08010954 <_free_r>:
 8010954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010956:	2900      	cmp	r1, #0
 8010958:	d044      	beq.n	80109e4 <_free_r+0x90>
 801095a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801095e:	9001      	str	r0, [sp, #4]
 8010960:	2b00      	cmp	r3, #0
 8010962:	f1a1 0404 	sub.w	r4, r1, #4
 8010966:	bfb8      	it	lt
 8010968:	18e4      	addlt	r4, r4, r3
 801096a:	f000 f8e7 	bl	8010b3c <__malloc_lock>
 801096e:	4a1e      	ldr	r2, [pc, #120]	; (80109e8 <_free_r+0x94>)
 8010970:	9801      	ldr	r0, [sp, #4]
 8010972:	6813      	ldr	r3, [r2, #0]
 8010974:	b933      	cbnz	r3, 8010984 <_free_r+0x30>
 8010976:	6063      	str	r3, [r4, #4]
 8010978:	6014      	str	r4, [r2, #0]
 801097a:	b003      	add	sp, #12
 801097c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010980:	f000 b8e2 	b.w	8010b48 <__malloc_unlock>
 8010984:	42a3      	cmp	r3, r4
 8010986:	d908      	bls.n	801099a <_free_r+0x46>
 8010988:	6825      	ldr	r5, [r4, #0]
 801098a:	1961      	adds	r1, r4, r5
 801098c:	428b      	cmp	r3, r1
 801098e:	bf01      	itttt	eq
 8010990:	6819      	ldreq	r1, [r3, #0]
 8010992:	685b      	ldreq	r3, [r3, #4]
 8010994:	1949      	addeq	r1, r1, r5
 8010996:	6021      	streq	r1, [r4, #0]
 8010998:	e7ed      	b.n	8010976 <_free_r+0x22>
 801099a:	461a      	mov	r2, r3
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	b10b      	cbz	r3, 80109a4 <_free_r+0x50>
 80109a0:	42a3      	cmp	r3, r4
 80109a2:	d9fa      	bls.n	801099a <_free_r+0x46>
 80109a4:	6811      	ldr	r1, [r2, #0]
 80109a6:	1855      	adds	r5, r2, r1
 80109a8:	42a5      	cmp	r5, r4
 80109aa:	d10b      	bne.n	80109c4 <_free_r+0x70>
 80109ac:	6824      	ldr	r4, [r4, #0]
 80109ae:	4421      	add	r1, r4
 80109b0:	1854      	adds	r4, r2, r1
 80109b2:	42a3      	cmp	r3, r4
 80109b4:	6011      	str	r1, [r2, #0]
 80109b6:	d1e0      	bne.n	801097a <_free_r+0x26>
 80109b8:	681c      	ldr	r4, [r3, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	6053      	str	r3, [r2, #4]
 80109be:	440c      	add	r4, r1
 80109c0:	6014      	str	r4, [r2, #0]
 80109c2:	e7da      	b.n	801097a <_free_r+0x26>
 80109c4:	d902      	bls.n	80109cc <_free_r+0x78>
 80109c6:	230c      	movs	r3, #12
 80109c8:	6003      	str	r3, [r0, #0]
 80109ca:	e7d6      	b.n	801097a <_free_r+0x26>
 80109cc:	6825      	ldr	r5, [r4, #0]
 80109ce:	1961      	adds	r1, r4, r5
 80109d0:	428b      	cmp	r3, r1
 80109d2:	bf04      	itt	eq
 80109d4:	6819      	ldreq	r1, [r3, #0]
 80109d6:	685b      	ldreq	r3, [r3, #4]
 80109d8:	6063      	str	r3, [r4, #4]
 80109da:	bf04      	itt	eq
 80109dc:	1949      	addeq	r1, r1, r5
 80109de:	6021      	streq	r1, [r4, #0]
 80109e0:	6054      	str	r4, [r2, #4]
 80109e2:	e7ca      	b.n	801097a <_free_r+0x26>
 80109e4:	b003      	add	sp, #12
 80109e6:	bd30      	pop	{r4, r5, pc}
 80109e8:	20007f5c 	.word	0x20007f5c

080109ec <malloc>:
 80109ec:	4b02      	ldr	r3, [pc, #8]	; (80109f8 <malloc+0xc>)
 80109ee:	4601      	mov	r1, r0
 80109f0:	6818      	ldr	r0, [r3, #0]
 80109f2:	f000 b823 	b.w	8010a3c <_malloc_r>
 80109f6:	bf00      	nop
 80109f8:	20000210 	.word	0x20000210

080109fc <sbrk_aligned>:
 80109fc:	b570      	push	{r4, r5, r6, lr}
 80109fe:	4e0e      	ldr	r6, [pc, #56]	; (8010a38 <sbrk_aligned+0x3c>)
 8010a00:	460c      	mov	r4, r1
 8010a02:	6831      	ldr	r1, [r6, #0]
 8010a04:	4605      	mov	r5, r0
 8010a06:	b911      	cbnz	r1, 8010a0e <sbrk_aligned+0x12>
 8010a08:	f000 fe1c 	bl	8011644 <_sbrk_r>
 8010a0c:	6030      	str	r0, [r6, #0]
 8010a0e:	4621      	mov	r1, r4
 8010a10:	4628      	mov	r0, r5
 8010a12:	f000 fe17 	bl	8011644 <_sbrk_r>
 8010a16:	1c43      	adds	r3, r0, #1
 8010a18:	d00a      	beq.n	8010a30 <sbrk_aligned+0x34>
 8010a1a:	1cc4      	adds	r4, r0, #3
 8010a1c:	f024 0403 	bic.w	r4, r4, #3
 8010a20:	42a0      	cmp	r0, r4
 8010a22:	d007      	beq.n	8010a34 <sbrk_aligned+0x38>
 8010a24:	1a21      	subs	r1, r4, r0
 8010a26:	4628      	mov	r0, r5
 8010a28:	f000 fe0c 	bl	8011644 <_sbrk_r>
 8010a2c:	3001      	adds	r0, #1
 8010a2e:	d101      	bne.n	8010a34 <sbrk_aligned+0x38>
 8010a30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010a34:	4620      	mov	r0, r4
 8010a36:	bd70      	pop	{r4, r5, r6, pc}
 8010a38:	20007f60 	.word	0x20007f60

08010a3c <_malloc_r>:
 8010a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a40:	1ccd      	adds	r5, r1, #3
 8010a42:	f025 0503 	bic.w	r5, r5, #3
 8010a46:	3508      	adds	r5, #8
 8010a48:	2d0c      	cmp	r5, #12
 8010a4a:	bf38      	it	cc
 8010a4c:	250c      	movcc	r5, #12
 8010a4e:	2d00      	cmp	r5, #0
 8010a50:	4607      	mov	r7, r0
 8010a52:	db01      	blt.n	8010a58 <_malloc_r+0x1c>
 8010a54:	42a9      	cmp	r1, r5
 8010a56:	d905      	bls.n	8010a64 <_malloc_r+0x28>
 8010a58:	230c      	movs	r3, #12
 8010a5a:	603b      	str	r3, [r7, #0]
 8010a5c:	2600      	movs	r6, #0
 8010a5e:	4630      	mov	r0, r6
 8010a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010b38 <_malloc_r+0xfc>
 8010a68:	f000 f868 	bl	8010b3c <__malloc_lock>
 8010a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8010a70:	461c      	mov	r4, r3
 8010a72:	bb5c      	cbnz	r4, 8010acc <_malloc_r+0x90>
 8010a74:	4629      	mov	r1, r5
 8010a76:	4638      	mov	r0, r7
 8010a78:	f7ff ffc0 	bl	80109fc <sbrk_aligned>
 8010a7c:	1c43      	adds	r3, r0, #1
 8010a7e:	4604      	mov	r4, r0
 8010a80:	d155      	bne.n	8010b2e <_malloc_r+0xf2>
 8010a82:	f8d8 4000 	ldr.w	r4, [r8]
 8010a86:	4626      	mov	r6, r4
 8010a88:	2e00      	cmp	r6, #0
 8010a8a:	d145      	bne.n	8010b18 <_malloc_r+0xdc>
 8010a8c:	2c00      	cmp	r4, #0
 8010a8e:	d048      	beq.n	8010b22 <_malloc_r+0xe6>
 8010a90:	6823      	ldr	r3, [r4, #0]
 8010a92:	4631      	mov	r1, r6
 8010a94:	4638      	mov	r0, r7
 8010a96:	eb04 0903 	add.w	r9, r4, r3
 8010a9a:	f000 fdd3 	bl	8011644 <_sbrk_r>
 8010a9e:	4581      	cmp	r9, r0
 8010aa0:	d13f      	bne.n	8010b22 <_malloc_r+0xe6>
 8010aa2:	6821      	ldr	r1, [r4, #0]
 8010aa4:	1a6d      	subs	r5, r5, r1
 8010aa6:	4629      	mov	r1, r5
 8010aa8:	4638      	mov	r0, r7
 8010aaa:	f7ff ffa7 	bl	80109fc <sbrk_aligned>
 8010aae:	3001      	adds	r0, #1
 8010ab0:	d037      	beq.n	8010b22 <_malloc_r+0xe6>
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	442b      	add	r3, r5
 8010ab6:	6023      	str	r3, [r4, #0]
 8010ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d038      	beq.n	8010b32 <_malloc_r+0xf6>
 8010ac0:	685a      	ldr	r2, [r3, #4]
 8010ac2:	42a2      	cmp	r2, r4
 8010ac4:	d12b      	bne.n	8010b1e <_malloc_r+0xe2>
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	605a      	str	r2, [r3, #4]
 8010aca:	e00f      	b.n	8010aec <_malloc_r+0xb0>
 8010acc:	6822      	ldr	r2, [r4, #0]
 8010ace:	1b52      	subs	r2, r2, r5
 8010ad0:	d41f      	bmi.n	8010b12 <_malloc_r+0xd6>
 8010ad2:	2a0b      	cmp	r2, #11
 8010ad4:	d917      	bls.n	8010b06 <_malloc_r+0xca>
 8010ad6:	1961      	adds	r1, r4, r5
 8010ad8:	42a3      	cmp	r3, r4
 8010ada:	6025      	str	r5, [r4, #0]
 8010adc:	bf18      	it	ne
 8010ade:	6059      	strne	r1, [r3, #4]
 8010ae0:	6863      	ldr	r3, [r4, #4]
 8010ae2:	bf08      	it	eq
 8010ae4:	f8c8 1000 	streq.w	r1, [r8]
 8010ae8:	5162      	str	r2, [r4, r5]
 8010aea:	604b      	str	r3, [r1, #4]
 8010aec:	4638      	mov	r0, r7
 8010aee:	f104 060b 	add.w	r6, r4, #11
 8010af2:	f000 f829 	bl	8010b48 <__malloc_unlock>
 8010af6:	f026 0607 	bic.w	r6, r6, #7
 8010afa:	1d23      	adds	r3, r4, #4
 8010afc:	1af2      	subs	r2, r6, r3
 8010afe:	d0ae      	beq.n	8010a5e <_malloc_r+0x22>
 8010b00:	1b9b      	subs	r3, r3, r6
 8010b02:	50a3      	str	r3, [r4, r2]
 8010b04:	e7ab      	b.n	8010a5e <_malloc_r+0x22>
 8010b06:	42a3      	cmp	r3, r4
 8010b08:	6862      	ldr	r2, [r4, #4]
 8010b0a:	d1dd      	bne.n	8010ac8 <_malloc_r+0x8c>
 8010b0c:	f8c8 2000 	str.w	r2, [r8]
 8010b10:	e7ec      	b.n	8010aec <_malloc_r+0xb0>
 8010b12:	4623      	mov	r3, r4
 8010b14:	6864      	ldr	r4, [r4, #4]
 8010b16:	e7ac      	b.n	8010a72 <_malloc_r+0x36>
 8010b18:	4634      	mov	r4, r6
 8010b1a:	6876      	ldr	r6, [r6, #4]
 8010b1c:	e7b4      	b.n	8010a88 <_malloc_r+0x4c>
 8010b1e:	4613      	mov	r3, r2
 8010b20:	e7cc      	b.n	8010abc <_malloc_r+0x80>
 8010b22:	230c      	movs	r3, #12
 8010b24:	603b      	str	r3, [r7, #0]
 8010b26:	4638      	mov	r0, r7
 8010b28:	f000 f80e 	bl	8010b48 <__malloc_unlock>
 8010b2c:	e797      	b.n	8010a5e <_malloc_r+0x22>
 8010b2e:	6025      	str	r5, [r4, #0]
 8010b30:	e7dc      	b.n	8010aec <_malloc_r+0xb0>
 8010b32:	605b      	str	r3, [r3, #4]
 8010b34:	deff      	udf	#255	; 0xff
 8010b36:	bf00      	nop
 8010b38:	20007f5c 	.word	0x20007f5c

08010b3c <__malloc_lock>:
 8010b3c:	4801      	ldr	r0, [pc, #4]	; (8010b44 <__malloc_lock+0x8>)
 8010b3e:	f7ff b87e 	b.w	800fc3e <__retarget_lock_acquire_recursive>
 8010b42:	bf00      	nop
 8010b44:	20007f58 	.word	0x20007f58

08010b48 <__malloc_unlock>:
 8010b48:	4801      	ldr	r0, [pc, #4]	; (8010b50 <__malloc_unlock+0x8>)
 8010b4a:	f7ff b879 	b.w	800fc40 <__retarget_lock_release_recursive>
 8010b4e:	bf00      	nop
 8010b50:	20007f58 	.word	0x20007f58

08010b54 <_Balloc>:
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	69c6      	ldr	r6, [r0, #28]
 8010b58:	4604      	mov	r4, r0
 8010b5a:	460d      	mov	r5, r1
 8010b5c:	b976      	cbnz	r6, 8010b7c <_Balloc+0x28>
 8010b5e:	2010      	movs	r0, #16
 8010b60:	f7ff ff44 	bl	80109ec <malloc>
 8010b64:	4602      	mov	r2, r0
 8010b66:	61e0      	str	r0, [r4, #28]
 8010b68:	b920      	cbnz	r0, 8010b74 <_Balloc+0x20>
 8010b6a:	4b18      	ldr	r3, [pc, #96]	; (8010bcc <_Balloc+0x78>)
 8010b6c:	4818      	ldr	r0, [pc, #96]	; (8010bd0 <_Balloc+0x7c>)
 8010b6e:	216b      	movs	r1, #107	; 0x6b
 8010b70:	f000 fd78 	bl	8011664 <__assert_func>
 8010b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b78:	6006      	str	r6, [r0, #0]
 8010b7a:	60c6      	str	r6, [r0, #12]
 8010b7c:	69e6      	ldr	r6, [r4, #28]
 8010b7e:	68f3      	ldr	r3, [r6, #12]
 8010b80:	b183      	cbz	r3, 8010ba4 <_Balloc+0x50>
 8010b82:	69e3      	ldr	r3, [r4, #28]
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010b8a:	b9b8      	cbnz	r0, 8010bbc <_Balloc+0x68>
 8010b8c:	2101      	movs	r1, #1
 8010b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8010b92:	1d72      	adds	r2, r6, #5
 8010b94:	0092      	lsls	r2, r2, #2
 8010b96:	4620      	mov	r0, r4
 8010b98:	f000 fd82 	bl	80116a0 <_calloc_r>
 8010b9c:	b160      	cbz	r0, 8010bb8 <_Balloc+0x64>
 8010b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ba2:	e00e      	b.n	8010bc2 <_Balloc+0x6e>
 8010ba4:	2221      	movs	r2, #33	; 0x21
 8010ba6:	2104      	movs	r1, #4
 8010ba8:	4620      	mov	r0, r4
 8010baa:	f000 fd79 	bl	80116a0 <_calloc_r>
 8010bae:	69e3      	ldr	r3, [r4, #28]
 8010bb0:	60f0      	str	r0, [r6, #12]
 8010bb2:	68db      	ldr	r3, [r3, #12]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d1e4      	bne.n	8010b82 <_Balloc+0x2e>
 8010bb8:	2000      	movs	r0, #0
 8010bba:	bd70      	pop	{r4, r5, r6, pc}
 8010bbc:	6802      	ldr	r2, [r0, #0]
 8010bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010bc8:	e7f7      	b.n	8010bba <_Balloc+0x66>
 8010bca:	bf00      	nop
 8010bcc:	080123da 	.word	0x080123da
 8010bd0:	0801245a 	.word	0x0801245a

08010bd4 <_Bfree>:
 8010bd4:	b570      	push	{r4, r5, r6, lr}
 8010bd6:	69c6      	ldr	r6, [r0, #28]
 8010bd8:	4605      	mov	r5, r0
 8010bda:	460c      	mov	r4, r1
 8010bdc:	b976      	cbnz	r6, 8010bfc <_Bfree+0x28>
 8010bde:	2010      	movs	r0, #16
 8010be0:	f7ff ff04 	bl	80109ec <malloc>
 8010be4:	4602      	mov	r2, r0
 8010be6:	61e8      	str	r0, [r5, #28]
 8010be8:	b920      	cbnz	r0, 8010bf4 <_Bfree+0x20>
 8010bea:	4b09      	ldr	r3, [pc, #36]	; (8010c10 <_Bfree+0x3c>)
 8010bec:	4809      	ldr	r0, [pc, #36]	; (8010c14 <_Bfree+0x40>)
 8010bee:	218f      	movs	r1, #143	; 0x8f
 8010bf0:	f000 fd38 	bl	8011664 <__assert_func>
 8010bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010bf8:	6006      	str	r6, [r0, #0]
 8010bfa:	60c6      	str	r6, [r0, #12]
 8010bfc:	b13c      	cbz	r4, 8010c0e <_Bfree+0x3a>
 8010bfe:	69eb      	ldr	r3, [r5, #28]
 8010c00:	6862      	ldr	r2, [r4, #4]
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c08:	6021      	str	r1, [r4, #0]
 8010c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}
 8010c10:	080123da 	.word	0x080123da
 8010c14:	0801245a 	.word	0x0801245a

08010c18 <__multadd>:
 8010c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c1c:	690d      	ldr	r5, [r1, #16]
 8010c1e:	4607      	mov	r7, r0
 8010c20:	460c      	mov	r4, r1
 8010c22:	461e      	mov	r6, r3
 8010c24:	f101 0c14 	add.w	ip, r1, #20
 8010c28:	2000      	movs	r0, #0
 8010c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8010c2e:	b299      	uxth	r1, r3
 8010c30:	fb02 6101 	mla	r1, r2, r1, r6
 8010c34:	0c1e      	lsrs	r6, r3, #16
 8010c36:	0c0b      	lsrs	r3, r1, #16
 8010c38:	fb02 3306 	mla	r3, r2, r6, r3
 8010c3c:	b289      	uxth	r1, r1
 8010c3e:	3001      	adds	r0, #1
 8010c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010c44:	4285      	cmp	r5, r0
 8010c46:	f84c 1b04 	str.w	r1, [ip], #4
 8010c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010c4e:	dcec      	bgt.n	8010c2a <__multadd+0x12>
 8010c50:	b30e      	cbz	r6, 8010c96 <__multadd+0x7e>
 8010c52:	68a3      	ldr	r3, [r4, #8]
 8010c54:	42ab      	cmp	r3, r5
 8010c56:	dc19      	bgt.n	8010c8c <__multadd+0x74>
 8010c58:	6861      	ldr	r1, [r4, #4]
 8010c5a:	4638      	mov	r0, r7
 8010c5c:	3101      	adds	r1, #1
 8010c5e:	f7ff ff79 	bl	8010b54 <_Balloc>
 8010c62:	4680      	mov	r8, r0
 8010c64:	b928      	cbnz	r0, 8010c72 <__multadd+0x5a>
 8010c66:	4602      	mov	r2, r0
 8010c68:	4b0c      	ldr	r3, [pc, #48]	; (8010c9c <__multadd+0x84>)
 8010c6a:	480d      	ldr	r0, [pc, #52]	; (8010ca0 <__multadd+0x88>)
 8010c6c:	21ba      	movs	r1, #186	; 0xba
 8010c6e:	f000 fcf9 	bl	8011664 <__assert_func>
 8010c72:	6922      	ldr	r2, [r4, #16]
 8010c74:	3202      	adds	r2, #2
 8010c76:	f104 010c 	add.w	r1, r4, #12
 8010c7a:	0092      	lsls	r2, r2, #2
 8010c7c:	300c      	adds	r0, #12
 8010c7e:	f7fe ffe0 	bl	800fc42 <memcpy>
 8010c82:	4621      	mov	r1, r4
 8010c84:	4638      	mov	r0, r7
 8010c86:	f7ff ffa5 	bl	8010bd4 <_Bfree>
 8010c8a:	4644      	mov	r4, r8
 8010c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c90:	3501      	adds	r5, #1
 8010c92:	615e      	str	r6, [r3, #20]
 8010c94:	6125      	str	r5, [r4, #16]
 8010c96:	4620      	mov	r0, r4
 8010c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c9c:	08012449 	.word	0x08012449
 8010ca0:	0801245a 	.word	0x0801245a

08010ca4 <__hi0bits>:
 8010ca4:	0c03      	lsrs	r3, r0, #16
 8010ca6:	041b      	lsls	r3, r3, #16
 8010ca8:	b9d3      	cbnz	r3, 8010ce0 <__hi0bits+0x3c>
 8010caa:	0400      	lsls	r0, r0, #16
 8010cac:	2310      	movs	r3, #16
 8010cae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010cb2:	bf04      	itt	eq
 8010cb4:	0200      	lsleq	r0, r0, #8
 8010cb6:	3308      	addeq	r3, #8
 8010cb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010cbc:	bf04      	itt	eq
 8010cbe:	0100      	lsleq	r0, r0, #4
 8010cc0:	3304      	addeq	r3, #4
 8010cc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010cc6:	bf04      	itt	eq
 8010cc8:	0080      	lsleq	r0, r0, #2
 8010cca:	3302      	addeq	r3, #2
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	db05      	blt.n	8010cdc <__hi0bits+0x38>
 8010cd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010cd4:	f103 0301 	add.w	r3, r3, #1
 8010cd8:	bf08      	it	eq
 8010cda:	2320      	moveq	r3, #32
 8010cdc:	4618      	mov	r0, r3
 8010cde:	4770      	bx	lr
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	e7e4      	b.n	8010cae <__hi0bits+0xa>

08010ce4 <__lo0bits>:
 8010ce4:	6803      	ldr	r3, [r0, #0]
 8010ce6:	f013 0207 	ands.w	r2, r3, #7
 8010cea:	d00c      	beq.n	8010d06 <__lo0bits+0x22>
 8010cec:	07d9      	lsls	r1, r3, #31
 8010cee:	d422      	bmi.n	8010d36 <__lo0bits+0x52>
 8010cf0:	079a      	lsls	r2, r3, #30
 8010cf2:	bf49      	itett	mi
 8010cf4:	085b      	lsrmi	r3, r3, #1
 8010cf6:	089b      	lsrpl	r3, r3, #2
 8010cf8:	6003      	strmi	r3, [r0, #0]
 8010cfa:	2201      	movmi	r2, #1
 8010cfc:	bf5c      	itt	pl
 8010cfe:	6003      	strpl	r3, [r0, #0]
 8010d00:	2202      	movpl	r2, #2
 8010d02:	4610      	mov	r0, r2
 8010d04:	4770      	bx	lr
 8010d06:	b299      	uxth	r1, r3
 8010d08:	b909      	cbnz	r1, 8010d0e <__lo0bits+0x2a>
 8010d0a:	0c1b      	lsrs	r3, r3, #16
 8010d0c:	2210      	movs	r2, #16
 8010d0e:	b2d9      	uxtb	r1, r3
 8010d10:	b909      	cbnz	r1, 8010d16 <__lo0bits+0x32>
 8010d12:	3208      	adds	r2, #8
 8010d14:	0a1b      	lsrs	r3, r3, #8
 8010d16:	0719      	lsls	r1, r3, #28
 8010d18:	bf04      	itt	eq
 8010d1a:	091b      	lsreq	r3, r3, #4
 8010d1c:	3204      	addeq	r2, #4
 8010d1e:	0799      	lsls	r1, r3, #30
 8010d20:	bf04      	itt	eq
 8010d22:	089b      	lsreq	r3, r3, #2
 8010d24:	3202      	addeq	r2, #2
 8010d26:	07d9      	lsls	r1, r3, #31
 8010d28:	d403      	bmi.n	8010d32 <__lo0bits+0x4e>
 8010d2a:	085b      	lsrs	r3, r3, #1
 8010d2c:	f102 0201 	add.w	r2, r2, #1
 8010d30:	d003      	beq.n	8010d3a <__lo0bits+0x56>
 8010d32:	6003      	str	r3, [r0, #0]
 8010d34:	e7e5      	b.n	8010d02 <__lo0bits+0x1e>
 8010d36:	2200      	movs	r2, #0
 8010d38:	e7e3      	b.n	8010d02 <__lo0bits+0x1e>
 8010d3a:	2220      	movs	r2, #32
 8010d3c:	e7e1      	b.n	8010d02 <__lo0bits+0x1e>
	...

08010d40 <__i2b>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	460c      	mov	r4, r1
 8010d44:	2101      	movs	r1, #1
 8010d46:	f7ff ff05 	bl	8010b54 <_Balloc>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	b928      	cbnz	r0, 8010d5a <__i2b+0x1a>
 8010d4e:	4b05      	ldr	r3, [pc, #20]	; (8010d64 <__i2b+0x24>)
 8010d50:	4805      	ldr	r0, [pc, #20]	; (8010d68 <__i2b+0x28>)
 8010d52:	f240 1145 	movw	r1, #325	; 0x145
 8010d56:	f000 fc85 	bl	8011664 <__assert_func>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	6144      	str	r4, [r0, #20]
 8010d5e:	6103      	str	r3, [r0, #16]
 8010d60:	bd10      	pop	{r4, pc}
 8010d62:	bf00      	nop
 8010d64:	08012449 	.word	0x08012449
 8010d68:	0801245a 	.word	0x0801245a

08010d6c <__multiply>:
 8010d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d70:	4691      	mov	r9, r2
 8010d72:	690a      	ldr	r2, [r1, #16]
 8010d74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	bfb8      	it	lt
 8010d7c:	460b      	movlt	r3, r1
 8010d7e:	460c      	mov	r4, r1
 8010d80:	bfbc      	itt	lt
 8010d82:	464c      	movlt	r4, r9
 8010d84:	4699      	movlt	r9, r3
 8010d86:	6927      	ldr	r7, [r4, #16]
 8010d88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d8c:	68a3      	ldr	r3, [r4, #8]
 8010d8e:	6861      	ldr	r1, [r4, #4]
 8010d90:	eb07 060a 	add.w	r6, r7, sl
 8010d94:	42b3      	cmp	r3, r6
 8010d96:	b085      	sub	sp, #20
 8010d98:	bfb8      	it	lt
 8010d9a:	3101      	addlt	r1, #1
 8010d9c:	f7ff feda 	bl	8010b54 <_Balloc>
 8010da0:	b930      	cbnz	r0, 8010db0 <__multiply+0x44>
 8010da2:	4602      	mov	r2, r0
 8010da4:	4b44      	ldr	r3, [pc, #272]	; (8010eb8 <__multiply+0x14c>)
 8010da6:	4845      	ldr	r0, [pc, #276]	; (8010ebc <__multiply+0x150>)
 8010da8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010dac:	f000 fc5a 	bl	8011664 <__assert_func>
 8010db0:	f100 0514 	add.w	r5, r0, #20
 8010db4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010db8:	462b      	mov	r3, r5
 8010dba:	2200      	movs	r2, #0
 8010dbc:	4543      	cmp	r3, r8
 8010dbe:	d321      	bcc.n	8010e04 <__multiply+0x98>
 8010dc0:	f104 0314 	add.w	r3, r4, #20
 8010dc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010dc8:	f109 0314 	add.w	r3, r9, #20
 8010dcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010dd0:	9202      	str	r2, [sp, #8]
 8010dd2:	1b3a      	subs	r2, r7, r4
 8010dd4:	3a15      	subs	r2, #21
 8010dd6:	f022 0203 	bic.w	r2, r2, #3
 8010dda:	3204      	adds	r2, #4
 8010ddc:	f104 0115 	add.w	r1, r4, #21
 8010de0:	428f      	cmp	r7, r1
 8010de2:	bf38      	it	cc
 8010de4:	2204      	movcc	r2, #4
 8010de6:	9201      	str	r2, [sp, #4]
 8010de8:	9a02      	ldr	r2, [sp, #8]
 8010dea:	9303      	str	r3, [sp, #12]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d80c      	bhi.n	8010e0a <__multiply+0x9e>
 8010df0:	2e00      	cmp	r6, #0
 8010df2:	dd03      	ble.n	8010dfc <__multiply+0x90>
 8010df4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d05b      	beq.n	8010eb4 <__multiply+0x148>
 8010dfc:	6106      	str	r6, [r0, #16]
 8010dfe:	b005      	add	sp, #20
 8010e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e04:	f843 2b04 	str.w	r2, [r3], #4
 8010e08:	e7d8      	b.n	8010dbc <__multiply+0x50>
 8010e0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8010e0e:	f1ba 0f00 	cmp.w	sl, #0
 8010e12:	d024      	beq.n	8010e5e <__multiply+0xf2>
 8010e14:	f104 0e14 	add.w	lr, r4, #20
 8010e18:	46a9      	mov	r9, r5
 8010e1a:	f04f 0c00 	mov.w	ip, #0
 8010e1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010e22:	f8d9 1000 	ldr.w	r1, [r9]
 8010e26:	fa1f fb82 	uxth.w	fp, r2
 8010e2a:	b289      	uxth	r1, r1
 8010e2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010e30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010e34:	f8d9 2000 	ldr.w	r2, [r9]
 8010e38:	4461      	add	r1, ip
 8010e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010e42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e46:	b289      	uxth	r1, r1
 8010e48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e4c:	4577      	cmp	r7, lr
 8010e4e:	f849 1b04 	str.w	r1, [r9], #4
 8010e52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e56:	d8e2      	bhi.n	8010e1e <__multiply+0xb2>
 8010e58:	9a01      	ldr	r2, [sp, #4]
 8010e5a:	f845 c002 	str.w	ip, [r5, r2]
 8010e5e:	9a03      	ldr	r2, [sp, #12]
 8010e60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e64:	3304      	adds	r3, #4
 8010e66:	f1b9 0f00 	cmp.w	r9, #0
 8010e6a:	d021      	beq.n	8010eb0 <__multiply+0x144>
 8010e6c:	6829      	ldr	r1, [r5, #0]
 8010e6e:	f104 0c14 	add.w	ip, r4, #20
 8010e72:	46ae      	mov	lr, r5
 8010e74:	f04f 0a00 	mov.w	sl, #0
 8010e78:	f8bc b000 	ldrh.w	fp, [ip]
 8010e7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010e80:	fb09 220b 	mla	r2, r9, fp, r2
 8010e84:	4452      	add	r2, sl
 8010e86:	b289      	uxth	r1, r1
 8010e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e8c:	f84e 1b04 	str.w	r1, [lr], #4
 8010e90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010e94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010e98:	f8be 1000 	ldrh.w	r1, [lr]
 8010e9c:	fb09 110a 	mla	r1, r9, sl, r1
 8010ea0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010ea4:	4567      	cmp	r7, ip
 8010ea6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010eaa:	d8e5      	bhi.n	8010e78 <__multiply+0x10c>
 8010eac:	9a01      	ldr	r2, [sp, #4]
 8010eae:	50a9      	str	r1, [r5, r2]
 8010eb0:	3504      	adds	r5, #4
 8010eb2:	e799      	b.n	8010de8 <__multiply+0x7c>
 8010eb4:	3e01      	subs	r6, #1
 8010eb6:	e79b      	b.n	8010df0 <__multiply+0x84>
 8010eb8:	08012449 	.word	0x08012449
 8010ebc:	0801245a 	.word	0x0801245a

08010ec0 <__pow5mult>:
 8010ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ec4:	4615      	mov	r5, r2
 8010ec6:	f012 0203 	ands.w	r2, r2, #3
 8010eca:	4606      	mov	r6, r0
 8010ecc:	460f      	mov	r7, r1
 8010ece:	d007      	beq.n	8010ee0 <__pow5mult+0x20>
 8010ed0:	4c25      	ldr	r4, [pc, #148]	; (8010f68 <__pow5mult+0xa8>)
 8010ed2:	3a01      	subs	r2, #1
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010eda:	f7ff fe9d 	bl	8010c18 <__multadd>
 8010ede:	4607      	mov	r7, r0
 8010ee0:	10ad      	asrs	r5, r5, #2
 8010ee2:	d03d      	beq.n	8010f60 <__pow5mult+0xa0>
 8010ee4:	69f4      	ldr	r4, [r6, #28]
 8010ee6:	b97c      	cbnz	r4, 8010f08 <__pow5mult+0x48>
 8010ee8:	2010      	movs	r0, #16
 8010eea:	f7ff fd7f 	bl	80109ec <malloc>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	61f0      	str	r0, [r6, #28]
 8010ef2:	b928      	cbnz	r0, 8010f00 <__pow5mult+0x40>
 8010ef4:	4b1d      	ldr	r3, [pc, #116]	; (8010f6c <__pow5mult+0xac>)
 8010ef6:	481e      	ldr	r0, [pc, #120]	; (8010f70 <__pow5mult+0xb0>)
 8010ef8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010efc:	f000 fbb2 	bl	8011664 <__assert_func>
 8010f00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f04:	6004      	str	r4, [r0, #0]
 8010f06:	60c4      	str	r4, [r0, #12]
 8010f08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010f0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f10:	b94c      	cbnz	r4, 8010f26 <__pow5mult+0x66>
 8010f12:	f240 2171 	movw	r1, #625	; 0x271
 8010f16:	4630      	mov	r0, r6
 8010f18:	f7ff ff12 	bl	8010d40 <__i2b>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f22:	4604      	mov	r4, r0
 8010f24:	6003      	str	r3, [r0, #0]
 8010f26:	f04f 0900 	mov.w	r9, #0
 8010f2a:	07eb      	lsls	r3, r5, #31
 8010f2c:	d50a      	bpl.n	8010f44 <__pow5mult+0x84>
 8010f2e:	4639      	mov	r1, r7
 8010f30:	4622      	mov	r2, r4
 8010f32:	4630      	mov	r0, r6
 8010f34:	f7ff ff1a 	bl	8010d6c <__multiply>
 8010f38:	4639      	mov	r1, r7
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	f7ff fe49 	bl	8010bd4 <_Bfree>
 8010f42:	4647      	mov	r7, r8
 8010f44:	106d      	asrs	r5, r5, #1
 8010f46:	d00b      	beq.n	8010f60 <__pow5mult+0xa0>
 8010f48:	6820      	ldr	r0, [r4, #0]
 8010f4a:	b938      	cbnz	r0, 8010f5c <__pow5mult+0x9c>
 8010f4c:	4622      	mov	r2, r4
 8010f4e:	4621      	mov	r1, r4
 8010f50:	4630      	mov	r0, r6
 8010f52:	f7ff ff0b 	bl	8010d6c <__multiply>
 8010f56:	6020      	str	r0, [r4, #0]
 8010f58:	f8c0 9000 	str.w	r9, [r0]
 8010f5c:	4604      	mov	r4, r0
 8010f5e:	e7e4      	b.n	8010f2a <__pow5mult+0x6a>
 8010f60:	4638      	mov	r0, r7
 8010f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f66:	bf00      	nop
 8010f68:	080125a8 	.word	0x080125a8
 8010f6c:	080123da 	.word	0x080123da
 8010f70:	0801245a 	.word	0x0801245a

08010f74 <__lshift>:
 8010f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f78:	460c      	mov	r4, r1
 8010f7a:	6849      	ldr	r1, [r1, #4]
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f82:	68a3      	ldr	r3, [r4, #8]
 8010f84:	4607      	mov	r7, r0
 8010f86:	4691      	mov	r9, r2
 8010f88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f8c:	f108 0601 	add.w	r6, r8, #1
 8010f90:	42b3      	cmp	r3, r6
 8010f92:	db0b      	blt.n	8010fac <__lshift+0x38>
 8010f94:	4638      	mov	r0, r7
 8010f96:	f7ff fddd 	bl	8010b54 <_Balloc>
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	b948      	cbnz	r0, 8010fb2 <__lshift+0x3e>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	4b28      	ldr	r3, [pc, #160]	; (8011044 <__lshift+0xd0>)
 8010fa2:	4829      	ldr	r0, [pc, #164]	; (8011048 <__lshift+0xd4>)
 8010fa4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010fa8:	f000 fb5c 	bl	8011664 <__assert_func>
 8010fac:	3101      	adds	r1, #1
 8010fae:	005b      	lsls	r3, r3, #1
 8010fb0:	e7ee      	b.n	8010f90 <__lshift+0x1c>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	f100 0114 	add.w	r1, r0, #20
 8010fb8:	f100 0210 	add.w	r2, r0, #16
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	4553      	cmp	r3, sl
 8010fc0:	db33      	blt.n	801102a <__lshift+0xb6>
 8010fc2:	6920      	ldr	r0, [r4, #16]
 8010fc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fc8:	f104 0314 	add.w	r3, r4, #20
 8010fcc:	f019 091f 	ands.w	r9, r9, #31
 8010fd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010fd8:	d02b      	beq.n	8011032 <__lshift+0xbe>
 8010fda:	f1c9 0e20 	rsb	lr, r9, #32
 8010fde:	468a      	mov	sl, r1
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	6818      	ldr	r0, [r3, #0]
 8010fe4:	fa00 f009 	lsl.w	r0, r0, r9
 8010fe8:	4310      	orrs	r0, r2
 8010fea:	f84a 0b04 	str.w	r0, [sl], #4
 8010fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ff2:	459c      	cmp	ip, r3
 8010ff4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010ff8:	d8f3      	bhi.n	8010fe2 <__lshift+0x6e>
 8010ffa:	ebac 0304 	sub.w	r3, ip, r4
 8010ffe:	3b15      	subs	r3, #21
 8011000:	f023 0303 	bic.w	r3, r3, #3
 8011004:	3304      	adds	r3, #4
 8011006:	f104 0015 	add.w	r0, r4, #21
 801100a:	4584      	cmp	ip, r0
 801100c:	bf38      	it	cc
 801100e:	2304      	movcc	r3, #4
 8011010:	50ca      	str	r2, [r1, r3]
 8011012:	b10a      	cbz	r2, 8011018 <__lshift+0xa4>
 8011014:	f108 0602 	add.w	r6, r8, #2
 8011018:	3e01      	subs	r6, #1
 801101a:	4638      	mov	r0, r7
 801101c:	612e      	str	r6, [r5, #16]
 801101e:	4621      	mov	r1, r4
 8011020:	f7ff fdd8 	bl	8010bd4 <_Bfree>
 8011024:	4628      	mov	r0, r5
 8011026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801102a:	f842 0f04 	str.w	r0, [r2, #4]!
 801102e:	3301      	adds	r3, #1
 8011030:	e7c5      	b.n	8010fbe <__lshift+0x4a>
 8011032:	3904      	subs	r1, #4
 8011034:	f853 2b04 	ldr.w	r2, [r3], #4
 8011038:	f841 2f04 	str.w	r2, [r1, #4]!
 801103c:	459c      	cmp	ip, r3
 801103e:	d8f9      	bhi.n	8011034 <__lshift+0xc0>
 8011040:	e7ea      	b.n	8011018 <__lshift+0xa4>
 8011042:	bf00      	nop
 8011044:	08012449 	.word	0x08012449
 8011048:	0801245a 	.word	0x0801245a

0801104c <__mcmp>:
 801104c:	b530      	push	{r4, r5, lr}
 801104e:	6902      	ldr	r2, [r0, #16]
 8011050:	690c      	ldr	r4, [r1, #16]
 8011052:	1b12      	subs	r2, r2, r4
 8011054:	d10e      	bne.n	8011074 <__mcmp+0x28>
 8011056:	f100 0314 	add.w	r3, r0, #20
 801105a:	3114      	adds	r1, #20
 801105c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011060:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011064:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011068:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801106c:	42a5      	cmp	r5, r4
 801106e:	d003      	beq.n	8011078 <__mcmp+0x2c>
 8011070:	d305      	bcc.n	801107e <__mcmp+0x32>
 8011072:	2201      	movs	r2, #1
 8011074:	4610      	mov	r0, r2
 8011076:	bd30      	pop	{r4, r5, pc}
 8011078:	4283      	cmp	r3, r0
 801107a:	d3f3      	bcc.n	8011064 <__mcmp+0x18>
 801107c:	e7fa      	b.n	8011074 <__mcmp+0x28>
 801107e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011082:	e7f7      	b.n	8011074 <__mcmp+0x28>

08011084 <__mdiff>:
 8011084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011088:	460c      	mov	r4, r1
 801108a:	4606      	mov	r6, r0
 801108c:	4611      	mov	r1, r2
 801108e:	4620      	mov	r0, r4
 8011090:	4690      	mov	r8, r2
 8011092:	f7ff ffdb 	bl	801104c <__mcmp>
 8011096:	1e05      	subs	r5, r0, #0
 8011098:	d110      	bne.n	80110bc <__mdiff+0x38>
 801109a:	4629      	mov	r1, r5
 801109c:	4630      	mov	r0, r6
 801109e:	f7ff fd59 	bl	8010b54 <_Balloc>
 80110a2:	b930      	cbnz	r0, 80110b2 <__mdiff+0x2e>
 80110a4:	4b3a      	ldr	r3, [pc, #232]	; (8011190 <__mdiff+0x10c>)
 80110a6:	4602      	mov	r2, r0
 80110a8:	f240 2137 	movw	r1, #567	; 0x237
 80110ac:	4839      	ldr	r0, [pc, #228]	; (8011194 <__mdiff+0x110>)
 80110ae:	f000 fad9 	bl	8011664 <__assert_func>
 80110b2:	2301      	movs	r3, #1
 80110b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110bc:	bfa4      	itt	ge
 80110be:	4643      	movge	r3, r8
 80110c0:	46a0      	movge	r8, r4
 80110c2:	4630      	mov	r0, r6
 80110c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80110c8:	bfa6      	itte	ge
 80110ca:	461c      	movge	r4, r3
 80110cc:	2500      	movge	r5, #0
 80110ce:	2501      	movlt	r5, #1
 80110d0:	f7ff fd40 	bl	8010b54 <_Balloc>
 80110d4:	b920      	cbnz	r0, 80110e0 <__mdiff+0x5c>
 80110d6:	4b2e      	ldr	r3, [pc, #184]	; (8011190 <__mdiff+0x10c>)
 80110d8:	4602      	mov	r2, r0
 80110da:	f240 2145 	movw	r1, #581	; 0x245
 80110de:	e7e5      	b.n	80110ac <__mdiff+0x28>
 80110e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80110e4:	6926      	ldr	r6, [r4, #16]
 80110e6:	60c5      	str	r5, [r0, #12]
 80110e8:	f104 0914 	add.w	r9, r4, #20
 80110ec:	f108 0514 	add.w	r5, r8, #20
 80110f0:	f100 0e14 	add.w	lr, r0, #20
 80110f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80110f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80110fc:	f108 0210 	add.w	r2, r8, #16
 8011100:	46f2      	mov	sl, lr
 8011102:	2100      	movs	r1, #0
 8011104:	f859 3b04 	ldr.w	r3, [r9], #4
 8011108:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801110c:	fa11 f88b 	uxtah	r8, r1, fp
 8011110:	b299      	uxth	r1, r3
 8011112:	0c1b      	lsrs	r3, r3, #16
 8011114:	eba8 0801 	sub.w	r8, r8, r1
 8011118:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801111c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011120:	fa1f f888 	uxth.w	r8, r8
 8011124:	1419      	asrs	r1, r3, #16
 8011126:	454e      	cmp	r6, r9
 8011128:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801112c:	f84a 3b04 	str.w	r3, [sl], #4
 8011130:	d8e8      	bhi.n	8011104 <__mdiff+0x80>
 8011132:	1b33      	subs	r3, r6, r4
 8011134:	3b15      	subs	r3, #21
 8011136:	f023 0303 	bic.w	r3, r3, #3
 801113a:	3304      	adds	r3, #4
 801113c:	3415      	adds	r4, #21
 801113e:	42a6      	cmp	r6, r4
 8011140:	bf38      	it	cc
 8011142:	2304      	movcc	r3, #4
 8011144:	441d      	add	r5, r3
 8011146:	4473      	add	r3, lr
 8011148:	469e      	mov	lr, r3
 801114a:	462e      	mov	r6, r5
 801114c:	4566      	cmp	r6, ip
 801114e:	d30e      	bcc.n	801116e <__mdiff+0xea>
 8011150:	f10c 0203 	add.w	r2, ip, #3
 8011154:	1b52      	subs	r2, r2, r5
 8011156:	f022 0203 	bic.w	r2, r2, #3
 801115a:	3d03      	subs	r5, #3
 801115c:	45ac      	cmp	ip, r5
 801115e:	bf38      	it	cc
 8011160:	2200      	movcc	r2, #0
 8011162:	4413      	add	r3, r2
 8011164:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011168:	b17a      	cbz	r2, 801118a <__mdiff+0x106>
 801116a:	6107      	str	r7, [r0, #16]
 801116c:	e7a4      	b.n	80110b8 <__mdiff+0x34>
 801116e:	f856 8b04 	ldr.w	r8, [r6], #4
 8011172:	fa11 f288 	uxtah	r2, r1, r8
 8011176:	1414      	asrs	r4, r2, #16
 8011178:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801117c:	b292      	uxth	r2, r2
 801117e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011182:	f84e 2b04 	str.w	r2, [lr], #4
 8011186:	1421      	asrs	r1, r4, #16
 8011188:	e7e0      	b.n	801114c <__mdiff+0xc8>
 801118a:	3f01      	subs	r7, #1
 801118c:	e7ea      	b.n	8011164 <__mdiff+0xe0>
 801118e:	bf00      	nop
 8011190:	08012449 	.word	0x08012449
 8011194:	0801245a 	.word	0x0801245a

08011198 <__d2b>:
 8011198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801119c:	460f      	mov	r7, r1
 801119e:	2101      	movs	r1, #1
 80111a0:	ec59 8b10 	vmov	r8, r9, d0
 80111a4:	4616      	mov	r6, r2
 80111a6:	f7ff fcd5 	bl	8010b54 <_Balloc>
 80111aa:	4604      	mov	r4, r0
 80111ac:	b930      	cbnz	r0, 80111bc <__d2b+0x24>
 80111ae:	4602      	mov	r2, r0
 80111b0:	4b24      	ldr	r3, [pc, #144]	; (8011244 <__d2b+0xac>)
 80111b2:	4825      	ldr	r0, [pc, #148]	; (8011248 <__d2b+0xb0>)
 80111b4:	f240 310f 	movw	r1, #783	; 0x30f
 80111b8:	f000 fa54 	bl	8011664 <__assert_func>
 80111bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80111c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111c4:	bb2d      	cbnz	r5, 8011212 <__d2b+0x7a>
 80111c6:	9301      	str	r3, [sp, #4]
 80111c8:	f1b8 0300 	subs.w	r3, r8, #0
 80111cc:	d026      	beq.n	801121c <__d2b+0x84>
 80111ce:	4668      	mov	r0, sp
 80111d0:	9300      	str	r3, [sp, #0]
 80111d2:	f7ff fd87 	bl	8010ce4 <__lo0bits>
 80111d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80111da:	b1e8      	cbz	r0, 8011218 <__d2b+0x80>
 80111dc:	f1c0 0320 	rsb	r3, r0, #32
 80111e0:	fa02 f303 	lsl.w	r3, r2, r3
 80111e4:	430b      	orrs	r3, r1
 80111e6:	40c2      	lsrs	r2, r0
 80111e8:	6163      	str	r3, [r4, #20]
 80111ea:	9201      	str	r2, [sp, #4]
 80111ec:	9b01      	ldr	r3, [sp, #4]
 80111ee:	61a3      	str	r3, [r4, #24]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	bf14      	ite	ne
 80111f4:	2202      	movne	r2, #2
 80111f6:	2201      	moveq	r2, #1
 80111f8:	6122      	str	r2, [r4, #16]
 80111fa:	b1bd      	cbz	r5, 801122c <__d2b+0x94>
 80111fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011200:	4405      	add	r5, r0
 8011202:	603d      	str	r5, [r7, #0]
 8011204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011208:	6030      	str	r0, [r6, #0]
 801120a:	4620      	mov	r0, r4
 801120c:	b003      	add	sp, #12
 801120e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011216:	e7d6      	b.n	80111c6 <__d2b+0x2e>
 8011218:	6161      	str	r1, [r4, #20]
 801121a:	e7e7      	b.n	80111ec <__d2b+0x54>
 801121c:	a801      	add	r0, sp, #4
 801121e:	f7ff fd61 	bl	8010ce4 <__lo0bits>
 8011222:	9b01      	ldr	r3, [sp, #4]
 8011224:	6163      	str	r3, [r4, #20]
 8011226:	3020      	adds	r0, #32
 8011228:	2201      	movs	r2, #1
 801122a:	e7e5      	b.n	80111f8 <__d2b+0x60>
 801122c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011230:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011234:	6038      	str	r0, [r7, #0]
 8011236:	6918      	ldr	r0, [r3, #16]
 8011238:	f7ff fd34 	bl	8010ca4 <__hi0bits>
 801123c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011240:	e7e2      	b.n	8011208 <__d2b+0x70>
 8011242:	bf00      	nop
 8011244:	08012449 	.word	0x08012449
 8011248:	0801245a 	.word	0x0801245a

0801124c <__sfputc_r>:
 801124c:	6893      	ldr	r3, [r2, #8]
 801124e:	3b01      	subs	r3, #1
 8011250:	2b00      	cmp	r3, #0
 8011252:	b410      	push	{r4}
 8011254:	6093      	str	r3, [r2, #8]
 8011256:	da08      	bge.n	801126a <__sfputc_r+0x1e>
 8011258:	6994      	ldr	r4, [r2, #24]
 801125a:	42a3      	cmp	r3, r4
 801125c:	db01      	blt.n	8011262 <__sfputc_r+0x16>
 801125e:	290a      	cmp	r1, #10
 8011260:	d103      	bne.n	801126a <__sfputc_r+0x1e>
 8011262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011266:	f7fe bb6e 	b.w	800f946 <__swbuf_r>
 801126a:	6813      	ldr	r3, [r2, #0]
 801126c:	1c58      	adds	r0, r3, #1
 801126e:	6010      	str	r0, [r2, #0]
 8011270:	7019      	strb	r1, [r3, #0]
 8011272:	4608      	mov	r0, r1
 8011274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011278:	4770      	bx	lr

0801127a <__sfputs_r>:
 801127a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801127c:	4606      	mov	r6, r0
 801127e:	460f      	mov	r7, r1
 8011280:	4614      	mov	r4, r2
 8011282:	18d5      	adds	r5, r2, r3
 8011284:	42ac      	cmp	r4, r5
 8011286:	d101      	bne.n	801128c <__sfputs_r+0x12>
 8011288:	2000      	movs	r0, #0
 801128a:	e007      	b.n	801129c <__sfputs_r+0x22>
 801128c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011290:	463a      	mov	r2, r7
 8011292:	4630      	mov	r0, r6
 8011294:	f7ff ffda 	bl	801124c <__sfputc_r>
 8011298:	1c43      	adds	r3, r0, #1
 801129a:	d1f3      	bne.n	8011284 <__sfputs_r+0xa>
 801129c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112a0 <_vfiprintf_r>:
 80112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	460d      	mov	r5, r1
 80112a6:	b09d      	sub	sp, #116	; 0x74
 80112a8:	4614      	mov	r4, r2
 80112aa:	4698      	mov	r8, r3
 80112ac:	4606      	mov	r6, r0
 80112ae:	b118      	cbz	r0, 80112b8 <_vfiprintf_r+0x18>
 80112b0:	6a03      	ldr	r3, [r0, #32]
 80112b2:	b90b      	cbnz	r3, 80112b8 <_vfiprintf_r+0x18>
 80112b4:	f7fe fab4 	bl	800f820 <__sinit>
 80112b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112ba:	07d9      	lsls	r1, r3, #31
 80112bc:	d405      	bmi.n	80112ca <_vfiprintf_r+0x2a>
 80112be:	89ab      	ldrh	r3, [r5, #12]
 80112c0:	059a      	lsls	r2, r3, #22
 80112c2:	d402      	bmi.n	80112ca <_vfiprintf_r+0x2a>
 80112c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112c6:	f7fe fcba 	bl	800fc3e <__retarget_lock_acquire_recursive>
 80112ca:	89ab      	ldrh	r3, [r5, #12]
 80112cc:	071b      	lsls	r3, r3, #28
 80112ce:	d501      	bpl.n	80112d4 <_vfiprintf_r+0x34>
 80112d0:	692b      	ldr	r3, [r5, #16]
 80112d2:	b99b      	cbnz	r3, 80112fc <_vfiprintf_r+0x5c>
 80112d4:	4629      	mov	r1, r5
 80112d6:	4630      	mov	r0, r6
 80112d8:	f7fe fb72 	bl	800f9c0 <__swsetup_r>
 80112dc:	b170      	cbz	r0, 80112fc <_vfiprintf_r+0x5c>
 80112de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112e0:	07dc      	lsls	r4, r3, #31
 80112e2:	d504      	bpl.n	80112ee <_vfiprintf_r+0x4e>
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112e8:	b01d      	add	sp, #116	; 0x74
 80112ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ee:	89ab      	ldrh	r3, [r5, #12]
 80112f0:	0598      	lsls	r0, r3, #22
 80112f2:	d4f7      	bmi.n	80112e4 <_vfiprintf_r+0x44>
 80112f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112f6:	f7fe fca3 	bl	800fc40 <__retarget_lock_release_recursive>
 80112fa:	e7f3      	b.n	80112e4 <_vfiprintf_r+0x44>
 80112fc:	2300      	movs	r3, #0
 80112fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011300:	2320      	movs	r3, #32
 8011302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011306:	f8cd 800c 	str.w	r8, [sp, #12]
 801130a:	2330      	movs	r3, #48	; 0x30
 801130c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80114c0 <_vfiprintf_r+0x220>
 8011310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011314:	f04f 0901 	mov.w	r9, #1
 8011318:	4623      	mov	r3, r4
 801131a:	469a      	mov	sl, r3
 801131c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011320:	b10a      	cbz	r2, 8011326 <_vfiprintf_r+0x86>
 8011322:	2a25      	cmp	r2, #37	; 0x25
 8011324:	d1f9      	bne.n	801131a <_vfiprintf_r+0x7a>
 8011326:	ebba 0b04 	subs.w	fp, sl, r4
 801132a:	d00b      	beq.n	8011344 <_vfiprintf_r+0xa4>
 801132c:	465b      	mov	r3, fp
 801132e:	4622      	mov	r2, r4
 8011330:	4629      	mov	r1, r5
 8011332:	4630      	mov	r0, r6
 8011334:	f7ff ffa1 	bl	801127a <__sfputs_r>
 8011338:	3001      	adds	r0, #1
 801133a:	f000 80a9 	beq.w	8011490 <_vfiprintf_r+0x1f0>
 801133e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011340:	445a      	add	r2, fp
 8011342:	9209      	str	r2, [sp, #36]	; 0x24
 8011344:	f89a 3000 	ldrb.w	r3, [sl]
 8011348:	2b00      	cmp	r3, #0
 801134a:	f000 80a1 	beq.w	8011490 <_vfiprintf_r+0x1f0>
 801134e:	2300      	movs	r3, #0
 8011350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011358:	f10a 0a01 	add.w	sl, sl, #1
 801135c:	9304      	str	r3, [sp, #16]
 801135e:	9307      	str	r3, [sp, #28]
 8011360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011364:	931a      	str	r3, [sp, #104]	; 0x68
 8011366:	4654      	mov	r4, sl
 8011368:	2205      	movs	r2, #5
 801136a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801136e:	4854      	ldr	r0, [pc, #336]	; (80114c0 <_vfiprintf_r+0x220>)
 8011370:	f7ee ff3e 	bl	80001f0 <memchr>
 8011374:	9a04      	ldr	r2, [sp, #16]
 8011376:	b9d8      	cbnz	r0, 80113b0 <_vfiprintf_r+0x110>
 8011378:	06d1      	lsls	r1, r2, #27
 801137a:	bf44      	itt	mi
 801137c:	2320      	movmi	r3, #32
 801137e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011382:	0713      	lsls	r3, r2, #28
 8011384:	bf44      	itt	mi
 8011386:	232b      	movmi	r3, #43	; 0x2b
 8011388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801138c:	f89a 3000 	ldrb.w	r3, [sl]
 8011390:	2b2a      	cmp	r3, #42	; 0x2a
 8011392:	d015      	beq.n	80113c0 <_vfiprintf_r+0x120>
 8011394:	9a07      	ldr	r2, [sp, #28]
 8011396:	4654      	mov	r4, sl
 8011398:	2000      	movs	r0, #0
 801139a:	f04f 0c0a 	mov.w	ip, #10
 801139e:	4621      	mov	r1, r4
 80113a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113a4:	3b30      	subs	r3, #48	; 0x30
 80113a6:	2b09      	cmp	r3, #9
 80113a8:	d94d      	bls.n	8011446 <_vfiprintf_r+0x1a6>
 80113aa:	b1b0      	cbz	r0, 80113da <_vfiprintf_r+0x13a>
 80113ac:	9207      	str	r2, [sp, #28]
 80113ae:	e014      	b.n	80113da <_vfiprintf_r+0x13a>
 80113b0:	eba0 0308 	sub.w	r3, r0, r8
 80113b4:	fa09 f303 	lsl.w	r3, r9, r3
 80113b8:	4313      	orrs	r3, r2
 80113ba:	9304      	str	r3, [sp, #16]
 80113bc:	46a2      	mov	sl, r4
 80113be:	e7d2      	b.n	8011366 <_vfiprintf_r+0xc6>
 80113c0:	9b03      	ldr	r3, [sp, #12]
 80113c2:	1d19      	adds	r1, r3, #4
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	9103      	str	r1, [sp, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	bfbb      	ittet	lt
 80113cc:	425b      	neglt	r3, r3
 80113ce:	f042 0202 	orrlt.w	r2, r2, #2
 80113d2:	9307      	strge	r3, [sp, #28]
 80113d4:	9307      	strlt	r3, [sp, #28]
 80113d6:	bfb8      	it	lt
 80113d8:	9204      	strlt	r2, [sp, #16]
 80113da:	7823      	ldrb	r3, [r4, #0]
 80113dc:	2b2e      	cmp	r3, #46	; 0x2e
 80113de:	d10c      	bne.n	80113fa <_vfiprintf_r+0x15a>
 80113e0:	7863      	ldrb	r3, [r4, #1]
 80113e2:	2b2a      	cmp	r3, #42	; 0x2a
 80113e4:	d134      	bne.n	8011450 <_vfiprintf_r+0x1b0>
 80113e6:	9b03      	ldr	r3, [sp, #12]
 80113e8:	1d1a      	adds	r2, r3, #4
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	9203      	str	r2, [sp, #12]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	bfb8      	it	lt
 80113f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80113f6:	3402      	adds	r4, #2
 80113f8:	9305      	str	r3, [sp, #20]
 80113fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80114d0 <_vfiprintf_r+0x230>
 80113fe:	7821      	ldrb	r1, [r4, #0]
 8011400:	2203      	movs	r2, #3
 8011402:	4650      	mov	r0, sl
 8011404:	f7ee fef4 	bl	80001f0 <memchr>
 8011408:	b138      	cbz	r0, 801141a <_vfiprintf_r+0x17a>
 801140a:	9b04      	ldr	r3, [sp, #16]
 801140c:	eba0 000a 	sub.w	r0, r0, sl
 8011410:	2240      	movs	r2, #64	; 0x40
 8011412:	4082      	lsls	r2, r0
 8011414:	4313      	orrs	r3, r2
 8011416:	3401      	adds	r4, #1
 8011418:	9304      	str	r3, [sp, #16]
 801141a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141e:	4829      	ldr	r0, [pc, #164]	; (80114c4 <_vfiprintf_r+0x224>)
 8011420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011424:	2206      	movs	r2, #6
 8011426:	f7ee fee3 	bl	80001f0 <memchr>
 801142a:	2800      	cmp	r0, #0
 801142c:	d03f      	beq.n	80114ae <_vfiprintf_r+0x20e>
 801142e:	4b26      	ldr	r3, [pc, #152]	; (80114c8 <_vfiprintf_r+0x228>)
 8011430:	bb1b      	cbnz	r3, 801147a <_vfiprintf_r+0x1da>
 8011432:	9b03      	ldr	r3, [sp, #12]
 8011434:	3307      	adds	r3, #7
 8011436:	f023 0307 	bic.w	r3, r3, #7
 801143a:	3308      	adds	r3, #8
 801143c:	9303      	str	r3, [sp, #12]
 801143e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011440:	443b      	add	r3, r7
 8011442:	9309      	str	r3, [sp, #36]	; 0x24
 8011444:	e768      	b.n	8011318 <_vfiprintf_r+0x78>
 8011446:	fb0c 3202 	mla	r2, ip, r2, r3
 801144a:	460c      	mov	r4, r1
 801144c:	2001      	movs	r0, #1
 801144e:	e7a6      	b.n	801139e <_vfiprintf_r+0xfe>
 8011450:	2300      	movs	r3, #0
 8011452:	3401      	adds	r4, #1
 8011454:	9305      	str	r3, [sp, #20]
 8011456:	4619      	mov	r1, r3
 8011458:	f04f 0c0a 	mov.w	ip, #10
 801145c:	4620      	mov	r0, r4
 801145e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011462:	3a30      	subs	r2, #48	; 0x30
 8011464:	2a09      	cmp	r2, #9
 8011466:	d903      	bls.n	8011470 <_vfiprintf_r+0x1d0>
 8011468:	2b00      	cmp	r3, #0
 801146a:	d0c6      	beq.n	80113fa <_vfiprintf_r+0x15a>
 801146c:	9105      	str	r1, [sp, #20]
 801146e:	e7c4      	b.n	80113fa <_vfiprintf_r+0x15a>
 8011470:	fb0c 2101 	mla	r1, ip, r1, r2
 8011474:	4604      	mov	r4, r0
 8011476:	2301      	movs	r3, #1
 8011478:	e7f0      	b.n	801145c <_vfiprintf_r+0x1bc>
 801147a:	ab03      	add	r3, sp, #12
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	462a      	mov	r2, r5
 8011480:	4b12      	ldr	r3, [pc, #72]	; (80114cc <_vfiprintf_r+0x22c>)
 8011482:	a904      	add	r1, sp, #16
 8011484:	4630      	mov	r0, r6
 8011486:	f7fd fcb7 	bl	800edf8 <_printf_float>
 801148a:	4607      	mov	r7, r0
 801148c:	1c78      	adds	r0, r7, #1
 801148e:	d1d6      	bne.n	801143e <_vfiprintf_r+0x19e>
 8011490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011492:	07d9      	lsls	r1, r3, #31
 8011494:	d405      	bmi.n	80114a2 <_vfiprintf_r+0x202>
 8011496:	89ab      	ldrh	r3, [r5, #12]
 8011498:	059a      	lsls	r2, r3, #22
 801149a:	d402      	bmi.n	80114a2 <_vfiprintf_r+0x202>
 801149c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801149e:	f7fe fbcf 	bl	800fc40 <__retarget_lock_release_recursive>
 80114a2:	89ab      	ldrh	r3, [r5, #12]
 80114a4:	065b      	lsls	r3, r3, #25
 80114a6:	f53f af1d 	bmi.w	80112e4 <_vfiprintf_r+0x44>
 80114aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114ac:	e71c      	b.n	80112e8 <_vfiprintf_r+0x48>
 80114ae:	ab03      	add	r3, sp, #12
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	462a      	mov	r2, r5
 80114b4:	4b05      	ldr	r3, [pc, #20]	; (80114cc <_vfiprintf_r+0x22c>)
 80114b6:	a904      	add	r1, sp, #16
 80114b8:	4630      	mov	r0, r6
 80114ba:	f7fd ff41 	bl	800f340 <_printf_i>
 80114be:	e7e4      	b.n	801148a <_vfiprintf_r+0x1ea>
 80114c0:	080125b4 	.word	0x080125b4
 80114c4:	080125be 	.word	0x080125be
 80114c8:	0800edf9 	.word	0x0800edf9
 80114cc:	0801127b 	.word	0x0801127b
 80114d0:	080125ba 	.word	0x080125ba

080114d4 <__swhatbuf_r>:
 80114d4:	b570      	push	{r4, r5, r6, lr}
 80114d6:	460c      	mov	r4, r1
 80114d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114dc:	2900      	cmp	r1, #0
 80114de:	b096      	sub	sp, #88	; 0x58
 80114e0:	4615      	mov	r5, r2
 80114e2:	461e      	mov	r6, r3
 80114e4:	da0d      	bge.n	8011502 <__swhatbuf_r+0x2e>
 80114e6:	89a3      	ldrh	r3, [r4, #12]
 80114e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80114ec:	f04f 0100 	mov.w	r1, #0
 80114f0:	bf0c      	ite	eq
 80114f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80114f6:	2340      	movne	r3, #64	; 0x40
 80114f8:	2000      	movs	r0, #0
 80114fa:	6031      	str	r1, [r6, #0]
 80114fc:	602b      	str	r3, [r5, #0]
 80114fe:	b016      	add	sp, #88	; 0x58
 8011500:	bd70      	pop	{r4, r5, r6, pc}
 8011502:	466a      	mov	r2, sp
 8011504:	f000 f87c 	bl	8011600 <_fstat_r>
 8011508:	2800      	cmp	r0, #0
 801150a:	dbec      	blt.n	80114e6 <__swhatbuf_r+0x12>
 801150c:	9901      	ldr	r1, [sp, #4]
 801150e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011512:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011516:	4259      	negs	r1, r3
 8011518:	4159      	adcs	r1, r3
 801151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801151e:	e7eb      	b.n	80114f8 <__swhatbuf_r+0x24>

08011520 <__smakebuf_r>:
 8011520:	898b      	ldrh	r3, [r1, #12]
 8011522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011524:	079d      	lsls	r5, r3, #30
 8011526:	4606      	mov	r6, r0
 8011528:	460c      	mov	r4, r1
 801152a:	d507      	bpl.n	801153c <__smakebuf_r+0x1c>
 801152c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011530:	6023      	str	r3, [r4, #0]
 8011532:	6123      	str	r3, [r4, #16]
 8011534:	2301      	movs	r3, #1
 8011536:	6163      	str	r3, [r4, #20]
 8011538:	b002      	add	sp, #8
 801153a:	bd70      	pop	{r4, r5, r6, pc}
 801153c:	ab01      	add	r3, sp, #4
 801153e:	466a      	mov	r2, sp
 8011540:	f7ff ffc8 	bl	80114d4 <__swhatbuf_r>
 8011544:	9900      	ldr	r1, [sp, #0]
 8011546:	4605      	mov	r5, r0
 8011548:	4630      	mov	r0, r6
 801154a:	f7ff fa77 	bl	8010a3c <_malloc_r>
 801154e:	b948      	cbnz	r0, 8011564 <__smakebuf_r+0x44>
 8011550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011554:	059a      	lsls	r2, r3, #22
 8011556:	d4ef      	bmi.n	8011538 <__smakebuf_r+0x18>
 8011558:	f023 0303 	bic.w	r3, r3, #3
 801155c:	f043 0302 	orr.w	r3, r3, #2
 8011560:	81a3      	strh	r3, [r4, #12]
 8011562:	e7e3      	b.n	801152c <__smakebuf_r+0xc>
 8011564:	89a3      	ldrh	r3, [r4, #12]
 8011566:	6020      	str	r0, [r4, #0]
 8011568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801156c:	81a3      	strh	r3, [r4, #12]
 801156e:	9b00      	ldr	r3, [sp, #0]
 8011570:	6163      	str	r3, [r4, #20]
 8011572:	9b01      	ldr	r3, [sp, #4]
 8011574:	6120      	str	r0, [r4, #16]
 8011576:	b15b      	cbz	r3, 8011590 <__smakebuf_r+0x70>
 8011578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801157c:	4630      	mov	r0, r6
 801157e:	f000 f851 	bl	8011624 <_isatty_r>
 8011582:	b128      	cbz	r0, 8011590 <__smakebuf_r+0x70>
 8011584:	89a3      	ldrh	r3, [r4, #12]
 8011586:	f023 0303 	bic.w	r3, r3, #3
 801158a:	f043 0301 	orr.w	r3, r3, #1
 801158e:	81a3      	strh	r3, [r4, #12]
 8011590:	89a3      	ldrh	r3, [r4, #12]
 8011592:	431d      	orrs	r5, r3
 8011594:	81a5      	strh	r5, [r4, #12]
 8011596:	e7cf      	b.n	8011538 <__smakebuf_r+0x18>

08011598 <_putc_r>:
 8011598:	b570      	push	{r4, r5, r6, lr}
 801159a:	460d      	mov	r5, r1
 801159c:	4614      	mov	r4, r2
 801159e:	4606      	mov	r6, r0
 80115a0:	b118      	cbz	r0, 80115aa <_putc_r+0x12>
 80115a2:	6a03      	ldr	r3, [r0, #32]
 80115a4:	b90b      	cbnz	r3, 80115aa <_putc_r+0x12>
 80115a6:	f7fe f93b 	bl	800f820 <__sinit>
 80115aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115ac:	07d8      	lsls	r0, r3, #31
 80115ae:	d405      	bmi.n	80115bc <_putc_r+0x24>
 80115b0:	89a3      	ldrh	r3, [r4, #12]
 80115b2:	0599      	lsls	r1, r3, #22
 80115b4:	d402      	bmi.n	80115bc <_putc_r+0x24>
 80115b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115b8:	f7fe fb41 	bl	800fc3e <__retarget_lock_acquire_recursive>
 80115bc:	68a3      	ldr	r3, [r4, #8]
 80115be:	3b01      	subs	r3, #1
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	60a3      	str	r3, [r4, #8]
 80115c4:	da05      	bge.n	80115d2 <_putc_r+0x3a>
 80115c6:	69a2      	ldr	r2, [r4, #24]
 80115c8:	4293      	cmp	r3, r2
 80115ca:	db12      	blt.n	80115f2 <_putc_r+0x5a>
 80115cc:	b2eb      	uxtb	r3, r5
 80115ce:	2b0a      	cmp	r3, #10
 80115d0:	d00f      	beq.n	80115f2 <_putc_r+0x5a>
 80115d2:	6823      	ldr	r3, [r4, #0]
 80115d4:	1c5a      	adds	r2, r3, #1
 80115d6:	6022      	str	r2, [r4, #0]
 80115d8:	701d      	strb	r5, [r3, #0]
 80115da:	b2ed      	uxtb	r5, r5
 80115dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115de:	07da      	lsls	r2, r3, #31
 80115e0:	d405      	bmi.n	80115ee <_putc_r+0x56>
 80115e2:	89a3      	ldrh	r3, [r4, #12]
 80115e4:	059b      	lsls	r3, r3, #22
 80115e6:	d402      	bmi.n	80115ee <_putc_r+0x56>
 80115e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115ea:	f7fe fb29 	bl	800fc40 <__retarget_lock_release_recursive>
 80115ee:	4628      	mov	r0, r5
 80115f0:	bd70      	pop	{r4, r5, r6, pc}
 80115f2:	4629      	mov	r1, r5
 80115f4:	4622      	mov	r2, r4
 80115f6:	4630      	mov	r0, r6
 80115f8:	f7fe f9a5 	bl	800f946 <__swbuf_r>
 80115fc:	4605      	mov	r5, r0
 80115fe:	e7ed      	b.n	80115dc <_putc_r+0x44>

08011600 <_fstat_r>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	4d07      	ldr	r5, [pc, #28]	; (8011620 <_fstat_r+0x20>)
 8011604:	2300      	movs	r3, #0
 8011606:	4604      	mov	r4, r0
 8011608:	4608      	mov	r0, r1
 801160a:	4611      	mov	r1, r2
 801160c:	602b      	str	r3, [r5, #0]
 801160e:	f7f1 fece 	bl	80033ae <_fstat>
 8011612:	1c43      	adds	r3, r0, #1
 8011614:	d102      	bne.n	801161c <_fstat_r+0x1c>
 8011616:	682b      	ldr	r3, [r5, #0]
 8011618:	b103      	cbz	r3, 801161c <_fstat_r+0x1c>
 801161a:	6023      	str	r3, [r4, #0]
 801161c:	bd38      	pop	{r3, r4, r5, pc}
 801161e:	bf00      	nop
 8011620:	20007f54 	.word	0x20007f54

08011624 <_isatty_r>:
 8011624:	b538      	push	{r3, r4, r5, lr}
 8011626:	4d06      	ldr	r5, [pc, #24]	; (8011640 <_isatty_r+0x1c>)
 8011628:	2300      	movs	r3, #0
 801162a:	4604      	mov	r4, r0
 801162c:	4608      	mov	r0, r1
 801162e:	602b      	str	r3, [r5, #0]
 8011630:	f7f1 fecd 	bl	80033ce <_isatty>
 8011634:	1c43      	adds	r3, r0, #1
 8011636:	d102      	bne.n	801163e <_isatty_r+0x1a>
 8011638:	682b      	ldr	r3, [r5, #0]
 801163a:	b103      	cbz	r3, 801163e <_isatty_r+0x1a>
 801163c:	6023      	str	r3, [r4, #0]
 801163e:	bd38      	pop	{r3, r4, r5, pc}
 8011640:	20007f54 	.word	0x20007f54

08011644 <_sbrk_r>:
 8011644:	b538      	push	{r3, r4, r5, lr}
 8011646:	4d06      	ldr	r5, [pc, #24]	; (8011660 <_sbrk_r+0x1c>)
 8011648:	2300      	movs	r3, #0
 801164a:	4604      	mov	r4, r0
 801164c:	4608      	mov	r0, r1
 801164e:	602b      	str	r3, [r5, #0]
 8011650:	f7f1 fed6 	bl	8003400 <_sbrk>
 8011654:	1c43      	adds	r3, r0, #1
 8011656:	d102      	bne.n	801165e <_sbrk_r+0x1a>
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	b103      	cbz	r3, 801165e <_sbrk_r+0x1a>
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	bd38      	pop	{r3, r4, r5, pc}
 8011660:	20007f54 	.word	0x20007f54

08011664 <__assert_func>:
 8011664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011666:	4614      	mov	r4, r2
 8011668:	461a      	mov	r2, r3
 801166a:	4b09      	ldr	r3, [pc, #36]	; (8011690 <__assert_func+0x2c>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	4605      	mov	r5, r0
 8011670:	68d8      	ldr	r0, [r3, #12]
 8011672:	b14c      	cbz	r4, 8011688 <__assert_func+0x24>
 8011674:	4b07      	ldr	r3, [pc, #28]	; (8011694 <__assert_func+0x30>)
 8011676:	9100      	str	r1, [sp, #0]
 8011678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801167c:	4906      	ldr	r1, [pc, #24]	; (8011698 <__assert_func+0x34>)
 801167e:	462b      	mov	r3, r5
 8011680:	f000 f844 	bl	801170c <fiprintf>
 8011684:	f000 f854 	bl	8011730 <abort>
 8011688:	4b04      	ldr	r3, [pc, #16]	; (801169c <__assert_func+0x38>)
 801168a:	461c      	mov	r4, r3
 801168c:	e7f3      	b.n	8011676 <__assert_func+0x12>
 801168e:	bf00      	nop
 8011690:	20000210 	.word	0x20000210
 8011694:	080125cf 	.word	0x080125cf
 8011698:	080125dc 	.word	0x080125dc
 801169c:	0801260a 	.word	0x0801260a

080116a0 <_calloc_r>:
 80116a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116a2:	fba1 2402 	umull	r2, r4, r1, r2
 80116a6:	b94c      	cbnz	r4, 80116bc <_calloc_r+0x1c>
 80116a8:	4611      	mov	r1, r2
 80116aa:	9201      	str	r2, [sp, #4]
 80116ac:	f7ff f9c6 	bl	8010a3c <_malloc_r>
 80116b0:	9a01      	ldr	r2, [sp, #4]
 80116b2:	4605      	mov	r5, r0
 80116b4:	b930      	cbnz	r0, 80116c4 <_calloc_r+0x24>
 80116b6:	4628      	mov	r0, r5
 80116b8:	b003      	add	sp, #12
 80116ba:	bd30      	pop	{r4, r5, pc}
 80116bc:	220c      	movs	r2, #12
 80116be:	6002      	str	r2, [r0, #0]
 80116c0:	2500      	movs	r5, #0
 80116c2:	e7f8      	b.n	80116b6 <_calloc_r+0x16>
 80116c4:	4621      	mov	r1, r4
 80116c6:	f7fe f9d3 	bl	800fa70 <memset>
 80116ca:	e7f4      	b.n	80116b6 <_calloc_r+0x16>

080116cc <__ascii_mbtowc>:
 80116cc:	b082      	sub	sp, #8
 80116ce:	b901      	cbnz	r1, 80116d2 <__ascii_mbtowc+0x6>
 80116d0:	a901      	add	r1, sp, #4
 80116d2:	b142      	cbz	r2, 80116e6 <__ascii_mbtowc+0x1a>
 80116d4:	b14b      	cbz	r3, 80116ea <__ascii_mbtowc+0x1e>
 80116d6:	7813      	ldrb	r3, [r2, #0]
 80116d8:	600b      	str	r3, [r1, #0]
 80116da:	7812      	ldrb	r2, [r2, #0]
 80116dc:	1e10      	subs	r0, r2, #0
 80116de:	bf18      	it	ne
 80116e0:	2001      	movne	r0, #1
 80116e2:	b002      	add	sp, #8
 80116e4:	4770      	bx	lr
 80116e6:	4610      	mov	r0, r2
 80116e8:	e7fb      	b.n	80116e2 <__ascii_mbtowc+0x16>
 80116ea:	f06f 0001 	mvn.w	r0, #1
 80116ee:	e7f8      	b.n	80116e2 <__ascii_mbtowc+0x16>

080116f0 <__ascii_wctomb>:
 80116f0:	b149      	cbz	r1, 8011706 <__ascii_wctomb+0x16>
 80116f2:	2aff      	cmp	r2, #255	; 0xff
 80116f4:	bf85      	ittet	hi
 80116f6:	238a      	movhi	r3, #138	; 0x8a
 80116f8:	6003      	strhi	r3, [r0, #0]
 80116fa:	700a      	strbls	r2, [r1, #0]
 80116fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011700:	bf98      	it	ls
 8011702:	2001      	movls	r0, #1
 8011704:	4770      	bx	lr
 8011706:	4608      	mov	r0, r1
 8011708:	4770      	bx	lr
	...

0801170c <fiprintf>:
 801170c:	b40e      	push	{r1, r2, r3}
 801170e:	b503      	push	{r0, r1, lr}
 8011710:	4601      	mov	r1, r0
 8011712:	ab03      	add	r3, sp, #12
 8011714:	4805      	ldr	r0, [pc, #20]	; (801172c <fiprintf+0x20>)
 8011716:	f853 2b04 	ldr.w	r2, [r3], #4
 801171a:	6800      	ldr	r0, [r0, #0]
 801171c:	9301      	str	r3, [sp, #4]
 801171e:	f7ff fdbf 	bl	80112a0 <_vfiprintf_r>
 8011722:	b002      	add	sp, #8
 8011724:	f85d eb04 	ldr.w	lr, [sp], #4
 8011728:	b003      	add	sp, #12
 801172a:	4770      	bx	lr
 801172c:	20000210 	.word	0x20000210

08011730 <abort>:
 8011730:	b508      	push	{r3, lr}
 8011732:	2006      	movs	r0, #6
 8011734:	f000 f82c 	bl	8011790 <raise>
 8011738:	2001      	movs	r0, #1
 801173a:	f7f1 fde9 	bl	8003310 <_exit>

0801173e <_raise_r>:
 801173e:	291f      	cmp	r1, #31
 8011740:	b538      	push	{r3, r4, r5, lr}
 8011742:	4604      	mov	r4, r0
 8011744:	460d      	mov	r5, r1
 8011746:	d904      	bls.n	8011752 <_raise_r+0x14>
 8011748:	2316      	movs	r3, #22
 801174a:	6003      	str	r3, [r0, #0]
 801174c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011750:	bd38      	pop	{r3, r4, r5, pc}
 8011752:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011754:	b112      	cbz	r2, 801175c <_raise_r+0x1e>
 8011756:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801175a:	b94b      	cbnz	r3, 8011770 <_raise_r+0x32>
 801175c:	4620      	mov	r0, r4
 801175e:	f000 f831 	bl	80117c4 <_getpid_r>
 8011762:	462a      	mov	r2, r5
 8011764:	4601      	mov	r1, r0
 8011766:	4620      	mov	r0, r4
 8011768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801176c:	f000 b818 	b.w	80117a0 <_kill_r>
 8011770:	2b01      	cmp	r3, #1
 8011772:	d00a      	beq.n	801178a <_raise_r+0x4c>
 8011774:	1c59      	adds	r1, r3, #1
 8011776:	d103      	bne.n	8011780 <_raise_r+0x42>
 8011778:	2316      	movs	r3, #22
 801177a:	6003      	str	r3, [r0, #0]
 801177c:	2001      	movs	r0, #1
 801177e:	e7e7      	b.n	8011750 <_raise_r+0x12>
 8011780:	2400      	movs	r4, #0
 8011782:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011786:	4628      	mov	r0, r5
 8011788:	4798      	blx	r3
 801178a:	2000      	movs	r0, #0
 801178c:	e7e0      	b.n	8011750 <_raise_r+0x12>
	...

08011790 <raise>:
 8011790:	4b02      	ldr	r3, [pc, #8]	; (801179c <raise+0xc>)
 8011792:	4601      	mov	r1, r0
 8011794:	6818      	ldr	r0, [r3, #0]
 8011796:	f7ff bfd2 	b.w	801173e <_raise_r>
 801179a:	bf00      	nop
 801179c:	20000210 	.word	0x20000210

080117a0 <_kill_r>:
 80117a0:	b538      	push	{r3, r4, r5, lr}
 80117a2:	4d07      	ldr	r5, [pc, #28]	; (80117c0 <_kill_r+0x20>)
 80117a4:	2300      	movs	r3, #0
 80117a6:	4604      	mov	r4, r0
 80117a8:	4608      	mov	r0, r1
 80117aa:	4611      	mov	r1, r2
 80117ac:	602b      	str	r3, [r5, #0]
 80117ae:	f7f1 fd9f 	bl	80032f0 <_kill>
 80117b2:	1c43      	adds	r3, r0, #1
 80117b4:	d102      	bne.n	80117bc <_kill_r+0x1c>
 80117b6:	682b      	ldr	r3, [r5, #0]
 80117b8:	b103      	cbz	r3, 80117bc <_kill_r+0x1c>
 80117ba:	6023      	str	r3, [r4, #0]
 80117bc:	bd38      	pop	{r3, r4, r5, pc}
 80117be:	bf00      	nop
 80117c0:	20007f54 	.word	0x20007f54

080117c4 <_getpid_r>:
 80117c4:	f7f1 bd8c 	b.w	80032e0 <_getpid>

080117c8 <_init>:
 80117c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ca:	bf00      	nop
 80117cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117ce:	bc08      	pop	{r3}
 80117d0:	469e      	mov	lr, r3
 80117d2:	4770      	bx	lr

080117d4 <_fini>:
 80117d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117d6:	bf00      	nop
 80117d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117da:	bc08      	pop	{r3}
 80117dc:	469e      	mov	lr, r3
 80117de:	4770      	bx	lr
