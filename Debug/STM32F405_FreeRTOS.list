
STM32F405_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007664  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  080077f8  080077f8  000177f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082bc  080082bc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082c4  080082c4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080082cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000042c4  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000449c  2000449c  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f922  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002abe  00000000  00000000  0002fb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c88  00000000  00000000  00032630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000982  00000000  00000000  000332b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021396  00000000  00000000  00033c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e8f2  00000000  00000000  00054fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2770  00000000  00000000  000638c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004244  00000000  00000000  00126034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080077dc 	.word	0x080077dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080077dc 	.word	0x080077dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <_write>:
//#include "stm32f4xx_hal_def.h"

extern UART_HandleTypeDef huart6;

int _write(int file, char* p, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
		if(HAL_UART_Transmit(&huart6, p, len , 10 )!= 0)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <_write+0x30>)
 8000eba:	f001 fcc5 	bl	8002848 <HAL_UART_Transmit>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <_write+0x26>
			//		while(!LL_USART_IsActiveFlag_TXE(USART6));0
			//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
			return -1;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	e000      	b.n	8000ecc <_write+0x28>
		return len;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000494 	.word	0x20000494

08000ed8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <vApplicationGetIdleTaskMemory+0x30>)
 8000eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	20000294 	.word	0x20000294

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fbe5 	bl	80016e0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f86f 	bl	8000ff8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 f901 	bl	8001120 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000f1e:	f000 f8d5 	bl	80010cc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  InitTick(168000000, 1000000U);			//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 8000f22:	4929      	ldr	r1, [pc, #164]	; (8000fc8 <main+0xbc>)
 8000f24:	4829      	ldr	r0, [pc, #164]	; (8000fcc <main+0xc0>)
 8000f26:	f000 f9cb 	bl	80012c0 <InitTick>
  //usDelay(1000);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); 	// LED Off
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <main+0xc4>)
 8000f30:	f000 ff88 	bl	8001e44 <HAL_GPIO_WritePin>
  osDelay(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f002 fca4 	bl	8003882 <osDelay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);	// LED On
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2120      	movs	r1, #32
 8000f3e:	4824      	ldr	r0, [pc, #144]	; (8000fd0 <main+0xc4>)
 8000f40:	f000 ff80 	bl	8001e44 <HAL_GPIO_WritePin>
  t1 = DWT->CYCCNT;
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <main+0xc8>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <main+0xcc>)
 8000f4a:	6013      	str	r3, [r2, #0]
  osDelay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f002 fc98 	bl	8003882 <osDelay>
  t2 = DWT->CYCCNT;
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <main+0xc8>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <main+0xd0>)
 8000f58:	6013      	str	r3, [r2, #0]
  printf("delay = %.2f\n",(float)(t2-t1)/CLOCK_PER_USEC);
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <main+0xd0>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <main+0xcc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f6c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000fe0 <main+0xd4>
 8000f70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f74:	ee16 0a90 	vmov	r0, s13
 8000f78:	f7ff fae6 	bl	8000548 <__aeabi_f2d>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <main+0xd8>)
 8000f82:	f004 fbd3 	bl	800572c <iprintf>


  freertos_IntroTitle();
 8000f86:	f000 f925 	bl	80011d4 <freertos_IntroTitle>
  printf("[TASK]main\n");
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <main+0xdc>)
 8000f8c:	f004 fc34 	bl	80057f8 <puts>


  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <main+0xe0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <main+0xe0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0220 	orr.w	r2, r2, #32
 8000f9e:	60da      	str	r2, [r3, #12]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <main+0xe4>)
 8000fa2:	1d3c      	adds	r4, r7, #4
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000faa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fc17 	bl	80037ea <osThreadCreate>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <main+0xe8>)
 8000fc0:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fc2:	f002 fc0b 	bl	80037dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <main+0xba>
 8000fc8:	000f4240 	.word	0x000f4240
 8000fcc:	0a037a00 	.word	0x0a037a00
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	e0001000 	.word	0xe0001000
 8000fd8:	200004e0 	.word	0x200004e0
 8000fdc:	200004e4 	.word	0x200004e4
 8000fe0:	43280000 	.word	0x43280000
 8000fe4:	080077f8 	.word	0x080077f8
 8000fe8:	08007808 	.word	0x08007808
 8000fec:	20000494 	.word	0x20000494
 8000ff0:	08007820 	.word	0x08007820
 8000ff4:	200004dc 	.word	0x200004dc

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f004 fcd6 	bl	80059b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <SystemClock_Config+0xcc>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <SystemClock_Config+0xd0>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001068:	2304      	movs	r3, #4
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800106c:	23a8      	movs	r3, #168	; 0xa8
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001074:	2304      	movs	r3, #4
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fefb 	bl	8001e78 <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001088:	f000 f956 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001098:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2105      	movs	r1, #5
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 f95c 	bl	8002368 <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010b6:	f000 f93f 	bl	8001338 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	; 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_USART6_UART_Init+0x50>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_USART6_UART_Init+0x4c>)
 8001104:	f001 fb50 	bl	80027a8 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800110e:	f000 f913 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000494 	.word	0x20000494
 800111c:	40011400 	.word	0x40011400

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_GPIO_Init+0x98>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <MX_GPIO_Init+0x98>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_GPIO_Init+0x98>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_GPIO_Init+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <MX_GPIO_Init+0x98>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_GPIO_Init+0x98>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_GPIO_Init+0x98>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <MX_GPIO_Init+0x98>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_GPIO_Init+0x98>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2120      	movs	r1, #32
 800118e:	480b      	ldr	r0, [pc, #44]	; (80011bc <MX_GPIO_Init+0x9c>)
 8001190:	f000 fe58 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001194:	2320      	movs	r3, #32
 8001196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4619      	mov	r1, r3
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_GPIO_Init+0x9c>)
 80011ac:	f000 fcae 	bl	8001b0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020400 	.word	0x40020400

080011c0 <OSVersion>:

/* USER CODE BEGIN 4 */

char* OSVersion(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	return tskKERNEL_VERSION_NUMBER;
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <OSVersion+0x10>)
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	0800783c 	.word	0x0800783c

080011d4 <freertos_IntroTitle>:


void freertos_IntroTitle(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]] \n");
 80011d8:	4823      	ldr	r0, [pc, #140]	; (8001268 <freertos_IntroTitle+0x94>)
 80011da:	f004 fb0d 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                     \n");
 80011de:	4823      	ldr	r0, [pc, #140]	; (800126c <freertos_IntroTitle+0x98>)
 80011e0:	f004 fb0a 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                      \n");
 80011e4:	4822      	ldr	r0, [pc, #136]	; (8001270 <freertos_IntroTitle+0x9c>)
 80011e6:	f004 fb07 	bl	80057f8 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]      :]]]        ]   .]]]].    :]]]]:  \n");
 80011ea:	4822      	ldr	r0, [pc, #136]	; (8001274 <freertos_IntroTitle+0xa0>)
 80011ec:	f004 fb04 	bl	80057f8 <puts>
  printf("]        ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]       ]]]       ]]   ]]]]]]   :]]]]]]  \n");
 80011f0:	4821      	ldr	r0, [pc, #132]	; (8001278 <freertos_IntroTitle+0xa4>)
 80011f2:	f004 fb01 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]  ]]]:  ]]]]]        :]]  ]]:  ]]:  :]  \n");
 80011f6:	4821      	ldr	r0, [pc, #132]	; (800127c <freertos_IntroTitle+0xa8>)
 80011f8:	f004 fafe 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]  .    ]]].    :]]]].    :]]]  ]]]]  ]]]]]  ]     ]]:  :]]  ]]       \n");
 80011fc:	4820      	ldr	r0, [pc, #128]	; (8001280 <freertos_IntroTitle+0xac>)
 80011fe:	f004 fafb 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]       ]].      :]].      :]]  ]]]:  ]]]]] ]]     ]]    ]]  ]]]:     \n");
 8001202:	4820      	ldr	r0, [pc, #128]	; (8001284 <freertos_IntroTitle+0xb0>)
 8001204:	f004 faf8 	bl	80057f8 <puts>
  printf("]       ]]]]   .]]]]]  :]]:  ]]  :]]:  ]]       :]]]]  ]]     ]]    ]]  :]]]]]:  \n");
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <freertos_IntroTitle+0xb4>)
 800120a:	f004 faf5 	bl	80057f8 <puts>
  printf("]       ]]]]  ]]]]]]]        ]]        ]]      ]]]]]   ]]     ]]    ]]   .]]]]]: \n");
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <freertos_IntroTitle+0xb8>)
 8001210:	f004 faf2 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]        ]]        ]]  ]]]  .]]    ]]     ]]    ]]      :]]] \n");
 8001214:	481e      	ldr	r0, [pc, #120]	; (8001290 <freertos_IntroTitle+0xbc>)
 8001216:	f004 faef 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]  ]]]]]]]]  ]]]]]]]]  ]]]  ]]     ]]     ]]:  :]]        ]] \n");
 800121a:	481e      	ldr	r0, [pc, #120]	; (8001294 <freertos_IntroTitle+0xc0>)
 800121c:	f004 faec 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]   .]]: ]]   .]]: ]]  ]]]:        ]]     :]]  ]]:  ]:.  :]] \n");
 8001220:	481d      	ldr	r0, [pc, #116]	; (8001298 <freertos_IntroTitle+0xc4>)
 8001222:	f004 fae9 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]].       ]].       ]]  ]]]]  ]:    ]]      ]]]]]]   ]]]]]]]: \n");
 8001226:	481d      	ldr	r0, [pc, #116]	; (800129c <freertos_IntroTitle+0xc8>)
 8001228:	f004 fae6 	bl	80057f8 <puts>
  printf("]  ]]]]]]]]]  ]]]]]]]].     :]]].     :]]  ]]]] ]]]    ]]      .]]]].   .]]]]]:  \n");
 800122c:	481c      	ldr	r0, [pc, #112]	; (80012a0 <freertos_IntroTitle+0xcc>)
 800122e:	f004 fae3 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                   \n");
 8001232:	481c      	ldr	r0, [pc, #112]	; (80012a4 <freertos_IntroTitle+0xd0>)
 8001234:	f004 fae0 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]                                    \n");
 8001238:	481b      	ldr	r0, [pc, #108]	; (80012a8 <freertos_IntroTitle+0xd4>)
 800123a:	f004 fadd 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   The Real Time Kernel \n");
 800123e:	481b      	ldr	r0, [pc, #108]	; (80012ac <freertos_IntroTitle+0xd8>)
 8001240:	f004 fada 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8001244:	481a      	ldr	r0, [pc, #104]	; (80012b0 <freertos_IntroTitle+0xdc>)
 8001246:	f004 fad7 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]     FreeRTOS version %s\n", OSVersion());
 800124a:	f7ff ffb9 	bl	80011c0 <OSVersion>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <freertos_IntroTitle+0xe0>)
 8001254:	f004 fa6a 	bl	800572c <iprintf>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n");
 8001258:	4817      	ldr	r0, [pc, #92]	; (80012b8 <freertos_IntroTitle+0xe4>)
 800125a:	f004 facd 	bl	80057f8 <puts>
  printf("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]   Copyright guileschool.com\n");
 800125e:	4817      	ldr	r0, [pc, #92]	; (80012bc <freertos_IntroTitle+0xe8>)
 8001260:	f004 faca 	bl	80057f8 <puts>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	08007844 	.word	0x08007844
 800126c:	08007884 	.word	0x08007884
 8001270:	080078d8 	.word	0x080078d8
 8001274:	0800792c 	.word	0x0800792c
 8001278:	08007980 	.word	0x08007980
 800127c:	080079d4 	.word	0x080079d4
 8001280:	08007a28 	.word	0x08007a28
 8001284:	08007a7c 	.word	0x08007a7c
 8001288:	08007ad0 	.word	0x08007ad0
 800128c:	08007b24 	.word	0x08007b24
 8001290:	08007b78 	.word	0x08007b78
 8001294:	08007bcc 	.word	0x08007bcc
 8001298:	08007c20 	.word	0x08007c20
 800129c:	08007c74 	.word	0x08007c74
 80012a0:	08007cc8 	.word	0x08007cc8
 80012a4:	08007d1c 	.word	0x08007d1c
 80012a8:	08007d70 	.word	0x08007d70
 80012ac:	08007dc4 	.word	0x08007dc4
 80012b0:	08007e0c 	.word	0x08007e0c
 80012b4:	08007e38 	.word	0x08007e38
 80012b8:	08007e7c 	.word	0x08007e7c
 80012bc:	08007ea8 	.word	0x08007ea8

080012c0 <InitTick>:
  printf("\n\nAssertion failed in %s:%d\n", pcFile, ulLine); for(;;);
}


void InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <InitTick+0x50>)
 80012d4:	3b01      	subs	r3, #1
 80012d6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <InitTick+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <InitTick+0x50>)
 80012e0:	2205      	movs	r2, #5
 80012e2:	601a      	str	r2, [r3, #0]

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; 				// 시간 측정 초기화
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <InitTick+0x54>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <InitTick+0x54>)
 80012ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ee:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <InitTick+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <InitTick+0x58>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a07      	ldr	r2, [pc, #28]	; (8001318 <InitTick+0x58>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6013      	str	r3, [r2, #0]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e010 	.word	0xe000e010
 8001314:	e000edf0 	.word	0xe000edf0
 8001318:	e0001000 	.word	0xe0001000

0800131c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	printf("[TASK] StartDefaultTask!\n");
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <StartDefaultTask+0x18>)
 8001326:	f004 fa67 	bl	80057f8 <puts>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f002 faa9 	bl	8003882 <osDelay>
 8001330:	e7fb      	b.n	800132a <StartDefaultTask+0xe>
 8001332:	bf00      	nop
 8001334:	08007f10 	.word	0x08007f10

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_MspInit+0x64>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <HAL_MspInit+0x64>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_MspInit+0x64>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_MspInit+0x64>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <HAL_MspInit+0x64>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_MspInit+0x64>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	210f      	movs	r1, #15
 8001386:	f06f 0001 	mvn.w	r0, #1
 800138a:	f000 faf6 	bl	800197a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2105      	movs	r1, #5
 8001392:	2005      	movs	r0, #5
 8001394:	f000 faf1 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001398:	2005      	movs	r0, #5
 800139a:	f000 fb0a 	bl	80019b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_UART_MspInit+0x94>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d133      	bne.n	8001436 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_UART_MspInit+0x98>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001406:	23c0      	movs	r3, #192	; 0xc0
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001416:	2308      	movs	r3, #8
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4809      	ldr	r0, [pc, #36]	; (8001448 <HAL_UART_MspInit+0x9c>)
 8001422:	f000 fb73 	bl	8001b0c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2105      	movs	r1, #5
 800142a:	2047      	movs	r0, #71	; 0x47
 800142c:	f000 faa5 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001430:	2047      	movs	r0, #71	; 0x47
 8001432:	f000 fabe 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40011400 	.word	0x40011400
 8001444:	40023800 	.word	0x40023800
 8001448:	40020800 	.word	0x40020800

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <SysTick_Handler+0x2c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <SysTick_Handler+0x16>

		TimingDelay--;
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <SysTick_Handler+0x2c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <SysTick_Handler+0x2c>)
 800148c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148e:	f000 f979 	bl	8001784 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001492:	f002 ffa5 	bl	80043e0 <xTaskGetSchedulerState>
 8001496:	4603      	mov	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d001      	beq.n	80014a0 <SysTick_Handler+0x28>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800149c:	f003 f9e4 	bl	8004868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200004ec 	.word	0x200004ec

080014a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE)!=RESET)&&(__HAL_UART_GET_IT_SOURCE(&huart6, UART_IT_RXNE)!=RESET) ){
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <USART6_IRQHandler+0x54>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	d117      	bne.n	80014fc <USART6_IRQHandler+0x44>
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <USART6_IRQHandler+0x54>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d010      	beq.n	80014fc <USART6_IRQHandler+0x44>
			g_rx_buffer = (uint8_t)(huart6.Instance->DR & (uint8_t)0x00FF);	// 데이터 1바이트 수신
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <USART6_IRQHandler+0x54>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <USART6_IRQHandler+0x58>)
 80014e4:	701a      	strb	r2, [r3, #0]
		  __HAL_UART_CLEAR_PEFLAG(&huart6);
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <USART6_IRQHandler+0x54>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <USART6_IRQHandler+0x54>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
	}


  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <USART6_IRQHandler+0x54>)
 80014fe:	f001 fa2f 	bl	8002960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000494 	.word	0x20000494
 8001510:	200004e8 	.word	0x200004e8

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_kill>:

int _kill(int pid, int sig)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152e:	f004 faeb 	bl	8005b08 <__errno>
 8001532:	4603      	mov	r3, r0
 8001534:	2216      	movs	r2, #22
 8001536:	601a      	str	r2, [r3, #0]
  return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_exit>:

void _exit (int status)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800154c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ffe7 	bl	8001524 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001556:	e7fe      	b.n	8001556 <_exit+0x12>

08001558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00a      	b.n	8001580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156a:	f3af 8000 	nop.w
 800156e:	4601      	mov	r1, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf0      	blt.n	800156a <_read+0x12>
  }

  return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ba:	605a      	str	r2, [r3, #4]
  return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_isatty>:

int _isatty(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f004 fa6c 	bl	8005b08 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20020000 	.word	0x20020000
 800165c:	00000400 	.word	0x00000400
 8001660:	200004f0 	.word	0x200004f0
 8001664:	200044a0 	.word	0x200044a0

08001668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001690:	f7ff ffea 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f004 fa2b 	bl	8005b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7ff fc25 	bl	8000f0c <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80016d0:	080082cc 	.word	0x080082cc
  ldr r2, =_sbss
 80016d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80016d8:	2000449c 	.word	0x2000449c

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f92b 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fe16 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f943 	bl	80019ce <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001760:	f000 f90b 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	200004f4 	.word	0x200004f4

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	200004f4 	.word	0x200004f4

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff3e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff31 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff feda 	bl	80017ac <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d008      	beq.n	8001a18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2280      	movs	r2, #128	; 0x80
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e052      	b.n	8001abe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0216 	bic.w	r2, r2, #22
 8001a26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695a      	ldr	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <HAL_DMA_Abort+0x62>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0208 	bic.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a68:	e013      	b.n	8001a92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a6a:	f7ff fe9f 	bl	80017ac <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d90c      	bls.n	8001a92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e015      	b.n	8001abe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e4      	bne.n	8001a6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d004      	beq.n	8001ae4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e00c      	b.n	8001afe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2205      	movs	r2, #5
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e16b      	b.n	8001e00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 815a 	bne.w	8001dfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d005      	beq.n	8001b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d130      	bne.n	8001bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0201 	and.w	r2, r3, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d017      	beq.n	8001bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d123      	bne.n	8001c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	69b9      	ldr	r1, [r7, #24]
 8001c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0203 	and.w	r2, r3, #3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80b4 	beq.w	8001dfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cae:	4a5b      	ldr	r2, [pc, #364]	; (8001e1c <HAL_GPIO_Init+0x310>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x314>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <HAL_GPIO_Init+0x226>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a51      	ldr	r2, [pc, #324]	; (8001e24 <HAL_GPIO_Init+0x318>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d025      	beq.n	8001d2e <HAL_GPIO_Init+0x222>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_GPIO_Init+0x31c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01f      	beq.n	8001d2a <HAL_GPIO_Init+0x21e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x21a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x216>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_GPIO_Init+0x328>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x212>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4c      	ldr	r2, [pc, #304]	; (8001e38 <HAL_GPIO_Init+0x32c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x20e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <HAL_GPIO_Init+0x330>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x20a>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00e      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d16:	2308      	movs	r3, #8
 8001d18:	e00c      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d32:	2300      	movs	r3, #0
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x310>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d76:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	f67f ae90 	bls.w	8001b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40021400 	.word	0x40021400
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40021c00 	.word	0x40021c00
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e267      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d075      	beq.n	8001f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea2:	4b85      	ldr	r3, [pc, #532]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d112      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b82      	ldr	r3, [pc, #520]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	4b7e      	ldr	r3, [pc, #504]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d05b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x108>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d157      	bne.n	8001f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e242      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x74>
 8001ede:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a75      	ldr	r2, [pc, #468]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b70      	ldr	r3, [pc, #448]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a6f      	ldr	r2, [pc, #444]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b6d      	ldr	r3, [pc, #436]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a6c      	ldr	r2, [pc, #432]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001f10:	4b69      	ldr	r3, [pc, #420]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fc3c 	bl	80017ac <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fc38 	bl	80017ac <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e207      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xc0>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc28 	bl	80017ac <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fc24 	bl	80017ac <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1f3      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b51      	ldr	r3, [pc, #324]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0xe8>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b44      	ldr	r3, [pc, #272]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b41      	ldr	r3, [pc, #260]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1c7      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4937      	ldr	r1, [pc, #220]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_OscConfig+0x244>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff fbdd 	bl	80017ac <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fbd9 	bl	80017ac <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1a8      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b2b      	ldr	r3, [pc, #172]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4925      	ldr	r1, [pc, #148]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x244>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff fbbc 	bl	80017ac <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fbb8 	bl	80017ac <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e187      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d036      	beq.n	80020d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_RCC_OscConfig+0x248>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff fb9c 	bl	80017ac <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fb98 	bl	80017ac <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e167      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_RCC_OscConfig+0x240>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x200>
 8002096:	e01b      	b.n	80020d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_OscConfig+0x248>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fb85 	bl	80017ac <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e00e      	b.n	80020c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a6:	f7ff fb81 	bl	80017ac <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d907      	bls.n	80020c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e150      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	42470000 	.word	0x42470000
 80020c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b88      	ldr	r3, [pc, #544]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ea      	bne.n	80020a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8097 	beq.w	800220c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b7d      	ldr	r3, [pc, #500]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a7c      	ldr	r2, [pc, #496]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b77      	ldr	r3, [pc, #476]	; (80022ec <HAL_RCC_OscConfig+0x474>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b74      	ldr	r3, [pc, #464]	; (80022ec <HAL_RCC_OscConfig+0x474>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a73      	ldr	r2, [pc, #460]	; (80022ec <HAL_RCC_OscConfig+0x474>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff fb41 	bl	80017ac <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff fb3d 	bl	80017ac <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e10c      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b6a      	ldr	r3, [pc, #424]	; (80022ec <HAL_RCC_OscConfig+0x474>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x2ea>
 8002154:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6713      	str	r3, [r2, #112]	; 0x70
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x324>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x30c>
 800216a:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	4a5e      	ldr	r2, [pc, #376]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6713      	str	r3, [r2, #112]	; 0x70
 8002176:	4b5c      	ldr	r3, [pc, #368]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	4a5b      	ldr	r2, [pc, #364]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	; 0x70
 8002182:	e00b      	b.n	800219c <HAL_RCC_OscConfig+0x324>
 8002184:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a57      	ldr	r2, [pc, #348]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002194:	4a54      	ldr	r2, [pc, #336]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002196:	f023 0304 	bic.w	r3, r3, #4
 800219a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7ff fb02 	bl	80017ac <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ac:	f7ff fafe 	bl	80017ac <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e0cb      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ee      	beq.n	80021ac <HAL_RCC_OscConfig+0x334>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7ff faec 	bl	80017ac <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d8:	f7ff fae8 	bl	80017ac <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0b5      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	4a38      	ldr	r2, [pc, #224]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a1 	beq.w	8002358 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002216:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d05c      	beq.n	80022dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d141      	bne.n	80022ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_RCC_OscConfig+0x478>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fabc 	bl	80017ac <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002238:	f7ff fab8 	bl	80017ac <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e087      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	491b      	ldr	r1, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x478>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7ff fa91 	bl	80017ac <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228e:	f7ff fa8d 	bl	80017ac <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e05c      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x416>
 80022ac:	e054      	b.n	8002358 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_RCC_OscConfig+0x478>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fa7a 	bl	80017ac <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff fa76 	bl	80017ac <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e045      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_OscConfig+0x470>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x444>
 80022da:	e03d      	b.n	8002358 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d107      	bne.n	80022f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e038      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40007000 	.word	0x40007000
 80022f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x4ec>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d028      	beq.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d121      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d11a      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800232a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232c:	4293      	cmp	r3, r2
 800232e:	d111      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	085b      	lsrs	r3, r3, #1
 800233c:	3b01      	subs	r3, #1
 800233e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0cc      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d90c      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	494d      	ldr	r1, [pc, #308]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d044      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d119      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d003      	beq.n	8002426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e067      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4934      	ldr	r1, [pc, #208]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7ff f9a8 	bl	80017ac <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7ff f9a4 	bl	80017ac <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e04f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d20c      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e032      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4916      	ldr	r1, [pc, #88]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ee:	f000 f821 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490a      	ldr	r1, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f908 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00
 8002524:	40023800 	.word	0x40023800
 8002528:	08007f34 	.word	0x08007f34
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b094      	sub	sp, #80	; 0x50
 800253a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	647b      	str	r3, [r7, #68]	; 0x44
 8002540:	2300      	movs	r3, #0
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002544:	2300      	movs	r3, #0
 8002546:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254c:	4b79      	ldr	r3, [pc, #484]	; (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d00d      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x40>
 8002558:	2b08      	cmp	r3, #8
 800255a:	f200 80e1 	bhi.w	8002720 <HAL_RCC_GetSysClockFreq+0x1ec>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x34>
 8002562:	2b04      	cmp	r3, #4
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x3a>
 8002566:	e0db      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b73      	ldr	r3, [pc, #460]	; (8002738 <HAL_RCC_GetSysClockFreq+0x204>)
 800256a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800256c:	e0db      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCC_GetSysClockFreq+0x208>)
 8002570:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002572:	e0d8      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002574:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800257c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257e:	4b6d      	ldr	r3, [pc, #436]	; (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258a:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	2200      	movs	r2, #0
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
 8002594:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
 800259e:	2300      	movs	r3, #0
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
 80025a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025a6:	4622      	mov	r2, r4
 80025a8:	462b      	mov	r3, r5
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	0159      	lsls	r1, r3, #5
 80025b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b8:	0150      	lsls	r0, r2, #5
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4621      	mov	r1, r4
 80025c0:	1a51      	subs	r1, r2, r1
 80025c2:	6139      	str	r1, [r7, #16]
 80025c4:	4629      	mov	r1, r5
 80025c6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d8:	4659      	mov	r1, fp
 80025da:	018b      	lsls	r3, r1, #6
 80025dc:	4651      	mov	r1, sl
 80025de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025e2:	4651      	mov	r1, sl
 80025e4:	018a      	lsls	r2, r1, #6
 80025e6:	4651      	mov	r1, sl
 80025e8:	ebb2 0801 	subs.w	r8, r2, r1
 80025ec:	4659      	mov	r1, fp
 80025ee:	eb63 0901 	sbc.w	r9, r3, r1
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002606:	4690      	mov	r8, r2
 8002608:	4699      	mov	r9, r3
 800260a:	4623      	mov	r3, r4
 800260c:	eb18 0303 	adds.w	r3, r8, r3
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	462b      	mov	r3, r5
 8002614:	eb49 0303 	adc.w	r3, r9, r3
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002626:	4629      	mov	r1, r5
 8002628:	024b      	lsls	r3, r1, #9
 800262a:	4621      	mov	r1, r4
 800262c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002630:	4621      	mov	r1, r4
 8002632:	024a      	lsls	r2, r1, #9
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263a:	2200      	movs	r2, #0
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
 800263e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002640:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002644:	f7fe fab0 	bl	8000ba8 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4613      	mov	r3, r2
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002650:	e058      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002652:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	099b      	lsrs	r3, r3, #6
 8002658:	2200      	movs	r2, #0
 800265a:	4618      	mov	r0, r3
 800265c:	4611      	mov	r1, r2
 800265e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800266c:	4642      	mov	r2, r8
 800266e:	464b      	mov	r3, r9
 8002670:	f04f 0000 	mov.w	r0, #0
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	0159      	lsls	r1, r3, #5
 800267a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267e:	0150      	lsls	r0, r2, #5
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4641      	mov	r1, r8
 8002686:	ebb2 0a01 	subs.w	sl, r2, r1
 800268a:	4649      	mov	r1, r9
 800268c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800269c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026a4:	ebb2 040a 	subs.w	r4, r2, sl
 80026a8:	eb63 050b 	sbc.w	r5, r3, fp
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	00eb      	lsls	r3, r5, #3
 80026b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ba:	00e2      	lsls	r2, r4, #3
 80026bc:	4614      	mov	r4, r2
 80026be:	461d      	mov	r5, r3
 80026c0:	4643      	mov	r3, r8
 80026c2:	18e3      	adds	r3, r4, r3
 80026c4:	603b      	str	r3, [r7, #0]
 80026c6:	464b      	mov	r3, r9
 80026c8:	eb45 0303 	adc.w	r3, r5, r3
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026da:	4629      	mov	r1, r5
 80026dc:	028b      	lsls	r3, r1, #10
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026e4:	4621      	mov	r1, r4
 80026e6:	028a      	lsls	r2, r1, #10
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ee:	2200      	movs	r2, #0
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	61fa      	str	r2, [r7, #28]
 80026f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f8:	f7fe fa56 	bl	8000ba8 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_GetSysClockFreq+0x200>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	3301      	adds	r3, #1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002714:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetSysClockFreq+0x204>)
 8002722:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002728:	4618      	mov	r0, r3
 800272a:	3750      	adds	r7, #80	; 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	00f42400 	.word	0x00f42400
 800273c:	007a1200 	.word	0x007a1200

08002740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <HAL_RCC_GetHCLKFreq+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff0 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0a9b      	lsrs	r3, r3, #10
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	08007f44 	.word	0x08007f44

08002780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002784:	f7ff ffdc 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0b5b      	lsrs	r3, r3, #13
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08007f44 	.word	0x08007f44

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e042      	b.n	8002840 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fdec 	bl	80013ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fd69 	bl	80032c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	d175      	bne.n	8002954 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_UART_Transmit+0x2c>
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e06e      	b.n	8002956 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002886:	f7fe ff91 	bl	80017ac <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d108      	bne.n	80028b4 <HAL_UART_Transmit+0x6c>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e003      	b.n	80028bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028bc:	e02e      	b.n	800291c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fb05 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e03a      	b.n	8002956 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3302      	adds	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e007      	b.n	800290e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cb      	bne.n	80028be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fad1 	bl	8002ed8 <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e006      	b.n	8002956 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b0ba      	sub	sp, #232	; 0xe8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800299e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_UART_IRQHandler+0x66>
 80029b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fbc2 	bl	8003148 <UART_Receive_IT>
      return;
 80029c4:	e25b      	b.n	8002e7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80de 	beq.w	8002b8c <HAL_UART_IRQHandler+0x22c>
 80029d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d106      	bne.n	80029ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80d1 	beq.w	8002b8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_UART_IRQHandler+0xae>
 80029f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00b      	beq.n	8002a32 <HAL_UART_IRQHandler+0xd2>
 8002a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f043 0202 	orr.w	r2, r3, #2
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_UART_IRQHandler+0xf6>
 8002a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d011      	beq.n	8002a86 <HAL_UART_IRQHandler+0x126>
 8002a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d105      	bne.n	8002a7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f043 0208 	orr.w	r2, r3, #8
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 81f2 	beq.w	8002e74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_UART_IRQHandler+0x14e>
 8002a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fb4d 	bl	8003148 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <HAL_UART_IRQHandler+0x17a>
 8002ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04f      	beq.n	8002b7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa55 	bl	8002f8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d141      	bne.n	8002b72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	3314      	adds	r3, #20
 8002af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3314      	adds	r3, #20
 8002b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b2a:	e841 2300 	strex	r3, r2, [r1]
 8002b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1d9      	bne.n	8002aee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	4a7e      	ldr	r2, [pc, #504]	; (8002d40 <HAL_UART_IRQHandler+0x3e0>)
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe ffb9 	bl	8001ac6 <HAL_DMA_Abort_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00e      	b.n	8002b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f99e 	bl	8002eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00a      	b.n	8002b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f99a 	bl	8002eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e006      	b.n	8002b88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f996 	bl	8002eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002b86:	e175      	b.n	8002e74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	bf00      	nop
    return;
 8002b8a:	e173      	b.n	8002e74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 814f 	bne.w	8002e34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8148 	beq.w	8002e34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8141 	beq.w	8002e34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	f040 80b6 	bne.w	8002d44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8145 	beq.w	8002e78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	f080 813e 	bcs.w	8002e78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0e:	f000 8088 	beq.w	8002d22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1d9      	bne.n	8002c12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3314      	adds	r3, #20
 8002c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e1      	bne.n	8002c5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca4:	e853 3f00 	ldrex	r3, [r3]
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e3      	bne.n	8002c9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	330c      	adds	r3, #12
 8002ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cea:	e853 3f00 	ldrex	r3, [r3]
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf2:	f023 0310 	bic.w	r3, r3, #16
 8002cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d04:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e3      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fe62 	bl	80019e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f8c1 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d3e:	e09b      	b.n	8002e78 <HAL_UART_IRQHandler+0x518>
 8002d40:	08003051 	.word	0x08003051
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 808e 	beq.w	8002e7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 8089 	beq.w	8002e7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	330c      	adds	r3, #12
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	330c      	adds	r3, #12
 8002d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e3      	bne.n	8002d6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3314      	adds	r3, #20
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	623b      	str	r3, [r7, #32]
   return(result);
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3314      	adds	r3, #20
 8002dc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e3      	bne.n	8002da2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	330c      	adds	r3, #12
 8002dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	e853 3f00 	ldrex	r3, [r3]
 8002df6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0310 	bic.w	r3, r3, #16
 8002dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e3      	bne.n	8002de8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f847 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e32:	e023      	b.n	8002e7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d009      	beq.n	8002e54 <HAL_UART_IRQHandler+0x4f4>
 8002e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f913 	bl	8003078 <UART_Transmit_IT>
    return;
 8002e52:	e014      	b.n	8002e7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <HAL_UART_IRQHandler+0x51e>
 8002e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f953 	bl	8003118 <UART_EndTransmit_IT>
    return;
 8002e72:	e004      	b.n	8002e7e <HAL_UART_IRQHandler+0x51e>
    return;
 8002e74:	bf00      	nop
 8002e76:	e002      	b.n	8002e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <HAL_UART_IRQHandler+0x51e>
      return;
 8002e7c:	bf00      	nop
  }
}
 8002e7e:	37e8      	adds	r7, #232	; 0xe8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee8:	e03b      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef0:	d037      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fc5b 	bl	80017ac <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e03a      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d023      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	d020      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d01d      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d116      	bne.n	8002f62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f81d 	bl	8002f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2208      	movs	r2, #8
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d0b4      	beq.n	8002eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b095      	sub	sp, #84	; 0x54
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb2:	643a      	str	r2, [r7, #64]	; 0x40
 8002fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e5      	bne.n	8002f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e5      	bne.n	8002fc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d119      	bne.n	8003036 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	60bb      	str	r3, [r7, #8]
   return(result);
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f023 0310 	bic.w	r3, r3, #16
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003022:	61ba      	str	r2, [r7, #24]
 8003024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	6979      	ldr	r1, [r7, #20]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	613b      	str	r3, [r7, #16]
   return(result);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e5      	bne.n	8003002 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003044:	bf00      	nop
 8003046:	3754      	adds	r7, #84	; 0x54
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff ff1e 	bl	8002eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b21      	cmp	r3, #33	; 0x21
 800308a:	d13e      	bne.n	800310a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d114      	bne.n	80030c0 <UART_Transmit_IT+0x48>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d110      	bne.n	80030c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]
 80030be:	e008      	b.n	80030d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	1c59      	adds	r1, r3, #1
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6211      	str	r1, [r2, #32]
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4619      	mov	r1, r3
 80030e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003104:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fea3 	bl	8002e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b22      	cmp	r3, #34	; 0x22
 800315a:	f040 80ae 	bne.w	80032ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	d117      	bne.n	8003198 <UART_Receive_IT+0x50>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d113      	bne.n	8003198 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	b29a      	uxth	r2, r3
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	1c9a      	adds	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
 8003196:	e026      	b.n	80031e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d007      	beq.n	80031bc <UART_Receive_IT+0x74>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <UART_Receive_IT+0x82>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e008      	b.n	80031dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4619      	mov	r1, r3
 80031f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d15d      	bne.n	80032b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0220 	bic.w	r2, r2, #32
 8003208:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003218:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	2b01      	cmp	r3, #1
 800323e:	d135      	bne.n	80032ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	613b      	str	r3, [r7, #16]
   return(result);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f023 0310 	bic.w	r3, r3, #16
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	330c      	adds	r3, #12
 8003264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003266:	623a      	str	r2, [r7, #32]
 8003268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	61bb      	str	r3, [r7, #24]
   return(result);
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e5      	bne.n	8003246 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d10a      	bne.n	800329e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fe0b 	bl	8002ec0 <HAL_UARTEx_RxEventCallback>
 80032aa:	e002      	b.n	80032b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fdf3 	bl	8002e98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e002      	b.n	80032bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3730      	adds	r7, #48	; 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b0c0      	sub	sp, #256	; 0x100
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	ea40 0301 	orr.w	r3, r0, r1
 80032ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800331c:	f021 010c 	bic.w	r1, r1, #12
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800332a:	430b      	orrs	r3, r1
 800332c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	6999      	ldr	r1, [r3, #24]
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	ea40 0301 	orr.w	r3, r0, r1
 800334a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <UART_SetConfig+0x2cc>)
 8003354:	429a      	cmp	r2, r3
 8003356:	d005      	beq.n	8003364 <UART_SetConfig+0xa0>
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <UART_SetConfig+0x2d0>)
 8003360:	429a      	cmp	r2, r3
 8003362:	d104      	bne.n	800336e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7ff fa0c 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8003368:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800336c:	e003      	b.n	8003376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800336e:	f7ff f9f3 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8003372:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	f040 810c 	bne.w	800359c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003388:	2200      	movs	r2, #0
 800338a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800338e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	1891      	adds	r1, r2, r2
 800339c:	65b9      	str	r1, [r7, #88]	; 0x58
 800339e:	415b      	adcs	r3, r3
 80033a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033a6:	4621      	mov	r1, r4
 80033a8:	eb12 0801 	adds.w	r8, r2, r1
 80033ac:	4629      	mov	r1, r5
 80033ae:	eb43 0901 	adc.w	r9, r3, r1
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033c6:	4690      	mov	r8, r2
 80033c8:	4699      	mov	r9, r3
 80033ca:	4623      	mov	r3, r4
 80033cc:	eb18 0303 	adds.w	r3, r8, r3
 80033d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033d4:	462b      	mov	r3, r5
 80033d6:	eb49 0303 	adc.w	r3, r9, r3
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033f2:	460b      	mov	r3, r1
 80033f4:	18db      	adds	r3, r3, r3
 80033f6:	653b      	str	r3, [r7, #80]	; 0x50
 80033f8:	4613      	mov	r3, r2
 80033fa:	eb42 0303 	adc.w	r3, r2, r3
 80033fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003408:	f7fd fbce 	bl	8000ba8 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4b61      	ldr	r3, [pc, #388]	; (8003598 <UART_SetConfig+0x2d4>)
 8003412:	fba3 2302 	umull	r2, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	011c      	lsls	r4, r3, #4
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003424:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	64b9      	str	r1, [r7, #72]	; 0x48
 8003434:	415b      	adcs	r3, r3
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800343c:	4641      	mov	r1, r8
 800343e:	eb12 0a01 	adds.w	sl, r2, r1
 8003442:	4649      	mov	r1, r9
 8003444:	eb43 0b01 	adc.w	fp, r3, r1
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800345c:	4692      	mov	sl, r2
 800345e:	469b      	mov	fp, r3
 8003460:	4643      	mov	r3, r8
 8003462:	eb1a 0303 	adds.w	r3, sl, r3
 8003466:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800346a:	464b      	mov	r3, r9
 800346c:	eb4b 0303 	adc.w	r3, fp, r3
 8003470:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003480:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003488:	460b      	mov	r3, r1
 800348a:	18db      	adds	r3, r3, r3
 800348c:	643b      	str	r3, [r7, #64]	; 0x40
 800348e:	4613      	mov	r3, r2
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
 8003496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800349a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800349e:	f7fd fb83 	bl	8000ba8 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <UART_SetConfig+0x2d4>)
 80034aa:	fba3 2301 	umull	r2, r3, r3, r1
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2264      	movs	r2, #100	; 0x64
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	1acb      	subs	r3, r1, r3
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <UART_SetConfig+0x2d4>)
 80034c0:	fba3 2302 	umull	r2, r3, r3, r2
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034cc:	441c      	add	r4, r3
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80034e8:	415b      	adcs	r3, r3
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6339      	str	r1, [r7, #48]	; 0x30
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800353c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003544:	460b      	mov	r3, r1
 8003546:	18db      	adds	r3, r3, r3
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	4613      	mov	r3, r2
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800355a:	f7fd fb25 	bl	8000ba8 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <UART_SetConfig+0x2d4>)
 8003564:	fba3 1302 	umull	r1, r3, r3, r2
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	2164      	movs	r1, #100	; 0x64
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	3332      	adds	r3, #50	; 0x32
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <UART_SetConfig+0x2d4>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	f003 0207 	and.w	r2, r3, #7
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4422      	add	r2, r4
 800358a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800358c:	e106      	b.n	800379c <UART_SetConfig+0x4d8>
 800358e:	bf00      	nop
 8003590:	40011000 	.word	0x40011000
 8003594:	40011400 	.word	0x40011400
 8003598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800359c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ae:	4642      	mov	r2, r8
 80035b0:	464b      	mov	r3, r9
 80035b2:	1891      	adds	r1, r2, r2
 80035b4:	6239      	str	r1, [r7, #32]
 80035b6:	415b      	adcs	r3, r3
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035be:	4641      	mov	r1, r8
 80035c0:	1854      	adds	r4, r2, r1
 80035c2:	4649      	mov	r1, r9
 80035c4:	eb43 0501 	adc.w	r5, r3, r1
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	00eb      	lsls	r3, r5, #3
 80035d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d6:	00e2      	lsls	r2, r4, #3
 80035d8:	4614      	mov	r4, r2
 80035da:	461d      	mov	r5, r3
 80035dc:	4643      	mov	r3, r8
 80035de:	18e3      	adds	r3, r4, r3
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035e4:	464b      	mov	r3, r9
 80035e6:	eb45 0303 	adc.w	r3, r5, r3
 80035ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800360a:	4629      	mov	r1, r5
 800360c:	008b      	lsls	r3, r1, #2
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003614:	4621      	mov	r1, r4
 8003616:	008a      	lsls	r2, r1, #2
 8003618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800361c:	f7fd fac4 	bl	8000ba8 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <UART_SetConfig+0x4e4>)
 8003626:	fba3 2302 	umull	r2, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	011c      	lsls	r4, r3, #4
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003638:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800363c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	61b9      	str	r1, [r7, #24]
 8003648:	415b      	adcs	r3, r3
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6139      	str	r1, [r7, #16]
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	67bb      	str	r3, [r7, #120]	; 0x78
 800369a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036a8:	4649      	mov	r1, r9
 80036aa:	008b      	lsls	r3, r1, #2
 80036ac:	4641      	mov	r1, r8
 80036ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b2:	4641      	mov	r1, r8
 80036b4:	008a      	lsls	r2, r1, #2
 80036b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036ba:	f7fd fa75 	bl	8000ba8 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <UART_SetConfig+0x4e4>)
 80036c6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2264      	movs	r2, #100	; 0x64
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	1acb      	subs	r3, r1, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	; 0x32
 80036d8:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <UART_SetConfig+0x4e4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e4:	441c      	add	r4, r3
 80036e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ea:	2200      	movs	r2, #0
 80036ec:	673b      	str	r3, [r7, #112]	; 0x70
 80036ee:	677a      	str	r2, [r7, #116]	; 0x74
 80036f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	415b      	adcs	r3, r3
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003704:	4641      	mov	r1, r8
 8003706:	1851      	adds	r1, r2, r1
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	4649      	mov	r1, r9
 800370c:	414b      	adcs	r3, r1
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800371c:	4659      	mov	r1, fp
 800371e:	00cb      	lsls	r3, r1, #3
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003726:	4651      	mov	r1, sl
 8003728:	00ca      	lsls	r2, r1, #3
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4603      	mov	r3, r0
 8003730:	4642      	mov	r2, r8
 8003732:	189b      	adds	r3, r3, r2
 8003734:	66bb      	str	r3, [r7, #104]	; 0x68
 8003736:	464b      	mov	r3, r9
 8003738:	460a      	mov	r2, r1
 800373a:	eb42 0303 	adc.w	r3, r2, r3
 800373e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	663b      	str	r3, [r7, #96]	; 0x60
 800374a:	667a      	str	r2, [r7, #100]	; 0x64
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003758:	4649      	mov	r1, r9
 800375a:	008b      	lsls	r3, r1, #2
 800375c:	4641      	mov	r1, r8
 800375e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003762:	4641      	mov	r1, r8
 8003764:	008a      	lsls	r2, r1, #2
 8003766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800376a:	f7fd fa1d 	bl	8000ba8 <__aeabi_uldivmod>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <UART_SetConfig+0x4e4>)
 8003774:	fba3 1302 	umull	r1, r3, r3, r2
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	2164      	movs	r1, #100	; 0x64
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	3332      	adds	r3, #50	; 0x32
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <UART_SetConfig+0x4e4>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	f003 020f 	and.w	r2, r3, #15
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4422      	add	r2, r4
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037a2:	46bd      	mov	sp, r7
 80037a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037be:	2b84      	cmp	r3, #132	; 0x84
 80037c0:	d005      	beq.n	80037ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80037c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	3303      	adds	r3, #3
 80037cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037e0:	f000 faf6 	bl	8003dd0 <vTaskStartScheduler>
  
  return osOK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}

080037ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ec:	b089      	sub	sp, #36	; 0x24
 80037ee:	af04      	add	r7, sp, #16
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <osThreadCreate+0x54>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01c      	beq.n	800383e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685c      	ldr	r4, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691e      	ldr	r6, [r3, #16]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff ffc8 	bl	80037ac <makeFreeRtosPriority>
 800381c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003826:	9202      	str	r2, [sp, #8]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	9100      	str	r1, [sp, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4632      	mov	r2, r6
 8003830:	4629      	mov	r1, r5
 8003832:	4620      	mov	r0, r4
 8003834:	f000 f8ed 	bl	8003a12 <xTaskCreateStatic>
 8003838:	4603      	mov	r3, r0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e01c      	b.n	8003878 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685c      	ldr	r4, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800384a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff ffaa 	bl	80037ac <makeFreeRtosPriority>
 8003858:	4602      	mov	r2, r0
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	9200      	str	r2, [sp, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	4632      	mov	r2, r6
 8003866:	4629      	mov	r1, r5
 8003868:	4620      	mov	r0, r4
 800386a:	f000 f92f 	bl	8003acc <xTaskCreate>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003878:	68fb      	ldr	r3, [r7, #12]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003882 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <osDelay+0x16>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	e000      	b.n	800389a <osDelay+0x18>
 8003898:	2301      	movs	r3, #1
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fa64 	bl	8003d68 <vTaskDelay>
  
  return osOK;
 80038a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f103 0208 	add.w	r2, r3, #8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f103 0208 	add.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f103 0208 	add.w	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003962:	d103      	bne.n	800396c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e00c      	b.n	8003986 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3308      	adds	r3, #8
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e002      	b.n	800397a <vListInsert+0x2e>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	d2f6      	bcs.n	8003974 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6892      	ldr	r2, [r2, #8]
 80039d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6852      	ldr	r2, [r2, #4]
 80039de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d103      	bne.n	80039f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b08e      	sub	sp, #56	; 0x38
 8003a16:	af04      	add	r7, sp, #16
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	61fb      	str	r3, [r7, #28]
}
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a58:	23a0      	movs	r3, #160	; 0xa0
 8003a5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2ba0      	cmp	r3, #160	; 0xa0
 8003a60:	d00a      	beq.n	8003a78 <xTaskCreateStatic+0x66>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	61bb      	str	r3, [r7, #24]
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01e      	beq.n	8003abe <xTaskCreateStatic+0xac>
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01b      	beq.n	8003abe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9303      	str	r3, [sp, #12]
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	9302      	str	r3, [sp, #8]
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f851 	bl	8003b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ab8:	f000 f8ec 	bl	8003c94 <prvAddNewTaskToReadyList>
 8003abc:	e001      	b.n	8003ac2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ac2:	697b      	ldr	r3, [r7, #20]
	}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af04      	add	r7, sp, #16
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 ff11 	bl	8004908 <pvPortMalloc>
 8003ae6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00e      	beq.n	8003b0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003aee:	20a0      	movs	r0, #160	; 0xa0
 8003af0:	f000 ff0a 	bl	8004908 <pvPortMalloc>
 8003af4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
 8003b02:	e005      	b.n	8003b10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b04:	6978      	ldr	r0, [r7, #20]
 8003b06:	f000 ffcb 	bl	8004aa0 <vPortFree>
 8003b0a:	e001      	b.n	8003b10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d017      	beq.n	8003b46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	2300      	movs	r3, #0
 8003b22:	9303      	str	r3, [sp, #12]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	9302      	str	r3, [sp, #8]
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f80f 	bl	8003b58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b3a:	69f8      	ldr	r0, [r7, #28]
 8003b3c:	f000 f8aa 	bl	8003c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b40:	2301      	movs	r3, #1
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e002      	b.n	8003b4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b4c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b70:	3b01      	subs	r3, #1
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f023 0307 	bic.w	r3, r3, #7
 8003b7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	617b      	str	r3, [r7, #20]
}
 8003b9c:	bf00      	nop
 8003b9e:	e7fe      	b.n	8003b9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01f      	beq.n	8003be6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e012      	b.n	8003bd2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	7819      	ldrb	r1, [r3, #0]
 8003bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3334      	adds	r3, #52	; 0x34
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d006      	beq.n	8003bda <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b0f      	cmp	r3, #15
 8003bd6:	d9e9      	bls.n	8003bac <prvInitialiseNewTask+0x54>
 8003bd8:	e000      	b.n	8003bdc <prvInitialiseNewTask+0x84>
			{
				break;
 8003bda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be4:	e003      	b.n	8003bee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	2b13      	cmp	r3, #19
 8003bf2:	d901      	bls.n	8003bf8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bf4:	2313      	movs	r3, #19
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	2200      	movs	r2, #0
 8003c08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fe6b 	bl	80038ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	3318      	adds	r3, #24
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fe66 	bl	80038ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	f1c3 0214 	rsb	r2, r3, #20
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	334c      	adds	r3, #76	; 0x4c
 8003c48:	224c      	movs	r2, #76	; 0x4c
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 feb3 	bl	80059b8 <memset>
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <prvInitialiseNewTask+0x130>)
 8003c56:	651a      	str	r2, [r3, #80]	; 0x50
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <prvInitialiseNewTask+0x134>)
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	4a0b      	ldr	r2, [pc, #44]	; (8003c90 <prvInitialiseNewTask+0x138>)
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	69b8      	ldr	r0, [r7, #24]
 8003c6a:	f000 fc3d 	bl	80044e8 <pxPortInitialiseStack>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c80:	bf00      	nop
 8003c82:	3720      	adds	r7, #32
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20004350 	.word	0x20004350
 8003c8c:	200043b8 	.word	0x200043b8
 8003c90:	20004420 	.word	0x20004420

08003c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c9c:	f000 fd52 	bl	8004744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cb2:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <prvAddNewTaskToReadyList+0xb8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d110      	bne.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cc0:	f000 facc 	bl	800425c <prvInitialiseTaskLists>
 8003cc4:	e00d      	b.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <prvAddNewTaskToReadyList+0xc0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d802      	bhi.n	8003ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cdc:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <prvAddNewTaskToReadyList+0xc4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <prvAddNewTaskToReadyList+0xc4>)
 8003cea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <prvAddNewTaskToReadyList+0xc8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <prvAddNewTaskToReadyList+0xc8>)
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <prvAddNewTaskToReadyList+0xcc>)
 8003d0c:	441a      	add	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7ff fdf5 	bl	8003904 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d1a:	f000 fd43 	bl	80047a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <prvAddNewTaskToReadyList+0xc0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00e      	beq.n	8003d44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <prvAddNewTaskToReadyList+0xbc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d207      	bcs.n	8003d44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <prvAddNewTaskToReadyList+0xd0>)
 8003d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	200006fc 	.word	0x200006fc
 8003d50:	200004f8 	.word	0x200004f8
 8003d54:	20000708 	.word	0x20000708
 8003d58:	20000718 	.word	0x20000718
 8003d5c:	20000704 	.word	0x20000704
 8003d60:	200004fc 	.word	0x200004fc
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d017      	beq.n	8003daa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <vTaskDelay+0x60>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <vTaskDelay+0x30>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60bb      	str	r3, [r7, #8]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d98:	f000 f884 	bl	8003ea4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fb3c 	bl	800441c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003da4:	f000 f88c 	bl	8003ec0 <xTaskResumeAll>
 8003da8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <vTaskDelay+0x64>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000724 	.word	0x20000724
 8003dcc:	e000ed04 	.word	0xe000ed04

08003dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dde:	463a      	mov	r2, r7
 8003de0:	1d39      	adds	r1, r7, #4
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd f876 	bl	8000ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	9202      	str	r2, [sp, #8]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	4921      	ldr	r1, [pc, #132]	; (8003e84 <vTaskStartScheduler+0xb4>)
 8003e00:	4821      	ldr	r0, [pc, #132]	; (8003e88 <vTaskStartScheduler+0xb8>)
 8003e02:	f7ff fe06 	bl	8003a12 <xTaskCreateStatic>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <vTaskStartScheduler+0xbc>)
 8003e0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e0c:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <vTaskStartScheduler+0xbc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e001      	b.n	8003e1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d11b      	bne.n	8003e5c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	613b      	str	r3, [r7, #16]
}
 8003e36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <vTaskStartScheduler+0xc0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	334c      	adds	r3, #76	; 0x4c
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <vTaskStartScheduler+0xc4>)
 8003e40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <vTaskStartScheduler+0xc8>)
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e4a:	4b14      	ldr	r3, [pc, #80]	; (8003e9c <vTaskStartScheduler+0xcc>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e50:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <vTaskStartScheduler+0xd0>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e56:	f000 fbd3 	bl	8004600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e5a:	e00e      	b.n	8003e7a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e62:	d10a      	bne.n	8003e7a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60fb      	str	r3, [r7, #12]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <vTaskStartScheduler+0xa8>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	08007f2c 	.word	0x08007f2c
 8003e88:	0800422d 	.word	0x0800422d
 8003e8c:	20000720 	.word	0x20000720
 8003e90:	200004f8 	.word	0x200004f8
 8003e94:	20000068 	.word	0x20000068
 8003e98:	2000071c 	.word	0x2000071c
 8003e9c:	20000708 	.word	0x20000708
 8003ea0:	20000700 	.word	0x20000700

08003ea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <vTaskSuspendAll+0x18>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3301      	adds	r3, #1
 8003eae:	4a03      	ldr	r2, [pc, #12]	; (8003ebc <vTaskSuspendAll+0x18>)
 8003eb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	20000724 	.word	0x20000724

08003ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ece:	4b41      	ldr	r3, [pc, #260]	; (8003fd4 <xTaskResumeAll+0x114>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <xTaskResumeAll+0x2c>
	__asm volatile
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	603b      	str	r3, [r7, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	e7fe      	b.n	8003eea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003eec:	f000 fc2a 	bl	8004744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ef0:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <xTaskResumeAll+0x114>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	4a37      	ldr	r2, [pc, #220]	; (8003fd4 <xTaskResumeAll+0x114>)
 8003ef8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <xTaskResumeAll+0x114>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d161      	bne.n	8003fc6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <xTaskResumeAll+0x118>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d05d      	beq.n	8003fc6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f0a:	e02e      	b.n	8003f6a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f0c:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <xTaskResumeAll+0x11c>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3318      	adds	r3, #24
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fd50 	bl	80039be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fd4b 	bl	80039be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	4b2b      	ldr	r3, [pc, #172]	; (8003fe0 <xTaskResumeAll+0x120>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <xTaskResumeAll+0x120>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <xTaskResumeAll+0x124>)
 8003f48:	441a      	add	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f7ff fcd7 	bl	8003904 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <xTaskResumeAll+0x128>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f64:	4b21      	ldr	r3, [pc, #132]	; (8003fec <xTaskResumeAll+0x12c>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <xTaskResumeAll+0x11c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1cc      	bne.n	8003f0c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f78:	f000 fa12 	bl	80043a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <xTaskResumeAll+0x130>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f88:	f000 f836 	bl	8003ff8 <xTaskIncrementTick>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f92:	4b16      	ldr	r3, [pc, #88]	; (8003fec <xTaskResumeAll+0x12c>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f1      	bne.n	8003f88 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003fa4:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <xTaskResumeAll+0x130>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <xTaskResumeAll+0x12c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <xTaskResumeAll+0x134>)
 8003fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fc6:	f000 fbed 	bl	80047a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003fca:	68bb      	ldr	r3, [r7, #8]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000724 	.word	0x20000724
 8003fd8:	200006fc 	.word	0x200006fc
 8003fdc:	200006bc 	.word	0x200006bc
 8003fe0:	20000704 	.word	0x20000704
 8003fe4:	200004fc 	.word	0x200004fc
 8003fe8:	200004f8 	.word	0x200004f8
 8003fec:	20000710 	.word	0x20000710
 8003ff0:	2000070c 	.word	0x2000070c
 8003ff4:	e000ed04 	.word	0xe000ed04

08003ff8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004002:	4b4e      	ldr	r3, [pc, #312]	; (800413c <xTaskIncrementTick+0x144>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 808e 	bne.w	8004128 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800400c:	4b4c      	ldr	r3, [pc, #304]	; (8004140 <xTaskIncrementTick+0x148>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004014:	4a4a      	ldr	r2, [pc, #296]	; (8004140 <xTaskIncrementTick+0x148>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d120      	bne.n	8004062 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004020:	4b48      	ldr	r3, [pc, #288]	; (8004144 <xTaskIncrementTick+0x14c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <xTaskIncrementTick+0x48>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	603b      	str	r3, [r7, #0]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <xTaskIncrementTick+0x46>
 8004040:	4b40      	ldr	r3, [pc, #256]	; (8004144 <xTaskIncrementTick+0x14c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	4b40      	ldr	r3, [pc, #256]	; (8004148 <xTaskIncrementTick+0x150>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a3e      	ldr	r2, [pc, #248]	; (8004144 <xTaskIncrementTick+0x14c>)
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	4a3e      	ldr	r2, [pc, #248]	; (8004148 <xTaskIncrementTick+0x150>)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b3d      	ldr	r3, [pc, #244]	; (800414c <xTaskIncrementTick+0x154>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	4a3c      	ldr	r2, [pc, #240]	; (800414c <xTaskIncrementTick+0x154>)
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	f000 f99f 	bl	80043a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <xTaskIncrementTick+0x158>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d348      	bcc.n	80040fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <xTaskIncrementTick+0x14c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004076:	4b36      	ldr	r3, [pc, #216]	; (8004150 <xTaskIncrementTick+0x158>)
 8004078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800407c:	601a      	str	r2, [r3, #0]
					break;
 800407e:	e03e      	b.n	80040fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <xTaskIncrementTick+0x14c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	429a      	cmp	r2, r3
 8004096:	d203      	bcs.n	80040a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004098:	4a2d      	ldr	r2, [pc, #180]	; (8004150 <xTaskIncrementTick+0x158>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800409e:	e02e      	b.n	80040fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fc8a 	bl	80039be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3318      	adds	r3, #24
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fc81 	bl	80039be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <xTaskIncrementTick+0x15c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	4a22      	ldr	r2, [pc, #136]	; (8004154 <xTaskIncrementTick+0x15c>)
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4a1f      	ldr	r2, [pc, #124]	; (8004158 <xTaskIncrementTick+0x160>)
 80040dc:	441a      	add	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7ff fc0d 	bl	8003904 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <xTaskIncrementTick+0x164>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d3b9      	bcc.n	800406c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040fc:	e7b6      	b.n	800406c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <xTaskIncrementTick+0x164>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4914      	ldr	r1, [pc, #80]	; (8004158 <xTaskIncrementTick+0x160>)
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d901      	bls.n	800411a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <xTaskIncrementTick+0x168>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
 8004126:	e004      	b.n	8004132 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <xTaskIncrementTick+0x16c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <xTaskIncrementTick+0x16c>)
 8004130:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004132:	697b      	ldr	r3, [r7, #20]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000724 	.word	0x20000724
 8004140:	20000700 	.word	0x20000700
 8004144:	200006b4 	.word	0x200006b4
 8004148:	200006b8 	.word	0x200006b8
 800414c:	20000714 	.word	0x20000714
 8004150:	2000071c 	.word	0x2000071c
 8004154:	20000704 	.word	0x20000704
 8004158:	200004fc 	.word	0x200004fc
 800415c:	200004f8 	.word	0x200004f8
 8004160:	20000710 	.word	0x20000710
 8004164:	2000070c 	.word	0x2000070c

08004168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800416e:	4b29      	ldr	r3, [pc, #164]	; (8004214 <vTaskSwitchContext+0xac>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004176:	4b28      	ldr	r3, [pc, #160]	; (8004218 <vTaskSwitchContext+0xb0>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800417c:	e044      	b.n	8004208 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800417e:	4b26      	ldr	r3, [pc, #152]	; (8004218 <vTaskSwitchContext+0xb0>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <vTaskSwitchContext+0xb4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	fab3 f383 	clz	r3, r3
 8004190:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	f1c3 031f 	rsb	r3, r3, #31
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	4921      	ldr	r1, [pc, #132]	; (8004220 <vTaskSwitchContext+0xb8>)
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	607b      	str	r3, [r7, #4]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <vTaskSwitchContext+0x5a>
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4a14      	ldr	r2, [pc, #80]	; (8004220 <vTaskSwitchContext+0xb8>)
 80041d0:	4413      	add	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3308      	adds	r3, #8
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d104      	bne.n	80041f4 <vTaskSwitchContext+0x8c>
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <vTaskSwitchContext+0xbc>)
 80041fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <vTaskSwitchContext+0xbc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	334c      	adds	r3, #76	; 0x4c
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <vTaskSwitchContext+0xc0>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	20000724 	.word	0x20000724
 8004218:	20000710 	.word	0x20000710
 800421c:	20000704 	.word	0x20000704
 8004220:	200004fc 	.word	0x200004fc
 8004224:	200004f8 	.word	0x200004f8
 8004228:	20000068 	.word	0x20000068

0800422c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004234:	f000 f852 	bl	80042dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <prvIdleTask+0x28>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d9f9      	bls.n	8004234 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <prvIdleTask+0x2c>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004250:	e7f0      	b.n	8004234 <prvIdleTask+0x8>
 8004252:	bf00      	nop
 8004254:	200004fc 	.word	0x200004fc
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	e00c      	b.n	8004282 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4a12      	ldr	r2, [pc, #72]	; (80042bc <prvInitialiseTaskLists+0x60>)
 8004274:	4413      	add	r3, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fb17 	bl	80038aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3301      	adds	r3, #1
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b13      	cmp	r3, #19
 8004286:	d9ef      	bls.n	8004268 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004288:	480d      	ldr	r0, [pc, #52]	; (80042c0 <prvInitialiseTaskLists+0x64>)
 800428a:	f7ff fb0e 	bl	80038aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800428e:	480d      	ldr	r0, [pc, #52]	; (80042c4 <prvInitialiseTaskLists+0x68>)
 8004290:	f7ff fb0b 	bl	80038aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004294:	480c      	ldr	r0, [pc, #48]	; (80042c8 <prvInitialiseTaskLists+0x6c>)
 8004296:	f7ff fb08 	bl	80038aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800429a:	480c      	ldr	r0, [pc, #48]	; (80042cc <prvInitialiseTaskLists+0x70>)
 800429c:	f7ff fb05 	bl	80038aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042a0:	480b      	ldr	r0, [pc, #44]	; (80042d0 <prvInitialiseTaskLists+0x74>)
 80042a2:	f7ff fb02 	bl	80038aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <prvInitialiseTaskLists+0x78>)
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <prvInitialiseTaskLists+0x64>)
 80042aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <prvInitialiseTaskLists+0x7c>)
 80042ae:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <prvInitialiseTaskLists+0x68>)
 80042b0:	601a      	str	r2, [r3, #0]
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200004fc 	.word	0x200004fc
 80042c0:	2000068c 	.word	0x2000068c
 80042c4:	200006a0 	.word	0x200006a0
 80042c8:	200006bc 	.word	0x200006bc
 80042cc:	200006d0 	.word	0x200006d0
 80042d0:	200006e8 	.word	0x200006e8
 80042d4:	200006b4 	.word	0x200006b4
 80042d8:	200006b8 	.word	0x200006b8

080042dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042e2:	e019      	b.n	8004318 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042e4:	f000 fa2e 	bl	8004744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <prvCheckTasksWaitingTermination+0x50>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fb62 	bl	80039be <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <prvCheckTasksWaitingTermination+0x54>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <prvCheckTasksWaitingTermination+0x54>)
 8004302:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <prvCheckTasksWaitingTermination+0x58>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3b01      	subs	r3, #1
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <prvCheckTasksWaitingTermination+0x58>)
 800430c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800430e:	f000 fa49 	bl	80047a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f810 	bl	8004338 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <prvCheckTasksWaitingTermination+0x58>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e1      	bne.n	80042e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200006d0 	.word	0x200006d0
 8004330:	200006fc 	.word	0x200006fc
 8004334:	200006e4 	.word	0x200006e4

08004338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	334c      	adds	r3, #76	; 0x4c
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fb53 	bl	80059f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004350:	2b00      	cmp	r3, #0
 8004352:	d108      	bne.n	8004366 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fba1 	bl	8004aa0 <vPortFree>
				vPortFree( pxTCB );
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fb9e 	bl	8004aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004364:	e018      	b.n	8004398 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800436c:	2b01      	cmp	r3, #1
 800436e:	d103      	bne.n	8004378 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fb95 	bl	8004aa0 <vPortFree>
	}
 8004376:	e00f      	b.n	8004398 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800437e:	2b02      	cmp	r3, #2
 8004380:	d00a      	beq.n	8004398 <prvDeleteTCB+0x60>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	60fb      	str	r3, [r7, #12]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <prvDeleteTCB+0x5e>
	}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <prvResetNextTaskUnblockTime+0x38>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvResetNextTaskUnblockTime+0x3c>)
 80043b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043b8:	e008      	b.n	80043cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ba:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <prvResetNextTaskUnblockTime+0x38>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <prvResetNextTaskUnblockTime+0x3c>)
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	200006b4 	.word	0x200006b4
 80043dc:	2000071c 	.word	0x2000071c

080043e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <xTaskGetSchedulerState+0x34>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d102      	bne.n	80043f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ee:	2301      	movs	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e008      	b.n	8004406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <xTaskGetSchedulerState+0x38>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043fc:	2302      	movs	r3, #2
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e001      	b.n	8004406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004402:	2300      	movs	r3, #0
 8004404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004406:	687b      	ldr	r3, [r7, #4]
	}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	20000708 	.word	0x20000708
 8004418:	20000724 	.word	0x20000724

0800441c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004426:	4b29      	ldr	r3, [pc, #164]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800442c:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3304      	adds	r3, #4
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fac3 	bl	80039be <uxListRemove>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	2201      	movs	r2, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43da      	mvns	r2, r3
 800444c:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4013      	ands	r3, r2
 8004452:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004454:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445c:	d10a      	bne.n	8004474 <prvAddCurrentTaskToDelayedList+0x58>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	481a      	ldr	r0, [pc, #104]	; (80044d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800446e:	f7ff fa49 	bl	8003904 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004472:	e026      	b.n	80044c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800447c:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d209      	bcs.n	80044a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f7ff fa57 	bl	800394c <vListInsert>
}
 800449e:	e010      	b.n	80044c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f7ff fa4d 	bl	800394c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d202      	bcs.n	80044c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80044bc:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	6013      	str	r3, [r2, #0]
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000700 	.word	0x20000700
 80044d0:	200004f8 	.word	0x200004f8
 80044d4:	20000704 	.word	0x20000704
 80044d8:	200006e8 	.word	0x200006e8
 80044dc:	200006b8 	.word	0x200006b8
 80044e0:	200006b4 	.word	0x200006b4
 80044e4:	2000071c 	.word	0x2000071c

080044e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3b04      	subs	r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b04      	subs	r3, #4
 8004506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3b04      	subs	r3, #4
 8004516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <pxPortInitialiseStack+0x64>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b14      	subs	r3, #20
 8004522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b04      	subs	r3, #4
 800452e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f06f 0202 	mvn.w	r2, #2
 8004536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3b20      	subs	r3, #32
 800453c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800453e:	68fb      	ldr	r3, [r7, #12]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	08004551 	.word	0x08004551

08004550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <prvTaskExitError+0x54>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004562:	d00a      	beq.n	800457a <prvTaskExitError+0x2a>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60fb      	str	r3, [r7, #12]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <prvTaskExitError+0x28>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	60bb      	str	r3, [r7, #8]
}
 800458c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800458e:	bf00      	nop
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0fc      	beq.n	8004590 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	2000000c 	.word	0x2000000c
	...

080045b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <pxCurrentTCBConst2>)
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	6808      	ldr	r0, [r1, #0]
 80045b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	f380 8809 	msr	PSP, r0
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	4770      	bx	lr
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst2>:
 80045d0:	200004f8 	.word	0x200004f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045d8:	4808      	ldr	r0, [pc, #32]	; (80045fc <prvPortStartFirstTask+0x24>)
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	6800      	ldr	r0, [r0, #0]
 80045de:	f380 8808 	msr	MSP, r0
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f380 8814 	msr	CONTROL, r0
 80045ea:	b662      	cpsie	i
 80045ec:	b661      	cpsie	f
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	df00      	svc	0
 80045f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045fa:	bf00      	nop
 80045fc:	e000ed08 	.word	0xe000ed08

08004600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004606:	4b46      	ldr	r3, [pc, #280]	; (8004720 <xPortStartScheduler+0x120>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a46      	ldr	r2, [pc, #280]	; (8004724 <xPortStartScheduler+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10a      	bne.n	8004626 <xPortStartScheduler+0x26>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	613b      	str	r3, [r7, #16]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004626:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <xPortStartScheduler+0x120>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <xPortStartScheduler+0x128>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10a      	bne.n	8004646 <xPortStartScheduler+0x46>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60fb      	str	r3, [r7, #12]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <xPortStartScheduler+0x12c>)
 8004648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	22ff      	movs	r2, #255	; 0xff
 8004656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b31      	ldr	r3, [pc, #196]	; (8004730 <xPortStartScheduler+0x130>)
 800466c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <xPortStartScheduler+0x134>)
 8004670:	2207      	movs	r2, #7
 8004672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004674:	e009      	b.n	800468a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <xPortStartScheduler+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a2d      	ldr	r2, [pc, #180]	; (8004734 <xPortStartScheduler+0x134>)
 800467e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d0ef      	beq.n	8004676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <xPortStartScheduler+0x134>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00a      	beq.n	80046b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60bb      	str	r3, [r7, #8]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <xPortStartScheduler+0x134>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <xPortStartScheduler+0x134>)
 80046c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <xPortStartScheduler+0x134>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <xPortStartScheduler+0x134>)
 80046cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <xPortStartScheduler+0x138>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <xPortStartScheduler+0x138>)
 80046dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <xPortStartScheduler+0x138>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a14      	ldr	r2, [pc, #80]	; (8004738 <xPortStartScheduler+0x138>)
 80046e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046ee:	f000 f8dd 	bl	80048ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <xPortStartScheduler+0x13c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046f8:	f000 f8fc 	bl	80048f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <xPortStartScheduler+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <xPortStartScheduler+0x140>)
 8004702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004708:	f7ff ff66 	bl	80045d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800470c:	f7ff fd2c 	bl	8004168 <vTaskSwitchContext>
	prvTaskExitError();
 8004710:	f7ff ff1e 	bl	8004550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	e000ed00 	.word	0xe000ed00
 8004724:	410fc271 	.word	0x410fc271
 8004728:	410fc270 	.word	0x410fc270
 800472c:	e000e400 	.word	0xe000e400
 8004730:	20000728 	.word	0x20000728
 8004734:	2000072c 	.word	0x2000072c
 8004738:	e000ed20 	.word	0xe000ed20
 800473c:	2000000c 	.word	0x2000000c
 8004740:	e000ef34 	.word	0xe000ef34

08004744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	607b      	str	r3, [r7, #4]
}
 800475c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <vPortEnterCritical+0x58>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a0d      	ldr	r2, [pc, #52]	; (800479c <vPortEnterCritical+0x58>)
 8004766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <vPortEnterCritical+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10f      	bne.n	8004790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <vPortEnterCritical+0x5c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <vPortEnterCritical+0x4c>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	603b      	str	r3, [r7, #0]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vPortEnterCritical+0x4a>
	}
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	2000000c 	.word	0x2000000c
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <vPortExitCritical+0x50>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <vPortExitCritical+0x24>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	607b      	str	r3, [r7, #4]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <vPortExitCritical+0x50>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <vPortExitCritical+0x50>)
 80047d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <vPortExitCritical+0x50>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <vPortExitCritical+0x42>
 80047da:	2300      	movs	r3, #0
 80047dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000000c 	.word	0x2000000c
	...

08004800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7ff fc9a 	bl	8004168 <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	200004f8 	.word	0x200004f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
}
 8004880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004882:	f7ff fbb9 	bl	8003ff8 <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <xPortSysTickHandler+0x40>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <vPortSetupTimerInterrupt+0x44>)
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e010 	.word	0xe000e010
 80048e4:	e000e018 	.word	0xe000e018
 80048e8:	20000000 	.word	0x20000000
 80048ec:	10624dd3 	.word	0x10624dd3
 80048f0:	e000e014 	.word	0xe000e014

080048f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004904 <vPortEnableVFP+0x10>
 80048f8:	6801      	ldr	r1, [r0, #0]
 80048fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048fe:	6001      	str	r1, [r0, #0]
 8004900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004902:	bf00      	nop
 8004904:	e000ed88 	.word	0xe000ed88

08004908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004914:	f7ff fac6 	bl	8003ea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004918:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <pvPortMalloc+0x180>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004920:	f000 f920 	bl	8004b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004924:	4b59      	ldr	r3, [pc, #356]	; (8004a8c <pvPortMalloc+0x184>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 8093 	bne.w	8004a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01d      	beq.n	8004974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004938:	2208      	movs	r2, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d014      	beq.n	8004974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	3308      	adds	r3, #8
 8004952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <pvPortMalloc+0x6c>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	617b      	str	r3, [r7, #20]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d06e      	beq.n	8004a58 <pvPortMalloc+0x150>
 800497a:	4b45      	ldr	r3, [pc, #276]	; (8004a90 <pvPortMalloc+0x188>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d869      	bhi.n	8004a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <pvPortMalloc+0x18c>)
 8004986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004988:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <pvPortMalloc+0x18c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800498e:	e004      	b.n	800499a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d903      	bls.n	80049ac <pvPortMalloc+0xa4>
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f1      	bne.n	8004990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049ac:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <pvPortMalloc+0x180>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d050      	beq.n	8004a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2208      	movs	r2, #8
 80049bc:	4413      	add	r3, r2
 80049be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	2308      	movs	r3, #8
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d91f      	bls.n	8004a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <pvPortMalloc+0xf8>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	613b      	str	r3, [r7, #16]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a12:	69b8      	ldr	r0, [r7, #24]
 8004a14:	f000 f908 	bl	8004c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a18:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <pvPortMalloc+0x188>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <pvPortMalloc+0x188>)
 8004a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <pvPortMalloc+0x188>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <pvPortMalloc+0x190>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d203      	bcs.n	8004a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a32:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <pvPortMalloc+0x188>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <pvPortMalloc+0x190>)
 8004a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <pvPortMalloc+0x184>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <pvPortMalloc+0x194>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <pvPortMalloc+0x194>)
 8004a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a58:	f7ff fa32 	bl	8003ec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <pvPortMalloc+0x174>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60fb      	str	r3, [r7, #12]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <pvPortMalloc+0x172>
	return pvReturn;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20004338 	.word	0x20004338
 8004a8c:	2000434c 	.word	0x2000434c
 8004a90:	2000433c 	.word	0x2000433c
 8004a94:	20004330 	.word	0x20004330
 8004a98:	20004340 	.word	0x20004340
 8004a9c:	20004344 	.word	0x20004344

08004aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d04d      	beq.n	8004b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <vPortFree+0xb8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <vPortFree+0x44>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60fb      	str	r3, [r7, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <vPortFree+0x62>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60bb      	str	r3, [r7, #8]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <vPortFree+0xb8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01e      	beq.n	8004b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11a      	bne.n	8004b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <vPortFree+0xb8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b28:	f7ff f9bc 	bl	8003ea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <vPortFree+0xbc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <vPortFree+0xbc>)
 8004b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b3a:	6938      	ldr	r0, [r7, #16]
 8004b3c:	f000 f874 	bl	8004c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <vPortFree+0xc0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <vPortFree+0xc0>)
 8004b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b4a:	f7ff f9b9 	bl	8003ec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000434c 	.word	0x2000434c
 8004b5c:	2000433c 	.word	0x2000433c
 8004b60:	20004348 	.word	0x20004348

08004b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <prvHeapInit+0xac>)
 8004b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3307      	adds	r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <prvHeapInit+0xac>)
 8004b94:	4413      	add	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <prvHeapInit+0xb0>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <prvHeapInit+0xb0>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <prvHeapInit+0xb4>)
 8004bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <prvHeapInit+0xb4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <prvHeapInit+0xb4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <prvHeapInit+0xb4>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <prvHeapInit+0xb8>)
 8004bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <prvHeapInit+0xbc>)
 8004bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <prvHeapInit+0xc0>)
 8004bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c02:	601a      	str	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000730 	.word	0x20000730
 8004c14:	20004330 	.word	0x20004330
 8004c18:	20004338 	.word	0x20004338
 8004c1c:	20004340 	.word	0x20004340
 8004c20:	2000433c 	.word	0x2000433c
 8004c24:	2000434c 	.word	0x2000434c

08004c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c30:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <prvInsertBlockIntoFreeList+0xac>)
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e002      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x14>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d8f7      	bhi.n	8004c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4413      	add	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d108      	bne.n	8004c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	441a      	add	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d118      	bne.n	8004cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d00d      	beq.n	8004ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e008      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e003      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d002      	beq.n	8004cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20004330 	.word	0x20004330
 8004cd8:	20004338 	.word	0x20004338

08004cdc <__cvt>:
 8004cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce0:	ec55 4b10 	vmov	r4, r5, d0
 8004ce4:	2d00      	cmp	r5, #0
 8004ce6:	460e      	mov	r6, r1
 8004ce8:	4619      	mov	r1, r3
 8004cea:	462b      	mov	r3, r5
 8004cec:	bfbb      	ittet	lt
 8004cee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cf2:	461d      	movlt	r5, r3
 8004cf4:	2300      	movge	r3, #0
 8004cf6:	232d      	movlt	r3, #45	; 0x2d
 8004cf8:	700b      	strb	r3, [r1, #0]
 8004cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d00:	4691      	mov	r9, r2
 8004d02:	f023 0820 	bic.w	r8, r3, #32
 8004d06:	bfbc      	itt	lt
 8004d08:	4622      	movlt	r2, r4
 8004d0a:	4614      	movlt	r4, r2
 8004d0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d10:	d005      	beq.n	8004d1e <__cvt+0x42>
 8004d12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d16:	d100      	bne.n	8004d1a <__cvt+0x3e>
 8004d18:	3601      	adds	r6, #1
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	e000      	b.n	8004d20 <__cvt+0x44>
 8004d1e:	2103      	movs	r1, #3
 8004d20:	ab03      	add	r3, sp, #12
 8004d22:	9301      	str	r3, [sp, #4]
 8004d24:	ab02      	add	r3, sp, #8
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	ec45 4b10 	vmov	d0, r4, r5
 8004d2c:	4653      	mov	r3, sl
 8004d2e:	4632      	mov	r2, r6
 8004d30:	f000 ffae 	bl	8005c90 <_dtoa_r>
 8004d34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d38:	4607      	mov	r7, r0
 8004d3a:	d102      	bne.n	8004d42 <__cvt+0x66>
 8004d3c:	f019 0f01 	tst.w	r9, #1
 8004d40:	d022      	beq.n	8004d88 <__cvt+0xac>
 8004d42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d46:	eb07 0906 	add.w	r9, r7, r6
 8004d4a:	d110      	bne.n	8004d6e <__cvt+0x92>
 8004d4c:	783b      	ldrb	r3, [r7, #0]
 8004d4e:	2b30      	cmp	r3, #48	; 0x30
 8004d50:	d10a      	bne.n	8004d68 <__cvt+0x8c>
 8004d52:	2200      	movs	r2, #0
 8004d54:	2300      	movs	r3, #0
 8004d56:	4620      	mov	r0, r4
 8004d58:	4629      	mov	r1, r5
 8004d5a:	f7fb feb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d5e:	b918      	cbnz	r0, 8004d68 <__cvt+0x8c>
 8004d60:	f1c6 0601 	rsb	r6, r6, #1
 8004d64:	f8ca 6000 	str.w	r6, [sl]
 8004d68:	f8da 3000 	ldr.w	r3, [sl]
 8004d6c:	4499      	add	r9, r3
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2300      	movs	r3, #0
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	f7fb fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d7a:	b108      	cbz	r0, 8004d80 <__cvt+0xa4>
 8004d7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d80:	2230      	movs	r2, #48	; 0x30
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	454b      	cmp	r3, r9
 8004d86:	d307      	bcc.n	8004d98 <__cvt+0xbc>
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d8c:	1bdb      	subs	r3, r3, r7
 8004d8e:	4638      	mov	r0, r7
 8004d90:	6013      	str	r3, [r2, #0]
 8004d92:	b004      	add	sp, #16
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d98:	1c59      	adds	r1, r3, #1
 8004d9a:	9103      	str	r1, [sp, #12]
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	e7f0      	b.n	8004d82 <__cvt+0xa6>

08004da0 <__exponent>:
 8004da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004da2:	4603      	mov	r3, r0
 8004da4:	2900      	cmp	r1, #0
 8004da6:	bfb8      	it	lt
 8004da8:	4249      	neglt	r1, r1
 8004daa:	f803 2b02 	strb.w	r2, [r3], #2
 8004dae:	bfb4      	ite	lt
 8004db0:	222d      	movlt	r2, #45	; 0x2d
 8004db2:	222b      	movge	r2, #43	; 0x2b
 8004db4:	2909      	cmp	r1, #9
 8004db6:	7042      	strb	r2, [r0, #1]
 8004db8:	dd2a      	ble.n	8004e10 <__exponent+0x70>
 8004dba:	f10d 0207 	add.w	r2, sp, #7
 8004dbe:	4617      	mov	r7, r2
 8004dc0:	260a      	movs	r6, #10
 8004dc2:	4694      	mov	ip, r2
 8004dc4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004dc8:	fb06 1415 	mls	r4, r6, r5, r1
 8004dcc:	3430      	adds	r4, #48	; 0x30
 8004dce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	2c63      	cmp	r4, #99	; 0x63
 8004dd6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004dda:	4629      	mov	r1, r5
 8004ddc:	dcf1      	bgt.n	8004dc2 <__exponent+0x22>
 8004dde:	3130      	adds	r1, #48	; 0x30
 8004de0:	f1ac 0402 	sub.w	r4, ip, #2
 8004de4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004de8:	1c41      	adds	r1, r0, #1
 8004dea:	4622      	mov	r2, r4
 8004dec:	42ba      	cmp	r2, r7
 8004dee:	d30a      	bcc.n	8004e06 <__exponent+0x66>
 8004df0:	f10d 0209 	add.w	r2, sp, #9
 8004df4:	eba2 020c 	sub.w	r2, r2, ip
 8004df8:	42bc      	cmp	r4, r7
 8004dfa:	bf88      	it	hi
 8004dfc:	2200      	movhi	r2, #0
 8004dfe:	4413      	add	r3, r2
 8004e00:	1a18      	subs	r0, r3, r0
 8004e02:	b003      	add	sp, #12
 8004e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e06:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e0a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e0e:	e7ed      	b.n	8004dec <__exponent+0x4c>
 8004e10:	2330      	movs	r3, #48	; 0x30
 8004e12:	3130      	adds	r1, #48	; 0x30
 8004e14:	7083      	strb	r3, [r0, #2]
 8004e16:	70c1      	strb	r1, [r0, #3]
 8004e18:	1d03      	adds	r3, r0, #4
 8004e1a:	e7f1      	b.n	8004e00 <__exponent+0x60>

08004e1c <_printf_float>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	ed2d 8b02 	vpush	{d8}
 8004e24:	b08d      	sub	sp, #52	; 0x34
 8004e26:	460c      	mov	r4, r1
 8004e28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e2c:	4616      	mov	r6, r2
 8004e2e:	461f      	mov	r7, r3
 8004e30:	4605      	mov	r5, r0
 8004e32:	f000 fdc9 	bl	80059c8 <_localeconv_r>
 8004e36:	f8d0 a000 	ldr.w	sl, [r0]
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	f7fb fa18 	bl	8000270 <strlen>
 8004e40:	2300      	movs	r3, #0
 8004e42:	930a      	str	r3, [sp, #40]	; 0x28
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	9305      	str	r3, [sp, #20]
 8004e48:	f8d8 3000 	ldr.w	r3, [r8]
 8004e4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e50:	3307      	adds	r3, #7
 8004e52:	f023 0307 	bic.w	r3, r3, #7
 8004e56:	f103 0208 	add.w	r2, r3, #8
 8004e5a:	f8c8 2000 	str.w	r2, [r8]
 8004e5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e66:	9307      	str	r3, [sp, #28]
 8004e68:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e6c:	ee08 0a10 	vmov	s16, r0
 8004e70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e78:	4b9e      	ldr	r3, [pc, #632]	; (80050f4 <_printf_float+0x2d8>)
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e7e:	f7fb fe55 	bl	8000b2c <__aeabi_dcmpun>
 8004e82:	bb88      	cbnz	r0, 8004ee8 <_printf_float+0xcc>
 8004e84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e88:	4b9a      	ldr	r3, [pc, #616]	; (80050f4 <_printf_float+0x2d8>)
 8004e8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e8e:	f7fb fe2f 	bl	8000af0 <__aeabi_dcmple>
 8004e92:	bb48      	cbnz	r0, 8004ee8 <_printf_float+0xcc>
 8004e94:	2200      	movs	r2, #0
 8004e96:	2300      	movs	r3, #0
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb fe1e 	bl	8000adc <__aeabi_dcmplt>
 8004ea0:	b110      	cbz	r0, 8004ea8 <_printf_float+0x8c>
 8004ea2:	232d      	movs	r3, #45	; 0x2d
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea8:	4a93      	ldr	r2, [pc, #588]	; (80050f8 <_printf_float+0x2dc>)
 8004eaa:	4b94      	ldr	r3, [pc, #592]	; (80050fc <_printf_float+0x2e0>)
 8004eac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004eb0:	bf94      	ite	ls
 8004eb2:	4690      	movls	r8, r2
 8004eb4:	4698      	movhi	r8, r3
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	6123      	str	r3, [r4, #16]
 8004eba:	9b05      	ldr	r3, [sp, #20]
 8004ebc:	f023 0304 	bic.w	r3, r3, #4
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	f04f 0900 	mov.w	r9, #0
 8004ec6:	9700      	str	r7, [sp, #0]
 8004ec8:	4633      	mov	r3, r6
 8004eca:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f9da 	bl	8005288 <_printf_common>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	f040 8090 	bne.w	8004ffa <_printf_float+0x1de>
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ede:	b00d      	add	sp, #52	; 0x34
 8004ee0:	ecbd 8b02 	vpop	{d8}
 8004ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	4640      	mov	r0, r8
 8004eee:	4649      	mov	r1, r9
 8004ef0:	f7fb fe1c 	bl	8000b2c <__aeabi_dcmpun>
 8004ef4:	b140      	cbz	r0, 8004f08 <_printf_float+0xec>
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bfbc      	itt	lt
 8004efc:	232d      	movlt	r3, #45	; 0x2d
 8004efe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f02:	4a7f      	ldr	r2, [pc, #508]	; (8005100 <_printf_float+0x2e4>)
 8004f04:	4b7f      	ldr	r3, [pc, #508]	; (8005104 <_printf_float+0x2e8>)
 8004f06:	e7d1      	b.n	8004eac <_printf_float+0x90>
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f0e:	9206      	str	r2, [sp, #24]
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	d13f      	bne.n	8004f94 <_printf_float+0x178>
 8004f14:	2306      	movs	r3, #6
 8004f16:	6063      	str	r3, [r4, #4]
 8004f18:	9b05      	ldr	r3, [sp, #20]
 8004f1a:	6861      	ldr	r1, [r4, #4]
 8004f1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f20:	2300      	movs	r3, #0
 8004f22:	9303      	str	r3, [sp, #12]
 8004f24:	ab0a      	add	r3, sp, #40	; 0x28
 8004f26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f2a:	ab09      	add	r3, sp, #36	; 0x24
 8004f2c:	ec49 8b10 	vmov	d0, r8, r9
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	6022      	str	r2, [r4, #0]
 8004f34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7ff fecf 	bl	8004cdc <__cvt>
 8004f3e:	9b06      	ldr	r3, [sp, #24]
 8004f40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f42:	2b47      	cmp	r3, #71	; 0x47
 8004f44:	4680      	mov	r8, r0
 8004f46:	d108      	bne.n	8004f5a <_printf_float+0x13e>
 8004f48:	1cc8      	adds	r0, r1, #3
 8004f4a:	db02      	blt.n	8004f52 <_printf_float+0x136>
 8004f4c:	6863      	ldr	r3, [r4, #4]
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	dd41      	ble.n	8004fd6 <_printf_float+0x1ba>
 8004f52:	f1ab 0302 	sub.w	r3, fp, #2
 8004f56:	fa5f fb83 	uxtb.w	fp, r3
 8004f5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f5e:	d820      	bhi.n	8004fa2 <_printf_float+0x186>
 8004f60:	3901      	subs	r1, #1
 8004f62:	465a      	mov	r2, fp
 8004f64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f68:	9109      	str	r1, [sp, #36]	; 0x24
 8004f6a:	f7ff ff19 	bl	8004da0 <__exponent>
 8004f6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f70:	1813      	adds	r3, r2, r0
 8004f72:	2a01      	cmp	r2, #1
 8004f74:	4681      	mov	r9, r0
 8004f76:	6123      	str	r3, [r4, #16]
 8004f78:	dc02      	bgt.n	8004f80 <_printf_float+0x164>
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	07d2      	lsls	r2, r2, #31
 8004f7e:	d501      	bpl.n	8004f84 <_printf_float+0x168>
 8004f80:	3301      	adds	r3, #1
 8004f82:	6123      	str	r3, [r4, #16]
 8004f84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d09c      	beq.n	8004ec6 <_printf_float+0xaa>
 8004f8c:	232d      	movs	r3, #45	; 0x2d
 8004f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f92:	e798      	b.n	8004ec6 <_printf_float+0xaa>
 8004f94:	9a06      	ldr	r2, [sp, #24]
 8004f96:	2a47      	cmp	r2, #71	; 0x47
 8004f98:	d1be      	bne.n	8004f18 <_printf_float+0xfc>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1bc      	bne.n	8004f18 <_printf_float+0xfc>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e7b9      	b.n	8004f16 <_printf_float+0xfa>
 8004fa2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fa6:	d118      	bne.n	8004fda <_printf_float+0x1be>
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	dd0b      	ble.n	8004fc6 <_printf_float+0x1aa>
 8004fae:	6121      	str	r1, [r4, #16]
 8004fb0:	b913      	cbnz	r3, 8004fb8 <_printf_float+0x19c>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	07d0      	lsls	r0, r2, #31
 8004fb6:	d502      	bpl.n	8004fbe <_printf_float+0x1a2>
 8004fb8:	3301      	adds	r3, #1
 8004fba:	440b      	add	r3, r1
 8004fbc:	6123      	str	r3, [r4, #16]
 8004fbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fc0:	f04f 0900 	mov.w	r9, #0
 8004fc4:	e7de      	b.n	8004f84 <_printf_float+0x168>
 8004fc6:	b913      	cbnz	r3, 8004fce <_printf_float+0x1b2>
 8004fc8:	6822      	ldr	r2, [r4, #0]
 8004fca:	07d2      	lsls	r2, r2, #31
 8004fcc:	d501      	bpl.n	8004fd2 <_printf_float+0x1b6>
 8004fce:	3302      	adds	r3, #2
 8004fd0:	e7f4      	b.n	8004fbc <_printf_float+0x1a0>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7f2      	b.n	8004fbc <_printf_float+0x1a0>
 8004fd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fdc:	4299      	cmp	r1, r3
 8004fde:	db05      	blt.n	8004fec <_printf_float+0x1d0>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	6121      	str	r1, [r4, #16]
 8004fe4:	07d8      	lsls	r0, r3, #31
 8004fe6:	d5ea      	bpl.n	8004fbe <_printf_float+0x1a2>
 8004fe8:	1c4b      	adds	r3, r1, #1
 8004fea:	e7e7      	b.n	8004fbc <_printf_float+0x1a0>
 8004fec:	2900      	cmp	r1, #0
 8004fee:	bfd4      	ite	le
 8004ff0:	f1c1 0202 	rsble	r2, r1, #2
 8004ff4:	2201      	movgt	r2, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	e7e0      	b.n	8004fbc <_printf_float+0x1a0>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	055a      	lsls	r2, r3, #21
 8004ffe:	d407      	bmi.n	8005010 <_printf_float+0x1f4>
 8005000:	6923      	ldr	r3, [r4, #16]
 8005002:	4642      	mov	r2, r8
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	d12c      	bne.n	8005068 <_printf_float+0x24c>
 800500e:	e764      	b.n	8004eda <_printf_float+0xbe>
 8005010:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005014:	f240 80e0 	bls.w	80051d8 <_printf_float+0x3bc>
 8005018:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800501c:	2200      	movs	r2, #0
 800501e:	2300      	movs	r3, #0
 8005020:	f7fb fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005024:	2800      	cmp	r0, #0
 8005026:	d034      	beq.n	8005092 <_printf_float+0x276>
 8005028:	4a37      	ldr	r2, [pc, #220]	; (8005108 <_printf_float+0x2ec>)
 800502a:	2301      	movs	r3, #1
 800502c:	4631      	mov	r1, r6
 800502e:	4628      	mov	r0, r5
 8005030:	47b8      	blx	r7
 8005032:	3001      	adds	r0, #1
 8005034:	f43f af51 	beq.w	8004eda <_printf_float+0xbe>
 8005038:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800503c:	429a      	cmp	r2, r3
 800503e:	db02      	blt.n	8005046 <_printf_float+0x22a>
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	07d8      	lsls	r0, r3, #31
 8005044:	d510      	bpl.n	8005068 <_printf_float+0x24c>
 8005046:	ee18 3a10 	vmov	r3, s16
 800504a:	4652      	mov	r2, sl
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	f43f af41 	beq.w	8004eda <_printf_float+0xbe>
 8005058:	f04f 0800 	mov.w	r8, #0
 800505c:	f104 091a 	add.w	r9, r4, #26
 8005060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	4543      	cmp	r3, r8
 8005066:	dc09      	bgt.n	800507c <_printf_float+0x260>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	079b      	lsls	r3, r3, #30
 800506c:	f100 8107 	bmi.w	800527e <_printf_float+0x462>
 8005070:	68e0      	ldr	r0, [r4, #12]
 8005072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005074:	4298      	cmp	r0, r3
 8005076:	bfb8      	it	lt
 8005078:	4618      	movlt	r0, r3
 800507a:	e730      	b.n	8004ede <_printf_float+0xc2>
 800507c:	2301      	movs	r3, #1
 800507e:	464a      	mov	r2, r9
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f af27 	beq.w	8004eda <_printf_float+0xbe>
 800508c:	f108 0801 	add.w	r8, r8, #1
 8005090:	e7e6      	b.n	8005060 <_printf_float+0x244>
 8005092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005094:	2b00      	cmp	r3, #0
 8005096:	dc39      	bgt.n	800510c <_printf_float+0x2f0>
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <_printf_float+0x2ec>)
 800509a:	2301      	movs	r3, #1
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	f43f af19 	beq.w	8004eda <_printf_float+0xbe>
 80050a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d102      	bne.n	80050b6 <_printf_float+0x29a>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	07d9      	lsls	r1, r3, #31
 80050b4:	d5d8      	bpl.n	8005068 <_printf_float+0x24c>
 80050b6:	ee18 3a10 	vmov	r3, s16
 80050ba:	4652      	mov	r2, sl
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	f43f af09 	beq.w	8004eda <_printf_float+0xbe>
 80050c8:	f04f 0900 	mov.w	r9, #0
 80050cc:	f104 0a1a 	add.w	sl, r4, #26
 80050d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050d2:	425b      	negs	r3, r3
 80050d4:	454b      	cmp	r3, r9
 80050d6:	dc01      	bgt.n	80050dc <_printf_float+0x2c0>
 80050d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050da:	e792      	b.n	8005002 <_printf_float+0x1e6>
 80050dc:	2301      	movs	r3, #1
 80050de:	4652      	mov	r2, sl
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f aef7 	beq.w	8004eda <_printf_float+0xbe>
 80050ec:	f109 0901 	add.w	r9, r9, #1
 80050f0:	e7ee      	b.n	80050d0 <_printf_float+0x2b4>
 80050f2:	bf00      	nop
 80050f4:	7fefffff 	.word	0x7fefffff
 80050f8:	08007f4c 	.word	0x08007f4c
 80050fc:	08007f50 	.word	0x08007f50
 8005100:	08007f54 	.word	0x08007f54
 8005104:	08007f58 	.word	0x08007f58
 8005108:	08007f5c 	.word	0x08007f5c
 800510c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800510e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005110:	429a      	cmp	r2, r3
 8005112:	bfa8      	it	ge
 8005114:	461a      	movge	r2, r3
 8005116:	2a00      	cmp	r2, #0
 8005118:	4691      	mov	r9, r2
 800511a:	dc37      	bgt.n	800518c <_printf_float+0x370>
 800511c:	f04f 0b00 	mov.w	fp, #0
 8005120:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005124:	f104 021a 	add.w	r2, r4, #26
 8005128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800512a:	9305      	str	r3, [sp, #20]
 800512c:	eba3 0309 	sub.w	r3, r3, r9
 8005130:	455b      	cmp	r3, fp
 8005132:	dc33      	bgt.n	800519c <_printf_float+0x380>
 8005134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005138:	429a      	cmp	r2, r3
 800513a:	db3b      	blt.n	80051b4 <_printf_float+0x398>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	07da      	lsls	r2, r3, #31
 8005140:	d438      	bmi.n	80051b4 <_printf_float+0x398>
 8005142:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005146:	eba2 0903 	sub.w	r9, r2, r3
 800514a:	9b05      	ldr	r3, [sp, #20]
 800514c:	1ad2      	subs	r2, r2, r3
 800514e:	4591      	cmp	r9, r2
 8005150:	bfa8      	it	ge
 8005152:	4691      	movge	r9, r2
 8005154:	f1b9 0f00 	cmp.w	r9, #0
 8005158:	dc35      	bgt.n	80051c6 <_printf_float+0x3aa>
 800515a:	f04f 0800 	mov.w	r8, #0
 800515e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005162:	f104 0a1a 	add.w	sl, r4, #26
 8005166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	eba3 0309 	sub.w	r3, r3, r9
 8005170:	4543      	cmp	r3, r8
 8005172:	f77f af79 	ble.w	8005068 <_printf_float+0x24c>
 8005176:	2301      	movs	r3, #1
 8005178:	4652      	mov	r2, sl
 800517a:	4631      	mov	r1, r6
 800517c:	4628      	mov	r0, r5
 800517e:	47b8      	blx	r7
 8005180:	3001      	adds	r0, #1
 8005182:	f43f aeaa 	beq.w	8004eda <_printf_float+0xbe>
 8005186:	f108 0801 	add.w	r8, r8, #1
 800518a:	e7ec      	b.n	8005166 <_printf_float+0x34a>
 800518c:	4613      	mov	r3, r2
 800518e:	4631      	mov	r1, r6
 8005190:	4642      	mov	r2, r8
 8005192:	4628      	mov	r0, r5
 8005194:	47b8      	blx	r7
 8005196:	3001      	adds	r0, #1
 8005198:	d1c0      	bne.n	800511c <_printf_float+0x300>
 800519a:	e69e      	b.n	8004eda <_printf_float+0xbe>
 800519c:	2301      	movs	r3, #1
 800519e:	4631      	mov	r1, r6
 80051a0:	4628      	mov	r0, r5
 80051a2:	9205      	str	r2, [sp, #20]
 80051a4:	47b8      	blx	r7
 80051a6:	3001      	adds	r0, #1
 80051a8:	f43f ae97 	beq.w	8004eda <_printf_float+0xbe>
 80051ac:	9a05      	ldr	r2, [sp, #20]
 80051ae:	f10b 0b01 	add.w	fp, fp, #1
 80051b2:	e7b9      	b.n	8005128 <_printf_float+0x30c>
 80051b4:	ee18 3a10 	vmov	r3, s16
 80051b8:	4652      	mov	r2, sl
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	d1be      	bne.n	8005142 <_printf_float+0x326>
 80051c4:	e689      	b.n	8004eda <_printf_float+0xbe>
 80051c6:	9a05      	ldr	r2, [sp, #20]
 80051c8:	464b      	mov	r3, r9
 80051ca:	4442      	add	r2, r8
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	d1c1      	bne.n	800515a <_printf_float+0x33e>
 80051d6:	e680      	b.n	8004eda <_printf_float+0xbe>
 80051d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051da:	2a01      	cmp	r2, #1
 80051dc:	dc01      	bgt.n	80051e2 <_printf_float+0x3c6>
 80051de:	07db      	lsls	r3, r3, #31
 80051e0:	d53a      	bpl.n	8005258 <_printf_float+0x43c>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4642      	mov	r2, r8
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	f43f ae74 	beq.w	8004eda <_printf_float+0xbe>
 80051f2:	ee18 3a10 	vmov	r3, s16
 80051f6:	4652      	mov	r2, sl
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f ae6b 	beq.w	8004eda <_printf_float+0xbe>
 8005204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005208:	2200      	movs	r2, #0
 800520a:	2300      	movs	r3, #0
 800520c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005210:	f7fb fc5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005214:	b9d8      	cbnz	r0, 800524e <_printf_float+0x432>
 8005216:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800521a:	f108 0201 	add.w	r2, r8, #1
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	d10e      	bne.n	8005246 <_printf_float+0x42a>
 8005228:	e657      	b.n	8004eda <_printf_float+0xbe>
 800522a:	2301      	movs	r3, #1
 800522c:	4652      	mov	r2, sl
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	f43f ae50 	beq.w	8004eda <_printf_float+0xbe>
 800523a:	f108 0801 	add.w	r8, r8, #1
 800523e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005240:	3b01      	subs	r3, #1
 8005242:	4543      	cmp	r3, r8
 8005244:	dcf1      	bgt.n	800522a <_printf_float+0x40e>
 8005246:	464b      	mov	r3, r9
 8005248:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800524c:	e6da      	b.n	8005004 <_printf_float+0x1e8>
 800524e:	f04f 0800 	mov.w	r8, #0
 8005252:	f104 0a1a 	add.w	sl, r4, #26
 8005256:	e7f2      	b.n	800523e <_printf_float+0x422>
 8005258:	2301      	movs	r3, #1
 800525a:	4642      	mov	r2, r8
 800525c:	e7df      	b.n	800521e <_printf_float+0x402>
 800525e:	2301      	movs	r3, #1
 8005260:	464a      	mov	r2, r9
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	f43f ae36 	beq.w	8004eda <_printf_float+0xbe>
 800526e:	f108 0801 	add.w	r8, r8, #1
 8005272:	68e3      	ldr	r3, [r4, #12]
 8005274:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005276:	1a5b      	subs	r3, r3, r1
 8005278:	4543      	cmp	r3, r8
 800527a:	dcf0      	bgt.n	800525e <_printf_float+0x442>
 800527c:	e6f8      	b.n	8005070 <_printf_float+0x254>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	f104 0919 	add.w	r9, r4, #25
 8005286:	e7f4      	b.n	8005272 <_printf_float+0x456>

08005288 <_printf_common>:
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	4616      	mov	r6, r2
 800528e:	4699      	mov	r9, r3
 8005290:	688a      	ldr	r2, [r1, #8]
 8005292:	690b      	ldr	r3, [r1, #16]
 8005294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005298:	4293      	cmp	r3, r2
 800529a:	bfb8      	it	lt
 800529c:	4613      	movlt	r3, r2
 800529e:	6033      	str	r3, [r6, #0]
 80052a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a4:	4607      	mov	r7, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	b10a      	cbz	r2, 80052ae <_printf_common+0x26>
 80052aa:	3301      	adds	r3, #1
 80052ac:	6033      	str	r3, [r6, #0]
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	0699      	lsls	r1, r3, #26
 80052b2:	bf42      	ittt	mi
 80052b4:	6833      	ldrmi	r3, [r6, #0]
 80052b6:	3302      	addmi	r3, #2
 80052b8:	6033      	strmi	r3, [r6, #0]
 80052ba:	6825      	ldr	r5, [r4, #0]
 80052bc:	f015 0506 	ands.w	r5, r5, #6
 80052c0:	d106      	bne.n	80052d0 <_printf_common+0x48>
 80052c2:	f104 0a19 	add.w	sl, r4, #25
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	6832      	ldr	r2, [r6, #0]
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	dc26      	bgt.n	800531e <_printf_common+0x96>
 80052d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d4:	1e13      	subs	r3, r2, #0
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	bf18      	it	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	0692      	lsls	r2, r2, #26
 80052de:	d42b      	bmi.n	8005338 <_printf_common+0xb0>
 80052e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e4:	4649      	mov	r1, r9
 80052e6:	4638      	mov	r0, r7
 80052e8:	47c0      	blx	r8
 80052ea:	3001      	adds	r0, #1
 80052ec:	d01e      	beq.n	800532c <_printf_common+0xa4>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	6922      	ldr	r2, [r4, #16]
 80052f2:	f003 0306 	and.w	r3, r3, #6
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	bf02      	ittt	eq
 80052fa:	68e5      	ldreq	r5, [r4, #12]
 80052fc:	6833      	ldreq	r3, [r6, #0]
 80052fe:	1aed      	subeq	r5, r5, r3
 8005300:	68a3      	ldr	r3, [r4, #8]
 8005302:	bf0c      	ite	eq
 8005304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005308:	2500      	movne	r5, #0
 800530a:	4293      	cmp	r3, r2
 800530c:	bfc4      	itt	gt
 800530e:	1a9b      	subgt	r3, r3, r2
 8005310:	18ed      	addgt	r5, r5, r3
 8005312:	2600      	movs	r6, #0
 8005314:	341a      	adds	r4, #26
 8005316:	42b5      	cmp	r5, r6
 8005318:	d11a      	bne.n	8005350 <_printf_common+0xc8>
 800531a:	2000      	movs	r0, #0
 800531c:	e008      	b.n	8005330 <_printf_common+0xa8>
 800531e:	2301      	movs	r3, #1
 8005320:	4652      	mov	r2, sl
 8005322:	4649      	mov	r1, r9
 8005324:	4638      	mov	r0, r7
 8005326:	47c0      	blx	r8
 8005328:	3001      	adds	r0, #1
 800532a:	d103      	bne.n	8005334 <_printf_common+0xac>
 800532c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005334:	3501      	adds	r5, #1
 8005336:	e7c6      	b.n	80052c6 <_printf_common+0x3e>
 8005338:	18e1      	adds	r1, r4, r3
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	2030      	movs	r0, #48	; 0x30
 800533e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005342:	4422      	add	r2, r4
 8005344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800534c:	3302      	adds	r3, #2
 800534e:	e7c7      	b.n	80052e0 <_printf_common+0x58>
 8005350:	2301      	movs	r3, #1
 8005352:	4622      	mov	r2, r4
 8005354:	4649      	mov	r1, r9
 8005356:	4638      	mov	r0, r7
 8005358:	47c0      	blx	r8
 800535a:	3001      	adds	r0, #1
 800535c:	d0e6      	beq.n	800532c <_printf_common+0xa4>
 800535e:	3601      	adds	r6, #1
 8005360:	e7d9      	b.n	8005316 <_printf_common+0x8e>
	...

08005364 <_printf_i>:
 8005364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	7e0f      	ldrb	r7, [r1, #24]
 800536a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800536c:	2f78      	cmp	r7, #120	; 0x78
 800536e:	4691      	mov	r9, r2
 8005370:	4680      	mov	r8, r0
 8005372:	460c      	mov	r4, r1
 8005374:	469a      	mov	sl, r3
 8005376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800537a:	d807      	bhi.n	800538c <_printf_i+0x28>
 800537c:	2f62      	cmp	r7, #98	; 0x62
 800537e:	d80a      	bhi.n	8005396 <_printf_i+0x32>
 8005380:	2f00      	cmp	r7, #0
 8005382:	f000 80d4 	beq.w	800552e <_printf_i+0x1ca>
 8005386:	2f58      	cmp	r7, #88	; 0x58
 8005388:	f000 80c0 	beq.w	800550c <_printf_i+0x1a8>
 800538c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005394:	e03a      	b.n	800540c <_printf_i+0xa8>
 8005396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800539a:	2b15      	cmp	r3, #21
 800539c:	d8f6      	bhi.n	800538c <_printf_i+0x28>
 800539e:	a101      	add	r1, pc, #4	; (adr r1, 80053a4 <_printf_i+0x40>)
 80053a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053a4:	080053fd 	.word	0x080053fd
 80053a8:	08005411 	.word	0x08005411
 80053ac:	0800538d 	.word	0x0800538d
 80053b0:	0800538d 	.word	0x0800538d
 80053b4:	0800538d 	.word	0x0800538d
 80053b8:	0800538d 	.word	0x0800538d
 80053bc:	08005411 	.word	0x08005411
 80053c0:	0800538d 	.word	0x0800538d
 80053c4:	0800538d 	.word	0x0800538d
 80053c8:	0800538d 	.word	0x0800538d
 80053cc:	0800538d 	.word	0x0800538d
 80053d0:	08005515 	.word	0x08005515
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	080054cf 	.word	0x080054cf
 80053dc:	0800538d 	.word	0x0800538d
 80053e0:	0800538d 	.word	0x0800538d
 80053e4:	08005537 	.word	0x08005537
 80053e8:	0800538d 	.word	0x0800538d
 80053ec:	0800543d 	.word	0x0800543d
 80053f0:	0800538d 	.word	0x0800538d
 80053f4:	0800538d 	.word	0x0800538d
 80053f8:	080054d7 	.word	0x080054d7
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	1d1a      	adds	r2, r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	602a      	str	r2, [r5, #0]
 8005404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800540c:	2301      	movs	r3, #1
 800540e:	e09f      	b.n	8005550 <_printf_i+0x1ec>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	682b      	ldr	r3, [r5, #0]
 8005414:	0607      	lsls	r7, r0, #24
 8005416:	f103 0104 	add.w	r1, r3, #4
 800541a:	6029      	str	r1, [r5, #0]
 800541c:	d501      	bpl.n	8005422 <_printf_i+0xbe>
 800541e:	681e      	ldr	r6, [r3, #0]
 8005420:	e003      	b.n	800542a <_printf_i+0xc6>
 8005422:	0646      	lsls	r6, r0, #25
 8005424:	d5fb      	bpl.n	800541e <_printf_i+0xba>
 8005426:	f9b3 6000 	ldrsh.w	r6, [r3]
 800542a:	2e00      	cmp	r6, #0
 800542c:	da03      	bge.n	8005436 <_printf_i+0xd2>
 800542e:	232d      	movs	r3, #45	; 0x2d
 8005430:	4276      	negs	r6, r6
 8005432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005436:	485a      	ldr	r0, [pc, #360]	; (80055a0 <_printf_i+0x23c>)
 8005438:	230a      	movs	r3, #10
 800543a:	e012      	b.n	8005462 <_printf_i+0xfe>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	6820      	ldr	r0, [r4, #0]
 8005440:	1d19      	adds	r1, r3, #4
 8005442:	6029      	str	r1, [r5, #0]
 8005444:	0605      	lsls	r5, r0, #24
 8005446:	d501      	bpl.n	800544c <_printf_i+0xe8>
 8005448:	681e      	ldr	r6, [r3, #0]
 800544a:	e002      	b.n	8005452 <_printf_i+0xee>
 800544c:	0641      	lsls	r1, r0, #25
 800544e:	d5fb      	bpl.n	8005448 <_printf_i+0xe4>
 8005450:	881e      	ldrh	r6, [r3, #0]
 8005452:	4853      	ldr	r0, [pc, #332]	; (80055a0 <_printf_i+0x23c>)
 8005454:	2f6f      	cmp	r7, #111	; 0x6f
 8005456:	bf0c      	ite	eq
 8005458:	2308      	moveq	r3, #8
 800545a:	230a      	movne	r3, #10
 800545c:	2100      	movs	r1, #0
 800545e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005462:	6865      	ldr	r5, [r4, #4]
 8005464:	60a5      	str	r5, [r4, #8]
 8005466:	2d00      	cmp	r5, #0
 8005468:	bfa2      	ittt	ge
 800546a:	6821      	ldrge	r1, [r4, #0]
 800546c:	f021 0104 	bicge.w	r1, r1, #4
 8005470:	6021      	strge	r1, [r4, #0]
 8005472:	b90e      	cbnz	r6, 8005478 <_printf_i+0x114>
 8005474:	2d00      	cmp	r5, #0
 8005476:	d04b      	beq.n	8005510 <_printf_i+0x1ac>
 8005478:	4615      	mov	r5, r2
 800547a:	fbb6 f1f3 	udiv	r1, r6, r3
 800547e:	fb03 6711 	mls	r7, r3, r1, r6
 8005482:	5dc7      	ldrb	r7, [r0, r7]
 8005484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005488:	4637      	mov	r7, r6
 800548a:	42bb      	cmp	r3, r7
 800548c:	460e      	mov	r6, r1
 800548e:	d9f4      	bls.n	800547a <_printf_i+0x116>
 8005490:	2b08      	cmp	r3, #8
 8005492:	d10b      	bne.n	80054ac <_printf_i+0x148>
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	07de      	lsls	r6, r3, #31
 8005498:	d508      	bpl.n	80054ac <_printf_i+0x148>
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	6861      	ldr	r1, [r4, #4]
 800549e:	4299      	cmp	r1, r3
 80054a0:	bfde      	ittt	le
 80054a2:	2330      	movle	r3, #48	; 0x30
 80054a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054ac:	1b52      	subs	r2, r2, r5
 80054ae:	6122      	str	r2, [r4, #16]
 80054b0:	f8cd a000 	str.w	sl, [sp]
 80054b4:	464b      	mov	r3, r9
 80054b6:	aa03      	add	r2, sp, #12
 80054b8:	4621      	mov	r1, r4
 80054ba:	4640      	mov	r0, r8
 80054bc:	f7ff fee4 	bl	8005288 <_printf_common>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d14a      	bne.n	800555a <_printf_i+0x1f6>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054c8:	b004      	add	sp, #16
 80054ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	f043 0320 	orr.w	r3, r3, #32
 80054d4:	6023      	str	r3, [r4, #0]
 80054d6:	4833      	ldr	r0, [pc, #204]	; (80055a4 <_printf_i+0x240>)
 80054d8:	2778      	movs	r7, #120	; 0x78
 80054da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	6829      	ldr	r1, [r5, #0]
 80054e2:	061f      	lsls	r7, r3, #24
 80054e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80054e8:	d402      	bmi.n	80054f0 <_printf_i+0x18c>
 80054ea:	065f      	lsls	r7, r3, #25
 80054ec:	bf48      	it	mi
 80054ee:	b2b6      	uxthmi	r6, r6
 80054f0:	07df      	lsls	r7, r3, #31
 80054f2:	bf48      	it	mi
 80054f4:	f043 0320 	orrmi.w	r3, r3, #32
 80054f8:	6029      	str	r1, [r5, #0]
 80054fa:	bf48      	it	mi
 80054fc:	6023      	strmi	r3, [r4, #0]
 80054fe:	b91e      	cbnz	r6, 8005508 <_printf_i+0x1a4>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	f023 0320 	bic.w	r3, r3, #32
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	2310      	movs	r3, #16
 800550a:	e7a7      	b.n	800545c <_printf_i+0xf8>
 800550c:	4824      	ldr	r0, [pc, #144]	; (80055a0 <_printf_i+0x23c>)
 800550e:	e7e4      	b.n	80054da <_printf_i+0x176>
 8005510:	4615      	mov	r5, r2
 8005512:	e7bd      	b.n	8005490 <_printf_i+0x12c>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	6826      	ldr	r6, [r4, #0]
 8005518:	6961      	ldr	r1, [r4, #20]
 800551a:	1d18      	adds	r0, r3, #4
 800551c:	6028      	str	r0, [r5, #0]
 800551e:	0635      	lsls	r5, r6, #24
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	d501      	bpl.n	8005528 <_printf_i+0x1c4>
 8005524:	6019      	str	r1, [r3, #0]
 8005526:	e002      	b.n	800552e <_printf_i+0x1ca>
 8005528:	0670      	lsls	r0, r6, #25
 800552a:	d5fb      	bpl.n	8005524 <_printf_i+0x1c0>
 800552c:	8019      	strh	r1, [r3, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	6123      	str	r3, [r4, #16]
 8005532:	4615      	mov	r5, r2
 8005534:	e7bc      	b.n	80054b0 <_printf_i+0x14c>
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	602a      	str	r2, [r5, #0]
 800553c:	681d      	ldr	r5, [r3, #0]
 800553e:	6862      	ldr	r2, [r4, #4]
 8005540:	2100      	movs	r1, #0
 8005542:	4628      	mov	r0, r5
 8005544:	f7fa fe44 	bl	80001d0 <memchr>
 8005548:	b108      	cbz	r0, 800554e <_printf_i+0x1ea>
 800554a:	1b40      	subs	r0, r0, r5
 800554c:	6060      	str	r0, [r4, #4]
 800554e:	6863      	ldr	r3, [r4, #4]
 8005550:	6123      	str	r3, [r4, #16]
 8005552:	2300      	movs	r3, #0
 8005554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005558:	e7aa      	b.n	80054b0 <_printf_i+0x14c>
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	462a      	mov	r2, r5
 800555e:	4649      	mov	r1, r9
 8005560:	4640      	mov	r0, r8
 8005562:	47d0      	blx	sl
 8005564:	3001      	adds	r0, #1
 8005566:	d0ad      	beq.n	80054c4 <_printf_i+0x160>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	079b      	lsls	r3, r3, #30
 800556c:	d413      	bmi.n	8005596 <_printf_i+0x232>
 800556e:	68e0      	ldr	r0, [r4, #12]
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	4298      	cmp	r0, r3
 8005574:	bfb8      	it	lt
 8005576:	4618      	movlt	r0, r3
 8005578:	e7a6      	b.n	80054c8 <_printf_i+0x164>
 800557a:	2301      	movs	r3, #1
 800557c:	4632      	mov	r2, r6
 800557e:	4649      	mov	r1, r9
 8005580:	4640      	mov	r0, r8
 8005582:	47d0      	blx	sl
 8005584:	3001      	adds	r0, #1
 8005586:	d09d      	beq.n	80054c4 <_printf_i+0x160>
 8005588:	3501      	adds	r5, #1
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	9903      	ldr	r1, [sp, #12]
 800558e:	1a5b      	subs	r3, r3, r1
 8005590:	42ab      	cmp	r3, r5
 8005592:	dcf2      	bgt.n	800557a <_printf_i+0x216>
 8005594:	e7eb      	b.n	800556e <_printf_i+0x20a>
 8005596:	2500      	movs	r5, #0
 8005598:	f104 0619 	add.w	r6, r4, #25
 800559c:	e7f5      	b.n	800558a <_printf_i+0x226>
 800559e:	bf00      	nop
 80055a0:	08007f5e 	.word	0x08007f5e
 80055a4:	08007f6f 	.word	0x08007f6f

080055a8 <std>:
 80055a8:	2300      	movs	r3, #0
 80055aa:	b510      	push	{r4, lr}
 80055ac:	4604      	mov	r4, r0
 80055ae:	e9c0 3300 	strd	r3, r3, [r0]
 80055b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055b6:	6083      	str	r3, [r0, #8]
 80055b8:	8181      	strh	r1, [r0, #12]
 80055ba:	6643      	str	r3, [r0, #100]	; 0x64
 80055bc:	81c2      	strh	r2, [r0, #14]
 80055be:	6183      	str	r3, [r0, #24]
 80055c0:	4619      	mov	r1, r3
 80055c2:	2208      	movs	r2, #8
 80055c4:	305c      	adds	r0, #92	; 0x5c
 80055c6:	f000 f9f7 	bl	80059b8 <memset>
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <std+0x58>)
 80055cc:	6263      	str	r3, [r4, #36]	; 0x24
 80055ce:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <std+0x5c>)
 80055d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <std+0x60>)
 80055d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <std+0x64>)
 80055d8:	6323      	str	r3, [r4, #48]	; 0x30
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <std+0x68>)
 80055dc:	6224      	str	r4, [r4, #32]
 80055de:	429c      	cmp	r4, r3
 80055e0:	d006      	beq.n	80055f0 <std+0x48>
 80055e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055e6:	4294      	cmp	r4, r2
 80055e8:	d002      	beq.n	80055f0 <std+0x48>
 80055ea:	33d0      	adds	r3, #208	; 0xd0
 80055ec:	429c      	cmp	r4, r3
 80055ee:	d105      	bne.n	80055fc <std+0x54>
 80055f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f8:	f000 bab0 	b.w	8005b5c <__retarget_lock_init_recursive>
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	bf00      	nop
 8005600:	08005809 	.word	0x08005809
 8005604:	0800582b 	.word	0x0800582b
 8005608:	08005863 	.word	0x08005863
 800560c:	08005887 	.word	0x08005887
 8005610:	20004350 	.word	0x20004350

08005614 <stdio_exit_handler>:
 8005614:	4a02      	ldr	r2, [pc, #8]	; (8005620 <stdio_exit_handler+0xc>)
 8005616:	4903      	ldr	r1, [pc, #12]	; (8005624 <stdio_exit_handler+0x10>)
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <stdio_exit_handler+0x14>)
 800561a:	f000 b869 	b.w	80056f0 <_fwalk_sglue>
 800561e:	bf00      	nop
 8005620:	20000010 	.word	0x20000010
 8005624:	08007501 	.word	0x08007501
 8005628:	2000001c 	.word	0x2000001c

0800562c <cleanup_stdio>:
 800562c:	6841      	ldr	r1, [r0, #4]
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <cleanup_stdio+0x34>)
 8005630:	4299      	cmp	r1, r3
 8005632:	b510      	push	{r4, lr}
 8005634:	4604      	mov	r4, r0
 8005636:	d001      	beq.n	800563c <cleanup_stdio+0x10>
 8005638:	f001 ff62 	bl	8007500 <_fflush_r>
 800563c:	68a1      	ldr	r1, [r4, #8]
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <cleanup_stdio+0x38>)
 8005640:	4299      	cmp	r1, r3
 8005642:	d002      	beq.n	800564a <cleanup_stdio+0x1e>
 8005644:	4620      	mov	r0, r4
 8005646:	f001 ff5b 	bl	8007500 <_fflush_r>
 800564a:	68e1      	ldr	r1, [r4, #12]
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <cleanup_stdio+0x3c>)
 800564e:	4299      	cmp	r1, r3
 8005650:	d004      	beq.n	800565c <cleanup_stdio+0x30>
 8005652:	4620      	mov	r0, r4
 8005654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005658:	f001 bf52 	b.w	8007500 <_fflush_r>
 800565c:	bd10      	pop	{r4, pc}
 800565e:	bf00      	nop
 8005660:	20004350 	.word	0x20004350
 8005664:	200043b8 	.word	0x200043b8
 8005668:	20004420 	.word	0x20004420

0800566c <global_stdio_init.part.0>:
 800566c:	b510      	push	{r4, lr}
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <global_stdio_init.part.0+0x30>)
 8005670:	4c0b      	ldr	r4, [pc, #44]	; (80056a0 <global_stdio_init.part.0+0x34>)
 8005672:	4a0c      	ldr	r2, [pc, #48]	; (80056a4 <global_stdio_init.part.0+0x38>)
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	4620      	mov	r0, r4
 8005678:	2200      	movs	r2, #0
 800567a:	2104      	movs	r1, #4
 800567c:	f7ff ff94 	bl	80055a8 <std>
 8005680:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005684:	2201      	movs	r2, #1
 8005686:	2109      	movs	r1, #9
 8005688:	f7ff ff8e 	bl	80055a8 <std>
 800568c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005690:	2202      	movs	r2, #2
 8005692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005696:	2112      	movs	r1, #18
 8005698:	f7ff bf86 	b.w	80055a8 <std>
 800569c:	20004488 	.word	0x20004488
 80056a0:	20004350 	.word	0x20004350
 80056a4:	08005615 	.word	0x08005615

080056a8 <__sfp_lock_acquire>:
 80056a8:	4801      	ldr	r0, [pc, #4]	; (80056b0 <__sfp_lock_acquire+0x8>)
 80056aa:	f000 ba58 	b.w	8005b5e <__retarget_lock_acquire_recursive>
 80056ae:	bf00      	nop
 80056b0:	20004491 	.word	0x20004491

080056b4 <__sfp_lock_release>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__sfp_lock_release+0x8>)
 80056b6:	f000 ba53 	b.w	8005b60 <__retarget_lock_release_recursive>
 80056ba:	bf00      	nop
 80056bc:	20004491 	.word	0x20004491

080056c0 <__sinit>:
 80056c0:	b510      	push	{r4, lr}
 80056c2:	4604      	mov	r4, r0
 80056c4:	f7ff fff0 	bl	80056a8 <__sfp_lock_acquire>
 80056c8:	6a23      	ldr	r3, [r4, #32]
 80056ca:	b11b      	cbz	r3, 80056d4 <__sinit+0x14>
 80056cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d0:	f7ff bff0 	b.w	80056b4 <__sfp_lock_release>
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <__sinit+0x28>)
 80056d6:	6223      	str	r3, [r4, #32]
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <__sinit+0x2c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f5      	bne.n	80056cc <__sinit+0xc>
 80056e0:	f7ff ffc4 	bl	800566c <global_stdio_init.part.0>
 80056e4:	e7f2      	b.n	80056cc <__sinit+0xc>
 80056e6:	bf00      	nop
 80056e8:	0800562d 	.word	0x0800562d
 80056ec:	20004488 	.word	0x20004488

080056f0 <_fwalk_sglue>:
 80056f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f4:	4607      	mov	r7, r0
 80056f6:	4688      	mov	r8, r1
 80056f8:	4614      	mov	r4, r2
 80056fa:	2600      	movs	r6, #0
 80056fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005700:	f1b9 0901 	subs.w	r9, r9, #1
 8005704:	d505      	bpl.n	8005712 <_fwalk_sglue+0x22>
 8005706:	6824      	ldr	r4, [r4, #0]
 8005708:	2c00      	cmp	r4, #0
 800570a:	d1f7      	bne.n	80056fc <_fwalk_sglue+0xc>
 800570c:	4630      	mov	r0, r6
 800570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d907      	bls.n	8005728 <_fwalk_sglue+0x38>
 8005718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800571c:	3301      	adds	r3, #1
 800571e:	d003      	beq.n	8005728 <_fwalk_sglue+0x38>
 8005720:	4629      	mov	r1, r5
 8005722:	4638      	mov	r0, r7
 8005724:	47c0      	blx	r8
 8005726:	4306      	orrs	r6, r0
 8005728:	3568      	adds	r5, #104	; 0x68
 800572a:	e7e9      	b.n	8005700 <_fwalk_sglue+0x10>

0800572c <iprintf>:
 800572c:	b40f      	push	{r0, r1, r2, r3}
 800572e:	b507      	push	{r0, r1, r2, lr}
 8005730:	4906      	ldr	r1, [pc, #24]	; (800574c <iprintf+0x20>)
 8005732:	ab04      	add	r3, sp, #16
 8005734:	6808      	ldr	r0, [r1, #0]
 8005736:	f853 2b04 	ldr.w	r2, [r3], #4
 800573a:	6881      	ldr	r1, [r0, #8]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	f001 fd3f 	bl	80071c0 <_vfiprintf_r>
 8005742:	b003      	add	sp, #12
 8005744:	f85d eb04 	ldr.w	lr, [sp], #4
 8005748:	b004      	add	sp, #16
 800574a:	4770      	bx	lr
 800574c:	20000068 	.word	0x20000068

08005750 <_puts_r>:
 8005750:	6a03      	ldr	r3, [r0, #32]
 8005752:	b570      	push	{r4, r5, r6, lr}
 8005754:	6884      	ldr	r4, [r0, #8]
 8005756:	4605      	mov	r5, r0
 8005758:	460e      	mov	r6, r1
 800575a:	b90b      	cbnz	r3, 8005760 <_puts_r+0x10>
 800575c:	f7ff ffb0 	bl	80056c0 <__sinit>
 8005760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005762:	07db      	lsls	r3, r3, #31
 8005764:	d405      	bmi.n	8005772 <_puts_r+0x22>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	0598      	lsls	r0, r3, #22
 800576a:	d402      	bmi.n	8005772 <_puts_r+0x22>
 800576c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576e:	f000 f9f6 	bl	8005b5e <__retarget_lock_acquire_recursive>
 8005772:	89a3      	ldrh	r3, [r4, #12]
 8005774:	0719      	lsls	r1, r3, #28
 8005776:	d513      	bpl.n	80057a0 <_puts_r+0x50>
 8005778:	6923      	ldr	r3, [r4, #16]
 800577a:	b18b      	cbz	r3, 80057a0 <_puts_r+0x50>
 800577c:	3e01      	subs	r6, #1
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005784:	3b01      	subs	r3, #1
 8005786:	60a3      	str	r3, [r4, #8]
 8005788:	b9e9      	cbnz	r1, 80057c6 <_puts_r+0x76>
 800578a:	2b00      	cmp	r3, #0
 800578c:	da2e      	bge.n	80057ec <_puts_r+0x9c>
 800578e:	4622      	mov	r2, r4
 8005790:	210a      	movs	r1, #10
 8005792:	4628      	mov	r0, r5
 8005794:	f000 f87b 	bl	800588e <__swbuf_r>
 8005798:	3001      	adds	r0, #1
 800579a:	d007      	beq.n	80057ac <_puts_r+0x5c>
 800579c:	250a      	movs	r5, #10
 800579e:	e007      	b.n	80057b0 <_puts_r+0x60>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f8b0 	bl	8005908 <__swsetup_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d0e7      	beq.n	800577c <_puts_r+0x2c>
 80057ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80057b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057b2:	07da      	lsls	r2, r3, #31
 80057b4:	d405      	bmi.n	80057c2 <_puts_r+0x72>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	059b      	lsls	r3, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_puts_r+0x72>
 80057bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057be:	f000 f9cf 	bl	8005b60 <__retarget_lock_release_recursive>
 80057c2:	4628      	mov	r0, r5
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da04      	bge.n	80057d4 <_puts_r+0x84>
 80057ca:	69a2      	ldr	r2, [r4, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	dc06      	bgt.n	80057de <_puts_r+0x8e>
 80057d0:	290a      	cmp	r1, #10
 80057d2:	d004      	beq.n	80057de <_puts_r+0x8e>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	7019      	strb	r1, [r3, #0]
 80057dc:	e7cf      	b.n	800577e <_puts_r+0x2e>
 80057de:	4622      	mov	r2, r4
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 f854 	bl	800588e <__swbuf_r>
 80057e6:	3001      	adds	r0, #1
 80057e8:	d1c9      	bne.n	800577e <_puts_r+0x2e>
 80057ea:	e7df      	b.n	80057ac <_puts_r+0x5c>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	250a      	movs	r5, #10
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	6022      	str	r2, [r4, #0]
 80057f4:	701d      	strb	r5, [r3, #0]
 80057f6:	e7db      	b.n	80057b0 <_puts_r+0x60>

080057f8 <puts>:
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <puts+0xc>)
 80057fa:	4601      	mov	r1, r0
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f7ff bfa7 	b.w	8005750 <_puts_r>
 8005802:	bf00      	nop
 8005804:	20000068 	.word	0x20000068

08005808 <__sread>:
 8005808:	b510      	push	{r4, lr}
 800580a:	460c      	mov	r4, r1
 800580c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005810:	f000 f956 	bl	8005ac0 <_read_r>
 8005814:	2800      	cmp	r0, #0
 8005816:	bfab      	itete	ge
 8005818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800581a:	89a3      	ldrhlt	r3, [r4, #12]
 800581c:	181b      	addge	r3, r3, r0
 800581e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005822:	bfac      	ite	ge
 8005824:	6563      	strge	r3, [r4, #84]	; 0x54
 8005826:	81a3      	strhlt	r3, [r4, #12]
 8005828:	bd10      	pop	{r4, pc}

0800582a <__swrite>:
 800582a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582e:	461f      	mov	r7, r3
 8005830:	898b      	ldrh	r3, [r1, #12]
 8005832:	05db      	lsls	r3, r3, #23
 8005834:	4605      	mov	r5, r0
 8005836:	460c      	mov	r4, r1
 8005838:	4616      	mov	r6, r2
 800583a:	d505      	bpl.n	8005848 <__swrite+0x1e>
 800583c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005840:	2302      	movs	r3, #2
 8005842:	2200      	movs	r2, #0
 8005844:	f000 f92a 	bl	8005a9c <_lseek_r>
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800584e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	4632      	mov	r2, r6
 8005856:	463b      	mov	r3, r7
 8005858:	4628      	mov	r0, r5
 800585a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800585e:	f000 b941 	b.w	8005ae4 <_write_r>

08005862 <__sseek>:
 8005862:	b510      	push	{r4, lr}
 8005864:	460c      	mov	r4, r1
 8005866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586a:	f000 f917 	bl	8005a9c <_lseek_r>
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	bf15      	itete	ne
 8005874:	6560      	strne	r0, [r4, #84]	; 0x54
 8005876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800587a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800587e:	81a3      	strheq	r3, [r4, #12]
 8005880:	bf18      	it	ne
 8005882:	81a3      	strhne	r3, [r4, #12]
 8005884:	bd10      	pop	{r4, pc}

08005886 <__sclose>:
 8005886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588a:	f000 b8a1 	b.w	80059d0 <_close_r>

0800588e <__swbuf_r>:
 800588e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005890:	460e      	mov	r6, r1
 8005892:	4614      	mov	r4, r2
 8005894:	4605      	mov	r5, r0
 8005896:	b118      	cbz	r0, 80058a0 <__swbuf_r+0x12>
 8005898:	6a03      	ldr	r3, [r0, #32]
 800589a:	b90b      	cbnz	r3, 80058a0 <__swbuf_r+0x12>
 800589c:	f7ff ff10 	bl	80056c0 <__sinit>
 80058a0:	69a3      	ldr	r3, [r4, #24]
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	071a      	lsls	r2, r3, #28
 80058a8:	d525      	bpl.n	80058f6 <__swbuf_r+0x68>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	b31b      	cbz	r3, 80058f6 <__swbuf_r+0x68>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	6922      	ldr	r2, [r4, #16]
 80058b2:	1a98      	subs	r0, r3, r2
 80058b4:	6963      	ldr	r3, [r4, #20]
 80058b6:	b2f6      	uxtb	r6, r6
 80058b8:	4283      	cmp	r3, r0
 80058ba:	4637      	mov	r7, r6
 80058bc:	dc04      	bgt.n	80058c8 <__swbuf_r+0x3a>
 80058be:	4621      	mov	r1, r4
 80058c0:	4628      	mov	r0, r5
 80058c2:	f001 fe1d 	bl	8007500 <_fflush_r>
 80058c6:	b9e0      	cbnz	r0, 8005902 <__swbuf_r+0x74>
 80058c8:	68a3      	ldr	r3, [r4, #8]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	6022      	str	r2, [r4, #0]
 80058d4:	701e      	strb	r6, [r3, #0]
 80058d6:	6962      	ldr	r2, [r4, #20]
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	429a      	cmp	r2, r3
 80058dc:	d004      	beq.n	80058e8 <__swbuf_r+0x5a>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	07db      	lsls	r3, r3, #31
 80058e2:	d506      	bpl.n	80058f2 <__swbuf_r+0x64>
 80058e4:	2e0a      	cmp	r6, #10
 80058e6:	d104      	bne.n	80058f2 <__swbuf_r+0x64>
 80058e8:	4621      	mov	r1, r4
 80058ea:	4628      	mov	r0, r5
 80058ec:	f001 fe08 	bl	8007500 <_fflush_r>
 80058f0:	b938      	cbnz	r0, 8005902 <__swbuf_r+0x74>
 80058f2:	4638      	mov	r0, r7
 80058f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f6:	4621      	mov	r1, r4
 80058f8:	4628      	mov	r0, r5
 80058fa:	f000 f805 	bl	8005908 <__swsetup_r>
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0d5      	beq.n	80058ae <__swbuf_r+0x20>
 8005902:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005906:	e7f4      	b.n	80058f2 <__swbuf_r+0x64>

08005908 <__swsetup_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <__swsetup_r+0xac>)
 800590c:	4605      	mov	r5, r0
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	460c      	mov	r4, r1
 8005912:	b118      	cbz	r0, 800591c <__swsetup_r+0x14>
 8005914:	6a03      	ldr	r3, [r0, #32]
 8005916:	b90b      	cbnz	r3, 800591c <__swsetup_r+0x14>
 8005918:	f7ff fed2 	bl	80056c0 <__sinit>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005922:	0718      	lsls	r0, r3, #28
 8005924:	d422      	bmi.n	800596c <__swsetup_r+0x64>
 8005926:	06d9      	lsls	r1, r3, #27
 8005928:	d407      	bmi.n	800593a <__swsetup_r+0x32>
 800592a:	2309      	movs	r3, #9
 800592c:	602b      	str	r3, [r5, #0]
 800592e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005938:	e034      	b.n	80059a4 <__swsetup_r+0x9c>
 800593a:	0758      	lsls	r0, r3, #29
 800593c:	d512      	bpl.n	8005964 <__swsetup_r+0x5c>
 800593e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005940:	b141      	cbz	r1, 8005954 <__swsetup_r+0x4c>
 8005942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005946:	4299      	cmp	r1, r3
 8005948:	d002      	beq.n	8005950 <__swsetup_r+0x48>
 800594a:	4628      	mov	r0, r5
 800594c:	f000 ff92 	bl	8006874 <_free_r>
 8005950:	2300      	movs	r3, #0
 8005952:	6363      	str	r3, [r4, #52]	; 0x34
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	2300      	movs	r3, #0
 800595e:	6063      	str	r3, [r4, #4]
 8005960:	6923      	ldr	r3, [r4, #16]
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f043 0308 	orr.w	r3, r3, #8
 800596a:	81a3      	strh	r3, [r4, #12]
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	b94b      	cbnz	r3, 8005984 <__swsetup_r+0x7c>
 8005970:	89a3      	ldrh	r3, [r4, #12]
 8005972:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597a:	d003      	beq.n	8005984 <__swsetup_r+0x7c>
 800597c:	4621      	mov	r1, r4
 800597e:	4628      	mov	r0, r5
 8005980:	f001 fe0c 	bl	800759c <__smakebuf_r>
 8005984:	89a0      	ldrh	r0, [r4, #12]
 8005986:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800598a:	f010 0301 	ands.w	r3, r0, #1
 800598e:	d00a      	beq.n	80059a6 <__swsetup_r+0x9e>
 8005990:	2300      	movs	r3, #0
 8005992:	60a3      	str	r3, [r4, #8]
 8005994:	6963      	ldr	r3, [r4, #20]
 8005996:	425b      	negs	r3, r3
 8005998:	61a3      	str	r3, [r4, #24]
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	b943      	cbnz	r3, 80059b0 <__swsetup_r+0xa8>
 800599e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059a2:	d1c4      	bne.n	800592e <__swsetup_r+0x26>
 80059a4:	bd38      	pop	{r3, r4, r5, pc}
 80059a6:	0781      	lsls	r1, r0, #30
 80059a8:	bf58      	it	pl
 80059aa:	6963      	ldrpl	r3, [r4, #20]
 80059ac:	60a3      	str	r3, [r4, #8]
 80059ae:	e7f4      	b.n	800599a <__swsetup_r+0x92>
 80059b0:	2000      	movs	r0, #0
 80059b2:	e7f7      	b.n	80059a4 <__swsetup_r+0x9c>
 80059b4:	20000068 	.word	0x20000068

080059b8 <memset>:
 80059b8:	4402      	add	r2, r0
 80059ba:	4603      	mov	r3, r0
 80059bc:	4293      	cmp	r3, r2
 80059be:	d100      	bne.n	80059c2 <memset+0xa>
 80059c0:	4770      	bx	lr
 80059c2:	f803 1b01 	strb.w	r1, [r3], #1
 80059c6:	e7f9      	b.n	80059bc <memset+0x4>

080059c8 <_localeconv_r>:
 80059c8:	4800      	ldr	r0, [pc, #0]	; (80059cc <_localeconv_r+0x4>)
 80059ca:	4770      	bx	lr
 80059cc:	2000015c 	.word	0x2000015c

080059d0 <_close_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	; (80059ec <_close_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fb fdd9 	bl	8001592 <_close>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_close_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_close_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	2000448c 	.word	0x2000448c

080059f0 <_reclaim_reent>:
 80059f0:	4b29      	ldr	r3, [pc, #164]	; (8005a98 <_reclaim_reent+0xa8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4283      	cmp	r3, r0
 80059f6:	b570      	push	{r4, r5, r6, lr}
 80059f8:	4604      	mov	r4, r0
 80059fa:	d04b      	beq.n	8005a94 <_reclaim_reent+0xa4>
 80059fc:	69c3      	ldr	r3, [r0, #28]
 80059fe:	b143      	cbz	r3, 8005a12 <_reclaim_reent+0x22>
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d144      	bne.n	8005a90 <_reclaim_reent+0xa0>
 8005a06:	69e3      	ldr	r3, [r4, #28]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	b111      	cbz	r1, 8005a12 <_reclaim_reent+0x22>
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 ff31 	bl	8006874 <_free_r>
 8005a12:	6961      	ldr	r1, [r4, #20]
 8005a14:	b111      	cbz	r1, 8005a1c <_reclaim_reent+0x2c>
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 ff2c 	bl	8006874 <_free_r>
 8005a1c:	69e1      	ldr	r1, [r4, #28]
 8005a1e:	b111      	cbz	r1, 8005a26 <_reclaim_reent+0x36>
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 ff27 	bl	8006874 <_free_r>
 8005a26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005a28:	b111      	cbz	r1, 8005a30 <_reclaim_reent+0x40>
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 ff22 	bl	8006874 <_free_r>
 8005a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a32:	b111      	cbz	r1, 8005a3a <_reclaim_reent+0x4a>
 8005a34:	4620      	mov	r0, r4
 8005a36:	f000 ff1d 	bl	8006874 <_free_r>
 8005a3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005a3c:	b111      	cbz	r1, 8005a44 <_reclaim_reent+0x54>
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 ff18 	bl	8006874 <_free_r>
 8005a44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a46:	b111      	cbz	r1, 8005a4e <_reclaim_reent+0x5e>
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f000 ff13 	bl	8006874 <_free_r>
 8005a4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005a50:	b111      	cbz	r1, 8005a58 <_reclaim_reent+0x68>
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 ff0e 	bl	8006874 <_free_r>
 8005a58:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005a5a:	b111      	cbz	r1, 8005a62 <_reclaim_reent+0x72>
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 ff09 	bl	8006874 <_free_r>
 8005a62:	6a23      	ldr	r3, [r4, #32]
 8005a64:	b1b3      	cbz	r3, 8005a94 <_reclaim_reent+0xa4>
 8005a66:	4620      	mov	r0, r4
 8005a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a6c:	4718      	bx	r3
 8005a6e:	5949      	ldr	r1, [r1, r5]
 8005a70:	b941      	cbnz	r1, 8005a84 <_reclaim_reent+0x94>
 8005a72:	3504      	adds	r5, #4
 8005a74:	69e3      	ldr	r3, [r4, #28]
 8005a76:	2d80      	cmp	r5, #128	; 0x80
 8005a78:	68d9      	ldr	r1, [r3, #12]
 8005a7a:	d1f8      	bne.n	8005a6e <_reclaim_reent+0x7e>
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fef9 	bl	8006874 <_free_r>
 8005a82:	e7c0      	b.n	8005a06 <_reclaim_reent+0x16>
 8005a84:	680e      	ldr	r6, [r1, #0]
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fef4 	bl	8006874 <_free_r>
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	e7ef      	b.n	8005a70 <_reclaim_reent+0x80>
 8005a90:	2500      	movs	r5, #0
 8005a92:	e7ef      	b.n	8005a74 <_reclaim_reent+0x84>
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
 8005a96:	bf00      	nop
 8005a98:	20000068 	.word	0x20000068

08005a9c <_lseek_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d07      	ldr	r5, [pc, #28]	; (8005abc <_lseek_r+0x20>)
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	4608      	mov	r0, r1
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	602a      	str	r2, [r5, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f7fb fd98 	bl	80015e0 <_lseek>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d102      	bne.n	8005aba <_lseek_r+0x1e>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	b103      	cbz	r3, 8005aba <_lseek_r+0x1e>
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	2000448c 	.word	0x2000448c

08005ac0 <_read_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d07      	ldr	r5, [pc, #28]	; (8005ae0 <_read_r+0x20>)
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4611      	mov	r1, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fb fd42 	bl	8001558 <_read>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_read_r+0x1e>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_read_r+0x1e>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	2000448c 	.word	0x2000448c

08005ae4 <_write_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	; (8005b04 <_write_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fb f9d6 	bl	8000ea4 <_write>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_write_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_write_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	2000448c 	.word	0x2000448c

08005b08 <__errno>:
 8005b08:	4b01      	ldr	r3, [pc, #4]	; (8005b10 <__errno+0x8>)
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000068 	.word	0x20000068

08005b14 <__libc_init_array>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	4d0d      	ldr	r5, [pc, #52]	; (8005b4c <__libc_init_array+0x38>)
 8005b18:	4c0d      	ldr	r4, [pc, #52]	; (8005b50 <__libc_init_array+0x3c>)
 8005b1a:	1b64      	subs	r4, r4, r5
 8005b1c:	10a4      	asrs	r4, r4, #2
 8005b1e:	2600      	movs	r6, #0
 8005b20:	42a6      	cmp	r6, r4
 8005b22:	d109      	bne.n	8005b38 <__libc_init_array+0x24>
 8005b24:	4d0b      	ldr	r5, [pc, #44]	; (8005b54 <__libc_init_array+0x40>)
 8005b26:	4c0c      	ldr	r4, [pc, #48]	; (8005b58 <__libc_init_array+0x44>)
 8005b28:	f001 fe58 	bl	80077dc <_init>
 8005b2c:	1b64      	subs	r4, r4, r5
 8005b2e:	10a4      	asrs	r4, r4, #2
 8005b30:	2600      	movs	r6, #0
 8005b32:	42a6      	cmp	r6, r4
 8005b34:	d105      	bne.n	8005b42 <__libc_init_array+0x2e>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3c:	4798      	blx	r3
 8005b3e:	3601      	adds	r6, #1
 8005b40:	e7ee      	b.n	8005b20 <__libc_init_array+0xc>
 8005b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b46:	4798      	blx	r3
 8005b48:	3601      	adds	r6, #1
 8005b4a:	e7f2      	b.n	8005b32 <__libc_init_array+0x1e>
 8005b4c:	080082c4 	.word	0x080082c4
 8005b50:	080082c4 	.word	0x080082c4
 8005b54:	080082c4 	.word	0x080082c4
 8005b58:	080082c8 	.word	0x080082c8

08005b5c <__retarget_lock_init_recursive>:
 8005b5c:	4770      	bx	lr

08005b5e <__retarget_lock_acquire_recursive>:
 8005b5e:	4770      	bx	lr

08005b60 <__retarget_lock_release_recursive>:
 8005b60:	4770      	bx	lr

08005b62 <memcpy>:
 8005b62:	440a      	add	r2, r1
 8005b64:	4291      	cmp	r1, r2
 8005b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005b6a:	d100      	bne.n	8005b6e <memcpy+0xc>
 8005b6c:	4770      	bx	lr
 8005b6e:	b510      	push	{r4, lr}
 8005b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b78:	4291      	cmp	r1, r2
 8005b7a:	d1f9      	bne.n	8005b70 <memcpy+0xe>
 8005b7c:	bd10      	pop	{r4, pc}

08005b7e <quorem>:
 8005b7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b82:	6903      	ldr	r3, [r0, #16]
 8005b84:	690c      	ldr	r4, [r1, #16]
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	4607      	mov	r7, r0
 8005b8a:	db7e      	blt.n	8005c8a <quorem+0x10c>
 8005b8c:	3c01      	subs	r4, #1
 8005b8e:	f101 0814 	add.w	r8, r1, #20
 8005b92:	f100 0514 	add.w	r5, r0, #20
 8005b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005bac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005bb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005bb4:	d331      	bcc.n	8005c1a <quorem+0x9c>
 8005bb6:	f04f 0e00 	mov.w	lr, #0
 8005bba:	4640      	mov	r0, r8
 8005bbc:	46ac      	mov	ip, r5
 8005bbe:	46f2      	mov	sl, lr
 8005bc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005bc4:	b293      	uxth	r3, r2
 8005bc6:	fb06 e303 	mla	r3, r6, r3, lr
 8005bca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bce:	0c1a      	lsrs	r2, r3, #16
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005bd6:	f8dc a000 	ldr.w	sl, [ip]
 8005bda:	fa13 f38a 	uxtah	r3, r3, sl
 8005bde:	fb06 220e 	mla	r2, r6, lr, r2
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	9b00      	ldr	r3, [sp, #0]
 8005be6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005bea:	b292      	uxth	r2, r2
 8005bec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bf4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bf8:	4581      	cmp	r9, r0
 8005bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bfe:	f84c 3b04 	str.w	r3, [ip], #4
 8005c02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c06:	d2db      	bcs.n	8005bc0 <quorem+0x42>
 8005c08:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c0c:	b92b      	cbnz	r3, 8005c1a <quorem+0x9c>
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	3b04      	subs	r3, #4
 8005c12:	429d      	cmp	r5, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	d32c      	bcc.n	8005c72 <quorem+0xf4>
 8005c18:	613c      	str	r4, [r7, #16]
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f001 f9a6 	bl	8006f6c <__mcmp>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	db22      	blt.n	8005c6a <quorem+0xec>
 8005c24:	3601      	adds	r6, #1
 8005c26:	4629      	mov	r1, r5
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c2e:	f8d1 c000 	ldr.w	ip, [r1]
 8005c32:	b293      	uxth	r3, r2
 8005c34:	1ac3      	subs	r3, r0, r3
 8005c36:	0c12      	lsrs	r2, r2, #16
 8005c38:	fa13 f38c 	uxtah	r3, r3, ip
 8005c3c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c4a:	45c1      	cmp	r9, r8
 8005c4c:	f841 3b04 	str.w	r3, [r1], #4
 8005c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005c54:	d2e9      	bcs.n	8005c2a <quorem+0xac>
 8005c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c5e:	b922      	cbnz	r2, 8005c6a <quorem+0xec>
 8005c60:	3b04      	subs	r3, #4
 8005c62:	429d      	cmp	r5, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	d30a      	bcc.n	8005c7e <quorem+0x100>
 8005c68:	613c      	str	r4, [r7, #16]
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	b003      	add	sp, #12
 8005c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	3b04      	subs	r3, #4
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	d1ce      	bne.n	8005c18 <quorem+0x9a>
 8005c7a:	3c01      	subs	r4, #1
 8005c7c:	e7c9      	b.n	8005c12 <quorem+0x94>
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	3b04      	subs	r3, #4
 8005c82:	2a00      	cmp	r2, #0
 8005c84:	d1f0      	bne.n	8005c68 <quorem+0xea>
 8005c86:	3c01      	subs	r4, #1
 8005c88:	e7eb      	b.n	8005c62 <quorem+0xe4>
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	e7ee      	b.n	8005c6c <quorem+0xee>
	...

08005c90 <_dtoa_r>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	ed2d 8b04 	vpush	{d8-d9}
 8005c98:	69c5      	ldr	r5, [r0, #28]
 8005c9a:	b093      	sub	sp, #76	; 0x4c
 8005c9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ca0:	ec57 6b10 	vmov	r6, r7, d0
 8005ca4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ca8:	9107      	str	r1, [sp, #28]
 8005caa:	4604      	mov	r4, r0
 8005cac:	920a      	str	r2, [sp, #40]	; 0x28
 8005cae:	930d      	str	r3, [sp, #52]	; 0x34
 8005cb0:	b975      	cbnz	r5, 8005cd0 <_dtoa_r+0x40>
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	f000 fe2a 	bl	800690c <malloc>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	61e0      	str	r0, [r4, #28]
 8005cbc:	b920      	cbnz	r0, 8005cc8 <_dtoa_r+0x38>
 8005cbe:	4bae      	ldr	r3, [pc, #696]	; (8005f78 <_dtoa_r+0x2e8>)
 8005cc0:	21ef      	movs	r1, #239	; 0xef
 8005cc2:	48ae      	ldr	r0, [pc, #696]	; (8005f7c <_dtoa_r+0x2ec>)
 8005cc4:	f001 fcd8 	bl	8007678 <__assert_func>
 8005cc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ccc:	6005      	str	r5, [r0, #0]
 8005cce:	60c5      	str	r5, [r0, #12]
 8005cd0:	69e3      	ldr	r3, [r4, #28]
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	b151      	cbz	r1, 8005cec <_dtoa_r+0x5c>
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	604a      	str	r2, [r1, #4]
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4093      	lsls	r3, r2
 8005cde:	608b      	str	r3, [r1, #8]
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f000 ff07 	bl	8006af4 <_Bfree>
 8005ce6:	69e3      	ldr	r3, [r4, #28]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	1e3b      	subs	r3, r7, #0
 8005cee:	bfbb      	ittet	lt
 8005cf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	9303      	strlt	r3, [sp, #12]
 8005cf6:	2300      	movge	r3, #0
 8005cf8:	2201      	movlt	r2, #1
 8005cfa:	bfac      	ite	ge
 8005cfc:	f8c8 3000 	strge.w	r3, [r8]
 8005d00:	f8c8 2000 	strlt.w	r2, [r8]
 8005d04:	4b9e      	ldr	r3, [pc, #632]	; (8005f80 <_dtoa_r+0x2f0>)
 8005d06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d0a:	ea33 0308 	bics.w	r3, r3, r8
 8005d0e:	d11b      	bne.n	8005d48 <_dtoa_r+0xb8>
 8005d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d12:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005d1c:	4333      	orrs	r3, r6
 8005d1e:	f000 8593 	beq.w	8006848 <_dtoa_r+0xbb8>
 8005d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d24:	b963      	cbnz	r3, 8005d40 <_dtoa_r+0xb0>
 8005d26:	4b97      	ldr	r3, [pc, #604]	; (8005f84 <_dtoa_r+0x2f4>)
 8005d28:	e027      	b.n	8005d7a <_dtoa_r+0xea>
 8005d2a:	4b97      	ldr	r3, [pc, #604]	; (8005f88 <_dtoa_r+0x2f8>)
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	9800      	ldr	r0, [sp, #0]
 8005d36:	b013      	add	sp, #76	; 0x4c
 8005d38:	ecbd 8b04 	vpop	{d8-d9}
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d40:	4b90      	ldr	r3, [pc, #576]	; (8005f84 <_dtoa_r+0x2f4>)
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	3303      	adds	r3, #3
 8005d46:	e7f3      	b.n	8005d30 <_dtoa_r+0xa0>
 8005d48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	ec51 0b17 	vmov	r0, r1, d7
 8005d52:	eeb0 8a47 	vmov.f32	s16, s14
 8005d56:	eef0 8a67 	vmov.f32	s17, s15
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f7fa feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d60:	4681      	mov	r9, r0
 8005d62:	b160      	cbz	r0, 8005d7e <_dtoa_r+0xee>
 8005d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d66:	2301      	movs	r3, #1
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8568 	beq.w	8006842 <_dtoa_r+0xbb2>
 8005d72:	4b86      	ldr	r3, [pc, #536]	; (8005f8c <_dtoa_r+0x2fc>)
 8005d74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	e7da      	b.n	8005d34 <_dtoa_r+0xa4>
 8005d7e:	aa10      	add	r2, sp, #64	; 0x40
 8005d80:	a911      	add	r1, sp, #68	; 0x44
 8005d82:	4620      	mov	r0, r4
 8005d84:	eeb0 0a48 	vmov.f32	s0, s16
 8005d88:	eef0 0a68 	vmov.f32	s1, s17
 8005d8c:	f001 f994 	bl	80070b8 <__d2b>
 8005d90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005d94:	4682      	mov	sl, r0
 8005d96:	2d00      	cmp	r5, #0
 8005d98:	d07f      	beq.n	8005e9a <_dtoa_r+0x20a>
 8005d9a:	ee18 3a90 	vmov	r3, s17
 8005d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005da6:	ec51 0b18 	vmov	r0, r1, d8
 8005daa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005db2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005db6:	4619      	mov	r1, r3
 8005db8:	2200      	movs	r2, #0
 8005dba:	4b75      	ldr	r3, [pc, #468]	; (8005f90 <_dtoa_r+0x300>)
 8005dbc:	f7fa fa64 	bl	8000288 <__aeabi_dsub>
 8005dc0:	a367      	add	r3, pc, #412	; (adr r3, 8005f60 <_dtoa_r+0x2d0>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f7fa fc17 	bl	80005f8 <__aeabi_dmul>
 8005dca:	a367      	add	r3, pc, #412	; (adr r3, 8005f68 <_dtoa_r+0x2d8>)
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f7fa fa5c 	bl	800028c <__adddf3>
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	460f      	mov	r7, r1
 8005dda:	f7fa fba3 	bl	8000524 <__aeabi_i2d>
 8005dde:	a364      	add	r3, pc, #400	; (adr r3, 8005f70 <_dtoa_r+0x2e0>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fc08 	bl	80005f8 <__aeabi_dmul>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4630      	mov	r0, r6
 8005dee:	4639      	mov	r1, r7
 8005df0:	f7fa fa4c 	bl	800028c <__adddf3>
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	f7fa feae 	bl	8000b58 <__aeabi_d2iz>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	4683      	mov	fp, r0
 8005e00:	2300      	movs	r3, #0
 8005e02:	4630      	mov	r0, r6
 8005e04:	4639      	mov	r1, r7
 8005e06:	f7fa fe69 	bl	8000adc <__aeabi_dcmplt>
 8005e0a:	b148      	cbz	r0, 8005e20 <_dtoa_r+0x190>
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f7fa fb89 	bl	8000524 <__aeabi_i2d>
 8005e12:	4632      	mov	r2, r6
 8005e14:	463b      	mov	r3, r7
 8005e16:	f7fa fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e1a:	b908      	cbnz	r0, 8005e20 <_dtoa_r+0x190>
 8005e1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005e20:	f1bb 0f16 	cmp.w	fp, #22
 8005e24:	d857      	bhi.n	8005ed6 <_dtoa_r+0x246>
 8005e26:	4b5b      	ldr	r3, [pc, #364]	; (8005f94 <_dtoa_r+0x304>)
 8005e28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	ec51 0b18 	vmov	r0, r1, d8
 8005e34:	f7fa fe52 	bl	8000adc <__aeabi_dcmplt>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	d04e      	beq.n	8005eda <_dtoa_r+0x24a>
 8005e3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005e40:	2300      	movs	r3, #0
 8005e42:	930c      	str	r3, [sp, #48]	; 0x30
 8005e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e46:	1b5b      	subs	r3, r3, r5
 8005e48:	1e5a      	subs	r2, r3, #1
 8005e4a:	bf45      	ittet	mi
 8005e4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e50:	9305      	strmi	r3, [sp, #20]
 8005e52:	2300      	movpl	r3, #0
 8005e54:	2300      	movmi	r3, #0
 8005e56:	9206      	str	r2, [sp, #24]
 8005e58:	bf54      	ite	pl
 8005e5a:	9305      	strpl	r3, [sp, #20]
 8005e5c:	9306      	strmi	r3, [sp, #24]
 8005e5e:	f1bb 0f00 	cmp.w	fp, #0
 8005e62:	db3c      	blt.n	8005ede <_dtoa_r+0x24e>
 8005e64:	9b06      	ldr	r3, [sp, #24]
 8005e66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005e6a:	445b      	add	r3, fp
 8005e6c:	9306      	str	r3, [sp, #24]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9308      	str	r3, [sp, #32]
 8005e72:	9b07      	ldr	r3, [sp, #28]
 8005e74:	2b09      	cmp	r3, #9
 8005e76:	d868      	bhi.n	8005f4a <_dtoa_r+0x2ba>
 8005e78:	2b05      	cmp	r3, #5
 8005e7a:	bfc4      	itt	gt
 8005e7c:	3b04      	subgt	r3, #4
 8005e7e:	9307      	strgt	r3, [sp, #28]
 8005e80:	9b07      	ldr	r3, [sp, #28]
 8005e82:	f1a3 0302 	sub.w	r3, r3, #2
 8005e86:	bfcc      	ite	gt
 8005e88:	2500      	movgt	r5, #0
 8005e8a:	2501      	movle	r5, #1
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	f200 8085 	bhi.w	8005f9c <_dtoa_r+0x30c>
 8005e92:	e8df f003 	tbb	[pc, r3]
 8005e96:	3b2e      	.short	0x3b2e
 8005e98:	5839      	.short	0x5839
 8005e9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e9e:	441d      	add	r5, r3
 8005ea0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	bfc1      	itttt	gt
 8005ea8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005eac:	fa08 f803 	lslgt.w	r8, r8, r3
 8005eb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005eb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005eb8:	bfd6      	itet	le
 8005eba:	f1c3 0320 	rsble	r3, r3, #32
 8005ebe:	ea48 0003 	orrgt.w	r0, r8, r3
 8005ec2:	fa06 f003 	lslle.w	r0, r6, r3
 8005ec6:	f7fa fb1d 	bl	8000504 <__aeabi_ui2d>
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ed0:	3d01      	subs	r5, #1
 8005ed2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ed4:	e76f      	b.n	8005db6 <_dtoa_r+0x126>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e7b3      	b.n	8005e42 <_dtoa_r+0x1b2>
 8005eda:	900c      	str	r0, [sp, #48]	; 0x30
 8005edc:	e7b2      	b.n	8005e44 <_dtoa_r+0x1b4>
 8005ede:	9b05      	ldr	r3, [sp, #20]
 8005ee0:	eba3 030b 	sub.w	r3, r3, fp
 8005ee4:	9305      	str	r3, [sp, #20]
 8005ee6:	f1cb 0300 	rsb	r3, fp, #0
 8005eea:	9308      	str	r3, [sp, #32]
 8005eec:	2300      	movs	r3, #0
 8005eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ef0:	e7bf      	b.n	8005e72 <_dtoa_r+0x1e2>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dc52      	bgt.n	8005fa2 <_dtoa_r+0x312>
 8005efc:	2301      	movs	r3, #1
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	9304      	str	r3, [sp, #16]
 8005f02:	461a      	mov	r2, r3
 8005f04:	920a      	str	r2, [sp, #40]	; 0x28
 8005f06:	e00b      	b.n	8005f20 <_dtoa_r+0x290>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e7f3      	b.n	8005ef4 <_dtoa_r+0x264>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f12:	445b      	add	r3, fp
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	bfb8      	it	lt
 8005f1e:	2301      	movlt	r3, #1
 8005f20:	69e0      	ldr	r0, [r4, #28]
 8005f22:	2100      	movs	r1, #0
 8005f24:	2204      	movs	r2, #4
 8005f26:	f102 0614 	add.w	r6, r2, #20
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	d93d      	bls.n	8005faa <_dtoa_r+0x31a>
 8005f2e:	6041      	str	r1, [r0, #4]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fd9f 	bl	8006a74 <_Balloc>
 8005f36:	9000      	str	r0, [sp, #0]
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d139      	bne.n	8005fb0 <_dtoa_r+0x320>
 8005f3c:	4b16      	ldr	r3, [pc, #88]	; (8005f98 <_dtoa_r+0x308>)
 8005f3e:	4602      	mov	r2, r0
 8005f40:	f240 11af 	movw	r1, #431	; 0x1af
 8005f44:	e6bd      	b.n	8005cc2 <_dtoa_r+0x32>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e7e1      	b.n	8005f0e <_dtoa_r+0x27e>
 8005f4a:	2501      	movs	r5, #1
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	9509      	str	r5, [sp, #36]	; 0x24
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	9304      	str	r3, [sp, #16]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2312      	movs	r3, #18
 8005f5e:	e7d1      	b.n	8005f04 <_dtoa_r+0x274>
 8005f60:	636f4361 	.word	0x636f4361
 8005f64:	3fd287a7 	.word	0x3fd287a7
 8005f68:	8b60c8b3 	.word	0x8b60c8b3
 8005f6c:	3fc68a28 	.word	0x3fc68a28
 8005f70:	509f79fb 	.word	0x509f79fb
 8005f74:	3fd34413 	.word	0x3fd34413
 8005f78:	08007f8d 	.word	0x08007f8d
 8005f7c:	08007fa4 	.word	0x08007fa4
 8005f80:	7ff00000 	.word	0x7ff00000
 8005f84:	08007f89 	.word	0x08007f89
 8005f88:	08007f80 	.word	0x08007f80
 8005f8c:	08007f5d 	.word	0x08007f5d
 8005f90:	3ff80000 	.word	0x3ff80000
 8005f94:	08008090 	.word	0x08008090
 8005f98:	08007ffc 	.word	0x08007ffc
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa0:	e7d7      	b.n	8005f52 <_dtoa_r+0x2c2>
 8005fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	e7ba      	b.n	8005f20 <_dtoa_r+0x290>
 8005faa:	3101      	adds	r1, #1
 8005fac:	0052      	lsls	r2, r2, #1
 8005fae:	e7ba      	b.n	8005f26 <_dtoa_r+0x296>
 8005fb0:	69e3      	ldr	r3, [r4, #28]
 8005fb2:	9a00      	ldr	r2, [sp, #0]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	2b0e      	cmp	r3, #14
 8005fba:	f200 80a8 	bhi.w	800610e <_dtoa_r+0x47e>
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	f000 80a5 	beq.w	800610e <_dtoa_r+0x47e>
 8005fc4:	f1bb 0f00 	cmp.w	fp, #0
 8005fc8:	dd38      	ble.n	800603c <_dtoa_r+0x3ac>
 8005fca:	4bc0      	ldr	r3, [pc, #768]	; (80062cc <_dtoa_r+0x63c>)
 8005fcc:	f00b 020f 	and.w	r2, fp, #15
 8005fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005fd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005fdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005fe0:	d019      	beq.n	8006016 <_dtoa_r+0x386>
 8005fe2:	4bbb      	ldr	r3, [pc, #748]	; (80062d0 <_dtoa_r+0x640>)
 8005fe4:	ec51 0b18 	vmov	r0, r1, d8
 8005fe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fec:	f7fa fc2e 	bl	800084c <__aeabi_ddiv>
 8005ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff4:	f008 080f 	and.w	r8, r8, #15
 8005ff8:	2503      	movs	r5, #3
 8005ffa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80062d0 <_dtoa_r+0x640>
 8005ffe:	f1b8 0f00 	cmp.w	r8, #0
 8006002:	d10a      	bne.n	800601a <_dtoa_r+0x38a>
 8006004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006008:	4632      	mov	r2, r6
 800600a:	463b      	mov	r3, r7
 800600c:	f7fa fc1e 	bl	800084c <__aeabi_ddiv>
 8006010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006014:	e02b      	b.n	800606e <_dtoa_r+0x3de>
 8006016:	2502      	movs	r5, #2
 8006018:	e7ef      	b.n	8005ffa <_dtoa_r+0x36a>
 800601a:	f018 0f01 	tst.w	r8, #1
 800601e:	d008      	beq.n	8006032 <_dtoa_r+0x3a2>
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006028:	f7fa fae6 	bl	80005f8 <__aeabi_dmul>
 800602c:	3501      	adds	r5, #1
 800602e:	4606      	mov	r6, r0
 8006030:	460f      	mov	r7, r1
 8006032:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006036:	f109 0908 	add.w	r9, r9, #8
 800603a:	e7e0      	b.n	8005ffe <_dtoa_r+0x36e>
 800603c:	f000 809f 	beq.w	800617e <_dtoa_r+0x4ee>
 8006040:	f1cb 0600 	rsb	r6, fp, #0
 8006044:	4ba1      	ldr	r3, [pc, #644]	; (80062cc <_dtoa_r+0x63c>)
 8006046:	4fa2      	ldr	r7, [pc, #648]	; (80062d0 <_dtoa_r+0x640>)
 8006048:	f006 020f 	and.w	r2, r6, #15
 800604c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	ec51 0b18 	vmov	r0, r1, d8
 8006058:	f7fa face 	bl	80005f8 <__aeabi_dmul>
 800605c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006060:	1136      	asrs	r6, r6, #4
 8006062:	2300      	movs	r3, #0
 8006064:	2502      	movs	r5, #2
 8006066:	2e00      	cmp	r6, #0
 8006068:	d17e      	bne.n	8006168 <_dtoa_r+0x4d8>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1d0      	bne.n	8006010 <_dtoa_r+0x380>
 800606e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006070:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8084 	beq.w	8006182 <_dtoa_r+0x4f2>
 800607a:	4b96      	ldr	r3, [pc, #600]	; (80062d4 <_dtoa_r+0x644>)
 800607c:	2200      	movs	r2, #0
 800607e:	4640      	mov	r0, r8
 8006080:	4649      	mov	r1, r9
 8006082:	f7fa fd2b 	bl	8000adc <__aeabi_dcmplt>
 8006086:	2800      	cmp	r0, #0
 8006088:	d07b      	beq.n	8006182 <_dtoa_r+0x4f2>
 800608a:	9b04      	ldr	r3, [sp, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d078      	beq.n	8006182 <_dtoa_r+0x4f2>
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	dd39      	ble.n	800610a <_dtoa_r+0x47a>
 8006096:	4b90      	ldr	r3, [pc, #576]	; (80062d8 <_dtoa_r+0x648>)
 8006098:	2200      	movs	r2, #0
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	f7fa faab 	bl	80005f8 <__aeabi_dmul>
 80060a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060a6:	9e01      	ldr	r6, [sp, #4]
 80060a8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80060ac:	3501      	adds	r5, #1
 80060ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80060b2:	4628      	mov	r0, r5
 80060b4:	f7fa fa36 	bl	8000524 <__aeabi_i2d>
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	f7fa fa9c 	bl	80005f8 <__aeabi_dmul>
 80060c0:	4b86      	ldr	r3, [pc, #536]	; (80062dc <_dtoa_r+0x64c>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	f7fa f8e2 	bl	800028c <__adddf3>
 80060c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80060cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d0:	9303      	str	r3, [sp, #12]
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	d158      	bne.n	8006188 <_dtoa_r+0x4f8>
 80060d6:	4b82      	ldr	r3, [pc, #520]	; (80062e0 <_dtoa_r+0x650>)
 80060d8:	2200      	movs	r2, #0
 80060da:	4640      	mov	r0, r8
 80060dc:	4649      	mov	r1, r9
 80060de:	f7fa f8d3 	bl	8000288 <__aeabi_dsub>
 80060e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060e6:	4680      	mov	r8, r0
 80060e8:	4689      	mov	r9, r1
 80060ea:	f7fa fd15 	bl	8000b18 <__aeabi_dcmpgt>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f040 8296 	bne.w	8006620 <_dtoa_r+0x990>
 80060f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80060f8:	4640      	mov	r0, r8
 80060fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060fe:	4649      	mov	r1, r9
 8006100:	f7fa fcec 	bl	8000adc <__aeabi_dcmplt>
 8006104:	2800      	cmp	r0, #0
 8006106:	f040 8289 	bne.w	800661c <_dtoa_r+0x98c>
 800610a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800610e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006110:	2b00      	cmp	r3, #0
 8006112:	f2c0 814e 	blt.w	80063b2 <_dtoa_r+0x722>
 8006116:	f1bb 0f0e 	cmp.w	fp, #14
 800611a:	f300 814a 	bgt.w	80063b2 <_dtoa_r+0x722>
 800611e:	4b6b      	ldr	r3, [pc, #428]	; (80062cc <_dtoa_r+0x63c>)
 8006120:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	f280 80dc 	bge.w	80062e8 <_dtoa_r+0x658>
 8006130:	9b04      	ldr	r3, [sp, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f300 80d8 	bgt.w	80062e8 <_dtoa_r+0x658>
 8006138:	f040 826f 	bne.w	800661a <_dtoa_r+0x98a>
 800613c:	4b68      	ldr	r3, [pc, #416]	; (80062e0 <_dtoa_r+0x650>)
 800613e:	2200      	movs	r2, #0
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa fa58 	bl	80005f8 <__aeabi_dmul>
 8006148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800614c:	f7fa fcda 	bl	8000b04 <__aeabi_dcmpge>
 8006150:	9e04      	ldr	r6, [sp, #16]
 8006152:	4637      	mov	r7, r6
 8006154:	2800      	cmp	r0, #0
 8006156:	f040 8245 	bne.w	80065e4 <_dtoa_r+0x954>
 800615a:	9d00      	ldr	r5, [sp, #0]
 800615c:	2331      	movs	r3, #49	; 0x31
 800615e:	f805 3b01 	strb.w	r3, [r5], #1
 8006162:	f10b 0b01 	add.w	fp, fp, #1
 8006166:	e241      	b.n	80065ec <_dtoa_r+0x95c>
 8006168:	07f2      	lsls	r2, r6, #31
 800616a:	d505      	bpl.n	8006178 <_dtoa_r+0x4e8>
 800616c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006170:	f7fa fa42 	bl	80005f8 <__aeabi_dmul>
 8006174:	3501      	adds	r5, #1
 8006176:	2301      	movs	r3, #1
 8006178:	1076      	asrs	r6, r6, #1
 800617a:	3708      	adds	r7, #8
 800617c:	e773      	b.n	8006066 <_dtoa_r+0x3d6>
 800617e:	2502      	movs	r5, #2
 8006180:	e775      	b.n	800606e <_dtoa_r+0x3de>
 8006182:	9e04      	ldr	r6, [sp, #16]
 8006184:	465f      	mov	r7, fp
 8006186:	e792      	b.n	80060ae <_dtoa_r+0x41e>
 8006188:	9900      	ldr	r1, [sp, #0]
 800618a:	4b50      	ldr	r3, [pc, #320]	; (80062cc <_dtoa_r+0x63c>)
 800618c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006190:	4431      	add	r1, r6
 8006192:	9102      	str	r1, [sp, #8]
 8006194:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006196:	eeb0 9a47 	vmov.f32	s18, s14
 800619a:	eef0 9a67 	vmov.f32	s19, s15
 800619e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061a6:	2900      	cmp	r1, #0
 80061a8:	d044      	beq.n	8006234 <_dtoa_r+0x5a4>
 80061aa:	494e      	ldr	r1, [pc, #312]	; (80062e4 <_dtoa_r+0x654>)
 80061ac:	2000      	movs	r0, #0
 80061ae:	f7fa fb4d 	bl	800084c <__aeabi_ddiv>
 80061b2:	ec53 2b19 	vmov	r2, r3, d9
 80061b6:	f7fa f867 	bl	8000288 <__aeabi_dsub>
 80061ba:	9d00      	ldr	r5, [sp, #0]
 80061bc:	ec41 0b19 	vmov	d9, r0, r1
 80061c0:	4649      	mov	r1, r9
 80061c2:	4640      	mov	r0, r8
 80061c4:	f7fa fcc8 	bl	8000b58 <__aeabi_d2iz>
 80061c8:	4606      	mov	r6, r0
 80061ca:	f7fa f9ab 	bl	8000524 <__aeabi_i2d>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4640      	mov	r0, r8
 80061d4:	4649      	mov	r1, r9
 80061d6:	f7fa f857 	bl	8000288 <__aeabi_dsub>
 80061da:	3630      	adds	r6, #48	; 0x30
 80061dc:	f805 6b01 	strb.w	r6, [r5], #1
 80061e0:	ec53 2b19 	vmov	r2, r3, d9
 80061e4:	4680      	mov	r8, r0
 80061e6:	4689      	mov	r9, r1
 80061e8:	f7fa fc78 	bl	8000adc <__aeabi_dcmplt>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d164      	bne.n	80062ba <_dtoa_r+0x62a>
 80061f0:	4642      	mov	r2, r8
 80061f2:	464b      	mov	r3, r9
 80061f4:	4937      	ldr	r1, [pc, #220]	; (80062d4 <_dtoa_r+0x644>)
 80061f6:	2000      	movs	r0, #0
 80061f8:	f7fa f846 	bl	8000288 <__aeabi_dsub>
 80061fc:	ec53 2b19 	vmov	r2, r3, d9
 8006200:	f7fa fc6c 	bl	8000adc <__aeabi_dcmplt>
 8006204:	2800      	cmp	r0, #0
 8006206:	f040 80b6 	bne.w	8006376 <_dtoa_r+0x6e6>
 800620a:	9b02      	ldr	r3, [sp, #8]
 800620c:	429d      	cmp	r5, r3
 800620e:	f43f af7c 	beq.w	800610a <_dtoa_r+0x47a>
 8006212:	4b31      	ldr	r3, [pc, #196]	; (80062d8 <_dtoa_r+0x648>)
 8006214:	ec51 0b19 	vmov	r0, r1, d9
 8006218:	2200      	movs	r2, #0
 800621a:	f7fa f9ed 	bl	80005f8 <__aeabi_dmul>
 800621e:	4b2e      	ldr	r3, [pc, #184]	; (80062d8 <_dtoa_r+0x648>)
 8006220:	ec41 0b19 	vmov	d9, r0, r1
 8006224:	2200      	movs	r2, #0
 8006226:	4640      	mov	r0, r8
 8006228:	4649      	mov	r1, r9
 800622a:	f7fa f9e5 	bl	80005f8 <__aeabi_dmul>
 800622e:	4680      	mov	r8, r0
 8006230:	4689      	mov	r9, r1
 8006232:	e7c5      	b.n	80061c0 <_dtoa_r+0x530>
 8006234:	ec51 0b17 	vmov	r0, r1, d7
 8006238:	f7fa f9de 	bl	80005f8 <__aeabi_dmul>
 800623c:	9b02      	ldr	r3, [sp, #8]
 800623e:	9d00      	ldr	r5, [sp, #0]
 8006240:	930f      	str	r3, [sp, #60]	; 0x3c
 8006242:	ec41 0b19 	vmov	d9, r0, r1
 8006246:	4649      	mov	r1, r9
 8006248:	4640      	mov	r0, r8
 800624a:	f7fa fc85 	bl	8000b58 <__aeabi_d2iz>
 800624e:	4606      	mov	r6, r0
 8006250:	f7fa f968 	bl	8000524 <__aeabi_i2d>
 8006254:	3630      	adds	r6, #48	; 0x30
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4640      	mov	r0, r8
 800625c:	4649      	mov	r1, r9
 800625e:	f7fa f813 	bl	8000288 <__aeabi_dsub>
 8006262:	f805 6b01 	strb.w	r6, [r5], #1
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	429d      	cmp	r5, r3
 800626a:	4680      	mov	r8, r0
 800626c:	4689      	mov	r9, r1
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	d124      	bne.n	80062be <_dtoa_r+0x62e>
 8006274:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <_dtoa_r+0x654>)
 8006276:	ec51 0b19 	vmov	r0, r1, d9
 800627a:	f7fa f807 	bl	800028c <__adddf3>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4640      	mov	r0, r8
 8006284:	4649      	mov	r1, r9
 8006286:	f7fa fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800628a:	2800      	cmp	r0, #0
 800628c:	d173      	bne.n	8006376 <_dtoa_r+0x6e6>
 800628e:	ec53 2b19 	vmov	r2, r3, d9
 8006292:	4914      	ldr	r1, [pc, #80]	; (80062e4 <_dtoa_r+0x654>)
 8006294:	2000      	movs	r0, #0
 8006296:	f7f9 fff7 	bl	8000288 <__aeabi_dsub>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	f7fa fc1b 	bl	8000adc <__aeabi_dcmplt>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	f43f af2f 	beq.w	800610a <_dtoa_r+0x47a>
 80062ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80062ae:	1e6b      	subs	r3, r5, #1
 80062b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80062b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062b6:	2b30      	cmp	r3, #48	; 0x30
 80062b8:	d0f8      	beq.n	80062ac <_dtoa_r+0x61c>
 80062ba:	46bb      	mov	fp, r7
 80062bc:	e04a      	b.n	8006354 <_dtoa_r+0x6c4>
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <_dtoa_r+0x648>)
 80062c0:	f7fa f99a 	bl	80005f8 <__aeabi_dmul>
 80062c4:	4680      	mov	r8, r0
 80062c6:	4689      	mov	r9, r1
 80062c8:	e7bd      	b.n	8006246 <_dtoa_r+0x5b6>
 80062ca:	bf00      	nop
 80062cc:	08008090 	.word	0x08008090
 80062d0:	08008068 	.word	0x08008068
 80062d4:	3ff00000 	.word	0x3ff00000
 80062d8:	40240000 	.word	0x40240000
 80062dc:	401c0000 	.word	0x401c0000
 80062e0:	40140000 	.word	0x40140000
 80062e4:	3fe00000 	.word	0x3fe00000
 80062e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80062ec:	9d00      	ldr	r5, [sp, #0]
 80062ee:	4642      	mov	r2, r8
 80062f0:	464b      	mov	r3, r9
 80062f2:	4630      	mov	r0, r6
 80062f4:	4639      	mov	r1, r7
 80062f6:	f7fa faa9 	bl	800084c <__aeabi_ddiv>
 80062fa:	f7fa fc2d 	bl	8000b58 <__aeabi_d2iz>
 80062fe:	9001      	str	r0, [sp, #4]
 8006300:	f7fa f910 	bl	8000524 <__aeabi_i2d>
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	f7fa f976 	bl	80005f8 <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7f9 ffb8 	bl	8000288 <__aeabi_dsub>
 8006318:	9e01      	ldr	r6, [sp, #4]
 800631a:	9f04      	ldr	r7, [sp, #16]
 800631c:	3630      	adds	r6, #48	; 0x30
 800631e:	f805 6b01 	strb.w	r6, [r5], #1
 8006322:	9e00      	ldr	r6, [sp, #0]
 8006324:	1bae      	subs	r6, r5, r6
 8006326:	42b7      	cmp	r7, r6
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	d134      	bne.n	8006398 <_dtoa_r+0x708>
 800632e:	f7f9 ffad 	bl	800028c <__adddf3>
 8006332:	4642      	mov	r2, r8
 8006334:	464b      	mov	r3, r9
 8006336:	4606      	mov	r6, r0
 8006338:	460f      	mov	r7, r1
 800633a:	f7fa fbed 	bl	8000b18 <__aeabi_dcmpgt>
 800633e:	b9c8      	cbnz	r0, 8006374 <_dtoa_r+0x6e4>
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	4630      	mov	r0, r6
 8006346:	4639      	mov	r1, r7
 8006348:	f7fa fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800634c:	b110      	cbz	r0, 8006354 <_dtoa_r+0x6c4>
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	07db      	lsls	r3, r3, #31
 8006352:	d40f      	bmi.n	8006374 <_dtoa_r+0x6e4>
 8006354:	4651      	mov	r1, sl
 8006356:	4620      	mov	r0, r4
 8006358:	f000 fbcc 	bl	8006af4 <_Bfree>
 800635c:	2300      	movs	r3, #0
 800635e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006360:	702b      	strb	r3, [r5, #0]
 8006362:	f10b 0301 	add.w	r3, fp, #1
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636a:	2b00      	cmp	r3, #0
 800636c:	f43f ace2 	beq.w	8005d34 <_dtoa_r+0xa4>
 8006370:	601d      	str	r5, [r3, #0]
 8006372:	e4df      	b.n	8005d34 <_dtoa_r+0xa4>
 8006374:	465f      	mov	r7, fp
 8006376:	462b      	mov	r3, r5
 8006378:	461d      	mov	r5, r3
 800637a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800637e:	2a39      	cmp	r2, #57	; 0x39
 8006380:	d106      	bne.n	8006390 <_dtoa_r+0x700>
 8006382:	9a00      	ldr	r2, [sp, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d1f7      	bne.n	8006378 <_dtoa_r+0x6e8>
 8006388:	9900      	ldr	r1, [sp, #0]
 800638a:	2230      	movs	r2, #48	; 0x30
 800638c:	3701      	adds	r7, #1
 800638e:	700a      	strb	r2, [r1, #0]
 8006390:	781a      	ldrb	r2, [r3, #0]
 8006392:	3201      	adds	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e790      	b.n	80062ba <_dtoa_r+0x62a>
 8006398:	4ba3      	ldr	r3, [pc, #652]	; (8006628 <_dtoa_r+0x998>)
 800639a:	2200      	movs	r2, #0
 800639c:	f7fa f92c 	bl	80005f8 <__aeabi_dmul>
 80063a0:	2200      	movs	r2, #0
 80063a2:	2300      	movs	r3, #0
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	f7fa fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d09e      	beq.n	80062ee <_dtoa_r+0x65e>
 80063b0:	e7d0      	b.n	8006354 <_dtoa_r+0x6c4>
 80063b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	f000 80ca 	beq.w	800654e <_dtoa_r+0x8be>
 80063ba:	9a07      	ldr	r2, [sp, #28]
 80063bc:	2a01      	cmp	r2, #1
 80063be:	f300 80ad 	bgt.w	800651c <_dtoa_r+0x88c>
 80063c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	f000 80a5 	beq.w	8006514 <_dtoa_r+0x884>
 80063ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80063ce:	9e08      	ldr	r6, [sp, #32]
 80063d0:	9d05      	ldr	r5, [sp, #20]
 80063d2:	9a05      	ldr	r2, [sp, #20]
 80063d4:	441a      	add	r2, r3
 80063d6:	9205      	str	r2, [sp, #20]
 80063d8:	9a06      	ldr	r2, [sp, #24]
 80063da:	2101      	movs	r1, #1
 80063dc:	441a      	add	r2, r3
 80063de:	4620      	mov	r0, r4
 80063e0:	9206      	str	r2, [sp, #24]
 80063e2:	f000 fc3d 	bl	8006c60 <__i2b>
 80063e6:	4607      	mov	r7, r0
 80063e8:	b165      	cbz	r5, 8006404 <_dtoa_r+0x774>
 80063ea:	9b06      	ldr	r3, [sp, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd09      	ble.n	8006404 <_dtoa_r+0x774>
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	9a05      	ldr	r2, [sp, #20]
 80063f4:	bfa8      	it	ge
 80063f6:	462b      	movge	r3, r5
 80063f8:	1ad2      	subs	r2, r2, r3
 80063fa:	9205      	str	r2, [sp, #20]
 80063fc:	9a06      	ldr	r2, [sp, #24]
 80063fe:	1aed      	subs	r5, r5, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	9306      	str	r3, [sp, #24]
 8006404:	9b08      	ldr	r3, [sp, #32]
 8006406:	b1f3      	cbz	r3, 8006446 <_dtoa_r+0x7b6>
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 80a3 	beq.w	8006556 <_dtoa_r+0x8c6>
 8006410:	2e00      	cmp	r6, #0
 8006412:	dd10      	ble.n	8006436 <_dtoa_r+0x7a6>
 8006414:	4639      	mov	r1, r7
 8006416:	4632      	mov	r2, r6
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fce1 	bl	8006de0 <__pow5mult>
 800641e:	4652      	mov	r2, sl
 8006420:	4601      	mov	r1, r0
 8006422:	4607      	mov	r7, r0
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fc31 	bl	8006c8c <__multiply>
 800642a:	4651      	mov	r1, sl
 800642c:	4680      	mov	r8, r0
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fb60 	bl	8006af4 <_Bfree>
 8006434:	46c2      	mov	sl, r8
 8006436:	9b08      	ldr	r3, [sp, #32]
 8006438:	1b9a      	subs	r2, r3, r6
 800643a:	d004      	beq.n	8006446 <_dtoa_r+0x7b6>
 800643c:	4651      	mov	r1, sl
 800643e:	4620      	mov	r0, r4
 8006440:	f000 fcce 	bl	8006de0 <__pow5mult>
 8006444:	4682      	mov	sl, r0
 8006446:	2101      	movs	r1, #1
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fc09 	bl	8006c60 <__i2b>
 800644e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	4606      	mov	r6, r0
 8006454:	f340 8081 	ble.w	800655a <_dtoa_r+0x8ca>
 8006458:	461a      	mov	r2, r3
 800645a:	4601      	mov	r1, r0
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fcbf 	bl	8006de0 <__pow5mult>
 8006462:	9b07      	ldr	r3, [sp, #28]
 8006464:	2b01      	cmp	r3, #1
 8006466:	4606      	mov	r6, r0
 8006468:	dd7a      	ble.n	8006560 <_dtoa_r+0x8d0>
 800646a:	f04f 0800 	mov.w	r8, #0
 800646e:	6933      	ldr	r3, [r6, #16]
 8006470:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006474:	6918      	ldr	r0, [r3, #16]
 8006476:	f000 fba5 	bl	8006bc4 <__hi0bits>
 800647a:	f1c0 0020 	rsb	r0, r0, #32
 800647e:	9b06      	ldr	r3, [sp, #24]
 8006480:	4418      	add	r0, r3
 8006482:	f010 001f 	ands.w	r0, r0, #31
 8006486:	f000 8094 	beq.w	80065b2 <_dtoa_r+0x922>
 800648a:	f1c0 0320 	rsb	r3, r0, #32
 800648e:	2b04      	cmp	r3, #4
 8006490:	f340 8085 	ble.w	800659e <_dtoa_r+0x90e>
 8006494:	9b05      	ldr	r3, [sp, #20]
 8006496:	f1c0 001c 	rsb	r0, r0, #28
 800649a:	4403      	add	r3, r0
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	4403      	add	r3, r0
 80064a2:	4405      	add	r5, r0
 80064a4:	9306      	str	r3, [sp, #24]
 80064a6:	9b05      	ldr	r3, [sp, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dd05      	ble.n	80064b8 <_dtoa_r+0x828>
 80064ac:	4651      	mov	r1, sl
 80064ae:	461a      	mov	r2, r3
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 fcef 	bl	8006e94 <__lshift>
 80064b6:	4682      	mov	sl, r0
 80064b8:	9b06      	ldr	r3, [sp, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	dd05      	ble.n	80064ca <_dtoa_r+0x83a>
 80064be:	4631      	mov	r1, r6
 80064c0:	461a      	mov	r2, r3
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fce6 	bl	8006e94 <__lshift>
 80064c8:	4606      	mov	r6, r0
 80064ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d072      	beq.n	80065b6 <_dtoa_r+0x926>
 80064d0:	4631      	mov	r1, r6
 80064d2:	4650      	mov	r0, sl
 80064d4:	f000 fd4a 	bl	8006f6c <__mcmp>
 80064d8:	2800      	cmp	r0, #0
 80064da:	da6c      	bge.n	80065b6 <_dtoa_r+0x926>
 80064dc:	2300      	movs	r3, #0
 80064de:	4651      	mov	r1, sl
 80064e0:	220a      	movs	r2, #10
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fb28 	bl	8006b38 <__multadd>
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80064ee:	4682      	mov	sl, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 81b0 	beq.w	8006856 <_dtoa_r+0xbc6>
 80064f6:	2300      	movs	r3, #0
 80064f8:	4639      	mov	r1, r7
 80064fa:	220a      	movs	r2, #10
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 fb1b 	bl	8006b38 <__multadd>
 8006502:	9b01      	ldr	r3, [sp, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	4607      	mov	r7, r0
 8006508:	f300 8096 	bgt.w	8006638 <_dtoa_r+0x9a8>
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	2b02      	cmp	r3, #2
 8006510:	dc59      	bgt.n	80065c6 <_dtoa_r+0x936>
 8006512:	e091      	b.n	8006638 <_dtoa_r+0x9a8>
 8006514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800651a:	e758      	b.n	80063ce <_dtoa_r+0x73e>
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	1e5e      	subs	r6, r3, #1
 8006520:	9b08      	ldr	r3, [sp, #32]
 8006522:	42b3      	cmp	r3, r6
 8006524:	bfbf      	itttt	lt
 8006526:	9b08      	ldrlt	r3, [sp, #32]
 8006528:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800652a:	9608      	strlt	r6, [sp, #32]
 800652c:	1af3      	sublt	r3, r6, r3
 800652e:	bfb4      	ite	lt
 8006530:	18d2      	addlt	r2, r2, r3
 8006532:	1b9e      	subge	r6, r3, r6
 8006534:	9b04      	ldr	r3, [sp, #16]
 8006536:	bfbc      	itt	lt
 8006538:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800653a:	2600      	movlt	r6, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	bfb7      	itett	lt
 8006540:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006544:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006548:	1a9d      	sublt	r5, r3, r2
 800654a:	2300      	movlt	r3, #0
 800654c:	e741      	b.n	80063d2 <_dtoa_r+0x742>
 800654e:	9e08      	ldr	r6, [sp, #32]
 8006550:	9d05      	ldr	r5, [sp, #20]
 8006552:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006554:	e748      	b.n	80063e8 <_dtoa_r+0x758>
 8006556:	9a08      	ldr	r2, [sp, #32]
 8006558:	e770      	b.n	800643c <_dtoa_r+0x7ac>
 800655a:	9b07      	ldr	r3, [sp, #28]
 800655c:	2b01      	cmp	r3, #1
 800655e:	dc19      	bgt.n	8006594 <_dtoa_r+0x904>
 8006560:	9b02      	ldr	r3, [sp, #8]
 8006562:	b9bb      	cbnz	r3, 8006594 <_dtoa_r+0x904>
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800656a:	b99b      	cbnz	r3, 8006594 <_dtoa_r+0x904>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006572:	0d1b      	lsrs	r3, r3, #20
 8006574:	051b      	lsls	r3, r3, #20
 8006576:	b183      	cbz	r3, 800659a <_dtoa_r+0x90a>
 8006578:	9b05      	ldr	r3, [sp, #20]
 800657a:	3301      	adds	r3, #1
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	9b06      	ldr	r3, [sp, #24]
 8006580:	3301      	adds	r3, #1
 8006582:	9306      	str	r3, [sp, #24]
 8006584:	f04f 0801 	mov.w	r8, #1
 8006588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f af6f 	bne.w	800646e <_dtoa_r+0x7de>
 8006590:	2001      	movs	r0, #1
 8006592:	e774      	b.n	800647e <_dtoa_r+0x7ee>
 8006594:	f04f 0800 	mov.w	r8, #0
 8006598:	e7f6      	b.n	8006588 <_dtoa_r+0x8f8>
 800659a:	4698      	mov	r8, r3
 800659c:	e7f4      	b.n	8006588 <_dtoa_r+0x8f8>
 800659e:	d082      	beq.n	80064a6 <_dtoa_r+0x816>
 80065a0:	9a05      	ldr	r2, [sp, #20]
 80065a2:	331c      	adds	r3, #28
 80065a4:	441a      	add	r2, r3
 80065a6:	9205      	str	r2, [sp, #20]
 80065a8:	9a06      	ldr	r2, [sp, #24]
 80065aa:	441a      	add	r2, r3
 80065ac:	441d      	add	r5, r3
 80065ae:	9206      	str	r2, [sp, #24]
 80065b0:	e779      	b.n	80064a6 <_dtoa_r+0x816>
 80065b2:	4603      	mov	r3, r0
 80065b4:	e7f4      	b.n	80065a0 <_dtoa_r+0x910>
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	dc37      	bgt.n	800662c <_dtoa_r+0x99c>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	dd34      	ble.n	800662c <_dtoa_r+0x99c>
 80065c2:	9b04      	ldr	r3, [sp, #16]
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	b963      	cbnz	r3, 80065e4 <_dtoa_r+0x954>
 80065ca:	4631      	mov	r1, r6
 80065cc:	2205      	movs	r2, #5
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fab2 	bl	8006b38 <__multadd>
 80065d4:	4601      	mov	r1, r0
 80065d6:	4606      	mov	r6, r0
 80065d8:	4650      	mov	r0, sl
 80065da:	f000 fcc7 	bl	8006f6c <__mcmp>
 80065de:	2800      	cmp	r0, #0
 80065e0:	f73f adbb 	bgt.w	800615a <_dtoa_r+0x4ca>
 80065e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e6:	9d00      	ldr	r5, [sp, #0]
 80065e8:	ea6f 0b03 	mvn.w	fp, r3
 80065ec:	f04f 0800 	mov.w	r8, #0
 80065f0:	4631      	mov	r1, r6
 80065f2:	4620      	mov	r0, r4
 80065f4:	f000 fa7e 	bl	8006af4 <_Bfree>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f43f aeab 	beq.w	8006354 <_dtoa_r+0x6c4>
 80065fe:	f1b8 0f00 	cmp.w	r8, #0
 8006602:	d005      	beq.n	8006610 <_dtoa_r+0x980>
 8006604:	45b8      	cmp	r8, r7
 8006606:	d003      	beq.n	8006610 <_dtoa_r+0x980>
 8006608:	4641      	mov	r1, r8
 800660a:	4620      	mov	r0, r4
 800660c:	f000 fa72 	bl	8006af4 <_Bfree>
 8006610:	4639      	mov	r1, r7
 8006612:	4620      	mov	r0, r4
 8006614:	f000 fa6e 	bl	8006af4 <_Bfree>
 8006618:	e69c      	b.n	8006354 <_dtoa_r+0x6c4>
 800661a:	2600      	movs	r6, #0
 800661c:	4637      	mov	r7, r6
 800661e:	e7e1      	b.n	80065e4 <_dtoa_r+0x954>
 8006620:	46bb      	mov	fp, r7
 8006622:	4637      	mov	r7, r6
 8006624:	e599      	b.n	800615a <_dtoa_r+0x4ca>
 8006626:	bf00      	nop
 8006628:	40240000 	.word	0x40240000
 800662c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 80c8 	beq.w	80067c4 <_dtoa_r+0xb34>
 8006634:	9b04      	ldr	r3, [sp, #16]
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	2d00      	cmp	r5, #0
 800663a:	dd05      	ble.n	8006648 <_dtoa_r+0x9b8>
 800663c:	4639      	mov	r1, r7
 800663e:	462a      	mov	r2, r5
 8006640:	4620      	mov	r0, r4
 8006642:	f000 fc27 	bl	8006e94 <__lshift>
 8006646:	4607      	mov	r7, r0
 8006648:	f1b8 0f00 	cmp.w	r8, #0
 800664c:	d05b      	beq.n	8006706 <_dtoa_r+0xa76>
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4620      	mov	r0, r4
 8006652:	f000 fa0f 	bl	8006a74 <_Balloc>
 8006656:	4605      	mov	r5, r0
 8006658:	b928      	cbnz	r0, 8006666 <_dtoa_r+0x9d6>
 800665a:	4b83      	ldr	r3, [pc, #524]	; (8006868 <_dtoa_r+0xbd8>)
 800665c:	4602      	mov	r2, r0
 800665e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006662:	f7ff bb2e 	b.w	8005cc2 <_dtoa_r+0x32>
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	3202      	adds	r2, #2
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	f107 010c 	add.w	r1, r7, #12
 8006670:	300c      	adds	r0, #12
 8006672:	f7ff fa76 	bl	8005b62 <memcpy>
 8006676:	2201      	movs	r2, #1
 8006678:	4629      	mov	r1, r5
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fc0a 	bl	8006e94 <__lshift>
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	9304      	str	r3, [sp, #16]
 8006686:	e9dd 2300 	ldrd	r2, r3, [sp]
 800668a:	4413      	add	r3, r2
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	9b02      	ldr	r3, [sp, #8]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	46b8      	mov	r8, r7
 8006696:	9306      	str	r3, [sp, #24]
 8006698:	4607      	mov	r7, r0
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	4631      	mov	r1, r6
 800669e:	3b01      	subs	r3, #1
 80066a0:	4650      	mov	r0, sl
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	f7ff fa6b 	bl	8005b7e <quorem>
 80066a8:	4641      	mov	r1, r8
 80066aa:	9002      	str	r0, [sp, #8]
 80066ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066b0:	4650      	mov	r0, sl
 80066b2:	f000 fc5b 	bl	8006f6c <__mcmp>
 80066b6:	463a      	mov	r2, r7
 80066b8:	9005      	str	r0, [sp, #20]
 80066ba:	4631      	mov	r1, r6
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 fc71 	bl	8006fa4 <__mdiff>
 80066c2:	68c2      	ldr	r2, [r0, #12]
 80066c4:	4605      	mov	r5, r0
 80066c6:	bb02      	cbnz	r2, 800670a <_dtoa_r+0xa7a>
 80066c8:	4601      	mov	r1, r0
 80066ca:	4650      	mov	r0, sl
 80066cc:	f000 fc4e 	bl	8006f6c <__mcmp>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4629      	mov	r1, r5
 80066d4:	4620      	mov	r0, r4
 80066d6:	9209      	str	r2, [sp, #36]	; 0x24
 80066d8:	f000 fa0c 	bl	8006af4 <_Bfree>
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e0:	9d04      	ldr	r5, [sp, #16]
 80066e2:	ea43 0102 	orr.w	r1, r3, r2
 80066e6:	9b06      	ldr	r3, [sp, #24]
 80066e8:	4319      	orrs	r1, r3
 80066ea:	d110      	bne.n	800670e <_dtoa_r+0xa7e>
 80066ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80066f0:	d029      	beq.n	8006746 <_dtoa_r+0xab6>
 80066f2:	9b05      	ldr	r3, [sp, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd02      	ble.n	80066fe <_dtoa_r+0xa6e>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	f883 9000 	strb.w	r9, [r3]
 8006704:	e774      	b.n	80065f0 <_dtoa_r+0x960>
 8006706:	4638      	mov	r0, r7
 8006708:	e7ba      	b.n	8006680 <_dtoa_r+0x9f0>
 800670a:	2201      	movs	r2, #1
 800670c:	e7e1      	b.n	80066d2 <_dtoa_r+0xa42>
 800670e:	9b05      	ldr	r3, [sp, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	db04      	blt.n	800671e <_dtoa_r+0xa8e>
 8006714:	9907      	ldr	r1, [sp, #28]
 8006716:	430b      	orrs	r3, r1
 8006718:	9906      	ldr	r1, [sp, #24]
 800671a:	430b      	orrs	r3, r1
 800671c:	d120      	bne.n	8006760 <_dtoa_r+0xad0>
 800671e:	2a00      	cmp	r2, #0
 8006720:	dded      	ble.n	80066fe <_dtoa_r+0xa6e>
 8006722:	4651      	mov	r1, sl
 8006724:	2201      	movs	r2, #1
 8006726:	4620      	mov	r0, r4
 8006728:	f000 fbb4 	bl	8006e94 <__lshift>
 800672c:	4631      	mov	r1, r6
 800672e:	4682      	mov	sl, r0
 8006730:	f000 fc1c 	bl	8006f6c <__mcmp>
 8006734:	2800      	cmp	r0, #0
 8006736:	dc03      	bgt.n	8006740 <_dtoa_r+0xab0>
 8006738:	d1e1      	bne.n	80066fe <_dtoa_r+0xa6e>
 800673a:	f019 0f01 	tst.w	r9, #1
 800673e:	d0de      	beq.n	80066fe <_dtoa_r+0xa6e>
 8006740:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006744:	d1d8      	bne.n	80066f8 <_dtoa_r+0xa68>
 8006746:	9a01      	ldr	r2, [sp, #4]
 8006748:	2339      	movs	r3, #57	; 0x39
 800674a:	7013      	strb	r3, [r2, #0]
 800674c:	462b      	mov	r3, r5
 800674e:	461d      	mov	r5, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006756:	2a39      	cmp	r2, #57	; 0x39
 8006758:	d06c      	beq.n	8006834 <_dtoa_r+0xba4>
 800675a:	3201      	adds	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	e747      	b.n	80065f0 <_dtoa_r+0x960>
 8006760:	2a00      	cmp	r2, #0
 8006762:	dd07      	ble.n	8006774 <_dtoa_r+0xae4>
 8006764:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006768:	d0ed      	beq.n	8006746 <_dtoa_r+0xab6>
 800676a:	9a01      	ldr	r2, [sp, #4]
 800676c:	f109 0301 	add.w	r3, r9, #1
 8006770:	7013      	strb	r3, [r2, #0]
 8006772:	e73d      	b.n	80065f0 <_dtoa_r+0x960>
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	9a08      	ldr	r2, [sp, #32]
 8006778:	f803 9c01 	strb.w	r9, [r3, #-1]
 800677c:	4293      	cmp	r3, r2
 800677e:	d043      	beq.n	8006808 <_dtoa_r+0xb78>
 8006780:	4651      	mov	r1, sl
 8006782:	2300      	movs	r3, #0
 8006784:	220a      	movs	r2, #10
 8006786:	4620      	mov	r0, r4
 8006788:	f000 f9d6 	bl	8006b38 <__multadd>
 800678c:	45b8      	cmp	r8, r7
 800678e:	4682      	mov	sl, r0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	f04f 020a 	mov.w	r2, #10
 8006798:	4641      	mov	r1, r8
 800679a:	4620      	mov	r0, r4
 800679c:	d107      	bne.n	80067ae <_dtoa_r+0xb1e>
 800679e:	f000 f9cb 	bl	8006b38 <__multadd>
 80067a2:	4680      	mov	r8, r0
 80067a4:	4607      	mov	r7, r0
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	3301      	adds	r3, #1
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	e775      	b.n	800669a <_dtoa_r+0xa0a>
 80067ae:	f000 f9c3 	bl	8006b38 <__multadd>
 80067b2:	4639      	mov	r1, r7
 80067b4:	4680      	mov	r8, r0
 80067b6:	2300      	movs	r3, #0
 80067b8:	220a      	movs	r2, #10
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f9bc 	bl	8006b38 <__multadd>
 80067c0:	4607      	mov	r7, r0
 80067c2:	e7f0      	b.n	80067a6 <_dtoa_r+0xb16>
 80067c4:	9b04      	ldr	r3, [sp, #16]
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	9d00      	ldr	r5, [sp, #0]
 80067ca:	4631      	mov	r1, r6
 80067cc:	4650      	mov	r0, sl
 80067ce:	f7ff f9d6 	bl	8005b7e <quorem>
 80067d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80067d6:	9b00      	ldr	r3, [sp, #0]
 80067d8:	f805 9b01 	strb.w	r9, [r5], #1
 80067dc:	1aea      	subs	r2, r5, r3
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	dd07      	ble.n	80067f4 <_dtoa_r+0xb64>
 80067e4:	4651      	mov	r1, sl
 80067e6:	2300      	movs	r3, #0
 80067e8:	220a      	movs	r2, #10
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 f9a4 	bl	8006b38 <__multadd>
 80067f0:	4682      	mov	sl, r0
 80067f2:	e7ea      	b.n	80067ca <_dtoa_r+0xb3a>
 80067f4:	9b01      	ldr	r3, [sp, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfc8      	it	gt
 80067fa:	461d      	movgt	r5, r3
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	bfd8      	it	le
 8006800:	2501      	movle	r5, #1
 8006802:	441d      	add	r5, r3
 8006804:	f04f 0800 	mov.w	r8, #0
 8006808:	4651      	mov	r1, sl
 800680a:	2201      	movs	r2, #1
 800680c:	4620      	mov	r0, r4
 800680e:	f000 fb41 	bl	8006e94 <__lshift>
 8006812:	4631      	mov	r1, r6
 8006814:	4682      	mov	sl, r0
 8006816:	f000 fba9 	bl	8006f6c <__mcmp>
 800681a:	2800      	cmp	r0, #0
 800681c:	dc96      	bgt.n	800674c <_dtoa_r+0xabc>
 800681e:	d102      	bne.n	8006826 <_dtoa_r+0xb96>
 8006820:	f019 0f01 	tst.w	r9, #1
 8006824:	d192      	bne.n	800674c <_dtoa_r+0xabc>
 8006826:	462b      	mov	r3, r5
 8006828:	461d      	mov	r5, r3
 800682a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800682e:	2a30      	cmp	r2, #48	; 0x30
 8006830:	d0fa      	beq.n	8006828 <_dtoa_r+0xb98>
 8006832:	e6dd      	b.n	80065f0 <_dtoa_r+0x960>
 8006834:	9a00      	ldr	r2, [sp, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d189      	bne.n	800674e <_dtoa_r+0xabe>
 800683a:	f10b 0b01 	add.w	fp, fp, #1
 800683e:	2331      	movs	r3, #49	; 0x31
 8006840:	e796      	b.n	8006770 <_dtoa_r+0xae0>
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <_dtoa_r+0xbdc>)
 8006844:	f7ff ba99 	b.w	8005d7a <_dtoa_r+0xea>
 8006848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800684a:	2b00      	cmp	r3, #0
 800684c:	f47f aa6d 	bne.w	8005d2a <_dtoa_r+0x9a>
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <_dtoa_r+0xbe0>)
 8006852:	f7ff ba92 	b.w	8005d7a <_dtoa_r+0xea>
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	dcb5      	bgt.n	80067c8 <_dtoa_r+0xb38>
 800685c:	9b07      	ldr	r3, [sp, #28]
 800685e:	2b02      	cmp	r3, #2
 8006860:	f73f aeb1 	bgt.w	80065c6 <_dtoa_r+0x936>
 8006864:	e7b0      	b.n	80067c8 <_dtoa_r+0xb38>
 8006866:	bf00      	nop
 8006868:	08007ffc 	.word	0x08007ffc
 800686c:	08007f5c 	.word	0x08007f5c
 8006870:	08007f80 	.word	0x08007f80

08006874 <_free_r>:
 8006874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006876:	2900      	cmp	r1, #0
 8006878:	d044      	beq.n	8006904 <_free_r+0x90>
 800687a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800687e:	9001      	str	r0, [sp, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f1a1 0404 	sub.w	r4, r1, #4
 8006886:	bfb8      	it	lt
 8006888:	18e4      	addlt	r4, r4, r3
 800688a:	f000 f8e7 	bl	8006a5c <__malloc_lock>
 800688e:	4a1e      	ldr	r2, [pc, #120]	; (8006908 <_free_r+0x94>)
 8006890:	9801      	ldr	r0, [sp, #4]
 8006892:	6813      	ldr	r3, [r2, #0]
 8006894:	b933      	cbnz	r3, 80068a4 <_free_r+0x30>
 8006896:	6063      	str	r3, [r4, #4]
 8006898:	6014      	str	r4, [r2, #0]
 800689a:	b003      	add	sp, #12
 800689c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068a0:	f000 b8e2 	b.w	8006a68 <__malloc_unlock>
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	d908      	bls.n	80068ba <_free_r+0x46>
 80068a8:	6825      	ldr	r5, [r4, #0]
 80068aa:	1961      	adds	r1, r4, r5
 80068ac:	428b      	cmp	r3, r1
 80068ae:	bf01      	itttt	eq
 80068b0:	6819      	ldreq	r1, [r3, #0]
 80068b2:	685b      	ldreq	r3, [r3, #4]
 80068b4:	1949      	addeq	r1, r1, r5
 80068b6:	6021      	streq	r1, [r4, #0]
 80068b8:	e7ed      	b.n	8006896 <_free_r+0x22>
 80068ba:	461a      	mov	r2, r3
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b10b      	cbz	r3, 80068c4 <_free_r+0x50>
 80068c0:	42a3      	cmp	r3, r4
 80068c2:	d9fa      	bls.n	80068ba <_free_r+0x46>
 80068c4:	6811      	ldr	r1, [r2, #0]
 80068c6:	1855      	adds	r5, r2, r1
 80068c8:	42a5      	cmp	r5, r4
 80068ca:	d10b      	bne.n	80068e4 <_free_r+0x70>
 80068cc:	6824      	ldr	r4, [r4, #0]
 80068ce:	4421      	add	r1, r4
 80068d0:	1854      	adds	r4, r2, r1
 80068d2:	42a3      	cmp	r3, r4
 80068d4:	6011      	str	r1, [r2, #0]
 80068d6:	d1e0      	bne.n	800689a <_free_r+0x26>
 80068d8:	681c      	ldr	r4, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	6053      	str	r3, [r2, #4]
 80068de:	440c      	add	r4, r1
 80068e0:	6014      	str	r4, [r2, #0]
 80068e2:	e7da      	b.n	800689a <_free_r+0x26>
 80068e4:	d902      	bls.n	80068ec <_free_r+0x78>
 80068e6:	230c      	movs	r3, #12
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	e7d6      	b.n	800689a <_free_r+0x26>
 80068ec:	6825      	ldr	r5, [r4, #0]
 80068ee:	1961      	adds	r1, r4, r5
 80068f0:	428b      	cmp	r3, r1
 80068f2:	bf04      	itt	eq
 80068f4:	6819      	ldreq	r1, [r3, #0]
 80068f6:	685b      	ldreq	r3, [r3, #4]
 80068f8:	6063      	str	r3, [r4, #4]
 80068fa:	bf04      	itt	eq
 80068fc:	1949      	addeq	r1, r1, r5
 80068fe:	6021      	streq	r1, [r4, #0]
 8006900:	6054      	str	r4, [r2, #4]
 8006902:	e7ca      	b.n	800689a <_free_r+0x26>
 8006904:	b003      	add	sp, #12
 8006906:	bd30      	pop	{r4, r5, pc}
 8006908:	20004494 	.word	0x20004494

0800690c <malloc>:
 800690c:	4b02      	ldr	r3, [pc, #8]	; (8006918 <malloc+0xc>)
 800690e:	4601      	mov	r1, r0
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	f000 b823 	b.w	800695c <_malloc_r>
 8006916:	bf00      	nop
 8006918:	20000068 	.word	0x20000068

0800691c <sbrk_aligned>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	4e0e      	ldr	r6, [pc, #56]	; (8006958 <sbrk_aligned+0x3c>)
 8006920:	460c      	mov	r4, r1
 8006922:	6831      	ldr	r1, [r6, #0]
 8006924:	4605      	mov	r5, r0
 8006926:	b911      	cbnz	r1, 800692e <sbrk_aligned+0x12>
 8006928:	f000 fe96 	bl	8007658 <_sbrk_r>
 800692c:	6030      	str	r0, [r6, #0]
 800692e:	4621      	mov	r1, r4
 8006930:	4628      	mov	r0, r5
 8006932:	f000 fe91 	bl	8007658 <_sbrk_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	d00a      	beq.n	8006950 <sbrk_aligned+0x34>
 800693a:	1cc4      	adds	r4, r0, #3
 800693c:	f024 0403 	bic.w	r4, r4, #3
 8006940:	42a0      	cmp	r0, r4
 8006942:	d007      	beq.n	8006954 <sbrk_aligned+0x38>
 8006944:	1a21      	subs	r1, r4, r0
 8006946:	4628      	mov	r0, r5
 8006948:	f000 fe86 	bl	8007658 <_sbrk_r>
 800694c:	3001      	adds	r0, #1
 800694e:	d101      	bne.n	8006954 <sbrk_aligned+0x38>
 8006950:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006954:	4620      	mov	r0, r4
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	20004498 	.word	0x20004498

0800695c <_malloc_r>:
 800695c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006960:	1ccd      	adds	r5, r1, #3
 8006962:	f025 0503 	bic.w	r5, r5, #3
 8006966:	3508      	adds	r5, #8
 8006968:	2d0c      	cmp	r5, #12
 800696a:	bf38      	it	cc
 800696c:	250c      	movcc	r5, #12
 800696e:	2d00      	cmp	r5, #0
 8006970:	4607      	mov	r7, r0
 8006972:	db01      	blt.n	8006978 <_malloc_r+0x1c>
 8006974:	42a9      	cmp	r1, r5
 8006976:	d905      	bls.n	8006984 <_malloc_r+0x28>
 8006978:	230c      	movs	r3, #12
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	2600      	movs	r6, #0
 800697e:	4630      	mov	r0, r6
 8006980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006984:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a58 <_malloc_r+0xfc>
 8006988:	f000 f868 	bl	8006a5c <__malloc_lock>
 800698c:	f8d8 3000 	ldr.w	r3, [r8]
 8006990:	461c      	mov	r4, r3
 8006992:	bb5c      	cbnz	r4, 80069ec <_malloc_r+0x90>
 8006994:	4629      	mov	r1, r5
 8006996:	4638      	mov	r0, r7
 8006998:	f7ff ffc0 	bl	800691c <sbrk_aligned>
 800699c:	1c43      	adds	r3, r0, #1
 800699e:	4604      	mov	r4, r0
 80069a0:	d155      	bne.n	8006a4e <_malloc_r+0xf2>
 80069a2:	f8d8 4000 	ldr.w	r4, [r8]
 80069a6:	4626      	mov	r6, r4
 80069a8:	2e00      	cmp	r6, #0
 80069aa:	d145      	bne.n	8006a38 <_malloc_r+0xdc>
 80069ac:	2c00      	cmp	r4, #0
 80069ae:	d048      	beq.n	8006a42 <_malloc_r+0xe6>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	4631      	mov	r1, r6
 80069b4:	4638      	mov	r0, r7
 80069b6:	eb04 0903 	add.w	r9, r4, r3
 80069ba:	f000 fe4d 	bl	8007658 <_sbrk_r>
 80069be:	4581      	cmp	r9, r0
 80069c0:	d13f      	bne.n	8006a42 <_malloc_r+0xe6>
 80069c2:	6821      	ldr	r1, [r4, #0]
 80069c4:	1a6d      	subs	r5, r5, r1
 80069c6:	4629      	mov	r1, r5
 80069c8:	4638      	mov	r0, r7
 80069ca:	f7ff ffa7 	bl	800691c <sbrk_aligned>
 80069ce:	3001      	adds	r0, #1
 80069d0:	d037      	beq.n	8006a42 <_malloc_r+0xe6>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	442b      	add	r3, r5
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	f8d8 3000 	ldr.w	r3, [r8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d038      	beq.n	8006a52 <_malloc_r+0xf6>
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	42a2      	cmp	r2, r4
 80069e4:	d12b      	bne.n	8006a3e <_malloc_r+0xe2>
 80069e6:	2200      	movs	r2, #0
 80069e8:	605a      	str	r2, [r3, #4]
 80069ea:	e00f      	b.n	8006a0c <_malloc_r+0xb0>
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	1b52      	subs	r2, r2, r5
 80069f0:	d41f      	bmi.n	8006a32 <_malloc_r+0xd6>
 80069f2:	2a0b      	cmp	r2, #11
 80069f4:	d917      	bls.n	8006a26 <_malloc_r+0xca>
 80069f6:	1961      	adds	r1, r4, r5
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	6025      	str	r5, [r4, #0]
 80069fc:	bf18      	it	ne
 80069fe:	6059      	strne	r1, [r3, #4]
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	bf08      	it	eq
 8006a04:	f8c8 1000 	streq.w	r1, [r8]
 8006a08:	5162      	str	r2, [r4, r5]
 8006a0a:	604b      	str	r3, [r1, #4]
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f104 060b 	add.w	r6, r4, #11
 8006a12:	f000 f829 	bl	8006a68 <__malloc_unlock>
 8006a16:	f026 0607 	bic.w	r6, r6, #7
 8006a1a:	1d23      	adds	r3, r4, #4
 8006a1c:	1af2      	subs	r2, r6, r3
 8006a1e:	d0ae      	beq.n	800697e <_malloc_r+0x22>
 8006a20:	1b9b      	subs	r3, r3, r6
 8006a22:	50a3      	str	r3, [r4, r2]
 8006a24:	e7ab      	b.n	800697e <_malloc_r+0x22>
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	6862      	ldr	r2, [r4, #4]
 8006a2a:	d1dd      	bne.n	80069e8 <_malloc_r+0x8c>
 8006a2c:	f8c8 2000 	str.w	r2, [r8]
 8006a30:	e7ec      	b.n	8006a0c <_malloc_r+0xb0>
 8006a32:	4623      	mov	r3, r4
 8006a34:	6864      	ldr	r4, [r4, #4]
 8006a36:	e7ac      	b.n	8006992 <_malloc_r+0x36>
 8006a38:	4634      	mov	r4, r6
 8006a3a:	6876      	ldr	r6, [r6, #4]
 8006a3c:	e7b4      	b.n	80069a8 <_malloc_r+0x4c>
 8006a3e:	4613      	mov	r3, r2
 8006a40:	e7cc      	b.n	80069dc <_malloc_r+0x80>
 8006a42:	230c      	movs	r3, #12
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	4638      	mov	r0, r7
 8006a48:	f000 f80e 	bl	8006a68 <__malloc_unlock>
 8006a4c:	e797      	b.n	800697e <_malloc_r+0x22>
 8006a4e:	6025      	str	r5, [r4, #0]
 8006a50:	e7dc      	b.n	8006a0c <_malloc_r+0xb0>
 8006a52:	605b      	str	r3, [r3, #4]
 8006a54:	deff      	udf	#255	; 0xff
 8006a56:	bf00      	nop
 8006a58:	20004494 	.word	0x20004494

08006a5c <__malloc_lock>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	; (8006a64 <__malloc_lock+0x8>)
 8006a5e:	f7ff b87e 	b.w	8005b5e <__retarget_lock_acquire_recursive>
 8006a62:	bf00      	nop
 8006a64:	20004490 	.word	0x20004490

08006a68 <__malloc_unlock>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__malloc_unlock+0x8>)
 8006a6a:	f7ff b879 	b.w	8005b60 <__retarget_lock_release_recursive>
 8006a6e:	bf00      	nop
 8006a70:	20004490 	.word	0x20004490

08006a74 <_Balloc>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	69c6      	ldr	r6, [r0, #28]
 8006a78:	4604      	mov	r4, r0
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	b976      	cbnz	r6, 8006a9c <_Balloc+0x28>
 8006a7e:	2010      	movs	r0, #16
 8006a80:	f7ff ff44 	bl	800690c <malloc>
 8006a84:	4602      	mov	r2, r0
 8006a86:	61e0      	str	r0, [r4, #28]
 8006a88:	b920      	cbnz	r0, 8006a94 <_Balloc+0x20>
 8006a8a:	4b18      	ldr	r3, [pc, #96]	; (8006aec <_Balloc+0x78>)
 8006a8c:	4818      	ldr	r0, [pc, #96]	; (8006af0 <_Balloc+0x7c>)
 8006a8e:	216b      	movs	r1, #107	; 0x6b
 8006a90:	f000 fdf2 	bl	8007678 <__assert_func>
 8006a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a98:	6006      	str	r6, [r0, #0]
 8006a9a:	60c6      	str	r6, [r0, #12]
 8006a9c:	69e6      	ldr	r6, [r4, #28]
 8006a9e:	68f3      	ldr	r3, [r6, #12]
 8006aa0:	b183      	cbz	r3, 8006ac4 <_Balloc+0x50>
 8006aa2:	69e3      	ldr	r3, [r4, #28]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006aaa:	b9b8      	cbnz	r0, 8006adc <_Balloc+0x68>
 8006aac:	2101      	movs	r1, #1
 8006aae:	fa01 f605 	lsl.w	r6, r1, r5
 8006ab2:	1d72      	adds	r2, r6, #5
 8006ab4:	0092      	lsls	r2, r2, #2
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fdfc 	bl	80076b4 <_calloc_r>
 8006abc:	b160      	cbz	r0, 8006ad8 <_Balloc+0x64>
 8006abe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ac2:	e00e      	b.n	8006ae2 <_Balloc+0x6e>
 8006ac4:	2221      	movs	r2, #33	; 0x21
 8006ac6:	2104      	movs	r1, #4
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fdf3 	bl	80076b4 <_calloc_r>
 8006ace:	69e3      	ldr	r3, [r4, #28]
 8006ad0:	60f0      	str	r0, [r6, #12]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e4      	bne.n	8006aa2 <_Balloc+0x2e>
 8006ad8:	2000      	movs	r0, #0
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	6802      	ldr	r2, [r0, #0]
 8006ade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ae8:	e7f7      	b.n	8006ada <_Balloc+0x66>
 8006aea:	bf00      	nop
 8006aec:	08007f8d 	.word	0x08007f8d
 8006af0:	0800800d 	.word	0x0800800d

08006af4 <_Bfree>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	69c6      	ldr	r6, [r0, #28]
 8006af8:	4605      	mov	r5, r0
 8006afa:	460c      	mov	r4, r1
 8006afc:	b976      	cbnz	r6, 8006b1c <_Bfree+0x28>
 8006afe:	2010      	movs	r0, #16
 8006b00:	f7ff ff04 	bl	800690c <malloc>
 8006b04:	4602      	mov	r2, r0
 8006b06:	61e8      	str	r0, [r5, #28]
 8006b08:	b920      	cbnz	r0, 8006b14 <_Bfree+0x20>
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <_Bfree+0x3c>)
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <_Bfree+0x40>)
 8006b0e:	218f      	movs	r1, #143	; 0x8f
 8006b10:	f000 fdb2 	bl	8007678 <__assert_func>
 8006b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b18:	6006      	str	r6, [r0, #0]
 8006b1a:	60c6      	str	r6, [r0, #12]
 8006b1c:	b13c      	cbz	r4, 8006b2e <_Bfree+0x3a>
 8006b1e:	69eb      	ldr	r3, [r5, #28]
 8006b20:	6862      	ldr	r2, [r4, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b28:	6021      	str	r1, [r4, #0]
 8006b2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	08007f8d 	.word	0x08007f8d
 8006b34:	0800800d 	.word	0x0800800d

08006b38 <__multadd>:
 8006b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3c:	690d      	ldr	r5, [r1, #16]
 8006b3e:	4607      	mov	r7, r0
 8006b40:	460c      	mov	r4, r1
 8006b42:	461e      	mov	r6, r3
 8006b44:	f101 0c14 	add.w	ip, r1, #20
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f8dc 3000 	ldr.w	r3, [ip]
 8006b4e:	b299      	uxth	r1, r3
 8006b50:	fb02 6101 	mla	r1, r2, r1, r6
 8006b54:	0c1e      	lsrs	r6, r3, #16
 8006b56:	0c0b      	lsrs	r3, r1, #16
 8006b58:	fb02 3306 	mla	r3, r2, r6, r3
 8006b5c:	b289      	uxth	r1, r1
 8006b5e:	3001      	adds	r0, #1
 8006b60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b64:	4285      	cmp	r5, r0
 8006b66:	f84c 1b04 	str.w	r1, [ip], #4
 8006b6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b6e:	dcec      	bgt.n	8006b4a <__multadd+0x12>
 8006b70:	b30e      	cbz	r6, 8006bb6 <__multadd+0x7e>
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	42ab      	cmp	r3, r5
 8006b76:	dc19      	bgt.n	8006bac <__multadd+0x74>
 8006b78:	6861      	ldr	r1, [r4, #4]
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	3101      	adds	r1, #1
 8006b7e:	f7ff ff79 	bl	8006a74 <_Balloc>
 8006b82:	4680      	mov	r8, r0
 8006b84:	b928      	cbnz	r0, 8006b92 <__multadd+0x5a>
 8006b86:	4602      	mov	r2, r0
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <__multadd+0x84>)
 8006b8a:	480d      	ldr	r0, [pc, #52]	; (8006bc0 <__multadd+0x88>)
 8006b8c:	21ba      	movs	r1, #186	; 0xba
 8006b8e:	f000 fd73 	bl	8007678 <__assert_func>
 8006b92:	6922      	ldr	r2, [r4, #16]
 8006b94:	3202      	adds	r2, #2
 8006b96:	f104 010c 	add.w	r1, r4, #12
 8006b9a:	0092      	lsls	r2, r2, #2
 8006b9c:	300c      	adds	r0, #12
 8006b9e:	f7fe ffe0 	bl	8005b62 <memcpy>
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff ffa5 	bl	8006af4 <_Bfree>
 8006baa:	4644      	mov	r4, r8
 8006bac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bb0:	3501      	adds	r5, #1
 8006bb2:	615e      	str	r6, [r3, #20]
 8006bb4:	6125      	str	r5, [r4, #16]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bbc:	08007ffc 	.word	0x08007ffc
 8006bc0:	0800800d 	.word	0x0800800d

08006bc4 <__hi0bits>:
 8006bc4:	0c03      	lsrs	r3, r0, #16
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	b9d3      	cbnz	r3, 8006c00 <__hi0bits+0x3c>
 8006bca:	0400      	lsls	r0, r0, #16
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006bd2:	bf04      	itt	eq
 8006bd4:	0200      	lsleq	r0, r0, #8
 8006bd6:	3308      	addeq	r3, #8
 8006bd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bdc:	bf04      	itt	eq
 8006bde:	0100      	lsleq	r0, r0, #4
 8006be0:	3304      	addeq	r3, #4
 8006be2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006be6:	bf04      	itt	eq
 8006be8:	0080      	lsleq	r0, r0, #2
 8006bea:	3302      	addeq	r3, #2
 8006bec:	2800      	cmp	r0, #0
 8006bee:	db05      	blt.n	8006bfc <__hi0bits+0x38>
 8006bf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006bf4:	f103 0301 	add.w	r3, r3, #1
 8006bf8:	bf08      	it	eq
 8006bfa:	2320      	moveq	r3, #32
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	4770      	bx	lr
 8006c00:	2300      	movs	r3, #0
 8006c02:	e7e4      	b.n	8006bce <__hi0bits+0xa>

08006c04 <__lo0bits>:
 8006c04:	6803      	ldr	r3, [r0, #0]
 8006c06:	f013 0207 	ands.w	r2, r3, #7
 8006c0a:	d00c      	beq.n	8006c26 <__lo0bits+0x22>
 8006c0c:	07d9      	lsls	r1, r3, #31
 8006c0e:	d422      	bmi.n	8006c56 <__lo0bits+0x52>
 8006c10:	079a      	lsls	r2, r3, #30
 8006c12:	bf49      	itett	mi
 8006c14:	085b      	lsrmi	r3, r3, #1
 8006c16:	089b      	lsrpl	r3, r3, #2
 8006c18:	6003      	strmi	r3, [r0, #0]
 8006c1a:	2201      	movmi	r2, #1
 8006c1c:	bf5c      	itt	pl
 8006c1e:	6003      	strpl	r3, [r0, #0]
 8006c20:	2202      	movpl	r2, #2
 8006c22:	4610      	mov	r0, r2
 8006c24:	4770      	bx	lr
 8006c26:	b299      	uxth	r1, r3
 8006c28:	b909      	cbnz	r1, 8006c2e <__lo0bits+0x2a>
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	b2d9      	uxtb	r1, r3
 8006c30:	b909      	cbnz	r1, 8006c36 <__lo0bits+0x32>
 8006c32:	3208      	adds	r2, #8
 8006c34:	0a1b      	lsrs	r3, r3, #8
 8006c36:	0719      	lsls	r1, r3, #28
 8006c38:	bf04      	itt	eq
 8006c3a:	091b      	lsreq	r3, r3, #4
 8006c3c:	3204      	addeq	r2, #4
 8006c3e:	0799      	lsls	r1, r3, #30
 8006c40:	bf04      	itt	eq
 8006c42:	089b      	lsreq	r3, r3, #2
 8006c44:	3202      	addeq	r2, #2
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	d403      	bmi.n	8006c52 <__lo0bits+0x4e>
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	f102 0201 	add.w	r2, r2, #1
 8006c50:	d003      	beq.n	8006c5a <__lo0bits+0x56>
 8006c52:	6003      	str	r3, [r0, #0]
 8006c54:	e7e5      	b.n	8006c22 <__lo0bits+0x1e>
 8006c56:	2200      	movs	r2, #0
 8006c58:	e7e3      	b.n	8006c22 <__lo0bits+0x1e>
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	e7e1      	b.n	8006c22 <__lo0bits+0x1e>
	...

08006c60 <__i2b>:
 8006c60:	b510      	push	{r4, lr}
 8006c62:	460c      	mov	r4, r1
 8006c64:	2101      	movs	r1, #1
 8006c66:	f7ff ff05 	bl	8006a74 <_Balloc>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	b928      	cbnz	r0, 8006c7a <__i2b+0x1a>
 8006c6e:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <__i2b+0x24>)
 8006c70:	4805      	ldr	r0, [pc, #20]	; (8006c88 <__i2b+0x28>)
 8006c72:	f240 1145 	movw	r1, #325	; 0x145
 8006c76:	f000 fcff 	bl	8007678 <__assert_func>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	6144      	str	r4, [r0, #20]
 8006c7e:	6103      	str	r3, [r0, #16]
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	bf00      	nop
 8006c84:	08007ffc 	.word	0x08007ffc
 8006c88:	0800800d 	.word	0x0800800d

08006c8c <__multiply>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	4691      	mov	r9, r2
 8006c92:	690a      	ldr	r2, [r1, #16]
 8006c94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	bfb8      	it	lt
 8006c9c:	460b      	movlt	r3, r1
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	bfbc      	itt	lt
 8006ca2:	464c      	movlt	r4, r9
 8006ca4:	4699      	movlt	r9, r3
 8006ca6:	6927      	ldr	r7, [r4, #16]
 8006ca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006cac:	68a3      	ldr	r3, [r4, #8]
 8006cae:	6861      	ldr	r1, [r4, #4]
 8006cb0:	eb07 060a 	add.w	r6, r7, sl
 8006cb4:	42b3      	cmp	r3, r6
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	bfb8      	it	lt
 8006cba:	3101      	addlt	r1, #1
 8006cbc:	f7ff feda 	bl	8006a74 <_Balloc>
 8006cc0:	b930      	cbnz	r0, 8006cd0 <__multiply+0x44>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4b44      	ldr	r3, [pc, #272]	; (8006dd8 <__multiply+0x14c>)
 8006cc6:	4845      	ldr	r0, [pc, #276]	; (8006ddc <__multiply+0x150>)
 8006cc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ccc:	f000 fcd4 	bl	8007678 <__assert_func>
 8006cd0:	f100 0514 	add.w	r5, r0, #20
 8006cd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cd8:	462b      	mov	r3, r5
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4543      	cmp	r3, r8
 8006cde:	d321      	bcc.n	8006d24 <__multiply+0x98>
 8006ce0:	f104 0314 	add.w	r3, r4, #20
 8006ce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ce8:	f109 0314 	add.w	r3, r9, #20
 8006cec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006cf0:	9202      	str	r2, [sp, #8]
 8006cf2:	1b3a      	subs	r2, r7, r4
 8006cf4:	3a15      	subs	r2, #21
 8006cf6:	f022 0203 	bic.w	r2, r2, #3
 8006cfa:	3204      	adds	r2, #4
 8006cfc:	f104 0115 	add.w	r1, r4, #21
 8006d00:	428f      	cmp	r7, r1
 8006d02:	bf38      	it	cc
 8006d04:	2204      	movcc	r2, #4
 8006d06:	9201      	str	r2, [sp, #4]
 8006d08:	9a02      	ldr	r2, [sp, #8]
 8006d0a:	9303      	str	r3, [sp, #12]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d80c      	bhi.n	8006d2a <__multiply+0x9e>
 8006d10:	2e00      	cmp	r6, #0
 8006d12:	dd03      	ble.n	8006d1c <__multiply+0x90>
 8006d14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d05b      	beq.n	8006dd4 <__multiply+0x148>
 8006d1c:	6106      	str	r6, [r0, #16]
 8006d1e:	b005      	add	sp, #20
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	f843 2b04 	str.w	r2, [r3], #4
 8006d28:	e7d8      	b.n	8006cdc <__multiply+0x50>
 8006d2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d2e:	f1ba 0f00 	cmp.w	sl, #0
 8006d32:	d024      	beq.n	8006d7e <__multiply+0xf2>
 8006d34:	f104 0e14 	add.w	lr, r4, #20
 8006d38:	46a9      	mov	r9, r5
 8006d3a:	f04f 0c00 	mov.w	ip, #0
 8006d3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d42:	f8d9 1000 	ldr.w	r1, [r9]
 8006d46:	fa1f fb82 	uxth.w	fp, r2
 8006d4a:	b289      	uxth	r1, r1
 8006d4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d54:	f8d9 2000 	ldr.w	r2, [r9]
 8006d58:	4461      	add	r1, ip
 8006d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d66:	b289      	uxth	r1, r1
 8006d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d6c:	4577      	cmp	r7, lr
 8006d6e:	f849 1b04 	str.w	r1, [r9], #4
 8006d72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d76:	d8e2      	bhi.n	8006d3e <__multiply+0xb2>
 8006d78:	9a01      	ldr	r2, [sp, #4]
 8006d7a:	f845 c002 	str.w	ip, [r5, r2]
 8006d7e:	9a03      	ldr	r2, [sp, #12]
 8006d80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d84:	3304      	adds	r3, #4
 8006d86:	f1b9 0f00 	cmp.w	r9, #0
 8006d8a:	d021      	beq.n	8006dd0 <__multiply+0x144>
 8006d8c:	6829      	ldr	r1, [r5, #0]
 8006d8e:	f104 0c14 	add.w	ip, r4, #20
 8006d92:	46ae      	mov	lr, r5
 8006d94:	f04f 0a00 	mov.w	sl, #0
 8006d98:	f8bc b000 	ldrh.w	fp, [ip]
 8006d9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006da0:	fb09 220b 	mla	r2, r9, fp, r2
 8006da4:	4452      	add	r2, sl
 8006da6:	b289      	uxth	r1, r1
 8006da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dac:	f84e 1b04 	str.w	r1, [lr], #4
 8006db0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006db4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006db8:	f8be 1000 	ldrh.w	r1, [lr]
 8006dbc:	fb09 110a 	mla	r1, r9, sl, r1
 8006dc0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006dc4:	4567      	cmp	r7, ip
 8006dc6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006dca:	d8e5      	bhi.n	8006d98 <__multiply+0x10c>
 8006dcc:	9a01      	ldr	r2, [sp, #4]
 8006dce:	50a9      	str	r1, [r5, r2]
 8006dd0:	3504      	adds	r5, #4
 8006dd2:	e799      	b.n	8006d08 <__multiply+0x7c>
 8006dd4:	3e01      	subs	r6, #1
 8006dd6:	e79b      	b.n	8006d10 <__multiply+0x84>
 8006dd8:	08007ffc 	.word	0x08007ffc
 8006ddc:	0800800d 	.word	0x0800800d

08006de0 <__pow5mult>:
 8006de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006de4:	4615      	mov	r5, r2
 8006de6:	f012 0203 	ands.w	r2, r2, #3
 8006dea:	4606      	mov	r6, r0
 8006dec:	460f      	mov	r7, r1
 8006dee:	d007      	beq.n	8006e00 <__pow5mult+0x20>
 8006df0:	4c25      	ldr	r4, [pc, #148]	; (8006e88 <__pow5mult+0xa8>)
 8006df2:	3a01      	subs	r2, #1
 8006df4:	2300      	movs	r3, #0
 8006df6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dfa:	f7ff fe9d 	bl	8006b38 <__multadd>
 8006dfe:	4607      	mov	r7, r0
 8006e00:	10ad      	asrs	r5, r5, #2
 8006e02:	d03d      	beq.n	8006e80 <__pow5mult+0xa0>
 8006e04:	69f4      	ldr	r4, [r6, #28]
 8006e06:	b97c      	cbnz	r4, 8006e28 <__pow5mult+0x48>
 8006e08:	2010      	movs	r0, #16
 8006e0a:	f7ff fd7f 	bl	800690c <malloc>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	61f0      	str	r0, [r6, #28]
 8006e12:	b928      	cbnz	r0, 8006e20 <__pow5mult+0x40>
 8006e14:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <__pow5mult+0xac>)
 8006e16:	481e      	ldr	r0, [pc, #120]	; (8006e90 <__pow5mult+0xb0>)
 8006e18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006e1c:	f000 fc2c 	bl	8007678 <__assert_func>
 8006e20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e24:	6004      	str	r4, [r0, #0]
 8006e26:	60c4      	str	r4, [r0, #12]
 8006e28:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006e2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e30:	b94c      	cbnz	r4, 8006e46 <__pow5mult+0x66>
 8006e32:	f240 2171 	movw	r1, #625	; 0x271
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff ff12 	bl	8006c60 <__i2b>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e42:	4604      	mov	r4, r0
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	f04f 0900 	mov.w	r9, #0
 8006e4a:	07eb      	lsls	r3, r5, #31
 8006e4c:	d50a      	bpl.n	8006e64 <__pow5mult+0x84>
 8006e4e:	4639      	mov	r1, r7
 8006e50:	4622      	mov	r2, r4
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ff1a 	bl	8006c8c <__multiply>
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7ff fe49 	bl	8006af4 <_Bfree>
 8006e62:	4647      	mov	r7, r8
 8006e64:	106d      	asrs	r5, r5, #1
 8006e66:	d00b      	beq.n	8006e80 <__pow5mult+0xa0>
 8006e68:	6820      	ldr	r0, [r4, #0]
 8006e6a:	b938      	cbnz	r0, 8006e7c <__pow5mult+0x9c>
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff ff0b 	bl	8006c8c <__multiply>
 8006e76:	6020      	str	r0, [r4, #0]
 8006e78:	f8c0 9000 	str.w	r9, [r0]
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	e7e4      	b.n	8006e4a <__pow5mult+0x6a>
 8006e80:	4638      	mov	r0, r7
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	bf00      	nop
 8006e88:	08008158 	.word	0x08008158
 8006e8c:	08007f8d 	.word	0x08007f8d
 8006e90:	0800800d 	.word	0x0800800d

08006e94 <__lshift>:
 8006e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	6849      	ldr	r1, [r1, #4]
 8006e9c:	6923      	ldr	r3, [r4, #16]
 8006e9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ea2:	68a3      	ldr	r3, [r4, #8]
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	4691      	mov	r9, r2
 8006ea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006eac:	f108 0601 	add.w	r6, r8, #1
 8006eb0:	42b3      	cmp	r3, r6
 8006eb2:	db0b      	blt.n	8006ecc <__lshift+0x38>
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff fddd 	bl	8006a74 <_Balloc>
 8006eba:	4605      	mov	r5, r0
 8006ebc:	b948      	cbnz	r0, 8006ed2 <__lshift+0x3e>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b28      	ldr	r3, [pc, #160]	; (8006f64 <__lshift+0xd0>)
 8006ec2:	4829      	ldr	r0, [pc, #164]	; (8006f68 <__lshift+0xd4>)
 8006ec4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006ec8:	f000 fbd6 	bl	8007678 <__assert_func>
 8006ecc:	3101      	adds	r1, #1
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	e7ee      	b.n	8006eb0 <__lshift+0x1c>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f100 0114 	add.w	r1, r0, #20
 8006ed8:	f100 0210 	add.w	r2, r0, #16
 8006edc:	4618      	mov	r0, r3
 8006ede:	4553      	cmp	r3, sl
 8006ee0:	db33      	blt.n	8006f4a <__lshift+0xb6>
 8006ee2:	6920      	ldr	r0, [r4, #16]
 8006ee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ee8:	f104 0314 	add.w	r3, r4, #20
 8006eec:	f019 091f 	ands.w	r9, r9, #31
 8006ef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ef4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ef8:	d02b      	beq.n	8006f52 <__lshift+0xbe>
 8006efa:	f1c9 0e20 	rsb	lr, r9, #32
 8006efe:	468a      	mov	sl, r1
 8006f00:	2200      	movs	r2, #0
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	fa00 f009 	lsl.w	r0, r0, r9
 8006f08:	4310      	orrs	r0, r2
 8006f0a:	f84a 0b04 	str.w	r0, [sl], #4
 8006f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f12:	459c      	cmp	ip, r3
 8006f14:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f18:	d8f3      	bhi.n	8006f02 <__lshift+0x6e>
 8006f1a:	ebac 0304 	sub.w	r3, ip, r4
 8006f1e:	3b15      	subs	r3, #21
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	3304      	adds	r3, #4
 8006f26:	f104 0015 	add.w	r0, r4, #21
 8006f2a:	4584      	cmp	ip, r0
 8006f2c:	bf38      	it	cc
 8006f2e:	2304      	movcc	r3, #4
 8006f30:	50ca      	str	r2, [r1, r3]
 8006f32:	b10a      	cbz	r2, 8006f38 <__lshift+0xa4>
 8006f34:	f108 0602 	add.w	r6, r8, #2
 8006f38:	3e01      	subs	r6, #1
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	612e      	str	r6, [r5, #16]
 8006f3e:	4621      	mov	r1, r4
 8006f40:	f7ff fdd8 	bl	8006af4 <_Bfree>
 8006f44:	4628      	mov	r0, r5
 8006f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f4e:	3301      	adds	r3, #1
 8006f50:	e7c5      	b.n	8006ede <__lshift+0x4a>
 8006f52:	3904      	subs	r1, #4
 8006f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f5c:	459c      	cmp	ip, r3
 8006f5e:	d8f9      	bhi.n	8006f54 <__lshift+0xc0>
 8006f60:	e7ea      	b.n	8006f38 <__lshift+0xa4>
 8006f62:	bf00      	nop
 8006f64:	08007ffc 	.word	0x08007ffc
 8006f68:	0800800d 	.word	0x0800800d

08006f6c <__mcmp>:
 8006f6c:	b530      	push	{r4, r5, lr}
 8006f6e:	6902      	ldr	r2, [r0, #16]
 8006f70:	690c      	ldr	r4, [r1, #16]
 8006f72:	1b12      	subs	r2, r2, r4
 8006f74:	d10e      	bne.n	8006f94 <__mcmp+0x28>
 8006f76:	f100 0314 	add.w	r3, r0, #20
 8006f7a:	3114      	adds	r1, #20
 8006f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f8c:	42a5      	cmp	r5, r4
 8006f8e:	d003      	beq.n	8006f98 <__mcmp+0x2c>
 8006f90:	d305      	bcc.n	8006f9e <__mcmp+0x32>
 8006f92:	2201      	movs	r2, #1
 8006f94:	4610      	mov	r0, r2
 8006f96:	bd30      	pop	{r4, r5, pc}
 8006f98:	4283      	cmp	r3, r0
 8006f9a:	d3f3      	bcc.n	8006f84 <__mcmp+0x18>
 8006f9c:	e7fa      	b.n	8006f94 <__mcmp+0x28>
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa2:	e7f7      	b.n	8006f94 <__mcmp+0x28>

08006fa4 <__mdiff>:
 8006fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	4606      	mov	r6, r0
 8006fac:	4611      	mov	r1, r2
 8006fae:	4620      	mov	r0, r4
 8006fb0:	4690      	mov	r8, r2
 8006fb2:	f7ff ffdb 	bl	8006f6c <__mcmp>
 8006fb6:	1e05      	subs	r5, r0, #0
 8006fb8:	d110      	bne.n	8006fdc <__mdiff+0x38>
 8006fba:	4629      	mov	r1, r5
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff fd59 	bl	8006a74 <_Balloc>
 8006fc2:	b930      	cbnz	r0, 8006fd2 <__mdiff+0x2e>
 8006fc4:	4b3a      	ldr	r3, [pc, #232]	; (80070b0 <__mdiff+0x10c>)
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	f240 2137 	movw	r1, #567	; 0x237
 8006fcc:	4839      	ldr	r0, [pc, #228]	; (80070b4 <__mdiff+0x110>)
 8006fce:	f000 fb53 	bl	8007678 <__assert_func>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	bfa4      	itt	ge
 8006fde:	4643      	movge	r3, r8
 8006fe0:	46a0      	movge	r8, r4
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fe8:	bfa6      	itte	ge
 8006fea:	461c      	movge	r4, r3
 8006fec:	2500      	movge	r5, #0
 8006fee:	2501      	movlt	r5, #1
 8006ff0:	f7ff fd40 	bl	8006a74 <_Balloc>
 8006ff4:	b920      	cbnz	r0, 8007000 <__mdiff+0x5c>
 8006ff6:	4b2e      	ldr	r3, [pc, #184]	; (80070b0 <__mdiff+0x10c>)
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	f240 2145 	movw	r1, #581	; 0x245
 8006ffe:	e7e5      	b.n	8006fcc <__mdiff+0x28>
 8007000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007004:	6926      	ldr	r6, [r4, #16]
 8007006:	60c5      	str	r5, [r0, #12]
 8007008:	f104 0914 	add.w	r9, r4, #20
 800700c:	f108 0514 	add.w	r5, r8, #20
 8007010:	f100 0e14 	add.w	lr, r0, #20
 8007014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800701c:	f108 0210 	add.w	r2, r8, #16
 8007020:	46f2      	mov	sl, lr
 8007022:	2100      	movs	r1, #0
 8007024:	f859 3b04 	ldr.w	r3, [r9], #4
 8007028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800702c:	fa11 f88b 	uxtah	r8, r1, fp
 8007030:	b299      	uxth	r1, r3
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	eba8 0801 	sub.w	r8, r8, r1
 8007038:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800703c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007040:	fa1f f888 	uxth.w	r8, r8
 8007044:	1419      	asrs	r1, r3, #16
 8007046:	454e      	cmp	r6, r9
 8007048:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800704c:	f84a 3b04 	str.w	r3, [sl], #4
 8007050:	d8e8      	bhi.n	8007024 <__mdiff+0x80>
 8007052:	1b33      	subs	r3, r6, r4
 8007054:	3b15      	subs	r3, #21
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	3304      	adds	r3, #4
 800705c:	3415      	adds	r4, #21
 800705e:	42a6      	cmp	r6, r4
 8007060:	bf38      	it	cc
 8007062:	2304      	movcc	r3, #4
 8007064:	441d      	add	r5, r3
 8007066:	4473      	add	r3, lr
 8007068:	469e      	mov	lr, r3
 800706a:	462e      	mov	r6, r5
 800706c:	4566      	cmp	r6, ip
 800706e:	d30e      	bcc.n	800708e <__mdiff+0xea>
 8007070:	f10c 0203 	add.w	r2, ip, #3
 8007074:	1b52      	subs	r2, r2, r5
 8007076:	f022 0203 	bic.w	r2, r2, #3
 800707a:	3d03      	subs	r5, #3
 800707c:	45ac      	cmp	ip, r5
 800707e:	bf38      	it	cc
 8007080:	2200      	movcc	r2, #0
 8007082:	4413      	add	r3, r2
 8007084:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007088:	b17a      	cbz	r2, 80070aa <__mdiff+0x106>
 800708a:	6107      	str	r7, [r0, #16]
 800708c:	e7a4      	b.n	8006fd8 <__mdiff+0x34>
 800708e:	f856 8b04 	ldr.w	r8, [r6], #4
 8007092:	fa11 f288 	uxtah	r2, r1, r8
 8007096:	1414      	asrs	r4, r2, #16
 8007098:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800709c:	b292      	uxth	r2, r2
 800709e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80070a2:	f84e 2b04 	str.w	r2, [lr], #4
 80070a6:	1421      	asrs	r1, r4, #16
 80070a8:	e7e0      	b.n	800706c <__mdiff+0xc8>
 80070aa:	3f01      	subs	r7, #1
 80070ac:	e7ea      	b.n	8007084 <__mdiff+0xe0>
 80070ae:	bf00      	nop
 80070b0:	08007ffc 	.word	0x08007ffc
 80070b4:	0800800d 	.word	0x0800800d

080070b8 <__d2b>:
 80070b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070bc:	460f      	mov	r7, r1
 80070be:	2101      	movs	r1, #1
 80070c0:	ec59 8b10 	vmov	r8, r9, d0
 80070c4:	4616      	mov	r6, r2
 80070c6:	f7ff fcd5 	bl	8006a74 <_Balloc>
 80070ca:	4604      	mov	r4, r0
 80070cc:	b930      	cbnz	r0, 80070dc <__d2b+0x24>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b24      	ldr	r3, [pc, #144]	; (8007164 <__d2b+0xac>)
 80070d2:	4825      	ldr	r0, [pc, #148]	; (8007168 <__d2b+0xb0>)
 80070d4:	f240 310f 	movw	r1, #783	; 0x30f
 80070d8:	f000 face 	bl	8007678 <__assert_func>
 80070dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070e4:	bb2d      	cbnz	r5, 8007132 <__d2b+0x7a>
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	f1b8 0300 	subs.w	r3, r8, #0
 80070ec:	d026      	beq.n	800713c <__d2b+0x84>
 80070ee:	4668      	mov	r0, sp
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	f7ff fd87 	bl	8006c04 <__lo0bits>
 80070f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070fa:	b1e8      	cbz	r0, 8007138 <__d2b+0x80>
 80070fc:	f1c0 0320 	rsb	r3, r0, #32
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	430b      	orrs	r3, r1
 8007106:	40c2      	lsrs	r2, r0
 8007108:	6163      	str	r3, [r4, #20]
 800710a:	9201      	str	r2, [sp, #4]
 800710c:	9b01      	ldr	r3, [sp, #4]
 800710e:	61a3      	str	r3, [r4, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bf14      	ite	ne
 8007114:	2202      	movne	r2, #2
 8007116:	2201      	moveq	r2, #1
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	b1bd      	cbz	r5, 800714c <__d2b+0x94>
 800711c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007120:	4405      	add	r5, r0
 8007122:	603d      	str	r5, [r7, #0]
 8007124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007128:	6030      	str	r0, [r6, #0]
 800712a:	4620      	mov	r0, r4
 800712c:	b003      	add	sp, #12
 800712e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007136:	e7d6      	b.n	80070e6 <__d2b+0x2e>
 8007138:	6161      	str	r1, [r4, #20]
 800713a:	e7e7      	b.n	800710c <__d2b+0x54>
 800713c:	a801      	add	r0, sp, #4
 800713e:	f7ff fd61 	bl	8006c04 <__lo0bits>
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6163      	str	r3, [r4, #20]
 8007146:	3020      	adds	r0, #32
 8007148:	2201      	movs	r2, #1
 800714a:	e7e5      	b.n	8007118 <__d2b+0x60>
 800714c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007150:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007154:	6038      	str	r0, [r7, #0]
 8007156:	6918      	ldr	r0, [r3, #16]
 8007158:	f7ff fd34 	bl	8006bc4 <__hi0bits>
 800715c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007160:	e7e2      	b.n	8007128 <__d2b+0x70>
 8007162:	bf00      	nop
 8007164:	08007ffc 	.word	0x08007ffc
 8007168:	0800800d 	.word	0x0800800d

0800716c <__sfputc_r>:
 800716c:	6893      	ldr	r3, [r2, #8]
 800716e:	3b01      	subs	r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	b410      	push	{r4}
 8007174:	6093      	str	r3, [r2, #8]
 8007176:	da08      	bge.n	800718a <__sfputc_r+0x1e>
 8007178:	6994      	ldr	r4, [r2, #24]
 800717a:	42a3      	cmp	r3, r4
 800717c:	db01      	blt.n	8007182 <__sfputc_r+0x16>
 800717e:	290a      	cmp	r1, #10
 8007180:	d103      	bne.n	800718a <__sfputc_r+0x1e>
 8007182:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007186:	f7fe bb82 	b.w	800588e <__swbuf_r>
 800718a:	6813      	ldr	r3, [r2, #0]
 800718c:	1c58      	adds	r0, r3, #1
 800718e:	6010      	str	r0, [r2, #0]
 8007190:	7019      	strb	r1, [r3, #0]
 8007192:	4608      	mov	r0, r1
 8007194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007198:	4770      	bx	lr

0800719a <__sfputs_r>:
 800719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	4614      	mov	r4, r2
 80071a2:	18d5      	adds	r5, r2, r3
 80071a4:	42ac      	cmp	r4, r5
 80071a6:	d101      	bne.n	80071ac <__sfputs_r+0x12>
 80071a8:	2000      	movs	r0, #0
 80071aa:	e007      	b.n	80071bc <__sfputs_r+0x22>
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	463a      	mov	r2, r7
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff ffda 	bl	800716c <__sfputc_r>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d1f3      	bne.n	80071a4 <__sfputs_r+0xa>
 80071bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071c0 <_vfiprintf_r>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	460d      	mov	r5, r1
 80071c6:	b09d      	sub	sp, #116	; 0x74
 80071c8:	4614      	mov	r4, r2
 80071ca:	4698      	mov	r8, r3
 80071cc:	4606      	mov	r6, r0
 80071ce:	b118      	cbz	r0, 80071d8 <_vfiprintf_r+0x18>
 80071d0:	6a03      	ldr	r3, [r0, #32]
 80071d2:	b90b      	cbnz	r3, 80071d8 <_vfiprintf_r+0x18>
 80071d4:	f7fe fa74 	bl	80056c0 <__sinit>
 80071d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071da:	07d9      	lsls	r1, r3, #31
 80071dc:	d405      	bmi.n	80071ea <_vfiprintf_r+0x2a>
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	059a      	lsls	r2, r3, #22
 80071e2:	d402      	bmi.n	80071ea <_vfiprintf_r+0x2a>
 80071e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071e6:	f7fe fcba 	bl	8005b5e <__retarget_lock_acquire_recursive>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	071b      	lsls	r3, r3, #28
 80071ee:	d501      	bpl.n	80071f4 <_vfiprintf_r+0x34>
 80071f0:	692b      	ldr	r3, [r5, #16]
 80071f2:	b99b      	cbnz	r3, 800721c <_vfiprintf_r+0x5c>
 80071f4:	4629      	mov	r1, r5
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7fe fb86 	bl	8005908 <__swsetup_r>
 80071fc:	b170      	cbz	r0, 800721c <_vfiprintf_r+0x5c>
 80071fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007200:	07dc      	lsls	r4, r3, #31
 8007202:	d504      	bpl.n	800720e <_vfiprintf_r+0x4e>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007208:	b01d      	add	sp, #116	; 0x74
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	89ab      	ldrh	r3, [r5, #12]
 8007210:	0598      	lsls	r0, r3, #22
 8007212:	d4f7      	bmi.n	8007204 <_vfiprintf_r+0x44>
 8007214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007216:	f7fe fca3 	bl	8005b60 <__retarget_lock_release_recursive>
 800721a:	e7f3      	b.n	8007204 <_vfiprintf_r+0x44>
 800721c:	2300      	movs	r3, #0
 800721e:	9309      	str	r3, [sp, #36]	; 0x24
 8007220:	2320      	movs	r3, #32
 8007222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007226:	f8cd 800c 	str.w	r8, [sp, #12]
 800722a:	2330      	movs	r3, #48	; 0x30
 800722c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073e0 <_vfiprintf_r+0x220>
 8007230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007234:	f04f 0901 	mov.w	r9, #1
 8007238:	4623      	mov	r3, r4
 800723a:	469a      	mov	sl, r3
 800723c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007240:	b10a      	cbz	r2, 8007246 <_vfiprintf_r+0x86>
 8007242:	2a25      	cmp	r2, #37	; 0x25
 8007244:	d1f9      	bne.n	800723a <_vfiprintf_r+0x7a>
 8007246:	ebba 0b04 	subs.w	fp, sl, r4
 800724a:	d00b      	beq.n	8007264 <_vfiprintf_r+0xa4>
 800724c:	465b      	mov	r3, fp
 800724e:	4622      	mov	r2, r4
 8007250:	4629      	mov	r1, r5
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff ffa1 	bl	800719a <__sfputs_r>
 8007258:	3001      	adds	r0, #1
 800725a:	f000 80a9 	beq.w	80073b0 <_vfiprintf_r+0x1f0>
 800725e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007260:	445a      	add	r2, fp
 8007262:	9209      	str	r2, [sp, #36]	; 0x24
 8007264:	f89a 3000 	ldrb.w	r3, [sl]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 80a1 	beq.w	80073b0 <_vfiprintf_r+0x1f0>
 800726e:	2300      	movs	r3, #0
 8007270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007278:	f10a 0a01 	add.w	sl, sl, #1
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	9307      	str	r3, [sp, #28]
 8007280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007284:	931a      	str	r3, [sp, #104]	; 0x68
 8007286:	4654      	mov	r4, sl
 8007288:	2205      	movs	r2, #5
 800728a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800728e:	4854      	ldr	r0, [pc, #336]	; (80073e0 <_vfiprintf_r+0x220>)
 8007290:	f7f8 ff9e 	bl	80001d0 <memchr>
 8007294:	9a04      	ldr	r2, [sp, #16]
 8007296:	b9d8      	cbnz	r0, 80072d0 <_vfiprintf_r+0x110>
 8007298:	06d1      	lsls	r1, r2, #27
 800729a:	bf44      	itt	mi
 800729c:	2320      	movmi	r3, #32
 800729e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a2:	0713      	lsls	r3, r2, #28
 80072a4:	bf44      	itt	mi
 80072a6:	232b      	movmi	r3, #43	; 0x2b
 80072a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072ac:	f89a 3000 	ldrb.w	r3, [sl]
 80072b0:	2b2a      	cmp	r3, #42	; 0x2a
 80072b2:	d015      	beq.n	80072e0 <_vfiprintf_r+0x120>
 80072b4:	9a07      	ldr	r2, [sp, #28]
 80072b6:	4654      	mov	r4, sl
 80072b8:	2000      	movs	r0, #0
 80072ba:	f04f 0c0a 	mov.w	ip, #10
 80072be:	4621      	mov	r1, r4
 80072c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072c4:	3b30      	subs	r3, #48	; 0x30
 80072c6:	2b09      	cmp	r3, #9
 80072c8:	d94d      	bls.n	8007366 <_vfiprintf_r+0x1a6>
 80072ca:	b1b0      	cbz	r0, 80072fa <_vfiprintf_r+0x13a>
 80072cc:	9207      	str	r2, [sp, #28]
 80072ce:	e014      	b.n	80072fa <_vfiprintf_r+0x13a>
 80072d0:	eba0 0308 	sub.w	r3, r0, r8
 80072d4:	fa09 f303 	lsl.w	r3, r9, r3
 80072d8:	4313      	orrs	r3, r2
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	46a2      	mov	sl, r4
 80072de:	e7d2      	b.n	8007286 <_vfiprintf_r+0xc6>
 80072e0:	9b03      	ldr	r3, [sp, #12]
 80072e2:	1d19      	adds	r1, r3, #4
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	9103      	str	r1, [sp, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bfbb      	ittet	lt
 80072ec:	425b      	neglt	r3, r3
 80072ee:	f042 0202 	orrlt.w	r2, r2, #2
 80072f2:	9307      	strge	r3, [sp, #28]
 80072f4:	9307      	strlt	r3, [sp, #28]
 80072f6:	bfb8      	it	lt
 80072f8:	9204      	strlt	r2, [sp, #16]
 80072fa:	7823      	ldrb	r3, [r4, #0]
 80072fc:	2b2e      	cmp	r3, #46	; 0x2e
 80072fe:	d10c      	bne.n	800731a <_vfiprintf_r+0x15a>
 8007300:	7863      	ldrb	r3, [r4, #1]
 8007302:	2b2a      	cmp	r3, #42	; 0x2a
 8007304:	d134      	bne.n	8007370 <_vfiprintf_r+0x1b0>
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	1d1a      	adds	r2, r3, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	9203      	str	r2, [sp, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfb8      	it	lt
 8007312:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007316:	3402      	adds	r4, #2
 8007318:	9305      	str	r3, [sp, #20]
 800731a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073f0 <_vfiprintf_r+0x230>
 800731e:	7821      	ldrb	r1, [r4, #0]
 8007320:	2203      	movs	r2, #3
 8007322:	4650      	mov	r0, sl
 8007324:	f7f8 ff54 	bl	80001d0 <memchr>
 8007328:	b138      	cbz	r0, 800733a <_vfiprintf_r+0x17a>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	eba0 000a 	sub.w	r0, r0, sl
 8007330:	2240      	movs	r2, #64	; 0x40
 8007332:	4082      	lsls	r2, r0
 8007334:	4313      	orrs	r3, r2
 8007336:	3401      	adds	r4, #1
 8007338:	9304      	str	r3, [sp, #16]
 800733a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733e:	4829      	ldr	r0, [pc, #164]	; (80073e4 <_vfiprintf_r+0x224>)
 8007340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007344:	2206      	movs	r2, #6
 8007346:	f7f8 ff43 	bl	80001d0 <memchr>
 800734a:	2800      	cmp	r0, #0
 800734c:	d03f      	beq.n	80073ce <_vfiprintf_r+0x20e>
 800734e:	4b26      	ldr	r3, [pc, #152]	; (80073e8 <_vfiprintf_r+0x228>)
 8007350:	bb1b      	cbnz	r3, 800739a <_vfiprintf_r+0x1da>
 8007352:	9b03      	ldr	r3, [sp, #12]
 8007354:	3307      	adds	r3, #7
 8007356:	f023 0307 	bic.w	r3, r3, #7
 800735a:	3308      	adds	r3, #8
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	443b      	add	r3, r7
 8007362:	9309      	str	r3, [sp, #36]	; 0x24
 8007364:	e768      	b.n	8007238 <_vfiprintf_r+0x78>
 8007366:	fb0c 3202 	mla	r2, ip, r2, r3
 800736a:	460c      	mov	r4, r1
 800736c:	2001      	movs	r0, #1
 800736e:	e7a6      	b.n	80072be <_vfiprintf_r+0xfe>
 8007370:	2300      	movs	r3, #0
 8007372:	3401      	adds	r4, #1
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 0c0a 	mov.w	ip, #10
 800737c:	4620      	mov	r0, r4
 800737e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007382:	3a30      	subs	r2, #48	; 0x30
 8007384:	2a09      	cmp	r2, #9
 8007386:	d903      	bls.n	8007390 <_vfiprintf_r+0x1d0>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0c6      	beq.n	800731a <_vfiprintf_r+0x15a>
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	e7c4      	b.n	800731a <_vfiprintf_r+0x15a>
 8007390:	fb0c 2101 	mla	r1, ip, r1, r2
 8007394:	4604      	mov	r4, r0
 8007396:	2301      	movs	r3, #1
 8007398:	e7f0      	b.n	800737c <_vfiprintf_r+0x1bc>
 800739a:	ab03      	add	r3, sp, #12
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	462a      	mov	r2, r5
 80073a0:	4b12      	ldr	r3, [pc, #72]	; (80073ec <_vfiprintf_r+0x22c>)
 80073a2:	a904      	add	r1, sp, #16
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7fd fd39 	bl	8004e1c <_printf_float>
 80073aa:	4607      	mov	r7, r0
 80073ac:	1c78      	adds	r0, r7, #1
 80073ae:	d1d6      	bne.n	800735e <_vfiprintf_r+0x19e>
 80073b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073b2:	07d9      	lsls	r1, r3, #31
 80073b4:	d405      	bmi.n	80073c2 <_vfiprintf_r+0x202>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	059a      	lsls	r2, r3, #22
 80073ba:	d402      	bmi.n	80073c2 <_vfiprintf_r+0x202>
 80073bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073be:	f7fe fbcf 	bl	8005b60 <__retarget_lock_release_recursive>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	065b      	lsls	r3, r3, #25
 80073c6:	f53f af1d 	bmi.w	8007204 <_vfiprintf_r+0x44>
 80073ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073cc:	e71c      	b.n	8007208 <_vfiprintf_r+0x48>
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	462a      	mov	r2, r5
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <_vfiprintf_r+0x22c>)
 80073d6:	a904      	add	r1, sp, #16
 80073d8:	4630      	mov	r0, r6
 80073da:	f7fd ffc3 	bl	8005364 <_printf_i>
 80073de:	e7e4      	b.n	80073aa <_vfiprintf_r+0x1ea>
 80073e0:	08008164 	.word	0x08008164
 80073e4:	0800816e 	.word	0x0800816e
 80073e8:	08004e1d 	.word	0x08004e1d
 80073ec:	0800719b 	.word	0x0800719b
 80073f0:	0800816a 	.word	0x0800816a

080073f4 <__sflush_r>:
 80073f4:	898a      	ldrh	r2, [r1, #12]
 80073f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fa:	4605      	mov	r5, r0
 80073fc:	0710      	lsls	r0, r2, #28
 80073fe:	460c      	mov	r4, r1
 8007400:	d458      	bmi.n	80074b4 <__sflush_r+0xc0>
 8007402:	684b      	ldr	r3, [r1, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	dc05      	bgt.n	8007414 <__sflush_r+0x20>
 8007408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	dc02      	bgt.n	8007414 <__sflush_r+0x20>
 800740e:	2000      	movs	r0, #0
 8007410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007416:	2e00      	cmp	r6, #0
 8007418:	d0f9      	beq.n	800740e <__sflush_r+0x1a>
 800741a:	2300      	movs	r3, #0
 800741c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007420:	682f      	ldr	r7, [r5, #0]
 8007422:	6a21      	ldr	r1, [r4, #32]
 8007424:	602b      	str	r3, [r5, #0]
 8007426:	d032      	beq.n	800748e <__sflush_r+0x9a>
 8007428:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	075a      	lsls	r2, r3, #29
 800742e:	d505      	bpl.n	800743c <__sflush_r+0x48>
 8007430:	6863      	ldr	r3, [r4, #4]
 8007432:	1ac0      	subs	r0, r0, r3
 8007434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007436:	b10b      	cbz	r3, 800743c <__sflush_r+0x48>
 8007438:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800743a:	1ac0      	subs	r0, r0, r3
 800743c:	2300      	movs	r3, #0
 800743e:	4602      	mov	r2, r0
 8007440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007442:	6a21      	ldr	r1, [r4, #32]
 8007444:	4628      	mov	r0, r5
 8007446:	47b0      	blx	r6
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	d106      	bne.n	800745c <__sflush_r+0x68>
 800744e:	6829      	ldr	r1, [r5, #0]
 8007450:	291d      	cmp	r1, #29
 8007452:	d82b      	bhi.n	80074ac <__sflush_r+0xb8>
 8007454:	4a29      	ldr	r2, [pc, #164]	; (80074fc <__sflush_r+0x108>)
 8007456:	410a      	asrs	r2, r1
 8007458:	07d6      	lsls	r6, r2, #31
 800745a:	d427      	bmi.n	80074ac <__sflush_r+0xb8>
 800745c:	2200      	movs	r2, #0
 800745e:	6062      	str	r2, [r4, #4]
 8007460:	04d9      	lsls	r1, r3, #19
 8007462:	6922      	ldr	r2, [r4, #16]
 8007464:	6022      	str	r2, [r4, #0]
 8007466:	d504      	bpl.n	8007472 <__sflush_r+0x7e>
 8007468:	1c42      	adds	r2, r0, #1
 800746a:	d101      	bne.n	8007470 <__sflush_r+0x7c>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b903      	cbnz	r3, 8007472 <__sflush_r+0x7e>
 8007470:	6560      	str	r0, [r4, #84]	; 0x54
 8007472:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007474:	602f      	str	r7, [r5, #0]
 8007476:	2900      	cmp	r1, #0
 8007478:	d0c9      	beq.n	800740e <__sflush_r+0x1a>
 800747a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800747e:	4299      	cmp	r1, r3
 8007480:	d002      	beq.n	8007488 <__sflush_r+0x94>
 8007482:	4628      	mov	r0, r5
 8007484:	f7ff f9f6 	bl	8006874 <_free_r>
 8007488:	2000      	movs	r0, #0
 800748a:	6360      	str	r0, [r4, #52]	; 0x34
 800748c:	e7c0      	b.n	8007410 <__sflush_r+0x1c>
 800748e:	2301      	movs	r3, #1
 8007490:	4628      	mov	r0, r5
 8007492:	47b0      	blx	r6
 8007494:	1c41      	adds	r1, r0, #1
 8007496:	d1c8      	bne.n	800742a <__sflush_r+0x36>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0c5      	beq.n	800742a <__sflush_r+0x36>
 800749e:	2b1d      	cmp	r3, #29
 80074a0:	d001      	beq.n	80074a6 <__sflush_r+0xb2>
 80074a2:	2b16      	cmp	r3, #22
 80074a4:	d101      	bne.n	80074aa <__sflush_r+0xb6>
 80074a6:	602f      	str	r7, [r5, #0]
 80074a8:	e7b1      	b.n	800740e <__sflush_r+0x1a>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	e7ad      	b.n	8007410 <__sflush_r+0x1c>
 80074b4:	690f      	ldr	r7, [r1, #16]
 80074b6:	2f00      	cmp	r7, #0
 80074b8:	d0a9      	beq.n	800740e <__sflush_r+0x1a>
 80074ba:	0793      	lsls	r3, r2, #30
 80074bc:	680e      	ldr	r6, [r1, #0]
 80074be:	bf08      	it	eq
 80074c0:	694b      	ldreq	r3, [r1, #20]
 80074c2:	600f      	str	r7, [r1, #0]
 80074c4:	bf18      	it	ne
 80074c6:	2300      	movne	r3, #0
 80074c8:	eba6 0807 	sub.w	r8, r6, r7
 80074cc:	608b      	str	r3, [r1, #8]
 80074ce:	f1b8 0f00 	cmp.w	r8, #0
 80074d2:	dd9c      	ble.n	800740e <__sflush_r+0x1a>
 80074d4:	6a21      	ldr	r1, [r4, #32]
 80074d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074d8:	4643      	mov	r3, r8
 80074da:	463a      	mov	r2, r7
 80074dc:	4628      	mov	r0, r5
 80074de:	47b0      	blx	r6
 80074e0:	2800      	cmp	r0, #0
 80074e2:	dc06      	bgt.n	80074f2 <__sflush_r+0xfe>
 80074e4:	89a3      	ldrh	r3, [r4, #12]
 80074e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f0:	e78e      	b.n	8007410 <__sflush_r+0x1c>
 80074f2:	4407      	add	r7, r0
 80074f4:	eba8 0800 	sub.w	r8, r8, r0
 80074f8:	e7e9      	b.n	80074ce <__sflush_r+0xda>
 80074fa:	bf00      	nop
 80074fc:	dfbffffe 	.word	0xdfbffffe

08007500 <_fflush_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	4605      	mov	r5, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b913      	cbnz	r3, 8007510 <_fflush_r+0x10>
 800750a:	2500      	movs	r5, #0
 800750c:	4628      	mov	r0, r5
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	b118      	cbz	r0, 800751a <_fflush_r+0x1a>
 8007512:	6a03      	ldr	r3, [r0, #32]
 8007514:	b90b      	cbnz	r3, 800751a <_fflush_r+0x1a>
 8007516:	f7fe f8d3 	bl	80056c0 <__sinit>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0f3      	beq.n	800750a <_fflush_r+0xa>
 8007522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007524:	07d0      	lsls	r0, r2, #31
 8007526:	d404      	bmi.n	8007532 <_fflush_r+0x32>
 8007528:	0599      	lsls	r1, r3, #22
 800752a:	d402      	bmi.n	8007532 <_fflush_r+0x32>
 800752c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752e:	f7fe fb16 	bl	8005b5e <__retarget_lock_acquire_recursive>
 8007532:	4628      	mov	r0, r5
 8007534:	4621      	mov	r1, r4
 8007536:	f7ff ff5d 	bl	80073f4 <__sflush_r>
 800753a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800753c:	07da      	lsls	r2, r3, #31
 800753e:	4605      	mov	r5, r0
 8007540:	d4e4      	bmi.n	800750c <_fflush_r+0xc>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	059b      	lsls	r3, r3, #22
 8007546:	d4e1      	bmi.n	800750c <_fflush_r+0xc>
 8007548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754a:	f7fe fb09 	bl	8005b60 <__retarget_lock_release_recursive>
 800754e:	e7dd      	b.n	800750c <_fflush_r+0xc>

08007550 <__swhatbuf_r>:
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	460c      	mov	r4, r1
 8007554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007558:	2900      	cmp	r1, #0
 800755a:	b096      	sub	sp, #88	; 0x58
 800755c:	4615      	mov	r5, r2
 800755e:	461e      	mov	r6, r3
 8007560:	da0d      	bge.n	800757e <__swhatbuf_r+0x2e>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007568:	f04f 0100 	mov.w	r1, #0
 800756c:	bf0c      	ite	eq
 800756e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007572:	2340      	movne	r3, #64	; 0x40
 8007574:	2000      	movs	r0, #0
 8007576:	6031      	str	r1, [r6, #0]
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	b016      	add	sp, #88	; 0x58
 800757c:	bd70      	pop	{r4, r5, r6, pc}
 800757e:	466a      	mov	r2, sp
 8007580:	f000 f848 	bl	8007614 <_fstat_r>
 8007584:	2800      	cmp	r0, #0
 8007586:	dbec      	blt.n	8007562 <__swhatbuf_r+0x12>
 8007588:	9901      	ldr	r1, [sp, #4]
 800758a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800758e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007592:	4259      	negs	r1, r3
 8007594:	4159      	adcs	r1, r3
 8007596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759a:	e7eb      	b.n	8007574 <__swhatbuf_r+0x24>

0800759c <__smakebuf_r>:
 800759c:	898b      	ldrh	r3, [r1, #12]
 800759e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075a0:	079d      	lsls	r5, r3, #30
 80075a2:	4606      	mov	r6, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	d507      	bpl.n	80075b8 <__smakebuf_r+0x1c>
 80075a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	6123      	str	r3, [r4, #16]
 80075b0:	2301      	movs	r3, #1
 80075b2:	6163      	str	r3, [r4, #20]
 80075b4:	b002      	add	sp, #8
 80075b6:	bd70      	pop	{r4, r5, r6, pc}
 80075b8:	ab01      	add	r3, sp, #4
 80075ba:	466a      	mov	r2, sp
 80075bc:	f7ff ffc8 	bl	8007550 <__swhatbuf_r>
 80075c0:	9900      	ldr	r1, [sp, #0]
 80075c2:	4605      	mov	r5, r0
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7ff f9c9 	bl	800695c <_malloc_r>
 80075ca:	b948      	cbnz	r0, 80075e0 <__smakebuf_r+0x44>
 80075cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d0:	059a      	lsls	r2, r3, #22
 80075d2:	d4ef      	bmi.n	80075b4 <__smakebuf_r+0x18>
 80075d4:	f023 0303 	bic.w	r3, r3, #3
 80075d8:	f043 0302 	orr.w	r3, r3, #2
 80075dc:	81a3      	strh	r3, [r4, #12]
 80075de:	e7e3      	b.n	80075a8 <__smakebuf_r+0xc>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	6163      	str	r3, [r4, #20]
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	6120      	str	r0, [r4, #16]
 80075f2:	b15b      	cbz	r3, 800760c <__smakebuf_r+0x70>
 80075f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f8:	4630      	mov	r0, r6
 80075fa:	f000 f81d 	bl	8007638 <_isatty_r>
 80075fe:	b128      	cbz	r0, 800760c <__smakebuf_r+0x70>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	f043 0301 	orr.w	r3, r3, #1
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	431d      	orrs	r5, r3
 8007610:	81a5      	strh	r5, [r4, #12]
 8007612:	e7cf      	b.n	80075b4 <__smakebuf_r+0x18>

08007614 <_fstat_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_fstat_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f7f9 ffc2 	bl	80015aa <_fstat>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_fstat_r+0x1c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b103      	cbz	r3, 8007630 <_fstat_r+0x1c>
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	2000448c 	.word	0x2000448c

08007638 <_isatty_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_isatty_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7f9 ffc1 	bl	80015ca <_isatty>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_isatty_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_isatty_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	2000448c 	.word	0x2000448c

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4d06      	ldr	r5, [pc, #24]	; (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	4608      	mov	r0, r1
 8007662:	602b      	str	r3, [r5, #0]
 8007664:	f7f9 ffca 	bl	80015fc <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	2000448c 	.word	0x2000448c

08007678 <__assert_func>:
 8007678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800767a:	4614      	mov	r4, r2
 800767c:	461a      	mov	r2, r3
 800767e:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <__assert_func+0x2c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4605      	mov	r5, r0
 8007684:	68d8      	ldr	r0, [r3, #12]
 8007686:	b14c      	cbz	r4, 800769c <__assert_func+0x24>
 8007688:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <__assert_func+0x30>)
 800768a:	9100      	str	r1, [sp, #0]
 800768c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007690:	4906      	ldr	r1, [pc, #24]	; (80076ac <__assert_func+0x34>)
 8007692:	462b      	mov	r3, r5
 8007694:	f000 f844 	bl	8007720 <fiprintf>
 8007698:	f000 f854 	bl	8007744 <abort>
 800769c:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <__assert_func+0x38>)
 800769e:	461c      	mov	r4, r3
 80076a0:	e7f3      	b.n	800768a <__assert_func+0x12>
 80076a2:	bf00      	nop
 80076a4:	20000068 	.word	0x20000068
 80076a8:	0800817f 	.word	0x0800817f
 80076ac:	0800818c 	.word	0x0800818c
 80076b0:	080081ba 	.word	0x080081ba

080076b4 <_calloc_r>:
 80076b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076b6:	fba1 2402 	umull	r2, r4, r1, r2
 80076ba:	b94c      	cbnz	r4, 80076d0 <_calloc_r+0x1c>
 80076bc:	4611      	mov	r1, r2
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	f7ff f94c 	bl	800695c <_malloc_r>
 80076c4:	9a01      	ldr	r2, [sp, #4]
 80076c6:	4605      	mov	r5, r0
 80076c8:	b930      	cbnz	r0, 80076d8 <_calloc_r+0x24>
 80076ca:	4628      	mov	r0, r5
 80076cc:	b003      	add	sp, #12
 80076ce:	bd30      	pop	{r4, r5, pc}
 80076d0:	220c      	movs	r2, #12
 80076d2:	6002      	str	r2, [r0, #0]
 80076d4:	2500      	movs	r5, #0
 80076d6:	e7f8      	b.n	80076ca <_calloc_r+0x16>
 80076d8:	4621      	mov	r1, r4
 80076da:	f7fe f96d 	bl	80059b8 <memset>
 80076de:	e7f4      	b.n	80076ca <_calloc_r+0x16>

080076e0 <__ascii_mbtowc>:
 80076e0:	b082      	sub	sp, #8
 80076e2:	b901      	cbnz	r1, 80076e6 <__ascii_mbtowc+0x6>
 80076e4:	a901      	add	r1, sp, #4
 80076e6:	b142      	cbz	r2, 80076fa <__ascii_mbtowc+0x1a>
 80076e8:	b14b      	cbz	r3, 80076fe <__ascii_mbtowc+0x1e>
 80076ea:	7813      	ldrb	r3, [r2, #0]
 80076ec:	600b      	str	r3, [r1, #0]
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	1e10      	subs	r0, r2, #0
 80076f2:	bf18      	it	ne
 80076f4:	2001      	movne	r0, #1
 80076f6:	b002      	add	sp, #8
 80076f8:	4770      	bx	lr
 80076fa:	4610      	mov	r0, r2
 80076fc:	e7fb      	b.n	80076f6 <__ascii_mbtowc+0x16>
 80076fe:	f06f 0001 	mvn.w	r0, #1
 8007702:	e7f8      	b.n	80076f6 <__ascii_mbtowc+0x16>

08007704 <__ascii_wctomb>:
 8007704:	b149      	cbz	r1, 800771a <__ascii_wctomb+0x16>
 8007706:	2aff      	cmp	r2, #255	; 0xff
 8007708:	bf85      	ittet	hi
 800770a:	238a      	movhi	r3, #138	; 0x8a
 800770c:	6003      	strhi	r3, [r0, #0]
 800770e:	700a      	strbls	r2, [r1, #0]
 8007710:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007714:	bf98      	it	ls
 8007716:	2001      	movls	r0, #1
 8007718:	4770      	bx	lr
 800771a:	4608      	mov	r0, r1
 800771c:	4770      	bx	lr
	...

08007720 <fiprintf>:
 8007720:	b40e      	push	{r1, r2, r3}
 8007722:	b503      	push	{r0, r1, lr}
 8007724:	4601      	mov	r1, r0
 8007726:	ab03      	add	r3, sp, #12
 8007728:	4805      	ldr	r0, [pc, #20]	; (8007740 <fiprintf+0x20>)
 800772a:	f853 2b04 	ldr.w	r2, [r3], #4
 800772e:	6800      	ldr	r0, [r0, #0]
 8007730:	9301      	str	r3, [sp, #4]
 8007732:	f7ff fd45 	bl	80071c0 <_vfiprintf_r>
 8007736:	b002      	add	sp, #8
 8007738:	f85d eb04 	ldr.w	lr, [sp], #4
 800773c:	b003      	add	sp, #12
 800773e:	4770      	bx	lr
 8007740:	20000068 	.word	0x20000068

08007744 <abort>:
 8007744:	b508      	push	{r3, lr}
 8007746:	2006      	movs	r0, #6
 8007748:	f000 f82c 	bl	80077a4 <raise>
 800774c:	2001      	movs	r0, #1
 800774e:	f7f9 fef9 	bl	8001544 <_exit>

08007752 <_raise_r>:
 8007752:	291f      	cmp	r1, #31
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4604      	mov	r4, r0
 8007758:	460d      	mov	r5, r1
 800775a:	d904      	bls.n	8007766 <_raise_r+0x14>
 800775c:	2316      	movs	r3, #22
 800775e:	6003      	str	r3, [r0, #0]
 8007760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007764:	bd38      	pop	{r3, r4, r5, pc}
 8007766:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007768:	b112      	cbz	r2, 8007770 <_raise_r+0x1e>
 800776a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800776e:	b94b      	cbnz	r3, 8007784 <_raise_r+0x32>
 8007770:	4620      	mov	r0, r4
 8007772:	f000 f831 	bl	80077d8 <_getpid_r>
 8007776:	462a      	mov	r2, r5
 8007778:	4601      	mov	r1, r0
 800777a:	4620      	mov	r0, r4
 800777c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007780:	f000 b818 	b.w	80077b4 <_kill_r>
 8007784:	2b01      	cmp	r3, #1
 8007786:	d00a      	beq.n	800779e <_raise_r+0x4c>
 8007788:	1c59      	adds	r1, r3, #1
 800778a:	d103      	bne.n	8007794 <_raise_r+0x42>
 800778c:	2316      	movs	r3, #22
 800778e:	6003      	str	r3, [r0, #0]
 8007790:	2001      	movs	r0, #1
 8007792:	e7e7      	b.n	8007764 <_raise_r+0x12>
 8007794:	2400      	movs	r4, #0
 8007796:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800779a:	4628      	mov	r0, r5
 800779c:	4798      	blx	r3
 800779e:	2000      	movs	r0, #0
 80077a0:	e7e0      	b.n	8007764 <_raise_r+0x12>
	...

080077a4 <raise>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <raise+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bfd2 	b.w	8007752 <_raise_r>
 80077ae:	bf00      	nop
 80077b0:	20000068 	.word	0x20000068

080077b4 <_kill_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d07      	ldr	r5, [pc, #28]	; (80077d4 <_kill_r+0x20>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	f7f9 feaf 	bl	8001524 <_kill>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d102      	bne.n	80077d0 <_kill_r+0x1c>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	b103      	cbz	r3, 80077d0 <_kill_r+0x1c>
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	bd38      	pop	{r3, r4, r5, pc}
 80077d2:	bf00      	nop
 80077d4:	2000448c 	.word	0x2000448c

080077d8 <_getpid_r>:
 80077d8:	f7f9 be9c 	b.w	8001514 <_getpid>

080077dc <_init>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	bf00      	nop
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr

080077e8 <_fini>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr
